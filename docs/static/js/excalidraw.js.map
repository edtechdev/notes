{"version":3,"file":"excalidraw.js","sections":[{"offset":{"line":1,"column":0},"map":{"version":3,"file":"module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min.js","lineCount":1534,"mappings":"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\/U,CAAAuT,CAAAA,SAAA,CAAA,CAAA,GAAA\/M,CAAA,CAAAxG,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAuT,CAAAA,SAAA,EAAA,CAAA,GAAAtT,EAAA,CAAA,MAAA,EAAA,IAAA,CAAA,GAAAD,CAAAuT,CAAAA,SAAA,CAAA,KAAA,CAAAvT,CAAA6S,CAAAA,QAAA,EAAA7S,CAAAuT,CAAAA,SAAAvT,EAAAuT,CAAAA,SAAA,CAAA,CAAA,KAAAxS,EAAAf,CAAA4S,CAAAA,WAAA7R,CAAAL,CAAA,KAAA,CAAA,GAAAV,CAAA6S,CAAAA,QAAA,EAAA7S,CAAA6S,CAAAA,QAAA;AAAA9R,CAAA,IAAAf,CAAAuT,CAAAA,SAAA,CAAAvT,CAAA6S,CAAAA,QAAA,CAAA9R,CAAA,CAAAf,CAAA6S,CAAAA,QAAA,CAAA9R,CAAA,CAAA4I,CAAA,CAAA3J,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAoM,CAAAA,IAAAC,CAAAA,SAAA,GAAArM,CAAA6S,CAAAA,QAAA,CAAA7S,CAAA4S,CAAAA,WAAA,EAAA5S,CAAAkT,CAAAA,MAAA,CAAAjR,GAAA,GAAA0H,CAAA,CAAA3J,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAoM,CAAAA,IAAAC,CAAAA,SAAA,EAAA,MAAA,EAAA,CAAA,MAAArM,EAAA+T,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA9T,EAAA,EAAA0J,CAAA,CAAA3J,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAoM,CAAAA,IAAAC,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAArM,CAAA6S,CAAAA,QAAA,CAAA7S,CAAA4S,CAAAA,WAAA,GAAAjJ,CAAA,CAAA3J,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAAoM,CAAAA,IAAAC,CAAAA,SAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAzF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAH,CAAA,CAAA,CAAA,IAAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAAH,CAAA,CAAA,CAAA,IAAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAAH,CAAA,CAAA,CAAA,IAAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAApD,CAAA,CAAA,CAAA,IAAAoD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAApD,CAAA,CAAA,CAAA,IAAAoD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAApD,CAAA,CAAA,CAAA,IAAAoD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAApD,CAAA,CAAA,CAAA,IAAAoD,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,CAAApD,CAAA,CAAA,CAAA,IAAAoD,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,CAAApD,CAAA,CAAA,CAAAvD,EAAAyW,CAAAA,WAAA,CAAAC,QAAA,CAAA3W,CAAA,CAAAC,EAAA,CAAA,CAAA,MAAAuH,EAAA,CAAAxH,CAAA;AAAAC,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAAqM,CAAAA,YAAA,CAAA9E,CAAAvH,EAAA2W,CAAAA,YAAA,CAAArP,CAAAtH,EAAA4W,CAAAA,gBAAA,CAAA5P,CAAAhH,EAAAuM,CAAAA,gBAAA,CAAAsK,QAAA,CAAA9W,CAAA,CAAAC,EAAA,CAAA,CAAA,MAAAD,EAAA,EAAAA,CAAAsS,CAAAA,KAAA,CAAA,CAAA,GAAAtS,CAAAsS,CAAAA,KAAAsB,CAAAA,IAAA,CAAApS,CAAA,CAAA,EAAAxB,CAAAsS,CAAAA,KAAA0C,CAAAA,MAAA,CAAA\/U,EAAA,CAAA,CAAA,CAAA,CAAAuB,CAAA,CAAA,CAAAvB,EAAAsN,CAAAA,OAAA,CAAAwJ,QAAA,CAAA\/W,CAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,CAAA,CAAAM,CAAA,IAAA,CAAAhB,CAAA,EAAA,CAAAA,CAAAsS,CAAAA,KAAA,EAAA,CAAA,CAAArS,EAAA,EAAA,CAAA,CAAAA,EAAA,CAAA,MAAAD,EAAA,CAAA8F,CAAA,CAAA9F,CAAA,CAAAwB,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,IAAAR,CAAA,CAAAhB,CAAAsS,CAAAA,KAAA,CAAA,CAAAtS,CAAAoN,CAAAA,MAAA,EAAA,CAAApN,CAAAiN,CAAAA,KAAA,EAAA,CAAA,GAAAjN,CAAAmN,CAAAA,QAAA,EAAAvH,GAAA,GAAA5E,CAAA8T,CAAAA,MAAA,EAAA,CAAA,GAAA7U,EAAA,CAAA,MAAA6F,EAAA,CAAA9F,CAAA,CAAA,CAAA,GAAAA,CAAAqM,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA7K,CAAA,CAAA,CAAA,IAAAR,CAAAoL,CAAAA,IAAA,CAAApM,CAAA,CAAAU,CAAA,CAAAM,CAAAkU,CAAAA,UAAA,CAAAlU,CAAAkU,CAAAA,UAAA,CAAAjV,EAAA,CAAA,EAAA,GAAAe,CAAA8T,CAAAA,MAAA,CAAA,GAAA,CAAA,GAAA9T,CAAA4S,CAAAA,IAAA,CAAA5T,CAAA6T,CAAAA,KAAA,CAAA,CAAA,CAAAf,CAAA,CAAA9R,CAAA,CAAA,EAAA,CAAA,CAAA8R,CAAA,CAAA9R,CAAA,CAAA,GAAA,CAAA,CAAA8R,CAAA,CAAA9R,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAAgU,CAAAA,MAAA,EAAAlC,CAAA,CAAA9R,CAAA,EAAAA,CAAAgU,CAAAA,MAAAgC,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAAhW,CAAAgU,CAAAA,MAAAiC,CAAAA,IAAA;AAAA,CAAA,CAAA,CAAA,GAAAjW,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,GAAAlW,CAAAgU,CAAAA,MAAAmC,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAAnW,CAAAgU,CAAAA,MAAAoC,CAAAA,OAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAAtE,CAAA,CAAA9R,CAAA,CAAA,GAAA,CAAAA,CAAAgU,CAAAA,MAAAqC,CAAAA,IAAA,CAAA,CAAAvE,CAAA,CAAA9R,CAAA,CAAAA,CAAAgU,CAAAA,MAAAqC,CAAAA,IAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAAvE,CAAA,CAAA9R,CAAA,CAAAA,CAAAgU,CAAAA,MAAAqC,CAAAA,IAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAAvE,CAAA,CAAA9R,CAAA,CAAAA,CAAAgU,CAAAA,MAAAqC,CAAAA,IAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAAvE,CAAA,CAAA9R,CAAA,CAAA,CAAA,GAAAA,CAAAuK,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAAvK,CAAA4K,CAAAA,QAAA,EAAA,CAAA,CAAA5K,CAAAuK,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuH,CAAA,CAAA9R,CAAA,CAAA,GAAA,CAAAA,CAAAgU,CAAAA,MAAAsC,CAAAA,EAAA,CAAA,CAAAtW,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAA,EAAAlW,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAAnV,CAAAA,MAAA,GAAA+Q,CAAA,CAAA9R,CAAA,CAAA,GAAA,CAAAA,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAAnV,CAAAA,MAAA,CAAA,CAAA+Q,CAAA,CAAA9R,CAAA,CAAAA,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAAnV,CAAAA,MAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAAf,CAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,GAAAjX,CAAA6T,CAAAA,KAAA,CAAApT,CAAA,CAAAT,CAAA6T,CAAAA,KAAA,CAAA7S,CAAAwR,CAAAA,WAAA,CAAAxR,CAAAuR,CAAAA,OAAA,CAAA,CAAA,CAAA,EAAAvR,CAAAiU,CAAAA,OAAA,CAAA,CAAA,CAAAjU,CAAA8T,CAAAA,MAAA,CAAA,EAAA,GAAAhC,CAAA,CAAA9R,CAAA,CAAA,CAAA,CAAA,CAAA8R,CAAA,CAAA9R,CAAA,CAAA,CAAA,CAAA,CAAA8R,CAAA,CAAA9R,CAAA,CAAA,CAAA,CAAA,CAAA8R,CAAA,CAAA9R,CAAA,CAAA,CAAA,CAAA,CAAA8R,CAAA,CAAA9R,CAAA,CAAA,CAAA,CAAA,CAAA8R,CAAA,CAAA9R,CAAA,CAAA,CAAA,GAAAA,CAAAuK,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAAvK,CAAA4K,CAAAA,QAAA;AAAA,CAAA,CAAA5K,CAAAuK,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAuH,CAAA,CAAA9R,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA8T,CAAAA,MAAA,CAAAnR,GAAA,CAAA,KAAA,CAAA1B,IAAAA,EAAA,CAAAA,EAAAjB,CAAAmU,CAAAA,MAAAlT,CAAA,CAAAA,EAAA,CAAAA,GAAA,CAAAA,EAAA,GAAA,CAAA,EAAAjB,CAAA4K,CAAAA,QAAA,EAAA,CAAA,CAAA5K,CAAAuK,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAvK,CAAAuK,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,GAAAvK,CAAAuK,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,GAAAvK,CAAA6R,CAAAA,QAAA,GAAA5Q,CAAA,EAAA,EAAA,CAAAjB,EAAA8T,CAAAA,MAAA,CAAAnR,GAAAS,EAAA,CAAApD,CAAA,CAAAiB,CAAA,EAAA,EAAA,CAAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAAjB,CAAA6R,CAAAA,QAAA,GAAAzO,CAAA,CAAApD,CAAA,CAAAhB,CAAA6T,CAAAA,KAAA,GAAA,EAAA,CAAA,CAAAzP,CAAA,CAAApD,CAAA,CAAA,KAAA,CAAAhB,CAAA6T,CAAAA,KAAA,CAAA,CAAA7T,EAAA6T,CAAAA,KAAA,CAAA,CAAA,CAAA,GAAA,EAAA,GAAA7S,CAAA8T,CAAAA,MAAA,CAAA,GAAA9T,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAA,CAAA,CAAA,IAAAtW,CAAA,CAAAI,CAAAuR,CAAAA,OAAA,CAAAvR,CAAAiU,CAAAA,OAAA,EAAA,KAAA,CAAAjU,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAAnV,CAAAA,MAAA,IAAAf,CAAAuR,CAAAA,OAAA,GAAAvR,CAAA+T,CAAAA,gBAAA,GAAA\/T,CAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,EAAAjW,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,GAAAZ,CAAA6T,CAAAA,KAAA,CAAApT,CAAA,CAAAT,CAAA6T,CAAAA,KAAA,CAAA7S,CAAAwR,CAAAA,WAAA,CAAAxR,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,CAAAA,CAAA,CAAA,EAAAqJ,CAAA,CAAAjK,CAAA,CAAA,CAAAY,CAAA,CAAAI,CAAAuR,CAAAA,OAAA,CAAAvR,CAAAuR,CAAAA,OAAA,GAAAvR,CAAA+T,CAAAA,gBAAA,GAAA,CAAAjC,CAAA,CAAA9R,CAAA;AAAA,GAAA,CAAAA,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAA,CAAAlW,CAAAiU,CAAAA,OAAA,CAAA,CAAA,CAAAjU,CAAAiU,CAAAA,OAAA,EAAAjU,EAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,EAAAjW,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,GAAAZ,CAAA6T,CAAAA,KAAA,CAAApT,CAAA,CAAAT,CAAA6T,CAAAA,KAAA,CAAA7S,CAAAwR,CAAAA,WAAA,CAAAxR,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,CAAAA,CAAA,CAAA,CAAAI,EAAAiU,CAAAA,OAAA,GAAAjU,CAAAgU,CAAAA,MAAAkC,CAAAA,KAAAnV,CAAAA,MAAA,GAAAf,CAAAiU,CAAAA,OAAA,CAAA,CAAA,CAAAjU,CAAA8T,CAAAA,MAAA,CAAA,EAAA,CAAA,CAAA,IAAA9T,EAAA8T,CAAAA,MAAA,CAAA,EAAA,IAAA,EAAA,GAAA9T,CAAA8T,CAAAA,MAAA,CAAA,GAAA9T,CAAAgU,CAAAA,MAAAmC,CAAAA,IAAA,CAAA,CAAAvW,CAAA,CAAAI,CAAAuR,CAAAA,OAAA,GAAA,CAAA,GAAAvR,CAAAuR,CAAAA,OAAA,GAAAvR,CAAA+T,CAAAA,gBAAA,GAAA\/T,CAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,EAAAjW,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,GAAAZ,CAAA6T,CAAAA,KAAA,CAAApT,CAAA,CAAAT,CAAA6T,CAAAA,KAAA,CAAA7S,CAAAwR,CAAAA,WAAA,CAAAxR,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,CAAAA,CAAA,CAAA,EAAAqJ,CAAA,CAAAjK,CAAA,CAAA,CAAAY,CAAA,CAAAI,CAAAuR,CAAAA,OAAA,CAAAvR,CAAAuR,CAAAA,OAAA,GAAAvR,CAAA+T,CAAAA,gBAAA,EAAA,CAAA,IAAAvU,EAAA,CAAA,MAAA,CAAAA,CAAA,CAAAQ,CAAAiU,CAAAA,OAAA,CAAAjU,CAAAgU,CAAAA,MAAAmC,CAAAA,IAAApV,CAAAA,MAAA,CAAA,GAAA,CAAAf,CAAAgU,CAAAA,MAAAmC,CAAAA,IAAA1U,CAAAA,UAAA,CAAAzB,CAAAiU,CAAAA,OAAA,EAAA,CAAA,CAAA,CAAAnC;CAAA,CAAA9R,CAAA,CAAAR,CAAA,CAAA,CAAA,MAAA,CAAA,GAAAA,CAAA,CAAAQ,EAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,EAAAjW,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,GAAAZ,CAAA6T,CAAAA,KAAA,CAAApT,CAAA,CAAAT,CAAA6T,CAAAA,KAAA,CAAA7S,CAAAwR,CAAAA,WAAA,CAAAxR,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,CAAAA,CAAA,CAAA,CAAA,EAAA,GAAAJ,CAAA,GAAAQ,CAAAiU,CAAAA,OAAA,CAAA,CAAA,CAAAjU,CAAA8T,CAAAA,MAAA,CAAA,EAAA,CAAA,CAAA,IAAA9T,EAAA8T,CAAAA,MAAA,CAAA,EAAA,IAAA,EAAA,GAAA9T,CAAA8T,CAAAA,MAAA,CAAA,GAAA9T,CAAAgU,CAAAA,MAAAoC,CAAAA,OAAA,CAAA,CAAAxW,CAAA,CAAAI,CAAAuR,CAAAA,OAAA,GAAA,CAAA,GAAAvR,CAAAuR,CAAAA,OAAA,GAAAvR,CAAA+T,CAAAA,gBAAA,GAAA\/T,CAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,EAAAjW,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,GAAAZ,CAAA6T,CAAAA,KAAA,CAAApT,CAAA,CAAAT,CAAA6T,CAAAA,KAAA,CAAA7S,CAAAwR,CAAAA,WAAA,CAAAxR,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,CAAAA,CAAA,CAAA,EAAAqJ,CAAA,CAAAjK,CAAA,CAAA,CAAAY,CAAA,CAAAI,CAAAuR,CAAAA,OAAA,CAAAvR,CAAAuR,CAAAA,OAAA,GAAAvR,CAAA+T,CAAAA,gBAAA,EAAA,CAAAvU,CAAA,CAAA,CAAA,MAAA,CAAAA,CAAA,CAAAQ,CAAAiU,CAAAA,OAAA,CAAAjU,CAAAgU,CAAAA,MAAAoC,CAAAA,OAAArV,CAAAA,MAAA,CAAA,GAAA,CAAAf,CAAAgU,CAAAA,MAAAoC,CAAAA,OAAA3U,CAAAA,UAAA,CAAAzB,CAAAiU,CAAAA,OAAA,EAAA,CAAA,CAAA,CAAAnC,EAAA,CAAA9R,CAAA,CAAAR,CAAA,CAAA,CAAA,MAAA,CAAA,GAAAA,CAAA,CAAAQ,EAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,EAAAjW,CAAAuR,CAAAA,OAAA;AAAA3R,CAAA,GAAAZ,CAAA6T,CAAAA,KAAA,CAAApT,CAAA,CAAAT,CAAA6T,CAAAA,KAAA,CAAA7S,CAAAwR,CAAAA,WAAA,CAAAxR,CAAAuR,CAAAA,OAAA,CAAA3R,CAAA,CAAAA,CAAA,CAAA,CAAA,EAAA,GAAAJ,CAAA,GAAAQ,CAAA8T,CAAAA,MAAA,CAAAtP,GAAA,CAAA,CAAA,IAAAxE,EAAA8T,CAAAA,MAAA,CAAAtP,GAAA,IAAAA,GAAA,GAAAxE,CAAA8T,CAAAA,MAAA,GAAA9T,CAAAgU,CAAAA,MAAAiC,CAAAA,IAAA,EAAAjW,CAAAuR,CAAAA,OAAA,CAAA,CAAA,CAAAvR,CAAA+T,CAAAA,gBAAA,EAAA9K,CAAA,CAAAjK,CAAA,CAAA,CAAAgB,CAAAuR,CAAAA,OAAA,CAAA,CAAA,EAAAvR,CAAA+T,CAAAA,gBAAA,GAAAjC,CAAA,CAAA9R,CAAA,CAAA,GAAA,CAAAhB,CAAA6T,CAAAA,KAAA,CAAA,CAAAf,CAAA,CAAA9R,CAAA,CAAAhB,CAAA6T,CAAAA,KAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA7T,CAAA6T,CAAAA,KAAA,CAAA,CAAA,CAAA7S,CAAA8T,CAAAA,MAAA,CAAAnR,GAAA,CAAA,EAAA3C,CAAA8T,CAAAA,MAAA,CAAAnR,GAAA,EAAA,CAAA,GAAA3C,CAAAuR,CAAAA,OAAA,CAAA,IAAAtI,CAAA,CAAAjK,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAqM,CAAAA,SAAA,CAAA,MAAArL,EAAAkU,CAAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA,CAAA,GAAAlV,CAAAmN,CAAAA,QAAA,GAAAlN,EAAA,EAAA,CAAA,GAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,IAAAS,CAAA,EAAA,CAAA,GAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAAT,EAAA,CAAA,MAAA6F,EAAA,CAAA9F,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA4F,GAAA,GAAA5E,CAAA8T,CAAAA,MAAA,EAAA,CAAA,GAAA9U,CAAAmN,CAAAA,QAAA,CAAA,MAAArH,EAAA,CAAA9F,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAAA,CAAAmN,CAAAA,QAAA,EAAA,CAAA,GAAAnM,CAAAuS,CAAAA,SAAA;AAAA,CAAA,GAAAtT,EAAA,EAAA2F,GAAA,GAAA5E,CAAA8T,CAAAA,MAAA,CAAA,CAAAlQ,CAAAA,CAAA,CAAA,GAAA5D,CAAA4K,CAAAA,QAAA,CAAA,QAAA,CAAA5L,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,IAAAS,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAAV,EAAAuT,CAAAA,SAAA,GAAA\/M,CAAA,CAAAxG,EAAA,CAAA,CAAA,CAAA,GAAAA,EAAAuT,CAAAA,SAAA,EAAA,CAAA,GAAA,CAAA,GAAAtT,CAAA,CAAA,MAAA,EAAA,MAAA,CAAA,GAAAD,EAAAmU,CAAAA,YAAA,CAAA,CAAA,CAAAzT,EAAA,CAAAO,CAAAmT,CAAAA,SAAA,CAAApU,EAAA,CAAA,CAAA,CAAAA,EAAAmT,CAAAA,MAAA,CAAAnT,EAAA6S,CAAAA,QAAA,CAAA,CAAA,CAAA7S,EAAAuT,CAAAA,SAAA,EAAA,CAAAvT,EAAA6S,CAAAA,QAAA,EAAA,CAAAnS,EAAA,GAAAiJ,CAAA,CAAA3J,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,EAAAoM,CAAAA,IAAAC,CAAAA,SAAA,CAAA,CAAA,MAAA,EAAA,CAAA,MAAArM,GAAA+T,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA9T,CAAA,EAAA0J,CAAA,CAAA3J,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,EAAAoM,CAAAA,IAAAC,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,EAAArM,EAAAsU,CAAAA,QAAA,GAAA3K,CAAA,CAAA3J,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,EAAAoM,CAAAA,IAAAC,CAAAA,SAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAArL,CAAA,CAAAf,EAAA,CAAA,CAAA,CAAA,GAAAe,CAAA4K,CAAAA,QAAA,CAAA,QAAA,CAAA5L,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,IAAAS,EAAA,CAAAK,EAAA,CAAAC,EAAA,CAAAJ,EAAA,CAAAH,GAAAT,EAAAmT,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAAxR,GAAA,EAAA3B,EAAAuT,CAAAA,SAAA,CAAA,CAAA,GAAA\/M,CAAA,CAAAxG,EAAA,CAAA,CAAA2B,GAAA;AAAA3B,EAAAuT,CAAAA,SAAA,EAAA,CAAA,GAAAtT,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,GAAAD,EAAAuT,CAAAA,SAAA,CAAA,KAAA,CAAA,GAAAvT,EAAAmU,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAA,EAAAnU,EAAAuT,CAAAA,SAAA,EAAA,CAAA,CAAAvT,EAAA6S,CAAAA,QAAA,GAAA9R,EAAA,CAAAN,EAAA,CAAAO,EAAA,CAAAhB,EAAA6S,CAAAA,QAAA,CAAA,CAAA,CAAA,IAAApS,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,CAAA,CAAA,IAAAJ,EAAA,CAAAZ,EAAA6S,CAAAA,QAAA,CAAAlR,GAAA,CAAAZ,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAD,EAAA,GAAAN,EAAA,CAAA,EAAAO,EAAA,CAAA,EAAAA,EAAA,CAAAJ,EAAA,CAAA,EAAAZ,EAAAmU,CAAAA,YAAA,CAAAxS,GAAA,EAAAf,EAAA,CAAAI,EAAA,CAAAhB,GAAAmU,CAAAA,YAAA,CAAAnU,EAAAuT,CAAAA,SAAA,GAAAvT,EAAAmU,CAAAA,YAAA,CAAAnU,EAAAuT,CAAAA,SAAA,CAAA,CAAA,GAAA,CAAA,EAAAvT,EAAAmU,CAAAA,YAAA,EAAAzT,EAAA,CAAAO,CAAAmT,CAAAA,SAAA,CAAApU,EAAA,CAAA,CAAA,CAAAA,EAAAmU,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAAnU,EAAAuT,CAAAA,SAAA,EAAAvT,EAAAmU,CAAAA,YAAA;AAAAnU,EAAA6S,CAAAA,QAAA,EAAA7S,EAAAmU,CAAAA,YAAA,CAAAnU,EAAAmU,CAAAA,YAAA,CAAA,CAAA,GAAAzT,EAAA,CAAAO,CAAAmT,CAAAA,SAAA,CAAApU,EAAA,CAAA,CAAA,CAAAA,EAAAmT,CAAAA,MAAA,CAAAnT,EAAA6S,CAAAA,QAAA,CAAA,CAAA,CAAA7S,EAAAuT,CAAAA,SAAA,EAAA,CAAAvT,EAAA6S,CAAAA,QAAA,EAAA,CAAA,CAAAnS,EAAA,GAAAiJ,CAAA,CAAA3J,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,EAAAoM,CAAAA,IAAAC,CAAAA,SAAA,CAAA,CAAA,MAAA,EAAA,CAAA,MAAArM,GAAA+T,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA9T,CAAA,EAAA0J,CAAA,CAAA3J,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,EAAAoM,CAAAA,IAAAC,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,EAAArM,EAAAsU,CAAAA,QAAA,GAAA3K,CAAA,CAAA3J,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAA,EAAAoM,CAAAA,IAAAC,CAAAA,SAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAArL,CAAA,CAAAf,EAAA,CAAA,CAAAc,CAAA,CAAAC,CAAAuK,CAAAA,KAAA,CAAAsJ,CAAAA,IAAA,CAAA7T,CAAA,CAAAf,EAAA,CAAA,IAAA,CAAA,GAAA2E,CAAA,EAAA,CAAA,GAAAA,CAAA,GAAA5D,CAAA8T,CAAAA,MAAA,CAAAlP,GAAA,EAAA,CAAA,GAAAhB,CAAA,EAAA,CAAA,GAAAA,CAAA,CAAA,MAAA,EAAA,GAAA5E,CAAAqM,CAAAA,SAAA,GAAArL,CAAAkU,CAAAA,UAAA,CAAA,CAAA,CAAA,EAAA,CAAA,IAAA,CAAA,GAAAtQ,CAAA,GAAA,CAAA,GAAA3E,EAAA,CAAAgB,CAAAsW,CAAAA,SAAA,CAAAvW,CAAA,CAAA,CAAA,CAAA,GAAAf,EAAA,GAAAgB,CAAAuW,CAAAA,gBAAA,CAAAxW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAf,EAAA,GAAA2D,CAAA,CAAA5C,CAAA2S,CAAAA,IAAA,CAAA,CAAA,CAAA,GAAA3S,CAAAuS,CAAAA,SAAA;CAAAvS,CAAA6R,CAAAA,QAAA,CAAA,CAAA,CAAA7R,CAAA4R,CAAAA,WAAA,CAAA,CAAA,CAAA5R,CAAA+S,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA9J,CAAA,CAAAjK,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAAqM,CAAAA,SAAA,EAAA,MAAArL,EAAAkU,CAAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,GAAAjV,EAAA,CAAA,CAAA,CAAA,CAAA,EAAAe,CAAA4S,CAAAA,IAAA,CAAA,CAAA,EAAA,CAAA,GAAA5S,CAAA4S,CAAAA,IAAA,EAAAd,CAAA,CAAA9R,CAAA,CAAA,GAAA,CAAAhB,CAAA6T,CAAAA,KAAA,CAAA,CAAAf,CAAA,CAAA9R,CAAA,CAAAhB,CAAA6T,CAAAA,KAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAAf,CAAA,CAAA9R,CAAA,CAAAhB,CAAA6T,CAAAA,KAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAAf,CAAA,CAAA9R,CAAA,CAAAhB,CAAA6T,CAAAA,KAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAAf,CAAA,CAAA9R,CAAA,CAAA,GAAA,CAAAhB,CAAA8T,CAAAA,QAAA,CAAA,CAAAhB,CAAA,CAAA9R,CAAA,CAAAhB,CAAA8T,CAAAA,QAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAAhB,CAAA,CAAA9R,CAAA,CAAAhB,CAAA8T,CAAAA,QAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAAhB,CAAA,CAAA9R,CAAA,CAAAhB,CAAA8T,CAAAA,QAAA,EAAA,EAAA,CAAA,GAAA,CAAA,GAAA1P,CAAA,CAAApD,CAAA,CAAAhB,CAAA6T,CAAAA,KAAA,GAAA,EAAA,CAAA,CAAAzP,CAAA,CAAApD,CAAA,CAAA,KAAA,CAAAhB,CAAA6T,CAAAA,KAAA,CAAA,CAAA,CAAA5J,CAAA,CAAAjK,CAAA,CAAA,CAAA,CAAA,CAAAgB,CAAA4S,CAAAA,IAAA,GAAA5S,CAAA4S,CAAAA,IAAA,CAAA,CAAA5S,CAAA4S,CAAAA,IAAA,EAAA,CAAA,GAAA5S,CAAAuR,CAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAtS,EAAA2N,CAAAA,UAAA,CAAA6J,QAAA,CAAAzX,CAAA,CAAA,CAAA,IAAAC,EAAA,OAAAD,EAAA,EAAAA,CAAAsS,CAAAA,KAAA,CAAA,EAAA,IAAArS,EAAA,CAAAD,CAAAsS,CAAAA,KAAAwC,CAAAA,MAAA,GAAA,EAAA,GAAA7U,EAAA,EAAA,EAAA,GAAAA,EAAA,EAAA,EAAA,GAAAA,EAAA,EAAAuF,GAAA;AAAAvF,EAAA,EAAA0D,GAAA,GAAA1D,EAAA,EAAA2F,GAAA,GAAA3F,EAAA,CAAA6F,CAAA,CAAA9F,CAAA,CAAAwB,CAAA,CAAA,CAAA,EAAAxB,CAAAsS,CAAAA,KAAA,CAAA,IAAA,CAAA3O,GAAA,GAAA1D,EAAA,CAAA6F,CAAA,CAAA9F,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwB,CAAA,CAAA,CAAAvB,EAAA2M,CAAAA,oBAAA,CAAA8K,QAAA,CAAA1X,CAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,CAAA,CAAAD,CAAA,CAAAD,CAAAmD,KAAAA,EAAA1D,EAAA8B,CAAAA,MAAA,IAAA,CAAA\/B,CAAA,EAAA,CAAAA,CAAAsS,CAAAA,KAAA,EAAA,CAAA,IAAA7R,CAAA,CAAAmT,CAAAlT,CAAAkT,CAAA5T,CAAAsS,CAAAA,KAAAsB,EAAAA,IAAA,GAAA,CAAA,GAAAnT,CAAA,EAAA,EAAA,GAAAC,CAAAoU,CAAAA,MAAA,EAAApU,CAAA6S,CAAAA,SAAA,CAAA,MAAA\/R,CAAA,CAAA,EAAA,GAAAf,CAAA,GAAAT,CAAA6T,CAAAA,KAAA,CAAAjT,CAAA,CAAAZ,CAAA6T,CAAAA,KAAA,CAAA5T,EAAA,CAAA0D,CAAA,CAAA,CAAA,CAAA,CAAAjD,EAAAkT,CAAAA,IAAA,CAAA,CAAAjQ,EAAA,EAAAjD,CAAAwS,CAAAA,MAAA,GAAA,CAAA,GAAAzS,CAAA,GAAAmD,CAAA,CAAAlD,CAAAiT,CAAAA,IAAA,CAAA,CAAAjT,CAAAmS,CAAAA,QAAA,CAAA,CAAA,CAAAnS,CAAAkS,CAAAA,WAAA,CAAA,CAAA,CAAAlS,CAAAqT,CAAAA,MAAA,CAAA,CAAA,EAAAvO,CAAA,CAAA,IAAAxE,CAAAqM,CAAAA,IAAA,CAAA3M,CAAAwS,CAAAA,MAAA,CAAA,CAAAlS,CAAAqO,CAAAA,QAAA,CAAA7J,CAAA,CAAAvF,EAAA,CAAA0D,CAAA,CAAAjD,CAAAwS,CAAAA,MAAA,CAAAxS,CAAAwS,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAAjT,EAAA,CAAAuF,CAAA,CAAA7B,CAAA,CAAAjD,CAAAwS,CAAAA,MAAA,CAAA1S,EAAA,CAAAR,CAAAmN,CAAAA,QAAA,KAAAxL,GAAA3B,CAAAkN,CAAAA,OAAA,KAAAjL,EAAAjC,CAAAiN,CAAAA,KAAAjN,EAAAmN,CAAAA,QAAA,CAAAxJ,CAAA3D,EAAAkN,CAAAA,OAAA,CAAA,CAAAlN,EAAAiN,CAAAA,KAAA,CAAAhN,EAAA,KAAAuG,CAAA,CAAA9F,CAAA,CAAA,CAAA,CAAA;AAAAA,CAAA6S,CAAAA,SAAA,CAAA,CAAA,CAAAxS,EAAA,CAAAL,CAAAmS,CAAAA,QAAA5R,EAAA,CAAAP,CAAA6S,CAAAA,SAAA,CAAA,CAAA,GAAA7S,EAAAsT,CAAAA,KAAA,EAAAtT,CAAAsT,CAAAA,KAAA,EAAAtT,CAAAuT,CAAAA,UAAA,CAAAvT,CAAAyS,CAAAA,MAAA,CAAApS,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAL,CAAAwT,CAAAA,SAAA,CAAAxT,CAAA2S,CAAAA,IAAA,CAAAtS,EAAA,CAAAL,CAAA0S,CAAAA,MAAA,CAAA,CAAA1S,CAAAiT,CAAAA,IAAA,CAAAjT,CAAAsT,CAAAA,KAAA,CAAA,CAAAtT,CAAAiT,CAAAA,IAAA,CAAAjT,CAAAsT,CAAAA,KAAA,CAAA,CAAAjT,EAAA,CAAAA,EAAA,EAAA,OAAA,EAAAE,CAAA,CAAAP,EAAAmS,CAAAA,QAAA,CAAA9R,EAAAL,EAAA6S,CAAAA,SAAA,CAAA,CAAA\/M,EAAA,CAAA9F,CAAA,CAAA,CAAA,MAAAA,EAAAmS,CAAAA,QAAA,EAAAnS,CAAA6S,CAAAA,SAAA,CAAA7S,CAAAkS,CAAAA,WAAA,CAAAlS,CAAAmS,CAAAA,QAAA,CAAAnS,CAAAqT,CAAAA,MAAA,CAAArT,CAAA6S,CAAAA,SAAA,CAAA7S,CAAA6S,CAAAA,SAAA,CAAA,CAAA,CAAA7S,CAAAyT,CAAAA,YAAA,CAAAzT,CAAAsS,CAAAA,WAAA,CAAA,CAAA,CAAAtS,CAAA8T,CAAAA,eAAA,CAAA,CAAA,CAAAxU,CAAAkN,CAAAA,OAAA,CAAAvL,EAAA,CAAA3B,CAAAiN,CAAAA,KAAA,CAAAhL,CAAA,CAAAjC,CAAAmN,CAAAA,QAAA,CAAA3M,CAAA,CAAAE,CAAAkT,CAAAA,IAAA,CAAAnT,CAAA,CAAA,CAAA,CAAAR,EAAA0X,CAAAA,WAAA,CAAA,oCAAA,CAA7oH,CAA6oH,KAAAC,QAAA,CAAA5X,CAAA,CAAA,CAAAA,CAAAF,CAAAA,OAAA,CAAAoL,QAAA,EAAA,CAAA,IAAAoM,CAAAA,EAAA,CAAA,IAAAO,CAAAA,MAAA;AAAA,IAAAR,CAAAA,IAAA,CAAA,IAAAL,CAAAA,IAAA,CAAA,CAAA,KAAAE,CAAAA,KAAA,CAAA,IAAA,KAAAY,CAAAA,SAAA,CAAA,CAAA,KAAAV,CAAAA,OAAA,CAAA,IAAAD,CAAAA,IAAA,CAAA,EAAA,KAAAF,CAAAA,IAAA,CAAA,CAAA,KAAAc,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAA7oH,CAA6oH,KAAAC,QAAA,CAAAhY,CAAA,CAAA,CAAAA,CAAAF,CAAAA,OAAA,CAAAoL,QAAA,CAAAlL,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAA6S,CAAA,CAAAlO,CAAA,CAAA6B,CAAA,KAAA\/F,EAAAV,CAAAsS,CAAAA,KAAA,KAAAvR,EAAAf,CAAAkN,CAAAA,OAAA,KAAA1J,EAAAxD,CAAAiN,CAAAA,KAAA,KAAAjM,EAAAD,CAAAC,EAAAhB,CAAAmN,CAAAA,QAAAnM,CAAA,CAAAA,CAAA,KAAAC,EAAAjB,CAAAsN,CAAAA,QAAA,KAAA1G,EAAA5G,CAAAoN,CAAAA,MAAAxM,EAAA,CAAAK,CAAA,EAAAhB,CAAA,CAAAD,CAAAqM,CAAAA,SAAA,CAAA,KAAA5L,EAAAQ,CAAAR,EAAAT,CAAAqM,CAAAA,SAAA5L,CAAA,GAAAA,CAAA,KAAAD,EAAAE,CAAAuX,CAAAA,IAAA,KAAAzW,GAAAd,CAAAwX,CAAAA,KAAA,KAAAvW,EAAAjB,CAAAyX,CAAAA,KAAA,KAAAlW,EAAAvB,CAAA0X,CAAAA,KAAA,KAAA5S,EAAA9E,CAAAyS,CAAAA,MAAA,KAAAxP,EAAAjD,CAAA2X,CAAAA,IAAA,KAAAzS,EAAAlF,CAAA4X,CAAAA,IAAA,KAAAxS,EAAApF,CAAA6X,CAAAA,OAAA,KAAA7O,EAAAhJ,CAAA8X,CAAAA,QAAA,KAAA5U,GAAA,CAAAA,EAAAlD,CAAA+X,CAAAA,OAAA7U,EAAA,CAAA,KAAAqG,GAAA,CAAAA,EAAAvJ,CAAAgY,CAAAA,QAAAzO,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAArE,CAAA,GAAAjC,CAAA,EAAAH,CAAA,CAAAzC,CAAA,EAAA,CAAA;AAAA6E,CAAA,CAAAA,CAAA,EAAA,CAAA,CAAAjC,CAAA,EAAAH,CAAA,CAAAzC,CAAA,EAAA,CAAA,EAAA6E,CAAA,CAAAA,CAAA,EAAA,CAAA,CAAA,KAAA+D,EAAA7D,CAAA,CAAAnC,CAAA,CAAAC,CAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAAD,CAAA,IAAAmP,CAAA,CAAAnJ,CAAA,GAAA,EAAA,CAAA\/D,CAAA,EAAAkN,CAAA,CAAA,CAAA,IAAAA,CAAA,CAAAnJ,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,CAAA\/C,CAAA,CAAA3F,CAAA,EAAA,CAAA,CAAA,KAAA,CAAA0I,CAAA,KAAA,CAAA,GAAA,EAAA,EAAA,CAAAmJ,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,EAAA,CAAAA,CAAA,EAAA,CAAAnJ,CAAA,CAAA7D,CAAA,EAAA,KAAA,CAAA6D,CAAA,GAAAhG,CAAA,EAAA,CAAA,EAAAmP,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,CAAA,GAAA,EAAA,CAAAA,CAAA,CAAA,CAAApS,CAAAiY,CAAAA,IAAA,CAAA,EAAA,OAAA,CAAA,CAAA3Y,CAAAiM,CAAAA,GAAA,CAAA,6BAAAvL,EAAAiY,CAAAA,IAAA,CAAA,EAAA,OAAA,CAAA,CAAA,IAAAvU,GAAA,KAAAA,CAAAuF,CAAA,EAAAmJ,CAAA,EAAA,EAAA,IAAAlN,CAAA,CAAAkN,CAAA,GAAAnP,CAAA,EAAAH,CAAA,CAAAzC,CAAA,EAAA,CAAA,EAAA6E,CAAA,CAAAA,CAAA,EAAA,CAAA,EAAAxB,EAAA,EAAAT,CAAA,EAAA,CAAA,EAAAmP,CAAA,EAAA,CAAA,CAAAnP,CAAA,IAAAmP,CAAA,CAAAlN,CAAA,EAAAkN,CAAA,CAAA,GAAA,CAAAlN,CAAA,GAAAjC,CAAA,EAAAH,CAAA,CAAAzC,CAAA,EAAA,CAAA,EAAA6E,CAAA,CAAAA,CAAA,EAAA,CAAA,CAAAjC,CAAA,EAAAH,CAAA,CAAAzC,CAAA,EAAA,CAAA,EAAA6E,CAAA,CAAAA,CAAA,EAAA,CAAA,CAAA+D,EAAA,CAAAD,CAAA,CAAA\/F,CAAA,CAAAsG,CAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAAtG,CAAA,IAAAmP,CAAA,CAAAnJ,CAAA,GAAA,EAAA,CAAA\/D,CAAA,EAAAkN,CAAA,CAAA,EAAA,EAAA,EAAAA,CAAA,CAAAnJ,CAAA,GAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,GAAA,EAAA,CAAAmJ,CAAA,EAAA,CAAAnJ,CAAA,CAAAD,CAAA,EAAA,KAAA,CAAAC,CAAA,GAAAhG,CAAA,EAAA,CAAA,EAAAmP,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,CAAA9S,CAAAiM,CAAAA,GAAA,CAAA,uBAAAvL;CAAAiY,CAAAA,IAAA,CAAA,EAAA,OAAA,CAAA,CAAA,GAAA\/T,CAAA,CAAA,KAAA,CAAA+E,CAAA,CAAA\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\/F,CAAAqB,CAAAA,MAAA,EAAA0E,CAAA,EAAA\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\/F,CAAA0Y,CAAAA,MAAA,CAAA3S,CAAA,EAAA\/F,CAAAyX,CAAAA,KAAA,EAAAzX,CAAAkY,CAAAA,IAAA,CAAA,CAAA5Y,CAAAiM,CAAAA,GAAA,CAAA,+BAAAvL,EAAAiY,CAAAA,IAAA,CAAAhX,EAAA,MAAA,CAAA8E,CAAA,CAAA\/F,CAAA0X,CAAAA,KAAA,EAAA3R,CAAA,EAAA\/F,CAAA0X,CAAAA,KAAA,CAAA5U,CAAA,CAAA9C,CAAAwX,CAAAA,KAAA,CAAAzR,CAAA,EAAAjD,CAAA,CAAA9C,CAAA0X,CAAAA,KAAA,CAAA3R,CAAAA,EAAA,CAAA\/F,CAAAqB,CAAAA,MAAA,GAAA0E,CAAA,CAAA\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\/B,CAAA,CAAA,CAAA,CAAA+B,CAAA,EAAA\/B,CAAA,EAAA+B,CAAA,CAAA,CAAA,CAAAnE,CAAA,EAAA,CAAA,CAAA,EAAA,EAAAtB,EAAA,CAAAuE,CAAA,CAAA,CAAA,CAAA,GAAAA,CAAA,GAAAK,EAAA,CAAA,KAAAL,EAAA,CAAAxG,CAAA,CAAAS,CAAA,CAAA8E,EAAA,CAAAhC,CAAA,CAAA,CAAA,CAAA,GAAAiD,CAAA,CAAAQ,EAAA,GAAAU,CAAA,CAAA\/D,CAAA,IAAA8F,CAAA,CAAA,CAAA,CAAA,GAAAlC,CAAA,GAAAA,CAAA,CAAAP,EAAA,CAAAgD,GAAA,EAAArD,CAAA,KAAAa,CAAA,CAAA,CAAA,GAAAF,CAAA,CAAAd,CAAA,CAAAe,CAAA,EAAAD,CAAA,CAAAC,CAAA,CAAAV,EAAA,EAAA,EAAA,CAAA,GAAAW,CAAA,EAAAvF,EAAA,CAAAqF,CAAA,CAAAC,CAAA,CAAA,EAAA,CAAA,CAAAD,CAAA,EAAA,CAAAE,CAAA,GAAA,CAAA,IAAAkB,CAAA,EAAA,CAAA,EAAApB,CAAA,CAAA,CAAA,GAAAvH,CAAA,EAAA,GAAA,CAAA2I,CAAA,EAAA,CAAA,GAAA3I,CAAA,EAAA,GAAA,CAAA2I,CAAA,CAAA,MAAA,EAAAhH,EAAA,CAAA+H,CAAA,CAAA\/B,CAAA,CAAA\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\/L,CAAAA,CAAA,GAAA7S,EAAA4e,CAAAA,IAAA\/L,CAAAA,CAAA,CAAA,CAAA,EAAA9S,EAAA6e,CAAAA,IAAA\/L,CAAAA,CAAA;AAAA7S,EAAA4e,CAAAA,IAAA\/L,CAAAA,CAAA,EAAA\/H,IAAA4T,CAAAA,GAAA,CAAA3e,EAAA6e,CAAAA,IAAA\/L,CAAAA,CAAA,CAAA7S,EAAA4e,CAAAA,IAAA\/L,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA7R,EAAAc,CAAAA,MAAA,CAAA,IAAA\/B,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAAiB,EAAAc,CAAAA,MAAA,CAAA\/B,EAAA,EAAA,CAAA,CAAA,CAAAC,EAAAA,CAAAD,EAAAC,CAAA,CAAA,IAAAA,EAAA,EAAAgB,EAAAc,CAAAA,MAAA,CAAA,KAAAhB,GAAA+L,CAAAA,IAAA,CAAA,CAAA,CAAA\/B,IAAAgU,CAAAA,KAAA,CAAA9d,EAAA,CAAAjB,EAAA,CAAA6e,CAAAA,IAAA\/L,CAAAA,CAAA,CAAA,CAAAlS,EAAA,CAAA,CAAA,CAAAmK,IAAAgU,CAAAA,KAAA,CAAA9d,EAAA,CAAAhB,EAAA,CAAA4e,CAAAA,IAAA\/L,CAAAA,CAAA,CAAA,CAAAlS,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,EAAAX,EAAAgB,GAAA8F,CAAAA,OAAA,CAAA\/G,EAAA,EAAA,CAAAA,EAAA6e,CAAAA,IAAA\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AAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA;AAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA;AAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAa,CAAA,CAAAiD,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAgB,CAAAiB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAI,CAAA,CAAAiD,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA2gB,QAAAA,EAAA,CAAA3gB,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA;AAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAq2B,QAAAA,EAAA,CAAA\/2B,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA0\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\/B,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAW,CAAA,CAAAmD,MAAA,CAAArD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA,GAAAc,CAAAmB,CAAAA,CAAA,EAAAlC,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,CAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,CAAA,CAAA,CAAA,CAAAE,CAAA,CAAAmD,MAAA,CAAArD,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,CAAA;AAAAC,CAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,EAAA,CAAAU,CAAAuB,CAAAA,CAAA,CAAAhC,CAAA,CAAA,CAAA0B,EAAAA,QAAA,EAAA,CAAA,MAAAnB,EAAA,CAAA,CAAA,CAAA,KAAAO,EAAAL,CAAA,CAAA,IAAA,CAAAM,EAAAA,CAAAN,CAAA,CAAA,IAAA,CAAA,KAAAO,EAAAP,CAAA,CAAA,IAAA,CAAA,CAAAF,EAAA,GAAAQ,CAAAiC,CAAAA,CAAA,EAAA,CAAAkU,KAAA,OAAA,CAAAic,SAAA,CAAA,CAAA,CAAApG,WAAA,CAAAC,SAAA,MAAA,CAAA,CAAAK,QAAAA,QAAA,CAAAttB,CAAA,CAAAC,CAAA,CAAA,CAAA,MAAA,CAAAsuB,SAAA9tB,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAR,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAgzB,UAAA,CAAA,IAAA6H,CAAAA,OAAA,CAAA76B,CAAA,CAAA,CAAA,CAAA,CAAAuuB,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAAsM,QAAAA,QAAA,CAAA96B,CAAA,CAAA,CAAA,MAAAA,EAAAizB,CAAAA,SAAA,CAAA,CAAAlG,iBAAA,aAAA,CAAAmH,QAAAA,QAAA,CAAAl0B,CAAA,CAAA,CAAA,MAAA,CAAAA,CAAA,CAAAiB,CAAAqzB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,EAAAv0B,CAAAm1B,CAAAA,MAAA,EAAAn1B,CAAAwoB,CAAAA,IAAA,GAAAvnB,CAAAkzB,CAAAA,EAAAoO,CAAAA,KAAA,CAAA,CAAA,CAAA,CAA7oH,CAA6oH,KAAAC,QAAA,CAAAxiC,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAiH,QAAAA,EAAA,CAAA3H,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA;GAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAwH,QAAAA,EAAA,CAAAlI,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAoI,CAAA,CAAAtE,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA2H,CAAA,CAAAtE,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAk7B,QAAAA,EAAA,CAAAl7B,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA;AAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAA+gB,QAAAA,EAAA,CAAAzhB,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAi7B,CAAA,CAAAn3B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAw6B,CAAA,CAAAn3B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAyiC,QAAAA,EAAA,CAAAziC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E;AAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAgiC,QAAAA,GAAA,CAAA1iC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAwiC,CAAA,CAAA1+B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA+hC,CAAA,CAAA1+B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA;AAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA2iC,QAAAA,EAAA,CAAA3iC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAkiC,QAAAA,EAAA,CAAA5iC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAA0iC,CAAA,CAAA5+B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA;AAAAiiC,CAAA,CAAA5+B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA6iC,QAAAA,EAAA,CAAA7iC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAoiC,QAAAA,EAAA,CAAA9iC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAgjC,CAAA,CAAAl\/B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAuiC,CAAA,CAAAl\/B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAmjC,QAAAA,EAAA,CAAAnjC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E;AAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAA0iC,QAAAA,EAAA,CAAApjC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAkjC,CAAA,CAAAp\/B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAyiC,CAAA,CAAAp\/B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA;AAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAqjC,QAAAA,GAAA,CAAArjC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAA4iC,QAAAA,EAAA,CAAAtjC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA;AAAA,EAAAA,GAAA,CAAA,CAAA,CAAAwjC,CAAA,CAAA1\/B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA+iC,CAAA,CAAA1\/B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA2jC,QAAAA,EAAA,CAAA3jC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA;AAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAkjC,QAAAA,GAAA,CAAA5jC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAA0jC,CAAA,CAAA5\/B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAijC,CAAA,CAAA5\/B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA43B,QAAAA,GAAA,CAAA53B,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC;EAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAihC,QAAAA,GAAA,CAAA3hC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAA23B,EAAA,CAAA7zB,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAsH,EAAArF,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAk3B,EAAA,CAAA7zB,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA;AAAA6jC,QAAAA,GAAA,CAAA7jC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAojC,QAAAA,GAAA,CAAA9jC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,CAAAA,CAAAogC,CAAAA,uBAAA,CAAA\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\/qB,EAAA,CAAA,MAAA,GAAA2B,EAAA6\/B,CAAAA,EAAA,EAAAxhC,EAAA,CAAA,EAAA,GAAA7C,EAAAskC,CAAAA,EAAA,EAAAzhC,EAAA,CAAAnC,EAAA,CAAAiC,EAAA,CAAA,CAAA,CAAA0oB,SAAA,CAAA,CAAAxoB,EAAA0yB,CAAAA,MAAAz2B,CAAAA,MAAA,EAAA,GAAAyF,EAAAggC,CAAAA,EAAA,EAAA1hC,EAAA,CAAA,CAAA9F,EAAA8e,CAAAA,MAAA,CAAA,QAAA,CAAA9e,EAAA,CAAA,CAAA,MAAAA,GAAAW,CAAAA,EAAA,GAAAmF,EAAAnF,CAAAA,EAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAAA4tB,SAAA9M,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAxhB,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAwnC,aAAA,IAAA,CAAAtP,qBAAA,IAAA,CAAA,CAAA,CAAA3J,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAA5qB,EAAA,CAAA3D,EAAAynC,CAAAA,qBAAA,EAAA\/lC,EAAA42B,CAAAA,UAAA,CAAAt4B,EAAAynC,CAAAA,qBAAA,CAAA;AAAA,GAAAzmC,EAAAktB,CAAAA,EAAA,EAAAvqB,EAAA,CAAA,CAAA4uB,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArf,OAAAwR,CAAAA,QAAAkY,CAAAA,aAAA,WAAA8K,YAAA,EAAAlnC,EAAA,EAAA,KAAAwJ,EAAA,IAAAN,EAAA,CAAA1J,EAAA24B,CAAAA,YAAA,CAAA34B,EAAA24B,CAAAA,YAAA,CAAA,UAAA,IAAA,IAAA,IAAA53B,EAAA,CAAAf,EAAAq+B,CAAAA,cAAA,GAAA,IAAA,EAAA,GAAAt9B,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA8b,CAAAA,IAAA,EAAA7c,EAAAq+B,CAAAA,cAAA,CAAA,IAAA,CAAA,CAAA,UAAA,GAAA30B,EAAAmT,CAAAA,IAAA,EAAA,OAAA,GAAA7c,EAAA2nC,CAAAA,mBAAA,GAAA90B,EAAA,CAAAnJ,EAAA6uB,CAAAA,MAAA,EAAAp0B,EAAA,CAAAuF,EAAAk+B,CAAAA,kBAAA,GAAA\/0B,EAAA,CAAAA,EAAA\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\/6B,EAAA6oC,CAAAA,EAAA,EAAA\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\/B,CAAA4\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAA0I,CAAA,CAAA5E,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAA0D,EAAAzB,CAAAA,CAAA,EAAAlC,EAAA;AAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAiI,CAAA,CAAA5E,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAk7B,QAAAA,EAAA,CAAAl7B,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAA+gB,QAAAA,EAAA,CAAAzhB,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS;AAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAi7B,CAAA,CAAAn3B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAA0D,EAAAzB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAw6B,CAAA,CAAAn3B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAgrC,QAAAA,EAAA,CAAAhrC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA;AAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAuqC,QAAAA,EAAA,CAAAjrC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAw4C,CAAA,CAAA10C,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAA0D,EAAAzB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA;AAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA+3C,CAAA,CAAA10C,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA24C,QAAAA,EAAA,CAAA34C,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAk4C,QAAAA,EAAA,CAAA54C,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC;EAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAm4C,QAAAA,EAAA,CAAA74C,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/4C,CAAAA,MAAA,CAAA,MAAA,KAAA,KAAA\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\/nB,KAAArtB,EAAAy1C,CAAAA,EAAA,CAAA\/1C,MAAA,OAAA,CAAAwW,IAAA,IAAA,CAAAi\/B,WAAA\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\/wB,GAAAf,EAAA+zB,CAAAA,KAAA,CAAA\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\/C,CAAAA,OAAA,CAAAj\/C,GAAAV,EAAA8xB,CAAAA,QAAA\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\/kC,CAAA,CAAA,IAAA,CAAA,CAAAq\/C,GAAAr\/C,CAAA,CAAA,IAAA,CAAA,CAAAs\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\/mB,IAAAgU,CAAAA,KAAA,CAAA\/d,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAyG,EAAA+V,CAAAA,IAAA,EAAA,IAAA,CAAA,CAAAsU,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAAuU,SAAA,GAAA,CAAA,CAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAAuU,SAAA\/mB,IAAAgU,CAAAA,KAAA,CAAA\/d,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAyG,EAAA+V,CAAAA,IAAA,EAAA,IAAA,CAAA,CAAAsU,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA,IAAA;AAAA,CAAAuU,SAAA,GAAAtuB,EAAAvD,CAAAA,CAAA,EAAA,aAAA,CAAA,CAAA,CAAA,CAAA,GAAAwH,EAAA8V,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAAuU,SAAA\/mB,IAAAgU,CAAAA,KAAA,CAAA\/d,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAyG,EAAA+V,CAAAA,IAAA,EAAA,IAAA,CAAA,CAAAsU,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAAuU,SAAA,GAAAtuB,EAAAvD,CAAAA,CAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,GAAAwH,EAAA8V,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAAuU,SAAA\/mB,IAAAgU,CAAAA,KAAA,CAAA\/d,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAD,EAAAgB,CAAAA,MAAA,EAAA,GAAA0F,EAAA+V,CAAAA,IAAA,EAAA,IAAA,CAAA,CAAAsU,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAAuU,SAAA,GAAAtuB,EAAAvD,CAAAA,CAAA,EAAA,aAAA,CAAA,CAAA,CAAA,CAAA,GAAAwH,EAAA8V,CAAAA,GAAA,EAAA,IAAA,CAAA,CAAAuU,SAAA,EAAA3hB,CAAAA,MAAA,CAAApF,IAAAgU,CAAAA,KAAA,CAAA,GAAA,CAAAhe,EAAA,CAAA,CAAA,CAAAyuB,CAAAA,KAAA,CAAAzkB,IAAAkT,CAAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAAhe,EAAA,CAAAD,EAAAogD,CAAAA,iBAAA,GAAA,IAAA,EAAA,GAAAngD,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAgF,CAAAA,IAAA,CAAAjF,EAAA,CAAAA,EAAAsuB,CAAAA,QAAA,CAAAtuB,EAAAuuB,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA8xB,GAAAA,QAAA,CAAArgD,EAAA,CAAA,CAAA,MAAA,GAAAyH,EAAA8V,CAAAA,GAAA,EAAA9W,EAAAka,CAAAA,CAAA,CAAA,CAAAiT,UAAA,GAAA9gB,EAAA5Q,CAAAA,CAAA,EAAA,OAAA,CAAA,CAAA05C,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA9+B,KAAA,OAAA,CAAA+W,KAAArtB,EAAA85C,CAAAA,EAAA,CAAAnpC,KAAA,sBAAA,CAAA2jB,QAAA96B,EAAA86B,CAAAA,OAAA,CAAA\/G,MAAA,EAAA5jB,CAAAA,MAAA,CAAAnQ,EAAA+zB,CAAAA,KAAA,CAAA,MAAA,CAAA,CAAAwpB,gBAAAv9C,EAAA22B,CAAAA,QAAA,CAAA,IAAA,EAAA,CAAA\/vB,EAAA0tB,CAAAA,EAAAjwB,CAAAA,CAAAk8C,CAAAA,iBAAA,EAAA,CAAA,aAAA,EAAApwC,CAAAA,MAAA,CAAAnQ,EAAA+zB,CAAAA,KAAA,CAAA,MAAA,CAAA,CAAA,oBAAAntB,EAAA0tB,CAAAA,EAAAjwB,CAAAA,CAAA,CAAA,cAAA,cAAA,CAAA4tB,SAAAA,QAAA,EAAA,CAAA,IAAAhyB,EAAA,OAAA,KAAA,IAAAA,EAAA,CAAAD,EAAAiyB,CAAAA,QAAA,GAAA,IAAA,EAAA,GAAAhyB,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAgF,CAAAA,IAAA,CAAAjF,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAysC,GAAA\/rC,CAAA,CAAA,IAAA,CAAA,CAAA8\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAi4C,CAAA,CAAAn0C,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAA0D,EAAAzB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAw3C,CAAA,CAAAn0C,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA,CAAA,EAAA,CAAA,GAAAskC,EAAAh9B,CAAAA,CAAA,EAAA5G,EAAA,CAAAT,EAAA,CAAAO,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAsxB,SAAA,GAAAtuB,EAAAvD,CAAAA,CAAA,EAAA,6BAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAshD,GAAA7gD,CAAA,CAAA,IAAA,CAAA,CAAA8gD;AAAA9gD,CAAA,CAAA,IAAA,CAAA,CAAA+gD,GAAA\/gD,CAAA,CAAA,IAAA,CAAA,CAAAghD,GAAA,EAAAA,GAAAv8B,CAAAA,iBAAA,CAAAglB,EAAA,EAAAuX,GAAAt8B,CAAAA,aAAA,CAAA0f,EAAA,EAAA4c,GAAA3tC,CAAAA,MAAA,CAAAivB,EAAA,EAAA3d,CAAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAAq8B,GAAAp8B,CAAAA,MAAA,CAAAwd,EAAA,EAAA4e,GAAAn8B,CAAAA,kBAAA,CAAA0kB,EAAA,EAAAX,GAAA,EAAA,CAAAmY,EAAAv\/C,CAAAA,CAAA,CAAAw\/C,EAAA,CAAAD,GAAAv\/C,CAAAA,CAAA,EAAAu\/C,EAAAv\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/gD,CAAAA,CAAA,CAAAghD,EAAA,CAAAD,GAAA\/gD,CAAAA,CAAA,EAAA+gD,EAAA\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\/B,GAAAt\/B,CAAAA,MAAA,CAAAwd,EAAA,EAAA8hB,GAAAr\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\/C,EAAA4\/C,CAAAA,EAAAC,CAAAA,OAAA,CAAArnD,EAAA,CAAA,CAAA,QAAA,EAAA,CAAA2kB,QAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAC,CAAAA,OAAA,CAAArnD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAoE,EAAA,CAAAnE,EAAAgyC,CAAAA,eAAA,CAAAhwC,EAAAo9C,CAAAA,mBAAA,CAAA,CAAA,KAAAz6C,GAAA,GAAA8E,EAAAhG,CAAAA,WAAA,EAAA,QAAA,EAAA,CAAAlC,EAAA,CAAA,CAAA2tB,mBAAA,EAAA,CAAA0G,iBAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAr0B,EAAA,CAAA,CAAA,CAAAgF,GAAA,GAAAkD,EAAAhG,CAAAA,WAAA,EAAA,QAAA,EAAA,CAAA,IAAA1D;AAAA,GAAAY,EAAAsB,CAAAA,CAAA,EAAA4D,EAAA,EAAAkxB,CAAAA,IAAA,CAAAh3B,QAAAA,GAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,EAAA,OAAAoF,GAAA,EAAA8N,CAAAA,IAAA,CAAA,QAAA,CAAA5T,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAqT,CAAAA,IAAA,CAAArT,EAAAyZ,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA\/Y,EAAA,CAAAT,EAAA6e,CAAAA,MAAA,CAAA,QAAA,CAAA9e,EAAA,CAAA,CAAA,MAAA,CAAA4F,EAAA8qB,CAAAA,QAAA,CAAA1wB,EAAAW,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAF,EAAAsrC,CAAAA,UAAA,CAAArrC,EAAA,CAAAgH,CAAAA,KAAA,CAAA,QAAA,EAAA,CAAAlG,EAAA,CAAA,CAAA41B,aAAA,GAAA5zB,EAAAvD,CAAAA,CAAA,EAAA,iCAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2D,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAA5D,GAAAs3B,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAAt3B,EAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,EAAA,CAAA,CAAA,MAAAD,GAAA4J,CAAAA,KAAA,CAAA,IAAA,CAAA5H,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAvB,EAAA,CAAAe,EAAA,CAAAoE,EAAA,CAAAhC,EAAA,CAAA,CAAA,CAAA6C,GAAA,GAAAiD,EAAAhG,CAAAA,WAAA,EAAA,QAAA,EAAA,CAAAjD,EAAA6mD,CAAAA,YAAA,EAAArmD,GAAA,EAAA,CAAA,CAAA,CAAAR,EAAA,CAAAQ,EAAA,CAAA,CAAA,OAAA,GAAAwG,EAAA+V,CAAAA,IAAA,EAAA6gB,EAAAxZ,CAAAA,CAAA,CAAA,CAAA0iC,aAAA,CAAA,CAAA,CAAA3zB,UAAA,2BAAA;AAAA4zB,mBAAAvnD,EAAAgyC,CAAAA,eAAA,CAAAwV,OAAAA,QAAA,CAAAznD,EAAA,CAAA,CAAA,GAAA6H,EAAAA,CAAAA,CAAA,EAAA,SAAA,CAAA,qBAAAsI,CAAAA,MAAA,CAAAnQ,EAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,WAAAmQ,CAAAA,MAAA,CAAAlO,EAAA00B,CAAAA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAAha,IAAA7J,EAAA,CAAAgf,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA8gB,EAAAxZ,CAAAA,CAAA6iC,CAAAA,MAAA,CAAA,CAAA9zB,UAAA,0BAAA,CAAA9B,SAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAAgpC,EAAAj\/C,CAAAA,CAAA,CAAA,CAAAinB,SAAAtuB,EAAA,CAAAm9C,YAAA57C,EAAA,CAAAikD,cAAA7\/C,EAAA,CAAA8\/C,cAAA9hD,EAAA,CAAAioC,QAAAprC,EAAA,CAAAknD,oBAAAA,QAAA,EAAA,CAAA,MAAAnhD,GAAA,CAAAmD,EAAA07C,CAAAA,YAAA,CAAA,CAAA,CAAAiC,aAAA7gD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAgB,EAAA8V,CAAAA,GAAA,EAAAmpC,EAAA,CAAA,CAAAlB,gBAAA,GAAAlhB,EAAAnX,CAAAA,EAAA,EAAAxrB,EAAA,CAAA1B,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAslD,qBAAAA,QAAA,CAAAvlD,EAAA,CAAA,CAAAU,EAAA,CAAA,GAAA4G,EAAAsgD,CAAAA,EAAA,EAAA5nD,EAAA,CAAA,CAAA,CAAA;AAAAslD,eAAA1gD,EAAA,CAAAw4C,YAAA57C,EAAA,CAAAujD,iBAAAhkD,EAAA,CAAA8qC,QAAAprC,EAAA,CAAAE,GAAAH,EAAA,CAAA+tB,SAAAtuB,EAAA,CAAAwlD,cAAA7\/C,EAAA,CAAA8\/C,cAAA9hD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAAikD,GAAAnnD,CAAA,CAAA,IAAA,CAAA,CAAAonD,GAAA,EAAAA,GAAA3iC,CAAAA,iBAAA,CAAAglB,EAAA,EAAA2d,GAAA1iC,CAAAA,aAAA,CAAA0f,EAAA,EAAAgjB,GAAA\/zC,CAAAA,MAAA,CAAAivB,EAAA,EAAA3d,CAAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAAyiC,GAAAxiC,CAAAA,MAAA,CAAAwd,EAAA,EAAAglB,GAAAviC,CAAAA,kBAAA,CAAA0kB,EAAA,EAAAX,GAAA,EAAA,CAAAue,EAAA3lD,CAAAA,CAAA,CAAA4lD,EAAA,CAAAD,GAAA3lD,CAAAA,CAAA,EAAA2lD,EAAA3lD,CAAAA,CAAAsjB,CAAAA,MAAA,EAAAqiC,EAAA3lD,CAAAA,CAAAsjB,CAAAA,MAAA,KAAAuiC,GAAArnD,CAAA,CAAA,IAAA,CAAA,CAAAsnD,GAAA,EAAAA,GAAA7iC,CAAAA,iBAAA,CAAAglB,EAAA,EAAA6d,GAAA5iC,CAAAA,aAAA,CAAA0f,EAAA,EAAAkjB,GAAAj0C,CAAAA,MAAA,CAAAivB,EAAA,EAAA3d,CAAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA2iC,GAAA1iC,CAAAA,MAAA,CAAAwd,EAAA,EAAAklB,GAAAziC,CAAAA,kBAAA,CAAA0kB,EAAA,EAAAX,GAAA,EAAA,CAAAye,EAAA7lD,CAAAA,CAAA,CAAA8lD,EAAA,CAAAD,GAAA7lD,CAAAA,CAAA,EAAA6lD,EAAA7lD,CAAAA,CAAAsjB,CAAAA,MAAA,EAAAuiC,EAAA7lD,CAAAA,CAAAsjB,CAAAA,MAAA;IAAAyiC,GAAAvnD,CAAA,CAAA,IAAA,CAAA,CAAA4mC,GAAAA,QAAA,CAAAtnC,EAAA,CAAA,CAAA,MAAA,GAAAyH,EAAA8V,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAAqW,UAAA,WAAA,CAAAK,QAAAj0B,EAAAi0B,CAAAA,OAAA,CAAAnX,KAAA,QAAA,CAAAiX,MAAA,EAAA5jB,CAAAA,MAAA,CAAA,GAAA3M,EAAAvD,CAAAA,CAAA,EAAA,kBAAA,CAAA,CAAA,MAAA,CAAA,CAAA,aAAA,GAAAuD,EAAAvD,CAAAA,CAAA,EAAA,kBAAA,CAAA,CAAA6xB,SAAAtrB,EAAA0hD,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAC,GAAAA,QAAA,CAAAnoD,EAAA,CAAA,CAAA,IAAAC,GAAAD,EAAAuuB,CAAAA,QAAA,CAAA7tB,GAAAV,EAAAm8C,CAAAA,aAAA,CAAAp7C,GAAAf,EAAA89C,CAAAA,kBAAA98C,GAAAA,CAAAhB,EAAA8gD,CAAAA,mBAAA,KAAA7\/C,GAAA,GAAAwrC,EAAAsU,CAAAA,EAAA,GAAA,CAAAngD,GAAAK,EAAAmnD,CAAAA,kBAAA3nD,GAAAA,CAAAQ,EAAAonD,CAAAA,2BAAA,KAAA7nD,GAAAghC,EAAA,EAAAhgC,GAAAA,CAAA,CAAAvB,EAAAuxB,CAAAA,eAAAhwB,EAAAvB,EAAA24B,CAAAA,YAAAp3B,EAAAhB,EAAA8nD,CAAAA,aAAA,OAAA,GAAA7gD,EAAA+V,CAAAA,IAAA,EAAA,QAAA;AAAA,CAAA8e,KAAA,aAAA,CAAA1I,UAAA,oDAAA,CAAA9B,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAqW,UAAA,GAAA9gB,EAAA5Q,CAAAA,CAAA,EAAA,oDAAA,CAAA,CAAA,kDAAAjC,EAAAouC,CAAAA,cAAA,CAAA,CAAA,CAAAvc,SAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAAmtB,EAAAxoC,CAAAA,CAAAy7C,CAAAA,GAAA,CAAA,CAAAR,IAAA,CAAA,CAAArrB,SAAA,GAAArqB,EAAA+V,CAAAA,IAAA,EAAAoa,EAAA,CAAA,CAAA+nB,QAAA,eAAA,CAAA7tB,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA4lB,EAAA,CAAA,CAAA8W,aAAAv5C,EAAAu5C,CAAAA,YAAA,CAAAvmB,KAAAzzB,EAAAyzB,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAAzzB,EAAAuxB,CAAAA,eAAA,EAAA,GAAA\/pB,EAAA8V,CAAAA,GAAA,EAAA6lB,EAAA,CAAA,CAAA6W,aAAAv5C,EAAAu5C,CAAAA,YAAA,CAAArmB,UAAA,GAAA9gB,EAAA5Q,CAAAA,CAAA,EAAA,qBAAA;AAAA,CAAA,oDAAAjC,EAAAouC,CAAAA,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA7sC,EAAA,EAAA,GAAAiG,EAAA8V,CAAAA,GAAA,EAAA2uB,EAAA,CAAA,CAAA+N,aAAAv5C,EAAAu5C,CAAAA,YAAA,CAAArmB,UAAA,GAAA9gB,EAAA5Q,CAAAA,CAAA,EAAA,qBAAA,CAAA,CAAA,kDAAAjC,EAAAouC,CAAAA,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA5mC,EAAA8V,CAAAA,GAAA,EAAA3c,EAAAsgD,CAAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAAz5C,EAAA8V,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAqW,UAAA,GAAA9gB,EAAA5Q,CAAAA,CAAA,EAAA,qDAAA,CAAA,CAAA,yCAAAjC,EAAAouC,CAAAA,cAAA,CAAA,CAAA,CAAAvc,SAAA,GAAArqB,EAAA+V,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAAoU,MAAA,CAAAC,SAAA,UAAA,CAAA,CAAAC,SAAA,CAAA9wB,EAAA,EAAA,GAAAyG,EAAA8V,CAAAA,GAAA,EAAA9c,EAAAygD,CAAAA,GAAA;AAAA,EAAA,CAAA,CAAA,GAAAz5C,EAAA8V,CAAAA,GAAA,EAAA+pB,EAAA,CAAA,CAAArT,QAAAA,QAAA,EAAA,CAAA,MAAAvzB,GAAAq3C,CAAAA,aAAA,CAAAnzC,EAAAygC,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA59B,EAAA8V,CAAAA,GAAA,EAAAymB,EAAA,CAAA,CAAAmY,cAAAz7C,EAAA,CAAAo9C,mBAAA\/8C,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAonD,GAAA\/N,CAAAA,WAAA,CAAA,QAAA,KAAAmO,GAAA7nD,CAAA,CAAA,IAAA,CAAA,CAAA8nD,GAAA9nD,CAAA,CAAA,IAAA,CAAA,CAAA+nD,GAAA,CAAA,mBAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,CAAAC,GAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,CAAAC,GAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,CAAAC,GAAAA,QAAA,CAAA5oD,EAAA,CAAA,CAAAC,EAAAA,CAAAD,EAAAqxB,CAAAA,SAAA,OAAA,GAAA5pB,EAAA+V,CAAAA,IAAA,EAAA+qC,EAAArmD,CAAAA,CAAA,CAAA,CAAA2mD,WAAA,CAAA,CAAA,CAAA\/2B,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAC,CAAAA,SAAA,CAAA,EAAA,CAAA,CAAA,GAAAthD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAE,CAAAA,gBAAA;AAAA,EAAA,CAAA,CAAA\/oD,EAAAqxB,CAAAA,aAAA6hB,CAAAA,MAAA,EAAA,GAAA1rC,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAG,CAAAA,MAAA,CAAA,EAAA,CAAA,CAAAhpD,EAAAqxB,CAAAA,aAAA43B,CAAAA,WAAA,EAAA,GAAAzhD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAK,CAAAA,WAAA,CAAA,EAAA,CAAA,CAAA,GAAA1hD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAM,CAAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA3hD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAO,CAAAA,WAAA,CAAA,EAAA,CAAA,CAAA,GAAA5hD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAAonD,CAAAA,SAAA,CAAA,EAAA,CAAA,CAAA,GAAA7hD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAAqnD,CAAAA,KAAA,CAAA,CAAAx1B,MAAA,kBAAA,CAAAjC,SAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAU,CAAAA,OAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA\/hD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAAonD,CAAAA,SAAA,CAAA,EAAA,CAAA,CAAA,GAAA7hD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAW,CAAAA,WAAA,CAAA,EAAA,CAAA,CAAA,GAAAhiD,EAAA8V,CAAAA,GAAA,EAAAgrC,EAAArmD,CAAAA,CAAA4mD,CAAAA,YAAAY,CAAAA,sBAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,GAAAA,QAAA,CAAA3pD,EAAA,CAAA,CAAAA,EAAAmoC,CAAAA,iBAAAnoC;EAAAkoC,CAAAA,iBAAAloC,GAAAynC,CAAAA,YAAA,OAAA,GAAAgD,EAAAvoC,CAAAA,CAAA,EAAAlC,EAAA,CAAAyoD,EAAA,CAAA,CAAA,CAAAmB,GAAAhmD,EAAA,EAAAs4C,CAAAA,IAAA,CAAA2N,QAAA,CAAA7pD,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAAS,GAAAV,EAAAm8C,CAAAA,aAAA,CAAAp7C,GAAAf,EAAAuuB,CAAAA,QAAA,CAAAttB,GAAAjB,EAAA0yB,CAAAA,KAAA,CAAAjyB,GAAAT,EAAAo9C,CAAAA,WAAA,CAAA58C,GAAAR,EAAAsuB,CAAAA,QAAA,CAAA9sB,GAAAxB,EAAAkjB,CAAAA,MAAA,CAAAvhB,GAAA3B,EAAAygD,CAAAA,YAAA,CAAAx+C,GAAAjC,EAAA0gD,CAAAA,gBAAA,CAAAl7C,GAAAxF,EAAA2gD,CAAAA,eAAA,CAAA\/6C,GAAA5F,EAAA8mD,CAAAA,gBAAA,CAAAp9C,GAAA1J,EAAA89C,CAAAA,kBAAA,CAAAl6C,GAAA5D,EAAA4gD,CAAAA,gBAAA,CAAA32C,GAAAjK,EAAAogD,CAAAA,iBAAA,CAAAz2C,GAAA3J,EAAA8pD,CAAAA,mBAAA,CAAA1lD,GAAApE,EAAA+kD,CAAAA,gBAAA,CAAAngD,GAAA5E,EAAAqxB,CAAAA,SAAA,CAAA7qB,GAAAxG,EAAAqnC,CAAAA,cAAA,CAAA5gC,GAAAzG,EAAA6rC,CAAAA,OAAA,CAAAjlC,GAAA5G,EAAAW,CAAAA,EAAA,CAAAmG,GAAA9G,EAAAq9C,CAAAA,aAAA,CAAAp2C,GAAAjH,EAAA8gD,CAAAA,mBAAA,CAAAn4C;AAAA3I,EAAA8xB,CAAAA,QAAA,CAAAnqB,GAAA65B,EAAA,EAAA,CAAAt5B,GAAA,GAAAukC,EAAAsd,CAAAA,EAAA,GAAA,CAAA7nD,GAAAA,QAAA,EAAA,CAAA,MAAA0C,GAAA0sB,CAAAA,aAAA6hB,CAAAA,MAAA,CAAA,GAAA1rC,EAAA8V,CAAAA,GAAA,EAAA6jC,EAAA,CAAA,CAAA9yB,SAAA9tB,EAAA,CAAA+tB,SAAAxtB,EAAA,CAAA2xB,MAAAzxB,EAAA,CAAAk7C,cAAAz7C,EAAA,CAAA0iD,WAAAx+C,EAAA0sB,CAAAA,aAAA6hB,CAAAA,MAAA,CAAAjwB,OAAA1hB,EAAA,CAAA47C,YAAA38C,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAAwC,GAAAA,QAAA,EAAA,CAAA,GAAA,CAAA2B,EAAA0sB,CAAAA,aAAA43B,CAAAA,WAAA,CAAA,MAAA,KAAA,KAAAlpD,GAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,MAAA,SAAA,EAAA,CAAA,IAAAC,GAAA,GAAAW,EAAAsB,CAAAA,CAAA,EAAA4D,EAAA,EAAAkxB,CAAAA,IAAA,CAAA\/2B,QAAAA,GAAA,CAAAS,EAAA,CAAA,CAAA,IAAAM,EAAA,OAAA8E,GAAA,EAAA8N,CAAAA,IAAA,CAAA,QAAA,CAAA3T,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAoT,CAAAA,IAAA,CAAApT,EAAAwZ,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAA,GAAA5R,EAAAA,CAAAA,CAAA,EAAA,QAAA,CAAA7H,EAAA,CAAA,IAAA,CAAA,CAAAC,EAAAwZ,CAAAA,IAAA,CAAA,CAAA,CAAA,GAAApV,EAAA6yB,CAAAA,EAAA,EAAAl3B,EAAA,CAAAU,EAAA,CAAAK,EAAA,CAAAE,EAAA,CAAA,CAAA6xB,iBAAA\/xB,EAAA+xB,CAAAA,gBAAA;AAAA3b,KAAApW,EAAAoW,CAAAA,IAAA,CAAAsa,oBAAA1wB,EAAA0wB,CAAAA,mBAAA,CAAA,CAAA\/pB,CAAAA,KAAA,CAAAH,EAAAyiD,CAAAA,EAAA,CAAAtiD,CAAAA,KAAA,CAAA,QAAA,CAAA1H,EAAA,CAAA,CAAAsE,OAAAyE,CAAAA,KAAA,CAAA\/I,EAAA,CAAAS,GAAA,CAAA,CAAA22B,aAAAp3B,EAAAq3B,CAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAAr2B,EAAA,CAAAf,EAAAo7B,CAAAA,IAAA,CAAAt6B,EAAAgyB,CAAAA,gBAAA,EAAA\/xB,EAAA,EAAA,GAAAmrC,EAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/D,MAAAntB,EAAA,CAAAotB,OAAA\/sB,EAAA,CAAAwvD,OAAA\/oD,EAAAwuB,CAAAA,EAAAC,CAAAA,IAAA,CAAA,CAAApI,MAAA7sB,EAAA,CAAA8sB,OAAA7sB,EAAA,CAAA0b,IAAA,IAAA6zC,CAAAA,eAAA,CAAAhU,cAAA,IAAAiU,CAAAA,uBAAA,CAAAC,cAAA,IAAAC,CAAAA,uBAAA,CAAAC,YAAA,IAAAC,CAAAA,qBAAA,CAAAC,gBAAA,IAAAC,CAAAA,aAAA,CAAAC,YAAA,IAAAC,CAAAA,eAAA,CAAAzT,cAAA,IAAA0T,CAAAA,uBAAA,CAAAp\/B,SAAA,GAAAtuB,EAAAvD,CAAAA,CAAA,EAAA,sBAAA,CAAA,CAAA,CAAA,CAAA,GAAAwH,EAAA8V,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAAqW,UAAA,oBAAA,CAAAhC,MAAA,CAAA\/D,MAAAntB,EAAA,CAAAotB,OAAA\/sB,EAAA,CAAA,CAAA8sB,MAAA7sB,EAAA,CAAA8sB,OAAA7sB,EAAA,CAAA0b,IAAA,IAAA6zC,CAAAA,eAAA,CAAAhU,cAAA,IAAAiU,CAAAA,uBAAA;AAAAjT,cAAA,IAAA0T,CAAAA,uBAAA,CAAAC,cAAA,IAAAC,CAAAA,uBAAA,CAAAV,cAAA,IAAAC,CAAAA,uBAAA,CAAAC,YAAA,IAAAC,CAAAA,qBAAA,CAAAC,gBAAA,IAAAC,CAAAA,aAAA,CAAAC,YAAA,IAAAC,CAAAA,eAAA,CAAAn\/B,SAAA,GAAAtuB,EAAAvD,CAAAA,CAAA,EAAA,sBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyc,IAAA,QAAA,CAAAxW,MAAAA,QAAA,EAAA,CAAA,IAAAlG,EAAA,CAAAC,GAAA,IAAA,CAAAS,GAAA,GAAA4jC,EAAAnX,CAAAA,EAAA,EAAA,IAAA2Z,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAA,IAAA\/+C,CAAAA,KAAA,CAAA,CAAAvR,GAAA,IAAAgc,CAAAA,KAAA,CAAA\/b,GAAAD,EAAA6\/C,CAAAA,gBAAA3\/C,GAAAA,CAAAF,EAAAq\/C,CAAAA,iBAAA,OAAA,GAAA34C,EAAA8V,CAAAA,GAAA,EAAA,KAAA,CAAA,CAAAqW,UAAA,GAAA9gB,EAAA5Q,CAAAA,CAAA,EAAA,iCAAA;AAAA,CAAA,wBAAA,IAAAoQ,CAAAA,KAAAkf,CAAAA,eAAA,CAAA,qBAAA,IAAAkF,CAAAA,MAAAC,CAAAA,QAAA,CAAA,CAAA,CAAAha,IAAA,IAAAqzC,CAAAA,sBAAA,CAAAsB,OAAA,IAAAC,CAAAA,eAAA,CAAAC,SAAA,CAAA,CAAA53B,UAAA,IAAA7c,CAAAA,KAAA00C,CAAAA,sBAAA,CAAA,IAAA,EAAA,CAAA,IAAA73B,CAAAA,SAAA,CAAA9H,SAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA0vC,EAAAzjD,CAAAA,QAAA,CAAA,CAAAtD,MAAA,IAAA6pD,CAAAA,wBAAA,CAAAj+B,SAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAAyvC,EAAAxjD,CAAAA,QAAA,CAAA,CAAAtD,MAAA,IAAAwwB,CAAAA,MAAA,CAAA5E,SAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA6vC,EAAA5jD,CAAAA,QAAA,CAAA,CAAAtD,MAAA,IAAAk3C,CAAAA,WAAA,CAAAtrB,SAAA,GAAArqB,EAAA+V,CAAAA,IAAA,EAAA2vC,EAAA3jD,CAAAA,QAAA,CAAA,CAAAtD,MAAA,IAAAoM,CAAAA,KAAA,CAAAwf,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAA2vC,EAAA1jD,CAAAA,QAAA,CAAA,CAAAtD,MAAA,IAAA4gC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA;AAAAv\/B,SAAA,GAAArqB,EAAA+V,CAAAA,IAAA,EAAA6vC,EAAA7jD,CAAAA,QAAA,CAAA,CAAAtD,MAAA,IAAAi2C,CAAAA,aAAA,CAAArqB,SAAA,CAAA,GAAArqB,EAAA8V,CAAAA,GAAA,EAAAqsC,EAAA,CAAA,CAAA1mC,OAAA,IAAAA,CAAAA,MAAA,CAAAqL,SAAA,IAAAjc,CAAAA,KAAA,CAAAogB,MAAA,IAAAA,CAAAA,KAAA,CAAA0qB,YAAA,IAAAA,CAAAA,WAAA,CAAAjB,cAAA,IAAAA,CAAAA,aAAA,CAAA7tB,SAAA,IAAAwY,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAA5Q,aAAA,IAAAvQ,CAAAA,UAAA,CAAAyQ,gBAAA,IAAA+Q,CAAAA,aAAA,CAAAhR,iBAAA,IAAAA,CAAAA,gBAAA,CAAAoG,iBAAAA,QAAA,CAAA9mD,EAAA,CAAA,CAAA,MAAAC,GAAA0xD,CAAAA,6BAAA,CAAA,CAAArjC,SAAAtuB,EAAA,CAAA6xB,SAAA,QAAA,CAAAa,MAAA,IAAA,CAAA,CAAA,CAAA,CAAAk\/B,SAAA,GAAApuD,EAAAu5B,CAAAA,EAAA,GAAAvU,CAAAA,IAAA,CAAAo4B,iBAAA5\/C,EAAA;AAAAo\/C,kBAAAn\/C,EAAA,CAAA6oD,oBAAA,IAAA\/sC,CAAAA,KAAA80C,CAAAA,aAAA,CAAA\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\/C,CAAAA,UAAA,GAAA7xD,EAAA,CAAAoS,MAAAy\/C,CAAAA,UAAA,CAAA,cAAAziD,CAAAA,MAAA,CAAA3I,EAAAqrD,CAAAA,EAAA,CAAA,oBAAA,CAAA1iD,CAAAA,MAAA,CAAA3I,EAAAsrD,CAAAA,EAAA,CAAA,sBAAA,CAAA3iD,CAAAA,MAAA,CAAA3I,EAAAurD,CAAAA,EAAA;AAAA,KAAA,CAAA,CAAA,CAAA\/xD,EAAA,CAAAmS,MAAAy\/C,CAAAA,UAAA,CAAA,cAAAziD,CAAAA,MAAA,CAAA3I,EAAA0pB,CAAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CAAAjwB,EAAA,CAAAkS,MAAAy\/C,CAAAA,UAAA,CAAA,cAAAziD,CAAAA,MAAA,CAAA,IAAA,EAAA,IAAA4M,CAAAA,KAAAsU,CAAAA,SAAA2hC,CAAAA,uBAAA,CAAA,IAAAj2C,CAAAA,KAAAsU,CAAAA,SAAA2hC,CAAAA,uBAAA,CAAAxrD,EAAAyrD,CAAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CAAAryD,EAAA,CAAAA,QAAA,EAAA,CAAAH,EAAAuvD,CAAAA,sBAAA5mD,CAAAA,OAAA8pD,CAAAA,qBAAA,EAAAzyD,GAAAi2B,CAAAA,MAAA,CAAA,GAAAnvB,EAAA4rD,CAAAA,EAAA,EAAA1yD,EAAAi2B,CAAAA,MAAA,CAAA,CAAAq2B,WAAA\/rD,EAAAkV,CAAAA,OAAA,CAAAygB,SAAA51B,EAAAmV,CAAAA,OAAA,CAAAmpC,oBAAAp+C,EAAAiV,CAAAA,OAAA,CAAA,CAAA,CAAA,CAAAnV,EAAAqyD,CAAAA,WAAA,CAAAxyD,EAAA,CAAA,CAAA,IAAAyyD,CAAAA,uBAAA,CAAAC,QAAA,EAAA,CAAA,MAAAvyD,GAAAwyD,CAAAA,cAAA,CAAA3yD,EAAA,CAAA,CAAA,CAAA,CAAAiG,CAAA,IAAA2sD,eAAA,CAAArgD,MAAA6xC,CAAAA,QAAAyO,CAAAA,MAAA7oD,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA\/D,EAAAA,GAAA,CAAA,kBAAA,CAAA;AAAA,IAAA6sD,CAAAA,oBAAA,EAAA,CAAA,IAAAhB,CAAAA,aAAA,CAAA,IAAAiB,CAAAA,eAAA,CAAA,CAAA,GAAAnsD,EAAAosD,CAAAA,EAAA,GAAA,EAAA,CAAA,GAAA7oB,EAAA8oB,CAAAA,EAAA,GAAA,EAAA,IAAAzB,CAAAA,QAAA,CAAA,CAAAh7B,aAAA,GAAA3vB,EAAA8V,CAAAA,GAAA,EAAAqvC,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,EAAA,CAAA,KAAA,KAAA,CAAA,MAAA5sD,GAAAs3B,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAAt3B,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,CAAA,MAAAU,GAAAkJ,CAAAA,KAAA,CAAA,IAAA,CAAA5H,SAAA,CAAA,CAAAkE,CAAA,CAAA,CAAA,CAAAwW,IAAA,sBAAA,CAAAxW,MAAAA,QAAA,EAAA,CAAA,IAAAlG,EAAA,KAAA0yB,CAAAA,KAAA,CAAA,EAAA,KAAAJ,CAAAA,UAAArqB,CAAAA,KAAA,EAAA,KAAA,IAAAjI,EAAA,CAAA,IAAAwyD,CAAAA,cAAA,GAAA,IAAA,EAAA,GAAAxyD,EAAA,EAAAA,EAAA8zD,CAAAA,UAAA,EAAA,KAAA5B,CAAAA,SAAA,CAAA,CAAA,CAAA,KAAA6B,CAAAA,oBAAA,EAAA,KAAAjtB,CAAAA,KAAAktB,CAAAA,OAAA,EAAAzpD,aAAA,CAAAwjD,EAAA,CAAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArxC,IAAA,sBAAA;AAAAxW,MAAAA,QAAA,EAAA,CAAA,IAAAlG,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAK,EAAA,CAAAC,EAAA2jB,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAA,IAAAlD,CAAAA,aAAA,CAAApsC,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA8M,CAAAA,IAAA,CAAA,IAAAC,CAAAA,MAAA,CAAAxvC,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAgN,CAAAA,KAAA,CAAA,IAAAt9B,CAAAA,kBAAA,CAAAnS,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAiN,CAAAA,GAAA,CAAA,IAAAC,CAAAA,KAAA,CAAA,KAAA,IAAAt0D,EAAA,CAAA,IAAAgwD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAApJ,EAAA,EAAAA,EAAAknD,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAmN,CAAAA,KAAA,CAAA,IAAAC,CAAAA,OAAA,CAAA,KAAA,IAAAv0D,EAAA,CAAA,IAAAw0D,CAAAA,0BAAA,GAAA,IAAA,EAAA,GAAAx0D,EAAA,EAAAA,EAAAinD,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAsN,CAAAA,MAAA,CAAA,IAAAC,CAAAA,QAAA,CAAAhwC,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAC,CAAAA,OAAA;AAAA,IAAAztB,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAAjV,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAwN,CAAAA,UAAA,CAAA,IAAAC,CAAAA,2BAAA,CAAA,CAAA,CAAA,CAAAlwC,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA0N,CAAAA,KAAA,CAAA,IAAAC,CAAAA,OAAA,CAAA5hD,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA4N,CAAAA,MAAA,CAAA,IAAAC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA9hD,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA8N,CAAAA,MAAA,CAAA,IAAAC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAAhiD,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAgO,CAAAA,IAAA,CAAA,IAAA37B,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAA\/4B,EAAA,CAAA,IAAAsvD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAA1I,EAAA,EAAAA,EAAAwmD,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAiO,CAAAA,SAAA,CAAA,IAAAC,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAAv0D,EAAA,CAAA,IAAAivD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA;AAAArI,EAAA,EAAAA,EAAAmmD,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAmO,CAAAA,IAAA,CAAA,IAAAD,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAA3wC,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAoO,CAAAA,aAAA,CAAA,IAAAC,CAAAA,cAAA,CAAA,CAAA,CAAA,CAAA9wC,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAsO,CAAAA,cAAA,CAAA,IAAAC,CAAAA,eAAA,CAAA,CAAA,CAAA,CAAAhxC,SAAAuiC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAwO,CAAAA,WAAA,CAAA,IAAAC,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAA70D,EAAA,CAAA,IAAAqyD,CAAAA,uBAAA,GAAA,IAAA,EAAA,GAAAryD,EAAA,EAAAA,EAAAiE,CAAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAAyX,IAAA,mBAAA,CAAAxW,MAAAA,QAAA,EAAA,CAAA,IAAAlG,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAK,EAAA,CAAAC,EAAA,CAAAC,GAAA,IAAA,KAAA8yD,CAAAA,oBAAA,EAAApvC,SAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAA,IAAAlD,CAAAA,aAAA,CAAApsC;QAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA8M,CAAAA,IAAA,CAAA,IAAAC,CAAAA,MAAA,CAAA,KAAA,IAAAn0D,EAAA,CAAA,IAAAgwD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAApJ,EAAA,EAAAA,EAAAinD,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAmN,CAAAA,KAAA,CAAA,IAAAC,CAAAA,OAAA,CAAA,CAAAsB,QAAA,CAAA,CAAA,CAAA,CAAA,KAAA\/4C,CAAAA,KAAA00C,CAAAA,sBAAA,EAAA9sC,QAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAC,CAAAA,OAAA,CAAA,IAAAztB,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAAjV,SAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA0N,CAAAA,KAAA,CAAA,IAAAC,CAAAA,OAAA,CAAA,CAAAe,QAAA,CAAA,CAAA,CAAA,CAAAnxC,SAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAwN,CAAAA,UAAA,CAAA,IAAAC,CAAAA,2BAAA,CAAA,KAAA,IAAA50D,EAAA,CAAA0kB,QAAA2nC,CAAAA,KAAA,GAAA,IAAA,EAAA,GAAArsD,EAAA,EAAA,IAAA,IAAAS,EAAA,CAAAT,EAAAgnD,CAAAA,gBAAA,GAAA,IAAA,EAAA,GAAAvmD,EAAA,EAAAA,EAAAuE,CAAAA,IAAA,CAAAhF,EAAA;AAAA,aAAA,CAAA,QAAA,CAAAD,EAAA,CAAA,CAAAiB,EAAAqrD,CAAAA,KAAAT,CAAAA,aAAA,CAAA7rD,EAAA+1D,CAAAA,SAAA,CAAA,CAAA,CAAApxC,SAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAoO,CAAAA,aAAA,CAAA,IAAAC,CAAAA,cAAA,CAAA,CAAA,CAAA,CAAA9wC,SAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAsO,CAAAA,cAAA,CAAA,IAAAC,CAAAA,eAAA,CAAA,CAAA,CAAA,CAAAhxC,SAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAwO,CAAAA,WAAA,CAAA,IAAAC,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAA,KAAAvjD,CAAAA,KAAAkf,CAAAA,eAAA,GAAA7M,QAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAgN,CAAAA,KAAA,CAAA,IAAAt9B,CAAAA,kBAAA,CAAA,CAAAnS,QAAAsiC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAiN,CAAAA,GAAA,CAAA,IAAAC,CAAAA,KAAA,CAAA,CAAA,IAAAv3C,CAAAA,KAAAi5C,CAAAA,YAAA,GAAA,IAAAvB,CAAAA,0BAAA,CAAA,GAAAltD,EAAA0uD,CAAAA,EAAA,EAAA,IAAAjG,CAAAA,sBAAA5mD,CAAAA,OAAA,CAAA;AAAA,IAAAqrD,CAAAA,0BAAAxN,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAsN,CAAAA,MAAA,CAAA,IAAAC,CAAAA,QAAA,CAAA,EAAAxhD,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA4N,CAAAA,MAAA,CAAA,IAAAC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA9hD,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA8N,CAAAA,MAAA,CAAA,IAAAC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAAhiD,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAgO,CAAAA,IAAA,CAAA,IAAA37B,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA14B,EAAA,CAAA,IAAAivD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAArI,EAAA,EAAAA,EAAAkmD,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAiO,CAAAA,SAAA,CAAA,IAAAC,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAAt0D,EAAA,CAAA,IAAAgvD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAApI,EAAA,EAAAA,EAAAimD,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAmO,CAAAA,IAAA,CAAA,IAAAD,CAAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA54C,IAAA,oBAAA;AAAAxW,MAAAA,QAAA,CAAAlG,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,EAAA,CAAAK,EAAA,CAAAC,EAAA,CAAAC,GAAA,IAAA,EAAA,IAAAqR,CAAAA,KAAAq\/B,CAAAA,iBAAA,EAAA,IAAA7K,CAAAA,KAAAuT,CAAAA,2BAAA,EAAAt4C,CAAAA,MAAA,EAAA,IAAAqwD,CAAAA,QAAA,CAAA,CAAAzgB,kBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAqe,CAAAA,sBAAA5mD,CAAAA,OAAA,EAAApJ,EAAAqxB,CAAAA,SAAA2hC,CAAAA,uBAAA,GAAA,IAAAj2C,CAAAA,KAAAsU,CAAAA,SAAA2hC,CAAAA,uBAAA,EAAA,IAAAT,CAAAA,kBAAA,CAAA,IAAAvC,CAAAA,sBAAA5mD,CAAAA,OAAA,CAAA,CAAAnJ,EAAA2yC,CAAAA,OAAA,GAAA,IAAAtgC,CAAAA,KAAAsgC,CAAAA,OAAA,EAAA3yC,EAAA4yC,CAAAA,OAAA,GAAA,IAAAvgC,CAAAA,KAAAugC,CAAAA,OAAA,GAAA,IAAA,IAAA9xC,EAAA,CAAA,IAAAgc,CAAAA,KAAA,GAAA,IAAA,EAAA,GAAAhc,EAAA,EAAA,IAAA,IAAAC,EAAA,CAAAD,EAAAm1D,CAAAA,cAAA,GAAA,IAAA,EAAA,GAAAl1D,EAAA,EAAAA,EAAAiE,CAAAA,IAAA,CAAAlE,EAAA;AAAA,IAAAuR,CAAAA,KAAAsgC,CAAAA,OAAA,CAAA,IAAAtgC,CAAAA,KAAAugC,CAAAA,OAAA,CAAA9uC,OAAAoD,CAAAA,IAAA,CAAA,IAAAmL,CAAAA,KAAA6c,CAAAA,kBAAA,CAAAptB,CAAAA,MAAA,EAAA,GAAAjB,EAAA20B,CAAAA,EAAA,EAAA,IAAAnjB,CAAAA,KAAA,CAAA,EAAA,IAAA8\/C,CAAAA,QAAA,CAAA,CAAAj\/B,WAAA,GAAA5rB,EAAAmuB,CAAAA,EAAA,EAAA,IAAApjB,CAAAA,KAAA,CAAA,CAAAwK,KAAA,WAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAA,IAAAxK,CAAAA,KAAA6gB,CAAAA,UAAArW,CAAAA,IAAA,EAAA7c,EAAA0yB,CAAAA,KAAA,GAAA,IAAArgB,CAAAA,KAAAqgB,CAAAA,KAAA,EAAA,GAAAprB,EAAA4uD,CAAAA,EAAA,EAAA,IAAAjzC,CAAAA,MAAA,CAAA,IAAA5Q,CAAAA,KAAAqgB,CAAAA,KAAA,CAAA,YAAA,GAAA1yB,EAAAkzB,CAAAA,UAAArW,CAAAA,IAAA,EAAA,WAAA,GAAA,IAAAxK,CAAAA,KAAA6gB,CAAAA,UAAArW,CAAAA,IAAA,EAAA,IAAAxK,CAAAA,KAAA2gC,CAAAA,kBAAA,EAAA,IAAAmf,CAAAA,QAAA,CAAA,CAAAnf,mBAAA,CAAA,CAAA,CAAA,CAAAjzC,GAAA4xD,CAAAA,QAAA,GAAA,IAAA70C,CAAAA,KAAA60C,CAAAA,QAAA,EAAA,IAAAwE,CAAAA,cAAA,EAAAp2D,GAAAwxB,CAAAA,eAAA;AAAA,IAAAzU,CAAAA,KAAAyU,CAAAA,eAAA,EAAA,IAAA4gC,CAAAA,QAAA,CAAA,CAAA5gC,gBAAA,CAAA,CAAA,IAAAzU,CAAAA,KAAAyU,CAAAA,eAAA,CAAA,CAAAvxB,GAAAuxB,CAAAA,eAAA,GAAA,IAAAlf,CAAAA,KAAAkf,CAAAA,eAAA,GAAA,IAAA8gC,CAAAA,iBAAA,EAAA,CAAA,IAAA+D,CAAAA,gBAAA,EAAA,CAAAr2D,GAAAquC,CAAAA,cAAA,GAAA,IAAAtxB,CAAAA,KAAAsxB,CAAAA,cAAA,EAAA,IAAA+jB,CAAAA,QAAA,CAAA,CAAA\/jB,eAAA,CAAA,CAAA,IAAAtxB,CAAAA,KAAAsxB,CAAAA,cAAA,CAAA,CAAAruC,GAAA2yB,CAAAA,KAAA,GAAA,IAAA5V,CAAAA,KAAA4V,CAAAA,KAAA,EAAA,IAAA5V,CAAAA,KAAA4V,CAAAA,KAAA,EAAA,IAAAy\/B,CAAAA,QAAA,CAAA,CAAAz\/B,MAAA,IAAA5V,CAAAA,KAAA4V,CAAAA,KAAA,CAAA,CAAA3yB,GAAAmuC,CAAAA,eAAA,GAAA,IAAApxB,CAAAA,KAAAoxB,CAAAA,eAAA,EAAA,IAAAikB,CAAAA,QAAA,CAAA,CAAAp\/B,SAAA,IAAAjW,CAAAA,KAAAoxB,CAAAA,eAAA,CAAA3mC,EAAA5C,CAAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAAmY,CAAAA,KAAA5F,CAAAA,IAAA;AAAAnX,EAAAmX,CAAAA,IAAA,GAAA,IAAA4F,CAAAA,KAAA5F,CAAAA,IAAA,EAAA,IAAAi7C,CAAAA,QAAA,CAAA,CAAAj7C,KAAA,IAAA4F,CAAAA,KAAA5F,CAAAA,IAAA,CAAA,CAAA,KAAA,IAAAzW,EAAA,CAAA,IAAAsvD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAA1I,EAAA,EAAAA,EAAAk\/C,CAAAA,SAAA0W,CAAAA,MAAA,CAAA,aAAA,CAAA,MAAA,GAAA,IAAAhkD,CAAAA,KAAAqgB,CAAAA,KAAA,CAAA,KAAArgB,CAAAA,KAAA6lB,CAAAA,oBAAA,EAAA,CAAA,IAAA7lB,CAAAA,KAAA6c,CAAAA,kBAAA,CAAA,IAAA7c,CAAAA,KAAA6lB,CAAAA,oBAAAtH,CAAAA,SAAA,CAAA,EAAA9mB,UAAA,CAAA,QAAA,EAAA,CAAA9I,EAAAqR,CAAAA,KAAA6lB,CAAAA,oBAAA,EAAAl3B,EAAAk7C,CAAAA,aAAApE,CAAAA,aAAA,CAAAnzC,EAAA6\/B,CAAAA,EAAA,CAAA,CAAA,CAAA,KAAAnyB,CAAAA,KAAAu0B,CAAAA,qBAAA,EAAA,CAAA,IAAAv0B,CAAAA,KAAA6c,CAAAA,kBAAA,CAAA,IAAA7c,CAAAA,KAAAu0B,CAAAA,qBAAAhW,CAAAA,SAAA,CAAA,EAAA,IAAAuhC,CAAAA,QAAA,CAAA,CAAAvrB,sBAAA,IAAA,CAAA,CAAA;IAAAjmC,EAAA,CAAAH,EAAAD,GAAAA,CAAAP,EAAA24B,CAAAA,YAAA,EAAA34B,EAAAkzB,CAAAA,UAAA,GAAA,IAAA7gB,CAAAA,KAAA6gB,CAAAA,UAAA,EAAA,IAAA,EAAA3yB,EAAA,EAAA,GAAAyG,EAAAsvD,CAAAA,EAAA,EAAA,IAAAjkD,CAAAA,KAAA,CAAA,EAAA,GAAAkS,EAAA8iB,CAAAA,EAAA,EAAA9mC,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,GAAAyG,EAAAjE,CAAAA,CAAA,EAAAxC,EAAA,CAAA,IAAA8R,CAAAA,KAAA,CAAA,IAAAw0B,CAAAA,KAAA,CAAA,GAAAv\/B,EAAAivD,CAAAA,EAAA,EAAAnuD,EAAAzB,CAAAA,CAAAmhC,CAAAA,gCAAA,CAAAvnC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAi2D,CAAAA,WAAA,EAAA,CAAA,IAAArH,CAAAA,OAAAsH,CAAAA,MAAA,CAAA,IAAApkD,CAAAA,KAAA,CAAA,IAAAw0B,CAAAA,KAAAuT,CAAAA,2BAAA,EAAA,CAAA,CAAA,IAAA\/nC,CAAAA,KAAA4\/B,CAAAA,SAAA,GAAA,IAAA,IAAAtxC,EAAA,CAAAqxB,CAAAxxB,EAAAwxB,CAAA,IAAAlV,CAAAA,KAAAkV,EAAAA,QAAA,GAAA,IAAA,EAAA,GAAArxB,EAAA,EAAAA,EAAAqE,CAAAA,IAAA,CAAAxE,EAAA,CAAA,IAAAqmC,CAAAA,KAAAuT,CAAAA,2BAAA,EAAA,CAAA,IAAA\/nC,CAAAA,KAAA,CAAA,IAAAogB,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAhW,IAAA,kBAAA,CAAAxW,MAAAA,QAAA,CAAAlG,EAAA,CAAA,CAAA,IAAAC;AAAA,CAAAA,CAAA+B,SAAAD,CAAAA,MAAA9B,EAAA,IAAA,EAAAA,GAAA+B,SAAA,CAAA,CAAA,CAAA\/B,EAAA+B,SAAA,CAAA,CAAA,CAAA,CAAAtB,GAAA,GAAA6G,EAAAovD,CAAAA,EAAA,EAAA,CAAAC,QAAApJ,EAAA,CAAAqJ,QAAApJ,EAAA,CAAA,CAAA,IAAAn7C,CAAAA,KAAA,CAAA,CAAAvR,GAAAL,EAAAoS,CAAAA,CAAA9R,GAAAA,CAAAN,EAAAiJ,CAAAA,CAAA,KAAA\/I,GAAA,CAAAkS,EAAA\/R,EAAA,CAAA4I,EAAA3I,EAAA,CAAA0uB,YAAA,IAAApd,CAAAA,KAAAqd,CAAAA,sBAAA,CAAAL,gBAAA,IAAAhd,CAAAA,KAAAid,CAAAA,0BAAA,CAAAlP,UAAA,IAAA\/N,CAAAA,KAAAmd,CAAAA,oBAAA,CAAAnR,YAAA,IAAAhM,CAAAA,KAAAud,CAAAA,sBAAA,CAAAnM,YAAA,IAAApR,CAAAA,KAAAwd,CAAAA,sBAAA,CAAAC,UAAA,IAAA,CAAAvQ,UAAA,IAAAlN,CAAAA,KAAAsd,CAAAA,oBAAA,CAAAS,QAAA,IAAA\/d,CAAAA,KAAAktB,CAAAA,kBAAA,CAAAxoB,KAAAhX,EAAA,CAAAw+B,SAAA,IAAAlsB,CAAAA,KAAAosB,CAAAA,mBAAA;AAAAwB,WAAA,IAAA5tB,CAAAA,KAAA8tB,CAAAA,qBAAA,CAAAtR,UAAA,IAAAxc,CAAAA,KAAAuuB,CAAAA,oBAAA,CAAAlS,cAAAnnB,EAAAsvD,CAAAA,EAAA,CAAAxmC,OAAA,CAAA,CAAA,CAAA,CAAA9vB,GAAAQ,EAAA,CAAAQ,GAAAvB,EAAA,CAAA,CAAAD,EAAA,CAAA,CAAAA,EAAA6zC,CAAAA,KAAA,CAAA,IAAA,CAAAlyC,GAAAA,CAAAH,EAAAq2B,CAAAA,MAAA,CAAA,QAAA,CAAA73B,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAAM,EAAAA,CAAAf,EAAAqB,CAAAA,IAAA,EAAA,KAAAL,GAAA,GAAA8pC,EAAA5K,CAAAA,EAAA,EAAAv\/B,EAAAs\/B,CAAAA,UAAA,CAAA,IAAAl\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\/C,EAAA4\/C,CAAAA,EAAA8T,CAAAA,YAAA,CAAAn6D,EAAA,CAAAoS,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAAjzD,EAAA,CAAAD,GAAAyJ,CAAAA,KAAA,EAAA,CAAA,CAAA,OAAA6jD,GAAA,CAAArtD,EAAA,CAAAmS,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA8T,CAAAA,YAAA,CAAAn6D,EAAA,CAAA,CAAAoS,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\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\/H,IAAA4T,CAAAA,GAAA,CAAA\/d,EAAA+I,CAAAA,CAAA,CAAA3J,EAAAilD,CAAAA,MAAAt7C,CAAAA,CAAA,CAAA,CAAA,IAAA,GAAAvB,EAAA8zD,CAAAA,EAAA,EAAAl8D,EAAA,CAAA4D,EAAA,CAAAQ,EAAA,CAAAQ,EAAA,CAAAlE,EAAA8zB,CAAAA,QAAA,CAAAhuB,EAAAC,CAAA,CAAAA,CAAA,CAAAD,EAAAhD,CAAA,CAAAA,CAAA,CAAAvD,EAAAqS,CAAAA,KAAA,CAAA,CAAArS,EAAAk8D,CAAAA,yBAAA,CAAAv4D,EAAA,CAAA,CAAAlD,EAAAy0B,CAAAA,MAAA,EAAA,CAAAn1B,EAAAi6D,CAAAA,GAAAG,CAAAA,iBAAA,CAAA,CAAAp6D,EAAAi6D,CAAAA,GAAAG,CAAAA,iBAAA,CAAA,CAAA,CAAA,KAAAzxD,EAAAhB,GAAAA,CAAA,EAAAO,GAAAA,CAAA,EAAAL,GAAAA,CAAA,IAAAzB,GAAAlE,GAAAA,CAAA,IAAAkE,GAAAnD,GAAAA,CAAAjD,EAAAi6D,CAAAA,GAAAlI,CAAAA,OAAA,KAAA\/uD,GAAA\/C,EAAA6mC,CAAAA,KAAAuT,CAAAA,2BAAA,EAAA,CAAAl2C,GAAA,GAAAmgC,EAAAnX,CAAAA,EAAA,EAAAnqB,EAAA,CAAA\/C,EAAAqS,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAApJ,CAAAA,GAAA,CAAA,QAAA,CAAAlJ,EAAA,CAAA,CAAA,MAAAA,GAAAW,CAAAA,EAAA,CAAA,CAAA0D,GAAAA,CAAAy0C,CAAA,CAAA91C,EAAA,CAAA,IAAA,CAAA,IAAAqB,EAAA7D,CAAAA,CAAA,EAAA,CAAA,CAAAuX,CAAApP,EAAAoP,CAAA1T,EAAA3D,CAAAA,CAAA,EAAAqX,EAAAA,IAAA,CAAA,CAAA,CAAA,IAAAzQ,GAAAqB,EAAAzC,CAAAA,KAAA,IAAA\/B,EAAAusB,CAAAA,QAAA,CAAAppB,EAAA3G,CAAAA,EAAA,CAAA;AAAA2G,EAAA3G,CAAAA,EAAA,IAAA,IAAA,EAAAsC,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAtC,CAAAA,EAAA,GAAAX,EAAAi6D,CAAAA,GAAAE,CAAAA,mBAAA,CAAA,CAAA,IAAAhyD,GAAA,GAAAC,EAAA8+B,CAAAA,EAAA,EAAAjnC,EAAAqS,CAAAA,KAAA0lB,CAAAA,cAAA,CAAAnwB,EAAA,CAAAP,EAAA,CAAA,CAAAud,GAAA,GAAA4d,EAAA+2B,CAAAA,EAAA,EAAAx5D,EAAAilD,CAAAA,MAAAnyC,CAAAA,CAAA,CAAA9S,EAAAu6D,CAAAA,IAAAnhD,CAAAA,MAAAtG,CAAAA,CAAA,CAAA9S,EAAAilD,CAAAA,MAAAt7C,CAAAA,CAAA,CAAA3J,EAAAu6D,CAAAA,IAAAnhD,CAAAA,MAAAzP,CAAAA,CAAA,CAAA1J,EAAAqS,CAAAA,KAAA0gB,CAAAA,QAAA,CAAA,CAAArS,GAAA,GAAA3f,EAAAkB,CAAAA,CAAA,EAAA2iB,EAAA,CAAA,CAAA,CAAA,IAAA\/d,EAAAqnB,CAAAA,EAAA,EAAAhmB,EAAA,CAAA,CAAA2K,EAAA3K,EAAA2K,CAAAA,CAAAA,EAAA6N,EAAAoW,CAAA,CAAAA,CAAAjkB,CAAA1O,EAAA0O,CAAA,CAAAnJ,EAAAxB,EAAAwB,CAAAA,CAAAA,EAAAgX,EAAAe,CAAA,CAAAA,CAAA\/X,CAAA\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\/C,EAAA4\/C,CAAAA,EAAA8T,CAAAA,YAAA,CAAAl7D,EAAAy6D,CAAAA,cAAAC,CAAAA,MAAA,CAAA,CAAAvnD,MAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAAj0D,EAAAy6D,CAAAA,cAAAE,CAAAA,IAAA,CAAA,CAAAxnD,MAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAC,CAAAA,OAAA,CAAArnD,EAAAy6D,CAAAA,cAAA7gC,CAAAA,SAAA,CAAA,CAAAzmB,MAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\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\/D,EAAA,CAAAw\/D,oBAAAjgE,EAAA,CAAAkgE,yBAAAp\/D,EAAA,CAAAq\/D,uBAAAp\/D,EAAA,CAAAq\/D,wBAAAp\/D,EAAA,CAAA8xC,sBAAA\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\/iD,aAAA,CAAAgjD,EAAA,CAAA,CAAA\/lD,EAAAi6C,CAAAA,EAAA,EAAAxhD,EAAA45B,CAAAA,cAAA,EAAA,EAAA,GAAA55B,EAAAshE,CAAAA,OAAAx\/D,CAAAA,MAAA,EAAA\/B,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjjC,mBAAA,EAAA,CAAA,CAAA,CAAA,KAAAqyC,CAAAA,QAAA,CAAAC,QAAA,CAAAxhE,EAAA,CAAA,CAAAD,EAAA0hE,CAAAA,qBAAA,EAAA;CAAA,CAAAzhE,EAAAshE,CAAAA,OAAAx\/D,CAAAA,MAAA,CAAA\/B,EAAAoyD,CAAAA,QAAA,CAAA,CAAA3f,2BAAA,EAAA,CAAAtjB,mBAAAnvB,EAAAsS,CAAAA,KAAAmgC,CAAAA,0BAAA,CAAA,CAAA,CAAAwmB,EAAAhxD,CAAAA,KAAA,EAAA,CAAA,KAAA6uB,CAAAA,kBAAA,CAAA,GAAAvvB,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,EAAA,CAAA,IAAAz3D,GAAA,GAAAW,EAAAsB,CAAAA,CAAA,EAAA4D,EAAA,EAAAkxB,CAAAA,IAAA,CAAA\/2B,QAAAA,GAAA,CAAAS,EAAA,CAAA,CAAA,IAAAK,EAAA,CAAAC,EAAA,CAAAC,EAAA,CAAAL,EAAA,CAAAH,EAAA,CAAAD,EAAA,CAAAgB,EAAA,CAAAG,EAAA,CAAAM,EAAA,CAAAuD,EAAA,CAAAI,EAAA,CAAA8D,EAAA,CAAA9F,EAAA,OAAAkC,GAAA,EAAA8N,CAAAA,IAAA,CAAA,QAAA,CAAA3T,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAoT,CAAAA,IAAA,CAAApT,EAAAwZ,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,GAAAxY,EAAA,CAAA,EAAA,CAAAitD,EAAA,EAAA,CAAAxtD,EAAA,CAAA,CAAAE,EAAA,CAAA+jB,QAAAkY,CAAAA,aAAA,CAAAp8B,EAAA,CAAA,IAAA,IAAAM,EAAA,CAAAf,EAAAgwD,CAAAA,sBAAA5mD,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAArI,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAimD,CAAAA,QAAA,CAAApmD,EAAA,CAAA,CAAA,CAAAF,EAAA,EAAAD,EAAA,CAAA,CAAAR,EAAAwZ,CAAAA,IAAA,CAAA,CAAA,MAAA,CAAA,MAAAxZ,GAAAg3B,CAAAA,MAAA,CAAA,QAAA,CAAA;KAAA,CAAA,CAAA,GAAAz2B,EAAA,CAAAmkB,QAAAg9C,CAAAA,gBAAA,CAAAnU,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA\/sD,EAAA,EAAAF,EAAA,WAAAm0C,kBAAA,EAAA,CAAA,GAAAptC,EAAA\/G,CAAAA,CAAA,EAAAI,EAAA,CAAA,CAAA,CAAAX,EAAAwZ,CAAAA,IAAA,CAAA,CAAA,MAAA,CAAA,MAAAxZ,GAAAg3B,CAAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,MAAAz1B,GAAA,CAAA,IAAA,EAAAd,EAAA,EAAA,IAAA,IAAAM,EAAA,CAAAN,EAAAs0C,CAAAA,aAAA,GAAA,IAAA,EAAA,GAAAh0C,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA0xB,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAAzyB,EAAAwZ,CAAAA,IAAA,CAAA,EAAA,CAAA,GAAAtV,EAAAswC,CAAAA,EAAA,EAAA\/zC,EAAA,CAAAO,EAAA,CAAA,MAAA,EAAA,CAAA,GAAAU,EAAA,CAAA1B,EAAAo7B,CAAAA,IAAA,CAAA75B,EAAA,EAAA,CAAAG,EAAAqV,CAAAA,IAAA,EAAA\/V,EAAA,EAAA2gE,CAAA3\/D,EAAA2\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\/C,EAAAsS,CAAAA,KAAA2\/B,CAAAA,eAAA,CAAAjyC,EAAAsS,CAAAA,KAAAigC,CAAAA,WAAA,CAAA,IAAA,CAAApjB,mBAAA3oB,EAAAqxB,CAAAA,MAAA,CAAA,QAAA,CAAA73B,EAAA;AAAAC,EAAA,CAAA,CAAA,MAAA,GAAAukB,EAAAkU,CAAAA,EAAA,EAAAz4B,EAAA,CAAA,GAAAD,EAAA,CAAAC,EAAAU,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAAX,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA61B,iBAAA,EAAA,CAAA,CAAA,CAAA71B,EAAA8mC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAA,CAAA,QAAA,EAAA,CAAApxD,EAAAyyB,CAAAA,KAAA,EAAA1yB,EAAAw+D,CAAAA,wBAAA,EAAA,CAAA,CAAAx+D,GAAA2vD,CAAAA,aAAA,CAAA,CAAA7yC,KAAA,WAAA,CAAA,CAAA,CAAA,KAAAsgC,CAAAA,WAAA,CAAAklB,QAAA,CAAAriE,EAAA,CAAAS,EAAA,CAAA,CAAAV,EAAAoyD,CAAAA,QAAA,CAAAnyD,EAAA,CAAAS,EAAA,CAAA,CAAA,KAAAqwD,CAAAA,aAAA,CAAAwR,QAAA,CAAAtiE,EAAA,CAAA,CAAA8tD,EAAA,EAAA\/tD,EAAA0hE,CAAAA,qBAAA,EAAAzI,GAAAtyD,CAAAA,MAAA,CAAA1G,EAAAi5D,CAAAA,SAAA,CAAA,CAAA,KAAAhpB,CAAAA,UAAA,CAAAsyB,QAAA,EAAA,CAAA,IAAAviE,GAAA,CAAA,CAAA+B,SAAAD,CAAAA,MAAA,EAAA,IAAA,EAAA,GAAAC,SAAA,CAAA,CAAA,CAAA,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAAhC,GAAAsS,CAAAA,KAAA6gB,CAAAA,UAAA7C,CAAAA,MAAA,EAAA,GAAAzoB,EAAAA,CAAAA,CAAA,EAAA,SAAA,CAAA,YAAA,CAAA,EAAAsI,CAAAA,MAAA,CAAAlQ,EAAA;AAAA,IAAA,CAAAkQ,CAAAA,MAAA,CAAAnQ,EAAA02B,CAAAA,MAAAC,CAAAA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA32B,GAAAoyD,CAAAA,QAAA,CAAA,QAAA,CAAAnyD,EAAA,CAAA,CAAA,MAAA,CAAAkzB,WAAAmmB,CAAA,CAAAA,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAr5C,EAAAkzB,CAAAA,UAAA,CAAA,CAAA,GAAA5rB,EAAAmuB,CAAAA,EAAA,EAAA11B,EAAAsS,CAAAA,KAAA,CAAArS,EAAAkzB,CAAAA,UAAA7C,CAAAA,MAAA,CAAA,CAAAxT,KAAA,WAAA,CAAA,CAAA7c,EAAAkzB,CAAAA,UAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA7C,OAAA,CAAArwB,EAAAkzB,CAAAA,UAAA7C,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAohC,CAAAA,aAAA,CAAA+Q,QAAA,EAAA,CAAAziE,EAAAoyD,CAAAA,QAAA,CAAA,QAAA,CAAApyD,EAAA,CAAA,CAAA,MAAA,CAAA4yB,QAAA,CAAA5yB,EAAA4yB,CAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,KAAA8tB,CAAAA,gBAAA,CAAAgiB,QAAA,EAAA,CAAA1iE,EAAAm8C,CAAAA,aAAApE,CAAAA,aAAA,CAAA2U,EAAAx7B,CAAAA,EAAA,CAAA,CAAA,KAAAyxC,CAAAA,UAAA,CAAAC,QAAA,CAAA3iE,EAAA,CAAA,CAAAD,EAAAoyD,CAAAA,QAAA,CAAA9Y,CAAA,CAAA,EAAA,CAAA,GAAA3W,EAAAn8B,CAAAA,CAAA,EAAA,CAAA6sB,UAAArzB,EAAAsS,CAAAA,KAAAub,CAAAA,KAAAwF,CAAA,CAAAA,CAAArzB,EAAAsS,CAAAA,KAAAghB,CAAAA,UAAA,CAAAC,UAAAvzB,EAAAsS,CAAAA,KAAAwb,CAAAA,MAAAyF;AAAA,CAAAA,CAAAvzB,EAAAsS,CAAAA,KAAAkhB,CAAAA,SAAA,CAAAC,SAAA,GAAA6Q,EAAA9gC,CAAAA,CAAA,EAAAvD,EAAA,CAAA,CAAA,CAAAD,EAAAsS,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAAuwD,CAAAA,wBAAA,CAAA,IAAA,KAAAvT,CAAAA,eAAA,CAAAwT,QAAA,EAAA,CAAA,IAAA7iE,EAAA,CAAAS,GAAA,CAAA,CAAAsB,SAAAD,CAAAA,MAAA,EAAA,IAAA,EAAA,GAAAC,SAAA,CAAA,CAAA,CAAA,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAAhC,EAAA8mC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAAtwD,GAAA,CAAA,CAAAiB,SAAAD,CAAAA,MAAA,CAAAC,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,KAAA,IAAA\/B,EAAA,CAAAD,EAAA6iE,CAAAA,wBAAA,GAAA,IAAA,EAAA,GAAA5iE,EAAA,EAAAA,EAAAgF,CAAAA,IAAA,CAAAjF,EAAA,CAAA,KAAAgB,GAAAa,KAAAC,CAAAA,OAAA,CAAApB,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAAA,EAAA,CAAAO,GAAAA,CAAAjB,EAAAsS,CAAAA,KAAAohB,CAAAA,IAAA9yB,GAAAA,CAAAZ,EAAAsS,CAAAA,KAAAsgC,CAAAA,OAAA,KAAAnyC,GAAAT,EAAAsS,CAAAA,KAAAugC,CAAAA,OAAA,KAAA,EAAA9xC,EAAA,EAAAA,EAAAgiE,CAAAA,YAAA,EAAAvhE,EAAA,CAAAhB,GAAAksD,EAAAv7B,CAAAA,EAAA3wB,EAAAQ,EAAAR,CAAAR,EAAAsS,CAAAA,KAAA9R,CAAA,CAAA,CAAAA,CAAA+tB,CAAAA,QAAA,CAAAttB,EAAA,CAAAO,EAAAkyB,CAAAA,IAAA,CAAA9yB,EAAA;AAAAY,EAAAoxC,CAAAA,OAAA,CAAAnyC,EAAA,CAAAe,EAAAqxC,CAAAA,OAAA,GAAAlxC,EAAA,CAAA,GAAA2iC,EAAAh9B,CAAAA,CAAA,EAAAtG,EAAA,CAAAhB,EAAAsS,CAAAA,KAAA,CAAAtS,EAAAkjB,CAAAA,MAAA,CAAA,CAAAtiB,EAAA,CAAAe,EAAAixC,CAAAA,OAAA,CAAAnyC,EAAA,CAAAkB,EAAAkxC,CAAAA,OAAA,CAAA,IAAA,IAAA,EAAA9xC,EAAA,EAAAA,EAAAiiE,CAAAA,OAAA,CAAA,CAAA,IAAA\/gE,EAAAuD,GAAAA,CAAAxF,EAAAsS,CAAAA,KAAAsgC,CAAAA,OAAA,KAAAjvC,GAAA3D,EAAAsS,CAAAA,KAAAugC,CAAAA,OAAA7yC,GAAA2iE,CAAAA,UAAA,CAAA1hE,EAAAiF,CAAAA,KAAA,CAAA,KAAAN,GAAA,GAAA2B,EAAA07D,CAAAA,EAAA,EAAA,CAAAz9D,EAAA,CAAA7B,EAAA,CAAA,CAAA,CAAA\/C,EAAA,CAAAH,EAAA,CAAA,CAAA,QAAA,CAAAR,EAAA,CAAAS,EAAA,CAAA,CAAA,MAAAV,GAAAoyD,CAAAA,QAAA,CAAA,CAAAxf,QAAA3yC,EAAA,CAAA4yC,QAAAnyC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAwqD,SAAA,IAAA,IAAAjpD,EAAA,CAAA,IAAA,EAAAlB,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAmqD,CAAAA,QAAA,GAAA,IAAA,EAAA,GAAAjpD,EAAA,CAAAA,EAAA,CAAA,GAAA,CAAA,CAAAjC,GAAA6iE,CAAAA,wBAAA,CAAAK,QAAA,EAAA,CAAAt9D,EAAA,EAAA5F,GAAA6iE,CAAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,IAAA7iE,GAAAoyD,CAAAA,QAAA,CAAA,CAAAxf,QAAAhyC,EAAA,CAAAiyC,QAAApyC,EAAA,CAAAizB,KAAAzyB,EAAA,CAAA,CAAA,CAAA,KAAA27D,CAAAA,eAAA;AAAAuG,QAAA,CAAAljE,EAAA,CAAA,CAAA,IAAAS,EAAA,KAAA,IAAAA,EAAA,CAAAV,EAAA6iE,CAAAA,wBAAA,GAAA,IAAA,EAAA,GAAAniE,EAAA,EAAAA,EAAAuE,CAAAA,IAAA,CAAAjF,EAAA,CAAAA,GAAAoyD,CAAAA,QAAA,CAAAnyD,EAAA,CAAA,CAAA,KAAAyvD,CAAAA,QAAA,CAAA0T,QAAA,CAAAnjE,EAAA,CAAA,CAAAD,EAAAoyD,CAAAA,QAAA,CAAA,CAAA56B,MAAAv3B,EAAA,CAAA,CAAA,CAAA,KAAAyzD,CAAAA,oBAAA,CAAA,GAAA9yD,EAAAsB,CAAAA,CAAA,EAAA4D,EAAA,EAAAkxB,CAAAA,IAAA,CAAA\/2B,QAAAA,GAAA,EAAA,CAAA,IAAAS,EAAA,CAAAK,EAAA,CAAAC,EAAA,CAAAC,EAAA,OAAA6E,GAAA,EAAA8N,CAAAA,IAAA,CAAA,QAAA,CAAA3T,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAoT,CAAAA,IAAA,CAAApT,EAAAwZ,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAAxZ,GAAAoT,CAAAA,IAAA,CAAA,CAAA,CAAApT,EAAAwZ,CAAAA,IAAA,CAAA,CAAA,CAAA4pD,MAAAC,CAAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,MAAA5iE,GAAA,CAAAT,EAAAo7B,CAAAA,IAAA,CAAAp7B,EAAAwZ,CAAAA,IAAA,CAAA,CAAA,CAAA\/Y,EAAAe,CAAAA,KAAA,CAAA,aAAA,CAAA,MAAA,CAAA,CAAA,GAAA,EAAAV,EAAA,CAAAd,EAAAo7B,CAAAA,IAAA,CAAA,CAAA,CAAAp7B,EAAAwZ,CAAAA,IAAA,CAAA,EAAA,MAAA,CAAA,MAAAxZ,GAAAwZ,CAAAA,IAAA,CAAA,EAAA,CAAA1Y,EAAAwiE,CAAAA,IAAA,EAAA,MAAA,EAAA,CAAA,MAAAviE,GAAA;AAAAf,EAAAo7B,CAAAA,IAAA,CAAAp6B,EAAA,CAAA,IAAAi+D,IAAA,CAAA,CAAAl+D,EAAA,CAAA,CAAAA,EAAAmW,CAAAA,IAAA,EAAA,EAAA,CAAA,CAAA2F,KAAA9b,EAAA8b,CAAAA,IAAA,CAAA,CAAA,CAAA9c,EAAAi\/D,CAAAA,gBAAA,CAAAh+D,EAAA,CAAA,IAAA,CAAA,CAAAhB,EAAAwZ,CAAAA,IAAA,CAAA,EAAA,CAAA\/Y,EAAAiG,CAAAA,MAAA,CAAA,aAAA,CAAA,MAAA,EAAA,CAAAwM,MAAAi8C,CAAAA,OAAAoU,CAAAA,YAAA,CAAA,IAAA,CAAAh8D,EAAAi8D,CAAAA,EAAA,CAAAtwD,MAAA6xC,CAAAA,QAAAE,CAAAA,QAAA,CAAA,MAAA,EAAA,CAAAjlD,EAAAwZ,CAAAA,IAAA,CAAA,EAAA,MAAA,MAAA,EAAA,CAAAxZ,EAAAoT,CAAAA,IAAA,CAAA,EAAA,CAAApT,EAAAk3B,CAAAA,EAAA,CAAAl3B,EAAAyH,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA1H,EAAAoyD,CAAAA,QAAA,CAAA,CAAAh7B,aAAAn3B,EAAAk3B,CAAAA,EAAAE,CAAAA,OAAA,CAAA,CAAA,MAAA,EAAA,CAAA,KAAA,KAAA,CAAA,MAAAp3B,GAAAq3B,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAAr3B,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAgvD,CAAAA,QAAA,CAAA,GAAA1nD,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAAz3D,EAAA,CAAA,CAAA,IAAAS,GAAAT,EAAA43B,CAAAA,MAAA,CAAA,QAAA,CAAA73B,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAD,GAAAuG,CAAAA,GAAA,CAAAtG,EAAAU,CAAAA,EAAA,CAAAV,EAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,IAAAoG,GAAA,CAAApG,GAAA0yB,CAAAA,KAAA,CAAA4mB,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAt5C,EAAA0yB,CAAAA,KAAA,CAAA,CAAA3uB,MAAA8E,CAAAA,WAAA,CAAAnI,EAAA,CAAA,CAAAV;EAAA8mC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAAtqD,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAukB,EAAAswB,CAAAA,EAAA,EAAA70C,EAAA,CAAA,EAAAS,EAAAmG,CAAAA,GAAA,CAAA5G,EAAA80C,CAAAA,MAAA,CAAA,GAAA\/0C,EAAAsyB,CAAAA,UAAA3rB,CAAAA,MAAA,CAAA1G,EAAA80C,CAAAA,MAAA,CAAA,CAAA,GAAA1M,EAAA8jB,CAAAA,EAAA,EAAAlsD,EAAA,CAAA,CAAA,CAAA,CAAAD,GAAA8mC,CAAAA,KAAA48B,CAAAA,cAAA,EAAA1jE,GAAAw+D,CAAAA,wBAAA,EAAA,CAAA,CAAA,KAAAzP,CAAAA,WAAA,CAAA,GAAAxnD,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAAz3D,EAAA,CAAA,CAAAA,EAAAuuB,CAAAA,eAAA,EAAAxuB,EAAAovD,CAAAA,OAAA8H,CAAAA,eAAA,EAAAj3D,GAAAsuB,CAAAA,QAAA,EAAAvuB,EAAAoyD,CAAAA,QAAA,CAAAnyD,EAAAsuB,CAAAA,QAAA,CAAAtuB,GAAAquB,CAAAA,QAAA,EAAAtuB,EAAA8mC,CAAAA,KAAAkwB,CAAAA,kBAAA,CAAA\/2D,EAAAquB,CAAAA,QAAA,CAAAruB,GAAA2xC,CAAAA,aAAA,EAAA5xC,EAAAoyD,CAAAA,QAAA,CAAA,CAAAxgB,cAAA3xC,EAAA2xC,CAAAA,aAAA,CAAA,CAAA,CAAA,CAAA,KAAAga,CAAAA,cAAA,CAAA+X,QAAA,EAAA,CAAA3jE,EAAAoyD,CAAAA,QAAA,CAAA,EAAA,CAAA,CAAA,KAAAtC,CAAAA,UAAA;AAAA8T,QAAA,CAAA3jE,EAAA,CAAAS,EAAA,CAAA,CAAA,MAAA,eAAA,GAAAT,EAAA,EAAAD,EAAA+c,CAAAA,KAAA80C,CAAAA,aAAA,EAAA,SAAA,GAAA5xD,EAAA,EAAA,eAAA,GAAAA,EAAA,IAAAc,EAAA,CAAA,IAAA,EAAA,GAAAL,EAAA,CAAAV,EAAAsS,CAAAA,KAAAigC,CAAAA,WAAA,GAAAtyC,EAAA,CAAA,IAAA,CAAAA,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,IAAA,CAAAD,EAAAoyD,CAAAA,QAAA,CAAA,CAAA7f,YAAAxxC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,GAAAuD,OAAAC,CAAAA,IAAA,CAAA,+EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAxD,EAAA,CAAA,KAAA8zD,CAAAA,2BAAA,CAAA,GAAAttD,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAA13D,EAAA,CAAA,CAAAwtD,EAAA,CAAAxtD,EAAA42D,CAAAA,OAAAnJ,GAAA,CAAAztD,EAAA62D,CAAAA,OAAA,CAAA,CAAA,KAAAj9B,CAAAA,SAAA,CAAA,GAAAryB,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAAz3D,EAAA,CAAA,CAAA,GAAA,OAAA,EAAAkT,OAAA,GAAA,CAAAlT,EAAAu0B,CAAAA,QAAA,EAAA,SAAA9yB,CAAAA,IAAA,CAAAzB,EAAAyc,CAAAA,GAAA,CAAA,EAAAzc,EAAAu0B,CAAAA,QAAA;AAAA,SAAA9yB,CAAAA,IAAA,CAAAzB,EAAAyc,CAAAA,GAAA,CAAA,IAAAzc,EAAA,CAAA,IAAAm5C,KAAA,CAAAn5C,EAAA,CAAA,CAAAyG,IAAAA,QAAA,CAAA1G,EAAA,CAAAU,EAAA,CAAA,CAAA,IAAAK,GAAAf,EAAA,CAAAU,EAAA,CAAA,OAAA,UAAA,EAAA,MAAAK,GAAA,CAAAA,EAAAskB,CAAAA,IAAA,CAAArlB,EAAA,CAAA,CAAA,KAAA,GAAAU,EAAA,CAAAT,EAAAu0B,CAAAA,QAAA,CAAAx0B,EAAA0c,CAAAA,GAAAghB,CAAAA,WAAA,EAAA,CAAA19B,EAAA0c,CAAAA,GAAA+f,CAAAA,WAAA,EAAA,CAAA17B,EAAA,CAAA,CAAA,CAAA,EAAAd,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,EAAAt0B,EAAAyc,CAAAA,GAAA+f,CAAAA,WAAA,EAAA,GAAA71B,EAAA0tB,CAAAA,EAAA3T,CAAAA,CAAA,GAAAutC,EAAA,CAAAjuD,EAAAu0B,CAAAA,QAAA,CAAAjqB,YAAA,CAAA4jD,EAAA,CAAA,CAAAA,EAAA,CAAAh7C,MAAApJ,CAAAA,UAAA,CAAA,QAAA,EAAA,CAAAmkD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAAjuD,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,EAAA,CAAA,GAAAhtB,EAAA\/G,CAAAA,CAAA,EAAAP,EAAA05B,CAAAA,MAAA,CAAA,EAAA15B,EAAAuoB,CAAAA,IAAA,GAAA5hB,EAAAutB,CAAAA,EAAAO,CAAAA,KAAA,EAAAz0B,EAAAuoB,CAAAA,IAAA,GAAA5hB,EAAAutB,CAAAA,EAAAC,CAAAA,KAAA,CAAA,IAAA,EAAA,GAAA7sB,EAAA\/G,CAAAA,CAAA,EAAAP,EAAA05B,CAAAA,MAAA,CAAA,EAAA15B,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA+I,CAAAA,MAAA,EAAA,GAAAz2B,EAAAk2B,CAAAA,EAAA,EAAA78B,EAAAyc,CAAAA,GAAA,CAAA,EAAA,GAAAnV,EAAAs8D,CAAAA,EAAA,EAAA5jE,EAAA05B,CAAAA,MAAA,CAAA,CAAA,CAAA,GAAA15B,EAAAyc,CAAAA,GAAA;AAAA9V,EAAA0tB,CAAAA,EAAA8U,CAAAA,aAAA,CAAA,GAAAnpC,EAAAyc,CAAAA,GAAA+f,CAAAA,WAAA,EAAA,GAAA71B,EAAA0tB,CAAAA,EAAA9tB,CAAAA,CAAA,EAAAvG,EAAAu0B,CAAAA,QAAA,EAAAv0B,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,CAAAv0B,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjpB,WAAA,aAAA,CAAA,CAAA,KAAA,CAAA,GAAAlpC,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAAwvC,CAAAA,OAAA,EAAA7jE,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAAyvC,CAAAA,SAAA,CAAA,CAAA,IAAArjE,IAAAT,EAAAu0B,CAAAA,QAAA,CAAAx0B,EAAAsS,CAAAA,KAAAub,CAAAA,KAAA,CAAA7tB,EAAAsS,CAAAA,KAAAwb,CAAAA,MAAAptB,EAAAV,EAAAsS,CAAAA,KAAAohB,CAAAA,IAAAxtB,CAAAA,KAAAjG,GAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAAyvC,CAAAA,SAAA,GAAArjE,EAAA,CAAA,CAAAA,EAAA,CAAAT,GAAAu0B,CAAAA,QAAA,CAAAx0B,EAAA48D,CAAAA,eAAA,CAAA,QAAA,CAAA58D,EAAA,CAAA,CAAA,MAAA,CAAA4yC,QAAA5yC,EAAA4yC,CAAAA,OAAAA,CAAAlyC,EAAA,CAAA,CAAA,CAAA,CAAAV,EAAA48D,CAAAA,eAAA,CAAA,QAAA,CAAA58D,EAAA,CAAA,CAAA,MAAA,CAAA6yC,QAAA7yC,EAAA6yC,CAAAA,OAAAA,CAAAnyC,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAAV,EAAAm8C,CAAAA,aAAA6nB,CAAAA,aAAA,CAAA\/jE,EAAA,CAAA,EAAA,CAAAD,EAAAsS,CAAAA,KAAAkf,CAAAA,eAAA,CAAA,CAAA,GAAAvxB,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA;AAAAv0B,EAAAsS,CAAAA,KAAA0\/B,CAAAA,gBAAA,EAAAhyC,EAAAoyD,CAAAA,QAAA,CAAA,CAAApgB,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAprC,EAAAk2B,CAAAA,EAAA,EAAA78B,EAAAyc,CAAAA,GAAA,CAAA,CAAA,CAAA,IAAA3b,GAAAf,EAAAsS,CAAAA,KAAA0gB,CAAAA,QAAAjyB,GAAAd,EAAAu0B,CAAAA,QAAA,CAAAhtB,EAAAulC,CAAAA,EAAA,CAAA\/sC,EAAAsS,CAAAA,KAAA0gB,CAAAA,QAAAjyB,IAAAd,EAAAu0B,CAAAA,QAAA,CAAAhtB,EAAAy8D,CAAAA,EAAA,CAAAz8D,EAAAulC,CAAAA,EAAAhsC,CAAA,CAAAC,GAAA,CAAA,CAAAC,GAAA,CAAAhB,GAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA2I,CAAAA,UAAA,CAAAj8B,EAAA,CAAA,CAAAD,EAAA,CAAAd,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA4I,CAAAA,WAAA,CAAAl8B,EAAA,CAAAD,EAAA,CAAAd,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA8I,CAAAA,QAAA,CAAAn8B,EAAA,CAAA,CAAAF,EAAA,CAAAd,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA6I,CAAAA,UAAA,GAAAl8B,EAAA,CAAAF,EAAA,CAAA,KAAAH,GAAA,GAAA0jC,EAAAnX,CAAAA,EAAA,EAAAntB,EAAA8mC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAArxD,EAAAsS,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA1R,GAAAmG,CAAAA,OAAA,CAAA,QAAA,CAAA\/G,EAAA,CAAA,CAAA,GAAA8G,EAAAqnB,CAAAA,EAAA,EAAAnuB,EAAA,CAAA,CAAA8S,EAAA9S,EAAA8S,CAAAA,CAAAA,CAAA9R,EAAA,CAAA2I,EAAA3J,EAAA2J,CAAAA,CAAAA,CAAA1I,EAAA,CAAA,CAAA,IAAAgG,EAAAinC,CAAAA,EAAA,EAAAluC,EAAA,CAAA,CAAAkkE,sBAAAtjE,EAAA,CAAA,CAAA,CAAA,CAAAZ,GAAAm8D,CAAAA,yBAAA,CAAAv7D,EAAA,CAAAX;EAAA45B,CAAAA,cAAA,EAAA,CAAA,IAAA,IAAA55B,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAAgJ,CAAAA,KAAA,CAAA,CAAA,IAAA78B,GAAA,GAAA6jC,EAAAnX,CAAAA,EAAA,EAAAntB,EAAA8mC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAArxD,EAAAsS,CAAAA,KAAA,CAAA,IAAA,CAAA,GAAA7R,EAAAsB,CAAAA,MAAA,CAAA,CAAA,IAAAvB,GAAAC,EAAA,CAAA,CAAA,CAAA,IAAAR,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,CAAA,GAAA\/P,EAAAmd,CAAAA,EAAA,EAAAnhC,EAAA,CAAA,GAAAR,EAAAsS,CAAAA,KAAA6lB,CAAAA,oBAAA,EAAAn4B,EAAAsS,CAAAA,KAAA6lB,CAAAA,oBAAAtH,CAAAA,SAAA,GAAApwB,EAAA,CAAA,CAAA,CAAAE,CAAAA,EAAA,GAAAX,EAAAovD,CAAAA,OAAA8H,CAAAA,eAAA,EAAA,CAAAl3D,EAAAoyD,CAAAA,QAAA,CAAA,CAAAj6B,qBAAA,IAAA9vB,EAAAzB,CAAAA,CAAA,CAAApG,EAAA,CAAAR,EAAA8mC,CAAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,IAAA,GAAA1+B,EAAAqmB,CAAAA,EAAA,EAAAjuB,EAAA,CAAA,EAAA,GAAAuqC,EAAAijB,CAAAA,EAAA,EAAAxtD,EAAA,CAAA,CAAA,MAAA,GAAA4H,EAAAqmB,CAAAA,EAAA,EAAAjuB,EAAA,CAAA,GAAAgB,EAAA,CAAAhB,EAAA,EAAAmB,EAAA,CAAA,GAAAopC,EAAAwY,CAAAA,EAAA,EAAA\/iD,EAAA,CAAAR,EAAAsS,CAAAA,KAAA,CAAA,CAAAtS,EAAAmkE,CAAAA,gBAAA,CAAA,CAAA3M,OAAA71D,EAAAmR,CAAAA,CAAA,CAAA2kD,OAAA91D,EAAAgI,CAAAA,CAAA,CAAAo0C,UAAAv8C,EAAA,CAAA,CAAA;AAAA,IAAAvB,GAAA45B,CAAAA,cAAA,EAAA,CAAA,CAAA,IAAA55B,GAAA08B,CAAAA,OAAA,EAAA18B,EAAAk1B,CAAAA,MAAA,EAAAl1B,EAAAy8B,CAAAA,OAAA,EAAA,IAAA,GAAA18B,EAAAsS,CAAAA,KAAA21B,CAAAA,eAAA,GAAA,CAAAtkC,EAAA,CAAA,QAAA,CAAA3D,EAAA,CAAA,CAAA,IAAAC,GAAA2iC,EAAArG,CAAAA,IAAA,CAAA,QAAA,CAAAt8B,EAAA,CAAAS,EAAA,CAAA,CAAA,MAAA,KAAA,EAAAT,EAAA07C,CAAAA,UAAA,EAAA37C,EAAA,GAAAC,EAAA07C,CAAAA,UAAAz4C,CAAAA,QAAA,EAAA,EAAAjD,EAAAyc,CAAAA,GAAA,GAAA,QAAA,EAAA,MAAAzc,GAAAyc,CAAAA,GAAA,CAAAzc,EAAAyc,CAAAA,GAAA,GAAA1c,EAAA,CAAAC,EAAAyc,CAAAA,GAAAgU,CAAAA,QAAA,CAAA1wB,EAAA,CAAA,CAAA,CAAA,CAAA,QAAA,IAAA,EAAAC,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAiG,CAAAA,KAAA,GAAA,IAAA,CAAA,CAAAjG,EAAAyc,CAAAA,GAAA,CAAA,GAAA1c,EAAAsS,CAAAA,KAAA6gB,CAAAA,UAAArW,CAAAA,IAAA,GAAAnZ,EAAA,EAAA,GAAAkE,EAAAA,CAAAA,CAAA,EAAA,SAAA,CAAAlE,EAAA,CAAA,YAAAwM,CAAAA,MAAA,CAAAnQ,EAAA02B,CAAAA,MAAAC,CAAAA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,CAAA32B,EAAA2vD,CAAAA,aAAA,CAAA,CAAA7yC,KAAAnZ,EAAA,CAAA,CAAA,CAAA1D,EAAAu9B,CAAAA,eAAA,EAAA,EAAAv9B,EAAAyc,CAAAA,GAAA;AAAA9V,EAAA0tB,CAAAA,EAAA7S,CAAAA,CAAA,GAAAzhB,EAAAkwC,CAAAA,UAAA,CAAA,UAAA,CAAA,CAAAjwC,EAAAu9B,CAAAA,eAAA,EAAA,CAAA,CAAA,IAAAv9B,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA8vC,CAAAA,KAAA,EAAA,CAAA,GAAAnL,EAAAjyD,CAAAA,IAAA,GAAA0mD,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAnmD,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAAC,CAAAA,IAAA,CAAA,CAAAh2B,EAAA45B,CAAAA,cAAA,EAAA,EAAA,EAAA55B,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA9P,CAAAA,CAAA,EAAAvkB,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA7tB,CAAAA,CAAA,EAAAxG,EAAAk1B,CAAAA,MAAA,EAAAl1B,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,CAAA,CAAA,CAAA3uB,EAAAA,CAAA,GAAA0+B,EAAAnX,CAAAA,EAAA,EAAAntB,EAAA8mC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAArxD,EAAAsS,CAAAA,KAAA,CAAA,IAAA,WAAA,GAAAtS,EAAAsS,CAAAA,KAAA6gB,CAAAA,UAAArW,CAAAA,IAAA,EAAA,CAAAlX,EAAA7D,CAAAA,MAAA,CAAA,MAAA9B,GAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA9P,CAAAA,CAAA,GAAA,GAAA8f,EAAAqY,CAAAA,EAAA,EAAA38C,EAAAsS,CAAAA,KAAA6gB,CAAAA,UAAArW,CAAAA,IAAA,CAAA,EAAAlX,EAAAwnB,CAAAA,IAAA,CAAA,QAAA,CAAAptB,EAAA,CAAA,CAAA,MAAA,GAAAskC,EAAAqY,CAAAA,EAAA,EAAA38C,EAAA8c,CAAAA,IAAA,CAAA,CAAA,CAAA,IAAA9c,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjgC,UAAA,uBAAA,CAAA,CAAA;AAAAlyB,EAAAu9B,CAAAA,eAAA,EAAA,CAAAv9B,GAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA7tB,CAAAA,CAAA,GAAAzG,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjgC,UAAA,mBAAA,CAAA,CAAA,CAAAlyB,EAAAu9B,CAAAA,eAAA,EAAA,CAAA,CAAA,CAAAv9B,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,EAAAt0B,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAAuE,CAAAA,SAAA,EAAA54B,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAAwE,CAAAA,MAAA,EAAAwtB,EAAA+d,CAAAA,EAAA99D,CAAAA,GAAA,CAAAiiD,EAAApkD,CAAAA,CAAA,CAAA,aAAA,CAAA,CAAA,CAAA,IAAApE,GAAAoyD,CAAAA,QAAA,CAAA,CAAAjpB,WAAA,MAAA,CAAA,CAAA,CAAA,IAAAlpC,GAAA45B,CAAAA,cAAA,EAAA,CAAA,CAAA,KAAA26B,CAAAA,OAAA,CAAA,GAAAjtD,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAA13D,EAAA,CAAA,CAAAA,EAAA25B,CAAAA,MAAA,WAAAgb,kBAAA,EAAA,CAAA30C,EAAA28B,CAAAA,OAAA,EAAA38B,EAAA65B,CAAAA,cAAA,EAAA,CAAA,CAAA,KAAAk7B,CAAAA,OAAA,CAAA,GAAAxtD,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAAz3D,EAAA,CAAA,CAAA,GAAAA,EAAAyc,CAAAA,GAAA,GAAA9V,EAAA0tB,CAAAA,EAAA8vC,CAAAA,KAAA,GAAApkE,EAAAsS,CAAAA,KAAAkf,CAAAA,eAAA,CAAA,GAAAjqB,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAAC,CAAAA,IAAA,CAAA;AAAA,WAAA,GAAAj2B,EAAAsS,CAAAA,KAAA6gB,CAAAA,UAAArW,CAAAA,IAAA,CAAA,GAAAvV,EAAAygC,CAAAA,EAAA,EAAAhoC,EAAAkjB,CAAAA,MAAA,CAAA,EAAA,GAAA3b,EAAAm2C,CAAAA,EAAA,EAAA19C,EAAAkjB,CAAAA,MAAA,CAAAljB,EAAAsS,CAAAA,KAAA,CAAA,CAAAtS,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjjC,mBAAA,EAAA,CAAA0G,iBAAA,EAAA,CAAAmC,eAAA,IAAA,CAAA,CAAA,CAAA,CAAA01B,EAAA,CAAA,CAAA,CAAA,EAAAztD,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,EAAAv0B,EAAAsS,CAAAA,KAAA0\/B,CAAAA,gBAAA,EAAAhyC,EAAAoyD,CAAAA,QAAA,CAAA,CAAApgB,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAprC,EAAAk2B,CAAAA,EAAA,EAAA78B,EAAAyc,CAAAA,GAAA,CAAA,CAAAhc,EAAA,CAAA,GAAA4jC,EAAAnX,CAAAA,EAAA,EAAAntB,EAAA8mC,CAAAA,KAAAuqB,CAAAA,qBAAA,EAAA,CAAArxD,EAAAsS,CAAAA,KAAA,CAAA,CAAA,GAAArL,EAAAsvD,CAAAA,EAAA,EAAAv2D,EAAAsS,CAAAA,KAAA,CAAA,CAAA,GAAArL,EAAAs2D,CAAAA,EAAA,EAAA78D,EAAA,CAAA,CAAA,GAAAuG,EAAA5C,CAAAA,CAAA,EAAA3D,EAAA,CAAA,CAAAV,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjqB,kBAAA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAAwnB,CAAAA,aAAA,CAAA2U,QAAA,CAAArkE,EAAA,CAAA,CAAAS,EAAAA,CAAA,GAAA6G,EAAAmuB,CAAAA,EAAA,EAAA11B,EAAAsS,CAAAA,KAAA,CAAArS,EAAA,CAAA,OAAA,GAAAS,EAAAoc,CAAAA,IAAA,CAAA,GAAAvV,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA;AAAA1b,EAAAwuB,CAAAA,EAAAC,CAAAA,IAAA,CAAA,CAAAy3B,EAAA,EAAA,GAAAnmD,EAAAm2C,CAAAA,EAAA,EAAA19C,EAAAkjB,CAAAA,MAAA,CAAAljB,EAAAsS,CAAAA,KAAA,CAAA,IAAA\/K,EAAAg9D,CAAAA,EAAA,EAAA5\/C,QAAAkY,CAAAA,aAAA,CAAA,EAAA78B,EAAAqnC,CAAAA,cAAA,EAAA,IAAA7iB,EAAAmf,CAAAA,EAAA,EAAAjjC,EAAAoc,CAAAA,IAAA,CAAA,EAAA9c,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjqB,kBAAA,EAAA,CAAA,CAAA,QAAA,GAAAznC,EAAAoc,CAAAA,IAAA,EAAA9c,EAAAq9C,CAAAA,aAAA,EAAA,YAAA,GAAA38C,EAAAoc,CAAAA,IAAA,CAAA9c,EAAAoyD,CAAAA,QAAA,CAAA,CAAAj\/B,WAAAzyB,EAAA,CAAAyuB,mBAAA,EAAA,CAAA0G,iBAAA,EAAA,CAAAmC,eAAA,IAAA,CAAA,CAAA,CAAAh4B,EAAAoyD,CAAAA,QAAA,CAAA,CAAAj\/B,WAAAzyB,EAAA,CAAA,CAAA,CAAA,KAAAkvD,CAAAA,SAAA,CAAA4U,QAAA,CAAAvkE,EAAA,CAAA,CAAA,GAAAsH,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAAjjB,EAAA,CAAA,CAAA,KAAA4vD,CAAAA,WAAA,CAAA4U,QAAA,EAAA,CAAA,GAAAl9D,EAAAygC,CAAAA,EAAA,EAAAhoC,EAAAkjB,CAAAA,MAAA,CAAA,CAAA,KAAAwhD,CAAAA,8BAAA,CAAAC,QAAA,EAAA,CAAA,MAAA,EAAA,EAAA1L,EAAAjyD,CAAAA,IAAA,CAAA;IAAAyuD,CAAAA,cAAA,CAAA,GAAAluD,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAAz3D,EAAA,CAAA,CAAAA,EAAA45B,CAAAA,cAAA,EAAA75B,GAAA0kE,CAAAA,8BAAA,EAAA,EAAA1kE,EAAAoyD,CAAAA,QAAA,CAAA,CAAAjjC,mBAAA,EAAA,CAAA,CAAAiqC,GAAA,CAAAp5D,EAAAsS,CAAAA,KAAAohB,CAAAA,IAAAxtB,CAAAA,KAAA,CAAA,CAAA,KAAAyvD,CAAAA,eAAA,CAAA,GAAApuD,EAAAmwD,CAAAA,EAAA,EAAA,QAAA,CAAAz3D,EAAA,CAAA,CAAA,GAAAA,EAAA45B,CAAAA,cAAA,EAAA,CAAA,CAAA75B,EAAA0kE,CAAAA,8BAAA,EAAA,CAAA,CAAA,IAAAhkE,GAAA04D,EAAA14D,GAAA,EAAAV,EAAAoyD,CAAAA,QAAA,CAAA,QAAA,CAAApyD,EAAA,CAAA,CAAA,MAAAs5C,EAAA,CAAA,EAAA,CAAA,GAAA3W,EAAAn8B,CAAAA,CAAA,EAAA,CAAA6sB,UAAAm6B,EAAA,CAAAj6B,UAAAk6B,EAAA,CAAAh6B,SAAA,GAAA6Q,EAAA9gC,CAAAA,CAAA,EAAA9C,EAAA,CAAAT,EAAA6\/D,CAAAA,KAAA,CAAA,CAAA,CAAA9\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\/C,CAAAA,EAAA4e,CAAAA,eAAA,CAAA\/lE,EAAA65B,CAAAA,WAAA,CAAA,CAAA95B,EAAA+c,CAAAA,KAAAi1C,CAAAA,UAAA,CAAA1Y,CAAA,CAAAA,CAAA,CAAA,EAAA;AAAAt5C,EAAA8lE,CAAAA,cAAA,CAAA,CAAA,EAAA,CAAA,CAAApJ,KAAA\/6D,EAAA,CAAA,CAAA,CAAAH,EAAA,CAAA,EAAA,IAAA,IAAAhB,EAAA,CAAAgB,EAAA,GAAA,IAAA,EAAA,GAAAhB,EAAA,EAAA,CAAAA,EAAAylE,CAAAA,gBAAA,IAAAhkE,EAAA,CAAA,GAAAwpD,EAAA\/pC,CAAAA,CAAA,EAAA\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\/D,CAAAA,EAAA,CAAA,GAAA3\/D,EAAAqnB,CAAAA,EAAA,EAAAvqB,EAAA,CAAA,CAAA40B,OAAA,EAAAroB,CAAAA,MAAA,CAAA,GAAAlP,CAAAiB,CAAAA,CAAA,EAAAkC,EAAA,CAAA,CAAA,CAAA,CAAAT,EAAA,CAAAgG,EAAA,CAAA\/D,EAAA,CAAAkN,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAAvL,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAA0iC,CAAAA,OAAA,CAAA,KAAA,IAAA,CAAA,CAAAt0D,EAAArC,CAAAA,MAAA,EAAA6C,EAAA,EAAA,GAAA69B,EAAA+K,CAAAA,EAAA,EAAA7pC,EAAA;AAAAgG,EAAA,CAAA\/D,EAAA,CAAAkN,EAAA,CAAAlO,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA4C,EAAAi\/D,CAAAA,EAAA,CAAA,GAAAl\/D,EAAAwuB,CAAAA,EAAA,EAAA\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\/D,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA,GAAA9a,EAAA+5B,CAAAA,EAAA,EAAAtd,EAAA,CAAA,CAAAnD,GAAAA,CAAA1hB,EAAA+3D,CAAAA,oBAAA,CAAAvyD,EAAAsN,CAAAA,CAAA,CAAAtN,EAAAmE,CAAAA,CAAA,CAAA3J,GAAA8lE,CAAAA,cAAA,CAAA9lE,EAAAylE,CAAAA,wBAAA,CAAAjgE,EAAA,CAAAkc,EAAA,CAAA,IAAA5gB,EAAA20B,CAAAA,EAAA,EAAAz1B,EAAAsS,CAAAA,KAAA,CAAA,GAAAtS,EAAA8lE,CAAAA,cAAA,EAAA,CAAA9lE,EAAAsS,CAAAA,KAAA6c,CAAAA,kBAAA,CAAAnvB,EAAA8lE,CAAAA,cAAAnlE,CAAAA,EAAA,CAAA,EAAA,GAAA4G,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAA0iC,CAAAA,OAAA,CAAA,CAAA,GAAAlN,EAAAqb,CAAAA,EAAA,EAAA7mE,EAAA8lE,CAAAA,cAAA,CAAA9lE,EAAAsS,CAAAA,KAAA,CAAA,GAAA,GAAAk5C,EAAAsb,CAAAA,EAAA,GAAA,CAAAplD,EAAA,EAAAA,EAAAg7C,CAAAA,IAAA,EAAA18D,EAAAsS,CAAAA,KAAA6c,CAAAA,kBAAA,CAAAzN,EAAA\/gB,CAAAA,EAAA,CAAA,EAAA,CAAAX,EAAAsS,CAAAA,KAAAggC,CAAAA,WAAA,EAAA,CAAAtyC,EAAAsS,CAAAA,KAAA2gC,CAAAA,kBAAA,CAAAjzC,EAAAoyD,CAAAA,QAAA,CAAA,CAAAnf,mBAAA,MAAA,CAAA,CAAA,CAAA,MAAA,GAAAjzC,EAAAsS,CAAAA,KAAA6gB,CAAAA,UAAArW,CAAAA,IAAA;AAAA,GAAAvV,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA,GAAA9a,EAAAqmB,CAAAA,EAAA,EAAA\/M,EAAA,CAAA,CAAAla,EAAAwuB,CAAAA,EAAA+wC,CAAAA,IAAA,CAAAv\/D,EAAAwuB,CAAAA,EAAAgxC,CAAAA,SAAA,CAAA,CAAAhnE,EAAAsS,CAAAA,KAAAkf,CAAAA,eAAA,CAAA,GAAAjqB,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAAC,CAAAA,IAAA,CAAA,CAAAh0B,EAAA,CAAA,GAAAsF,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAAgjC,CAAAA,IAAA,CAAA,CAAAh5D,EAAAsS,CAAAA,KAAAu0B,CAAAA,qBAAA,CAAA7mC,EAAAinE,CAAAA,gCAAA,CAAAjnE,EAAAsS,CAAAA,KAAAu0B,CAAAA,qBAAA,CAAAljC,EAAA,CAAAiC,EAAA,CAAA,CAAA3F,EAAA,CAAA2G,EAAA0tB,CAAAA,EAAAC,CAAAA,WAAA,CAAA,CAAA,GAAAhtB,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAAgjC,CAAAA,IAAA,CAAA,CAAA,CAAAt3C,EAAA,EAAA,CAAA1hB,EAAAs6D,CAAAA,4CAAA,CAAA90D,EAAA,CAAA8B,EAAA,CAAA,EAAA,IAAA,EAAAoa,EAAA,EAAAA,EAAA4O,CAAAA,MAAA,EAAA,GAAA\/oB,EAAAwuB,CAAAA,EAAA,EAAA\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\/C,EAAA4\/C,CAAAA,EAAA8T,CAAAA,YAAA,CAAAj5D,EAAA,CAAA,CAAAkR,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAAzuD,EAAA,CAAA,CAAA2N,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAC,CAAAA,OAAA,CAAA1jD,EAAA,CAAA,CAAAwP,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA0N,CAAAA,KAAA,CAAAlvD,EAAA,CAAA,CAAAhF,EAAA65D,CAAAA,cAAAC,CAAAA,MAAA,CAAAz4D,EAAA,CAAArB,EAAA65D,CAAAA,cAAAE,CAAAA,IAAA,CAAAn1D,EAAA,CAAA5E,EAAA65D,CAAAA,cAAA1F,CAAAA,OAAA,CAAAnvD,EAAA,CAAAhF,EAAA65D,CAAAA,cAAA7gC,CAAAA,SAAA,CAAAj2B,EAAA,CAAA,CAAA,IAAA3D,GAAA4oE,CAAAA,uBAAA,CAAA3oE,EAAA,CAAAW,EAAA,CAAA,CAAA,CAAA,KAAAiwD,CAAAA,qBAAA,CAAAgY,QAAA,CAAA5oE,EAAA,CAAA,CAAA,GAAAD,EAAAk9D,CAAAA,aAAA;AAAAj9D,EAAA,CAAAD,EAAA02B,CAAAA,MAAA4xB,CAAAA,aAAA,CAAA,CAAA,IAAA5nD,GAAA,GAAA6G,EAAAovD,CAAAA,EAAA,EAAA,CAAAC,QAAA32D,EAAA22D,CAAAA,OAAA,CAAAC,QAAA52D,EAAA42D,CAAAA,OAAA,CAAA,CAAA72D,EAAAsS,CAAAA,KAAA,CAAA,CAAAvR,GAAAf,EAAA+3D,CAAAA,oBAAA,CAAAr3D,EAAAoS,CAAAA,CAAA,CAAApS,EAAAiJ,CAAAA,CAAA,CAAA3J,GAAA8lE,CAAAA,cAAA,CAAA9lE,EAAAylE,CAAAA,wBAAA,CAAA\/kE,EAAA,CAAAK,EAAA,CAAA,CAAAf,EAAA8lE,CAAAA,cAAA,EAAA,CAAA9lE,EAAAsS,CAAAA,KAAA6c,CAAAA,kBAAA,CAAAnvB,EAAA8lE,CAAAA,cAAAnlE,CAAAA,EAAA,CAAA,EAAAX,EAAA4lE,CAAAA,cAAA,CAAA3lE,EAAA,CAAAD,EAAA02B,CAAAA,MAAA4xB,CAAAA,aAAA,CAAAtoD,GAAA+wD,CAAAA,aAAA,CAAA9wD,EAAA,CAAA,CAAA,KAAAynE,CAAAA,kDAAA,CAAAoB,QAAA,CAAA7oE,EAAA,CAAA,CAAA,OAAA,GAAAA,EAAAw9C,CAAAA,WAAA,GAAAuQ,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA56C,MAAApJ,CAAAA,UAAA,CAAA,QAAA,EAAA,CAAAgkD,EAAA,CAAA,CAAAC,GAAA,EAAAhuD,EAAAywD,CAAAA,uBAAA,CAAAxwD,EAAA,CAAA,CAAA;AAAAuH,EAAAuhE,CAAAA,EAAA,CAAA,CAAA,CAAA,KAAArH,CAAAA,qBAAA,CAAAsH,QAAA,EAAA,CAAAz+D,YAAA,CAAAwjD,EAAA,CAAAA,GAAA,CAAA,CAAAC,GAAA,CAAA,CAAA,CAAA,CAAA,KAAA4Z,CAAAA,oCAAA,CAAAqB,QAAA,CAAAhpE,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,EAAAg5D,EAAAjyD,CAAAA,IAAA,GAAA\/G,EAAAy\/D,CAAAA,MAAA,GAAAl4D,EAAAqgE,CAAAA,EAAAtT,CAAAA,KAAA,EAAAt0D,EAAAy\/D,CAAAA,MAAA,GAAAl4D,EAAAqgE,CAAAA,EAAAC,CAAAA,IAAA,EAAApa,EAAA,EAAA,GAAA5sD,EAAAg1B,CAAAA,EAAA,EAAA91B,EAAAsS,CAAAA,KAAA,CAAA,EAAAtS,EAAAsS,CAAAA,KAAAkf,CAAAA,eAAA,EAAA,EAAA,GAAAppB,EAAAqmB,CAAAA,EAAA,EAAAzuB,EAAAsS,CAAAA,KAAAgsB,CAAAA,cAAA,CAAA,CAAA,MAAA,CAAA,CAAA4K,GAAA,CAAA,CAAA,CAAAjpC,GAAA45B,CAAAA,cAAA,EAAA,KAAAn5B,GAAA,CAAA,CAAA,CAAAK,GAAA,OAAAW,CAAAA,IAAA,CAAAyR,MAAAyjB,CAAAA,SAAAsyC,CAAAA,QAAA,CAAA,IAAA3hE,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAAmzC,CAAAA,QAAA,CAAA,KAAAnoE,GAAAf,EAAA22D,CAAAA,OAAA,CAAA31D,GAAAhB,EAAA42D,CAAAA,OAAA,CAAAj2D,GAAA,GAAA2G,EAAAwzD,CAAAA,EAAA,EAAA,QAAA,CAAA96D,EAAA,CAAA,CAAA,IAAAW,GAAAI,EAAAJ,CAAAX,EAAA22D,CAAAA,OAAA,CAAAn2D,GAAAQ,EAAAR,CAAAR,EAAA42D,CAAAA,OAAA;GAAA71D,EAAA,CAAAf,EAAA22D,CAAAA,OAAA,CAAA31D,EAAA,CAAAhB,EAAA42D,CAAAA,OAAA,CAAA91D,EAAA,EAAA,CAAAL,EAAA,GAAA,CAAA,CAAAqK,IAAA4T,CAAAA,GAAA,CAAA\/d,EAAA,CAAA,EAAA,CAAA,CAAAmK,IAAA4T,CAAAA,GAAA,CAAAle,EAAA,CAAA,CAAA,CAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,KAAAF,GAAAA,QAAAR,GAAA,CAAAC,EAAA,CAAA,CAAA0kB,QAAA4xB,CAAAA,IAAA2Q,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAgN,CAAAA,KAAA,CAAAp0D,EAAA,CAAAC,GAAAu9B,CAAAA,eAAA,EAAA,CAAA7Y,SAAA4xB,CAAAA,IAAA0Q,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAgN,CAAAA,KAAA,CAAA5zD,EAAA,CAAA2S,OAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAAj0D,QAAAA,GAAA,EAAA,CAAA+J,UAAA,CAAA,QAAA,EAAA,CAAA4a,QAAA4xB,CAAAA,IAAA2Q,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAgN,CAAAA,KAAA,CAAA5zD,EAAA,CAAA2S,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAAj0D,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAAA,EAAA48D,CAAAA,eAAA,CAAA,CAAAhqB,QAAA5yC,EAAAsS,CAAAA,KAAAsgC,CAAAA,OAAAA,CAAAhyC,EAAAgyC,CAAA5yC,EAAAsS,CAAAA,KAAAohB,CAAAA,IAAAxtB,CAAAA,KAAA,CAAA2sC,QAAA7yC,EAAAsS,CAAAA,KAAAugC,CAAAA,OAAAA,CAAApyC,EAAAoyC;AAAA7yC,EAAAsS,CAAAA,KAAAohB,CAAAA,IAAAxtB,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAzF,GAAA,GAAA8G,EAAAmwD,CAAAA,EAAA,EAAArJ,EAAA,CAAAA,QAAA,EAAA,CAAAA,EAAA,CAAA,IAAAnlB,GAAA,CAAA,CAAA,CAAAwkB,GAAA,GAAA1tD,EAAAsS,CAAAA,KAAAkf,CAAAA,eAAA,CAAA,GAAAjqB,EAAAwuB,CAAAA,EAAA,EAAA\/1B,EAAAkjB,CAAAA,MAAA,CAAA1b,EAAAwuB,CAAAA,EAAAC,CAAAA,IAAA,CAAA,CAAA,GAAA1uB,EAAAm2C,CAAAA,EAAA,EAAA19C,EAAAkjB,CAAAA,MAAA,CAAAljB,EAAAsS,CAAAA,KAAA,CAAA,CAAAtS,GAAAoyD,CAAAA,QAAA,CAAA,CAAA3qB,aAAA,IAAA,CAAA,CAAAznC,GAAAi7D,CAAAA,WAAA,CAAAh7D,EAAA22D,CAAAA,OAAA,CAAA32D,EAAA42D,CAAAA,OAAA,CAAA,IAAA,CAAA1jD,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA8T,CAAAA,YAAA,CAAAt6D,EAAA,CAAAuS,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAA6M,CAAAA,UAAA,CAAAxzD,EAAA,CAAA0S,OAAA+zC,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAgO,CAAAA,IAAA,CAAA30D,EAAA,CAAAG,GAAA4J,CAAAA,KAAA,EAAA,CAAA,CAAA,OAAA2I,OAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAgO,CAAAA,IAAA,CAAA30D,EAAA,CAAA,CAAA0S,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA8T,CAAAA,YAAA,CAAAt6D,EAAA,CAAA,CAAAk1D,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA3iD,MAAA8zC,CAAAA,gBAAA,CAAAz\/C,EAAA4\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\/1B,EAAAkjB,CAAAA,MAAA,CAAA,MAAA\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\/C,EAAA4\/C,CAAAA,EAAAmN,CAAAA,KAAA,CAAAv0D,EAAA4sE,CAAAA,WAAA,CAAA,CAAA9W,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA91D,EAAAkjB,CAAAA,MAAA+jC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAAylB,CAAAA,WAAA,CAAA7sE,EAAAmhE,CAAAA,UAAA,CAAA,CAAAnhE,EAAAkjB,CAAAA,MAAA+jC,CAAAA,gBAAA,CAAAz\/C,EAAA4\/C,CAAAA,EAAA0lB,CAAAA,SAAA,CAAA9sE,EAAAwhE,CAAAA,QAAA,CAAA,GAAA,IAAA,IAAA9gE,EAAA,CAAAV,EAAAkjB,CAAAA,MAAA,GAAA,IAAA,EAAA,GAAAxiB,EAAA,EAAAA,EAAAwmD,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAmN,CAAAA,KAAA,CAAAv0D,EAAA4sE,CAAAA,WAAA,CAAA,CAAA,IAAA,IAAA7rE,EAAA,CAAAf,EAAAkjB,CAAAA,MAAA,GAAA,IAAA,EAAA,GAAAniB,EAAA,EAAAA,EAAAmmD,CAAAA,mBAAA,CAAA1\/C,EAAA4\/C,CAAAA,EAAAylB,CAAAA,WAAA;AAAA7sE,EAAAmhE,CAAAA,UAAA,CAAA,CAAA,IAAA,IAAAngE,EAAA,CAAAhB,EAAAkjB,CAAAA,MAAA,GAAA,IAAA,EAAA,GAAAliB,EAAA,EAAAA,EAAAkmD,CAAAA,mBAAA,CAAA1\/C,EAAA4\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\/B,CAAAA,EAAA,CAAAz\/B,EAAAqgC,CAAAA,EAAA,CAAAsF,WAAA,CAAA3lC,EAAAigC,CAAAA,EAAA,CAAAjgC,EAAAkoB,CAAAA,EAAA,CAAAloB,EAAAioB,CAAAA,EAAA,CAAA8\/B,EAAA\/\/B,CAAAA,EAAA,CAAAhoB,EAAApE,CAAAA,CAAA,CAAA+pC,WAAA,CAAA3lC,EAAAm\/B,CAAAA,EAAA,CAAAwG,WAAA,CAAA3lC,EAAA+b,CAAAA,CAAA,CAAA\/b,EAAAs\/B,CAAAA,EAAA,CAAAt\/B,EAAAwgC,CAAAA,EAAA,CAAAxgC,EAAAu\/B,CAAAA,EAAA,CAAAoG,WAAA,CAAA3lC,EAAA8\/B,CAAAA,EAAA,CAAA9\/B,EAAAk\/B,CAAAA,EAAA,CAAAyG,WAAA;AAAA3lC,EAAA4gC,CAAAA,EAAA,CAAA5gC,EAAAmgC,CAAAA,EAAA,CAAAngC,EAAA4\/B,CAAAA,EAAA,CAAA5\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\/F,EAAAmuB,CAAAA,QAAA\/vB,CAAAA,MAAA2H,EAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\/B,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAuG,CAAA,CAAAzC,MAAA,CAAArD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA,GAAAc,CAAAmB,CAAAA,CAAA,EAAAlC,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,CAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,CAAA,CAAA,CAAA,CAAA8F,CAAA,CAAAzC,MAAA,CAAArD,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,CAAA;AAAAC,CAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,EAAA,CAAAU,CAAAuB,CAAAA,CAAA,CAAAhC,CAAA,CAAA,CAAAiC,EAAAA,QAAA,EAAA,CAAA,MAAAsB,EAAA,CAAA,CAAA,CAAA,KAAAzC,EAAAL,CAAA,CAAA,IAAA,CAAA,CAAAM,EAAAN,CAAA,CAAA,IAAA,CAAA,CAAAO,EAAAP,CAAA,CAAA,EAAA,CAAAE,EAAAA,CAAAF,CAAA,CAAA,GAAA,CAAAD,EAAAA,CAAAC,CAAAA,CAAAA,CAAA,CAAAE,CAAA,CAAAJ,EAAAA,CAAAE,CAAA,CAAA,GAAA,CAAAc,EAAAA,CAAAd,CAAAA,CAAAA,CAAA,CAAAF,CAAA,CAAA,KAAAmB,EAAAjB,CAAA,CAAA,IAAA,CAAAuB,EAAAA,CAAAvB,CAAAA,CAAAA,CAAA,CAAAiB,CAAA,CAAA,KAAA6D,EAAA9E,CAAA,CAAA,IAAA,CAAAiD,EAAAA,CAAAjD,CAAAA,CAAAA,CAAA,CAAA8E,CAAA,CAAA,KAAAI,EAAAlF,CAAA,CAAA,IAAA,CAAAoF,EAAAA,CAAApF,CAAAA,CAAAA,CAAA,CAAAkF,CAAA,CAAA,KAAA8D,EAAAhJ,CAAA,CAAA,IAAA,CAAAkD,EAAAA,CAAAlD,CAAAA,CAAAA,CAAA,CAAAgJ,CAAA,CAAA,KAAAO,EAAAvJ,CAAA,CAAA,IAAA,CAAA,CAAAiJ,EAAA,EAAAA,EAAAwb,CAAAA,iBAAA,CAAAvhB,CAAA,EAAA+F,EAAAyb,CAAAA,aAAA,CAAAzhB,CAAA,EAAAgG,EAAAoK,CAAAA,MAAA,CAAA9R,CAAA,EAAAojB,CAAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA1b,EAAA2b,CAAAA,MAAA,CAAA9jB,CAAA,EAAAmI,EAAA4b,CAAAA,kBAAA,CAAAzf,CAAA,EAAArF,EAAA,EAAA,CAAAwJ,CAAA\/H,CAAAA,CAAA,CAAAyH,CAAA,CAAAM,EAAA\/H,CAAAA,CAAA,EAAA+H,CAAA\/H,CAAAA,CAAAsjB,CAAAA,MAAA,EAAAvb,CAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/+C,SAAAzqB,EAAA,CAAAkpE,YAAA,GAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/gD,EAAAA,CAAA,GAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/zB,EAAA+zB,CAAAA,KAAA,CAAA,aAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/C,GAAAA,QAAA,EAAA,CAAA,MAAA\/hC,GAAA,CAAA,CAAAkrB,GAAAA,QAAA,EAAA,CAAA,MAAA7H,GAAA,CAAA,CAAAnE,GAAAA,QAAA,EAAA,CAAA,MAAAoM,GAAA,CAAA,CAAAujB,GAAAA,QAAA,EAAA,CAAA,MAAAhrB,GAAA,CAAA,CAAA0W,GAAAA,QAAA,EAAA,CAAA,MAAAr0C,GAAA,CAAA,CAAA+zC,GAAAA,QAAA,EAAA,CAAA,MAAAz0C,EAAA,CAAA,CAAA,CAAA,KAAAlG,EAAAL,CAAA,CAAA,IAAA,CAAA,CAAAM,EAAAN,CAAA,CAAA,IAAA,CAAA,CAAAO,EAAAP,CAAA,CAAA,IAAA,CAAA,CAAAE,EAAAF,CAAAA,CAAAA,CAAA,CAAAO,CAAA,CAAA,CAAAR,EAAAC,CAAA,CAAA,IAAA,CAAA,CAAAF,EAAAE,CAAA,CAAA,EAAA,CAAA,CAAAc,EAAAd,CAAA,CAAA,IAAA,CAAA,CAAAiB,EAAAjB,CAAA,CAAA,IAAA,CAAA,CAAAuB,EAAA,CAAA,OAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA6D,GAAAA,QAAA,CAAA9F,EAAA,CAAA,CAAA,IAAAC,GAAA,CAAA,CAAA+B,SAAAD,CAAAA,MAAA,EAAA,IAAA,EAAA,GAAAC,SAAA,CAAA,CAAA,CAAA,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAAtB,GAAAA,CAAA,QAAA,EAAA,MAAAT,GAAA,CAAA,CAAA4tB,MAAA5tB,EAAA,CAAA,CAAAA,EAAA,KAAAc,GAAAL,EAAAmtB,CAAAA,KAAA5sB,GAAAA,CAAA,IAAA,EAAA,GAAAF,EAAA,CAAA,GAAA,CAAAA,EAAA,KAAAH,GAAAF,EAAAotB,CAAAA,MAAArtB,GAAAA,CAAA,IAAA,EAAA;AAAAG,EAAA,CAAAK,EAAA,CAAAL,EAAA,KAAAY,GAAAd,EAAAq2E,CAAAA,MAAA,CAAAvxE,GAAA9E,EAAAkxB,CAAAA,KAAAhsB,GAAAA,CAAA,GAAA5E,CAAAkB,CAAAA,CAAA,EAAAxB,EAAA,CAAAuB,CAAA,CAAA,OAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,KAAA,CAAA5Z,CAAA,CAAAA,CAAA,CAAA,CAAA,cAAA,MAAA,CAAAqzE,UAAA,OAAA,CAAA16C,KAAA,KAAA,CAAAjC,QAAA,MAAAlqB,CAAAA,MAAA,CAAAlP,EAAA,CAAA,GAAA,CAAAkP,CAAAA,MAAA,CAAA1P,EAAA,CAAA,CAAAmzB,UAAA,GAAApzB,CAAA0B,CAAAA,CAAA,EAAA,CAAA,aAAAV,EAAA,CAAA,CAAA,CAAAowB,MAAApsB,EAAA,CAAA,CAAAI,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAksB,SAAA,QAAA,EAAA,MAAA9xB,GAAA,CAAA,GAAA2B,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAgF,KAAA,cAAA,CAAAtgB,EAAAjC,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA0J,EAAA,CAAAmkB,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAAvL,KAAA,MAAA,CAAAjE,YAAA,CAAA,CAAAwD,OAAA,cAAA,CAAAm1D,cAAA,OAAA,CAAAC,eAAA,OAAA,CAAA,CAAAtzE,EAAA,CAAAiqB,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAAvL,KAAA,MAAA,CAAAT,OAAA,cAAA,CAAAm1D,cAAA,OAAA;AAAAC,eAAA,OAAA,CAAA,CAAAjtE,GAAAnE,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAzK,EAAA,CAAA,CAAAnJ,EAAA,CAAA,CAAAkkB,MAAA,EAAA,CAAAC,OAAA,CAAA,CAAA\/N,GAAA,CAAA,CAAA,CAAA,CAAA,GAAApe,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,EAAA,CAAAC,GAAA,CAAA,CAAAC,GAAA,EAAA,CAAAC,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,gDAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,kFAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyH,CAAA,CAAA,CAAA5D,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA;AAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,mCAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,kCAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA5tE,CAAA,CAAAO,CAAA,CAAAN,EAAA7D,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA5tE,CAAA,CAAA,CAAAoJ,EAAAhN,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAA6oB,GAAA,IAAA,CAAAwtC,GAAA,IAAA,CAAA7yE,EAAA,GAAA,CAAA,CAAA,CAAA,GAAAY,CAAA4b,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAA6oB,GAAA,IAAA,CAAAwtC,GAAA,IAAA,CAAA7yE,EAAA,GAAA,CAAA,CAAA,CAAA,GAAAY,CAAA4b,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAA6oB,GAAA,IAAA,CAAAwtC,GAAA,GAAA,CAAA7yE,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2I,CAAA,CAAA,CAAAtF,EAAA0B,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,8BAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,GAAA;AAAAC,GAAA,IAAA,CAAAC,GAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA5tE,CAAA,CAAA,CAAA9E,EAAAkB,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAsU,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,+HAAA,CAAA6f,OAAA,cAAA,CAAAxD,YAAA,MAAA,CAAA,CAAA,CAAA,GAAA3c,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,iEAAA,CAAA6f,OAAA,cAAA,CAAAxD,YAAA,MAAA,CAAA,CAAA,CAAA,GAAA3c,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA5c,GAAA,cAAA,CAAAixB,MAAA,CAAA2lD,SAAA,OAAA,CAAA,CAAAC,UAAA,gBAAA,CAAA1kE,EAAA,CAAA,CAAAnJ,EAAA,CAAA,CAAAkkB,MAAA,CAAA,CAAAC,OAAA,CAAA,CAAAgE,SAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA;AAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,uIAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,GAAA,CAAA,CAAAk6D,KAAA,oBAAA,CAAA3lD,SAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,qcAAA;AAAAsgB,KAAA,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA3e,CAAA,CAAA,CAAA4C,EAAAV,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,+HAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,iEAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,uFAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAA6C,EAAAX,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA7b,CAAA2b,CAAAA,QAAA,CAAA,CAAAwU,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,oEAAA;AAAA6f,OAAA,cAAA,CAAAxD,YAAA,CAAA,CAAA24D,cAAA,OAAA,CAAA,CAAA,CAAA,GAAAt1E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAm6D,SAAA,SAAA,CAAAC,SAAA,SAAA,CAAA11E,EAAA,mDAAA,CAAAsgB,KAAA,cAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,gQAAA,CAAA6f,OAAA,cAAA,CAAAxD,YAAA,CAAA;AAAA24D,cAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAppD,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAAvL,KAAA,MAAA,CAAA,CAAA,CAAA\/e,EAAAsC,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA7b,CAAA2b,CAAAA,QAAA,CAAA,CAAAwU,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,6FAAA,CAAA6f,OAAA,cAAA,CAAAxD,YAAA,CAAA,CAAA24D,cAAA,OAAA,CAAA,CAAA,CAAA,GAAAt1E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAm6D,SAAA,SAAA,CAAAC,SAAA,SAAA,CAAA11E,EAAA,mDAAA,CAAAsgB,KAAA,cAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,kRAAA;AAAA6f,OAAA,cAAA,CAAAxD,YAAA,CAAA,CAAA24D,cAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAppD,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAAvL,KAAA,MAAA,CAAA,CAAA,CAAA3b,GAAAd,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA7b,CAAA2b,CAAAA,QAAA,CAAA,CAAAwU,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,2DAAA,CAAA6f,OAAA,cAAA,CAAAxD,YAAA,CAAA,CAAA24D,cAAA,OAAA,CAAA,CAAA,CAAA,GAAAt1E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAm6D,SAAA,SAAA,CAAAC,SAAA,SAAA,CAAA11E,EAAA,sDAAA,CAAAsgB,KAAA,cAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,uRAAA;AAAA6f,OAAA,cAAA,CAAAxD,YAAA,CAAA,CAAA24D,cAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAppD,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAAvL,KAAA,MAAA,CAAA,CAAA,CAAAzb,EAAAhB,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAA+E,KAAA,cAAA,CAAAuP,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,ylFAAA,CAAA,CAAA;AAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAm6D,SAAA,SAAA,CAAAC,SAAA,SAAA,CAAA11E,EAAA,mmJAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,CAAA4rB,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAAvL,KAAA,MAAA,CAAA,CAAA,CAAAtb,EAAAnB,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAsE,OAAA,cAAA,CAAAm1D,cAAA,OAAA,CAAAC,eAAA,OAAA,CAAAplD,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,4KAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,oBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsgB,KAAA,MAAA,CAAAsL,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAAxP,YAAA,IAAA,CAAA,CAAA,CAAA\/W,EAAAzB,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA;AAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAzK,EAAA,GAAA,CAAAnJ,EAAA,GAAA,CAAAkkB,MAAA,IAAA,CAAAC,OAAA,IAAA,CAAA\/N,GAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArW,CAAA,CAAA,CAAAlC,EAAA1B,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,+JAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyH,CAAA,CAAA,CAAAjC,GAAA3B,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA;AAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAA6oB,GAAA,IAAA,CAAAwtC,GAAA,IAAA,CAAA7yE,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2I,CAAA,CAAA,CAAAf,EAAA7C,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA5tE,CAAA,CAAA,CAAA\/B,GAAA7B,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,kBAAA,CAAAqc,YAAA,KAAA,CAAA,CAAA,CAAA1a,CAAA,CAAA,CAAAsE,GAAApC,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA;AAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,8DAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,SAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,+CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyH,CAAA,CAAA,CAAA7B,GAAA\/B,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAo6D,SAAA,SAAA,CAAA11E,EAAA,2IAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA;AAAA,CAAAtb,EAAA,0BAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAA1B,GAAA4D,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,KAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,MAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,MAAA,CAAAC,GAAA,KAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,UAAA,CAAA,CAAAib,OAAA,sBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA9uB,CAAA,CAAA,CAAAzG,GAAA6C,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,iBAAA,CAAA,CAAA;AAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,+JAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,gEAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,gEAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAAZ,GAAA8C,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,iGAAA,CAAA,CAAA;AAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,oBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyH,CAAA,CAAA,CAAA5I,GAAAgF,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAe,YAAA,MAAA,CAAArc,EAAA,kCAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAAO,GAAA2B,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,UAAA,CAAAqc,YAAA,MAAA,CAAA,CAAA,CAAA1a,CAAA,CAAA,CAAAS,GAAAyB,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAe,YAAA,MAAA,CAAArc,EAAA,qNAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAA0D,GAAAxB,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA;AAAA,CAAAtb,EAAA,gIAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAo6D,SAAA,SAAA,CAAA11E,EAAA,8PAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAAuE,GAAArC,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAo6D,SAAA,SAAA,CAAA11E,EAAA,qEAAA;AAAA6f,OAAA,cAAA,CAAA,CAAA,CAAAle,CAAA,CAAA,CAAAwE,GAAAtC,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,GAAA,CAAA,CAAAuE,OAAA,cAAA,CAAAxD,YAAA,MAAA,CAAA24D,cAAA,OAAA,CAAAC,eAAA,OAAA,CAAAplD,SAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,0MAAA,CAAA,CAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAAyE,GAAAvC,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA;AAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,GAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA5tE,CAAA,CAAA,CAAAmb,GAAA\/e,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAe,YAAA,MAAA,CAAArc,EAAA,sIAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAA4gB,GAAA1e,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,KAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,QAAA,CAAA,CAAA6oB,GAAA,IAAA,CAAAwtC,GAAA,IAAA,CAAA7yE,EAAA,GAAA,CAAA,CAAA,CAAA,GAAAY,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAA45D,GAAA,IAAA;AAAAC,GAAA,IAAA,CAAAC,GAAA,IAAA,CAAAC,GAAA,OAAA,CAAA,CAAA,CAAA,GAAA31E,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,mDAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyH,CAAA,CAAA,CAAAiX,GAAA7a,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAe,YAAA,MAAA,CAAArc,EAAA,mKAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAAmzB,GAAAjxB,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,wWAAA;AAAAqc,YAAA,MAAA,CAAA,CAAA,CAAA1a,CAAA,CAAA,CAAA8d,GAAA5b,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,mMAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,gSAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA2B,CAAA,CAAA,CAAAq3B,GAAAn1B,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,wUAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyH,CAAA,CAAA,CAAAwxB,GAAAp1B,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,UAAA;AAAA,CAAAgF,KAAA,MAAA,CAAAT,OAAA,cAAA,CAAA0W,OAAA,gBAAA,CAAA,CAAA,CAAA,CAAA3K,MAAA,EAAA,CAAAC,OAAA,EAAA,CAAA,CAAA,CAAArM,GAAA3b,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,6FAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,8FAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2B,CAAA,CAAA,CAAAw1B,GAAAtzB,EAAA,CAAA,2bAAA;AAAA,CAAA+nB,MAAA,GAAA,CAAAC,OAAA,GAAA,CAAA,CAAA,CAAAoL,GAAApzB,EAAA,CAAA,iYAAA,CAAA,CAAA+nB,MAAA,GAAA,CAAAC,OAAA,GAAA,CAAA,CAAA,CAAA2U,GAAA38B,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,mRAAA;AAAAqc,YAAA,MAAA,CAAA,CAAA,CAAA1a,CAAA,CAAA,CAAA8+B,GAAA58B,EAAA,CAAA,+TAAA,CAAA,CAAA+nB,MAAA,GAAA,CAAAC,OAAA,GAAA,CAAA,CAAA,CAAAua,GAAAviC,EAAA,CAAA,meAAA,CAAA;AAAAw+B,GAAAx+B,EAAA,CAAA,GAAAnE,CAAA6b,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAAc,YAAA,MAAA,CAAAwT,SAAA,CAAA,GAAAnwB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAuE,OAAA,MAAA,CAAA7f,EAAA,eAAA,CAAAsgB,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA5gB,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,WAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,iEAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,2CAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,gDAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,UAAA,CAAA,CAAA,CAAA,GAAAN,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,mBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyH,CAAA,CAAA,CAAAw7B,GAAAp\/B,EAAA,CAAA,4bAAA;AAAA,CAAA+nB,MAAA,GAAA,CAAAC,OAAA,GAAA,CAAA,CAAA,CAAA6U,IAAA78B,EAAA,CAAA,iPAAA,CAAA,CAAA+nB,MAAA,GAAA,CAAAC,OAAA,GAAA,CAAA,CAAA,CAAAhoB,EAAA,CAAA,sHAAA,CAAA,CAAA+nB,MAAA,GAAA,CAAAC,OAAA,GAAA,CAAA,CAAA,CAAAhoB,EAAA,CAAA,oRAAA,CAAA68B,CAAA;AAAAC,IAAA98B,EAAA,CAAA,uVAAA,CAAA,CAAAA,EAAA,CAAA,GAAAnE,CAAA4b,CAAAA,GAAA,EAAA,MAAA,CAAA,CAAAtb,EAAA,gFAAA,CAAAqc,YAAA,MAAA,CAAA,CAAA,CAAA1a,CAAA,CAAAg\/B,CAAA,CAAA0C,GAAAx\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/a,YAAA\/lB,CAAA+tC,CAAAA,KAAA,CAAApoB,gBAAA,aAAA;AAAAjP,UAAA,SAAA,CAAA\/B,YAAA,CAAA,CAAAoF,YAAA,OAAA,CAAAlE,UAAA,CAAA,CAAA6Q,QAAA,GAAA,CAAAC,OAAA,CAAA,CAAA,CAAA,CAA7oH,CAA6oH,IAAA0pD,QAAA,CAAAh6E,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAoS,QAAAA,EAAA,CAAA9S,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAA0D,QAAAA,EAAA,CAAApE,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/R,CAAAgB,CAAAA,MAAA,CAAA,CAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/E,WAAAn\/E,CAAA,CAAAo\/E,QAAAn\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\/E,CAAAA,MAAA,CAAA,CAAAz\/E,EAAA,CAAAU,EAAA,CAAA,CAAA,CAAAK,EAAAqI,CAAAA,OAAA,EAAAnJ,EAAA+uD,CAAAA,aAAA,CAAA,CAAA3J,aAAAtkD,CAAAqI,CAAAA,OAAA,EAAA,CAAA,CAAA,KAAAnI,GAAAsG,CAAA,EAAA,OAAAtG,GAAA,EAAAjB,EAAA,CAAAiB,EAAA,CAAA,CAAAkS,MAAA8zC,CAAAA,gBAAA,CAAAh9C,CAAAm9C,CAAAA,EAAAiyB,CAAAA,UAAA,CAAA34E,EAAA,CAAA,CAAA,QAAA,EAAA,CAAAyS,MAAA+zC,CAAAA,mBAAA,CAAAj9C,CAAAm9C,CAAAA,EAAAiyB,CAAAA,UAAA,CAAA34E,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAA7oH,CAA6oH,IAAAy\/E,QAAA,CAAA1\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/vB,CAAA+vB,CAAAA,SAAA,CAAA\/vB,CAAA+vB,CAAAA,SAAA,CAAA,OAAA,GAAA\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\/B,WAAAz\/B,EAAA,CAAAuW,KAAAtN,EAAA,CAAAolB,UAAA9uB,EAAA8uB,CAAAA,SAAAA;AAAAtuB,CAAAkoC,CAAAA,EAAA,CAAA\/Z,cAAA3uB,EAAA2uB,CAAAA,aAAAA,EAAAnuB,CAAAs2D,CAAAA,EAAA,CAAA1oC,YAAA,IAAA,IAAA1tB,EAAA,CAAAV,EAAAouB,CAAAA,WAAA,GAAA,IAAA,EAAA,GAAA1tB,EAAA,CAAAA,EAAA,CAAA,IAAA,CAAAgtB,aAAA1tB,EAAA0tB,CAAAA,YAAAA,EAAAhkB,EAAA,CAAAkkB,WAAAhqB,EAAA,CAAAmqB,SAAA9jB,EAAA,CAAA,CAAA,CAAAjJ,EAAA,GAAAhB,EAAA,CAAA2J,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAA3J,EAAA,CAAA,CAAA,GAAAiB,CAAAmrD,CAAAA,EAAA,EAAApsD,EAAA,CAAA,CAAA,EAAAA,EAAA,MAAA,UAAA,CAAA,MAAA4E,EAAA,CAAA5E,EAAA,CAAA,CAAAw4B,OAAAx4B,EAAAw4B,CAAAA,MAAA,CAAAqP,mBAAA,IAAA,CAAAu0B,iBAAAp8D,EAAAo8D,CAAAA,gBAAA,CAAAC,UAAAr8D,EAAAq8D,CAAAA,SAAA,CAAA,CAAA,MAAA,OAAA,CAAA,MAAAz3D,EAAA,CAAA5E,EAAA,CAAA,CAAA8U,OAAA9U,EAAA8U,CAAAA,MAAAA,EAAA,SAAA,CAAAigC,OAAA\/0C,EAAA+0C,CAAAA,MAAA,CAAA+qB,MAAA9\/D,EAAA8\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\/xC,EAAA+xC,CAAAA,WAAA,CAAA\/xC,EAAAyxC,CAAAA,eAAA,CAAA,SAAA,CAAA,IAAA,CAAAzxC,EAAA+xC,CAAAA,WAAA,CAAA,CAAA,CAAA,CAAAhrC,EAAAA,QAAA,CAAAvH,CAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAA,CAAAutB,SAAA9qB,CAAA,CAAA,IAAA,EAAAxD,CAAA,CAAA,IAAA,EAAA,CAAAA,CAAAsuB,CAAAA,QAAA,CAAA5tB,EAAA,CAAAK,EAAA,CAAA,CAAAwtB,SAAAtnB,CAAA,CAAA,IAAA,EAAAjH,CAAA,CAAA,IAAA,EAAA,CAAAA,CAAAuuB,CAAAA,QAAA,CAAAtuB,EAAA,EAAA,IAAA,CAAA,CAAAyyB,OAAA,IAAA,EAAA1yB,CAAA,CAAA,IAAA,EAAA,CAAAA,CAAA0yB,CAAAA,KAAAA,GAAA,EAAA,CAAA,CAAA,CAAAlrB,EAAAA,QAAA,CAAAxH,CAAA,CAAA,CAAA,IAAAC,GAAAuD,CAAA,CAAA,GAAAvC,CAAAssB,CAAAA,EAAA,EAAAvtB,CAAAsuB,CAAAA,QAAA,CAAA,CAAA,IAAA,CAAA,OAAAruB,GAAA8B,CAAAA,MAAA,CAAA4H,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAA3J,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAsuB,SAAAruB,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAAwH,GAAAA,QAAA,EAAA,CAAA,IAAAzH,CAAA,CAAAU,GAAA,CAAA,CAAAsB,SAAAD,CAAAA,MAAA;AAAAC,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAAAjB,GAAA,EAAA,CAAAC,GAAA0I,CAAA,CAAA,CAAAzJ,CAAA+B,SAAAD,CAAAA,MAAA9B,EAAA,IAAA,EAAAA,GAAA+B,SAAA,CAAA,CAAA,CAAA\/B,CAAA+B,SAAA,CAAA,CAAA,CAAA\/B,CAAA,EAAA,CAAA,IAAA,CAAA,IAAAe,EAAAR,CAAAA,CAAA,EAAA,CAAA,CAAAuX,CAAA\/X,CAAA+X,CAAA\/W,EAAAN,CAAAA,CAAA,EAAAqX,EAAAA,IAAA,CAAA,CAAA,CAAA,IAAA9W,GAAAjB,CAAAkG,CAAAA,KAAA,IAAArE,KAAAC,CAAAA,OAAA,CAAAb,EAAA,CAAA,CAAA,CAAA,IAAAL,GAAA4G,CAAA,CAAA,CAAAsN,OAAApU,EAAA,CAAA4tB,SAAArtB,EAAA,CAAAN,GAAA,GAAAF,CAAAipC,CAAAA,EAAA,GAAA,CAAAuC,QAAApiC,IAAAC,CAAAA,GAAA,EAAA,CAAA,CAAAlJ,GAAA,EAAAG,EAAA+L,CAAAA,IAAA,CAAAlM,EAAA,CAAA,CAAA,IAAA,CAAA,IAAAJ,GAAAS,EAAA,CAAAO,GAAAgG,CAAA,CAAAmC,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAnJ,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAG,GAAAH,EAAAG,CAAAA,EAAAA,EAAA,GAAAF,CAAAipC,CAAAA,EAAA,GAAA,CAAA50B,OAAAtU,EAAAsU,CAAAA,MAAAA,EAAApU,EAAA,CAAAurC,QAAAzrC,EAAAyrC,CAAAA,OAAAA,EAAApiC,IAAAC,CAAAA,GAAA,EAAA,CAAA,CAAA,CAAAtI,GAAA,EAAAT,EAAA+L,CAAAA,IAAA,CAAAtL,EAAA,CAAA,CAAA,CAAA,CAAA,MAAAxB,EAAA,CAAA,CAAAgB,EAAAhB,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,OAAA,CAAAgB,EAAAwE,CAAAA,CAAA,EAAA,CAAA,MAAAzE,GAAA,CAAA,CAA7oH,CAA6oH,KAAA8\/E,QAAA,CAAA7gF,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAA,CAAAuB,CAAAA,CAAA,CAAAhC,CAAA,CAAA,CAAAi7B,EAAAA,QAAA,EAAA,CAAA,MAAAl6B,EAAA,CAAA,CAAA0gB,EAAAA,QAAA,EAAA,CAAA,MAAAzgB,EAAA,CAAA,CAAA,CAAA,KAAAF;AAAAL,CAAA,CAAA,IAAA,CAAA,CAAAM,EAAAA,QAAA,CAAAhB,CAAA,CAAA,CAAA,MAAA,GAAAe,CAAAD,CAAAA,CAAA,EAAAd,CAAA,CAAA,CAAA,CAAAiB,EAAAA,QAAA,CAAAjB,CAAA,CAAA,CAAA,MAAA,CAAA,EAAA,IAAA,EAAAA,CAAA,EAAAA,CAAA0wB,CAAAA,QAAA,CAAAs0B,QAAAC,CAAAA,MAAA,CAAA,EAAA,IAAA,EAAAjlD,CAAA,EAAAA,CAAA4hE,CAAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAA7oH,CAA6oH,KAAAkf,QAAA,CAAA9gF,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAI,QAAAA,EAAA,CAAAd,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAyD,QAAAA,EAAA,CAAAnE,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/xD,EAAA+tC,CAAAA,KAAA,CAAA,OAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/\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\/B,CAAA84D,CAAAA,cAAA,CAAA\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\/D,EAAAsD,CAAA,CAAAA,CAAAS,CAAA\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\/E,EAAA,CAAA+F,EAAA,CAAA,CAAA,CAAA\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\/hF,EAAA,CAAAF,CAAAy+E,CAAAA,IAAA,CAAAj\/E,CAAA8S,CAAAA,CAAA7Q,GAAA,EAAAjC,CAAA2J,CAAAA,CAAAnE,GAAA,EAAAxF,CAAA8S,CAAAA,CAAA,KAAAlS,GAAA+C,EAAA\/C,CAAAZ,CAAA2J,CAAAA,CAAA,CAAA,IAAA\/D,EAAA,CAAA,GAAAqE,CAAA64E,CAAAA,EAAA,EAAA9iF,CAAA,CAAA,CAAA8F,CAAA,CAAA,GAAAnE,EAAAqgF,CAAAA,EAAA,EAAAp8E,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,CAAA,CAAA,GAAA\/H,EAAAsgF,CAAAA,EAAA,EAAAn8E,CAAA,CAAA,CAAA6D,CAAA,CAAA,GAAA1I,CAAAiB,CAAAA,CAAA,EAAAwH,CAAA;AAAA,CAAA,CAAA,CAAAtF,EAAA,CAAAuF,CAAA,CAAA,CAAA,CAAA,CAAA\/E,EAAA,CAAA+E,CAAA,CAAA,CAAA,CAAA,CAAAnD,EAAA,CAAAmD,CAAA,CAAA,CAAA,CAAA,CAAAjJ,CAAA,CAAAiJ,CAAAmJ,CAAA,CAAAA,CAAA,CAAA9S,CAAA8S,CAAAA,CAAA,CAAA1O,EAAA,EAAApE,CAAA2J,CAAAA,CAAA,CAAA\/E,EAAA,EAAA5E,CAAA8S,CAAAA,CAAA,CAAAlS,EAAA,CAAA4F,EAAA,CAAAxG,CAAA2J,CAAAA,CAAA,IAAA1J,EAAA,CAAA,CAAAS,CAAA,CAAAK,EAAA,CAAAC,EAAA,CAAAJ,EAAA,EAAAF,CAAA,CAAAM,EAAA,EAAA,CAAA,EAAAD,EAAA,CAAAH,EAAA,EAAA,CAAA,CAAA,CAAA,CAAAH,EAAA,CAAA,MAAAR,GAAA6G,GAAAA,CAAA,GAAAlD,CAAA4pB,CAAAA,EAAA,EAAAxtB,CAAA,CAAA,OAAA8G,GAAA,GAAA7G,EAAA,CAAAuD,CAAAq\/E,CAAAA,wBAAA,CAAA7iF,CAAA,CAAA,CAAAU,CAAA,CAAAK,EAAA,CAAAC,EAAA,CAAAJ,EAAA,CAAA,CAAAkG,EAAA,CAAA,EAAA7G,EAAA,CAAA,KAAA2G,EAAAA,QAAA,CAAA5G,CAAA,CAAA,CAAAC,CAAAA,CAAA,GAAAc,CAAAmB,CAAAA,CAAA,EAAA,IAAAmE,GAAA,CAAArG,CAAA8e,CAAAA,MAAA,CAAA,QAAA,CAAA9e,EAAA,CAAA,CAAA,MAAA,KAAA,GAAAA,EAAA,EAAA,CAAA,CAAA,GAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,OAAA+B,CAAA9B,CAAA8B,CAAA9B,CAAAye,CAAAA,IAAA,CAAA,QAAA,CAAA1e,EAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAC,CAAA,CAAA,CAAA8B,EAAAA,MAAA,CAAA9B,CAAA,CAAA,IAAA,CAAA,CAA7oH,CAA6oH,KAAA4lF,QAAA,CAAA7lF,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAAiB,QAAAA,EAAA,CAAA3B,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,EAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,CAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,EAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,CAAA,CAAAC,EAAA,GAAAc,CAAA,CAAAA,CAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,CAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,CAAA;AAAAC,CAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,EAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,CAAA,CAAAK,CAAA,CAAA,CAAA,MAAAL,EAAA,CAAAuB,QAAAA,EAAA,CAAAjC,CAAA,CAAA,CAAA,IAAA,IAAAC,EAAA,CAAA,CAAAA,CAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,CAAA,EAAA,CAAA,CAAA,IAAAS,EAAA,IAAA,EAAAsB,SAAA,CAAA\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA;AAAA,EAAAA,GAAA,CAAA,CAAA,CAAA6S,CAAA,CAAA\/O,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAgB,CAAAiB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAoS,CAAA,CAAA\/O,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAU,CAAAuB,CAAAA,CAAA,CAAAhC,CAAA,CAAA,CAAAmsD,GAAAA,QAAA,EAAA,CAAA,MAAAtlD,EAAA,CAAA,CAAAijE,GAAAA,QAAA,EAAA,CAAA,MAAAxiE,EAAA,CAAA,CAAA6vD,GAAAA,QAAA,EAAA,CAAA,MAAAnwD,EAAA,CAAA,CAAA+kC,GAAAA,QAAA,EAAA,CAAA,MAAArkC,GAAA,CAAA,CAAAu\/B,GAAAA,QAAA,EAAA,CAAA,MAAAr\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\/lF,EAAAgX,CAAAA,IAAA,CAAA,CAAA\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\/D,MAAA,IAAA;CAAA\/+D,EAAA,CAAAf,EAAA8\/D,CAAAA,KAAA,GAAA,IAAA,EAAA,GAAA\/+D,EAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA4H,EAAAA,QAAA3I,GAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAA,CAAA,CAAAsB,SAAAD,CAAAA,MAAA,EAAA,IAAA,EAAA,GAAAC,SAAA,CAAA,CAAA,CAAA,CAAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA,EAAA\/B,EAAA,EAAA,QAAA,GAAA,GAAAc,CAAAmB,CAAAA,CAAA,EAAAjC,EAAA,CAAA,CAAA,MAAAA,GAAA,IAAA,iBAAA,GAAA8D,MAAA2B,CAAAA,SAAAxC,CAAAA,QAAA+B,CAAAA,IAAAjE,CAAAf,EAAAe,CAAA,CAAA,CAAA,IAAAC,GAAA,UAAA,EAAA,MAAAhB,GAAA4d,CAAAA,WAAA,CAAA9Z,MAAAsiF,CAAAA,MAAA,CAAAtiF,MAAAuiF,CAAAA,cAAA,CAAArmF,EAAA,CAAA,CAAA,CAAA,EAAA,CAAAW,EAAA,KAAAA,EAAA,GAAAX,GAAA,CAAAA,EAAA0F,CAAAA,cAAA,CAAA\/E,EAAA,CAAA,GAAA,CAAA,GAAAF,EAAA,EAAA,OAAA,GAAAE,EAAA,EAAA,QAAA,GAAAA,EAAA,IAAAK,EAAA,CAAAL,EAAA,CAAA,CAAAZ,EAAA,CAAAC,EAAA,CAAAW,EAAA,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,CAAA,OAAAO,GAAA,CAAA,GAAAY,KAAAC,CAAAA,OAAA,CAAA7B,EAAA,CAAA,CAAA,CAAAQ,EAAAA,CAAAR,EAAA8B,CAAAA,MAAA,KAAAvB,EAAA,CAAAqB,KAAA,CAAApB,EAAA,CAAA,CAAAA,EAAA,EAAA,CAAA,CAAAD,EAAA,CAAAC,EAAA,CAAA,CAAAT,EAAA,CAAAC,EAAA,CAAAQ,EAAA,CAAA,CAAAC,EAAA;AAAA,CAAA,CAAA,OAAAF,GAAA,CAAA,MAAAP,GAAA,CAAA,CAAA0H,GAAAA,QAAA,CAAA3H,EAAA,CAAA,CAAA,MAAA2I,EAAA,CAAA3I,EAAA,CAAA,CAAA,CAAAkI,GAAAA,QAAA,CAAAlI,EAAA,CAAA,CAAA,GAAA,GAAAS,CAAA8lF,CAAAA,EAAA,GAAA,EAAAvmF,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAAS,EAAA,CAAAK,GAAA,EAAAoP,CAAAA,MAAA,CAAAnQ,EAAA,CAAA,OAAA,CAAA,OAAA,KAAA,IAAAC,EAAA,CAAAkT,MAAAvN,CAAAA,CAAA,GAAA,IAAA,EAAA,GAAA3F,EAAA,EAAA,IAAA,IAAAS,EAAA,CAAAT,EAAAk6C,CAAAA,GAAA,GAAA,IAAA,EAAA,GAAAz5C,EAAA,EAAAA,EAAAyuD,CAAAA,gCAAA,EAAA5yB,CAAAA,IAAA,CAAA,QAAA,CAAAv8B,EAAA,CAAA,CAAA,MAAAA,GAAAW,CAAAA,EAAA,GAAAI,EAAA,CAAA,CAAA,GAAAA,EAAA,EAAA,OAAA,EAAAA,EAAA,CAAA,MAAA,GAAAP,CAAAkpC,CAAAA,EAAA,GAAA,CAAA,CAAA7hC,GAAAA,QAAA,CAAA7H,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAK,EAAA,CAAA,CAAAC,EAAAA,CAAA2H,CAAA,CAAAjI,EAAA,CAAA,OAAAM,GAAAL,CAAAA,EAAA,CAAAuH,EAAA,CAAAlH,EAAAL,CAAAA,EAAA,CAAA,CAAAK,EAAAqtB,CAAAA,aAAA,CAAA,IAAA,CAAArtB,EAAA+tE,CAAAA,OAAA,CAAA,GAAAtuE,CAAA4\/E,CAAAA,EAAA,GAAA,CAAAr\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\/B,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAAyJ,CAAA,CAAA3F,MAAA,CAAArD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA,GAAAe,CAAAkB,CAAAA,CAAA,EAAAlC,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,CAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,CAAA,CAAA,CAAA,CAAAgJ,CAAA,CAAA3F,MAAA,CAAArD,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,CAAA;AAAAC,CAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,EAAA,CAAAU,CAAAuB,CAAAA,CAAA,CAAAhC,CAAA,CAAA,CAAAutC,GAAAA,QAAA,EAAA,CAAA,MAAAvjC,EAAA,CAAA,CAAAxC,EAAAA,QAAA,EAAA,CAAA,MAAAX,GAAA,CAAA,CAAAmnC,GAAAA,QAAA,EAAA,CAAA,MAAAznC,EAAA,CAAA,CAAAqnE,GAAAA,QAAA,EAAA,CAAA,MAAAlkE,EAAA,CAAA,CAAA2\/D,GAAAA,QAAA,EAAA,CAAA,MAAA1iE,EAAA,CAAA,CAAA,CAAA,KAAA7F,EAAAL,CAAA,CAAA,IAAA,CAAA,CAAAM,EAAAN,CAAA,CAAA,IAAA,CAAA,CAAAO,EAAAP,CAAA,CAAA,IAAA,CAAA,CAAAE,EAAAF,CAAA,CAAA,IAAA,CAAA,CAAAD,EAAAC,CAAA,CAAA,IAAA,CAAA,CAAAF,EAAAE,CAAA,CAAA,IAAA,CAAA,CAAAc,EAAAd,CAAA,CAAA,IAAA,CAAA,CAAAiB,EAAAjB,CAAA,CAAA,IAAA,CAAA,CAAAuB,EAAAvB,CAAA,CAAA,IAAA,CAAA,CAAA8E,GAAA9E,CAAA,CAAA,IAAA,CAAA,CAAAiD,EAAAjD,CAAA,CAAA,IAAA,CAAA,CAAAkF,EAAAlF,CAAA,CAAA,IAAA,CAAA,CAAAoF,EAAApF,CAAA,CAAA,IAAA,CAAA,CAAAuJ,EAAAA,QAAA,CAAAjK,CAAA,CAAA,CAAA,MAAAA,EAAA,EAAA,CAAA,CAAA+K,IAAAkT,CAAAA,EAAA,CAAAje,CAAA,CAAA,CAAA,CAAA+K,IAAAkT,CAAAA,EAAA,CAAAje,CAAA,CAAA,CAAA2J,EAAAA,QAAA,CAAA3J,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAK,CAAA,CAAAC,EAAA,CAAAJ,CAAA,CAAAH,EAAA,CAAAD,EAAA,CAAAgB,EAAA,CAAAS,EAAA,CAAAuD,EAAA,CAAA,CAAA,GAAA,CAAA,GAAA9E,CAAAqB,CAAAA,MAAA,CAAA,CAAA6D,CAAAA,CAAA,GAAA3E,CAAAiB,CAAAA,CAAA,EAAAxB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,UAAA,GAAAT,CAAA,CAAA,CAAAQ,CAAAA,CAAA,GAAAe,CAAAosC,CAAAA,EAAA,EAAA5tC,CAAA,CAAAQ,EAAAA,CAAA,GAAAS,CAAAiB,CAAAA,CAAA,EAAAzB,CAAA,CAAA,CAAA,CAAAkJ,EAAAA,CAAA,CAAAA,CAAAoB,IAAAkT,CAAAA,EAAAtU,CAAA,CAAAA;AAAAoB,IAAA27E,CAAAA,KAAA,CAAAhmF,EAAA,EAAAF,CAAAmD,CAAA,CAAAA,CAAA,CAAAnD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAP,EAAA,EAAAO,CAAAgF,CAAA,CAAAA,CAAA,CAAAhF,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAO,GAAA,GAAA4I,CAAA,EAAA\/I,CAAA43E,CAAAA,EAAA,CAAA,CAAA,CAAA7uE,CAAA,EAAAA,CAAA,CAAA\/I,CAAA43E,CAAAA,EAAA,CAAA7uE,EAAA,CAAAM,CAAA,CAAAN,CAAA,CAAAmJ,EAAAA,CAAA,GAAAhN,CAAA6gF,CAAAA,EAAA,EAAA3mF,CAAA,CAAA,IAAA,GAAAiC,CAAAksB,CAAAA,EAAA,EAAAnuB,CAAA,CAAA,CAAAwvB,MAAA7lB,CAAA,CAAA,CAAA,CAAAmJ,CAAA,CAAA,CAAA,IAAA1O,EAAA,CAAAQ,GAAA,IAAA,IAAAR,EAAA,CAAAwB,CAAA1D,CAAAA,CAAA+jC,CAAAA,QAAA,CAAAjmC,CAAA,CAAA,GAAA,IAAA,EAAA,GAAAoE,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAm0B,CAAAA,UAAA,CAAAzlB,CAAA,CAAAlO,GAAA,EAAA,CAAA,GAAAjD,CAAAqjE,CAAAA,EAAA,EAAAhlE,CAAA,CAAA,EAAA,GAAAiC,CAAAksB,CAAAA,EAAA,EAAAvpB,EAAA,CAAA,CAAA4qB,MAAA7lB,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,KAAA,CAAAlJ,EAAAA,CAAA,GAAAe,CAAAosC,CAAAA,EAAA,EAAA5tC,CAAA,CAAA2B,GAAAA,CAAA,GAAAV,CAAAiB,CAAAA,CAAA,EAAAzB,EAAA,CAAA,CAAA,CAAA+E,GAAAA,CAAA7D,EAAA,CAAA,CAAA,CAAAgC,EAAAA,CAAAhC,EAAA,CAAA,CAAA,CAAAiE,GAAAA,CAAAjE,EAAA,CAAA,CAAA,CAAAmE,GAAAA,CAAAnE,EAAA,CAAA,CAAA,CAAAsI,GAAAA,CAAA,GAAAzJ,CAAAygF,CAAAA,EAAA,EAAAlgF,EAAA,CAAAC,EAAA,EAAAwE,EAAA,CAAAI,EAAA,EAAA,CAAA,EAAAjC,CAAA,CAAAmC,EAAA,EAAA,CAAA,CAAA,CAAA9F,CAAAwvB,CAAAA,KAAA,CAAA7lB,GAAAA,CAAA,GAAA1I,CAAAiB,CAAAA,CAAA,EAAA+H,EAAA,CAAA,CAAA,CAAA6I,GAAAA,CAAAnJ,EAAA,CAAA,CAAA,CAAA\/E,GAAAA,CAAA+E,EAAA,CAAA,CAAA,CAAA;OAAA1J,CAAA,EAAA,KAAA,IAAA,CAAAW,EAAA,CAAAmK,IAAAC,CAAAA,GAAA,EAAA8H,EAAA,CAAAtN,EAAA,GAAAI,EAAA,CAAAJ,EAAA,GAAAZ,EAAA,CAAAjB,CAAA,GAAAmC,EAAA,CAAAnC,CAAA,EAAA,MAAA,MAAA,IAAA,CAAA\/C,EAAA,CAAAmK,IAAAC,CAAAA,GAAA,EAAApF,EAAA,CAAAkN,EAAA,GAAAlN,EAAA,CAAAJ,EAAA,GAAAM,EAAA,CAAAlB,EAAA,GAAAkB,EAAA,CAAAnC,CAAA,EAAA,MAAA,MAAA,IAAA,CAAA\/C,EAAA,CAAAmK,IAAAC,CAAAA,GAAA,EAAA8H,EAAA,CAAAtN,EAAA,GAAAI,EAAA,CAAAJ,EAAA,GAAAM,EAAA,CAAAlB,EAAA,GAAAkB,EAAA,CAAAnC,CAAA,EAAA,MAAA,MAAA,IAAA,CAAA\/C,EAAA,CAAAmK,IAAAC,CAAAA,GAAA,EAAApF,EAAA,CAAAkN,EAAA,GAAAlN,EAAA,CAAAJ,EAAA,GAAAZ,EAAA,CAAAjB,CAAA,GAAAmC,EAAA,CAAAnC,CAAA,EAAA,CAAA,CAAA,CAAA\/C,EAAA,GAAA4F,EAAA,CAAAxG,CAAA6tB,CAAAA,KAAA,CAAAjtB,EAAA,CAAA6F,EAAA,EAAAzG,CAAA8tB,CAAAA,MAAA,CAAAtqB,EAAA,CAAAY,CAAA,CAAApE,CAAA,CAAAwG,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAA,GAAAjD,EAAA,GAAAoD,CAAA,CAAA,GAAApF,CAAAg4D,CAAAA,EAAA,EAAAx5D,CAAA,CAAAwG,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAK,CAAA,CAAA,GAAA7F,CAAAiB,CAAAA,CAAA,EAAA0E,CAAA,CAAA,CAAA,CAAA,CAAAK,EAAA,EAAAzB,EAAA,CAAAsB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAS,CAAA,EAAA5D,CAAA,CAAAmD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAU,EAAA,EAAA5B,EAAA,CAAAkB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAW,EAAA,EAAA3B,EAAA,CAAAgB,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAo\/E,CAAA,CAAA1lF,CAAA0lF,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAAxlF,EAAA,aAAAgB,CAAAA,IAAA,CAAAzB,CAAA,CAAAS,EAAAA,CAAAA,EAAA,aAAAgB,CAAAA,IAAA,CAAAzB,CAAA,CAAA,CAAAO,EAAA,aAAAkB,CAAAA,IAAA,CAAAzB,CAAA,CAAAO,EAAAE,CAAAF,EAAA,aAAAkB,CAAAA,IAAA,CAAAzB,CAAA,CAAA;AAAAmE,EAAA,aAAA1C,CAAAA,IAAA,CAAAzB,CAAA,CAAAmE,EAAA1D,CAAA0D,EAAA,aAAA1C,CAAAA,IAAA,CAAAzB,CAAA,CAAA,CAAAD,EAAA,aAAA0B,CAAAA,IAAA,CAAAzB,CAAA,CAAAD,EAAAU,CAAAV,EAAA,aAAA0B,CAAAA,IAAA,CAAAzB,CAAA,CAAA,CAAA,CAAA0I,CAAA,CAAAu9E,CAAA,CAAA,IAAA,CAAA1lF,CAAA,CAAA,CAAA,CAAAR,CAAA8S,CAAAA,CAAA,CAAA9S,CAAA2J,CAAAA,CAAA,CAAA3J,CAAAwvB,CAAAA,KAAA,CAAAvoB,EAAA,CAAAM,CAAA,CAAAC,EAAA,CAAAC,EAAA,CAAA,CAAAE,CAAA,CAAA,GAAA1G,CAAAiB,CAAAA,CAAA,EAAAyG,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA1G,CAAAksB,CAAAA,EAAA,EAAAnuB,CAAA,CAAA,CAAAw+B,SAAAh7B,EAAAwD,CAAAA,IAAA,CAAA6mB,MAAArnB,EAAA,CAAAsnB,OAAArnB,EAAA,CAAAsnB,SAAAvqB,EAAAuqB,CAAAA,QAAA,CAAAjb,EAAAnL,CAAAO,CAAA,CAAAA,CAAA,CAAAyB,EAAAhC,CAAAE,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAAnH,CAAAqB,CAAAA,MAAA,CAAA,CAAA,GAAA,UAAA,GAAA9B,CAAA,CAAA,MAAAuD,EAAA,CAAAxD,CAAA,CAAAU,CAAA,CAAAF,EAAA,CAAAgB,EAAA,CAAAR,EAAA,CAAAiB,EAAA,CAAAuD,EAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA,GAAAvF,CAAA,EAAA,IAAA,GAAAA,CAAA,EAAA,IAAA,GAAAA,CAAA,EAAA,IAAA,GAAAA,CAAA,CAAA,MAAAwG,EAAA,CAAAzG,CAAA,CAAAU,CAAA,CAAAT,CAAA,CAAAW,CAAA,CAAAJ,EAAA,CAAAgB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA4C,EAAAA,QAAA,CAAApE,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAA,CAAA,IAAAK,EAAAf,CAAA6tB,CAAAA,KAAA,IAAA,GAAAlsB,CAAA+2B,CAAAA,EAAA,EAAA14B,CAAA,CAAA,CAAA,CAAA,IAAAgB,GAAA,GAAA8E,CAAA24B,CAAAA,EAAA,EAAAz+B,CAAA,CAAAgB,GAAA,GAAAD,CAAA,CAAA,GAAA+E,CAAAmgF,CAAAA,EAAA,EAAAjlF,EAAA,CAAA,CAAA,CAAAC,CAAAA,CAAAhB,CAAAgB;AAAAF,CAAAE,CAAAjB,CAAAw+B,CAAAA,QAAA,IAAA,CAAA,CAAAv9B,CAAA,CAAA,MAAA,KAAAL,EAAAA,CAAA,GAAAkF,CAAA2nB,CAAAA,EAAA,EAAAztB,CAAAgX,CAAAA,IAAA,CAAA,GAAAxR,EAAAmoB,CAAAA,EAAA,EAAA,CAAA6Q,SAAAv9B,CAAA,CAAAi\/B,WAAAlgC,CAAAkgC,CAAAA,UAAA,CAAA,CAAA,CAAAlgC,CAAA4tB,CAAAA,UAAA,CAAA,OAAA,CAAA5mB,KAAA\/F,CAAA,CAAA8sB,SAAAntB,CAAAmtB,CAAAA,QAAAA,EAAArtB,CAAAqtB,CAAAntB,CAAAktB,CAAAA,MAAAC,CAAA,CAAA,CAAA,CAAAvnB,EAAAA,QAAA,CAAAxG,CAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAM,CAAA,CAAAJ,EAAA,CAAAgF,CAAA,CAAA8D,EAAA,CAAA,CAAA,IAAAO,GAAAjK,CAAA0G,CAAAA,GAAA,CAAAhG,CAAAC,CAAAA,EAAA,CAAA,CAAAgJ,GAAA,GAAAnI,CAAAg4D,CAAAA,EAAA,EAAAvvD,EAAA,CAAAA,EAAA4jB,CAAAA,KAAA,CAAA5jB,EAAA6jB,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAAhb,GAAAA,CAAA,GAAA7R,CAAAiB,CAAAA,CAAA,EAAAyH,EAAA,CAAA,CAAA,CAAA,KAAA\/E,GAAA,CAAAkO,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAtM,GAAA,CAAAsM,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAArM,GAAAA,CAAA,GAAAjG,CAAAokF,CAAAA,EAAA,EAAAhgF,EAAA,CAAA4B,EAAA,CAAA,KAAAhD,GAAA,GAAAhD,CAAA2iF,CAAAA,EAAA,EAAA,CAAAv9E,CAAA,CAAA8D,EAAA,CAAA,CAAAjD,EAAA,CAAA,CAAAwD,EAAAulB,CAAAA,KAAA,CAAA5oB,EAAAA,CAAA,GAAApF,CAAAg4D,CAAAA,EAAA,EAAA94D,CAAA,CAAAA,CAAAmtB,CAAAA,KAAA,CAAAntB,CAAAotB,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAAhnB,EAAAA,CAAA,GAAA7F,CAAAiB,CAAAA,CAAA,EAAA0E,CAAA,CAAA,CAAA,CAAA,KAAAY,GAAAV,CAAA,CAAA,CAAA,CAAAU,CAAAV,CAAAG,CAAA,CAAAA,CAAA,CAAAQ,GAAAX,CAAA,CAAA,CAAA,CAAAW,CAAAX,CAAAS,CAAA,CAAAA,CAAA,CAAAoB,IAAAnC,EAAA,CAAA,CAAA,CAAAmC,CAAA\/D,EAAA,CAAA,CAAA,CAAA+D,EAAAnB,EAAA,CAAAG,IAAAnB,EAAA,CAAA,CAAA,CAAAmB,CAAA\/C,EAAA,CAAA,CAAA,CAAA+C,EAAAF,EAAAS,GAAAA,CAAA,EAAAL,EAAAA,CAAA,GAAA\/B,CAAA0nB,CAAAA,EAAA,EAAA9sB,CAAA,CAAAM,EAAA0vB,CAAAA,QAAA,CAAA,GAAA,CAAA;CAAA\/nB,EAAA,EAAAnF,EAAA,CAAA,CAAA,CAAA,CAAAoB,EAAA,CAAA,CAAA,CAAA,EAAA4C,EAAA,CAAAxG,EAAA0vB,CAAAA,QAAA,CAAA,GAAA,CAAA,GAAA\/oB,EAAA,EAAAnE,EAAA,CAAA,CAAA,CAAA,CAAAoB,EAAA,CAAA,CAAA,CAAA,EAAA6C,EAAA,CAAAzG,EAAA0vB,CAAAA,QAAA,CAAA,GAAA,CAAA,GAAA\/nB,EAAA,EAAAnC,EAAA,CAAA,CAAA,CAAA,CAAAhD,EAAA,CAAA,CAAA,CAAA,EAAAgE,EAAA,CAAAxG,EAAA0vB,CAAAA,QAAA,CAAA,GAAA,CAAA,GAAA\/oB,EAAA,EAAAnB,EAAA,CAAA,CAAA,CAAA,CAAAhD,EAAA,CAAA,CAAA,CAAA,EAAAiE,EAAA,CAAAvF,GAAAA,CAAA+H,EAAA4jB,CAAAA,KAAA5qB,GAAAA,CAAAgH,EAAA6jB,CAAAA,MAAA9qB,GAAAA,CAAAtC,CAAAmtB,CAAAA,KAAA7qB,CAAA2F,EAAA7H,GAAAA,EAAAJ,CAAAotB,CAAAA,MAAA,IAAAltB,EAAA,GAAAoC,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAAd,EAAA,CAAApB,EAAA,CAAA,CAAA,CAAAA,EAAA,CAAAmC,EAAA,EAAAhD,CAAA,CAAA,CAAAkE,EAAAA,CAAA4G,IAAA4T,CAAAA,GAAA,CAAA3b,EAAA,CAAAmB,CAAAjC,EAAA,KAAAmC,GAAA0G,IAAA4T,CAAAA,GAAA,CAAA7d,EAAA,CAAAuD,CAAApB,EAAA,IAAA,CAAA,GAAAjC,CAAAe,CAAAA,MAAA,GAAAjB,EAAA,EAAAqD,EAAA,CAAAnB,EAAA,EAAAqB,EAAA,EAAA,CAAA,GAAArD,CAAAe,CAAAA,MAAA,CAAAuF,EAAA,CAAAyD,IAAAC,CAAAA,GAAA,CAAA7G,EAAA,CAAAE,EAAA,CAAA,CAAArB,EAAA,CAAAd,EAAA,CAAAoF,EAAA,CAAAyD,IAAAkjE,CAAAA,IAAA,CAAAjrE,EAAA,CAAA,CAAAlC,EAAA,CAAAmC,EAAA,CAAAqE,EAAA,CAAAyD,IAAAkjE,CAAAA,IAAA,CAAAntE,EAAA,CAAA,CAAA,GAAA+G,CAAA,CAAA,GAAAM,CAAA,CAAAnI,CAAA0G,CAAAA,GAAA,CAAAmB,CAAAlH,CAAAA,EAAA,CAAA,CAAAwH,CAAA,GAAAD,EAAA,CAAA,CAAAs2B,SAAAr2B,CAAAq2B,CAAAA,QAAA,CAAAzQ,SAAA5lB,CAAA4lB,CAAAA,QAAA,CAAA,EAAA9tB,CAAA,CAAA,CAAAmI,EAAAA,CAAAxE,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAlD,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAmtB,MAAA7qB,EAAA,CAAA8qB,OAAAhtB,EAAA,CAAA,CAAAuH,GAAAA,CAAAjE,CAAA,CAAAyD,CAAA,CAAA,GAAA\/B,CAAAmgF,CAAAA,EAAA,EAAA79E,EAAA,CAAA;AAAA,GAAAtC,CAAA8gF,CAAAA,EAAA,EAAAx+E,EAAA,CAAA,CAAA,IAAA,IAAA,GAAAC,EAAA,CAAA,MAAAH,GAAA,CAAA,CAAAs2B,SAAAn2B,EAAArB,CAAAA,IAAA,CAAA+mB,SAAA1lB,EAAA0lB,CAAAA,QAAA,CAAA,CAAA,IAAAlJ,EAAA,CAAA,GAAA\/e,CAAAm\/D,CAAAA,EAAA,EAAA,GAAAz\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\/B,EAAA2\/B,EAAA,CAAA,CAAA,CAAA,CAAA9Q,OAAA0M,EAAA,CAAA,QAAA,EAAAxkC,EAAA,EAAA,OAAA,EAAAuJ,GAAA,EAAA,GAAAhI,CAAAksB,CAAAA,EAAA,EAAAztB,CAAA,CAAA,CAAAo\/D,MAAA,EAAA\/0D,IAAAkjE,CAAAA,IAAA,CAAA\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\/4D,CAAAA,MAAA\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\/I,EAAA8I,CAAA,CAAAA,CAAAC,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAA2D,CAAA,CAAAG,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAW,CAAAsB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAkD,CAAA,CAAAG,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAU,CAAAuB,CAAAA,CAAA,CAAAhC,CAAA,CAAA,CAAAugF,GAAAA,QAAA,EAAA,CAAA,MAAAj5E,EAAA,CAAA,CAAA09D,GAAAA,QAAA,EAAA,CAAA,MAAAjiE,GAAA,CAAA,CAAAkrB,GAAAA,QAAA,EAAA,CAAA,MAAAtnB,GAAA,CAAA,CAAAu+D,GAAAA,QAAA,EAAA,CAAA,MAAAh9D,GAAA,CAAA,CAAA6+E,GAAAA,QAAA,EAAA,CAAA,MAAAniE,GAAA,CAAA,CAAA+hE,GAAAA,QAAA,EAAA,CAAA,MAAA1tD,GAAA,CAAA,CAAA1I,GAAAA,QAAA,EAAA,CAAA,MAAA\/O,GAAA,CAAA,CAAAo6B,GAAAA,QAAA,EAAA,CAAA,MAAAn6B,GAAA,CAAA;AAAAyf,GAAAA,QAAA,EAAA,CAAA,MAAA16B,EAAA,CAAA,CAAA05B,GAAAA,QAAA,EAAA,CAAA,MAAAkI,GAAA,CAAA,CAAAo4C,GAAAA,QAAA,EAAA,CAAA,MAAAx5E,EAAA,CAAA,CAAAy6E,GAAAA,QAAA,EAAA,CAAA,MAAAl+E,EAAA,CAAA,CAAAuzD,GAAAA,QAAA,EAAA,CAAA,MAAAvvD,EAAA,CAAA,CAAAf,EAAAA,QAAA,EAAA,CAAA,MAAA+d,GAAA,CAAA,CAAA++B,GAAAA,QAAA,EAAA,CAAA,MAAAn7C,GAAA,CAAA,CAAAolB,GAAAA,QAAA,EAAA,CAAA,MAAAnpB,GAAA,CAAA,CAAAopB,GAAAA,QAAA,EAAA,CAAA,MAAA3mB,EAAA,CAAA,CAAAknD,GAAAA,QAAA,EAAA,CAAA,MAAA9yB,GAAA,CAAA,CAAA8hB,GAAAA,QAAA,EAAA,CAAA,MAAAjmB,GAAA,CAAA,CAAAgvD,GAAAA,QAAA,EAAA,CAAA,MAAA3hF,EAAA,CAAA,CAAAU,GAAAA,QAAA,EAAA,CAAA,MAAA6b,GAAA,CAAA,CAAAsmE,GAAAA,QAAA,EAAA,CAAA,MAAA5+E,GAAA,CAAA,CAAAwrD,GAAAA,QAAA,EAAA,CAAA,MAAApxB,GAAA,CAAA,CAAAwjD,GAAAA,QAAA,EAAA,CAAA,MAAA7sD,GAAA,CAAA,CAAA4sD,GAAAA,QAAA,EAAA,CAAA,MAAAn+E,GAAA,CAAA,CAAAq\/E,GAAAA,QAAA,EAAA,CAAA,MAAAv\/E,GAAA,CAAA,CAAAsnB,GAAAA,QAAA,EAAA,CAAA,MAAAzoB,EAAA,CAAA,CAAAi4B,GAAAA,QAAA,EAAA,CAAA,MAAAn3B,GAAA,CAAA,CAAA49D,GAAAA,QAAA,EAAA,CAAA,MAAAz9D,GAAA,CAAA;AAAAk\/E,GAAAA,QAAA,EAAA,CAAA,MAAAxiF,GAAA,CAAA,CAAA,CAAA,KAAApD,CAAA,CAAAC,EAAAN,CAAA,CAAA,IAAA,CAAA,CAAAO,EAAAP,CAAA,CAAA,IAAA,CAAA,CAAAE,EAAAF,CAAA,CAAA,IAAA,CAAA,CAAAD,EAAAC,CAAA,CAAA,IAAA,CAAA,CAAAF,EAAAE,CAAA,CAAA,IAAA,CAAA,CAAAc,EAAAd,CAAA,CAAA,IAAA,CAAA,CAAAiB,EAAAjB,CAAA,CAAA,IAAA,CAAA,CAAAuB,EAAAvB,CAAA,CAAA,IAAA,CAAA,CAAA8E,GAAA9E,CAAA,CAAA,IAAA,CAAA,CAAAiD,EAAAjD,CAAA,CAAA,IAAA,CAAA,CAAAkF,EAAAlF,CAAA,CAAA,EAAA,CAAA,CAAAoF,EAAApF,CAAA,CAAA,IAAA,CAAA,CAAAgJ,EAAAhJ,CAAA,CAAA,IAAA,CAAA,CAAAiJ,CAAA,CAAAmJ,CAAA,CAAA1O,EAAAA,QAAA,CAAApE,EAAA,CAAA,CAAA,MAAAA,GAAAmB,CAAAA,OAAA,CAAA,KAAA,CAAA,UAAA,CAAAA,CAAAA,OAAA,CAAA,WAAA,CAAA,IAAA,CAAA,CAAA,CAAAqF,EAAAA,QAAA,CAAAxG,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAA,CAAAK,GAAA,CAAA+R,EAAA9S,EAAA8S,CAAAA,CAAA,CAAAnJ,EAAA3J,EAAA2J,CAAAA,CAAA,CAAAqN,KAAAhX,EAAAgX,CAAAA,IAAA,CAAA6W,MAAA7tB,EAAA6tB,CAAAA,KAAA,CAAAC,OAAA9tB,EAAA8tB,CAAAA,MAAA,CAAAC,SAAA\/tB,EAAA+tB,CAAAA,QAAA,CAAAhtB,GAAAiW,CAAAA,IAAA,CAAAhX,EAAAgX,CAAAA,IAAA\/W,GAAA,GAAAS,EAAA,CAAA04B,EAAA,CAAAn5B,EAAA,CAAA,CAAAc,EAAAiW,CAAAA,IAAA,CAAAnP,EAAA,CAAA7H,EAAA0tB,CAAAA,YAAA,CAAA,GAAAjtB,CAAAktB,CAAAA,EAAA,EAAA3tB,EAAA,CAAA,CAAAU,EAAA,CAAA,CAAAM,GAAAA,CAAA8F,CAAA,CAAA\/F,EAAAiW,CAAAA,IAAA,CAAA,GAAAvW,CAAAktB,CAAAA,EAAA,EAAA3tB,EAAA,CAAA,CAAAA,EAAA4tB,CAAAA,UAAA,CAAA,IAAA7sB,EAAA8sB,CAAAA,KAAA,CAAA7sB,EAAA6sB,CAAAA,KAAA,CAAA9sB,EAAA+sB,CAAAA,MAAA;AAAA9sB,EAAA8sB,CAAAA,MAAA,CAAA\/sB,EAAAgtB,CAAAA,QAAA,CAAA\/sB,EAAA+sB,CAAAA,QAAA,CAAA9tB,EAAA,CAAA,GAAA,GAAAuF,EAAAw\/D,CAAAA,EAAA,EAAA\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\/E,EAAA,CAAAkD,EAAA,EAAA\/C,EAAA,EAAA4E,EAAA,CAAA\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\/D,CAAAA,EAAA,EAAA\/kE,EAAA,CAAA,CAAAD,EAAAwvB,CAAAA,KAAA,CAAAvvB,EAAAuvB,CAAAA,KAAA,CAAA,CAAAhL,GAAAA,QAAA,CAAAxkB,EAAA,CAAA,CAAA,IAAAC,GAAAqH,EAAA,CAAAtH,EAAA,CAAA,OAAAC,GAAA,EAAAD,EAAA,CAAA,GAAAwF,EAAAw\/D,CAAAA,EAAA,EAAA\/kE,EAAA,CAAA,CAAA,CAAA,CAAAuB,CAAA+uB,CAAAA,EAAA,CAAA\/uB,CAAA+uB,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA5P,GAAAA,QAAA,CAAA3gB,EAAA,CAAA,CAAA,MAAAA,GAAAotB,CAAAA,IAAA,CAAA,QAAA,CAAAptB,EAAA,CAAA,CAAA,GAAA,GAAAwF,EAAAkzB,CAAAA,EAAA,EAAA14B,EAAA,CAAA,CAAA,CAAA,IAAAC,GAAAqH,EAAA,CAAAtH,EAAA,CAAA,OAAA,CAAA,GAAAiC,CAAAwsB,CAAAA,EAAA,EAAAzuB,EAAA,CAAA,EAAA,CAAA,GAAAwF,EAAAw\/D,CAAAA,EAAA,EAAA\/kE,EAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA82B,GAAAA,QAAA,CAAA\/2B,EAAA,CAAA,CAAA,MAAAA,GAAAotB,CAAAA,IAAA,CAAA,QAAA,CAAAptB,EAAA,CAAA,CAAA,GAAA,GAAAwF,EAAAkzB,CAAAA,EAAA,EAAA14B,EAAA,CAAA,CAAA,CAAA,IAAAC,GAAAqH,EAAA,CAAAtH,EAAA,CAAA,OAAA,CAAA,GAAAiC,CAAAwsB,CAAAA,EAAA,EAAAzuB,EAAA,CAAA;AAAA,CAAA,GAAAwF,EAAAw\/D,CAAAA,EAAA,EAAA\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/mB,GAAA\/F,EAAA+sB,CAAAA,MAAA,IAAApkB,EAAA,EAAA3I,EAAAqtB,CAAAA,WAAA,CAAA,CAAA,GAAAnsB,CAAA+iE,CAAAA,EAAA,EAAAt7D,EAAA,CAAA,GAAAnC,EAAA,CAAA3D,CAAAgD,CAAAA,CAAA27E,CAAAA,2BAAA,CAAA74E,EAAA,CAAA3I,EAAA,CAAA,CAAAP,EAAA,CAAA+G,EAAAuL,CAAAA,CAAA,CAAAhN,EAAA,CAAAyB,EAAAoC,CAAAA,CAAA,CAAA,KAAAnC,EAAAP,GAAAA,CAAAA,EAAA,IAAAhH,EAAA2xB,CAAAA,KAAAsO,CAAAA,UAAA,EAAAjgC,EAAA2xB,CAAAA,KAAA4M,CAAAA,QAAA,CAAA,CAAA99B,IAAAA,GAAAT,EAAA2xB,CAAAA,KAAAsO,CAAAA,UAAA\/+B,CAAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAAK,CAAAqmF,CAAAA,EAAA,EAAA,CAAA3nD,WAAAn\/B,EAAAm\/B,CAAAA,UAAA,CAAA,CAAA;AAAAx\/B,EAAA,EAAA,EAAAyP,CAAAA,MAAA,CAAApP,EAAAy9B,CAAAA,QAAA,CAAA,IAAA,CAAA,GAAAv+B,EAAA2xB,CAAAA,KAAA4M,CAAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA,CAAA,KAAA71B,GAAA,GAAA\/C,CAAAu\/D,CAAAA,EAAA,EAAAz7D,EAAA,CAAA\/B,GAAAA,CAAAw+E,MAAA,CAAAl\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\/5B,EAAAg6B,CAAAA,OAAA,IAAA\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\/C,CAAAvqD,EAAAuqD,CAAA,IAAAx\/C,MAAAs\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\/B,CAAA,CAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA0B,CAAA,CAAAoC,MAAA,CAAArD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA,GAAAgB,CAAAiB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,CAAA,CAAAS,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,CAAA,CAAA,CAAA,CAAAiB,CAAA,CAAAoC,MAAA,CAAArD,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,CAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,CAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,CAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAU,CAAAuB,CAAAA,CAAA,CAAAhC,CAAA,CAAA,CAAAusC,GAAAA,QAAA,EAAA,CAAA,MAAA\/lC,EAAA,CAAA,CAAAojC,GAAAA,QAAA,EAAA,CAAA,MAAArkC,EAAA,CAAA,CAAAyyB,GAAAA,QAAA,EAAA,CAAA,MAAAtuB,EAAA,CAAA,CAAA6\/B,GAAAA,QAAA,EAAA,CAAA,MAAAv\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\/B,CAAA,CAAA,CAAA+B,SAAA,CAAA\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\/D,MAAA,IAAA,IAAA\/+D,EAAA,CAAAY,EAAAm+D,CAAAA,KAAA,GAAA,IAAA,EAAA,GAAA\/+D,EAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAyF,EAAA,QAAA,EAAA,CAAA,IAAAxG,GAAA,GAAAe,CAAAmB,CAAAA,CAAA,EAAAtB,CAAA,EAAAo2B,CAAAA,IAAA,CAAAh3B,QAAAA,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,CAAA,CAAAM,EAAA,CAAAC,CAAA,CAAAR,EAAA,CAAAD,EAAA,CAAAgB,EAAA,OAAAZ,EAAA,EAAAgT,CAAAA,IAAA,CAAA,QAAA,CAAA5T,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAqT,CAAAA,IAAA,CAAArT,EAAAyZ,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAAxY,EAAA,CAAAkqE,CAAAnqE,EAAAmqE,CAAAlrE,CAAAkrE,EAAAA,QAAA,CAAA1qE,EAAA,CAAA,IAAA,EAAA,GAAAQ,CAAA,CAAAU,CAAA4zC,CAAAA,EAAAC,CAAAA,GAAA,CAAAv0C,CAAA,CAAAT,EAAA;AAAAQ,EAAAypF,CAAAA,OAAA,CAAAhqF,EAAA,GAAAkB,CAAA4zC,CAAAA,EAAAC,CAAAA,GAAA,EAAA,QAAA,EAAA,MAAAh1C,GAAA,EAAA8D,OAAAC,CAAAA,IAAA,CAAA,iCAAA4L,CAAAA,MAAA,CAAAxO,CAAA4zC,CAAAA,EAAAC,CAAAA,GAAA,CAAA,YAAA,CAAA,CAAA,CAAA,WAAA,GAAA\/0C,EAAA,GAAAA,EAAA,CAAAkB,CAAA4zC,CAAAA,EAAA+6B,CAAAA,GAAA,EAAA7vE,EAAA,GAAAkB,CAAA4zC,CAAAA,EAAA+6B,CAAAA,GAAA,EAAA,IAAA,IAAA5vE,CAAA,CAAAT,CAAAsuB,CAAAA,QAAA,GAAA,IAAA,EAAA,GAAA7tB,CAAA,EAAAA,CAAAoyB,CAAAA,gBAAA,GAAAxuB,OAAAC,CAAAA,IAAA,CAAA,+CAAA4L,CAAAA,MAAA,CAAAxO,CAAA4zC,CAAAA,EAAA+6B,CAAAA,GAAA,CAAA,YAAA,CAAA,CAAA,CAAArwE,CAAA,CAAA6S,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAA7S,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAsuB,SAAAzb,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAA7S,CAAAsuB,CAAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAAuE,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA9yB,EAAAyZ,CAAAA,IAAA,CAAA,CAAA,CAAA7U,CAAA,CAAAkO,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAA7S,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAquB,SAAAlqB,CAAA,CAAAnE,CAAAquB,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,MAAA9sB,GAAA,CAAAxB,EAAAq7B,CAAAA,IAAA,CAAA76B,EAAA,CAAAA,EAAA,GAAA,cAAAkB,CAAAA,IAAA,CAAAjB,EAAA,CAAA;AAAA,GAAA,CAAA,EAAA,EAAAT,EAAAi3B,CAAAA,MAAA,CAAA,QAAA,CAAA,IAAA\/xB,OAAA,CAAA,QAAA,CAAAlF,EAAA,CAAAU,EAAA,CAAA,CAAAc,EAAAy5E,CAAAA,MAAA,CAAA,QAAA,EAAA,CAAA,IAAAj6E,GAAA,GAAAD,CAAAmB,CAAAA,CAAA,EAAAtB,CAAA,EAAAo2B,CAAAA,IAAA,CAAAj2B,QAAAA,GAAA,CAAAC,EAAA,CAAA,CAAA,IAAAC,EAAA,OAAAL,EAAA,EAAAgT,CAAAA,IAAA,CAAA,QAAA,CAAA7S,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAsS,CAAAA,IAAA,CAAAtS,EAAA0Y,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,GAAAzY,EAAA,CAAA,CAAAD,EAAA0Y,CAAAA,IAAA,CAAA,CAAA,MAAA,CAAA,MAAA1Y,GAAAk2B,CAAAA,MAAA,CAAA,QAAA,CAAAv2B,EAAA,CAAAmD,KAAA,CAAA,yBAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,GAAA,CAAA7C,EAAA,EAAAP,EAAA,GAAAkB,CAAA4zC,CAAAA,EAAAC,CAAAA,GAAA,EAAA,IAAA,IAAAv0C,EAAA,CAAAhB,CAAAsuB,CAAAA,QAAA,GAAA,IAAA,EAAA,GAAAttB,EAAA,EAAA,CAAAA,EAAA8xB,CAAAA,gBAAA,CAAA,CAAAhyB,EAAA0Y,CAAAA,IAAA,CAAA,CAAA,MAAA,CAAA,MAAA1Y,GAAA0Y,CAAAA,IAAA,CAAA,CAAA,CAAA,GAAAxX,CAAA86E,CAAAA,iBAAA,EAAA,CAAAxZ,KAAAviE,EAAA,CAAAy8E,SAAA,GAAAj4E,CAAAm4E,CAAAA,EAAA,EAAA19E,CAAAquB,CAAAA,QAAA,CAAAruB,CAAAsuB,CAAAA,QAAA,CAAAtuB,CAAAyyB,CAAAA,KAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA1xB,EAAA;AAAAD,EAAAs6B,CAAAA,IAAA,MAAA,CAAA,CAAAr7B,EAAA,CAAAgB,EAAA,CAAA,MAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAAD,GAAAu2B,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAAv2B,EAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAf,EAAA,CAAA,CAAA,MAAAgB,GAAA4I,CAAAA,KAAA,CAAA,IAAA,CAAA5H,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAvB,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,KAAA,KAAA,CAAA,MAAAR,GAAAs3B,CAAAA,IAAA,EAAA,CAAA,CAAA,CAAAt3B,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAC,CAAA,CAAA,CAAA,MAAAD,GAAA4J,CAAAA,KAAA,CAAA,IAAA,CAAA5H,SAAA,CAAA,CAAA,CAAA,EAAA,CAAAyE,EAAA,QAAA,EAAA,CAAA,IAAAzG,GAAA,GAAAe,CAAAmB,CAAAA,CAAA,EAAAtB,CAAA,EAAAo2B,CAAAA,IAAA,CAAAh3B,QAAAA,EAAA,CAAAC,CAAA,CAAA,CAAA,IAAAS,CAAA,CAAAK,EAAA,CAAAC,CAAA,CAAAC,EAAA,CAAAU,EAAA,CAAAM,EAAA,CAAA0B,EAAA,CAAAiC,EAAA,CAAAE,EAAA,CAAA4D,EAAA,OAAA9I,EAAA,EAAAgT,CAAAA,IAAA,CAAA,QAAA,CAAA5T,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAAA,EAAAqT,CAAAA,IAAA,CAAArT,EAAAyZ,CAAAA,IAAA,EAAA,KAAA,CAAA,CAAA,MAAA\/Y,EAAA,CAAAT,CAAAquB,CAAAA,QAAA,CAAAvtB,EAAA,CAAAd,CAAAsuB,CAAAA,QAAA,CAAAvtB,CAAA,CAAA,IAAA,EAAA,GAAAD,EAAA,CAAA,GAAAP,CAAAiyB,CAAAA,EAAA,GAAA,CAAA1xB,EAAA,CAAAE,EAAA,CAAAhB,CAAAyyB,CAAAA,KAAA,CAAA\/wB,EAAA,CAAA,IAAA,EAAA,GAAAV,EAAA,CAAA,EAAA,CAAAA,EAAA,CAAAgB,EAAA,CAAAhC,CAAAk+C,CAAAA,aAAA,CAAAx6C,EAAA,CAAA,GAAAnC,CAAA69D,CAAAA,EAAA,EAAA,CAAA\/wC,SAAA5tB,CAAA;AAAA6tB,SAAAvtB,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA4E,EAAA,CAAAjC,EAAA2qB,CAAAA,QAAA,CAAAxoB,EAAA,CAAAnC,EAAA4qB,CAAAA,QAAA,CAAA7kB,EAAA,CAAAoJ,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAhN,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAq4C,cAAAl8C,EAAA,CAAA,CAAA,CAAAjC,EAAAi3B,CAAAA,MAAA,CAAA,QAAA,CAAA,GAAAx2B,CAAAohD,CAAAA,EAAA,EAAAz9C,CAAA,CAAAwB,EAAA,CAAA,CAAA8D,EAAA,CAAA\/H,EAAA,CAAA,CAAA+oF,gBAAAA,QAAA,EAAA,CAAA,MAAA,GAAAllF,CAAAm4E,CAAAA,EAAA,EAAA\/3E,EAAA,CAAA8D,EAAA,CAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/iB,GAAA6\/E,CAAAA,IAAA,CAAA,GAAA\/\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\/Z,EAAA,CAAA+F,EAAA,CAAA,CAAAmkB,OAAA\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\/nC,KAAA7D,EAAA6D,CAAA\/F,EAAA+F,EAAA,CAAAA,CAAA5I,EAAA8xC,CAAAA,OAAAlpC,EAAAwJ,MAAAu+B,CAAAA,gBAAAhxC,GAAA+iB,CAAAA,IAAA,EAAA\/iB,GAAAo\/D,CAAAA,KAAA,CAAA,CAAA,CAAA3sD,MAAAu+B,CAAAA,gBAAA,CAAA,CAAA,CAAAv+B,MAAAu+B,CAAAA,gBAAA,CAAA,KAAA5+B,GAAA,GAAAtL,EAAAgmB,CAAAA,EAAA,EAAAxsB,EAAA,CAAA,IAAA,GAAAJ,CAAAokE,CAAAA,EAAA,EAAAhkE,EAAA,CAAA,EAAA8R,EAAA,CAAA,CAAA1O,EAAAA,CAAAugB,QAAApb,CAAAA,aAAA,CAAA,QAAA,CAAA,KAAA3E,GAAAR,EAAAgf,CAAAA,UAAA,CAAA,IAAA,CAAA,CAAA5c,GAAAuE,IAAAC,CAAAA,GAAA,CAAA,GAAAxK,CAAA6hE,CAAAA,EAAA,EAAAz8D,EAAA,CAAA8D,EAAA,CAAA,CAAA,GAAAlJ,CAAA6hE,CAAAA,EAAA,EAAAv8D,EAAA,CAAAlC,EAAA,CAAA,CAAAQ,GAAAypB,CAAAA,KAAA,CAAArnB,EAAA,CAAA2M,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,CAAAH,EAAA,CAAAxB,EAAA8\/D,CAAAA,KAAA,CAAA,EAAA17D,GAAA0pB,CAAAA,MAAA,CAAAtnB,EAAA,CAAA2M,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,CAAAH,EAAA,CAAAxB,EAAA8\/D,CAAAA,KAAA;AAAA,EAAAr5D,GAAAA,EAAArC,EAAAypB,CAAAA,KAAApnB,CAAAzG,EAAAkjB,CAAAA,MAAA2K,CAAAA,KAAApnB,EAAA,CAAA,KAAAjD,IAAAY,EAAA0pB,CAAAA,MAAAtqB,CAAAxD,EAAAkjB,CAAAA,MAAA4K,CAAAA,MAAAtqB,EAAA,CAAAoB,GAAAonF,CAAAA,SAAA,CAAA5nF,EAAAypB,CAAAA,KAAA,CAAA,CAAA,CAAAzpB,EAAA0pB,CAAAA,MAAA,CAAA,CAAA,CAAAlpB,GAAAunF,CAAAA,MAAA,CAAAnrF,EAAAwuB,CAAAA,KAAA,CAAA5qB,GAAA4mE,CAAAA,SAAA,CAAAxrE,EAAAkjB,CAAAA,MAAA,CAAA,CAAAljB,EAAAkjB,CAAAA,MAAA2K,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA7tB,EAAAkjB,CAAAA,MAAA4K,CAAAA,MAAA,CAAA,CAAA,CAAA9tB,EAAAkjB,CAAAA,MAAA2K,CAAAA,KAAA,CAAA7tB,EAAAkjB,CAAAA,MAAA4K,CAAAA,MAAA,CAAAlnB,GAAAA,CAAA,GAAAnG,EAAAmtC,CAAAA,EAAA,EAAA96B,EAAA,CAAA,KAAAhM,GAAA,GAAA7F,CAAAiB,CAAAA,CAAA,EAAA0E,EAAA,CAAA,CAAA,CAAAK,GAAAA,CAAAH,EAAA,CAAA,CAAA,CAAAS,GAAAA,CAAAT,EAAA,CAAA,CAAA,CAAAlC,GAAAunF,CAAAA,MAAA,CAAA,CAAAnrF,EAAAwuB,CAAAA,KAAA,CAAA5qB,GAAAonF,CAAAA,SAAA,CAAA,EAAA5nF,EAAAypB,CAAAA,KAAA,CAAA,CAAA,EAAA5mB,EAAA,CAAArB,EAAA,EAAAuN,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,CAAA8E,EAAA,CAAAjF,EAAA,CAAAG,EAAA,CAAA,CAAA,EAAAyC,EAAA0pB,CAAAA,MAAA,CAAA,CAAA,EAAAvmB,EAAA,CAAAzB,EAAA,EAAAqN,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,CAAA6B,EAAA,CAAAhC,EAAA,CAAAG,EAAA,CAAA,CAAAiD,GAAAwnF,CAAAA,SAAA,CAAA,EAAAt5E,EAAA+a,CAAAA,KAAA,CAAA,CAAA,CAAAroB,CAAA+qB,CAAAA,EAAA,CAAA,CAAApd,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,CAAA,EAAAmR,EAAAgb,CAAAA,MAAA;AAAA,CAAA,CAAAtoB,CAAA+qB,CAAAA,EAAA,CAAA,CAAApd,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,EAAAmR,EAAA+a,CAAAA,KAAA,CAAA,CAAA,CAAAroB,CAAA+qB,CAAAA,EAAA,EAAApd,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,EAAAmR,EAAAgb,CAAAA,MAAA,CAAA,CAAA,CAAAtoB,CAAA+qB,CAAAA,EAAA,EAAApd,MAAAu+B,CAAAA,gBAAA,CAAA\/vC,EAAA,CAAAjB,GAAAsrF,CAAAA,SAAA,CAAA\/hF,EAAA,CAAAN,EAAA,CAAAjJ,GAAA8qE,CAAAA,SAAA,CAAApnE,EAAA,CAAA,EAAAsF,EAAA,CAAA9D,EAAA,CAAA,CAAA,CAAA,CAAAuN,MAAAu+B,CAAAA,gBAAA,CAAAjrC,EAAA,CAAA9E,EAAA,CAAAH,EAAA,CAAA,EAAAoC,EAAA,CAAAkC,EAAA,CAAA,CAAA,CAAA,CAAAqN,MAAAu+B,CAAAA,gBAAA,CAAAluC,EAAA,CAAA7B,EAAA,CAAAH,EAAA,CAAA4C,EAAAypB,CAAAA,KAAA,CAAAlsB,EAAA,CAAAyC,EAAA0pB,CAAAA,MAAA,CAAAnsB,EAAA,CAAA,CAAA,IAAA,IAAAjB,EAAAsrF,CAAAA,SAAA,CAAA\/hF,EAAA,CAAAN,EAAA,CAAA,CAAAjJ,EAAAyrF,CAAAA,MAAA,CAAAnrF,EAAAwuB,CAAAA,KAAA,CAAA,CAAA,OAAA,EAAAxvB,GAAA+xD,CAAAA,OAAA,EAAA,CAAA9uD,EAAA,CAAAjC,EAAA,CAAAD,EAAA,CAAA,EAAAL,EAAAo\/D,CAAAA,KAAA,CAAA9\/D,EAAA+xD,CAAAA,OAAA+N,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA9\/D,EAAA+xD,CAAAA,OAAA+N,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAp\/D,EAAAsrF,CAAAA,SAAA,CAAA,CAAA\/hF,EAAA,CAAA,CAAAN,EAAA,CAAA,CAAAjJ,EAAA8qE,CAAAA,SAAA,CAAAxrE,EAAAkjB,CAAAA,MAAA,EAAAtd,EAAA,CAAA7E,EAAA6xC,CAAAA,OAAA,EAAAz\/B,MAAAu+B,CAAAA,gBAAA,CAAAlwC,EAAA,CAAAxB,EAAA8\/D,CAAAA,KAAA;AAAA9\/D,EAAA8\/D,CAAAA,KAAA,EAAAh6D,EAAA,CAAA\/E,EAAA8xC,CAAAA,OAAA,EAAA1\/B,MAAAu+B,CAAAA,gBAAA,CAAAlwC,EAAA,CAAAxB,EAAA8\/D,CAAAA,KAAA,CAAA9\/D,EAAA8\/D,CAAAA,KAAA,CAAA9\/D,EAAAkjB,CAAAA,MAAA2K,CAAAA,KAAA,CAAA7tB,EAAA8\/D,CAAAA,KAAA,CAAA9\/D,EAAAkjB,CAAAA,MAAA4K,CAAAA,MAAA,CAAA9tB,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,MAAA,GAAA,CAAA1vB,6BAAA,qCAAA,CAAAC,8BAAA,0CAAA,CAAAC,sBAAA,kCAAA,CAAAC,0BAAA,8EAAA,CAAAC,qBAAA,+BAAA,CAAAC,wBAAA,EAAA;AAAAC,0BAAA,+WAAA,CAAAC,8BAAA,cAAA,CAAAC,qBAAA,kCAAA,CAAAC,iCAAA,sDAAA;AAAAC,yBAAA,GAAA,CAAAC,mBAAA,4BAAA,CAAAC,SAAA,wBAAA,CAAAC,YAAA,QAAA,CAAAC,0BAAA,CAAA,CAAA,CAAAm7C,CAAAA,kDAAA,EAAA,GAAAzrF,CAAAysB,CAAAA,EAAA,EAAArsB,EAAA,CAAA,CAAA2G,EAAA,CAAA,GAAAH,EAAAy\/E,CAAAA,EAAA,EAAAjmF,EAAA,CAAA,CAAAN,EAAAgjB,CAAAA,WAAA,CAAA,SAAA,CAAAhjB,EAAAijB,CAAAA,SAAA,CAAA,CAAA,CAAAjjB,EAAA0vE,CAAAA,UAAA,EAAAzoE,EAAAmL,CAAAA,CAAA,CAAA\/R,EAAA6xC,CAAAA,OAAA,EAAAz\/B,MAAAu+B,CAAAA,gBAAA,EAAA\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\/D,EAAA,CAAA,CAAA,CAAA,KAAAmF,IAAA\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\/D,CAAAA,KAAA,CAAA9\/D,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA9\/D,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAp\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\/B,EAAA,CAAAziC,EAAA,CAAA82B,EAAA,CAAA\/2B,EAAA,CAAA,CAAAwF,CAAA8yE,CAAAA,EAAA,CAAAt1E,GAAAA,CAAAhD,EAAAqwB,CAAAA,OAAArtB,CAAA,GAAA,EAAA,GAAAA,EAAA,GAAAC,EAAA6hB,CAAAA,YAAA,CAAA,gBAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAAnN,EAAA,CAAA,CAAA,CAAAC,EAAA6hB,CAAAA,YAAA,CAAA,cAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAAnN,EAAA,CAAA,CAAA,CAAAC,GAAA6hB,CAAAA,YAAA,CAAA,gBAAA,CAAA,OAAA,CAAA7hB,GAAA6hB,CAAAA,YAAA,CAAA,WAAA,CAAA,YAAA3U,CAAAA,MAAA,CAAAnP,EAAA,EAAA,CAAA,CAAA,GAAA,CAAAmP,CAAAA,MAAA,CAAAxO,EAAA,EAAA,CAAA,CAAA,WAAA,CAAAwO,CAAAA,MAAA,CAAA5I,EAAA,CAAA,GAAA,CAAA4I,CAAAA,MAAA,CAAAxG,EAAA,CAAA,GAAA,CAAAwG,CAAAA,MAAA,CAAA2C,EAAA,CAAA,GAAA,CAAA,CAAA5K,GAAA6c,CAAAA,WAAA,CAAA9hB,EAAA,CAAA,MAAA,MAAA,MAAA,CAAA,KAAA,OAAA,CAAAnC,EAAAA;AAAA,GAAA0G,EAAAgmB,CAAAA,EAAA,EAAAxtB,EAAA,CAAAmE,GAAAA,CAAAzD,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,MAAA,CAAA33E,GAAA,GAAAqD,EAAA2gB,CAAAA,YAAA,CAAA,IAAA,CAAA,OAAA3U,CAAAA,MAAA,CAAAnQ,EAAAW,CAAAA,EAAA,CAAA,CAAA,CAAA0D,EAAA,CAAA3D,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,MAAA,CAAA,CAAAz3E,EAAA,CAAAA,EAAA,EAAA,CAAA,CAAAW,EAAA,CAAAA,EAAA,EAAA,CAAA,CAAA0C,EAAAygB,CAAAA,YAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAAzgB,EAAAygB,CAAAA,YAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAAzgB,EAAAygB,CAAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAAzgB,EAAAygB,CAAAA,YAAA,CAAA,OAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAAnQ,EAAA6tB,CAAAA,KAAA,CAAA,GAAA,CAAA7sB,EAAA,CAAA,CAAA,CAAAqD,EAAAygB,CAAAA,YAAA,CAAA,QAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAAnQ,EAAA8tB,CAAAA,MAAA,CAAA,GAAA,CAAAnsB,EAAA,CAAA,CAAA,CAAAwC,EAAA4gB,CAAAA,WAAA,CAAA1gB,EAAA,CAAA,CAAAiD,EAAA,CAAA5G,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,MAAA,CAAA,CAAAtwE,EAAA,CAAAV,EAAAb,CAAAA,CAAA27E,CAAAA,2BAAA,CAAAviF,EAAA,CAAAc,EAAA,CAAA,CAAAuH,EAAA,CAAA1G,EAAA,CAAAwG,EAAAwB,CAAAA,CAAA,CAAA3J,EAAA2J,CAAAA,CAAA,CAAArC,EAAAwd,CAAAA,YAAA,CAAA,GAAA;AAAA5hB,CAAAlC,EAAAkC,CAAAiF,EAAA2K,CAAAA,CAAA5P,CAAAlD,EAAA8S,CAAAA,CAAA5P,EAAAA,QAAA,EAAA,CAAA,CAAAoE,EAAAwd,CAAAA,YAAA,CAAA,GAAA,CAAAzc,EAAAnF,CAAAA,QAAA,EAAA,CAAA,CAAAoE,EAAAwd,CAAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAAxd,EAAAwd,CAAAA,YAAA,CAAA,OAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAArP,EAAA+sB,CAAAA,KAAA,CAAA,CAAA,CAAAvmB,EAAAwd,CAAAA,YAAA,CAAA,QAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAArP,EAAAgtB,CAAAA,MAAA,CAAA,CAAA,CAAAxmB,EAAAwd,CAAAA,YAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA3gB,EAAA4gB,CAAAA,WAAA,CAAAzd,EAAA,CAAA,CAAAma,GAAA,CAAAzhB,EAAA,CAAA2H,EAAA,CAAA,KAAAkd,GAAAnkB,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,GAAA,CAAA33E,GAAA,EAAA+jB,EAAAC,CAAAA,YAAA,CAAA,MAAA,CAAA,YAAA3U,CAAAA,MAAA,CAAAnQ,EAAAW,CAAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA6jB,GAAAxkB,EAAAqwB,CAAAA,OAAA7L,CAAA,GAAAK,GAAAC,CAAAA,YAAA,CAAA,gBAAA,CAAA,OAAA,CAAAiS,GAAA,CAAA\/2B,EAAA,CAAA+G,CAAAA,OAAA,CAAA,QAAA,CAAArG,EAAA,CAAA,CAAAK,EAAAA,CAAA2hC,EAAA,CAAAziC,EAAA,CAAAS,EAAA,CAAA8E,CAAA8yE,CAAAA,EAAA,CAAA,EAAA,GAAA9zD,EAAA,GAAAzjB,EAAA+jB,CAAAA,YAAA,CAAA,gBAAA;AAAA,EAAA3U,CAAAA,MAAA,CAAAqU,EAAA,CAAA,CAAA,CAAAzjB,EAAA+jB,CAAAA,YAAA,CAAA,cAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAAqU,EAAA,CAAA,CAAA,CAAAzjB,GAAA+jB,CAAAA,YAAA,CAAA,WAAA,CAAA,YAAA3U,CAAAA,MAAA,CAAAnP,EAAA,EAAA,CAAA,CAAA,GAAA,CAAAmP,CAAAA,MAAA,CAAAxO,EAAA,EAAA,CAAA,CAAA,WAAA,CAAAwO,CAAAA,MAAA,CAAA5I,EAAA,CAAA,GAAA,CAAA4I,CAAAA,MAAA,CAAAxG,EAAA,CAAA,GAAA,CAAAwG,CAAAA,MAAA,CAAA2C,EAAA,CAAA,GAAA,CAAA,CAAA,OAAA,GAAA9S,EAAA8c,CAAAA,IAAA,EAAA,GAAAtb,CAAAsmC,CAAAA,EAAA,EAAA9nC,EAAAw4B,CAAAA,MAAA,CAAA,EAAA,aAAA,GAAAx4B,EAAAsvB,CAAAA,eAAA,EAAAvuB,EAAA+jB,CAAAA,YAAA,CAAA,WAAA,CAAA,SAAA,CAAAD,GAAAE,CAAAA,WAAA,CAAAhkB,EAAA,CAAA,CAAA,CAAAmH,GAAA6c,CAAAA,WAAA,CAAAF,EAAA,CAAA3c,GAAAopE,CAAAA,MAAA,CAAAntE,EAAA,CAAA,MAAA,MAAA,UAAA,CAAAsd,EAAA,CAAAzhB,EAAA,CAAA2H,EAAA,CAAAu9B,EAAA,CAAAllC,EAAA,CAAA2gB,GAAAA,CAAA3gB,EAAAqwB,CAAAA,OAAA1P,CAAA,GAAAsa,GAAAA,CAAA,CAAAvZ,EAAA,CAAAqV,EAAA,CAAA\/2B,EAAA,CAAA,EAAA0iC,EAAA,CAAAziC,EAAA,CAAAyhB,EAAA,CAAAlc,CAAA8yE,CAAAA,EAAA,CAAA,CAAA53E,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,GAAA,CAAA,EAAA,GAAA93D,EAAA,GAAAsa,EAAAnW,CAAAA,YAAA,CAAA,gBAAA;AAAA,EAAA3U,CAAAA,MAAA,CAAAwQ,EAAA,CAAA,CAAA,CAAAsa,EAAAnW,CAAAA,YAAA,CAAA,cAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAAwQ,EAAA,CAAA,CAAA,CAAAsa,GAAAnW,CAAAA,YAAA,CAAA,WAAA,CAAA,YAAA3U,CAAAA,MAAA,CAAAnP,EAAA,EAAA,CAAA,CAAA,GAAA,CAAAmP,CAAAA,MAAA,CAAAxO,EAAA,EAAA,CAAA,CAAA,WAAA,CAAAwO,CAAAA,MAAA,CAAA5I,EAAA,CAAA,GAAA,CAAA4I,CAAAA,MAAA,CAAAxG,EAAA,CAAA,GAAA,CAAAwG,CAAAA,MAAA,CAAA2C,EAAA,CAAA,GAAA,CAAA,CAAAmoB,GAAAnW,CAAAA,YAAA,CAAA,QAAA,CAAA,MAAA,CAAAoW,GAAAA,CAAAx6B,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,MAAA,CAAAv9C,GAAApW,CAAAA,YAAA,CAAA,MAAA,CAAA9kB,EAAA0vB,CAAAA,WAAA,CAAAwL,GAAApW,CAAAA,YAAA,CAAA,GAAA,CAAA6d,CAAA,CAAA3iC,EAAA,CAAA,CAAAi7B,GAAAlW,CAAAA,WAAA,CAAAmW,EAAA,CAAAhzB,GAAA6c,CAAAA,WAAA,CAAAkW,EAAA,CAAA,MAAA,MAAA,OAAA,CAAA7B,EAAAA,CAAAruB,IAAAgU,CAAAA,KAAA,CAAA\/e,EAAA6tB,CAAAA,KAAA,CAAAqL,GAAAA,CAAAnuB,IAAAgU,CAAAA,KAAA,CAAA\/e,EAAA8tB,CAAAA,MAAA,CAAA,IAAA2U,EAAA,CAAA,GAAA7hC,CAAAk0C,CAAAA,EAAA,EAAA90C,EAAA,CAAA,EAAAe,EAAA,CAAAf,EAAA+0C,CAAAA,MAAA,CAAA,CAAA,CAAA1M,EAAAA,CAAA,QAAAl4B,CAAAA,MAAA,CAAAsyB,EAAA9hC,CAAAA,EAAA,CAAA2jC;EAAAA,CAAA5jC,EAAA6lB,CAAAA,aAAA,CAAA,GAAApW,CAAAA,MAAA,CAAAk4B,EAAA,CAAA,CAAA,IAAA,CAAA\/D,EAAA,CAAA,CAAA3jC,CAAA2jC,EAAA3jC,CAAAD,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,QAAA,CAAA93E,EAAAA,EAAA,CAAA0nC,EAAA,KAAAzF,GAAAliC,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,OAAA,CAAA71C,GAAA9d,CAAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA8d,GAAA9d,CAAAA,YAAA,CAAA,QAAA,CAAA,MAAA,CAAA8d,GAAA9d,CAAAA,YAAA,CAAA,MAAA,CAAA2d,EAAAooC,CAAAA,OAAA,CAAAvmC,GAAAvf,CAAAA,WAAA,CAAA6d,EAAA,CAAA16B,GAAAqkF,CAAAA,OAAA,CAAAjoD,EAAA,CAAA,CAAAgB,EAAAA,CAAA5kC,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,KAAA,CAAA,IAAAnzC,EAAAxgB,CAAAA,YAAA,CAAA,MAAA,CAAA,GAAA3U,CAAAA,MAAA,CAAAk4B,EAAA,CAAA,CAAA,CAAApmC,EAAA,EAAAwgC,EAAA0oC,CAAAA,QAAA,GAAA3lE,CAAA+vC,CAAAA,EAAA9wB,CAAAA,GAAA,EAAA6gB,EAAAxgB,CAAAA,YAAA,CAAA,QAAA,CAAAjd,gDAAA,CAAA,CAAAy9B,EAAAxgB,CAAAA,YAAA,CAAA,OAAA;AAAA,EAAA3U,CAAAA,MAAA,CAAAipB,EAAA,CAAA,CAAA,CAAAkM,EAAAxgB,CAAAA,YAAA,CAAA,QAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAA+oB,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAl5B,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA9\/D,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAAz2B,EAAA,CAAA,CAAA,GAAArpC,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA1mC,EAAA,CAAA,CAAA,CAAAkQ,EAAA,CAAA,CAAA,GAAAtpC,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA5mC,EAAA,CAAA,CAAA,CAAAoM,EAAAxgB,CAAAA,YAAA,CAAA,WAAA,CAAA,QAAA3U,CAAAA,MAAA,CAAAnQ,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA3vD,CAAAA,MAAA,CAAAnQ,EAAA8\/D,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,cAAA,CAAA3vD,CAAAA,MAAA,CAAAk5B,EAAA,CAAA,GAAA,CAAAl5B,CAAAA,MAAA,CAAAm5B,EAAA,CAAA,GAAA,CAAA,CAAAzG,GAAAA,CAAAniC,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,GAAA,CAAA51C,GAAA9d,CAAAA,WAAA,CAAAugB,EAAA,CAAAzC,GAAA\/d,CAAAA,YAAA,CAAA,WAAA,CAAA,YAAA3U,CAAAA,MAAA,CAAAnP,EAAA,EAAA,CAAA,CAAA,GAAA,CAAAmP,CAAAA,MAAA,CAAAxO,EAAA,EAAA,CAAA,CAAA,WAAA,CAAAwO,CAAAA,MAAA,CAAA5I,EAAA,CAAA,GAAA,CAAA4I,CAAAA,MAAA,CAAAxG,EAAA,CAAA,GAAA,CAAAwG,CAAAA,MAAA,CAAA2C,EAAA,CAAA,GAAA,CAAA,CAAA5K,GAAA6c,CAAAA,WAAA,CAAA8d,EAAA,CAAA,CAAA,KAAA,SAAA,GAAA,CAAA,GAAAjiC,CAAA6tB,CAAAA,EAAA,EAAAzuB,EAAA,CAAA,CAAA,KAAA6D,MAAA,CAAA,qBAAAsM,CAAAA,MAAA,CAAAnQ,EAAA8c,CAAAA,IAAA,CAAA,CAAA;AAAAgmB,EAAAA,CAAA9iC,EAAAqwB,CAAAA,OAAAyS,CAAA,GAAAC,GAAAA,CAAAriC,EAAAgkB,CAAAA,aAAAE,CAAAA,eAAA,CAAApf,CAAAizE,CAAAA,EAAA,CAAA,GAAA,CAAA,EAAA,GAAA31C,EAAA,GAAAC,EAAAje,CAAAA,YAAA,CAAA,gBAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAA2yB,EAAA,CAAA,CAAA,CAAAC,EAAAje,CAAAA,YAAA,CAAA,cAAA,CAAA,EAAA3U,CAAAA,MAAA,CAAA2yB,EAAA,CAAA,CAAA,CAAAC,GAAAje,CAAAA,YAAA,CAAA,WAAA,CAAA,YAAA3U,CAAAA,MAAA,CAAAnP,EAAA,EAAA,CAAA,CAAA,GAAA,CAAAmP,CAAAA,MAAA,CAAAxO,EAAA,EAAA,CAAA,CAAA,WAAA,CAAAwO,CAAAA,MAAA,CAAA5I,EAAA,CAAA,GAAA,CAAA4I,CAAAA,MAAA,CAAAxG,EAAA,CAAA,GAAA,CAAAwG,CAAAA,MAAA,CAAA2C,EAAA,CAAA,GAAA,CAAA,CAAAkwB,GAAAA,CAAAhjC,EAAAgX,CAAAA,IAAA7V,CAAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA0yC,CAAAA,KAAA,CAAA,IAAA,CAAAtK,GAAAA,CAAA,GAAA\/hC,EAAAuvD,CAAAA,EAAA,EAAA\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\/\/E,EAAAL,CAAA,CAAAA,CAAA,CAAAK,EAAAT,CAAA,CAAAA,CAAA,CAAAS,EAAAO,CAAA,CAAAA,CAAA,CAAAP,EAAAU,CAAA,CAAAA,CAAA,CAAA,CAAA3B,EAAAwvB,CAAAA,KAAA,CAAA9uB,EAAA,CAAA,CAAA8E,GAAA,GAAAxE,CAAAkB,CAAAA,CAAA,EAAAD,EAAA,CAAA,CAAA,CAAA,CAAA0B,GAAA6B,EAAA,CAAA,CAAA,CAAA,CAAAI,GAAAJ,EAAA,CAAA,CAAA,CAAA,CAAAM,GAAAN,EAAA,CAAA,CAAA,CAAA,CAAAkE,GAAAlE,EAAA,CAAA,CAAA,CAAA5B,GAAAA,CAAAD,EAAAC,CAAAkC,EAAAlC,CAAA,CAAAqG,GAAAA,CAAArE,EAAAqE,CAAAP,EAAAO,CAAA,CAAA,IAAAhK,EAAAwjB,CAAAA,IAAA,EAAA,CAAAxjB,EAAA+rF,CAAAA,SAAA,CAAAtrF,EAAAkyC,CAAAA,OAAA,CAAAhvC,EAAA,CAAAlD,EAAAmyC,CAAAA,OAAA,CAAA5oC,EAAA,CAAA,CAAAhK,EAAAksF,CAAAA,MAAA,CAAAnsF,EAAAwvB,CAAAA,KAAA,CAAA,CAAAhpB,CAAAA,CAAA,EAAAA,CAAAktB,CAAAA,IAAA,GAAAhzB,EAAAgzB,CAAAA,IAAAxtB,CAAAA,KAAA,CAAA,CAAAwtB,CAAAltB,CAAAktB,CAAA\/O,QAAApb,CAAAA,aAAA,CAAA,QAAA,CAAAmqB,EAAAA,IAAA,CAAAhzB,EAAAgzB,CAAAA,IAAAxtB,CAAAA,KAAAM,EAAAqnB,CAAAA,KAAA,CAAA\/nB,EAAA,CAAAqN,MAAAu+B,CAAAA,gBAAA;AAAAhxC,EAAAgzB,CAAAA,IAAAxtB,CAAAA,KAAAM,EAAAsnB,CAAAA,MAAA,CAAApkB,EAAA,CAAAyJ,MAAAu+B,CAAAA,gBAAA,CAAAhxC,EAAAgzB,CAAAA,IAAAxtB,CAAAA,KAAA,KAAA4M,GAAAtM,CAAA4c,CAAAA,UAAA,CAAA,IAAA,CAAAtQ,GAAAgtD,CAAAA,KAAA,CAAA3sD,MAAAu+B,CAAAA,gBAAA,CAAAhxC,EAAAgzB,CAAAA,IAAAxtB,CAAAA,KAAA,CAAAiN,MAAAu+B,CAAAA,gBAAA,CAAAhxC,EAAAgzB,CAAAA,IAAAxtB,CAAAA,KAAA,CAAA4M,GAAAuN,CAAAA,SAAA,CAAA,MAAAvN,GAAAo9D,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAApqE,EAAA,CAAA4D,EAAA,CAAAoJ,GAAA04D,CAAAA,SAAA,CAAA7hE,CAAAo3E,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAj7E,EAAA,CAAA4D,EAAA,CAAAoJ,GAAAmR,CAAAA,OAAA,EAAA,CAAAhkB,EAAAurE,CAAAA,SAAA,CAAAhlE,CAAA,CAAA7C,EAAA,CAAAC,EAAA,CAAAgC,EAAA,CAAAqE,EAAA,CAAAnE,EAAA,CAAA4D,EAAA,CAAAzJ,GAAAgkB,CAAAA,OAAA,EAAA,CAAA,CAAA,MAAAjkB,EAAA,CAAA,CAAAsE,OAAAyE,CAAAA,KAAA,CAAA\/I,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA6kB,EAAA,EAAAtd,CAAA,CAAAD,EAAA,CAAA1B,EAAA,CAAAY,EAAA,CAAAqe,EAAA,CAAA,CAAAjf,EAAAktC,CAAAA,gBAAA,CAAA,GAAA,CAAA,GAAAnxC,CAAA4pF,CAAAA,EAAA,EAAA3lF,EAAAktC,CAAAA,gBAAA,CAAAnpC,EAAA,CAAArC,EAAA,CAAAd,EAAA,CAAAZ,EAAA,CAAA,CAAA,MAAA5F,EAAA,CAAA,CAAAsE,OAAAyE,CAAAA,KAAA,CAAA\/I,EAAA,CAAA,CAAA,GAAA8F,CAAAywD,CAAAA,EAAA,EAAA3wD,EAAA,CAAA,EAAAA,EAAAuiC,CAAAA,iBAAArpB,CAAAA,MAAA,CAAA,QAAA,CAAA9e,EAAA,CAAA,CAAA,MAAA,KAAA;AAAAA,EAAA,CAAA,CAAA+G,CAAAA,OAAA,CAAA,QAAA,CAAA\/G,EAAA,CAAA,CAAA,IAAAe,GAAAc,KAAAC,CAAAA,OAAA,CAAA9B,EAAA,CAAA,CAAAgD,EAAA,CAAAC,EAAAqE,GAAAmc,CAAAA,IAAA,EAAAnc,GAAA0kF,CAAAA,SAAA,CAAAxlF,EAAAosC,CAAAA,OAAA,CAAApsC,EAAAqsC,CAAAA,OAAA,CAAA9xC,GAAA,CAAAuG,EAAA,CAAAtH,EAAA,CAAAsH,GAAA2c,CAAAA,OAAA,EAAA,CAAA,CAAA,KAAAO,EAAA7D,GAAAA,CAAA,GAAAnf,CAAA2rB,CAAAA,EAAA,EAAAzsB,EAAA,CAAAkF,EAAA,CAAA,IAAA,CAAA,GAAA+a,EAAA5e,CAAAA,MAAA,GAAA,IAAA,IAAA9B,EAAA,CAAA2F,EAAAuyB,CAAAA,oBAAA,GAAA,IAAA,EAAA,GAAAl4B,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA4wB,CAAAA,SAAA,IAAAlQ,EAAA,CAAA,CAAA,CAAAhgB,CAAAA,EAAA,EAAA4G,CAAA,CAAAD,EAAA,CAAA1B,EAAA,CAAAY,EAAA,CAAAma,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA\/a,EAAAihC,CAAAA,qBAAA,EAAA,CAAA,EAAAjhC,EAAAihC,CAAAA,qBAAAgyB,CAAAA,eAAA,EAAA,QAAA,CAAA74D,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAA,CAAA,IAAAK,EAAA,CAAAC,EAAA,CAAAC,GAAAhB,EAAA4mC,CAAAA,qBAAA,CAAAjmC,GAAAK,EAAA4vB,CAAAA,SAAApwB,GAAAA,CAAAQ,EAAA43D,CAAAA,eAAA,IAAA,IAAA,IAAA93D,EAAA,CAAAd,EAAAk4B,CAAAA,oBAAA,GAAA,IAAA,EAAA,GAAAp3B,EAAA,EAAA,IAAA,IAAAC,EAAA;AAAAD,EAAAq3B,CAAAA,qBAAA,GAAA,IAAA,EAAA,GAAAp3B,EAAA,EAAA,CAAAA,EAAA0vB,CAAAA,QAAA,CAAAjwB,EAAA,CAAA,CAAA,GAAAD,EAAA,CAAAgF,EAAAoB,CAAAA,CAAA2xB,CAAAA,UAAA,CAAA33B,EAAA,CAAA,CAAAY,EAAA,CAAAgE,EAAAoB,CAAAA,CAAAmhC,CAAAA,gCAAA,CAAAvnC,EAAA,CAAAC,EAAA,CAAA,CAAAT,EAAAyjB,CAAAA,IAAA,EAAA,CAAAzjB,EAAAgsF,CAAAA,SAAA,CAAAtrF,EAAAkyC,CAAAA,OAAA,CAAAlyC,EAAAmyC,CAAAA,OAAA,CAAA,CAAArrC,EAAA,CAAAhG,EAAA,CAAAxB,EAAA,CAAAU,EAAA,CAAA,CAAAV,EAAAikB,CAAAA,OAAA,EAAA,CAAA,CAAA3c,EAAA,CAAA1B,EAAA,CAAAY,EAAA,CAAA,CAAAmC,EAAA,EAAA,CAAA\/C,EAAAgzB,CAAAA,YAAA,EAAA,CAAAhzB,EAAAuyB,CAAAA,oBAAA,CAAA,CAAA,IAAApB,EAAArV,GAAAA,CAAA,GAAAhY,CAAAkvD,CAAAA,EAAA,EAAAj4C,EAAA,CAAA\/a,EAAA,CAAA,KAAAq1B,GAAAta,EAAAzX,CAAAA,GAAA,CAAA,QAAA,CAAAlJ,EAAA,CAAA,CAAA,MAAAA,GAAAW,CAAAA,EAAA,CAAA,CAAA,IAAA,CAAA,GAAAggB,EAAA5e,CAAAA,MAAA,EAAA,GAAA+Q,CAAA6uB,CAAAA,EAAA,EAAAhhB,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,IAAAoW,EAAA,CAAAnxB,EAAAihC,CAAAA,qBAAA,GAAA,IAAA,EAAA,GAAA9P,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAlG,CAAAA,SAAA,IAAAlQ,EAAA,CAAA,CAAA,CAAAhgB,CAAAA,EAAA,EAAA,CAAAggB,EAAA,CAAA,CAAA,CAAA2P,CAAAA,MAAA,EAAA\/oB,CAAA,CAAAD,EAAA,CAAA1B,EAAA,CAAAY,EAAA,CAAAma,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAe,EAAA,CAAA,CAAA,IAAAwZ,EAAA,CAAAzZ,GAAA\/gB,EAAAm3B,CAAAA,MAAA,CAAA,QAAA,CAAA73B,EAAA;AAAAC,EAAA,CAAA,CAAA,IAAAS,GAAA,EAAA,IAAAu6B,EAAAvK,CAAAA,QAAA,CAAAzwB,EAAAU,CAAAA,EAAA,CAAA,EAAA,CAAA,GAAAgD,CAAA25D,CAAAA,EAAA,EAAA13D,EAAA,CAAA3F,EAAA,CAAA,EAAAS,EAAAoM,CAAAA,IAAA,CAAAzI,EAAA,CAAA,CAAAmC,EAAA25D,CAAAA,wBAAA,CAAAlgE,EAAAU,CAAAA,EAAA,CAAA,EAAAD,EAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAA,GAAAO,CAAAiB,CAAAA,CAAA,EAAAsE,EAAA25D,CAAAA,wBAAA,CAAAlgE,EAAAU,CAAAA,EAAA,CAAAuI,CAAAA,GAAA,CAAA,QAAA,CAAAlJ,EAAA,CAAA,CAAA,MAAA,GAAAiC,CAAA80B,CAAAA,CAAA,EAAA\/2B,EAAA,CAAA4F,EAAA,CAAAulC,CAAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAAzqC,EAAAqB,CAAAA,MAAA,CAAA,CAAA,IAAAhB,GAAA,GAAAN,CAAAmtC,CAAAA,EAAA,EAAA3tC,EAAA,CAAA,CAAA,CAAA,CAAAW,GAAAA,CAAA,GAAAI,CAAAkB,CAAAA,CAAA,EAAAnB,EAAA,CAAA,CAAA,CAAAf,GAAA8M,CAAAA,IAAA,CAAA,CAAA0iB,MAAAvvB,EAAAuvB,CAAAA,KAAA,CAAAy9D,UAAArsF,EAAAJ,CAAA,CAAAA,CAAA,CAAA0sF,UAAAtsF,EAAAY,CAAA,CAAAA,CAAA,CAAA2rF,UAAAvsF,EAAAe,CAAA,CAAAA,CAAA,CAAAyrF,UAAAxsF,EAAA4E,CAAA,CAAAA,CAAA,CAAA6nF,gBAAA3sF,EAAA,CAAA4sF,OAAA,CAAA,CAAA9mF,EAAA25D,CAAAA,wBAAA,CAAAlgE,EAAAU,CAAAA,EAAA,CAAA,CAAAylC,GAAAxlC,EAAAkF,CAAA,CAAAA,CAAA,CAAA8tE,GAAAhzE,EAAA8I,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,MAAA1J,GAAA,CAAA,CAAA,EAAA,CAAAo5B,GAAAA,CAAAA,QAAA,CAAAp5B,EAAA,CAAA,CAAAC,EAAAA,CAAA,GAAA0D,CAAAs0B,CAAAA,EAAA,EAAAv3B,EAAA,CAAAV,EAAA,CAAAe,GAAAA,CAAA,GAAAN,CAAAs0B,CAAAA,EAAA,EAAA90B,EAAA,CAAA;IAAAgB,GAAA,GAAAD,CAAAkB,CAAAA,CAAA,EAAAnB,EAAA,CAAA,CAAA,CAAAP,GAAAA,CAAAS,EAAA,CAAA,CAAA,CAAA,KAAAO,GAAAP,EAAA,CAAA,CAAA,CAAA,CAAAU,GAAAV,EAAA,CAAA,CAAA,CAAAgB,GAAAA,CAAAhB,EAAA,CAAA,CAAA,CAAAwgB,GAAA3U,CAAAA,IAAA,CAAA,CAAA0iB,MAAA,CAAA,CAAAy9D,UAAAzsF,EAAA,CAAA2sF,UAAAxrF,EAAA,CAAAurF,UAAA1rF,EAAA,CAAA4rF,UAAAnrF,EAAA,CAAAorF,gBAAA,CAAAzsF,CAAA82C,CAAAA,KAAA,CAAA,CAAA41C,OAAA,CAAA,CAAA,CAAAlnD,GAAA5lC,EAAA4lC,EAAAzkC,EAAAykC,CAAA5lC,EAAA4lC,EAAA,CAAA,CAAAwtC,GAAApyE,EAAAoyE,EAAA3xE,EAAA2xE,CAAApyE,EAAAoyE,EAAA,CAAA,CAAA,CAAA,CAAA16C,GAAAA,CAAA90B,CAAA,CAAA,GAAAT,CAAA8lC,CAAAA,EAAA,EAAA7jC,EAAA,CAAA,CAAA,IAAA,CAAA,IAAAszB,EAAA14B,CAAAA,CAAA,EAAA,CAAA,CAAAuX,CAAAmjB,EAAAnjB,CAAAmhB,EAAAx4B,CAAAA,CAAA,EAAAqX,EAAAA,IAAA,CAAA,CAAAqhB,EAAA,CAAA8B,EAAAh1B,CAAAA,KAAA,CAAA,CAAA,MAAAlG,EAAA,CAAA,CAAAk5B,EAAAl5B,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,OAAA,CAAAk5B,EAAA1zB,CAAAA,CAAA,EAAA,CAAAI,EAAAoyB,CAAAA,cAAA,EAAAoB,EAAA,CAAAxzB,EAAAoyB,CAAAA,cAAA,CAAAvW,GAAA1a,CAAAA,OAAA,CAAA,QAAA,CAAA\/G,EAAA,CAAA,CAAA,MAAA6H,GAAA,CAAAP,EAAA,CAAAd,EAAA,CAAAxG,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAsH,EAAAmc,CAAAA,IAAA,EAAA,CAAAnc,EAAA0kF,CAAAA,SAAA,CAAAxlF,EAAAosC,CAAAA,OAAA,CAAApsC,EAAAqsC,CAAAA,OAAA,CAAA,CAAA,CAAA,GAAAlyB,EAAA5e,CAAAA,MAAA,CAAAuF,EAAA+Y,CAAAA,SAAA,CAAAzf,CAAAoyC,CAAAA,KAAA,CAAAvQ,EAAA,CAAA,GAAAhiC,CAAAgtC,CAAAA,EAAA,EAAA9sB,EAAA,CAAA,CAAA,CAAA,CAAAna,EAAAktB,CAAAA,IAAA,CAAA,OAAA,CAAA;AAAA,CAAA9tB,EAAA4rB,CAAAA,eAAA,EAAA9P,EAAA,EAAAxZ,EAAA,CAAAZ,EAAA,CAAAd,EAAA,CAAAi8B,EAAA,CAAA9hB,EAAA,CAAA,CAAA,CAAA6O,CAAAA,KAAA,CAAA,KAAA,IAAA,CAAA,CAAA7O,EAAA5e,CAAAA,MAAA,EAAA,CAAA6D,EAAAwsC,CAAAA,UAAA,CAAA,CAAA1P,EAAAA,CAAA,CAAAA,CAAAl\/B,EAAAk\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\/mD,CAAAA,OAAA,CAAA,QAAA,CAAA\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\/D,CAAAA,cAAA,CAAA,WAAA,GAAA\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\/D,CAAAA,QAAA,CAAA,EAAA,KAAA8\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\/B,EAAA8\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\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\/c,GAAAA,QAAA,EAAA,CAAA,IAAA\/2B,EAAA,CAAAC,EAAA,CAAAS,GAAA,IAAAwE,OAAA,CAAA,QAAA,CAAAxE,EAAA,CAAAK,EAAA,CAAA,CAAAf,EAAA,CAAAU,EAAAT,GAAA,CAAAc,EAAA,CAAA,CAAA,OAAAL,GAAA2G,CAAAA,OAAA,CAAArH,EAAA,CAAAU,EAAA2vF,CAAAA,MAAA,CAAApwF,EAAA,CAAAS,EAAA,CAAA,CAAAghB,GAAAA,QAAA,CAAA1hB,EAAA,CAAA,CAAA,MAAA,SAAA,CAAAC,EAAA,CAAA,CAAA,GAAA0B,CAAAsxE,CAAAA,uBAAA,EAAAjzE,EAAA;AAAAC,EAAA,CAAA,CAAA,CAAA,CAAAg7B,GAAAA,QAAA,CAAAj7B,EAAA,CAAA,CAAA,MAAAwG,EAAA,CAAA,QAAA,CAAAvG,EAAA,CAAA,CAAA,GAAA0B,CAAAsxE,CAAAA,uBAAA,EAAAjzE,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAi7B,GAAAA,QAAA,EAAA,CAAA,IAAAl7B,GAAA2kB,QAAApb,CAAAA,aAAA,CAAA,QAAA,CAAA6Z,CAAAA,UAAA,CAAA,IAAA,CAAA,OAAApjB,GAAA,EAAAA,EAAAqgB,CAAAA,SAAA,CAAA,MAAA,CAAArgB,EAAAswF,CAAAA,YAAA,CAAA,KAAA,CAAAtwF,EAAAugF,CAAAA,IAAA,CAAA,YAAA,CAAAvgF,EAAA6rF,CAAAA,QAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA7rF,EAAAuwF,CAAAA,YAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA30E,CAAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA6F,GAAAA,QAAA,CAAAzhB,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAAD,EAAAwwF,CAAAA,aAAA,CAAAvwF,EAAA,EAAAA,EAAA,GAAA0kB,QAAA4xB,CAAAA,IAAA,CAAA,CAAA,CAAA,IAAA71C,GAAAyS,MAAAwsD,CAAAA,gBAAA,CAAA1\/D,EAAA,CAAA+yE,CAAAA,SAAA,IAAA\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\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAm5B,CAAA,CAAAr1B,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAukB,EAAAtiB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA;AAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA04B,CAAA,CAAAr1B,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAoqC,QAAAA,EAAA,CAAApqC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAA2pC,QAAAA,EAAA,CAAArqC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA;AAAA,EAAAA,GAAA,CAAA,CAAA,CAAAmqC,CAAA,CAAArmC,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAukB,EAAAtiB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA0pC,CAAA,CAAArmC,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAA0qC,QAAAA,EAAA,CAAA1qC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC,GAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA;AAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAiqC,QAAAA,EAAA,CAAA3qC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAAyqC,CAAA,CAAA3mC,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA,GAAAukB,EAAAtiB,CAAAA,CAAA,EAAAlC,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAgqC,CAAA,CAAA3mC,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAgkC,QAAAA,EAAA,CAAAhkC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAS,GAAAqD,MAAAoD,CAAAA,IAAA,CAAAnH,EAAA,CAAA,IAAA+D,MAAA0B,CAAAA,qBAAA,CAAA,CAAA,IAAA1E,GAAAgD,MAAA0B,CAAAA,qBAAA,CAAAzF,EAAA,CAAAC;EAAA,GAAAc,EAAA,CAAAA,EAAA+d,CAAAA,MAAA,CAAA,QAAA,CAAA7e,EAAA,CAAA,CAAA,MAAA8D,OAAA4oB,CAAAA,wBAAA,CAAA3sB,EAAA,CAAAC,EAAA,CAAA8F,CAAAA,UAAA,CAAA,CAAA,CAAArF,GAAAoM,CAAAA,IAAAlD,CAAAA,KAAA,CAAAlJ,EAAA,CAAAK,EAAA,CAAA,CAAA,MAAAL,GAAA,CAAAwrC,QAAAA,EAAA,CAAAlsC,EAAA,CAAA,CAAA,IAAA,IAAAC,GAAA,CAAA,CAAAA,EAAA,CAAA+B,SAAAD,CAAAA,MAAA,CAAA9B,EAAA,EAAA,CAAA,CAAA,IAAAS,GAAA,IAAA,EAAAsB,SAAA,CAAA\/B,EAAA,CAAA,CAAA+B,SAAA,CAAA\/B,EAAA,CAAA,CAAA,EAAAA,GAAA,CAAA,CAAA,CAAA+jC,CAAA,CAAAjgC,MAAA,CAAArD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAAmE,CAAA,EAAA,CAAApE,EAAA,CAAAC,EAAA,CAAAS,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA8D,MAAAwB,CAAAA,yBAAA,CAAAxB,MAAAuB,CAAAA,gBAAA,CAAAtF,EAAA,CAAA+D,MAAAwB,CAAAA,yBAAA,CAAA7E,EAAA,CAAA,CAAA,CAAAsjC,CAAA,CAAAjgC,MAAA,CAAArD,EAAA,CAAA,CAAAqG,CAAAA,OAAA,CAAA,QAAA,CAAA9G,EAAA,CAAA,CAAA8D,MAAAsB,CAAAA,cAAA,CAAArF,EAAA,CAAAC,EAAA,CAAA8D,MAAA4oB,CAAAA,wBAAA,CAAAjsB,EAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAD,GAAA,CAAAQ,CAAAO,CAAAA,CAAA,CAAAS,CAAA,CAAAhB;CAAAyB,CAAAA,CAAA,CAAAT,CAAA,CAAA,CAAA00F,OAAAA,QAAA,EAAA,CAAA,MAAA5rD,GAAA,CAAA,CAAA6rD,WAAAA,QAAA,EAAA,CAAA,MAAA7pD,GAAA,CAAA,CAAA8pD,YAAAA,QAAA,EAAA,CAAA,MAAAp2F,EAAAqgC,CAAAA,EAAA,CAAA,CAAAg2D,OAAAA,QAAA,EAAA,CAAA,MAAAhuF,GAAA,CAAA,CAAAyvE,yBAAAA,QAAA,EAAA,CAAA,MAAAjtC,GAAA,CAAA,CAAAyrD,WAAAA,QAAA,EAAA,CAAA,MAAAt2F,EAAAu1C,CAAAA,EAAA,CAAA,CAAAghD,SAAAA,QAAA,EAAA,CAAA,MAAA1xE,GAAA3iB,CAAAA,CAAA,CAAA,CAAAs0F,QAAAA,QAAA,EAAA,CAAA,MAAAtzD,GAAAre,CAAAA,CAAA,CAAA,CAAA4xE,MAAAA,QAAA,EAAA,CAAA,MAAAz2F,EAAAq1B,CAAAA,EAAA,CAAA,CAAAqhE,cAAAA,QAAA,EAAA,CAAA,MAAA1wD,GAAA,CAAA,CAAA2wD,YAAAA,QAAA,EAAA,CAAA,MAAAprD,GAAAlF,CAAAA,EAAA,CAAA,CAAAuwD,YAAAA,QAAA,EAAA,CAAA,MAAArvF,EAAAq2D,CAAAA,EAAA,CAAA,CAAAi5B,aAAAA,QAAA,EAAA,CAAA,MAAA7rD,GAAAs\/C,CAAAA,EAAA,CAAA,CAAAwM,eAAAA,QAAA,EAAA,CAAA,MAAA9rD,GAAAwT,CAAAA,EAAA,CAAA,CAAAu4C,kBAAAA,QAAA,EAAA,CAAA,MAAA\/rD,GAAAu\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\/nC,CAAAA,CAAA,CAAAgoC,CAAA,CAAAD,EAAA\/nC,CAAAA,CAAA,EAAA+nC,CAAA\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\/D,CAAAA,KAAA,EAAA,CAAA,GAAA9\/D,EAAA8\/D,CAAAA,KAAA,EAAA9\/D,EAAA65B,CAAAA,cAAA,EAAA,CAAA,OAAAlV,SAAAsiC,CAAAA,gBAAA,CAAA,WAAA;AAAAjnD,EAAA,CAAA,CAAA81D,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,CAAAnxC,QAAAuiC,CAAAA,mBAAA,CAAA,WAAA,CAAAlnD,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAAwH,EAAA+V,CAAAA,GAAA,EAAAva,EAAA+B,CAAAA,EAAA,CAAA,CAAAq0F,qBAAAA,QAAA,EAAA,CAAA,MAAAt4F,EAAAujE,CAAAA,EAAA,CAAA,CAAA7\/D,MAAA1D,CAAA82C,CAAAA,EAAA,CAAA9lB,SAAA,GAAAtqB,EAAA+V,CAAAA,GAAA,EAAA9V,CAAA,CAAA,CAAAmqD,SAAAhsD,EAAA,CAAA+sB,MAAAhpB,EAAA,CAAAmoB,SAAA,GAAAtqB,EAAA+V,CAAAA,GAAA,EAAA5U,CAAA09B,CAAAA,EAAA,CAAA,CAAApU,SAAAhxB,EAAA,CAAAk+D,YAAAv+D,EAAA,CAAA4tD,cAAA\/tD,EAAA,CAAAu3E,gBAAAx2E,EAAA,CAAA6sE,gBAAA1sE,EAAA,CAAAi\/C,iBAAA3+C,EAAA,CAAA2vD,SAAAhsD,EAAA,CAAA4rB,gBAAA1rB,EAAA,CAAAuoC,eAAA3kC,EAAA,CAAAykC,gBAAAvqC,EAAA,CAAAmhD,iBAAA96C,EAAA,CAAA0oB,MAAAhpB,EAAA,CAAAwN,KAAArE,EAAA,CAAAstC,kBAAAh8C,EAAA,CAAAitB,UAAAlpB,EAAA,CAAA85D,QAAAz7D,EAAA,CAAAwvD,aAAAxyD,EAAA,CAAAiuD,uBAAA3qD,EAAA;AAAA03E,gBAAAv3E,EAAA,CAAAm3D,UAAAl2D,EAAA,CAAA0iE,kBAAA\/iE,EAAA,CAAAmqD,WAAA9vD,EAAA,CAAAs7C,cAAAv6C,EAAA,CAAAizD,eAAA\/xD,EAAA,CAAA0tD,cAAArsD,EAAA,CAAAssB,SAAAztB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA8nC,EAAAA,CAAA,GAAAvnC,CAAA6hD,CAAAA,UAAA,EAAA,QAAA,CAAAzmD,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAA,GAAAuH,EAAA+V,CAAAA,GAAA,EAAA8lB,EAAA,CAAA6I,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAAlsC,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAwuD,cAAAvuD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAqsC,GAAA9lC,CAAA,EAAA01C,CAAAA,IAAA,CAAA\/P,CAAA,CAAA7I,QAAA,CAAAtjC,EAAA,CAAAC,EAAA,CAAA,CAAA,GAAAD,EAAA8xB,CAAAA,QAAA,GAAA7xB,EAAA6xB,CAAAA,QAAA,CAAA,MAAA,CAAA,CAAA9xB,GAAAm\/D,CAAAA,WAAA,KAAAz+D,GAAAV,EAAAqxB,CAAAA,SAAA,CAAAtwB,GAAA,IAAA,EAAA,GAAAL,EAAA,CAAA,EAAA,CAAAA,EAAAM,GAAAA,CAAA2I,CAAA,EAAA,CAAA3J,EAAA,CAAAmjC,EAAA,CAAAliC,GAAAA,EAAAhB,EAAAk\/D,CAAAA,WAAA,CAAAl\/D,EAAAoxB,CAAAA,SAAApwB,CAAA,KAAAL,GAAA,IAAA,EAAA,GAAAK,EAAA,CAAA,EAAA,CAAAA,EAAAR,GAAAA,CAAAkJ,CAAA,EAAA,CAAA1J,EAAA,CAAAmjC,EAAA,CAAA5iC,GAAAA,CAAAuD,MAAAoD,CAAAA,IAAA,CAAApG,EAAA,CAAA,KAAAS,GAAAuC,MAAAoD,CAAAA,IAAA,CAAAvG,EAAA,CAAA,OAAAJ,GAAAuB,CAAAA,MAAA;AAAAP,EAAAO,CAAAA,MAAA,EAAAvB,EAAA4G,CAAAA,KAAA,CAAA,QAAA,CAAApH,EAAA,CAAA,CAAA,MAAA,eAAA,GAAAA,EAAA,CAAA+D,MAAAoD,CAAAA,IAAA,CAAApG,EAAAuwB,CAAAA,aAAA,CAAAlqB,CAAAA,KAAA,CAAA,QAAA,CAAApH,EAAA,CAAA,CAAA,IAAAC,EAAA,CAAAS,EAAA,CAAAM,EAAA,CAAAC,EAAA,OAAA,QAAA,GAAAjB,EAAA,EAAA,IAAA,EAAAe,EAAA,EAAA,IAAA,IAAAd,EAAA,CAAAc,EAAAuwB,CAAAA,aAAA,GAAA,IAAA,EAAA,GAAArxB,EAAA,EAAAA,EAAAkzC,CAAAA,MAAA,EAAA,IAAA,EAAAvyC,EAAA,EAAA,IAAA,IAAAF,EAAA,CAAAE,EAAA0wB,CAAAA,aAAA,GAAA,IAAA,EAAA,GAAA5wB,EAAA,EAAAA,EAAAyyC,CAAAA,MAAA,CAAApyC,EAAAuwB,CAAAA,aAAA6hB,CAAAA,MAAAmQ,CAAAA,cAAA,GAAA1iD,EAAA0wB,CAAAA,aAAA6hB,CAAAA,MAAAmQ,CAAAA,cAAA,EAAA,IAAA,EAAAviD,EAAA,EAAA,IAAA,IAAAC,EAAA,CAAAD,EAAAuwB,CAAAA,aAAA,GAAA,IAAA,EAAA,GAAAtwB,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA,CAAAhB,EAAA,CAAA,KAAA,IAAA,EAAAY,EAAA,EAAA,IAAA,IAAAK,EAAA,CAAAL,EAAA0wB,CAAAA,aAAA,GAAA,IAAA,EAAA,GAAArwB,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA,CAAAjB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAe,EAAA,CAAAf,EAAA,CAAA;AAAAY,EAAA,CAAAZ,EAAA,CAAA,CAAA,CAAA,EAAA,GAAA2H,CAAAmjD,CAAAA,EAAA,EAAA9pD,EAAA,CAAAP,EAAA,CAAA,CAAA,CAAA6rC,GAAA8N,CAAAA,WAAA,CAAA,YAAAn6C,UAAA,EAAA,CAAA4B,KAAA6D,CAAAA,SAAAy5C,CAAAA,EAAA,EAAAp7C,MAAAsB,CAAAA,cAAA,CAAAxD,KAAA6D,CAAAA,SAAA,CAAA,IAAA,CAAA,CAAAQ,MAAAA,QAAA,CAAAlG,EAAA,CAAA,CAAA,GAAA,CAAA,EAAAA,EAAA,CAAA+K,IAAAggE,CAAAA,KAAA,CAAA\/qE,EAAA,CAAA,EAAA,CAAA,IAAAA,EAAA,EAAA,IAAA+B,CAAAA,MAAA,EAAA,EAAA,CAAA,CAAA\/B,EAAA,EAAAA,EAAA,EAAA,IAAA+B,CAAAA,MAAA,CAAA,CAAA,MAAA,KAAA,CAAA\/B,EAAA,CAAA,CAAA,CAAAiG,SAAA,CAAA,CAAA,CAAAF,WAAA,CAAA,CAAA,CAAAC,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA\/F,CAAA,EAAA,CAAA,EAAA,CAAAuB,CAA5pH,CAAV,EAAR,CAAhV,CAH6D;","sources":["node_modules\/@excalidraw\/excalidraw\/dist\/excalidraw.production.min.js"],"sourcesContent":["shadow$provide[595] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\/*! For license information please see excalidraw.production.min.js.LICENSE.txt *\/\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\"),require(\"react-dom\")):\"function\"==typeof define&&define.amd?define([\"react\",\"react-dom\"],t):\"object\"==typeof exports?exports.ExcalidrawLib=t(require(\"react\"),require(\"react-dom\")):e.ExcalidrawLib=t(e.React,e.ReactDOM)}(self,(function(e,t){return function(){var n,r,o,i,a={5779:function(e,t){\"use strict\";t.N=void 0;var n=\/^([^\\w]*)(javascript|data|vbscript)\/im,r=\/&#(\\w+)(^\\w|;)?\/g,o=\/&(newline|tab);\/gi,i=\/[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]\/gim,a=\/^.+(:|&colon;)\/gim,l=[\".\",\"\/\"];t.N=function(e){var t,s=(t=e||\"\",t.replace(r,(function(e,t){return String.fromCharCode(t)}))).replace(o,\"\").replace(i,\"\").trim();if(!s)return\"about:blank\";if(function(e){return l.indexOf(e[0])>-1}(s))return s;var c=s.match(a);if(!c)return s;var u=c[0];return n.test(u)?\"about:blank\":s}},45:function(e,t,n){\"use strict\";function r(e){var t,n,o=\"\";if(\"string\"==typeof e||\"number\"==typeof e)o+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=\" \"),o+=n);else for(t in e)e[t]&&(o&&(o+=\" \"),o+=t);return o}function o(){for(var e,t,n=0,o=\"\";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=\" \"),o+=t);return o}n.d(t,{Z:function(){return o}})},6233:function(e,t){var n;n=function(e){e.version=\"0.3.0\";var t=function(){for(var e=0,t=new Array(256),n=0;256!=n;++n)e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=n)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1,t[n]=e;return\"undefined\"!=typeof Int32Array?new Int32Array(t):t}(),n=\"undefined\"!=typeof Buffer;function r(e){for(var n=-1,r=0,o=e.length-7;r<o;)n=(n=(n=(n=(n=(n=(n=(n=n>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])];for(;r<o+7;)n=n>>>8^t[255&(n^e[r++])];return-1^n}e.table=t,e.bstr=function(e){if(e.length>32768&&n)return r(new Buffer(e));for(var o=-1,i=e.length-1,a=0;a<i;)o=t[255&(o^e.charCodeAt(a++))]^o>>>8,o=t[255&(o^e.charCodeAt(a++))]^o>>>8;return a===i&&(o=o>>>8^t[255&(o^e.charCodeAt(a))]),-1^o},e.buf=function(e){if(e.length>1e4)return r(e);for(var n=-1,o=0,i=e.length-3;o<i;)n=(n=(n=(n=n>>>8^t[255&(n^e[o++])])>>>8^t[255&(n^e[o++])])>>>8^t[255&(n^e[o++])])>>>8^t[255&(n^e[o++])];for(;o<i+3;)n=n>>>8^t[255&(n^e[o++])];return-1^n},e.str=function(e){for(var n,r,o=-1,i=0,a=e.length;i<a;)(n=e.charCodeAt(i++))<128?o=o>>>8^t[255&(o^n)]:n<2048?o=(o=o>>>8^t[255&(o^(192|n>>6&31))])>>>8^t[255&(o^(128|63&n))]:n>=55296&&n<57344?(n=64+(1023&n),r=1023&e.charCodeAt(i++),o=(o=(o=(o=o>>>8^t[255&(o^(240|n>>8&7))])>>>8^t[255&(o^(128|n>>2&63))])>>>8^t[255&(o^(128|r>>6&15|3&n))])>>>8^t[255&(o^(128|63&r))]):o=(o=(o=o>>>8^t[255&(o^(224|n>>12&15))])>>>8^t[255&(o^(128|n>>6&63))])>>>8^t[255&(o^(128|63&n))];return-1^o}},\"undefined\"==typeof DO_NOT_EXPORT_CRC?n(t):n({})},4739:function(e,t,n){\"use strict\";n.d(t,{Dv:function(){return N},KO:function(){return H},Vv:function(){return k},b9:function(){return B},cn:function(){return R},zt:function(){return Z}});var r=n(9787);const o=Symbol(),i=e=>!!e[o],a=e=>{var t,n;null==(n=(t=e[o]).c)||n.call(t)},l=(e,t)=>{const n=e[o].o,r=t[o].o;return n===r||e===r||i(n)&&l(n,t)},s=e=>{const t={o:e,c:null},n=new Promise((n=>{t.c=()=>{t.c=null,n()},e.then(t.c,t.c)}));return n[o]=t,n};var c=Object.defineProperty,u=Object.defineProperties,d=Object.getOwnPropertyDescriptors,f=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;const g=e=>\"init\"in e,v=\"r\",b=\"w\",y=\"c\",x=\"s\",w=e=>{const t=new WeakMap,n=new WeakMap,r=new Map;let c,w;if(c=new Set,w=new Set,e)for(const[n,r]of e){const e={v:r,r:0,d:new Map};Object.freeze(e),g(n)||console.warn(\"Found initial value for derived atom which can cause unexpected behavior\",n),t.set(n,e)}const k=new WeakMap,E=new WeakMap,S=e=>{let t=E.get(e);return t||(t=new Map,E.set(e,t)),t},j=(e,n)=>{if(e){const t=S(e);let r=t.get(n);return r||(r=j(e.p,n),r&&(\"p\"in r&&r.p.then((()=>t.delete(n))),t.set(n,r))),r}return t.get(n)},_=(e,n,o)=>{if(Object.freeze(o),e){S(e).set(n,o)}else{const e=t.get(n);t.set(n,o),r.has(n)||r.set(n,e)}},O=(e,t=new Map,n)=>{if(!n)return t;const r=new Map;let o=!1;return n.forEach((n=>{var i;const a=(null==(i=j(e,n))?void 0:i.r)||0;r.set(n,a),t.get(n)!==a&&(o=!0)})),t.size!==r.size||o?r:t},C=(e,t,n,r,o)=>{const i=j(e,t);if(i){if(o&&(!(\"p\"in i)||!l(i.p,o)))return i;\"p\"in i&&a(i.p)}const s={v:n,r:(null==i?void 0:i.r)||0,d:O(e,null==i?void 0:i.d,r)};return i&&\"v\"in i&&Object.is(i.v,n)?s.d===i.d||s.d.size===i.d.size&&Array.from(s.d.keys()).every((e=>i.d.has(e)))||Promise.resolve().then((()=>{W(e)})):(++s.r,s.d.has(t)&&(s.d=new Map(s.d).set(t,s.r))),_(e,t,s),s},I=(e,t,n,r,o)=>{const i=j(e,t);if(i){if(o&&(!(\"p\"in i)||!l(i.p,o)))return i;\"p\"in i&&a(i.p)}const s={e:n,r:(null==i?void 0:i.r)||0,d:O(e,null==i?void 0:i.d,r)};return _(e,t,s),s},M=(e,t,n,r)=>{const o=j(e,t);if(o&&\"p\"in o){if(l(o.p,n))return o;a(o.p)}((e,t,n)=>{let r=k.get(t);r||(r=new Map,k.set(t,r)),n.then((()=>{r.get(e)===n&&(r.delete(e),r.size||k.delete(t))})),r.set(e,n)})(e,t,n);const i={p:n,r:(null==o?void 0:o.r)||0,d:O(e,null==o?void 0:o.d,r)};return _(e,t,i),i},T=(e,t,n,r)=>{if(n instanceof Promise){const o=s(n.then((n=>{C(e,t,n,r,o),W(e)})).catch((n=>{if(n instanceof Promise)return i(n)?n.then((()=>{D(e,t,!0)})):n;I(e,t,n,r,o),W(e)})));return M(e,t,o,r)}return C(e,t,n,r)},P=(e,t)=>{const n=j(e,t);if(n){\"p\"in n&&a(n.p);const i=(r=((e,t)=>{for(var n in t||(t={}))p.call(t,n)&&m(e,n,t[n]);if(f)for(var n of f(t))h.call(t,n)&&m(e,n,t[n]);return e})({},n),o={i:n.r},u(r,d(o)));_(e,t,i)}else console.warn(\"[Bug] could not invalidate non existing atom\",t);var r,o},D=(e,t,r)=>{if(!r){const r=j(e,t);if(r){if(r.r!==r.i&&\"p\"in r&&r.p[o].c)return r;if(r.d.forEach(((r,o)=>{if(o!==t)if(n.has(o)){const t=j(e,o);t&&t.r===t.i&&D(e,o)}else D(e,o)})),Array.from(r.d).every((([t,n])=>{const r=j(e,t);return r&&\"v\"in r&&r.r===n})))return r}}const i=new Set;try{const n=t.read((n=>{i.add(n);const r=n===t?j(e,n):D(e,n);if(r){if(\"e\"in r)throw r.e;if(\"p\"in r)throw r.p;return r.v}if(g(n))return n.init;throw new Error(\"no atom init\")}));return T(e,t,n,i)}catch(n){if(n instanceof Promise){const r=s(n);return M(e,t,r,i)}return I(e,t,n,i)}},A=(e,t)=>D(t,e),L=(e,t)=>!t.l.size&&(!t.t.size||1===t.t.size&&t.t.has(e)),Z=(e,t)=>{const r=n.get(t);null==r||r.t.forEach((n=>{n!==t&&(P(e,n),Z(e,n))}))},z=(e,t,n)=>{let r=!0;const o=(t,n)=>{const r=D(e,t);if(\"e\"in r)throw r.e;if(\"p\"in r){if(null==n?void 0:n.unstable_promise)return r.p.then((()=>o(t,n)));throw console.info(\"Reading pending atom state in write operation. We throw a promise for now.\",t),r.p}if(\"v\"in r)return r.v;throw console.warn(\"[Bug] no value found while reading atom in write operation. This is probably a bug.\",t),new Error(\"no value found\")},i=t.write(o,((n,o)=>{let i;if(n===t){if(!g(n))throw new Error(\"atom not writable\");const t=(e=>{const t=new Set,n=k.get(e);return n&&(k.delete(e),n.forEach(((e,n)=>{a(e),t.add(n)}))),t})(n);t.forEach((t=>{t!==e&&T(t,n,o)})),T(e,n,o),Z(e,n)}else i=z(e,n,o);return r||W(e),i}),n);return r=!1,e=void 0,i},R=(e,t,n)=>{const r=z(n,e,t);return W(n),r},N=(e,t)=>{const r={t:new Set(t&&[t]),l:new Set};n.set(e,r),w.add(e);if(D(void 0,e).d.forEach(((t,r)=>{const o=n.get(r);o?o.t.add(e):r!==e&&N(r,e)})),(e=>!!e.write)(e)&&e.onMount){const t=t=>R(e,t),n=e.onMount(t);n&&(r.u=n)}return r},B=e=>{var t;const r=null==(t=n.get(e))?void 0:t.u;r&&r(),n.delete(e),w.delete(e);const o=j(void 0,e);o?o.d.forEach(((t,r)=>{if(r!==e){const t=n.get(r);t&&(t.t.delete(e),L(r,t)&&B(r))}})):console.warn(\"[Bug] could not find atom state to unmount\",e)},H=(e,t,r)=>{const o=new Set(t.d.keys());null==r||r.forEach(((t,r)=>{if(o.has(r))return void o.delete(r);const i=n.get(r);i&&(i.t.delete(e),L(r,i)&&B(r))})),o.forEach((t=>{const r=n.get(t);r?r.t.add(e):n.has(e)&&N(t,e)}))},W=e=>{if(e){S(e).forEach(((r,o)=>{if(r!==t.get(o)){const t=n.get(o);null==t||t.l.forEach((t=>t(e)))}}))}else{for(;r.size;){const e=Array.from(r);r.clear(),e.forEach((([e,t])=>{const r=j(void 0,e);r&&r.d!==(null==t?void 0:t.d)&&H(e,r,null==t?void 0:t.d);const o=n.get(e);null==o||o.l.forEach((e=>e()))}))}c.forEach((e=>e()))}},F=(e,n)=>{n&&(e=>{S(e).forEach(((e,n)=>{const r=t.get(n);(e.r>((null==r?void 0:r.r)||0)||\"v\"in e&&e.r===(null==r?void 0:r.r)&&e.d!==(null==r?void 0:r.d))&&(t.set(n,e),e.d!==(null==r?void 0:r.d)&&H(n,e,null==r?void 0:r.d))}))})(n),W(void 0)},U=(e,t)=>{const r=(e=>{let t=n.get(e);return t||(t=N(e)),t})(e).l;return r.add(t),()=>{r.delete(t),(e=>{const t=n.get(e);t&&L(e,t)&&B(e)})(e)}},K=(e,t)=>{for(const[n,r]of e)g(n)&&(T(t,n,r),Z(t,n));W(t)};return{[v]:A,[b]:R,[y]:F,[x]:U,h:K,n:e=>(c.add(e),()=>{c.delete(e)}),l:()=>w.values(),a:e=>t.get(e),m:e=>n.get(e)}},k=e=>{const t=w(e),n=e=>new Promise(((r,o)=>{const i=t.r(e);\"e\"in i?o(i.e):r(\"p\"in i?i.p.then((()=>n(e))):i.v)}));return{get:e=>{const n=t.r(e);if(\"e\"in n)throw n.e;if(!(\"p\"in n))return n.v},asyncGet:n,set:(e,n)=>t.w(e,n),sub:(e,n)=>t.s(e,n),SECRET_INTERNAL_store:t}},E=(e,t)=>({s:t?t(e).SECRET_INTERNAL_store:w(e)}),S=new Map,j=e=>(S.has(e)||S.set(e,(0,r.createContext)(E())),S.get(e));var _=Object.defineProperty,O=Object.defineProperties,C=Object.getOwnPropertyDescriptors,I=Object.getOwnPropertySymbols,M=Object.prototype.hasOwnProperty,T=Object.prototype.propertyIsEnumerable,P=(e,t,n)=>t in e?_(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,D=(e,t)=>{for(var n in t||(t={}))M.call(t,n)&&P(e,n,t[n]);if(I)for(var n of I(t))T.call(t,n)&&P(e,n,t[n]);return e};const A=e=>e.debugLabel||e.toString(),L=([e,t])=>Object.fromEntries(t.flatMap((t=>{var n,r;const o=null==(n=e.m)?void 0:n.call(e,t);if(!o)return[];const i=o.t,a=(null==(r=e.a)?void 0:r.call(e,t))||{};return[[A(t),(l=D(D(D({},\"e\"in a&&{error:a.e}),\"p\"in a&&{promise:a.p}),\"v\"in a&&{value:a.v}),s={dependents:Array.from(i).map(A)},O(l,C(s)))]];var l,s}))),Z=({children:e,initialValues:t,scope:n,unstable_createStore:o,unstable_enableVersionedWrite:i})=>{const[a,l]=(0,r.useState)();(0,r.useEffect)((()=>{a&&(s.current.s.c(null,a),delete a.p)}),[a]);const s=(0,r.useRef)();s.current||(s.current=E(t,o),i&&(s.current.w=e=>{l((t=>{const n=t?{p:t}:{};return e(n),n}))})),i||(e=>{const{s:t}=e,[n,o]=(0,r.useState)([]);(0,r.useEffect)((()=>{var e;const n=()=>{var e;o(Array.from((null==(e=t.l)?void 0:e.call(t))||[]))},r=null==(e=t.n)?void 0:e.call(t,n);return n(),r}),[t]),(0,r.useDebugValue)([t,n],L)})(s.current);const c=j(n);return(0,r.createElement)(c.Provider,{value:s.current},e)};let z=0;function R(e,t){const n=\"atom\"+ ++z,r={toString:()=>n};return\"function\"==typeof e?r.read=e:(r.init=e,r.read=e=>e(r),r.write=(e,t,n)=>t(r,\"function\"==typeof n?n(e(r)):n)),t&&(r.write=t),r}function N(e,t){const n=j(t),{s:o}=(0,r.useContext)(n),i=(0,r.useCallback)((t=>{const n=o.r(e,t);if(\"e\"in n)throw n.e;if(\"p\"in n)throw n.p;if(\"v\"in n)return n.v;throw new Error(\"no atom value\")}),[o,e]),[[a,l,s],c]=(0,r.useReducer)((0,r.useCallback)(((t,n)=>{const r=i(n);return Object.is(t[1],r)&&t[2]===e?t:[n,r,e]}),[i,e]),void 0,(()=>{const t=void 0;return[t,i(t),e]}));return s!==e&&c(void 0),(0,r.useEffect)((()=>{const t=o.s(e,c);return c(void 0),t}),[o,e]),(0,r.useEffect)((()=>{o.c(e,a)})),(0,r.useDebugValue)(l),l}function B(e,t){const n=j(t),{s:o,w:i}=(0,r.useContext)(n);return(0,r.useCallback)((t=>{if(!(\"write\"in e))throw new Error(\"not writable atom\");const n=n=>o.w(e,t,n);return i?i(n):n()}),[o,i,e])}function H(e,t){return\"scope\"in e&&(console.warn(\"atom.scope is deprecated. Please do useAtom(atom, scope) instead.\"),t=e.scope),[N(e,t),B(e,t)]}},200:function(e,t,n){var r=\"Expected a function\",o=\/^\\s+|\\s+$\/g,i=\/^[-+]0x[0-9a-f]+$\/i,a=\/^0b[01]+$\/i,l=\/^0o[0-7]+$\/i,s=parseInt,c=\"object\"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u=\"object\"==typeof self&&self&&self.Object===Object&&self,d=c||u||Function(\"return this\")(),f=Object.prototype.toString,p=Math.max,h=Math.min,m=function(){return d.Date.now()};function g(e,t,n){var o,i,a,l,s,c,u=0,d=!1,f=!1,g=!0;if(\"function\"!=typeof e)throw new TypeError(r);function y(t){var n=o,r=i;return o=i=void 0,u=t,l=e.apply(r,n)}function x(e){return u=e,s=setTimeout(k,t),d?y(e):l}function w(e){var n=e-c;return void 0===c||n>=t||n<0||f&&e-u>=a}function k(){var e=m();if(w(e))return E(e);s=setTimeout(k,function(e){var n=t-(e-c);return f?h(n,a-(e-u)):n}(e))}function E(e){return s=void 0,g&&o?y(e):(o=i=void 0,l)}function S(){var e=m(),n=w(e);if(o=arguments,i=this,c=e,n){if(void 0===s)return x(c);if(f)return s=setTimeout(k,t),y(c)}return void 0===s&&(s=setTimeout(k,t)),l}return t=b(t)||0,v(n)&&(d=!!n.leading,a=(f=\"maxWait\"in n)?p(b(n.maxWait)||0,t):a,g=\"trailing\"in n?!!n.trailing:g),S.cancel=function(){void 0!==s&&clearTimeout(s),u=0,o=c=i=s=void 0},S.flush=function(){return void 0===s?l:E(m())},S}function v(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function b(e){if(\"number\"==typeof e)return e;if(function(e){return\"symbol\"==typeof e||function(e){return!!e&&\"object\"==typeof e}(e)&&\"[object Symbol]\"==f.call(e)}(e))return NaN;if(v(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=v(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(o,\"\");var n=a.test(e);return n||l.test(e)?s(e.slice(2),n?2:8):i.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,i=!0;if(\"function\"!=typeof e)throw new TypeError(r);return v(n)&&(o=\"leading\"in n?!!n.leading:o,i=\"trailing\"in n?!!n.trailing:i),g(e,t,{leading:o,maxWait:t,trailing:i})}},2744:function(e,t,n){\"use strict\";var r={};(0,n(9187).assign)(r,n(4395),n(578),n(2684)),e.exports=r},4395:function(e,t,n){\"use strict\";var r=n(7651),o=n(9187),i=n(8592),a=n(5604),l=n(249),s=Object.prototype.toString;function c(e){if(!(this instanceof c))return new c(e);this.options=o.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:\"\"},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==n)throw new Error(a[n]);if(t.header&&r.deflateSetHeader(this.strm,t.header),t.dictionary){var u;if(u=\"string\"==typeof t.dictionary?i.string2buf(t.dictionary):\"[object ArrayBuffer]\"===s.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(n=r.deflateSetDictionary(this.strm,u)))throw new Error(a[n]);this._dict_set=!0}}function u(e,t){var n=new c(t);if(n.push(e,!0),n.err)throw n.msg||a[n.err];return n.result}c.prototype.push=function(e,t){var n,a,l=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,\"string\"==typeof e?l.input=i.string2buf(e):\"[object ArrayBuffer]\"===s.call(e)?l.input=new Uint8Array(e):l.input=e,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new o.Buf8(c),l.next_out=0,l.avail_out=c),1!==(n=r.deflate(l,a))&&0!==n)return this.onEnd(n),this.ended=!0,!1;0!==l.avail_out&&(0!==l.avail_in||4!==a&&2!==a)||(\"string\"===this.options.to?this.onData(i.buf2binstring(o.shrinkBuf(l.output,l.next_out))):this.onData(o.shrinkBuf(l.output,l.next_out)))}while((l.avail_in>0||0===l.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==a||(this.onEnd(0),l.avail_out=0,!0)},c.prototype.onData=function(e){this.chunks.push(e)},c.prototype.onEnd=function(e){0===e&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Deflate=c,t.deflate=u,t.deflateRaw=function(e,t){return(t=t||{}).raw=!0,u(e,t)},t.gzip=function(e,t){return(t=t||{}).gzip=!0,u(e,t)}},578:function(e,t,n){\"use strict\";var r=n(7823),o=n(9187),i=n(8592),a=n(2684),l=n(5604),s=n(249),c=n(9968),u=Object.prototype.toString;function d(e){if(!(this instanceof d))return new d(e);this.options=o.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,t.windowBits);if(n!==a.Z_OK)throw new Error(l[n]);if(this.header=new c,r.inflateGetHeader(this.strm,this.header),t.dictionary&&(\"string\"==typeof t.dictionary?t.dictionary=i.string2buf(t.dictionary):\"[object ArrayBuffer]\"===u.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=r.inflateSetDictionary(this.strm,t.dictionary))!==a.Z_OK))throw new Error(l[n])}function f(e,t){var n=new d(t);if(n.push(e,!0),n.err)throw n.msg||l[n.err];return n.result}d.prototype.push=function(e,t){var n,l,s,c,d,f=this.strm,p=this.options.chunkSize,h=this.options.dictionary,m=!1;if(this.ended)return!1;l=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,\"string\"==typeof e?f.input=i.binstring2buf(e):\"[object ArrayBuffer]\"===u.call(e)?f.input=new Uint8Array(e):f.input=e,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new o.Buf8(p),f.next_out=0,f.avail_out=p),(n=r.inflate(f,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&h&&(n=r.inflateSetDictionary(this.strm,h)),n===a.Z_BUF_ERROR&&!0===m&&(n=a.Z_OK,m=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),this.ended=!0,!1;f.next_out&&(0!==f.avail_out&&n!==a.Z_STREAM_END&&(0!==f.avail_in||l!==a.Z_FINISH&&l!==a.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(s=i.utf8border(f.output,f.next_out),c=f.next_out-s,d=i.buf2string(f.output,s),f.next_out=c,f.avail_out=p-c,c&&o.arraySet(f.output,f.output,s,c,0),this.onData(d)):this.onData(o.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(m=!0)}while((f.avail_in>0||0===f.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(l=a.Z_FINISH),l===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):l!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),f.avail_out=0,!0)},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===a.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Inflate=d,t.inflate=f,t.inflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},t.ungzip=f},9187:function(e,t){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if(\"object\"!=typeof n)throw new TypeError(n+\"must be non-object\");for(var o in n)r(n,o)&&(e[o]=n[o])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var o={arraySet:function(e,t,n,r,o){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+r),o);else for(var i=0;i<r;i++)e[o+i]=t[n+i]},flattenChunks:function(e){var t,n,r,o,i,a;for(r=0,t=0,n=e.length;t<n;t++)r+=e[t].length;for(a=new Uint8Array(r),o=0,t=0,n=e.length;t<n;t++)i=e[t],a.set(i,o),o+=i.length;return a}},i={arraySet:function(e,t,n,r,o){for(var i=0;i<r;i++)e[o+i]=t[n+i]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,o)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,i))},t.setTyped(n)},8592:function(e,t,n){\"use strict\";var r=n(9187),o=!0,i=!0;try{String.fromCharCode.apply(null,[0])}catch(e){o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){i=!1}for(var a=new r.Buf8(256),l=0;l<256;l++)a[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;function s(e,t){if(t<65534&&(e.subarray&&i||!e.subarray&&o))return String.fromCharCode.apply(null,r.shrinkBuf(e,t));for(var n=\"\",a=0;a<t;a++)n+=String.fromCharCode(e[a]);return n}a[254]=a[254]=1,t.string2buf=function(e){var t,n,o,i,a,l=e.length,s=0;for(i=0;i<l;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<l&&56320==(64512&(o=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(o-56320),i++),s+=n<128?1:n<2048?2:n<65536?3:4;for(t=new r.Buf8(s),a=0,i=0;a<s;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<l&&56320==(64512&(o=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(o-56320),i++),n<128?t[a++]=n:n<2048?(t[a++]=192|n>>>6,t[a++]=128|63&n):n<65536?(t[a++]=224|n>>>12,t[a++]=128|n>>>6&63,t[a++]=128|63&n):(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63,t[a++]=128|n>>>6&63,t[a++]=128|63&n);return t},t.buf2binstring=function(e){return s(e,e.length)},t.binstring2buf=function(e){for(var t=new r.Buf8(e.length),n=0,o=t.length;n<o;n++)t[n]=e.charCodeAt(n);return t},t.buf2string=function(e,t){var n,r,o,i,l=t||e.length,c=new Array(2*l);for(r=0,n=0;n<l;)if((o=e[n++])<128)c[r++]=o;else if((i=a[o])>4)c[r++]=65533,n+=i-1;else{for(o&=2===i?31:3===i?15:7;i>1&&n<l;)o=o<<6|63&e[n++],i--;i>1?c[r++]=65533:o<65536?c[r++]=o:(o-=65536,c[r++]=55296|o>>10&1023,c[r++]=56320|1023&o)}return s(c,r)},t.utf8border=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+a[e[n]]>t?n:t}},3693:function(e){\"use strict\";e.exports=function(e,t,n,r){for(var o=65535&e|0,i=e>>>16&65535|0,a=0;0!==n;){n-=a=n>2e3?2e3:n;do{i=i+(o=o+t[r++]|0)|0}while(--a);o%=65521,i%=65521}return o|i<<16|0}},2684:function(e){\"use strict\";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},8464:function(e){\"use strict\";var t=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();e.exports=function(e,n,r,o){var i=t,a=o+r;e^=-1;for(var l=o;l<a;l++)e=e>>>8^i[255&(e^n[l])];return-1^e}},7651:function(e,t,n){\"use strict\";var r,o=n(9187),i=n(8676),a=n(3693),l=n(8464),s=n(5604),c=-2,u=258,d=262,f=103,p=113,h=666;function m(e,t){return e.msg=s[t],t}function g(e){return(e<<1)-(e>4?9:0)}function v(e){for(var t=e.length;--t>=0;)e[t]=0}function b(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(o.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function y(e,t){i._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,b(e.strm)}function x(e,t){e.pending_buf[e.pending++]=t}function w(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function k(e,t){var n,r,o=e.max_chain_length,i=e.strstart,a=e.prev_length,l=e.nice_match,s=e.strstart>e.w_size-d?e.strstart-(e.w_size-d):0,c=e.window,f=e.w_mask,p=e.prev,h=e.strstart+u,m=c[i+a-1],g=c[i+a];e.prev_length>=e.good_match&&(o>>=2),l>e.lookahead&&(l=e.lookahead);do{if(c[(n=t)+a]===g&&c[n+a-1]===m&&c[n]===c[i]&&c[++n]===c[i+1]){i+=2,n++;do{}while(c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&i<h);if(r=u-(h-i),i=h-u,r>a){if(e.match_start=t,a=r,r>=l)break;m=c[i+a-1],g=c[i+a]}}}while((t=p[t&f])>s&&0!=--o);return a<=e.lookahead?a:e.lookahead}function E(e){var t,n,r,i,s,c,u,f,p,h,m=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=m+(m-d)){o.arraySet(e.window,e.window,m,m,0),e.match_start-=m,e.strstart-=m,e.block_start-=m,t=n=e.hash_size;do{r=e.head[--t],e.head[t]=r>=m?r-m:0}while(--n);t=n=m;do{r=e.prev[--t],e.prev[t]=r>=m?r-m:0}while(--n);i+=m}if(0===e.strm.avail_in)break;if(c=e.strm,u=e.window,f=e.strstart+e.lookahead,p=i,h=void 0,(h=c.avail_in)>p&&(h=p),n=0===h?0:(c.avail_in-=h,o.arraySet(u,c.input,c.next_in,h,f),1===c.state.wrap?c.adler=a(c.adler,u,h,f):2===c.state.wrap&&(c.adler=l(c.adler,u,h,f)),c.next_in+=h,c.total_in+=h,h),e.lookahead+=n,e.lookahead+e.insert>=3)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+3-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<d&&0!==e.strm.avail_in)}function S(e,t){for(var n,r;;){if(e.lookahead<d){if(E(e),e.lookahead<d&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-d&&(e.match_length=k(e,n)),e.match_length>=3)if(r=i._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else r=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(r&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}function j(e,t){for(var n,r,o;;){if(e.lookahead<d){if(E(e),e.lookahead<d&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-d&&(e.match_length=k(e,n),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){o=e.strstart+e.lookahead-3,r=i._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=o&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,r&&(y(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((r=i._tr_tally(e,0,e.window[e.strstart-1]))&&y(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(r=i._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}function _(e,t,n,r,o){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=o}function O(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(1146),this.dyn_dtree=new o.Buf16(122),this.bl_tree=new o.Buf16(78),v(this.dyn_ltree),v(this.dyn_dtree),v(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(16),this.heap=new o.Buf16(573),v(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(573),v(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function C(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:p,e.adler=2===t.wrap?0:1,t.last_flush=0,i._tr_init(t),0):m(e,c)}function I(e){var t,n=C(e);return 0===n&&((t=e.state).window_size=2*t.w_size,v(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0),n}function M(e,t,n,r,i,a){if(!e)return c;var l=1;if(-1===t&&(t=6),r<0?(l=0,r=-r):r>15&&(l=2,r-=16),i<1||i>9||8!==n||r<8||r>15||t<0||t>9||a<0||a>4)return m(e,c);8===r&&(r=9);var s=new O;return e.state=s,s.strm=e,s.wrap=l,s.gzhead=null,s.w_bits=r,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=i+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+3-1)\/3),s.window=new o.Buf8(2*s.w_size),s.head=new o.Buf16(s.hash_size),s.prev=new o.Buf16(s.w_size),s.lit_bufsize=1<<i+6,s.pending_buf_size=4*s.lit_bufsize,s.pending_buf=new o.Buf8(s.pending_buf_size),s.d_buf=1*s.lit_bufsize,s.l_buf=3*s.lit_bufsize,s.level=t,s.strategy=a,s.method=n,I(e)}r=[new _(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(E(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var r=e.block_start+n;if((0===e.strstart||e.strstart>=r)&&(e.lookahead=e.strstart-r,e.strstart=r,y(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-d&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(y(e,!1),e.strm.avail_out),1)})),new _(4,4,8,4,S),new _(4,5,16,8,S),new _(4,6,32,32,S),new _(4,4,16,16,j),new _(8,16,32,32,j),new _(8,16,128,128,j),new _(8,32,128,256,j),new _(32,128,258,1024,j),new _(32,258,258,4096,j)],t.deflateInit=function(e,t){return M(e,t,8,15,8,0)},t.deflateInit2=M,t.deflateReset=I,t.deflateResetKeep=C,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?c:(e.state.gzhead=t,0):c},t.deflate=function(e,t){var n,o,a,s;if(!e||!e.state||t>5||t<0)return e?m(e,c):c;if(o=e.state,!e.output||!e.input&&0!==e.avail_in||o.status===h&&4!==t)return m(e,0===e.avail_out?-5:c);if(o.strm=e,n=o.last_flush,o.last_flush=t,42===o.status)if(2===o.wrap)e.adler=0,x(o,31),x(o,139),x(o,8),o.gzhead?(x(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),x(o,255&o.gzhead.time),x(o,o.gzhead.time>>8&255),x(o,o.gzhead.time>>16&255),x(o,o.gzhead.time>>24&255),x(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),x(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(x(o,255&o.gzhead.extra.length),x(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(e.adler=l(e.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=69):(x(o,0),x(o,0),x(o,0),x(o,0),x(o,0),x(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),x(o,3),o.status=p);else{var d=8+(o.w_bits-8<<4)<<8;d|=(o.strategy>=2||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(d|=32),d+=31-d%31,o.status=p,w(o,d),0!==o.strstart&&(w(o,e.adler>>>16),w(o,65535&e.adler)),e.adler=1}if(69===o.status)if(o.gzhead.extra){for(a=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),b(e),a=o.pending,o.pending!==o.pending_buf_size));)x(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=73)}else o.status=73;if(73===o.status)if(o.gzhead.name){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),b(e),a=o.pending,o.pending===o.pending_buf_size)){s=1;break}s=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,x(o,s)}while(0!==s);o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),0===s&&(o.gzindex=0,o.status=91)}else o.status=91;if(91===o.status)if(o.gzhead.comment){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),b(e),a=o.pending,o.pending===o.pending_buf_size)){s=1;break}s=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,x(o,s)}while(0!==s);o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),0===s&&(o.status=f)}else o.status=f;if(o.status===f&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&b(e),o.pending+2<=o.pending_buf_size&&(x(o,255&e.adler),x(o,e.adler>>8&255),e.adler=0,o.status=p)):o.status=p),0!==o.pending){if(b(e),0===e.avail_out)return o.last_flush=-1,0}else if(0===e.avail_in&&g(t)<=g(n)&&4!==t)return m(e,-5);if(o.status===h&&0!==e.avail_in)return m(e,-5);if(0!==e.avail_in||0!==o.lookahead||0!==t&&o.status!==h){var k=2===o.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(E(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}(o,t):3===o.strategy?function(e,t){for(var n,r,o,a,l=e.window;;){if(e.lookahead<=u){if(E(e),e.lookahead<=u&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(r=l[o=e.strstart-1])===l[++o]&&r===l[++o]&&r===l[++o]){a=e.strstart+u;do{}while(r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&o<a);e.match_length=u-(a-o),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=i._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}(o,t):r[o.level].func(o,t);if(3!==k&&4!==k||(o.status=h),1===k||3===k)return 0===e.avail_out&&(o.last_flush=-1),0;if(2===k&&(1===t?i._tr_align(o):5!==t&&(i._tr_stored_block(o,0,0,!1),3===t&&(v(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),b(e),0===e.avail_out))return o.last_flush=-1,0}return 4!==t?0:o.wrap<=0?1:(2===o.wrap?(x(o,255&e.adler),x(o,e.adler>>8&255),x(o,e.adler>>16&255),x(o,e.adler>>24&255),x(o,255&e.total_in),x(o,e.total_in>>8&255),x(o,e.total_in>>16&255),x(o,e.total_in>>24&255)):(w(o,e.adler>>>16),w(o,65535&e.adler)),b(e),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?0:1)},t.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&t!==f&&t!==p&&t!==h?m(e,c):(e.state=null,t===p?m(e,-3):0):c},t.deflateSetDictionary=function(e,t){var n,r,i,l,s,u,d,f,p=t.length;if(!e||!e.state)return c;if(2===(l=(n=e.state).wrap)||1===l&&42!==n.status||n.lookahead)return c;for(1===l&&(e.adler=a(e.adler,t,p,0)),n.wrap=0,p>=n.w_size&&(0===l&&(v(n.head),n.strstart=0,n.block_start=0,n.insert=0),f=new o.Buf8(n.w_size),o.arraySet(f,t,p-n.w_size,n.w_size,0),t=f,p=n.w_size),s=e.avail_in,u=e.next_in,d=e.input,e.avail_in=p,e.next_in=0,e.input=t,E(n);n.lookahead>=3;){r=n.strstart,i=n.lookahead-2;do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+3-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++}while(--i);n.strstart=r,n.lookahead=2,E(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=u,e.input=d,e.avail_in=s,n.wrap=l,0},t.deflateInfo=\"pako deflate (from Nodeca project)\"},9968:function(e){\"use strict\";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},9365:function(e){\"use strict\";e.exports=function(e,t){var n,r,o,i,a,l,s,c,u,d,f,p,h,m,g,v,b,y,x,w,k,E,S,j,_;n=e.state,r=e.next_in,j=e.input,o=r+(e.avail_in-5),i=e.next_out,_=e.output,a=i-(t-e.avail_out),l=i+(e.avail_out-257),s=n.dmax,c=n.wsize,u=n.whave,d=n.wnext,f=n.window,p=n.hold,h=n.bits,m=n.lencode,g=n.distcode,v=(1<<n.lenbits)-1,b=(1<<n.distbits)-1;e:do{h<15&&(p+=j[r++]<<h,h+=8,p+=j[r++]<<h,h+=8),y=m[p&v];t:for(;;){if(p>>>=x=y>>>24,h-=x,0===(x=y>>>16&255))_[i++]=65535&y;else{if(!(16&x)){if(0==(64&x)){y=m[(65535&y)+(p&(1<<x)-1)];continue t}if(32&x){n.mode=12;break e}e.msg=\"invalid literal\/length code\",n.mode=30;break e}w=65535&y,(x&=15)&&(h<x&&(p+=j[r++]<<h,h+=8),w+=p&(1<<x)-1,p>>>=x,h-=x),h<15&&(p+=j[r++]<<h,h+=8,p+=j[r++]<<h,h+=8),y=g[p&b];n:for(;;){if(p>>>=x=y>>>24,h-=x,!(16&(x=y>>>16&255))){if(0==(64&x)){y=g[(65535&y)+(p&(1<<x)-1)];continue n}e.msg=\"invalid distance code\",n.mode=30;break e}if(k=65535&y,h<(x&=15)&&(p+=j[r++]<<h,(h+=8)<x&&(p+=j[r++]<<h,h+=8)),(k+=p&(1<<x)-1)>s){e.msg=\"invalid distance too far back\",n.mode=30;break e}if(p>>>=x,h-=x,k>(x=i-a)){if((x=k-x)>u&&n.sane){e.msg=\"invalid distance too far back\",n.mode=30;break e}if(E=0,S=f,0===d){if(E+=c-x,x<w){w-=x;do{_[i++]=f[E++]}while(--x);E=i-k,S=_}}else if(d<x){if(E+=c+d-x,(x-=d)<w){w-=x;do{_[i++]=f[E++]}while(--x);if(E=0,d<w){w-=x=d;do{_[i++]=f[E++]}while(--x);E=i-k,S=_}}}else if(E+=d-x,x<w){w-=x;do{_[i++]=f[E++]}while(--x);E=i-k,S=_}for(;w>2;)_[i++]=S[E++],_[i++]=S[E++],_[i++]=S[E++],w-=3;w&&(_[i++]=S[E++],w>1&&(_[i++]=S[E++]))}else{E=i-k;do{_[i++]=_[E++],_[i++]=_[E++],_[i++]=_[E++],w-=3}while(w>2);w&&(_[i++]=_[E++],w>1&&(_[i++]=_[E++]))}break}}break}}while(r<o&&i<l);r-=w=h>>3,p&=(1<<(h-=w<<3))-1,e.next_in=r,e.next_out=i,e.avail_in=r<o?o-r+5:5-(r-o),e.avail_out=i<l?l-i+257:257-(i-l),n.hold=p,n.bits=h}},7823:function(e,t,n){\"use strict\";var r=n(9187),o=n(3693),i=n(8464),a=n(9365),l=n(6446),s=-2,c=12,u=30;function d(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function p(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new r.Buf32(852),t.distcode=t.distdyn=new r.Buf32(592),t.sane=1,t.back=-1,0):s}function h(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,p(e)):s}function m(e,t){var n,r;return e&&e.state?(r=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?s:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,h(e))):s}function g(e,t){var n,r;return e?(r=new f,e.state=r,r.window=null,0!==(n=m(e,t))&&(e.state=null),n):s}var v,b,y=!0;function x(e){if(y){var t;for(v=new r.Buf32(512),b=new r.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(l(1,e.lens,0,288,v,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;l(2,e.lens,0,32,b,0,e.work,{bits:5}),y=!1}e.lencode=v,e.lenbits=9,e.distcode=b,e.distbits=5}function w(e,t,n,o){var i,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),o>=a.wsize?(r.arraySet(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((i=a.wsize-a.wnext)>o&&(i=o),r.arraySet(a.window,t,n-o,i,a.wnext),(o-=i)?(r.arraySet(a.window,t,n-o,o,0),a.wnext=o,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}t.inflateReset=h,t.inflateReset2=m,t.inflateResetKeep=p,t.inflateInit=function(e){return g(e,15)},t.inflateInit2=g,t.inflate=function(e,t){var n,f,p,h,m,g,v,b,y,k,E,S,j,_,O,C,I,M,T,P,D,A,L,Z,z=0,R=new r.Buf8(4),N=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return s;(n=e.state).mode===c&&(n.mode=13),m=e.next_out,p=e.output,v=e.avail_out,h=e.next_in,f=e.input,g=e.avail_in,b=n.hold,y=n.bits,k=g,E=v,A=0;e:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(2&n.wrap&&35615===b){n.check=0,R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0),b=0,y=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&b)<<8)+(b>>8))%31){e.msg=\"incorrect header check\",n.mode=u;break}if(8!=(15&b)){e.msg=\"unknown compression method\",n.mode=u;break}if(y-=4,D=8+(15&(b>>>=4)),0===n.wbits)n.wbits=D;else if(D>n.wbits){e.msg=\"invalid window size\",n.mode=u;break}n.dmax=1<<D,e.adler=n.check=1,n.mode=512&b?10:c,b=0,y=0;break;case 2:for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(n.flags=b,8!=(255&n.flags)){e.msg=\"unknown compression method\",n.mode=u;break}if(57344&n.flags){e.msg=\"unknown header flags set\",n.mode=u;break}n.head&&(n.head.text=b>>8&1),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0)),b=0,y=0,n.mode=3;case 3:for(;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.head&&(n.head.time=b),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,R[2]=b>>>16&255,R[3]=b>>>24&255,n.check=i(n.check,R,4,0)),b=0,y=0,n.mode=4;case 4:for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.head&&(n.head.xflags=255&b,n.head.os=b>>8),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0)),b=0,y=0,n.mode=5;case 5:if(1024&n.flags){for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.length=b,n.head&&(n.head.extra_len=b),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0)),b=0,y=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&((S=n.length)>g&&(S=g),S&&(n.head&&(D=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,f,h,S,D)),512&n.flags&&(n.check=i(n.check,f,S,h)),g-=S,h+=S,n.length-=S),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===g)break e;S=0;do{D=f[h+S++],n.head&&D&&n.length<65536&&(n.head.name+=String.fromCharCode(D))}while(D&&S<g);if(512&n.flags&&(n.check=i(n.check,f,S,h)),g-=S,h+=S,D)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===g)break e;S=0;do{D=f[h+S++],n.head&&D&&n.length<65536&&(n.head.comment+=String.fromCharCode(D))}while(D&&S<g);if(512&n.flags&&(n.check=i(n.check,f,S,h)),g-=S,h+=S,D)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(b!==(65535&n.check)){e.msg=\"header crc mismatch\",n.mode=u;break}b=0,y=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=c;break;case 10:for(;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}e.adler=n.check=d(b),b=0,y=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=m,e.avail_out=v,e.next_in=h,e.avail_in=g,n.hold=b,n.bits=y,2;e.adler=n.check=1,n.mode=c;case c:if(5===t||6===t)break e;case 13:if(n.last){b>>>=7&y,y-=7&y,n.mode=27;break}for(;y<3;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}switch(n.last=1&b,y-=1,3&(b>>>=1)){case 0:n.mode=14;break;case 1:if(x(n),n.mode=20,6===t){b>>>=2,y-=2;break e}break;case 2:n.mode=17;break;case 3:e.msg=\"invalid block type\",n.mode=u}b>>>=2,y-=2;break;case 14:for(b>>>=7&y,y-=7&y;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if((65535&b)!=(b>>>16^65535)){e.msg=\"invalid stored block lengths\",n.mode=u;break}if(n.length=65535&b,b=0,y=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(S=n.length){if(S>g&&(S=g),S>v&&(S=v),0===S)break e;r.arraySet(p,f,h,S,m),g-=S,h+=S,v-=S,m+=S,n.length-=S;break}n.mode=c;break;case 17:for(;y<14;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(n.nlen=257+(31&b),b>>>=5,y-=5,n.ndist=1+(31&b),b>>>=5,y-=5,n.ncode=4+(15&b),b>>>=4,y-=4,n.nlen>286||n.ndist>30){e.msg=\"too many length or distance symbols\",n.mode=u;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;y<3;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.lens[N[n.have++]]=7&b,b>>>=3,y-=3}for(;n.have<19;)n.lens[N[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,L={bits:n.lenbits},A=l(0,n.lens,0,19,n.lencode,0,n.work,L),n.lenbits=L.bits,A){e.msg=\"invalid code lengths set\",n.mode=u;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;C=(z=n.lencode[b&(1<<n.lenbits)-1])>>>16&255,I=65535&z,!((O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(I<16)b>>>=O,y-=O,n.lens[n.have++]=I;else{if(16===I){for(Z=O+2;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(b>>>=O,y-=O,0===n.have){e.msg=\"invalid bit length repeat\",n.mode=u;break}D=n.lens[n.have-1],S=3+(3&b),b>>>=2,y-=2}else if(17===I){for(Z=O+3;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}y-=O,D=0,S=3+(7&(b>>>=O)),b>>>=3,y-=3}else{for(Z=O+7;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}y-=O,D=0,S=11+(127&(b>>>=O)),b>>>=7,y-=7}if(n.have+S>n.nlen+n.ndist){e.msg=\"invalid bit length repeat\",n.mode=u;break}for(;S--;)n.lens[n.have++]=D}}if(n.mode===u)break;if(0===n.lens[256]){e.msg=\"invalid code -- missing end-of-block\",n.mode=u;break}if(n.lenbits=9,L={bits:n.lenbits},A=l(1,n.lens,0,n.nlen,n.lencode,0,n.work,L),n.lenbits=L.bits,A){e.msg=\"invalid literal\/lengths set\",n.mode=u;break}if(n.distbits=6,n.distcode=n.distdyn,L={bits:n.distbits},A=l(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,L),n.distbits=L.bits,A){e.msg=\"invalid distances set\",n.mode=u;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(g>=6&&v>=258){e.next_out=m,e.avail_out=v,e.next_in=h,e.avail_in=g,n.hold=b,n.bits=y,a(e,E),m=e.next_out,p=e.output,v=e.avail_out,h=e.next_in,f=e.input,g=e.avail_in,b=n.hold,y=n.bits,n.mode===c&&(n.back=-1);break}for(n.back=0;C=(z=n.lencode[b&(1<<n.lenbits)-1])>>>16&255,I=65535&z,!((O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(C&&0==(240&C)){for(M=O,T=C,P=I;C=(z=n.lencode[P+((b&(1<<M+T)-1)>>M)])>>>16&255,I=65535&z,!(M+(O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}b>>>=M,y-=M,n.back+=M}if(b>>>=O,y-=O,n.back+=O,n.length=I,0===C){n.mode=26;break}if(32&C){n.back=-1,n.mode=c;break}if(64&C){e.msg=\"invalid literal\/length code\",n.mode=u;break}n.extra=15&C,n.mode=22;case 22:if(n.extra){for(Z=n.extra;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.length+=b&(1<<n.extra)-1,b>>>=n.extra,y-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;C=(z=n.distcode[b&(1<<n.distbits)-1])>>>16&255,I=65535&z,!((O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(0==(240&C)){for(M=O,T=C,P=I;C=(z=n.distcode[P+((b&(1<<M+T)-1)>>M)])>>>16&255,I=65535&z,!(M+(O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}b>>>=M,y-=M,n.back+=M}if(b>>>=O,y-=O,n.back+=O,64&C){e.msg=\"invalid distance code\",n.mode=u;break}n.offset=I,n.extra=15&C,n.mode=24;case 24:if(n.extra){for(Z=n.extra;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.offset+=b&(1<<n.extra)-1,b>>>=n.extra,y-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg=\"invalid distance too far back\",n.mode=u;break}n.mode=25;case 25:if(0===v)break e;if(S=E-v,n.offset>S){if((S=n.offset-S)>n.whave&&n.sane){e.msg=\"invalid distance too far back\",n.mode=u;break}S>n.wnext?(S-=n.wnext,j=n.wsize-S):j=n.wnext-S,S>n.length&&(S=n.length),_=n.window}else _=p,j=m-n.offset,S=n.length;S>v&&(S=v),v-=S,n.length-=S;do{p[m++]=_[j++]}while(--S);0===n.length&&(n.mode=21);break;case 26:if(0===v)break e;p[m++]=n.length,v--,n.mode=21;break;case 27:if(n.wrap){for(;y<32;){if(0===g)break e;g--,b|=f[h++]<<y,y+=8}if(E-=v,e.total_out+=E,n.total+=E,E&&(e.adler=n.check=n.flags?i(n.check,p,E,m-E):o(n.check,p,E,m-E)),E=v,(n.flags?b:d(b))!==n.check){e.msg=\"incorrect data check\",n.mode=u;break}b=0,y=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(b!==(4294967295&n.total)){e.msg=\"incorrect length check\",n.mode=u;break}b=0,y=0}n.mode=29;case 29:A=1;break e;case u:A=-3;break e;case 31:return-4;default:return s}return e.next_out=m,e.avail_out=v,e.next_in=h,e.avail_in=g,n.hold=b,n.bits=y,(n.wsize||E!==e.avail_out&&n.mode<u&&(n.mode<27||4!==t))&&w(e,e.output,e.next_out,E-e.avail_out)?(n.mode=31,-4):(k-=e.avail_in,E-=e.avail_out,e.total_in+=k,e.total_out+=E,n.total+=E,n.wrap&&E&&(e.adler=n.check=n.flags?i(n.check,p,E,e.next_out-E):o(n.check,p,E,e.next_out-E)),e.data_type=n.bits+(n.last?64:0)+(n.mode===c?128:0)+(20===n.mode||15===n.mode?256:0),(0===k&&0===E||4===t)&&0===A&&(A=-5),A)},t.inflateEnd=function(e){if(!e||!e.state)return s;var t=e.state;return t.window&&(t.window=null),e.state=null,0},t.inflateGetHeader=function(e,t){var n;return e&&e.state?0==(2&(n=e.state).wrap)?s:(n.head=t,t.done=!1,0):s},t.inflateSetDictionary=function(e,t){var n,r=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?s:11===n.mode&&o(1,t,r,0)!==n.check?-3:w(e,t,r,r)?(n.mode=31,-4):(n.havedict=1,0):s},t.inflateInfo=\"pako inflate (from Nodeca project)\"},6446:function(e,t,n){\"use strict\";var r=n(9187),o=15,i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],l=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,n,c,u,d,f,p){var h,m,g,v,b,y,x,w,k,E=p.bits,S=0,j=0,_=0,O=0,C=0,I=0,M=0,T=0,P=0,D=0,A=null,L=0,Z=new r.Buf16(16),z=new r.Buf16(16),R=null,N=0;for(S=0;S<=o;S++)Z[S]=0;for(j=0;j<c;j++)Z[t[n+j]]++;for(C=E,O=o;O>=1&&0===Z[O];O--);if(C>O&&(C=O),0===O)return u[d++]=20971520,u[d++]=20971520,p.bits=1,0;for(_=1;_<O&&0===Z[_];_++);for(C<_&&(C=_),T=1,S=1;S<=o;S++)if(T<<=1,(T-=Z[S])<0)return-1;if(T>0&&(0===e||1!==O))return-1;for(z[1]=0,S=1;S<o;S++)z[S+1]=z[S]+Z[S];for(j=0;j<c;j++)0!==t[n+j]&&(f[z[t[n+j]]++]=j);if(0===e?(A=R=f,y=19):1===e?(A=i,L-=257,R=a,N-=257,y=256):(A=l,R=s,y=-1),D=0,j=0,S=_,b=d,I=C,M=0,g=-1,v=(P=1<<C)-1,1===e&&P>852||2===e&&P>592)return 1;for(;;){x=S-M,f[j]<y?(w=0,k=f[j]):f[j]>y?(w=R[N+f[j]],k=A[L+f[j]]):(w=96,k=0),h=1<<S-M,_=m=1<<I;do{u[b+(D>>M)+(m-=h)]=x<<24|w<<16|k|0}while(0!==m);for(h=1<<S-1;D&h;)h>>=1;if(0!==h?(D&=h-1,D+=h):D=0,j++,0==--Z[S]){if(S===O)break;S=t[n+f[j]]}if(S>C&&(D&v)!==g){for(0===M&&(M=C),b+=_,T=1<<(I=S-M);I+M<O&&!((T-=Z[I+M])<=0);)I++,T<<=1;if(P+=1<<I,1===e&&P>852||2===e&&P>592)return 1;u[g=D&v]=C<<24|I<<16|b-d|0}}return 0!==D&&(u[b+D]=S-M<<24|64<<16|0),p.bits=C,0}},5604:function(e){\"use strict\";e.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},8676:function(e,t,n){\"use strict\";var r=n(9187);function o(e){for(var t=e.length;--t>=0;)e[t]=0}var i=256,a=286,l=30,s=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],u=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],d=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],p=new Array(576);o(p);var h=new Array(60);o(h);var m=new Array(512);o(m);var g=new Array(256);o(g);var v=new Array(29);o(v);var b,y,x,w=new Array(l);function k(e,t,n,r,o){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=o,this.has_stree=e&&e.length}function E(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function S(e){return e<256?m[e]:m[256+(e>>>7)]}function j(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function _(e,t,n){e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,j(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function O(e,t,n){_(e,n[2*t],n[2*t+1])}function C(e,t){var n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}function I(e,t,n){var r,o,i=new Array(16),a=0;for(r=1;r<=s;r++)i[r]=a=a+n[r-1]<<1;for(o=0;o<=t;o++){var l=e[2*o+1];0!==l&&(e[2*o]=C(i[l]++,l))}}function M(e){var t;for(t=0;t<a;t++)e.dyn_ltree[2*t]=0;for(t=0;t<l;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function T(e){e.bi_valid>8?j(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function P(e,t,n,r){var o=2*t,i=2*n;return e[o]<e[i]||e[o]===e[i]&&r[t]<=r[n]}function D(e,t,n){for(var r=e.heap[n],o=n<<1;o<=e.heap_len&&(o<e.heap_len&&P(t,e.heap[o+1],e.heap[o],e.depth)&&o++,!P(t,r,e.heap[o],e.depth));)e.heap[n]=e.heap[o],n=o,o<<=1;e.heap[n]=r}function A(e,t,n){var r,o,a,l,s=0;if(0!==e.last_lit)do{r=e.pending_buf[e.d_buf+2*s]<<8|e.pending_buf[e.d_buf+2*s+1],o=e.pending_buf[e.l_buf+s],s++,0===r?O(e,o,t):(O(e,(a=g[o])+i+1,t),0!==(l=c[a])&&_(e,o-=v[a],l),O(e,a=S(--r),n),0!==(l=u[a])&&_(e,r-=w[a],l))}while(s<e.last_lit);O(e,256,t)}function L(e,t){var n,r,o,i=t.dyn_tree,a=t.stat_desc.static_tree,l=t.stat_desc.has_stree,c=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<c;n++)0!==i[2*n]?(e.heap[++e.heap_len]=u=n,e.depth[n]=0):i[2*n+1]=0;for(;e.heap_len<2;)i[2*(o=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[o]=0,e.opt_len--,l&&(e.static_len-=a[2*o+1]);for(t.max_code=u,n=e.heap_len>>1;n>=1;n--)D(e,i,n);o=c;do{n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],D(e,i,1),r=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=r,i[2*o]=i[2*n]+i[2*r],e.depth[o]=(e.depth[n]>=e.depth[r]?e.depth[n]:e.depth[r])+1,i[2*n+1]=i[2*r+1]=o,e.heap[1]=o++,D(e,i,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,r,o,i,a,l,c=t.dyn_tree,u=t.max_code,d=t.stat_desc.static_tree,f=t.stat_desc.has_stree,p=t.stat_desc.extra_bits,h=t.stat_desc.extra_base,m=t.stat_desc.max_length,g=0;for(i=0;i<=s;i++)e.bl_count[i]=0;for(c[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)(i=c[2*c[2*(r=e.heap[n])+1]+1]+1)>m&&(i=m,g++),c[2*r+1]=i,r>u||(e.bl_count[i]++,a=0,r>=h&&(a=p[r-h]),l=c[2*r],e.opt_len+=l*(i+a),f&&(e.static_len+=l*(d[2*r+1]+a)));if(0!==g){do{for(i=m-1;0===e.bl_count[i];)i--;e.bl_count[i]--,e.bl_count[i+1]+=2,e.bl_count[m]--,g-=2}while(g>0);for(i=m;0!==i;i--)for(r=e.bl_count[i];0!==r;)(o=e.heap[--n])>u||(c[2*o+1]!==i&&(e.opt_len+=(i-c[2*o+1])*c[2*o],c[2*o+1]=i),r--)}}(e,t),I(i,u,e.bl_count)}function Z(e,t,n){var r,o,i=-1,a=t[1],l=0,s=7,c=4;for(0===a&&(s=138,c=3),t[2*(n+1)+1]=65535,r=0;r<=n;r++)o=a,a=t[2*(r+1)+1],++l<s&&o===a||(l<c?e.bl_tree[2*o]+=l:0!==o?(o!==i&&e.bl_tree[2*o]++,e.bl_tree[32]++):l<=10?e.bl_tree[34]++:e.bl_tree[36]++,l=0,i=o,0===a?(s=138,c=3):o===a?(s=6,c=3):(s=7,c=4))}function z(e,t,n){var r,o,i=-1,a=t[1],l=0,s=7,c=4;for(0===a&&(s=138,c=3),r=0;r<=n;r++)if(o=a,a=t[2*(r+1)+1],!(++l<s&&o===a)){if(l<c)do{O(e,o,e.bl_tree)}while(0!=--l);else 0!==o?(o!==i&&(O(e,o,e.bl_tree),l--),O(e,16,e.bl_tree),_(e,l-3,2)):l<=10?(O(e,17,e.bl_tree),_(e,l-3,3)):(O(e,18,e.bl_tree),_(e,l-11,7));l=0,i=o,0===a?(s=138,c=3):o===a?(s=6,c=3):(s=7,c=4)}}o(w);var R=!1;function N(e,t,n,o){_(e,0+(o?1:0),3),function(e,t,n,o){T(e),o&&(j(e,n),j(e,~n)),r.arraySet(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n,!0)}t._tr_init=function(e){R||(!function(){var e,t,n,r,o,i=new Array(16);for(n=0,r=0;r<28;r++)for(v[r]=n,e=0;e<1<<c[r];e++)g[n++]=r;for(g[n-1]=r,o=0,r=0;r<16;r++)for(w[r]=o,e=0;e<1<<u[r];e++)m[o++]=r;for(o>>=7;r<l;r++)for(w[r]=o<<7,e=0;e<1<<u[r]-7;e++)m[256+o++]=r;for(t=0;t<=s;t++)i[t]=0;for(e=0;e<=143;)p[2*e+1]=8,e++,i[8]++;for(;e<=255;)p[2*e+1]=9,e++,i[9]++;for(;e<=279;)p[2*e+1]=7,e++,i[7]++;for(;e<=287;)p[2*e+1]=8,e++,i[8]++;for(I(p,287,i),e=0;e<l;e++)h[2*e+1]=5,h[2*e]=C(e,5);b=new k(p,c,257,a,s),y=new k(h,u,0,l,s),x=new k(new Array(0),d,0,19,7)}(),R=!0),e.l_desc=new E(e.dyn_ltree,b),e.d_desc=new E(e.dyn_dtree,y),e.bl_desc=new E(e.bl_tree,x),e.bi_buf=0,e.bi_valid=0,M(e)},t._tr_stored_block=N,t._tr_flush_block=function(e,t,n,r){var o,a,l=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<i;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),L(e,e.l_desc),L(e,e.d_desc),l=function(e){var t;for(Z(e,e.dyn_ltree,e.l_desc.max_code),Z(e,e.dyn_dtree,e.d_desc.max_code),L(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*f[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),o=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=o&&(o=a)):o=a=n+5,n+4<=o&&-1!==t?N(e,t,n,r):4===e.strategy||a===o?(_(e,2+(r?1:0),3),A(e,p,h)):(_(e,4+(r?1:0),3),function(e,t,n,r){var o;for(_(e,t-257,5),_(e,n-1,5),_(e,r-4,4),o=0;o<r;o++)_(e,e.bl_tree[2*f[o]+1],3);z(e,e.dyn_ltree,t-1),z(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,l+1),A(e,e.dyn_ltree,e.dyn_dtree)),M(e),r&&T(e)},t._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(g[n]+i+1)]++,e.dyn_dtree[2*S(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){_(e,2,3),O(e,256,p),function(e){16===e.bi_valid?(j(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},249:function(e){\"use strict\";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},9066:function(e){e.exports=function(e){e.data&&e.name&&(e=e.data);for(var t=!0,n=\"\",r=\"\",o=0;o<e.length;o++){var i=e[o];if(t)i?r+=String.fromCharCode(i):t=!1;else{if(!i)throw new Error(\"Invalid NULL character found. 0x00 character is not permitted in tEXt content\");n+=String.fromCharCode(i)}}return{keyword:r,text:n}}},9686:function(e){e.exports=function(e,t){if(e=String(e),t=String(t),!\/^[\\x00-\\xFF]+$\/.test(e)||!\/^[\\x00-\\xFF]+$\/.test(t))throw new Error(\"Only Latin-1 characters are permitted in PNG tEXt chunks. You might want to consider base64 encoding and\/or zEXt compression\");if(e.length>=80)throw new Error('Keyword \"'+e+'\" is longer than the 79-character limit imposed by the PNG specification');for(var n,r=e.length+t.length+1,o=new Uint8Array(r),i=0,a=0;a<e.length;a++){if(!(n=e.charCodeAt(a)))throw new Error(\"0x00 character is not permitted in tEXt keywords\");o[i++]=n}o[i++]=0;for(var l=0;l<t.length;l++){if(!(n=t.charCodeAt(l)))throw new Error(\"0x00 character is not permitted in tEXt content\");o[i++]=n}return{name:\"tEXt\",data:o}}},1194:function(e,t,n){t.encode=n(9686),t.decode=n(9066)},3434:function(e,t,n){var r=n(5714),o=n(6233);e.exports=function(e){var t,n=8,s=n;for(t=0;t<e.length;t++)n+=e[t].data.length,n+=12;var c=new Uint8Array(n);for(c[0]=137,c[1]=80,c[2]=78,c[3]=71,c[4]=13,c[5]=10,c[6]=26,c[7]=10,t=0;t<e.length;t++){var u=e[t],d=u.name,f=u.data,p=f.length,h=[d.charCodeAt(0),d.charCodeAt(1),d.charCodeAt(2),d.charCodeAt(3)];l[0]=p,c[s++]=i[3],c[s++]=i[2],c[s++]=i[1],c[s++]=i[0],c[s++]=h[0],c[s++]=h[1],c[s++]=h[2],c[s++]=h[3];for(var m=0;m<p;)c[s++]=f[m++];var g=h.concat(r(f)),v=o.buf(g);a[0]=v,c[s++]=i[3],c[s++]=i[2],c[s++]=i[1],c[s++]=i[0]}return c};var i=new Uint8Array(4),a=new Int32Array(i.buffer),l=new Uint32Array(i.buffer)},2983:function(e,t,n){var r=n(6233);e.exports=function(e){if(137!==e[0])throw new Error(\"Invalid .png file header\");if(80!==e[1])throw new Error(\"Invalid .png file header\");if(78!==e[2])throw new Error(\"Invalid .png file header\");if(71!==e[3])throw new Error(\"Invalid .png file header\");if(13!==e[4])throw new Error(\"Invalid .png file header: possibly caused by DOS-Unix line ending conversion?\");if(10!==e[5])throw new Error(\"Invalid .png file header: possibly caused by DOS-Unix line ending conversion?\");if(26!==e[6])throw new Error(\"Invalid .png file header\");if(10!==e[7])throw new Error(\"Invalid .png file header: possibly caused by DOS-Unix line ending conversion?\");var t=!1,n=[],l=8;for(;l<e.length;){o[3]=e[l++],o[2]=e[l++],o[1]=e[l++],o[0]=e[l++];var s=a[0]+4,c=new Uint8Array(s);c[0]=e[l++],c[1]=e[l++],c[2]=e[l++],c[3]=e[l++];var u=String.fromCharCode(c[0])+String.fromCharCode(c[1])+String.fromCharCode(c[2])+String.fromCharCode(c[3]);if(!n.length&&\"IHDR\"!==u)throw new Error(\"IHDR header missing\");if(\"IEND\"===u){t=!0,n.push({name:u,data:new Uint8Array(0)});break}for(var d=4;d<s;d++)c[d]=e[l++];o[3]=e[l++],o[2]=e[l++],o[1]=e[l++],o[0]=e[l++];var f=i[0];if(r.buf(c)!==f)throw new Error(\"CRC values for \"+u+\" header do not match, PNG file is likely corrupted\");var p=new Uint8Array(c.buffer.slice(4));n.push({name:u,data:p})}if(!t)throw new Error(\".png file ended prematurely: no IEND header was found\");return n};var o=new Uint8Array(4),i=new Int32Array(o.buffer),a=new Uint32Array(o.buffer)},1493:function(e,t,n){\"use strict\";function r(e,t){return Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)}function o(e,t,n){const o=r(t,n);if(0===o)return r(e,t);let a=((e[0]-t[0])*(n[0]-t[0])+(e[1]-t[1])*(n[1]-t[1]))\/o;return a=Math.max(0,Math.min(1,a)),r(e,i(t,n,a))}function i(e,t,n){return[e[0]+(t[0]-e[0])*n,e[1]+(t[1]-e[1])*n]}function a(e,t,n,o){const l=o||[];if(function(e,t){const n=e[t+0],r=e[t+1],o=e[t+2],i=e[t+3];let a=3*r[0]-2*n[0]-i[0];a*=a;let l=3*r[1]-2*n[1]-i[1];l*=l;let s=3*o[0]-2*i[0]-n[0];s*=s;let c=3*o[1]-2*i[1]-n[1];return c*=c,a<s&&(a=s),l<c&&(l=c),a+l}(e,t)<n){const n=e[t+0];if(l.length){(s=l[l.length-1],c=n,Math.sqrt(r(s,c)))>1&&l.push(n)}else l.push(n);l.push(e[t+3])}else{const r=.5,o=e[t+0],s=e[t+1],c=e[t+2],u=e[t+3],d=i(o,s,r),f=i(s,c,r),p=i(c,u,r),h=i(d,f,r),m=i(f,p,r),g=i(h,m,r);a([o,d,h,g],0,n,l),a([g,m,p,u],0,n,l)}var s,c;return l}function l(e,t){return s(e,0,e.length,t)}function s(e,t,n,r,i){const a=i||[],l=e[t],c=e[n-1];let u=0,d=1;for(let r=t+1;r<n-1;++r){const t=o(e[r],l,c);t>u&&(u=t,d=r)}return Math.sqrt(u)>r?(s(e,t,d+1,r,a),s(e,d,n,r,a)):(a.length||a.push(l),a.push(c)),a}function c(e,t=.15,n){const r=[],o=(e.length-1)\/3;for(let n=0;n<o;n++){a(e,3*n,t,r)}return n&&n>0?s(r,0,r.length,n):r}n.d(t,{o:function(){return l},s:function(){return c}})},6094:function(e,t,n){\"use strict\";var r=n(9787),o=Symbol.for(\"react.element\"),i=Symbol.for(\"react.fragment\"),a=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,i={},c=null,u=null;for(r in void 0!==n&&(c=\"\"+n),void 0!==t.key&&(c=\"\"+t.key),void 0!==t.ref&&(u=t.ref),t)a.call(t,r)&&!s.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:u,props:i,_owner:l.current}}t.Fragment=i,t.jsx=c,t.jsxs=c},4512:function(e,t,n){\"use strict\";e.exports=n(6094)},8152:function(e,t,n){\"use strict\";function r(){return Math.floor(Math.random()*2**31)}n.d(t,{W:function(){return r},k:function(){return o}});class o{constructor(e){this.seed=e}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))\/2**31:Math.random()}}},8234:function(e,t,n){\"use strict\";function r(e,t,n){if(e&&e.length){const[r,o]=t,i=Math.PI\/180*n,a=Math.cos(i),l=Math.sin(i);e.forEach((e=>{const[t,n]=e;e[0]=(t-r)*a-(n-o)*l+r,e[1]=(t-r)*l+(n-o)*a+o}))}}function o(e){const t=e[0],n=e[1];return Math.sqrt(Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2))}function i(e,t){const n=t.hachureAngle+90;let o=t.hachureGap;o<0&&(o=4*t.strokeWidth),o=Math.max(o,.1);const i=[0,0];if(n)for(const t of e)r(t,i,n);const a=function(e,t){const n=[];for(const t of e){const e=[...t];e[0].join(\",\")!==e[e.length-1].join(\",\")&&e.push([e[0][0],e[0][1]]),e.length>2&&n.push(e)}const r=[];t=Math.max(t,.1);const o=[];for(const e of n)for(let t=0;t<e.length-1;t++){const n=e[t],r=e[t+1];if(n[1]!==r[1]){const e=Math.min(n[1],r[1]);o.push({ymin:e,ymax:Math.max(n[1],r[1]),x:e===n[1]?n[0]:r[0],islope:(r[0]-n[0])\/(r[1]-n[1])})}}if(o.sort(((e,t)=>e.ymin<t.ymin?-1:e.ymin>t.ymin?1:e.x<t.x?-1:e.x>t.x?1:e.ymax===t.ymax?0:(e.ymax-t.ymax)\/Math.abs(e.ymax-t.ymax))),!o.length)return r;let i=[],a=o[0].ymin;for(;i.length||o.length;){if(o.length){let e=-1;for(let t=0;t<o.length&&!(o[t].ymin>a);t++)e=t;o.splice(0,e+1).forEach((e=>{i.push({s:a,edge:e})}))}if(i=i.filter((e=>!(e.edge.ymax<=a))),i.sort(((e,t)=>e.edge.x===t.edge.x?0:(e.edge.x-t.edge.x)\/Math.abs(e.edge.x-t.edge.x))),i.length>1)for(let e=0;e<i.length;e+=2){const t=e+1;if(t>=i.length)break;const n=i[e].edge,o=i[t].edge;r.push([[Math.round(n.x),a],[Math.round(o.x),a]])}a+=t,i.forEach((e=>{e.edge.x=e.edge.x+t*e.edge.islope}))}return r}(e,o);if(n){for(const t of e)r(t,i,-n);!function(e,t,n){const o=[];e.forEach((e=>o.push(...e))),r(o,t,n)}(a,i,-n)}return a}n.d(t,{Z:function(){return V}});class a{constructor(e){this.helper=e}fillPolygons(e,t){return this._fillPolygons(e,t)}_fillPolygons(e,t){const n=i(e,t);return{type:\"fillSketch\",ops:this.renderLines(n,t)}}renderLines(e,t){const n=[];for(const r of e)n.push(...this.helper.doubleLineOps(r[0][0],r[0][1],r[1][0],r[1][1],t));return n}}class l extends a{fillPolygons(e,t){let n=t.hachureGap;n<0&&(n=4*t.strokeWidth),n=Math.max(n,.1);const r=i(e,Object.assign({},t,{hachureGap:n})),a=Math.PI\/180*t.hachureAngle,l=[],s=.5*n*Math.cos(a),c=.5*n*Math.sin(a);for(const[e,t]of r)o([e,t])&&l.push([[e[0]-s,e[1]+c],[...t]],[[e[0]+s,e[1]-c],[...t]]);return{type:\"fillSketch\",ops:this.renderLines(l,t)}}}class s extends a{fillPolygons(e,t){const n=this._fillPolygons(e,t),r=Object.assign({},t,{hachureAngle:t.hachureAngle+90}),o=this._fillPolygons(e,r);return n.ops=n.ops.concat(o.ops),n}}class c{constructor(e){this.helper=e}fillPolygons(e,t){const n=i(e,t=Object.assign({},t,{hachureAngle:0}));return this.dotsOnLines(n,t)}dotsOnLines(e,t){const n=[];let r=t.hachureGap;r<0&&(r=4*t.strokeWidth),r=Math.max(r,.1);let i=t.fillWeight;i<0&&(i=t.strokeWidth\/2);const a=r\/4;for(const l of e){const e=o(l),s=e\/r,c=Math.ceil(s)-1,u=e-c*r,d=(l[0][0]+l[1][0])\/2-r\/4,f=Math.min(l[0][1],l[1][1]);for(let e=0;e<c;e++){const o=f+u+e*r,l=d-a+2*Math.random()*a,s=o-a+2*Math.random()*a,c=this.helper.ellipse(l,s,i,i,t);n.push(...c.ops)}}return{type:\"fillSketch\",ops:n}}}class u{constructor(e){this.helper=e}fillPolygons(e,t){const n=i(e,t);return{type:\"fillSketch\",ops:this.dashedLine(n,t)}}dashedLine(e,t){const n=t.dashOffset<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashOffset,r=t.dashGap<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashGap,i=[];return e.forEach((e=>{const a=o(e),l=Math.floor(a\/(n+r)),s=(a+r-l*(n+r))\/2;let c=e[0],u=e[1];c[0]>u[0]&&(c=e[1],u=e[0]);const d=Math.atan((u[1]-c[1])\/(u[0]-c[0]));for(let e=0;e<l;e++){const o=e*(n+r),a=o+n,l=[c[0]+o*Math.cos(d)+s*Math.cos(d),c[1]+o*Math.sin(d)+s*Math.sin(d)],u=[c[0]+a*Math.cos(d)+s*Math.cos(d),c[1]+a*Math.sin(d)+s*Math.sin(d)];i.push(...this.helper.doubleLineOps(l[0],l[1],u[0],u[1],t))}})),i}}class d{constructor(e){this.helper=e}fillPolygons(e,t){const n=t.hachureGap<0?4*t.strokeWidth:t.hachureGap,r=t.zigzagOffset<0?n:t.zigzagOffset,o=i(e,t=Object.assign({},t,{hachureGap:n+r}));return{type:\"fillSketch\",ops:this.zigzagLines(o,r,t)}}zigzagLines(e,t,n){const r=[];return e.forEach((e=>{const i=o(e),a=Math.round(i\/(2*t));let l=e[0],s=e[1];l[0]>s[0]&&(l=e[1],s=e[0]);const c=Math.atan((s[1]-l[1])\/(s[0]-l[0]));for(let e=0;e<a;e++){const o=2*e*t,i=2*(e+1)*t,a=Math.sqrt(2*Math.pow(t,2)),s=[l[0]+o*Math.cos(c),l[1]+o*Math.sin(c)],u=[l[0]+i*Math.cos(c),l[1]+i*Math.sin(c)],d=[s[0]+a*Math.cos(c+Math.PI\/4),s[1]+a*Math.sin(c+Math.PI\/4)];r.push(...this.helper.doubleLineOps(s[0],s[1],d[0],d[1],n),...this.helper.doubleLineOps(d[0],d[1],u[0],u[1],n))}})),r}}const f={};var p=n(8152);const h={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function m(e,t){return e.type===t}function g(e){const t=[],n=function(e){const t=new Array;for(;\"\"!==e;)if(e.match(\/^([ \\t\\r\\n,]+)\/))e=e.substr(RegExp.$1.length);else if(e.match(\/^([aAcChHlLmMqQsStTvVzZ])\/))t[t.length]={type:0,text:RegExp.$1},e=e.substr(RegExp.$1.length);else{if(!e.match(\/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)\/))return[];t[t.length]={type:1,text:`${parseFloat(RegExp.$1)}`},e=e.substr(RegExp.$1.length)}return t[t.length]={type:2,text:\"\"},t}(e);let r=\"BOD\",o=0,i=n[o];for(;!m(i,2);){let a=0;const l=[];if(\"BOD\"===r){if(\"M\"!==i.text&&\"m\"!==i.text)return g(\"M0,0\"+e);o++,a=h[i.text],r=i.text}else m(i,1)?a=h[r]:(o++,a=h[i.text],r=i.text);if(!(o+a<n.length))throw new Error(\"Path data ended short\");for(let e=o;e<o+a;e++){const t=n[e];if(!m(t,1))throw new Error(\"Param not a number: \"+r+\",\"+t.text);l[l.length]=+t.text}if(\"number\"!=typeof h[r])throw new Error(\"Bad segment: \"+r);{const e={key:r,data:l};t.push(e),o+=a,i=n[o],\"M\"===r&&(r=\"L\"),\"m\"===r&&(r=\"l\")}}return t}function v(e){let t=0,n=0,r=0,o=0;const i=[];for(const{key:a,data:l}of e)switch(a){case\"M\":i.push({key:\"M\",data:[...l]}),[t,n]=l,[r,o]=l;break;case\"m\":t+=l[0],n+=l[1],i.push({key:\"M\",data:[t,n]}),r=t,o=n;break;case\"L\":i.push({key:\"L\",data:[...l]}),[t,n]=l;break;case\"l\":t+=l[0],n+=l[1],i.push({key:\"L\",data:[t,n]});break;case\"C\":i.push({key:\"C\",data:[...l]}),t=l[4],n=l[5];break;case\"c\":{const e=l.map(((e,r)=>r%2?e+n:e+t));i.push({key:\"C\",data:e}),t=e[4],n=e[5];break}case\"Q\":i.push({key:\"Q\",data:[...l]}),t=l[2],n=l[3];break;case\"q\":{const e=l.map(((e,r)=>r%2?e+n:e+t));i.push({key:\"Q\",data:e}),t=e[2],n=e[3];break}case\"A\":i.push({key:\"A\",data:[...l]}),t=l[5],n=l[6];break;case\"a\":t+=l[5],n+=l[6],i.push({key:\"A\",data:[l[0],l[1],l[2],l[3],l[4],t,n]});break;case\"H\":i.push({key:\"H\",data:[...l]}),t=l[0];break;case\"h\":t+=l[0],i.push({key:\"H\",data:[t]});break;case\"V\":i.push({key:\"V\",data:[...l]}),n=l[0];break;case\"v\":n+=l[0],i.push({key:\"V\",data:[n]});break;case\"S\":i.push({key:\"S\",data:[...l]}),t=l[2],n=l[3];break;case\"s\":{const e=l.map(((e,r)=>r%2?e+n:e+t));i.push({key:\"S\",data:e}),t=e[2],n=e[3];break}case\"T\":i.push({key:\"T\",data:[...l]}),t=l[0],n=l[1];break;case\"t\":t+=l[0],n+=l[1],i.push({key:\"T\",data:[t,n]});break;case\"Z\":case\"z\":i.push({key:\"Z\",data:[]}),t=r,n=o}return i}function b(e){const t=[];let n=\"\",r=0,o=0,i=0,a=0,l=0,s=0;for(const{key:c,data:u}of e){switch(c){case\"M\":t.push({key:\"M\",data:[...u]}),[r,o]=u,[i,a]=u;break;case\"C\":t.push({key:\"C\",data:[...u]}),r=u[4],o=u[5],l=u[2],s=u[3];break;case\"L\":t.push({key:\"L\",data:[...u]}),[r,o]=u;break;case\"H\":r=u[0],t.push({key:\"L\",data:[r,o]});break;case\"V\":o=u[0],t.push({key:\"L\",data:[r,o]});break;case\"S\":{let e=0,i=0;\"C\"===n||\"S\"===n?(e=r+(r-l),i=o+(o-s)):(e=r,i=o),t.push({key:\"C\",data:[e,i,...u]}),l=u[0],s=u[1],r=u[2],o=u[3];break}case\"T\":{const[e,i]=u;let a=0,c=0;\"Q\"===n||\"T\"===n?(a=r+(r-l),c=o+(o-s)):(a=r,c=o);const d=r+2*(a-r)\/3,f=o+2*(c-o)\/3,p=e+2*(a-e)\/3,h=i+2*(c-i)\/3;t.push({key:\"C\",data:[d,f,p,h,e,i]}),l=a,s=c,r=e,o=i;break}case\"Q\":{const[e,n,i,a]=u,c=r+2*(e-r)\/3,d=o+2*(n-o)\/3,f=i+2*(e-i)\/3,p=a+2*(n-a)\/3;t.push({key:\"C\",data:[c,d,f,p,i,a]}),l=e,s=n,r=i,o=a;break}case\"A\":{const e=Math.abs(u[0]),n=Math.abs(u[1]),i=u[2],a=u[3],l=u[4],s=u[5],c=u[6];if(0===e||0===n)t.push({key:\"C\",data:[r,o,s,c,s,c]}),r=s,o=c;else if(r!==s||o!==c){x(r,o,s,c,e,n,i,a,l).forEach((function(e){t.push({key:\"C\",data:e})})),r=s,o=c}break}case\"Z\":t.push({key:\"Z\",data:[]}),r=i,o=a}n=c}return t}function y(e,t,n){return[e*Math.cos(n)-t*Math.sin(n),e*Math.sin(n)+t*Math.cos(n)]}function x(e,t,n,r,o,i,a,l,s,c){const u=(d=a,Math.PI*d\/180);var d;let f=[],p=0,h=0,m=0,g=0;if(c)[p,h,m,g]=c;else{[e,t]=y(e,t,-u),[n,r]=y(n,r,-u);const a=(e-n)\/2,c=(t-r)\/2;let d=a*a\/(o*o)+c*c\/(i*i);d>1&&(d=Math.sqrt(d),o*=d,i*=d);const f=o*o,v=i*i,b=f*v-f*c*c-v*a*a,x=f*c*c+v*a*a,w=(l===s?-1:1)*Math.sqrt(Math.abs(b\/x));m=w*o*c\/i+(e+n)\/2,g=w*-i*a\/o+(t+r)\/2,p=Math.asin(parseFloat(((t-g)\/i).toFixed(9))),h=Math.asin(parseFloat(((r-g)\/i).toFixed(9))),e<m&&(p=Math.PI-p),n<m&&(h=Math.PI-h),p<0&&(p=2*Math.PI+p),h<0&&(h=2*Math.PI+h),s&&p>h&&(p-=2*Math.PI),!s&&h>p&&(h-=2*Math.PI)}let v=h-p;if(Math.abs(v)>120*Math.PI\/180){const e=h,t=n,l=r;h=s&&h>p?p+120*Math.PI\/180*1:p+120*Math.PI\/180*-1,f=x(n=m+o*Math.cos(h),r=g+i*Math.sin(h),t,l,o,i,a,0,s,[h,e,m,g])}v=h-p;const b=Math.cos(p),w=Math.sin(p),k=Math.cos(h),E=Math.sin(h),S=Math.tan(v\/4),j=4\/3*o*S,_=4\/3*i*S,O=[e,t],C=[e+j*w,t-_*b],I=[n+j*E,r-_*k],M=[n,r];if(C[0]=2*O[0]-C[0],C[1]=2*O[1]-C[1],c)return[C,I,M].concat(f);{f=[C,I,M].concat(f);const e=[];for(let t=0;t<f.length;t+=3){const n=y(f[t][0],f[t][1],u),r=y(f[t+1][0],f[t+1][1],u),o=y(f[t+2][0],f[t+2][1],u);e.push([n[0],n[1],r[0],r[1],o[0],o[1]])}return e}}const w={randOffset:function(e,t){return D(e,t)},randOffsetWithRange:function(e,t,n){return P(e,t,n)},ellipse:function(e,t,n,r,o){const i=_(n,r,o);return O(e,t,o,i).opset},doubleLineOps:function(e,t,n,r,o){return A(e,t,n,r,o,!0)}};function k(e,t,n,r,o){return{type:\"path\",ops:A(e,t,n,r,o)}}function E(e,t,n){const r=(e||[]).length;if(r>2){const o=[];for(let t=0;t<r-1;t++)o.push(...A(e[t][0],e[t][1],e[t+1][0],e[t+1][1],n));return t&&o.push(...A(e[r-1][0],e[r-1][1],e[0][0],e[0][1],n)),{type:\"path\",ops:o}}return 2===r?k(e[0][0],e[0][1],e[1][0],e[1][1],n):{type:\"path\",ops:[]}}function S(e,t,n,r,o){return function(e,t){return E(e,!0,t)}([[e,t],[e+n,t],[e+n,t+r],[e,t+r]],o)}function j(e,t){let n=Z(e,1*(1+.2*t.roughness),t);if(!t.disableMultiStroke){const r=Z(e,1.5*(1+.22*t.roughness),function(e){const t=Object.assign({},e);t.randomizer=void 0,e.seed&&(t.seed=e.seed+1);return t}(t));n=n.concat(r)}return{type:\"path\",ops:n}}function _(e,t,n){const r=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(e\/2,2)+Math.pow(t\/2,2))\/2)),o=Math.ceil(Math.max(n.curveStepCount,n.curveStepCount\/Math.sqrt(200)*r)),i=2*Math.PI\/o;let a=Math.abs(e\/2),l=Math.abs(t\/2);const s=1-n.curveFitting;return a+=D(a*s,n),l+=D(l*s,n),{increment:i,rx:a,ry:l}}function O(e,t,n,r){const[o,i]=R(r.increment,e,t,r.rx,r.ry,1,r.increment*P(.1,P(.4,1,n),n),n);let a=z(o,null,n);if(!n.disableMultiStroke&&0!==n.roughness){const[o]=R(r.increment,e,t,r.rx,r.ry,1.5,0,n),i=z(o,null,n);a=a.concat(i)}return{estimatedPoints:i,opset:{type:\"path\",ops:a}}}function C(e,t,n,r,o,i,a,l,s){const c=e,u=t;let d=Math.abs(n\/2),f=Math.abs(r\/2);d+=D(.01*d,s),f+=D(.01*f,s);let p=o,h=i;for(;p<0;)p+=2*Math.PI,h+=2*Math.PI;h-p>2*Math.PI&&(p=0,h=2*Math.PI);const m=2*Math.PI\/s.curveStepCount,g=Math.min(m\/2,(h-p)\/2),v=N(g,c,u,d,f,p,h,1,s);if(!s.disableMultiStroke){const e=N(g,c,u,d,f,p,h,1.5,s);v.push(...e)}return a&&(l?v.push(...A(c,u,c+d*Math.cos(p),u+f*Math.sin(p),s),...A(c,u,c+d*Math.cos(h),u+f*Math.sin(h),s)):v.push({op:\"lineTo\",data:[c,u]},{op:\"lineTo\",data:[c+d*Math.cos(p),u+f*Math.sin(p)]})),{type:\"path\",ops:v}}function I(e,t){const n=[];for(const r of e)if(r.length){const e=t.maxRandomnessOffset||0,o=r.length;if(o>2){n.push({op:\"move\",data:[r[0][0]+D(e,t),r[0][1]+D(e,t)]});for(let i=1;i<o;i++)n.push({op:\"lineTo\",data:[r[i][0]+D(e,t),r[i][1]+D(e,t)]})}}return{type:\"fillPath\",ops:n}}function M(e,t){return function(e,t){let n=e.fillStyle||\"hachure\";if(!f[n])switch(n){case\"zigzag\":f[n]||(f[n]=new l(t));break;case\"cross-hatch\":f[n]||(f[n]=new s(t));break;case\"dots\":f[n]||(f[n]=new c(t));break;case\"dashed\":f[n]||(f[n]=new u(t));break;case\"zigzag-line\":f[n]||(f[n]=new d(t));break;default:n=\"hachure\",f[n]||(f[n]=new a(t))}return f[n]}(t,w).fillPolygons(e,t)}function T(e){return e.randomizer||(e.randomizer=new p.k(e.seed||0)),e.randomizer.next()}function P(e,t,n,r=1){return n.roughness*r*(T(n)*(t-e)+e)}function D(e,t,n=1){return P(-e,e,t,n)}function A(e,t,n,r,o,i=!1){const a=i?o.disableMultiStrokeFill:o.disableMultiStroke,l=L(e,t,n,r,o,!0,!1);if(a)return l;const s=L(e,t,n,r,o,!0,!0);return l.concat(s)}function L(e,t,n,r,o,i,a){const l=Math.pow(e-n,2)+Math.pow(t-r,2),s=Math.sqrt(l);let c=1;c=s<200?1:s>500?.4:-.0016668*s+1.233334;let u=o.maxRandomnessOffset||0;u*u*100>l&&(u=s\/10);const d=u\/2,f=.2+.2*T(o);let p=o.bowing*o.maxRandomnessOffset*(r-t)\/200,h=o.bowing*o.maxRandomnessOffset*(e-n)\/200;p=D(p,o,c),h=D(h,o,c);const m=[],g=()=>D(d,o,c),v=()=>D(u,o,c),b=o.preserveVertices;return i&&(a?m.push({op:\"move\",data:[e+(b?0:g()),t+(b?0:g())]}):m.push({op:\"move\",data:[e+(b?0:D(u,o,c)),t+(b?0:D(u,o,c))]})),a?m.push({op:\"bcurveTo\",data:[p+e+(n-e)*f+g(),h+t+(r-t)*f+g(),p+e+2*(n-e)*f+g(),h+t+2*(r-t)*f+g(),n+(b?0:g()),r+(b?0:g())]}):m.push({op:\"bcurveTo\",data:[p+e+(n-e)*f+v(),h+t+(r-t)*f+v(),p+e+2*(n-e)*f+v(),h+t+2*(r-t)*f+v(),n+(b?0:v()),r+(b?0:v())]}),m}function Z(e,t,n){const r=[];r.push([e[0][0]+D(t,n),e[0][1]+D(t,n)]),r.push([e[0][0]+D(t,n),e[0][1]+D(t,n)]);for(let o=1;o<e.length;o++)r.push([e[o][0]+D(t,n),e[o][1]+D(t,n)]),o===e.length-1&&r.push([e[o][0]+D(t,n),e[o][1]+D(t,n)]);return z(r,null,n)}function z(e,t,n){const r=e.length,o=[];if(r>3){const i=[],a=1-n.curveTightness;o.push({op:\"move\",data:[e[1][0],e[1][1]]});for(let t=1;t+2<r;t++){const n=e[t];i[0]=[n[0],n[1]],i[1]=[n[0]+(a*e[t+1][0]-a*e[t-1][0])\/6,n[1]+(a*e[t+1][1]-a*e[t-1][1])\/6],i[2]=[e[t+1][0]+(a*e[t][0]-a*e[t+2][0])\/6,e[t+1][1]+(a*e[t][1]-a*e[t+2][1])\/6],i[3]=[e[t+1][0],e[t+1][1]],o.push({op:\"bcurveTo\",data:[i[1][0],i[1][1],i[2][0],i[2][1],i[3][0],i[3][1]]})}if(t&&2===t.length){const e=n.maxRandomnessOffset;o.push({op:\"lineTo\",data:[t[0]+D(e,n),t[1]+D(e,n)]})}}else 3===r?(o.push({op:\"move\",data:[e[1][0],e[1][1]]}),o.push({op:\"bcurveTo\",data:[e[1][0],e[1][1],e[2][0],e[2][1],e[2][0],e[2][1]]})):2===r&&o.push(...A(e[0][0],e[0][1],e[1][0],e[1][1],n));return o}function R(e,t,n,r,o,i,a,l){const s=[],c=[];if(0===l.roughness){e\/=4,c.push([t+r*Math.cos(-e),n+o*Math.sin(-e)]);for(let i=0;i<=2*Math.PI;i+=e){const e=[t+r*Math.cos(i),n+o*Math.sin(i)];s.push(e),c.push(e)}c.push([t+r*Math.cos(0),n+o*Math.sin(0)]),c.push([t+r*Math.cos(e),n+o*Math.sin(e)])}else{const u=D(.5,l)-Math.PI\/2;c.push([D(i,l)+t+.9*r*Math.cos(u-e),D(i,l)+n+.9*o*Math.sin(u-e)]);const d=2*Math.PI+u-.01;for(let a=u;a<d;a+=e){const e=[D(i,l)+t+r*Math.cos(a),D(i,l)+n+o*Math.sin(a)];s.push(e),c.push(e)}c.push([D(i,l)+t+r*Math.cos(u+2*Math.PI+.5*a),D(i,l)+n+o*Math.sin(u+2*Math.PI+.5*a)]),c.push([D(i,l)+t+.98*r*Math.cos(u+a),D(i,l)+n+.98*o*Math.sin(u+a)]),c.push([D(i,l)+t+.9*r*Math.cos(u+.5*a),D(i,l)+n+.9*o*Math.sin(u+.5*a)])}return[c,s]}function N(e,t,n,r,o,i,a,l,s){const c=i+D(.1,s),u=[];u.push([D(l,s)+t+.9*r*Math.cos(c-e),D(l,s)+n+.9*o*Math.sin(c-e)]);for(let i=c;i<=a;i+=e)u.push([D(l,s)+t+r*Math.cos(i),D(l,s)+n+o*Math.sin(i)]);return u.push([t+r*Math.cos(a),n+o*Math.sin(a)]),u.push([t+r*Math.cos(a),n+o*Math.sin(a)]),z(u,null,s)}function B(e,t,n,r,o,i,a,l){const s=[],c=[l.maxRandomnessOffset||1,(l.maxRandomnessOffset||1)+.3];let u=[0,0];const d=l.disableMultiStroke?1:2,f=l.preserveVertices;for(let p=0;p<d;p++)0===p?s.push({op:\"move\",data:[a[0],a[1]]}):s.push({op:\"move\",data:[a[0]+(f?0:D(c[0],l)),a[1]+(f?0:D(c[0],l))]}),u=f?[o,i]:[o+D(c[p],l),i+D(c[p],l)],s.push({op:\"bcurveTo\",data:[e+D(c[p],l),t+D(c[p],l),n+D(c[p],l),r+D(c[p],l),u[0],u[1]]});return s}function H(e){return[...e]}var W=n(1493);const F=\"none\";class U{constructor(e){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:\"#000\",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:\"hachure\",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,disableMultiStroke:!1,disableMultiStrokeFill:!1,preserveVertices:!1},this.config=e||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return(0,p.W)()}_o(e){return e?Object.assign({},this.defaultOptions,e):this.defaultOptions}_d(e,t,n){return{shape:e,sets:t||[],options:n||this.defaultOptions}}line(e,t,n,r,o){const i=this._o(o);return this._d(\"line\",[k(e,t,n,r,i)],i)}rectangle(e,t,n,r,o){const i=this._o(o),a=[],l=S(e,t,n,r,i);if(i.fill){const o=[[e,t],[e+n,t],[e+n,t+r],[e,t+r]];\"solid\"===i.fillStyle?a.push(I([o],i)):a.push(M([o],i))}return i.stroke!==F&&a.push(l),this._d(\"rectangle\",a,i)}ellipse(e,t,n,r,o){const i=this._o(o),a=[],l=_(n,r,i),s=O(e,t,i,l);if(i.fill)if(\"solid\"===i.fillStyle){const n=O(e,t,i,l).opset;n.type=\"fillPath\",a.push(n)}else a.push(M([s.estimatedPoints],i));return i.stroke!==F&&a.push(s.opset),this._d(\"ellipse\",a,i)}circle(e,t,n,r){const o=this.ellipse(e,t,n,n,r);return o.shape=\"circle\",o}linearPath(e,t){const n=this._o(t);return this._d(\"linearPath\",[E(e,!1,n)],n)}arc(e,t,n,r,o,i,a=!1,l){const s=this._o(l),c=[],u=C(e,t,n,r,o,i,a,!0,s);if(a&&s.fill)if(\"solid\"===s.fillStyle){const a=Object.assign({},s);a.disableMultiStroke=!0;const l=C(e,t,n,r,o,i,!0,!1,a);l.type=\"fillPath\",c.push(l)}else c.push(function(e,t,n,r,o,i,a){const l=e,s=t;let c=Math.abs(n\/2),u=Math.abs(r\/2);c+=D(.01*c,a),u+=D(.01*u,a);let d=o,f=i;for(;d<0;)d+=2*Math.PI,f+=2*Math.PI;f-d>2*Math.PI&&(d=0,f=2*Math.PI);const p=(f-d)\/a.curveStepCount,h=[];for(let e=d;e<=f;e+=p)h.push([l+c*Math.cos(e),s+u*Math.sin(e)]);return h.push([l+c*Math.cos(f),s+u*Math.sin(f)]),h.push([l,s]),M([h],a)}(e,t,n,r,o,i,s));return s.stroke!==F&&c.push(u),this._d(\"arc\",c,s)}curve(e,t){const n=this._o(t),r=[],o=j(e,n);if(n.fill&&n.fill!==F&&e.length>=3){const t=function(e,t=0){const n=e.length;if(n<3)throw new Error(\"A curve must have at least three points.\");const r=[];if(3===n)r.push(H(e[0]),H(e[1]),H(e[2]),H(e[2]));else{const n=[];n.push(e[0],e[0]);for(let t=1;t<e.length;t++)n.push(e[t]),t===e.length-1&&n.push(e[t]);const o=[],i=1-t;r.push(H(n[0]));for(let e=1;e+2<n.length;e++){const t=n[e];o[0]=[t[0],t[1]],o[1]=[t[0]+(i*n[e+1][0]-i*n[e-1][0])\/6,t[1]+(i*n[e+1][1]-i*n[e-1][1])\/6],o[2]=[n[e+1][0]+(i*n[e][0]-i*n[e+2][0])\/6,n[e+1][1]+(i*n[e][1]-i*n[e+2][1])\/6],o[3]=[n[e+1][0],n[e+1][1]],r.push(o[1],o[2],o[3])}}return r}(e),o=(0,W.s)(t,10,(1+n.roughness)\/2);\"solid\"===n.fillStyle?r.push(I([o],n)):r.push(M([o],n))}return n.stroke!==F&&r.push(o),this._d(\"curve\",r,n)}polygon(e,t){const n=this._o(t),r=[],o=E(e,!0,n);return n.fill&&(\"solid\"===n.fillStyle?r.push(I([e],n)):r.push(M([e],n))),n.stroke!==F&&r.push(o),this._d(\"polygon\",r,n)}path(e,t){const n=this._o(t),r=[];if(!e)return this._d(\"path\",r,n);e=(e||\"\").replace(\/\\n\/g,\" \").replace(\/(-\\s)\/g,\"-\").replace(\"\/(ss)\/g\",\" \");const o=n.fill&&\"transparent\"!==n.fill&&n.fill!==F,i=n.stroke!==F,a=!!(n.simplification&&n.simplification<1),l=function(e,t,n){const r=b(v(g(e))),o=[];let i=[],a=[0,0],l=[];const s=()=>{l.length>=4&&i.push(...(0,W.s)(l,t)),l=[]},c=()=>{s(),i.length&&(o.push(i),i=[])};for(const{key:e,data:t}of r)switch(e){case\"M\":c(),a=[t[0],t[1]],i.push(a);break;case\"L\":s(),i.push([t[0],t[1]]);break;case\"C\":if(!l.length){const e=i.length?i[i.length-1]:a;l.push([e[0],e[1]])}l.push([t[0],t[1]]),l.push([t[2],t[3]]),l.push([t[4],t[5]]);break;case\"Z\":s(),i.push([a[0],a[1]])}if(c(),!n)return o;const u=[];for(const e of o){const t=(0,W.o)(e,n);t.length&&u.push(t)}return u}(e,1,a?4-4*n.simplification:(1+n.roughness)\/2);return o&&(\"solid\"===n.fillStyle?r.push(I(l,n)):r.push(M(l,n))),i&&(a?l.forEach((e=>{r.push(E(e,!1,n))})):r.push(function(e,t){const n=b(v(g(e))),r=[];let o=[0,0],i=[0,0];for(const{key:e,data:a}of n)switch(e){case\"M\":{const e=1*(t.maxRandomnessOffset||0),n=t.preserveVertices;r.push({op:\"move\",data:a.map((r=>r+(n?0:D(e,t))))}),i=[a[0],a[1]],o=[a[0],a[1]];break}case\"L\":r.push(...A(i[0],i[1],a[0],a[1],t)),i=[a[0],a[1]];break;case\"C\":{const[e,n,o,l,s,c]=a;r.push(...B(e,n,o,l,s,c,i,t)),i=[s,c];break}case\"Z\":r.push(...A(i[0],i[1],o[0],o[1],t)),i=[o[0],o[1]]}return{type:\"path\",ops:r}}(e,n))),this._d(\"path\",r,n)}opsToPath(e,t){let n=\"\";for(const r of e.ops){const e=\"number\"==typeof t&&t>=0?r.data.map((e=>+e.toFixed(t))):r.data;switch(r.op){case\"move\":n+=`M${e[0]} ${e[1]} `;break;case\"bcurveTo\":n+=`C${e[0]} ${e[1]}, ${e[2]} ${e[3]}, ${e[4]} ${e[5]} `;break;case\"lineTo\":n+=`L${e[0]} ${e[1]} `}}return n.trim()}toPaths(e){const t=e.sets||[],n=e.options||this.defaultOptions,r=[];for(const e of t){let t=null;switch(e.type){case\"path\":t={d:this.opsToPath(e),stroke:n.stroke,strokeWidth:n.strokeWidth,fill:F};break;case\"fillPath\":t={d:this.opsToPath(e),stroke:F,strokeWidth:0,fill:n.fill||F};break;case\"fillSketch\":t=this.fillSketch(e,n)}t&&r.push(t)}return r}fillSketch(e,t){let n=t.fillWeight;return n<0&&(n=t.strokeWidth\/2),{d:this.opsToPath(e),stroke:t.fill||F,strokeWidth:n,fill:F}}}class K{constructor(e,t){this.canvas=e,this.ctx=this.canvas.getContext(\"2d\"),this.gen=new U(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.ctx,o=e.options.fixedDecimalPlaceDigits;for(const i of t)switch(i.type){case\"path\":r.save(),r.strokeStyle=\"none\"===n.stroke?\"transparent\":n.stroke,r.lineWidth=n.strokeWidth,n.strokeLineDash&&r.setLineDash(n.strokeLineDash),n.strokeLineDashOffset&&(r.lineDashOffset=n.strokeLineDashOffset),this._drawToContext(r,i,o),r.restore();break;case\"fillPath\":{r.save(),r.fillStyle=n.fill||\"\";const t=\"curve\"===e.shape||\"polygon\"===e.shape||\"path\"===e.shape?\"evenodd\":\"nonzero\";this._drawToContext(r,i,o,t),r.restore();break}case\"fillSketch\":this.fillSketch(r,i,n)}}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2),e.save(),n.fillLineDash&&e.setLineDash(n.fillLineDash),n.fillLineDashOffset&&(e.lineDashOffset=n.fillLineDashOffset),e.strokeStyle=n.fill||\"\",e.lineWidth=r,this._drawToContext(e,t,n.fixedDecimalPlaceDigits),e.restore()}_drawToContext(e,t,n,r=\"nonzero\"){e.beginPath();for(const r of t.ops){const t=\"number\"==typeof n&&n>=0?r.data.map((e=>+e.toFixed(n))):r.data;switch(r.op){case\"move\":e.moveTo(t[0],t[1]);break;case\"bcurveTo\":e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5]);break;case\"lineTo\":e.lineTo(t[0],t[1])}}\"fillPath\"===t.type?e.fill(r):e.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(e,t,n,r,o){const i=this.gen.line(e,t,n,r,o);return this.draw(i),i}rectangle(e,t,n,r,o){const i=this.gen.rectangle(e,t,n,r,o);return this.draw(i),i}ellipse(e,t,n,r,o){const i=this.gen.ellipse(e,t,n,r,o);return this.draw(i),i}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o),o}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n),n}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n),n}arc(e,t,n,r,o,i,a=!1,l){const s=this.gen.arc(e,t,n,r,o,i,a,l);return this.draw(s),s}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n),n}path(e,t){const n=this.gen.path(e,t);return this.draw(n),n}}const Y=\"http:\/\/www.w3.org\/2000\/svg\";class G{constructor(e,t){this.svg=e,this.gen=new U(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.svg.ownerDocument||window.document,o=r.createElementNS(Y,\"g\"),i=e.options.fixedDecimalPlaceDigits;for(const a of t){let t=null;switch(a.type){case\"path\":t=r.createElementNS(Y,\"path\"),t.setAttribute(\"d\",this.opsToPath(a,i)),t.setAttribute(\"stroke\",n.stroke),t.setAttribute(\"stroke-width\",n.strokeWidth+\"\"),t.setAttribute(\"fill\",\"none\"),n.strokeLineDash&&t.setAttribute(\"stroke-dasharray\",n.strokeLineDash.join(\" \").trim()),n.strokeLineDashOffset&&t.setAttribute(\"stroke-dashoffset\",`${n.strokeLineDashOffset}`);break;case\"fillPath\":t=r.createElementNS(Y,\"path\"),t.setAttribute(\"d\",this.opsToPath(a,i)),t.setAttribute(\"stroke\",\"none\"),t.setAttribute(\"stroke-width\",\"0\"),t.setAttribute(\"fill\",n.fill||\"\"),\"curve\"!==e.shape&&\"polygon\"!==e.shape||t.setAttribute(\"fill-rule\",\"evenodd\");break;case\"fillSketch\":t=this.fillSketch(r,a,n)}t&&o.appendChild(t)}return o}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2);const o=e.createElementNS(Y,\"path\");return o.setAttribute(\"d\",this.opsToPath(t,n.fixedDecimalPlaceDigits)),o.setAttribute(\"stroke\",n.fill||\"\"),o.setAttribute(\"stroke-width\",r+\"\"),o.setAttribute(\"fill\",\"none\"),n.fillLineDash&&o.setAttribute(\"stroke-dasharray\",n.fillLineDash.join(\" \").trim()),n.fillLineDashOffset&&o.setAttribute(\"stroke-dashoffset\",`${n.fillLineDashOffset}`),o}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(e,t){return this.gen.opsToPath(e,t)}line(e,t,n,r,o){const i=this.gen.line(e,t,n,r,o);return this.draw(i)}rectangle(e,t,n,r,o){const i=this.gen.rectangle(e,t,n,r,o);return this.draw(i)}ellipse(e,t,n,r,o){const i=this.gen.ellipse(e,t,n,r,o);return this.draw(i)}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o)}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n)}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n)}arc(e,t,n,r,o,i,a=!1,l){const s=this.gen.arc(e,t,n,r,o,i,a,l);return this.draw(s)}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n)}path(e,t){const n=this.gen.path(e,t);return this.draw(n)}}var V={canvas:(e,t)=>new K(e,t),svg:(e,t)=>new G(e,t),generator:e=>new U(e),newSeed:()=>U.newSeed()}},5714:function(e){e.exports=function(e,t,n){var r=[],o=e.length;if(0===o)return r;var i=t<0?Math.max(0,t+o):t||0;for(void 0!==n&&(o=n<0?n+o:n);o-- >i;)r[o-i]=e[o];return r}},5422:function(e,t,n){\"use strict\";var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(2044),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals},487:function(e){\"use strict\";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var s=e[l],c=r.base?s[0]+r.base:s[0],u=i[c]||0,d=\"\".concat(c,\" \").concat(u);i[c]=u+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var s=r(e,o),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},2052:function(e){\"use strict\";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");r.appendChild(n)}},1469:function(e){\"use strict\";e.exports=function(e){var t=document.createElement(\"style\");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},4010:function(e,t,n){\"use strict\";e.exports=function(e){var t=n.nc;t&&e.setAttribute(\"nonce\",t)}},631:function(e){\"use strict\";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=\"\";n.supports&&(r+=\"@supports (\".concat(n.supports,\") {\")),n.media&&(r+=\"@media \".concat(n.media,\" {\"));var o=void 0!==n.layer;o&&(r+=\"@layer\".concat(n.layer.length>0?\" \".concat(n.layer):\"\",\" {\")),r+=n.css,o&&(r+=\"}\"),n.media&&(r+=\"}\"),n.supports&&(r+=\"}\");var i=n.sourceMap;i&&\"undefined\"!=typeof btoa&&(r+=\"\\n\/*# sourceMappingURL=data:application\/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i)))),\" *\/\")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},9329:function(e){\"use strict\";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2173:function(e,t,n){\"use strict\";var r=n(9787);var o=\"function\"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1\/e==1\/t)||e!=e&&t!=t},i=r.useState,a=r.useEffect,l=r.useLayoutEffect,s=r.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var u=\"undefined\"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),o=r[0].inst,u=r[1];return l((function(){o.value=n,o.getSnapshot=t,c(o)&&u({inst:o})}),[e,n,t]),a((function(){return c(o)&&u({inst:o}),e((function(){c(o)&&u({inst:o})}))}),[e]),s(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:u},5917:function(e,t,n){\"use strict\";var r=n(9787),o=n(1374);var i=\"function\"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1\/e==1\/t)||e!=e&&t!=t},a=o.useSyncExternalStore,l=r.useRef,s=r.useEffect,c=r.useMemo,u=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var d=l(null);if(null===d.current){var f={hasValue:!1,value:null};d.current=f}else f=d.current;d=c((function(){function e(e){if(!s){if(s=!0,a=e,e=r(e),void 0!==o&&f.hasValue){var t=f.value;if(o(t,e))return l=t}return l=e}if(t=l,i(a,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(a=e,l=n)}var a,l,s=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,r,o]);var p=a(e,d[0],d[1]);return s((function(){f.hasValue=!0,f.value=p}),[p]),u(p),p}},1374:function(e,t,n){\"use strict\";e.exports=n(2173)},5668:function(e,t,n){\"use strict\";e.exports=n(5917)},940:function(e,t,n){var r={\".\/ar-SA.json\":[7822,2091],\".\/bg-BG.json\":[1203,1628],\".\/bn-BD.json\":[8525,7429],\".\/ca-ES.json\":[510,5130],\".\/cs-CZ.json\":[7605,6265],\".\/da-DK.json\":[2392,1790],\".\/de-DE.json\":[2853,3082],\".\/el-GR.json\":[9876,1513],\".\/en.json\":[1463],\".\/es-ES.json\":[9952,8759],\".\/eu-ES.json\":[5658,8081],\".\/fa-IR.json\":[3747,5330],\".\/fi-FI.json\":[9490,3512],\".\/fr-FR.json\":[7830,3682],\".\/gl-ES.json\":[5199,2943],\".\/he-IL.json\":[1994,2312],\".\/hi-IN.json\":[4646,9828],\".\/hu-HU.json\":[6373,7368],\".\/id-ID.json\":[3247,3808],\".\/it-IT.json\":[3257,6239],\".\/ja-JP.json\":[198,1204],\".\/kab-KAB.json\":[228,9551],\".\/kk-KZ.json\":[8972,22],\".\/ko-KR.json\":[7596,6844],\".\/ku-TR.json\":[2508,3031],\".\/lt-LT.json\":[3755,8340],\".\/lv-LV.json\":[2327,6768],\".\/mr-IN.json\":[5297,3397],\".\/my-MM.json\":[7704,1477],\".\/nb-NO.json\":[1167,2359],\".\/nl-NL.json\":[290,3024],\".\/nn-NO.json\":[4481,3885],\".\/oc-FR.json\":[2284,1690],\".\/pa-IN.json\":[5383,3162],\".\/percentages.json\":[4451],\".\/pl-PL.json\":[3661,3674],\".\/pt-BR.json\":[8881,3721],\".\/pt-PT.json\":[5622,5395],\".\/ro-RO.json\":[2013,5089],\".\/ru-RU.json\":[2253,8124],\".\/si-LK.json\":[5497,1302],\".\/sk-SK.json\":[4570,8750],\".\/sl-SI.json\":[1984,6071],\".\/sv-SE.json\":[6006,8534],\".\/ta-IN.json\":[3952,2404],\".\/th-TH.json\":[2596,537],\".\/tr-TR.json\":[7315,4977],\".\/uk-UA.json\":[334,7759],\".\/vi-VN.json\":[456,4e3],\".\/zh-CN.json\":[1037,4680],\".\/zh-HK.json\":[5334,7920],\".\/zh-TW.json\":[931,3421]};function o(e){if(!n.o(r,e))return Promise.resolve().then((function(){var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}));var t=r[e],o=t[0];return Promise.all(t.slice(1).map(n.e)).then((function(){return n.t(o,19)}))}o.keys=function(){return Object.keys(r)},o.id=940,e.exports=o},9713:function(e){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6479:function(e,t,n){var r=n(7316);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},7316:function(e){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},4295:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(3940),n.b),u=new URL(n(3147),n.b),d=new URL(n(8303),n.b),f=new URL(n(1273),n.b),p=new URL(n(9577),n.b),h=new URL(n(9729),n.b),m=a()(o()),g=s()(c),v=s()(u),b=s()(d),y=s()(f),x=s()(p),w=s()(h);m.push([e.id,'@font-face{font-family:\"Virgil\";src:url('+g+');font-display:swap}@font-face{font-family:\"Cascadia\";src:url('+v+');font-display:swap}@font-face{font-family:\"Assistant\";src:url('+b+');font-display:swap;font-weight:400}@font-face{font-family:\"Assistant\";src:url('+y+');font-display:swap;font-weight:500}@font-face{font-family:\"Assistant\";src:url('+x+');font-display:swap;font-weight:600}@font-face{font-family:\"Assistant\";src:url('+w+\");font-display:swap;font-weight:700}\",\"\"]),t.Z=m},6086:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".zoom-actions,.undo-redo-buttons{background-color:var(--island-bg-color);border-radius:var(--border-radius-lg)}.zoom-button,.undo-redo-buttons button{border:1px solid var(--default-border-color) !important;border-radius:0 !important;background-color:rgba(0,0,0,0) !important;font-size:.875rem !important;width:var(--lg-button-size);height:var(--lg-button-size)}.zoom-button svg,.undo-redo-buttons button svg{width:var(--lg-icon-size) !important;height:var(--lg-icon-size) !important}.zoom-button .ToolIcon__icon,.undo-redo-buttons button .ToolIcon__icon{width:100%;height:100%}.reset-zoom-button{border-left:0 !important;border-right:0 !important;padding:0 .625rem !important;width:3.75rem !important;justify-content:center;color:var(--text-primary-color)}.zoom-out-button{border-top-left-radius:var(--border-radius-lg) !important;border-bottom-left-radius:var(--border-radius-lg) !important}:root[dir=rtl] .zoom-out-button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.zoom-out-button .ToolIcon__icon{border-top-right-radius:0 !important;border-bottom-right-radius:0 !important}.zoom-in-button{border-top-right-radius:var(--border-radius-lg) !important;border-bottom-right-radius:var(--border-radius-lg) !important}:root[dir=rtl] .zoom-in-button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.zoom-in-button .ToolIcon__icon{border-top-left-radius:0 !important;border-bottom-left-radius:0 !important}.undo-redo-buttons .undo-button-container button{border-top-left-radius:var(--border-radius-lg) !important;border-bottom-left-radius:var(--border-radius-lg) !important;border-right:0 !important}:root[dir=rtl] .undo-redo-buttons .undo-button-container button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.undo-redo-buttons .undo-button-container button .ToolIcon__icon{border-top-right-radius:0 !important;border-bottom-right-radius:0 !important}.undo-redo-buttons .redo-button-container button{border-top-right-radius:var(--border-radius-lg) !important;border-bottom-right-radius:var(--border-radius-lg) !important}:root[dir=rtl] .undo-redo-buttons .redo-button-container button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.undo-redo-buttons .redo-button-container button .ToolIcon__icon{border-top-left-radius:0 !important;border-bottom-left-radius:0 !important}\",\"\"]),t.Z=a},3729:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Avatar{width:1.25rem;height:1.25rem;position:relative;border-radius:100%;outline-offset:2px;display:flex;justify-content:center;align-items:center;color:#fff;cursor:pointer;font-size:.625rem;font-weight:500;line-height:1}.excalidraw .Avatar-img{width:100%;height:100%;border-radius:100%}.excalidraw .Avatar::before{content:\"\";position:absolute;top:-3px;right:-3px;bottom:-3px;left:-3px;border:1px solid var(--avatar-border-color);border-radius:100%}',\"\"]),t.Z=a},3137:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(7984),n.b),u=new URL(n(1639),n.b),d=a()(o()),f=s()(c),p=s()(u);d.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw{--theme-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: var(--color-gray-20);--dropdown-icon: url(\"+f+\");--focus-highlight-color: #a5d8ff;--icon-fill-color: var(--color-gray-80);--icon-green-fill-color: #2b8a3e;--default-bg-color: #ffffff;--input-bg-color: #ffffff;--input-border-color: #ced4da;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.96);--keybinding-color: var(--color-gray-40);--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0px 7px 14px rgba(0, 0, 0, 0.05), 0px 0px 3.12708px rgba(0, 0, 0, 0.0798), 0px 0px 0.931014px rgba(0, 0, 0, 0.1702);--button-hover-bg: var(--color-gray-10);--default-border-color: var(--color-gray-30);--default-button-size: 2rem;--default-icon-size: 1rem;--lg-button-size: 2.25rem;--lg-icon-size: 1rem;--editor-container-padding: 1rem;--scrollbar-thumb: var(--button-gray-2);--scrollbar-thumb-hover: var(--button-gray-3);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-20);--sidebar-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--sidebar-border-color: var(--color-gray-20);--sidebar-bg-color: #fff;--library-dropdown-shadow: 0px 15px 6px rgba(0, 0, 0, 0.01), 0px 8px 5px rgba(0, 0, 0, 0.05), 0px 4px 4px rgba(0, 0, 0, 0.09), 0px 1px 2px rgba(0, 0, 0, 0.1), 0px 0px 0px rgba(0, 0, 0, 0.1);--space-factor: 0.25rem;--text-primary-color: var(--color-gray-80);--color-selection: #6965db;--color-primary: #6965db;--color-primary-darker: #5b57d1;--color-primary-darkest: #4a47b1;--color-primary-light: #e3e2fe;--color-gray-10: #f5f5f5;--color-gray-20: #ebebeb;--color-gray-30: #d6d6d6;--color-gray-40: #b8b8b8;--color-gray-50: #999999;--color-gray-60: #7a7a7a;--color-gray-70: #5c5c5c;--color-gray-80: #3d3d3d;--color-gray-85: #242424;--color-gray-90: #1e1e1e;--color-gray-100: #121212;--color-warning: #fceeca;--color-text-warning: var(--text-primary-color);--color-danger: #db6965;--color-promo: #e70078;--border-radius-md: 0.375rem;--border-radius-lg: 0.5rem}@media screen and (min-device-width: 1921px){.excalidraw{--lg-button-size: 2.5rem;--lg-icon-size: 1.25rem;--default-button-size: 2.25rem;--default-icon-size: 1.25rem}}.excalidraw.theme--dark.theme--dark-background-none{background:none}.excalidraw.theme--dark{--theme-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: var(--color-gray-80);--dropdown-icon: url(\"+p+\");--focus-highlight-color: #228be6;--icon-fill-color: var(--color-gray-40);--icon-green-fill-color: #69db7c;--default-bg-color: #121212;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: #262627;--keybinding-color: var(--color-gray-60);--link-color: #4dabf7;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--text-primary-color: var(--color-gray-40);--button-hover-bg: var(--color-gray-80);--default-border-color: var(--color-gray-80);--shadow-island: 0px 13px 33px rgba(0, 0, 0, 0.07), 0px 4.13px 9.94853px rgba(0, 0, 0, 0.0456112), 0px 1.13px 4.13211px rgba(0, 0, 0, 0.035), 0px 0.769896px 1.4945px rgba(0, 0, 0, 0.0243888);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-85);--sidebar-border-color: var(--color-gray-85);--sidebar-bg-color: #191919;--scrollbar-thumb: #343a40;--scrollbar-thumb-hover: #495057;--color-selection: #3530c4;--color-primary: #a8a5ff;--color-primary-darker: #b2aeff;--color-primary-darkest: #beb9ff;--color-primary-light: #4f4d6f;--color-text-warning: var(--color-gray-80);--color-danger: #ffa8a5;--color-promo: #d297ff}.excalidraw .excalidraw-button{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color))}.excalidraw .excalidraw-button svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .excalidraw-button:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .excalidraw-button:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .excalidraw-button.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .excalidraw-button.active:hover{background-color:var(--color-primary-light)}.excalidraw .excalidraw-button.active svg{color:var(--button-color, var(--color-primary-darker))}\",\"\"]),t.Z=d},4241:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Card{display:flex;flex-direction:column;align-items:center;max-width:290px;margin:1em;text-align:center}.excalidraw .Card .Card-icon{font-size:2.6em;display:flex;flex:0 0 auto;padding:1.4rem;border-radius:50%;background:var(--card-color);color:#fff}.excalidraw .Card .Card-icon svg{width:2.8rem;height:2.8rem}.excalidraw .Card .Card-details{font-size:.96em;min-height:90px;padding:0 1em;margin-bottom:auto}.excalidraw .Card .Card-button.ToolIcon_type_button{height:2.5rem;margin-top:1em;margin-bottom:.3em;background-color:var(--card-color)}.excalidraw .Card .Card-button.ToolIcon_type_button:hover{background-color:var(--card-color-darker)}.excalidraw .Card .Card-button.ToolIcon_type_button:active{background-color:var(--card-color-darkest)}.excalidraw .Card .Card-button.ToolIcon_type_button .ToolIcon__label{color:#fff}.excalidraw .Card .Card-button.ToolIcon_type_button .Spinner{--spinner-color: #fff}\",\"\"]),t.Z=a},6029:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Checkbox{margin:4px .3em;display:flex;align-items:center;cursor:pointer;-webkit-user-select:none;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus){box-shadow:0 0 0 2px #4dabf7}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus) svg{display:block;opacity:.3}.excalidraw .Checkbox:active .Checkbox-box{box-shadow:0 0 2px 1px inset #1c7ed6 !important}.excalidraw .Checkbox:hover .Checkbox-box{background-color:rgba(208,235,255,.2)}.excalidraw .Checkbox.is-checked .Checkbox-box{background-color:#d0ebff}.excalidraw .Checkbox.is-checked .Checkbox-box svg{display:block}.excalidraw .Checkbox.is-checked:hover .Checkbox-box{background-color:#a5d8ff}.excalidraw .Checkbox .Checkbox-box{width:22px;height:22px;padding:0;flex:0 0 auto;margin:0 1em;display:flex;align-items:center;justify-content:center;box-shadow:0 0 0 2px #1c7ed6;background-color:rgba(0,0,0,0);border-radius:4px;color:#1c7ed6;border:0}.excalidraw .Checkbox .Checkbox-box:focus{box-shadow:0 0 0 3px #1c7ed6}.excalidraw .Checkbox .Checkbox-box svg{display:none;width:16px;height:16px;stroke-width:3px}.excalidraw .Checkbox .Checkbox-label{display:flex;align-items:center}.excalidraw .Checkbox .excalidraw-tooltip-icon{width:1em;height:1em}\",\"\"]),t.Z=a},2345:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(9669),n.b),u=a()(o()),d=s()(c);u.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .color-picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}:root[dir=ltr] .excalidraw .color-picker{left:-5.5px}:root[dir=rtl] .excalidraw .color-picker{right:-5.5px}.excalidraw .color-picker-control-container{display:grid;grid-template-columns:auto 1fr;align-items:center;-webkit-column-gap:.5rem;column-gap:.5rem}.excalidraw .color-picker-control-container+.popover{position:static}.excalidraw .color-picker-popover-container{margin-top:-0.25rem}:root[dir=ltr] .excalidraw .color-picker-popover-container{margin-left:.5rem}:root[dir=rtl] .excalidraw .color-picker-popover-container{margin-left:-3rem}.excalidraw .color-picker-triangle{width:0;height:0;border-style:solid;border-width:0 9px 10px;border-color:rgba(0,0,0,0) rgba(0,0,0,0) var(--popup-bg-color);position:absolute;top:10px}:root[dir=ltr] .excalidraw .color-picker-triangle{-webkit-transform:rotate(270deg);transform:rotate(270deg);left:-14px}:root[dir=rtl] .excalidraw .color-picker-triangle{-webkit-transform:rotate(90deg);transform:rotate(90deg);right:-14px}.excalidraw .color-picker-triangle-shadow{border-color:rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,.1)}:root[dir=ltr] .excalidraw .color-picker-triangle-shadow{left:-14px}:root[dir=rtl] .excalidraw .color-picker-triangle-shadow{right:-16px}.excalidraw .color-picker-content--default{padding:.5rem;display:grid;grid-template-columns:repeat(5, auto);grid-gap:.5rem;border-radius:4px}.excalidraw .color-picker-content--default:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-picker-content--canvas{display:flex;flex-direction:column;padding:.25rem}.excalidraw .color-picker-content--canvas-title{color:#868e96;font-size:12px;padding:0 .25rem}.excalidraw .color-picker-content--canvas-colors{padding:.5rem 0}.excalidraw .color-picker-content--canvas-colors .color-picker-swatch{margin:0 .25rem}.excalidraw .color-picker-content .color-input-container{grid-column:1\/span 5}.excalidraw .color-picker-swatch{position:relative;height:1.875rem;width:1.875rem;cursor:pointer;border-radius:4px;margin:0;box-sizing:border-box;border:1px solid #ddd;background-color:currentColor !important;-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .color-picker-swatch:focus{box-shadow:0 0 4px 1px currentColor;border-color:var(--select-highlight-color)}.excalidraw .color-picker-transparent{border-radius:4px;box-shadow:rgba(0,0,0,.1) 0 0 0 1px inset;position:absolute;top:0;right:0;bottom:0;left:0}.excalidraw .color-picker-transparent,.excalidraw .color-picker-label-swatch{background:url(\"+d+') left center}.excalidraw .color-picker-hash{height:var(--default-button-size);flex-shrink:0;padding:.5rem .5rem .5rem .75rem;border:1px solid var(--default-border-color);border-right:0;box-sizing:border-box;color:var(--input-label-color);display:flex;align-items:center;justify-content:center;position:relative}:root[dir=ltr] .excalidraw .color-picker-hash{border-radius:var(--border-radius-lg) 0 0 var(--border-radius-lg)}:root[dir=rtl] .excalidraw .color-picker-hash{border-radius:0 var(--border-radius-lg) var(--border-radius-lg) 0;border-right:1px solid var(--default-border-color);border-left:0}.excalidraw .color-input-container{display:flex}.excalidraw .color-input-container:focus-within{box-shadow:0 0 0 1px var(--color-primary-darkest);border-radius:var(--border-radius-lg)}.excalidraw .color-picker-input{box-sizing:border-box;width:100%;margin:0;font-size:.875rem;background-color:rgba(0,0,0,0);color:var(--text-primary-color);border:0;outline:none;height:var(--default-button-size);border:1px solid var(--default-border-color);border-left:0;letter-spacing:.4px;padding:.5rem;padding-left:.25rem;-webkit-appearance:none;appearance:none}:root[dir=ltr] .excalidraw .color-picker-input{border-radius:0 var(--border-radius-lg) var(--border-radius-lg) 0}:root[dir=rtl] .excalidraw .color-picker-input{border-radius:var(--border-radius-lg) 0 0 var(--border-radius-lg);border-left:1px solid var(--default-border-color);border-right:0}.excalidraw .color-picker-input:focus-visible{box-shadow:none}.excalidraw .color-picker-label-swatch-container{border:1px solid var(--default-border-color);border-radius:var(--border-radius-lg);width:var(--default-button-size);height:var(--default-button-size);box-sizing:border-box;overflow:hidden}.excalidraw .color-picker-label-swatch{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--swatch-color) !important;overflow:hidden;position:relative;-webkit-filter:var(--theme-filter);filter:var(--theme-filter);border:0 !important}.excalidraw .color-picker-label-swatch svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .color-picker-label-swatch:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .color-picker-label-swatch:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .color-picker-label-swatch.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .color-picker-label-swatch.active:hover{background-color:var(--color-primary-light)}.excalidraw .color-picker-label-swatch.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .color-picker-label-swatch:after{content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;background:var(--swatch-color)}.excalidraw .color-picker-keybinding{position:absolute;bottom:2px;font-size:.7em}:root[dir=ltr] .excalidraw .color-picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .color-picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .color-picker-keybinding{display:none}.excalidraw .color-picker-type-canvasBackground .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementBackground .color-picker-keybinding{color:#fff}.excalidraw .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementStroke .color-picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .color-picker-type-elementBackground .color-picker-keybinding{color:#000}.excalidraw.theme--dark .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#000}',\"\"]),t.Z=u},9393:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .confirm-dialog-buttons{display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;justify-content:flex-end}\",\"\"]),t.Z=a},6578:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .context-menu{position:relative;border-radius:4px;box-shadow:0 3px 10px rgba(0,0,0,.2);padding:0;list-style:none;-webkit-user-select:none;user-select:none;margin:-0.25rem 0 0 .125rem;padding:.5rem 0;background-color:var(--popup-secondary-bg-color);border:1px solid var(--button-gray-3);cursor:default}.excalidraw .context-menu button{color:var(--popup-text-color)}.excalidraw .context-menu-item{position:relative;width:100%;min-width:9.5rem;margin:0;padding:.25rem 1rem .25rem 1.25rem;text-align:start;border-radius:0;background-color:rgba(0,0,0,0);border:none;white-space:nowrap;display:grid;grid-template-columns:1fr .2fr;align-items:center}.excalidraw .context-menu-item.checkmark::before{position:absolute;left:6px;margin-bottom:1px;content:\"\u2713\"}.excalidraw .context-menu-item.dangerous .context-menu-item__label{color:#f03e3e}.excalidraw .context-menu-item .context-menu-item__label{justify-self:start;-webkit-margin-end:20px;margin-inline-end:20px}.excalidraw .context-menu-item .context-menu-item__shortcut{justify-self:end;opacity:.6;font-family:inherit;font-size:.7rem}.excalidraw .context-menu-item:hover{color:var(--popup-bg-color);background-color:var(--select-highlight-color)}.excalidraw .context-menu-item:hover.dangerous{background-color:#fa5252}.excalidraw .context-menu-item:hover.dangerous .context-menu-item__label{color:var(--popup-bg-color)}.excalidraw .context-menu-item:focus{z-index:1}.excalidraw--mobile.excalidraw .context-menu-item{display:block}.excalidraw--mobile.excalidraw .context-menu-item .context-menu-item__label{-webkit-margin-end:0;margin-inline-end:0}.excalidraw--mobile.excalidraw .context-menu-item .context-menu-item__shortcut{display:none}.excalidraw .context-menu-item-separator{border:none;border-top:1px solid #adb5bd}',\"\"]),t.Z=a},9482:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Dialog{-webkit-user-select:text;user-select:text;cursor:auto}.excalidraw .Dialog__title{margin:0;text-align:left;font-size:1.25rem;border-bottom:1px solid var(--dialog-border-color);padding:0 0 .75rem;margin-bottom:1.5rem}\",\"\"]),t.Z=a},6148:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Dialog__action-button{position:relative;display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;align-items:center;padding:.5rem 1.5rem;border:1px solid var(--default-border-color);background-color:rgba(0,0,0,0);height:3rem;border-radius:var(--border-radius-lg);letter-spacing:.4px;color:inherit;font-family:inherit;font-size:.875rem;font-weight:600;-webkit-user-select:none;user-select:none}.excalidraw .Dialog__action-button svg{display:block;width:1rem;height:1rem}.excalidraw .Dialog__action-button--danger{background-color:var(--color-danger);border-color:var(--color-danger);color:#fff}.excalidraw .Dialog__action-button--primary{background-color:var(--color-primary);border-color:var(--color-primary);color:#fff}.excalidraw.theme--dark .Dialog__action-button--danger{color:var(--color-gray-100)}.excalidraw.theme--dark .Dialog__action-button--primary{color:var(--color-gray-100)}\",\"\"]),t.Z=a},7955:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(9669),n.b),u=a()(o()),d=s()(c);u.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .ExportDialog__preview{--preview-padding: calc(var(--space-factor) * 4);background:url(\"+d+\") left center;text-align:center;padding:var(--preview-padding);margin-bottom:calc(var(--space-factor)*3);display:flex;justify-content:center;align-items:center}.excalidraw .ExportDialog__preview canvas{max-width:calc(100% - var(--preview-padding)*2);max-height:25rem}.excalidraw.theme--dark .ExportDialog__preview canvas{-webkit-filter:none;filter:none}.excalidraw .ExportDialog__actions{width:100%;display:flex;grid-gap:calc(var(--space-factor)*2);align-items:top;justify-content:space-between}.excalidraw--mobile.excalidraw .ExportDialog{display:flex;flex-direction:column}.excalidraw--mobile.excalidraw .ExportDialog__actions{flex-direction:column;align-items:center}.excalidraw--mobile.excalidraw .ExportDialog__actions>*{margin-bottom:calc(var(--space-factor)*3)}.excalidraw--mobile.excalidraw .ExportDialog__preview canvas{max-height:30vh}.excalidraw--mobile.excalidraw .ExportDialog__dialog,.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{height:100%;box-sizing:border-box}.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{overflow-y:auto}.excalidraw .ExportDialog--json .ExportDialog-cards{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));justify-items:center;row-gap:2em}@media(max-width: 460px){.excalidraw .ExportDialog--json .ExportDialog-cards{grid-template-columns:repeat(auto-fit, minmax(240px, 1fr))}.excalidraw .ExportDialog--json .ExportDialog-cards .Card-details{min-height:40px}}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;margin:1em auto;align-items:flex-start;flex-direction:column}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName .TextInput{width:auto}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName-label{margin:.625em 0;font-weight:bold}.excalidraw button.ExportDialog-imageExportButton{border:0;width:5rem;height:5rem;margin:0 .2em;padding:0;display:flex;align-items:center;justify-content:center;border-radius:1rem;background-color:var(--button-color);box-shadow:0 3px 5px -1px rgba(0,0,0,.28),0 6px 10px 0 rgba(0,0,0,.14);font-family:Cascadia;font-size:1.8em;color:#fff}.excalidraw button.ExportDialog-imageExportButton:hover{background-color:var(--button-color-darker)}.excalidraw button.ExportDialog-imageExportButton:active{background-color:var(--button-color-darkest);box-shadow:none}.excalidraw button.ExportDialog-imageExportButton svg{width:.9em}\",\"\"]),t.Z=u},3195:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .FixedSideContainer{position:absolute;pointer-events:none}.excalidraw .FixedSideContainer>*{pointer-events:all}.excalidraw .FixedSideContainer_side_top{left:var(--editor-container-padding);top:var(--editor-container-padding);right:var(--editor-container-padding);bottom:var(--editor-container-padding);z-index:2}.excalidraw .FixedSideContainer_side_top.zen-mode{right:42px}\",\"\"]),t.Z=a},2978:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .HelpDialog .Modal__content{max-width:960px}.excalidraw .HelpDialog h3{margin:1.5rem 0;font-weight:bold;font-size:1.125rem}.excalidraw .HelpDialog__header{display:flex;flex-wrap:wrap;gap:.75rem}.excalidraw .HelpDialog__btn{display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;align-items:center;border:1px solid var(--default-border-color);padding:.625rem 1rem;border-radius:var(--border-radius-lg);color:var(--text-primary-color);font-weight:600;font-size:.75rem;letter-spacing:.4px}.excalidraw .HelpDialog__btn:hover{text-decoration:none}.excalidraw .HelpDialog__link-icon{line-height:0}.excalidraw .HelpDialog__link-icon svg{width:1rem;height:1rem}.excalidraw .HelpDialog__islands-container{display:grid;grid-column-gap:1.5rem;grid-row-gap:2rem}@media screen and (min-width: 1024px){.excalidraw .HelpDialog__islands-container{grid-template-columns:1fr 1fr}}@media screen and (min-width: 1024px){.excalidraw .HelpDialog__island--tools{grid-area:1\/1\/2\/2}.excalidraw .HelpDialog__island--view{grid-area:2\/1\/3\/2}.excalidraw .HelpDialog__island--editor{grid-area:1\/2\/3\/3}}.excalidraw .HelpDialog__island h4{font-size:1rem;font-weight:bold;margin:0;margin-bottom:.625rem}.excalidraw .HelpDialog__island-content{border:1px solid var(--dialog-border-color);border-radius:var(--border-radius-lg)}.excalidraw .HelpDialog__shortcut{border-bottom:1px solid var(--dialog-border-color);padding:.375rem .75rem;display:flex;justify-content:space-between;align-items:center;font-size:.875rem;-webkit-column-gap:.5rem;column-gap:.5rem}.excalidraw .HelpDialog__shortcut:last-child{border-bottom:none}.excalidraw .HelpDialog__key-container{display:flex;align-items:center;-webkit-column-gap:.25rem;column-gap:.25rem;flex-shrink:0}.excalidraw .HelpDialog__key{display:flex;box-sizing:border-box;font-size:.625rem;background-color:var(--color-primary-light);border-radius:var(--border-radius-md);padding:.5rem;word-break:keep-all;align-items:center;font-family:inherit;line-height:1}\",\"\"]),t.Z=a},1587:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .HintViewer{pointer-events:none;box-sizing:border-box;position:absolute;display:flex;justify-content:center;left:0;top:100%;max-width:100%;width:100%;margin-top:.5rem;text-align:center;color:var(--color-gray-40);font-size:.75rem}.excalidraw--mobile.excalidraw .HintViewer{position:static;padding-right:2rem}.excalidraw .HintViewer>span{padding:.25rem}.excalidraw.theme--dark .HintViewer{color:var(--color-gray-60)}\",\"\"]),t.Z=a},9478:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .picker-container{display:inline-block;box-sizing:border-box;margin-right:.25rem}.excalidraw .picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 2px 2px 4px 2px;border-radius:4px;position:absolute}.excalidraw .picker-container button,.excalidraw .picker button{position:relative;display:flex;align-items:center;justify-content:center}.excalidraw .picker-container button:focus-visible,.excalidraw .picker button:focus-visible{outline:rgba(0,0,0,0);background-color:var(--button-gray-2)}.excalidraw .picker-container button:focus-visible svg,.excalidraw .picker button:focus-visible svg{opacity:1}.excalidraw .picker-container button:hover,.excalidraw .picker button:hover{background-color:var(--button-gray-2)}.excalidraw .picker-container button:active,.excalidraw .picker button:active{background-color:var(--button-gray-3)}.excalidraw .picker-container button:disabled,.excalidraw .picker button:disabled{cursor:not-allowed}.excalidraw .picker-container button svg,.excalidraw .picker button svg{margin:0;width:36px;height:18px;pointer-events:none}.excalidraw .picker button{padding:.25rem .28rem .35rem .25rem}.excalidraw .picker-triangle{width:0;height:0;position:relative;top:-10px;z-index:10}:root[dir=ltr] .excalidraw .picker-triangle{left:12px}:root[dir=rtl] .excalidraw .picker-triangle{right:12px}.excalidraw .picker-triangle:before{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,.1);top:-1px}.excalidraw .picker-triangle:after{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:rgba(0,0,0,0) rgba(0,0,0,0) var(--popup-bg-color)}.excalidraw .picker-content{padding:.5rem;display:grid;grid-template-columns:repeat(3, auto);grid-gap:.5rem;border-radius:4px}:root[dir=rtl] .excalidraw .picker-content{padding:.4rem}.excalidraw .picker-keybinding{position:absolute;bottom:2px;font-size:.7em;color:var(--keybinding-color)}:root[dir=ltr] .excalidraw .picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .picker-keybinding{display:none}.excalidraw .picker-type-canvasBackground .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementBackground .picker-keybinding{color:#fff}.excalidraw .picker-swatch[aria-label=transparent] .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementStroke .picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .picker-type-elementBackground .picker-keybinding{color:#000}.excalidraw.theme--dark .picker-swatch[aria-label=transparent] .picker-keybinding{color:#000}',\"\"]),t.Z=a},7369:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Island{--padding: 0;box-sizing:border-box;background-color:var(--island-bg-color);box-shadow:var(--shadow-island);border-radius:var(--border-radius-lg);padding:calc(var(--padding)*var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .Island.zen-mode{box-shadow:none}\",\"\"]),t.Z=a},1434:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .layer-ui__wrapper.animate{transition:width .1s ease-in-out}.excalidraw .layer-ui__wrapper{position:absolute;width:100%;height:100%;pointer-events:none;z-index:var(--zIndex-layerUI)}.excalidraw .layer-ui__wrapper__top-right{display:flex;gap:.75rem}.excalidraw .layer-ui__wrapper__footer{width:100%}.excalidraw .layer-ui__wrapper__footer-right{z-index:100;display:flex}.excalidraw .layer-ui__wrapper .zen-mode-transition{transition:-webkit-transform .5s ease-in-out;transition:transform .5s ease-in-out;transition:transform .5s ease-in-out, -webkit-transform .5s ease-in-out}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}.excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-bottom{-webkit-transform:translate(0, 92px);transform:translate(0, 92px)}.excalidraw .layer-ui__wrapper .disable-zen-mode{height:30px;position:absolute;bottom:10px;font-size:10px;padding:10px;font-weight:500;opacity:0;visibility:hidden;transition:visibility 0s linear 0s,opacity .5s}[dir=ltr] .excalidraw .layer-ui__wrapper .disable-zen-mode{right:15px}[dir=rtl] .excalidraw .layer-ui__wrapper .disable-zen-mode{left:15px}.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{opacity:1;visibility:visible;transition:visibility 0s linear 300ms,opacity .5s;transition-delay:.8s}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-left,.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right,.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{pointer-events:all}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right{margin-top:auto;margin-bottom:auto}\",\"\"]),t.Z=a},2316:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.library-button{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--island-bg-color);width:auto;height:var(--lg-button-size);display:flex;align-items:center;gap:.5rem;line-height:0;font-size:.75rem;letter-spacing:.4px}.library-button svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.library-button:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.library-button:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.library-button.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.library-button.active:hover{background-color:var(--color-primary-light)}.library-button.active svg{color:var(--button-color, var(--color-primary-darker))}.library-button svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.library-button__label{display:none}@media screen and (min-width: 1024px){.library-button__label{display:block}}\",\"\"]),t.Z=a},8923:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .layer-ui__library-sidebar{display:flex;flex-direction:column}.excalidraw .layer-ui__library{display:flex;flex-direction:column;flex:1 1 auto}.excalidraw .layer-ui__library .layer-ui__library-header{display:flex;align-items:center;width:100%;margin:2px 0 15px 0}.excalidraw .layer-ui__library .layer-ui__library-header .Spinner{margin-right:1rem}.excalidraw .layer-ui__library .layer-ui__library-header button{margin:0 2px}.excalidraw .layer-ui__sidebar .library-menu-items-container{height:100%;width:100%}.excalidraw .library-actions-counter{background-color:var(--color-primary);color:var(--color-primary-light);font-weight:bold;display:flex;align-items:center;justify-content:center;border-radius:50%;width:1rem;height:1rem;position:absolute;bottom:-0.25rem;right:-0.25rem;font-size:.625rem;pointer-events:none}.excalidraw .layer-ui__library-message{padding:2rem;min-width:200px;display:flex;flex-direction:column;align-items:center;flex-grow:1;justify-content:center}.excalidraw .layer-ui__library-message span{font-size:.8em}.excalidraw .publish-library-success .Dialog__content{display:flex;flex-direction:column}.excalidraw .publish-library-success-close.ToolIcon_type_button{background-color:#228be6;align-self:flex-end}.excalidraw .publish-library-success-close.ToolIcon_type_button:hover{background-color:#1971c2}.excalidraw .publish-library-success-close.ToolIcon_type_button .ToolIcon__icon{width:auto;font-size:1rem;color:#fff;padding:0 .5rem}.excalidraw .library-menu-browse-button{margin:1rem auto;padding:.875rem 1rem;display:flex;align-items:center;justify-content:center;overflow:hidden;position:relative;border-radius:var(--border-radius-lg);background-color:var(--color-primary);color:#fff;text-align:center;white-space:nowrap;text-decoration:none !important;font-weight:600;font-size:.75rem}.excalidraw .library-menu-browse-button:hover{background-color:var(--color-primary-darker)}.excalidraw .library-menu-browse-button:active{background-color:var(--color-primary-darkest)}.excalidraw.theme--dark .library-menu-browse-button{color:var(--color-gray-100)}.excalidraw .library-menu-browse-button--mobile{min-height:22px;margin-left:auto}.excalidraw .library-menu-browse-button--mobile a{padding-right:0}.excalidraw .layer-ui__sidebar__header .dropdown-menu.dropdown-menu--mobile{top:100%}.excalidraw .layer-ui__sidebar__header .dropdown-menu .dropdown-menu-container{--gap: 0;z-index:1;position:absolute;top:100%;left:0;width:196px;box-shadow:var(--library-dropdown-shadow);border-radius:var(--border-radius-lg);padding:.25rem .5rem}:root[dir=rtl] .excalidraw .layer-ui__sidebar__header .dropdown-menu .dropdown-menu-container{right:0;left:auto}\",\"\"]),t.Z=a},6440:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw{--container-padding-y: 1.5rem;--container-padding-x: 0.75rem}.excalidraw .library-menu-items__no-items{text-align:center;color:var(--color-gray-70);line-height:1.5;font-size:.875rem;width:100%}.excalidraw .library-menu-items__no-items__label{color:var(--color-primary);font-weight:bold;font-size:1.125rem;margin-bottom:.75rem}.excalidraw.theme--dark .library-menu-items__no-items{color:var(--color-gray-40)}.excalidraw .library-menu-items-container{display:flex;flex-grow:1;flex-shrink:1;flex-basis:0;overflow-y:auto;flex-direction:column;height:100%;justify-content:center;margin:0;border-bottom:1px solid var(--sidebar-border-color);position:relative}.excalidraw .library-menu-items-container__row{display:grid;grid-template-columns:repeat(4, 1fr);gap:1rem}.excalidraw .library-menu-items-container__items{row-gap:.5rem;padding:var(--container-padding-y) var(--container-padding-x);flex:1;overflow-y:auto;overflow-x:hidden;margin-bottom:1rem}.excalidraw .library-menu-items-container__header{color:var(--color-primary);font-size:1.125rem;font-weight:bold;margin-bottom:.75rem}.excalidraw .library-menu-items-container__header--excal{margin-top:2.5rem}.excalidraw .library-menu-items-container .separator{width:100%;display:flex;align-items:center;font-weight:500;font-size:.9rem;margin:.6em .2em;color:var(--text-primary-color)}\",\"\"]),t.Z=a},2701:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .library-unit{align-items:center;border:1px solid rgba(0,0,0,0);display:flex;justify-content:center;position:relative;width:55px;height:55px;box-sizing:border-box;border-radius:var(--border-radius-lg)}.excalidraw .library-unit--hover{border-color:var(--color-primary)}.excalidraw .library-unit--selected{border-color:var(--color-primary);border-width:1px}.excalidraw .library-unit__dragger{display:flex;align-items:center;justify-content:center;height:100%;width:100%}.excalidraw .library-unit__dragger>svg{-webkit-filter:var(--theme-filter);filter:var(--theme-filter);flex-grow:1;max-height:100%;max-width:100%}.excalidraw .library-unit__checkbox-container,.excalidraw .library-unit__checkbox-container:hover,.excalidraw .library-unit__checkbox-container:active{align-items:center;background:none;border:none;color:var(--icon-fill-color);display:flex;justify-content:center;margin:0;padding:.5rem;position:absolute;left:2rem;bottom:2rem;cursor:pointer}.excalidraw .library-unit__checkbox-container input,.excalidraw .library-unit__checkbox-container:hover input,.excalidraw .library-unit__checkbox-container:active input{cursor:pointer}.excalidraw .library-unit__checkbox{position:absolute;top:.125rem;right:.125rem;margin:0}.excalidraw .library-unit__checkbox .Checkbox-box{margin:0;width:1rem;height:1rem;border-radius:4px;background-color:var(--color-primary-light);border:1px solid var(--color-primary);box-shadow:none !important;padding:2px}.excalidraw .library-unit__checkbox.Checkbox:hover .Checkbox-box{background-color:var(--color-primary-light)}.excalidraw .library-unit__checkbox.is-checked .Checkbox-box{background-color:var(--color-primary) !important}.excalidraw .library-unit__checkbox.is-checked .Checkbox-box svg{color:var(--color-primary-light)}.excalidraw .library-unit__removeFromLibrary>svg{height:16px;width:16px}.excalidraw .library-unit__adder{-webkit-transform:scale(1);transform:scale(1);-webkit-animation:library-unit__adder-animation 1s ease-in infinite;animation:library-unit__adder-animation 1s ease-in infinite;position:absolute;width:1.5rem;height:1.5rem;background-color:var(--color-primary);border-radius:var(--border-radius-md);display:flex;justify-content:center;align-items:center;pointer-events:none}.excalidraw .library-unit__adder svg{color:var(--color-primary-light);width:1rem;height:1rem}.excalidraw .library-unit:active .library-unit__adder{-webkit-animation:none;animation:none;-webkit-transform:scale(0.8);transform:scale(0.8)}.excalidraw .library-unit__active{cursor:pointer}@-webkit-keyframes library-unit__adder-animation{0%{-webkit-transform:scale(0.85);transform:scale(0.85)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.85);transform:scale(0.85)}}@keyframes library-unit__adder-animation{0%{-webkit-transform:scale(0.85);transform:scale(0.85)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.85);transform:scale(0.85)}}\",\"\"]),t.Z=a},6843:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw.excalidraw-modal-container{position:absolute;z-index:10}.excalidraw .Modal{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;overflow:auto;padding:calc(var(--space-factor)*10)}.excalidraw .Modal .Island{padding:2.5rem !important}.excalidraw .Modal__background{position:absolute;top:0;left:0;right:0;bottom:0;z-index:1;background-color:rgba(18,18,18,.2)}.excalidraw .Modal__content{position:relative;z-index:2;width:100%;max-width:var(--max-width);max-height:100%;opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px);-webkit-animation:Modal__content_fade-in .1s ease-out .05s forwards;animation:Modal__content_fade-in .1s ease-out .05s forwards;position:relative;overflow-y:auto;background:var(--island-bg-color);border:1px solid var(--dialog-border-color);box-shadow:var(--modal-shadow);border-radius:6px;box-sizing:border-box}.excalidraw .Modal__content:focus{outline:none}.excalidraw--mobile.excalidraw .Modal__content{max-width:100%;border:0;border-radius:0}@-webkit-keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.excalidraw .Modal__close{color:var(--icon-fill-color);margin:0;padding:.375rem;position:absolute;top:1rem;right:1rem;border:0;background-color:rgba(0,0,0,0);line-height:0;cursor:pointer}.excalidraw .Modal__close svg{width:1.5rem;height:1.5rem}.excalidraw--mobile.excalidraw .Modal{padding:0}.excalidraw--mobile.excalidraw .Modal__content{position:absolute;top:0;left:0;right:0;bottom:0}\",\"\"]),t.Z=a},8461:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw--mobile.excalidraw .PasteChartDialog .Island{display:flex;flex-direction:column}.excalidraw .PasteChartDialog .container{display:flex;align-items:center;justify-content:space-around;flex-wrap:wrap}.excalidraw--mobile.excalidraw .PasteChartDialog .container{flex-direction:column;justify-content:center}.excalidraw .PasteChartDialog .ChartPreview{margin:8px;text-align:center;width:192px;height:128px;border-radius:2px;padding:1px;border:1px solid #ced4da;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,0)}.excalidraw .PasteChartDialog .ChartPreview div{display:inline-block}.excalidraw .PasteChartDialog .ChartPreview svg{max-height:120px;max-width:186px}.excalidraw .PasteChartDialog .ChartPreview:hover{padding:0;border:2px solid #339af0}\",\"\"]),t.Z=a},9935:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .popover{position:absolute;z-index:10;padding:5px 0 5px;outline:none}\",\"\"]),t.Z=a},532:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".ProjectName{margin:auto;display:flex;align-items:center}.ProjectName .TextInput{height:calc(1rem - 3px);width:200px;overflow:hidden;text-align:center;margin-left:8px;text-overflow:ellipsis}.ProjectName .TextInput--readonly{background:none;border:none;width:auto;max-width:200px;padding-left:2px}.ProjectName .TextInput--readonly:hover{background:none}\",\"\"]),t.Z=a},7589:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .publish-library__fields{display:flex;flex-direction:column}.excalidraw .publish-library__fields label{padding:1em 0;display:flex;justify-content:space-between;align-items:center}.excalidraw .publish-library__fields label span{font-weight:500;font-size:1rem;color:#868e96}.excalidraw .publish-library__fields label input,.excalidraw .publish-library__fields label textarea{width:70%;padding:.6em;font-family:var(--ui-font)}.excalidraw .publish-library__fields label .required{color:#e03131;margin:.2rem}.excalidraw .publish-library__buttons{display:flex;padding:.2rem 0;justify-content:flex-end;gap:.5rem}.excalidraw .publish-library__buttons .ToolIcon__icon{min-width:2.5rem;width:auto;font-size:1rem}.excalidraw .publish-library__buttons .ToolIcon_type_button{margin-left:1rem;padding:0 .5rem}.excalidraw .publish-library__buttons--confirm.ToolIcon_type_button{background-color:#228be6}.excalidraw .publish-library__buttons--confirm.ToolIcon_type_button:hover{background-color:#1971c2}.excalidraw .publish-library__buttons--cancel.ToolIcon_type_button{background-color:#adb5bd}.excalidraw .publish-library__buttons--cancel.ToolIcon_type_button:hover{background-color:#868e96}.excalidraw .publish-library__buttons .ToolIcon__icon{color:#fff}.excalidraw .publish-library__buttons .ToolIcon__icon .Spinner{--spinner-color: #fff}.excalidraw .publish-library__buttons .ToolIcon__icon .Spinner svg{padding:.5rem}.excalidraw .publish-library .selected-library-items{display:flex;flex-wrap:wrap}.excalidraw .publish-library .selected-library-items .single-library-item-wrapper{width:9rem}.excalidraw .publish-library-warning{color:#fa5252}.excalidraw .publish-library-note{padding:1em 0;font-style:italic;font-size:14px;display:block}.excalidraw .single-library-item{position:relative}.excalidraw .single-library-item-status{position:absolute;top:.3rem;left:.3rem;font-size:.7rem;color:#f03e3e;background:rgba(255,255,255,.9);padding:.1rem .2rem;border-radius:.2rem}.excalidraw .single-library-item__svg{background-color:#fff;padding:.3rem;width:7.5rem;height:7.5rem;border:1px solid var(--button-gray-2)}.excalidraw .single-library-item__svg svg{width:100%;height:100%}.excalidraw .single-library-item .ToolIcon__icon{background-color:#fff;width:auto;height:auto;margin:0 .5rem}.excalidraw .single-library-item .ToolIcon,.excalidraw .single-library-item .ToolIcon_type_button:hover{background-color:#fff}.excalidraw .single-library-item .required,.excalidraw .single-library-item .error{color:#e03131;font-weight:bold;font-size:1rem;margin:.2rem}.excalidraw .single-library-item .error{font-weight:500;margin:0;padding:.3em 0}.excalidraw .single-library-item--remove{position:absolute;top:.2rem;right:1rem}.excalidraw .single-library-item--remove .ToolIcon__icon{margin:0}.excalidraw .single-library-item--remove .ToolIcon__icon{background-color:#fa5252}.excalidraw .single-library-item--remove .ToolIcon__icon:hover{background-color:#f03e3e}.excalidraw .single-library-item--remove .ToolIcon__icon:active{background-color:#e03131}.excalidraw .single-library-item--remove svg{color:#fff;padding:.26rem;border-radius:.3em;width:1rem;height:1rem}\",\"\"]),t.Z=a},8208:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Sidebar__close-btn,.excalidraw .Sidebar__pin-btn,.excalidraw .Sidebar__dropdown-btn{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));width:var(--lg-button-size);height:var(--lg-button-size);padding:0}.excalidraw .Sidebar__close-btn svg,.excalidraw .Sidebar__pin-btn svg,.excalidraw .Sidebar__dropdown-btn svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .Sidebar__close-btn:hover,.excalidraw .Sidebar__pin-btn:hover,.excalidraw .Sidebar__dropdown-btn:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .Sidebar__close-btn:active,.excalidraw .Sidebar__pin-btn:active,.excalidraw .Sidebar__dropdown-btn:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .Sidebar__close-btn.active,.excalidraw .Sidebar__pin-btn.active,.excalidraw .Sidebar__dropdown-btn.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .Sidebar__close-btn.active:hover,.excalidraw .Sidebar__pin-btn.active:hover,.excalidraw .Sidebar__dropdown-btn.active:hover{background-color:var(--color-primary-light)}.excalidraw .Sidebar__close-btn.active svg,.excalidraw .Sidebar__pin-btn.active svg,.excalidraw .Sidebar__dropdown-btn.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .Sidebar__close-btn svg,.excalidraw .Sidebar__pin-btn svg,.excalidraw .Sidebar__dropdown-btn svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.excalidraw .Sidebar__pin-btn--pinned{background-color:var(--color-primary);border-color:var(--color-primary)}.excalidraw .Sidebar__pin-btn--pinned svg{color:#fff}.excalidraw .Sidebar__pin-btn--pinned:hover,.excalidraw .Sidebar__pin-btn--pinned:active{background-color:var(--color-primary-darker)}.excalidraw.theme--dark .Sidebar__pin-btn--pinned svg{color:var(--color-gray-90)}.excalidraw .layer-ui__sidebar{position:absolute;top:0;bottom:0;right:0;z-index:5;margin:0;background-color:var(--sidebar-bg-color);box-shadow:var(--sidebar-shadow);overflow:hidden;border-radius:0;width:calc(302px - var(--space-factor) * 2);border-left:1px solid var(--sidebar-border-color);padding:0;box-sizing:border-box}:root[dir=rtl] .excalidraw .layer-ui__sidebar{left:0;right:auto}.excalidraw .layer-ui__sidebar--docked{box-shadow:none}:root[dir=rtl] .excalidraw .layer-ui__sidebar{border-right:1px solid var(--sidebar-border-color);border-left:0}.excalidraw .layer-ui__sidebar .Island{box-shadow:none}.excalidraw .layer-ui__sidebar .ToolIcon__icon{border-radius:var(--border-radius-md)}.excalidraw .layer-ui__sidebar .ToolIcon__icon__close .Modal__close{width:calc(var(--space-factor)*7);height:calc(var(--space-factor)*7);display:flex;justify-content:center;align-items:center;color:var(--color-text)}.excalidraw .layer-ui__sidebar .Island{--padding: 0;background-color:var(--island-bg-color);border-radius:var(--border-radius-lg);padding:calc(var(--padding)*var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .layer-ui__sidebar__header{box-sizing:border-box;display:flex;justify-content:space-between;align-items:center;width:100%;padding:1rem;border-bottom:1px solid var(--sidebar-border-color)}.excalidraw .layer-ui__sidebar__header__buttons{display:flex;align-items:center;gap:.625rem}\",\"\"]),t.Z=a},5892:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Spinner{display:flex;align-items:center;justify-content:center;height:100%;margin-left:auto;margin-right:auto;--spinner-color: var(--icon-fill-color)}.excalidraw .Spinner svg{-webkit-animation:rotate 1.6s linear infinite;animation:rotate 1.6s linear infinite;-webkit-transform-origin:center center;transform-origin:center center}.excalidraw .Spinner circle{stroke:var(--spinner-color);-webkit-animation:dash 1.6s linear 0s infinite;animation:dash 1.6s linear 0s infinite;stroke-linecap:round}@-webkit-keyframes rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes dash{0%{stroke-dasharray:1,300;stroke-dashoffset:0}50%{stroke-dasharray:150,300;stroke-dashoffset:-200}100%{stroke-dasharray:1,300;stroke-dashoffset:-280}}@keyframes dash{0%{stroke-dasharray:1,300;stroke-dashoffset:0}50%{stroke-dasharray:150,300;stroke-dashoffset:-200}100%{stroke-dasharray:1,300;stroke-dashoffset:-280}}\",\"\"]),t.Z=a},3874:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Stack{--gap: 0;display:grid;gap:calc(var(--space-factor)*var(--gap))}.excalidraw .Stack_vertical{grid-template-columns:auto;grid-auto-flow:row;grid-auto-rows:-webkit-min-content;grid-auto-rows:min-content}.excalidraw .Stack_horizontal{grid-template-rows:auto;grid-auto-flow:column;grid-auto-columns:-webkit-min-content;grid-auto-columns:min-content}\",\"\"]),t.Z=a},2681:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Stats{position:absolute;top:64px;right:12px;font-size:12px;z-index:10;pointer-events:all}.excalidraw .Stats h3{margin:0 24px 8px 0;white-space:nowrap}.excalidraw .Stats .close{float:right;height:16px;width:16px;cursor:pointer}.excalidraw .Stats .close svg{width:100%;height:100%}.excalidraw .Stats table{width:100%}.excalidraw .Stats table th{border-bottom:1px solid var(--input-border-color);padding:4px}.excalidraw .Stats table tr td:nth-child(2){min-width:24px;text-align:right}:root[dir=rtl] .excalidraw .Stats{left:12px;right:initial}:root[dir=rtl] .excalidraw .Stats h3{margin:0 0 8px 24px}:root[dir=rtl] .excalidraw .Stats .close{float:left}\",\"\"]),t.Z=a},6759:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .TextInput{display:inline-block}\",\"\"]),t.Z=a},9650:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Toast{-webkit-animation:fade-in .5s;animation:fade-in .5s;background-color:var(--button-gray-1);border-radius:4px;bottom:10px;box-sizing:border-box;cursor:default;left:50%;margin-left:-150px;padding:4px 0;position:absolute;text-align:center;width:300px;z-index:999999}.excalidraw .Toast .Toast__message{padding:0 1.6rem;color:var(--popup-text-color);white-space:pre-wrap}.excalidraw .Toast .close{position:absolute;top:0;right:0;padding:.4rem}.excalidraw .Toast .close .ToolIcon__icon{width:1.2rem;height:1.2rem}@-webkit-keyframes fade-in{from{opacity:0}to{opacity:1}}@keyframes fade-in{from{opacity:0}to{opacity:1}}\",\"\"]),t.Z=a},2044:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .ToolIcon{border-radius:var(--border-radius-lg);display:inline-flex;align-items:center;position:relative;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;user-select:none}.excalidraw .ToolIcon__hidden{display:none !important}.excalidraw .ToolIcon.fillable .ToolIcon_type_radio:checked+.ToolIcon__icon,.excalidraw .ToolIcon.fillable .ToolIcon_type_checkbox:checked+.ToolIcon__icon{--icon-fill-color: var(--color-primary-darker)}.excalidraw .ToolIcon.fillable .ToolIcon_type_radio:checked+.ToolIcon__icon svg,.excalidraw .ToolIcon.fillable .ToolIcon_type_checkbox:checked+.ToolIcon__icon svg{fill:var(--icon-fill-color)}.excalidraw .ToolIcon .ToolIcon_type_radio:checked+.ToolIcon__icon,.excalidraw .ToolIcon .ToolIcon_type_checkbox:checked+.ToolIcon__icon{background:var(--color-primary-light);--keybinding-color: var(--color-gray-60)}.excalidraw .ToolIcon .ToolIcon_type_radio:checked+.ToolIcon__icon svg,.excalidraw .ToolIcon .ToolIcon_type_checkbox:checked+.ToolIcon__icon svg{color:var(--color-primary-darker)}.excalidraw .ToolIcon .ToolIcon__keybinding{bottom:4px;right:4px}.excalidraw .ToolIcon .ToolIcon__icon:hover{background:var(--button-hover-bg)}.excalidraw .ToolIcon .ToolIcon__icon:active{background:var(--button-hover-bg);border:1px solid var(--color-primary-darkest)}.excalidraw .ToolIcon--plain{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon--plain .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .ToolIcon_type_radio,.excalidraw .ToolIcon_type_checkbox{position:absolute;opacity:0;pointer-events:none}.excalidraw .ToolIcon__icon{box-sizing:border-box;width:var(--default-button-size);height:var(--default-button-size);color:var(--icon-fill-color);display:flex;justify-content:center;align-items:center;border-radius:var(--border-radius-lg)}.excalidraw .ToolIcon__icon+.ToolIcon__label{-webkit-margin-start:0;margin-inline-start:0}.excalidraw .ToolIcon__icon svg{position:relative;width:var(--default-icon-size);height:var(--default-icon-size);color:var(--icon-fill-color)}.excalidraw .ToolIcon__label{display:flex;align-items:center;color:var(--icon-fill-color);font-family:var(--ui-font);margin:0 .8em;text-overflow:ellipsis}.excalidraw .ToolIcon__label .Spinner{margin-left:.6em}.excalidraw .ToolIcon_size_small .ToolIcon__icon{width:2rem;height:2rem;font-size:.8em}.excalidraw .ToolIcon_type_button,.excalidraw .Modal .ToolIcon_type_button,.excalidraw .ToolIcon_type_button{padding:0;border:none;margin:0;font-size:inherit;background-color:initial}.excalidraw .ToolIcon_type_button:focus-visible,.excalidraw .Modal .ToolIcon_type_button:focus-visible,.excalidraw .ToolIcon_type_button:focus-visible{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .ToolIcon_type_button.ToolIcon--selected,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected,.excalidraw .ToolIcon_type_button.ToolIcon--selected{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .ToolIcon_type_button.ToolIcon--selected:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_button:active,.excalidraw .Modal .ToolIcon_type_button:active,.excalidraw .ToolIcon_type_button:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_button--show,.excalidraw .Modal .ToolIcon_type_button--show,.excalidraw .ToolIcon_type_button--show{visibility:visible}.excalidraw .ToolIcon_type_button--hide,.excalidraw .Modal .ToolIcon_type_button--hide,.excalidraw .ToolIcon_type_button--hide{display:none !important}.excalidraw .ToolIcon_type_floating{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon_type_floating:hover{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon_type_floating:active{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon_type_floating .ToolIcon__icon{background-color:var(--button-gray-1);width:2rem;height:2rem}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:hover{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon__keybinding{position:absolute;bottom:2px;right:3px;font-size:.625rem;color:var(--keybinding-color);font-family:var(--ui-font);-webkit-user-select:none;user-select:none}:root[dir=ltr] .excalidraw .unlocked-icon{left:2px}:root[dir=rtl] .excalidraw .unlocked-icon{right:2px}.excalidraw .App-toolbar-container .ToolIcon__icon{width:var(--lg-button-size);height:var(--lg-button-size)}.excalidraw .App-toolbar-container .ToolIcon__icon svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}\",\"\"]),t.Z=a},9144:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .App-toolbar.zen-mode .ToolIcon__keybinding,.excalidraw .App-toolbar.zen-mode .HintViewer{display:none}.excalidraw .App-toolbar__divider{width:1px;height:1.5rem;align-self:center;background-color:var(--default-border-color);margin:0 .5rem}\",\"\"]),t.Z=a},6626:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw-tooltip{position:fixed;z-index:1000;padding:8px;border-radius:6px;box-sizing:border-box;pointer-events:none;word-wrap:break-word;background:#000;line-height:1.5;text-align:center;font-size:13px;font-weight:500;color:#fff;display:none}.excalidraw-tooltip.excalidraw-tooltip--visible{display:block}.excalidraw-tooltip-wrapper{display:flex}.excalidraw-tooltip-icon{width:.9em;height:.9em;margin-left:5px;margin-top:1px;display:flex}.excalidraw--mobile.excalidraw-tooltip-icon{display:none}\",\"\"]),t.Z=a},6359:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .UserList{pointer-events:none;padding:var(--space-factor) var(--space-factor) var(--space-factor) var(--space-factor);display:flex;flex-wrap:wrap;justify-content:flex-end;align-items:center;gap:.625rem;max-height:140px;max-width:290px;overflow:hidden}.excalidraw .UserList:empty{display:none}.excalidraw .UserList>*{pointer-events:all}.excalidraw .UserList_mobile{padding:0;justify-content:normal;margin:.5rem 0}\",\"\"]),t.Z=a},7399:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .dropdown-menu{position:absolute;top:100%;margin-top:.25rem}.excalidraw .dropdown-menu--mobile{bottom:55px;top:auto;left:0;width:100%;display:flex;flex-direction:column;row-gap:.75rem}.excalidraw .dropdown-menu--mobile .dropdown-menu-container{padding:8px 8px;box-sizing:border-box;background-color:var(--island-bg-color);box-shadow:var(--shadow-island);border-radius:var(--border-radius-lg);position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .dropdown-menu--mobile .dropdown-menu-container.zen-mode{box-shadow:none}.excalidraw .dropdown-menu .dropdown-menu-container{background-color:#fff !important;max-height:calc(100vh - 150px);overflow-y:auto;--gap: 2}.excalidraw .dropdown-menu .dropdown-menu-item-base{display:flex;padding:0 .625rem;-webkit-column-gap:.625rem;column-gap:.625rem;font-size:.875rem;color:var(--color-gray-100);width:100%;box-sizing:border-box;font-weight:normal;font-family:inherit}.excalidraw .dropdown-menu .dropdown-menu-item{background-color:rgba(0,0,0,0);border:0;align-items:center;height:2rem;cursor:pointer;border-radius:var(--border-radius-md)}@media screen and (min-width: 1921px){.excalidraw .dropdown-menu .dropdown-menu-item{height:2.25rem}}.excalidraw .dropdown-menu .dropdown-menu-item__text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.excalidraw .dropdown-menu .dropdown-menu-item__shortcut{-webkit-margin-start:auto;margin-inline-start:auto;opacity:.5}.excalidraw .dropdown-menu .dropdown-menu-item:hover{background-color:var(--button-hover-bg);text-decoration:none}.excalidraw .dropdown-menu .dropdown-menu-item svg{width:1rem;height:1rem;display:block}.excalidraw .dropdown-menu .dropdown-menu-item-custom{margin-top:.5rem}.excalidraw .dropdown-menu .dropdown-menu-group-title{font-size:14px;text-align:left;margin:10px 0;font-weight:500}.excalidraw.theme--dark .dropdown-menu-item{color:var(--color-gray-40)}.excalidraw.theme--dark .dropdown-menu-container{background-color:var(--color-gray-90) !important}.excalidraw .dropdown-menu-button{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--island-bg-color);width:var(--lg-button-size);height:var(--lg-button-size)}.excalidraw .dropdown-menu-button svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .dropdown-menu-button:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .dropdown-menu-button:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .dropdown-menu-button.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .dropdown-menu-button.active:hover{background-color:var(--color-primary-light)}.excalidraw .dropdown-menu-button.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .dropdown-menu-button svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.excalidraw .dropdown-menu-button--mobile{border:none;margin:0;padding:0;width:var(--default-button-size);height:var(--default-button-size)}\",\"\"]),t.Z=a},8793:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".footer-center{pointer-events:none;display:flex;width:100%;justify-content:flex-start}.footer-center>*{pointer-events:all}\",\"\"]),t.Z=a},3397:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .collab-button{--button-bg: var(--color-primary);--button-color: white;--button-border: var(--color-primary);--button-width: var(--lg-button-size);--button-height: var(--lg-button-size);--button-hover-bg: var(--color-primary-darker);--button-hover-border: var(--color-primary-darker);--button-active-bg: var(--color-primary-darker);flex-shrink:0}.excalidraw .collab-button.active.active{background-color:#0fb884;border-color:#0fb884}.excalidraw .collab-button.active.active svg{color:#fff}.excalidraw .collab-button.active.active:hover,.excalidraw .collab-button.active.active:active{background-color:#0fb884;border-color:#0fb884}.excalidraw.theme--dark .collab-button{color:var(--color-gray-90)}.excalidraw .CollabButton.is-collaborating{background-color:var(--button-special-active-bg-color)}.excalidraw .CollabButton.is-collaborating .ToolIcon__icon svg,.excalidraw .CollabButton.is-collaborating .ToolIcon__label{color:var(--icon-green-fill-color)}.excalidraw .CollabButton-collaborators{min-width:1em;min-height:1em;line-height:1;position:absolute;bottom:-5px;padding:3px;border-radius:50%;background-color:#b2f2bb;color:#2b8a3e;font-size:.6rem;font-family:\"Cascadia\"}:root[dir=ltr] .excalidraw .CollabButton-collaborators{right:-5px}:root[dir=rtl] .excalidraw .CollabButton-collaborators{left:-5px}',\"\"]),t.Z=a},4343:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .ActiveFile .ActiveFile__fileName{display:flex;align-items:center}.excalidraw .ActiveFile .ActiveFile__fileName span{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:9.3em}.excalidraw .ActiveFile .ActiveFile__fileName svg{width:1.15em;-webkit-margin-end:.3em;margin-inline-end:.3em;-webkit-transform:scaleY(0.9);transform:scaleY(0.9)}\",\"\"]),t.Z=a},1569:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.excalidraw .virgil{font-family:\"Virgil\"}.excalidraw .welcome-screen-decor{pointer-events:none;color:var(--color-gray-40)}.excalidraw.theme--dark .welcome-screen-decor{color:var(--color-gray-60)}@media(max-height: 599px){.excalidraw .welcome-screen-decor-hint{display:none !important}}@media(max-width: 1024px),(max-width: 800px){.excalidraw .welcome-screen-decor-hint .welcome-screen-decor--help,.excalidraw .welcome-screen-decor-hint .welcome-screen-decor--menu{display:none}}.excalidraw .welcome-screen-decor-hint--help{display:flex;position:absolute;right:0;bottom:100%}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--help{left:0;right:auto}.excalidraw .welcome-screen-decor-hint--help svg{margin-top:.5rem;width:85px;height:71px;-webkit-transform:scaleX(-1) rotate(80deg);transform:scaleX(-1) rotate(80deg)}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--help svg{-webkit-transform:rotate(80deg);transform:rotate(80deg)}.excalidraw .welcome-screen-decor-hint--toolbar{position:absolute;top:100%;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);margin-top:2.5rem;display:flex;align-items:baseline}.excalidraw .welcome-screen-decor-hint--toolbar .welcome-screen-decor-hint__label{width:120px;position:relative;top:-0.5rem}.excalidraw .welcome-screen-decor-hint--toolbar svg{width:38px;height:78px}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--toolbar svg{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.excalidraw .welcome-screen-decor-hint--menu{position:absolute;width:320px;font-size:1rem;top:100%;margin-top:.25rem;-webkit-margin-start:.6rem;margin-inline-start:.6rem;display:flex;align-items:flex-end;gap:.5rem}.excalidraw .welcome-screen-decor-hint--menu svg{width:41px;height:94px}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--menu svg{-webkit-transform:scaleX(-1);transform:scaleX(-1)}@media(max-width: 860px){.excalidraw .welcome-screen-decor-hint--menu .welcome-screen-decor-hint__label{max-width:160px}}.excalidraw .welcome-screen-center{display:flex;flex-direction:column;gap:2rem;justify-content:center;align-items:center;position:absolute;pointer-events:none;left:1rem;top:1rem;right:1rem;bottom:1rem}.excalidraw .welcome-screen-center__logo{display:flex;align-items:center;-webkit-column-gap:.75rem;column-gap:.75rem;font-size:2.25rem}.excalidraw .welcome-screen-center__logo svg{width:1.625rem;height:auto}.excalidraw .welcome-screen-center__heading{font-size:1.125rem;text-align:center}.excalidraw .welcome-screen-menu{display:flex;flex-direction:column;gap:2px;justify-content:center;align-items:center}.excalidraw .welcome-screen-menu-item{box-sizing:border-box;pointer-events:all;color:var(--color-gray-50);font-size:.875rem;width:100%;min-width:300px;max-width:400px;display:grid;align-items:center;justify-content:space-between;background:none;border:none;padding:.75rem;border-radius:var(--border-radius-md);grid-template-columns:calc(var(--default-icon-size) + .5rem) 1fr 3rem}.excalidraw .welcome-screen-menu-item__text{display:flex;align-items:center;margin-right:auto;text-align:left;-webkit-column-gap:.5rem;column-gap:.5rem}.excalidraw .welcome-screen-menu-item__icon{width:var(--default-icon-size);height:var(--default-icon-size)}.excalidraw .welcome-screen-menu-item__shortcut{margin-left:auto;color:var(--color-gray-40);font-size:.75rem}.excalidraw:not(:active) .welcome-screen-menu-item:hover{text-decoration:none;background:var(--color-gray-10)}.excalidraw:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__shortcut{color:var(--color-gray-50)}.excalidraw:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__text{color:var(--color-gray-100)}.excalidraw .welcome-screen-menu-item:active{background:var(--color-gray-20)}.excalidraw .welcome-screen-menu-item:active .welcome-screen-menu-item__shortcut{color:var(--color-gray-50)}.excalidraw .welcome-screen-menu-item:active .welcome-screen-menu-item__text{color:var(--color-gray-100)}.excalidraw .welcome-screen-menu-item:active--promo{color:var(--color-promo) !important}.excalidraw .welcome-screen-menu-item:active--promo:hover .welcome-screen-menu-item__text{color:var(--color-promo) !important}.excalidraw.theme--dark .welcome-screen-menu-item{color:var(--color-gray-60)}.excalidraw.theme--dark .welcome-screen-menu-item__shortcut{color:var(--color-gray-60)}.excalidraw.theme--dark:not(:active) .welcome-screen-menu-item:hover{background:var(--color-gray-85)}.excalidraw.theme--dark:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__shortcut{color:var(--color-gray-50)}.excalidraw.theme--dark:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__text{color:var(--color-gray-10)}.excalidraw.theme--dark .welcome-screen-menu-item:active{background-color:var(--color-gray-90)}.excalidraw.theme--dark .welcome-screen-menu-item:active .welcome-screen-menu-item__text{color:var(--color-gray-10)}@media(max-height: 599px){.excalidraw .welcome-screen-center{margin-top:4rem}}@media(min-height: 600px)and (max-height: 900px){.excalidraw .welcome-screen-center{margin-top:8rem}}@media(max-height: 500px),(max-width: 320px){.excalidraw .welcome-screen-center{display:none}}',\"\"]),t.Z=a},9915:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".visually-hidden{position:absolute !important;height:1px;width:1px;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);white-space:nowrap;-webkit-user-select:none;user-select:none}.LoadingMessage{position:absolute;top:0;right:0;bottom:0;left:0;z-index:999;display:flex;flex-direction:column;align-items:center;justify-content:center;pointer-events:none}.LoadingMessage .Spinner{font-size:2.8em}.LoadingMessage .LoadingMessage-text{margin-top:1em;font-size:.8em}.LoadingMessage--dark{background-color:#121212;color:#ced4da}\",\"\"]),t.Z=a},9310:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(7984),n.b),u=new URL(n(1639),n.b),d=a()(o()),f=s()(c),p=s()(u);d.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}:export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw{--theme-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: var(--color-gray-20);--dropdown-icon: url(\"+f+\");--focus-highlight-color: #a5d8ff;--icon-fill-color: var(--color-gray-80);--icon-green-fill-color: #2b8a3e;--default-bg-color: #ffffff;--input-bg-color: #ffffff;--input-border-color: #ced4da;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.96);--keybinding-color: var(--color-gray-40);--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0px 7px 14px rgba(0, 0, 0, 0.05), 0px 0px 3.12708px rgba(0, 0, 0, 0.0798), 0px 0px 0.931014px rgba(0, 0, 0, 0.1702);--button-hover-bg: var(--color-gray-10);--default-border-color: var(--color-gray-30);--default-button-size: 2rem;--default-icon-size: 1rem;--lg-button-size: 2.25rem;--lg-icon-size: 1rem;--editor-container-padding: 1rem;--scrollbar-thumb: var(--button-gray-2);--scrollbar-thumb-hover: var(--button-gray-3);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-20);--sidebar-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--sidebar-border-color: var(--color-gray-20);--sidebar-bg-color: #fff;--library-dropdown-shadow: 0px 15px 6px rgba(0, 0, 0, 0.01), 0px 8px 5px rgba(0, 0, 0, 0.05), 0px 4px 4px rgba(0, 0, 0, 0.09), 0px 1px 2px rgba(0, 0, 0, 0.1), 0px 0px 0px rgba(0, 0, 0, 0.1);--space-factor: 0.25rem;--text-primary-color: var(--color-gray-80);--color-selection: #6965db;--color-primary: #6965db;--color-primary-darker: #5b57d1;--color-primary-darkest: #4a47b1;--color-primary-light: #e3e2fe;--color-gray-10: #f5f5f5;--color-gray-20: #ebebeb;--color-gray-30: #d6d6d6;--color-gray-40: #b8b8b8;--color-gray-50: #999999;--color-gray-60: #7a7a7a;--color-gray-70: #5c5c5c;--color-gray-80: #3d3d3d;--color-gray-85: #242424;--color-gray-90: #1e1e1e;--color-gray-100: #121212;--color-warning: #fceeca;--color-text-warning: var(--text-primary-color);--color-danger: #db6965;--color-promo: #e70078;--border-radius-md: 0.375rem;--border-radius-lg: 0.5rem}@media screen and (min-device-width: 1921px){.excalidraw{--lg-button-size: 2.5rem;--lg-icon-size: 1.25rem;--default-button-size: 2.25rem;--default-icon-size: 1.25rem}}.excalidraw.theme--dark.theme--dark-background-none{background:none}.excalidraw.theme--dark{--theme-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: var(--color-gray-80);--dropdown-icon: url(\"+p+');--focus-highlight-color: #228be6;--icon-fill-color: var(--color-gray-40);--icon-green-fill-color: #69db7c;--default-bg-color: #121212;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: #262627;--keybinding-color: var(--color-gray-60);--link-color: #4dabf7;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--text-primary-color: var(--color-gray-40);--button-hover-bg: var(--color-gray-80);--default-border-color: var(--color-gray-80);--shadow-island: 0px 13px 33px rgba(0, 0, 0, 0.07), 0px 4.13px 9.94853px rgba(0, 0, 0, 0.0456112), 0px 1.13px 4.13211px rgba(0, 0, 0, 0.035), 0px 0.769896px 1.4945px rgba(0, 0, 0, 0.0243888);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-85);--sidebar-border-color: var(--color-gray-85);--sidebar-bg-color: #191919;--scrollbar-thumb: #343a40;--scrollbar-thumb-hover: #495057;--color-selection: #3530c4;--color-primary: #a8a5ff;--color-primary-darker: #b2aeff;--color-primary-darkest: #beb9ff;--color-primary-light: #4f4d6f;--color-text-warning: var(--color-gray-80);--color-danger: #ffa8a5;--color-promo: #d297ff}:root{--zIndex-canvas: 1;--zIndex-wysiwyg: 2;--zIndex-layerUI: 3}.excalidraw{--ui-font: Assistant, system-ui, BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;font-family:var(--ui-font);position:relative;overflow:hidden;color:var(--text-primary-color);display:flex;top:0;bottom:0;left:0;right:0;height:100%;width:100%;-webkit-user-select:none;user-select:none}.excalidraw button{cursor:pointer}.excalidraw:focus{outline:none}.excalidraw a{font-weight:500;text-decoration:none;color:var(--link-color)}.excalidraw a:hover{text-decoration:underline}.excalidraw canvas{touch-action:none;image-rendering:pixelated;image-rendering:-moz-crisp-edges;z-index:var(--zIndex-canvas)}.excalidraw__canvas{position:absolute}.excalidraw.theme--dark canvas{-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .FixedSideContainer{padding-top:var(--sat, 0);padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0)}.excalidraw .panelRow{display:flex;justify-content:space-between}.excalidraw .panelColumn{display:flex;flex-direction:column;row-gap:.75rem}.excalidraw .panelColumn h3,.excalidraw .panelColumn legend,.excalidraw .panelColumn .control-label{margin:0;margin-bottom:.25rem;font-size:.75rem;color:var(--text-primary-color);font-weight:normal;display:block}.excalidraw .panelColumn .control-label input{display:block;width:100%}.excalidraw .panelColumn legend{padding:0}.excalidraw .panelColumn .iconSelectList{flex-wrap:wrap;position:relative}.excalidraw .panelColumn .buttonList{flex-wrap:wrap;display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;row-gap:.5rem}.excalidraw .panelColumn .buttonList label{font-size:.75rem}.excalidraw .panelColumn .buttonList input[type=radio],.excalidraw .panelColumn .buttonList input[type=button]{opacity:0;position:absolute;pointer-events:none}.excalidraw .panelColumn .buttonList .iconRow{margin-top:8px}.excalidraw .panelColumn fieldset{margin:0;padding:0;border:none}.excalidraw .divider{width:1px;background-color:#e9ecef;margin:1px}.excalidraw .welcome-screen-menu-item:focus-visible,.excalidraw .dropdown-menu-item:focus-visible,.excalidraw button:focus-visible,.excalidraw .buttonList label:focus-within,.excalidraw input:focus-visible{outline:rgba(0,0,0,0);box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .buttonList .ToolIcon__icon{all:unset !important;display:flex !important}.excalidraw .buttonList button{background-color:rgba(0,0,0,0)}.excalidraw .buttonList label,.excalidraw .buttonList button,.excalidraw .buttonList .zIndexButton{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));padding:0}.excalidraw .buttonList label svg,.excalidraw .buttonList button svg,.excalidraw .buttonList .zIndexButton svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .buttonList label:hover,.excalidraw .buttonList button:hover,.excalidraw .buttonList .zIndexButton:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .buttonList label:active,.excalidraw .buttonList button:active,.excalidraw .buttonList .zIndexButton:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .buttonList label.active,.excalidraw .buttonList button.active,.excalidraw .buttonList .zIndexButton.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .buttonList label.active:hover,.excalidraw .buttonList button.active:hover,.excalidraw .buttonList .zIndexButton.active:hover{background-color:var(--color-primary-light)}.excalidraw .buttonList label.active svg,.excalidraw .buttonList button.active svg,.excalidraw .buttonList .zIndexButton.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .buttonList label svg,.excalidraw .buttonList button svg,.excalidraw .buttonList .zIndexButton svg{width:var(--default-icon-size);height:var(--default-icon-size)}.excalidraw .App-top-bar{z-index:var(--zIndex-layerUI);display:flex;flex-direction:column;align-items:center}.excalidraw .App-bottom-bar{position:absolute;top:0;bottom:0;left:0;right:0;--bar-padding: calc(4 * var(--space-factor));padding-top:max(var(--bar-padding), var(--sat,0));padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0);z-index:4;display:flex;align-items:flex-end;pointer-events:none}.excalidraw .App-bottom-bar>.Island{width:100%;max-width:100%;min-width:100%;box-sizing:border-box;max-height:100%;display:flex;flex-direction:column;pointer-events:initial}.excalidraw .App-bottom-bar>.Island .panelColumn{padding:8px 8px 0 8px}.excalidraw .App-toolbar{width:100%}.excalidraw .App-toolbar .eraser.ToolIcon:hover{--icon-fill-color: #fff;--keybinding-color: #fff}.excalidraw .App-toolbar .eraser.active{background-color:var(--color-primary)}.excalidraw .App-toolbar-content{display:flex;align-items:center;justify-content:space-between;padding:8px}.excalidraw .App-mobile-menu{width:100%;overflow-x:visible;overflow-y:auto;box-sizing:border-box;margin-bottom:var(--bar-padding)}.excalidraw .App-menu{display:grid;color:var(--icon-fill-color)}.excalidraw .shapes-section{display:flex;justify-content:center;pointer-events:none !important}.excalidraw .shapes-section>*{pointer-events:all}.excalidraw .App-menu_top{grid-template-columns:1fr 2fr 1fr;grid-gap:2rem;align-items:flex-start;cursor:default;pointer-events:none !important}@media(min-width: 1536px){.excalidraw .App-menu_top{grid-template-columns:1fr 1fr 1fr;grid-gap:3rem}}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_top>*{pointer-events:all}.excalidraw .App-menu_top>*:first-child{justify-self:flex-start}.excalidraw .App-menu_top>*:last-child{justify-self:flex-end}.excalidraw .App-menu_bottom{position:absolute;bottom:1rem;display:flex;justify-content:space-between;align-items:flex-start;cursor:default;pointer-events:none !important;box-sizing:border-box;padding:0 1rem}.excalidraw .App-menu_bottom--transition-left section{width:185px}.excalidraw .App-menu_bottom section{display:flex}.excalidraw .App-menu_bottom>*:first-child{justify-self:flex-start}.excalidraw .App-menu_bottom>*:last-child{justify-self:flex-end}.excalidraw .App-menu_left{grid-template-rows:1fr auto 1fr;height:100%}.excalidraw .App-menu_right{grid-template-rows:1fr;height:100%}.excalidraw .App-menu__left{overflow-y:auto;padding:.75rem;width:202px;box-sizing:border-box;position:absolute}.excalidraw .dropdown-select{height:1.5rem;padding:0;-webkit-padding-start:.5rem;padding-inline-start:.5rem;-webkit-padding-end:1.5rem;padding-inline-end:1.5rem;color:var(--icon-fill-color);background-color:var(--button-gray-1);border-radius:var(--space-factor);border:1px solid var(--button-gray-2);font-size:.8rem;outline:none;-webkit-appearance:none;appearance:none;background-image:var(--dropdown-icon);background-repeat:no-repeat;background-position:right .7rem top 50%,0 0;background-size:.65em auto,100%}:root[dir=rtl] .excalidraw .dropdown-select{background-position:left .7rem top 50%,0 0}.excalidraw .dropdown-select:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .dropdown-select:hover{background-color:var(--button-gray-2)}.excalidraw .dropdown-select:active{background-color:var(--button-gray-2)}.excalidraw .dropdown-select__language{height:2rem;background-color:var(--island-bg-color);border-color:var(--default-border-color) !important;cursor:pointer}.excalidraw .dropdown-select__language:hover{background-color:var(--island-bg-color)}.excalidraw .disable-zen-mode{border-radius:var(--border-radius-lg);background-color:var(--color-gray-20);border:1px solid var(--color-gray-30);padding:10px 20px}.excalidraw .disable-zen-mode:hover{background-color:var(--color-gray-30)}.excalidraw .scroll-back-to-content{border-radius:var(--border-radius-lg);background-color:var(--island-bg-color);color:var(--icon-fill-color);border:1px solid var(--default-border-color);padding:10px 20px;position:absolute;left:50%;bottom:30px;-webkit-transform:translateX(-50%);transform:translateX(-50%);pointer-events:all}.excalidraw .scroll-back-to-content:hover{background-color:var(--button-hover-bg)}.excalidraw .scroll-back-to-content:active{border:1px solid var(--color-primary-darkest)}.excalidraw .help-icon{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--island-bg-color);width:var(--lg-button-size);height:var(--lg-button-size)}.excalidraw .help-icon svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .help-icon:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .help-icon:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .help-icon.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .help-icon.active:hover{background-color:var(--color-primary-light)}.excalidraw .help-icon.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .help-icon svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.excalidraw .reset-zoom-button{font-family:var(--ui-font)}.excalidraw .finalize-button{display:grid;grid-auto-flow:column;gap:.4em;margin-top:auto;margin-bottom:auto;-webkit-margin-start:.6em;margin-inline-start:.6em}.excalidraw .undo-redo-buttons,.excalidraw .eraser-buttons{display:grid;grid-auto-flow:column;margin-top:auto;margin-bottom:auto;-webkit-margin-start:.6em;margin-inline-start:.6em}.excalidraw--mobile.excalidraw aside{display:none}.excalidraw--mobile.excalidraw .scroll-back-to-content{bottom:calc(80px + var(--sab, 0));z-index:-1}:root[dir=rtl] .excalidraw .rtl-mirror{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.excalidraw .zen-mode-visibility{visibility:visible;opacity:1;height:auto;width:auto;transition:opacity .5s}.excalidraw .zen-mode-visibility.zen-mode-visibility--hidden{visibility:hidden;opacity:0;height:0;width:0;transition:opacity .5s}.excalidraw .disable-pointerEvents{pointer-events:none !important}.excalidraw.excalidraw--view-mode .App-menu{display:flex;justify-content:space-between}.excalidraw input[type=text],.excalidraw textarea:not(.excalidraw-wysiwyg){color:var(--text-primary-color);border:1.5px solid var(--input-border-color);padding:.75rem;white-space:nowrap;border-radius:var(--space-factor);background-color:var(--input-bg-color)}.excalidraw input[type=text]:not(:focus):hover,.excalidraw textarea:not(.excalidraw-wysiwyg):not(:focus):hover{background-color:var(--input-hover-bg-color)}.excalidraw input[type=text]:focus,.excalidraw textarea:not(.excalidraw-wysiwyg):focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}@media print{.excalidraw .App-bottom-bar,.excalidraw .FixedSideContainer,.excalidraw .layer-ui__wrapper{display:none}}.excalidraw ::-webkit-scrollbar{width:3px;height:3px}.excalidraw ::-webkit-scrollbar-thumb{background:var(--scrollbar-thumb);border-radius:10px}.excalidraw ::-webkit-scrollbar-thumb:hover{background:var(--scrollbar-thumb-hover)}.excalidraw ::-webkit-scrollbar-thumb:active{background:var(--scrollbar-thumb)}.excalidraw .mobile-misc-tools-container{position:absolute;top:calc(5rem - var(--editor-container-padding));right:calc(var(--editor-container-padding)*-1);display:flex;flex-direction:column;border:1px solid var(--sidebar-border-color);border-top-left-radius:var(--border-radius-lg);border-bottom-left-radius:var(--border-radius-lg);border-right:0;overflow:hidden;background-color:var(--island-bg-color)}.excalidraw .mobile-misc-tools-container .ToolIcon__icon{border-radius:0}.excalidraw .mobile-misc-tools-container .library-button{border:0}.excalidraw .App-toolbar--mobile{overflow-x:auto;max-width:90vw}.excalidraw .App-toolbar--mobile .ToolIcon__keybinding{display:none}.excalidraw .UserList-Wrapper{margin:0;padding:0;border:none;text-align:left}.excalidraw .UserList-Wrapper legend{display:block;font-size:.75rem;font-weight:400;margin:0 0 .25rem;padding:0}.ErrorSplash.excalidraw{min-height:100vh;padding:20px 0;overflow:auto;display:flex;align-items:center;justify-content:center;-webkit-user-select:text;user-select:text}.ErrorSplash.excalidraw .ErrorSplash-messageContainer{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:40px;background-color:#ffe3e3;border:3px solid #c92a2a}.ErrorSplash.excalidraw .ErrorSplash-paragraph{margin:15px 0;max-width:600px}.ErrorSplash.excalidraw .ErrorSplash-paragraph.align-center{text-align:center}.ErrorSplash.excalidraw .bigger,.ErrorSplash.excalidraw .bigger button{font-size:1.1em}.ErrorSplash.excalidraw .smaller,.ErrorSplash.excalidraw .smaller button{font-size:.9em}.ErrorSplash.excalidraw .ErrorSplash-details{display:flex;flex-direction:column;align-items:flex-start}.ErrorSplash.excalidraw .ErrorSplash-details textarea{width:100%;margin:10px 0;font-family:\"Cascadia\";font-size:.8em}',\"\"]),t.Z=d},6464:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\"\",\"\"]),a.locals={themeFilter:\"invert(93%) hue-rotate(180deg)\",rightSidebarWidth:\"302px\"},t.Z=a},5260:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw-hyperlinkContainer{display:flex;align-items:center;justify-content:space-between;position:absolute;box-shadow:0px 2px 4px 0 rgba(0,0,0,.3);z-index:100;background:var(--island-bg-color);border-radius:var(--border-radius-md);box-sizing:border-box;min-height:42px}.excalidraw-hyperlinkContainer-input,.excalidraw-hyperlinkContainer button{z-index:100}.excalidraw-hyperlinkContainer-input,.excalidraw-hyperlinkContainer-link{height:24px;padding:0 8px;line-height:24px;font-size:.9rem;font-weight:500;font-family:var(--ui-font)}.excalidraw-hyperlinkContainer-input{width:18rem;border:none;background-color:rgba(0,0,0,0);color:var(--text-primary-color);outline:none;border:none;box-shadow:none !important}.excalidraw-hyperlinkContainer-link{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:15rem}.excalidraw-hyperlinkContainer button{color:#228be6;background-color:rgba(0,0,0,0) !important;font-weight:500}.excalidraw-hyperlinkContainer button.excalidraw-hyperlinkContainer--remove{color:#c92a2a}.excalidraw-hyperlinkContainer .d-none{display:none}.excalidraw-hyperlinkContainer--remove .ToolIcon__icon svg{color:#fa5252}.excalidraw-hyperlinkContainer .ToolIcon__icon{width:2rem;height:2rem}.excalidraw-hyperlinkContainer__buttons{flex:0 0 auto}\",\"\"]),t.Z=a},3645:function(e){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=\"\",r=void 0!==t[5];return t[4]&&(n+=\"@supports (\".concat(t[4],\") {\")),t[2]&&(n+=\"@media \".concat(t[2],\" {\")),r&&(n+=\"@layer\".concat(t[5].length>0?\" \".concat(t[5]):\"\",\" {\")),n+=e(t),r&&(n+=\"}\"),t[2]&&(n+=\"}\"),t[4]&&(n+=\"}\"),n})).join(\"\")},t.i=function(e,n,r,o,i){\"string\"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]=\"@layer\".concat(u[5].length>0?\" \".concat(u[5]):\"\",\" {\").concat(u[1],\"}\")),u[5]=i),n&&(u[2]?(u[1]=\"@media \".concat(u[2],\" {\").concat(u[1],\"}\"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]=\"@supports (\".concat(u[4],\") {\").concat(u[1],\"}\"),u[4]=o):u[4]=\"\".concat(o)),t.push(u))}},t}},1667:function(e){\"use strict\";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),\/^['\"].*['\"]$\/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),\/[\"'() \\t\\n]|(%20)\/.test(e)||t.needQuotes?'\"'.concat(e.replace(\/\"\/g,'\\\\\"').replace(\/\\n\/g,\"\\\\n\"),'\"'):e):e}},8081:function(e){\"use strict\";e.exports=function(e){return e[1]}},202:function(e,t,n){\"use strict\";n.d(t,{JQ:function(){return w},vD:function(){return y},y7:function(){return b}});var r=n(1930),o=n(7169),i=n(2335),a=n(1047),l=n(1935),s=n(5710),c=n(6906),u=n(1974),d=n(75),f=n(6340),p=n(7901);function h(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return m(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var b=(0,p.z)({name:\"unbindText\",contextItemLabel:\"labels.unbindText\",trackEvent:{category:\"element\"},predicate:function(e,t){return(0,d.eD)(e,t).some((function(e){return(0,u.Xo)(e)}))},perform:function(e,t){return(0,d.eD)((0,a.Lm)(e),t).forEach((function(e){var t=(0,s.WJ)(e);if(t){var n,r=(0,s.X1)(t.originalText,(0,f.mO)(t),t.lineHeight),o=r.width,i=r.height,a=r.baseline,u=(0,c.eR)(e.id);(0,c.kT)(e.id);var d=(0,s.FE)(e,t),p=d.x,h=d.y;(0,l.DR)(t,{containerId:null,width:o,height:i,baseline:a,text:t.originalText,x:p,y:h}),(0,l.DR)(e,{boundElements:null===(n=e.boundElements)||void 0===n?void 0:n.filter((function(e){return e.id!==t.id})),height:u||e.height})}})),{elements:e,appState:t,commitToHistory:!0}}}),y=(0,p.z)({name:\"bindText\",contextItemLabel:\"labels.bindText\",trackEvent:{category:\"element\"},predicate:function(e,t){var n=(0,d.eD)(e,t);if(2===n.length){var r,o=(0,a.iB)(n[0])||(0,a.iB)(n[1]);if((0,u.mG)(n[0])?r=n[0]:(0,u.mG)(n[1])&&(r=n[1]),o&&r&&null===(0,s.WJ)(r))return!0}return!1},perform:function(e,t){var n,r,f=(0,d.eD)((0,a.Lm)(e),t);(0,a.iB)(f[0])&&(0,u.mG)(f[1])?(n=f[0],r=f[1]):(n=f[1],r=f[0]),(0,l.DR)(n,{containerId:r.id,verticalAlign:i.oX.MIDDLE,textAlign:i.I8.CENTER}),(0,l.DR)(r,{boundElements:(r.boundElements||[]).concat({type:\"text\",id:n.id})});var p=r.height;return(0,s.oN)(n,r),(0,c.h_)(r.id,p),{elements:x(e,r,n),appState:v(v({},t),{},{selectedElementIds:(0,o.Z)({},r.id,!0)}),commitToHistory:!0}}}),x=function(e,t,n){var r=e.slice(),o=r.findIndex((function(e){return e.id===n.id}));r.splice(o,1);var i=r.findIndex((function(e){return e.id===t.id}));return r.splice(i+1,0,n),r},w=(0,p.z)({name:\"wrapTextInContainer\",contextItemLabel:\"labels.createContainerFromText\",trackEvent:{category:\"element\"},predicate:function(e,t){var n=(0,d.eD)(e,t),r=n.every((function(e){return(0,a.iB)(e)}));return n.length>0&&r},perform:function(e,t){var n,o=(0,d.eD)((0,a.Lm)(e),t),c=e.slice(),f={},p=h(o);try{var m=function(){var e=n.value;if((0,a.iB)(e)){var o,d=(0,a.Up)({type:\"rectangle\",backgroundColor:t.currentItemBackgroundColor,boundElements:[].concat((0,r.Z)(e.boundElements||[]),[{id:e.id,type:\"text\"}]),angle:e.angle,fillStyle:t.currentItemFillStyle,strokeColor:t.currentItemStrokeColor,roughness:t.currentItemRoughness,strokeWidth:t.currentItemStrokeWidth,strokeStyle:t.currentItemStrokeStyle,roundness:\"round\"===t.currentItemRoundness?{type:(0,u.QI)(\"rectangle\")?i.a6.ADAPTIVE_RADIUS:i.a6.PROPORTIONAL_RADIUS}:null,opacity:100,locked:!1,x:e.x-i.gK,y:e.y-i.gK,width:(0,s.NS)(e.width,\"rectangle\"),height:(0,s.NS)(e.height,\"rectangle\"),groupIds:e.groupIds});if(null!==(o=e.boundElements)&&void 0!==o&&o.length){var p=e.boundElements.filter((function(e){return\"arrow\"===e.type})).map((function(e){return e.id}));c.filter((function(e){return p.includes(e.id)})).forEach((function(t){var n,r,o=t.startBinding,i=t.endBinding;(null===(n=o)||void 0===n?void 0:n.elementId)===e.id&&(o=v(v({},o),{},{elementId:d.id})),(null===(r=i)||void 0===r?void 0:r.elementId)===e.id&&(i=v(v({},i),{},{elementId:d.id})),(o||i)&&(0,l.DR)(t,{startBinding:o,endBinding:i},!1)}))}(0,l.DR)(e,{containerId:d.id,verticalAlign:i.oX.MIDDLE,boundElements:null,textAlign:i.I8.CENTER},!1),(0,s.oN)(e,d),c=function(e,t,n){var r=e.slice(),o=r.findIndex((function(e){return e.id===t.id}));r.splice(o,1);var i=r.findIndex((function(e){return e.id===n.id}));return r.splice(i,0,t),r}([].concat((0,r.Z)(c),[d]),d,e),f[d.id]=!0}};for(p.s();!(n=p.n()).done;)m()}catch(e){p.e(e)}finally{p.f()}return{elements:c,appState:v(v({},t),{},{selectedElementIds:f}),commitToHistory:!0}}})},2416:function(e,t,n){\"use strict\";n.d(t,{CZ:function(){return j},Lo:function(){return S},Zp:function(){return C},eF:function(){return I},md:function(){return O},mo:function(){return E}});var r=n(2577),o=n(7169),i=n(4499),a=n(3646),l=n(1319),s=n(2335),c=n(1047),u=n(8211),d=n(6066),f=n(75),p=n(2264),h=n(746),m=n(6340),g=n(7901),v=n(1894),b=n(1935),y=n(8897),x=n(4512);function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,g.z)({name:\"changeViewBackgroundColor\",trackEvent:!1,predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.changeViewBackgroundColor&&!t.viewModeEnabled},perform:function(e,t,n){return{appState:k(k({},t),n),commitToHistory:!!n.viewBackgroundColor}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,x.jsx)(\"div\",{style:{position:\"relative\"},children:(0,x.jsx)(i.z,{label:(0,u.t)(\"labels.canvasBackground\"),type:\"canvasBackground\",color:n.viewBackgroundColor,onChange:function(e){return r({viewBackgroundColor:e})},isActive:\"canvasColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"canvasColorPicker\":null})},\"data-testid\":\"canvas-background-picker\",elements:t,appState:n})})}});var E=(0,g.z)({name:\"clearCanvas\",trackEvent:{category:\"canvas\"},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.clearCanvas&&!t.viewModeEnabled},perform:function(e,t,n,r){return r.imageCache.clear(),{elements:e.map((function(e){return(0,b.BE)(e,{isDeleted:!0})})),appState:k(k({},(0,y.im)()),{},{files:{},theme:t.theme,penMode:t.penMode,penDetected:t.penDetected,exportBackground:t.exportBackground,exportEmbedScene:t.exportEmbedScene,gridSize:t.gridSize,showStats:t.showStats,pasteDialog:t.pasteDialog,activeTool:\"image\"===t.activeTool.type?k(k({},t.activeTool),{},{type:\"selection\"}):t.activeTool}),commitToHistory:!0}}}),S=(0,g.z)({name:\"zoomIn\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){return{appState:k(k({},t),(0,h.E)({viewportX:t.width\/2+t.offsetLeft,viewportY:t.height\/2+t.offsetTop,nextZoom:(0,f.j)(t.zoom.value+s.V4)},t)),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,x.jsx)(l.V,{type:\"button\",className:\"zoom-in-button zoom-button\",icon:a.Sd,title:\"\".concat((0,u.t)(\"buttons.zoomIn\"),\" \u2014 \").concat((0,m.uY)(\"CtrlOrCmd++\")),\"aria-label\":(0,u.t)(\"buttons.zoomIn\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===d.aU.EQUAL||e.code===d.aU.NUM_ADD)&&(e[d.tW.CTRL_OR_CMD]||e.shiftKey)}}),j=(0,g.z)({name:\"zoomOut\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){return{appState:k(k({},t),(0,h.E)({viewportX:t.width\/2+t.offsetLeft,viewportY:t.height\/2+t.offsetTop,nextZoom:(0,f.j)(t.zoom.value-s.V4)},t)),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,x.jsx)(l.V,{type:\"button\",className:\"zoom-out-button zoom-button\",icon:a.xL,title:\"\".concat((0,u.t)(\"buttons.zoomOut\"),\" \u2014 \").concat((0,m.uY)(\"CtrlOrCmd+-\")),\"aria-label\":(0,u.t)(\"buttons.zoomOut\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===d.aU.MINUS||e.code===d.aU.NUM_SUBTRACT)&&(e[d.tW.CTRL_OR_CMD]||e.shiftKey)}}),_=((0,g.z)({name:\"resetZoom\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){return{appState:k(k({},t),(0,h.E)({viewportX:t.width\/2+t.offsetLeft,viewportY:t.height\/2+t.offsetTop,nextZoom:(0,f.j)(1)},t)),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,x.jsx)(v.u,{label:(0,u.t)(\"buttons.resetZoom\"),style:{height:\"100%\"},children:(0,x.jsxs)(l.V,{type:\"button\",className:\"reset-zoom-button zoom-button\",title:(0,u.t)(\"buttons.resetZoom\"),\"aria-label\":(0,u.t)(\"buttons.resetZoom\"),onClick:function(){t(null)},children:[(100*n.zoom.value).toFixed(0),\"%\"]})})},keyTest:function(e){return(e.code===d.aU.ZERO||e.code===d.aU.NUM_ZERO)&&(e[d.tW.CTRL_OR_CMD]||e.shiftKey)}}),function(e,t){var n=(0,r.Z)(e,4),o=n[0],i=n[1],a=n[2],l=n[3],c=a-o,u=t.width\/c,d=l-i,f=t.height\/d,p=Math.min(u,f),h=Math.floor(p\/s.V4)*s.V4;return Math.min(Math.max(h,s.Zj),1)}),O=function(e,t,n){var o=(0,c.Lm)(e),i=(0,f.eD)(o,t),a=n&&i.length>0?(0,c.KP)(i):(0,c.KP)(o),l={value:_(a,{width:t.width,height:t.height})},s=(0,r.Z)(a,4),u=s[0],d=s[1],h=(u+s[2])\/2,m=(d+s[3])\/2;return{appState:k(k(k({},t),(0,p.s)({scenePoint:{x:h,y:m},viewportDimensions:{width:t.width,height:t.height},zoom:l})),{},{zoom:l}),commitToHistory:!1}},C=((0,g.z)({name:\"zoomToSelection\",trackEvent:{category:\"canvas\"},perform:function(e,t){return O(e,t,!0)},keyTest:function(e){return e.code===d.aU.TWO&&e.shiftKey&&!e.altKey&&!e[d.tW.CTRL_OR_CMD]}}),(0,g.z)({name:\"zoomToFit\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t){return O(e,t,!1)},keyTest:function(e){return e.code===d.aU.ONE&&e.shiftKey&&!e.altKey&&!e[d.tW.CTRL_OR_CMD]}}),(0,g.z)({name:\"toggleTheme\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n){return{appState:k(k({},t),{},{theme:n||(t.theme===s.C6.LIGHT?s.C6.DARK:s.C6.LIGHT)}),commitToHistory:!1}},keyTest:function(e){return e.altKey&&e.shiftKey&&e.code===d.aU.D},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.toggleTheme}})),I=((0,g.z)({name:\"toggleEraserTool\",trackEvent:{category:\"toolbar\"},perform:function(e,t){var n;return n=(0,y.EN)(t)?(0,m.Om)(t,k(k({},t.activeTool.lastActiveTool||{type:\"selection\"}),{},{lastActiveToolBeforeEraser:null})):(0,m.Om)(t,{type:\"eraser\",lastActiveToolBeforeEraser:t.activeTool}),{appState:k(k({},t),{},{selectedElementIds:{},selectedGroupIds:{},activeTool:n}),commitToHistory:!0}},keyTest:function(e){return e.key===d.tW.E}}),(0,g.z)({name:\"toggleHandTool\",trackEvent:{category:\"toolbar\"},perform:function(e,t,n,r){var o;return(0,y.l$)(t)?o=(0,m.Om)(t,k(k({},t.activeTool.lastActiveTool||{type:\"selection\"}),{},{lastActiveToolBeforeEraser:null})):(o=(0,m.Om)(t,{type:\"hand\",lastActiveToolBeforeEraser:t.activeTool}),(0,m.KJ)(r.canvas,s.oc.GRAB)),{appState:k(k({},t),{},{selectedElementIds:{},selectedGroupIds:{},activeTool:o}),commitToHistory:!0}},keyTest:function(e){return e.key===d.tW.H}}))},4688:function(e,t,n){\"use strict\";n.d(t,{FA:function(){return k},ZM:function(){return w},jK:function(){return E},uN:function(){return y},yQ:function(){return x},zp:function(){return S}});var r=n(7169),o=n(8950),i=n(2975),a=n.n(i),l=n(6066),s=n(7901),c=n(6665),u=n(533),d=n(1868),f=n(9485),p=n(1047),h=n(8211);function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var v,b,y=(0,s.z)({name:\"copy\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){var o=(0,d.eD)(e,t,!0);return(0,c.vQ)(o,t,r.files),{commitToHistory:!1}},predicate:function(e,t,n,r){return r.device.isMobile&&!!navigator.clipboard},contextItemLabel:\"labels.copy\",keyTest:void 0}),x=(0,s.z)({name:\"paste\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){return r.pasteFromClipboard(null),{commitToHistory:!1}},predicate:function(e,t,n,r){return r.device.isMobile&&!!navigator.clipboard},contextItemLabel:\"labels.paste\",keyTest:void 0}),w=(0,s.z)({name:\"cut\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){return y.perform(e,t,n,r),u.X.perform(e,t)},predicate:function(e,t,n,r){return r.device.isMobile&&!!navigator.clipboard},contextItemLabel:\"labels.cut\",keyTest:function(e){return e[l.tW.CTRL_OR_CMD]&&e.key===l.tW.X}}),k=(0,s.z)({name:\"copyAsSvg\",trackEvent:{category:\"element\"},perform:(v=(0,o.Z)(a().mark((function e(t,n,r,o){var i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return i=(0,d.eD)((0,p.Lm)(t),n,!0),e.prev=3,e.next=6,(0,f.p1)(\"clipboard-svg\",i.length?i:(0,p.Lm)(t),n,o.files,n);case 6:return e.abrupt(\"return\",{commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:g(g({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])}))),function(e,t,n,r){return v.apply(this,arguments)}),predicate:function(e){return c.wx&&e.length>0},contextItemLabel:\"labels.copyAsSvg\"}),E=(0,s.z)({name:\"copyAsPng\",trackEvent:{category:\"element\"},perform:(b=(0,o.Z)(a().mark((function e(t,n,r,o){var i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return i=(0,d.eD)((0,p.Lm)(t),n,!0),e.prev=3,e.next=6,(0,f.p1)(\"clipboard\",i.length?i:(0,p.Lm)(t),n,o.files,n);case 6:return e.abrupt(\"return\",{appState:g(g({},n),{},{toast:{message:(0,h.t)(\"toast.copyToClipboardAsPng\",{exportSelection:i.length?(0,h.t)(\"toast.selection\"):(0,h.t)(\"toast.canvas\"),exportColorScheme:n.exportWithDarkMode?(0,h.t)(\"buttons.darkMode\"):(0,h.t)(\"buttons.lightMode\")})}}),commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:g(g({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])}))),function(e,t,n,r){return b.apply(this,arguments)}),predicate:function(e){return c.vt&&e.length>0},contextItemLabel:\"labels.copyAsPng\",keyTest:function(e){return e.code===l.aU.C&&e.altKey&&e.shiftKey}}),S=(0,s.z)({name:\"copyText\",trackEvent:{category:\"element\"},perform:function(e,t){var n=(0,d.eD)((0,p.Lm)(e),t,!0).reduce((function(e,t){return(0,p.iB)(t)&&e.push(t.text),e}),[]).join(\"\\n\\n\");return(0,c.dd)(n),{commitToHistory:!1}},predicate:function(e,t){return c.wx&&(0,d.eD)(e,t,!0).some(p.iB)},contextItemLabel:\"labels.copyText\"})},533:function(e,t,n){\"use strict\";n.d(t,{X:function(){return w}});var r=n(7169),o=n(75),i=n(6066),a=n(1319),l=n(8211),s=n(7901),c=n(1047),u=n(1935),d=n(242),f=n(6938),p=n(8290),h=n(1974),m=n(6340),g=n(3646),v=n(4512);function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var x=function(e,t){if(e.editingGroupId){var n=(0,d.Fb)((0,c.Lm)(t),e.editingGroupId);if(n.length)return y(y({},e),{},{selectedElementIds:(0,r.Z)({},n[0].id,!0)})}return e},w=(0,s.z)({name:\"deleteSelectedElements\",trackEvent:{category:\"element\",action:\"delete\"},perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.elementId,i=n.selectedPointsIndices,a=n.startBindingElement,l=n.endBindingElement,s=f._.getElement(r);if(!s)return!1;if(null==i)return!1;if(s.points.length<2){var d=e.map((function(e){return e.id===s.id?(0,u.BE)(e,{isDeleted:!0}):e}));return{elements:d,appState:y(y({},x(t,d)),{},{editingLinearElement:null}),commitToHistory:!1}}var g={startBindingElement:null!=i&&i.includes(0)?null:a,endBindingElement:null!=i&&i.includes(s.points.length-1)?null:l};return f._.deletePoints(s,i),{elements:e,appState:y(y({},t),{},{editingLinearElement:y(y(y({},t.editingLinearElement),g),{},{selectedPointsIndices:(null==i?void 0:i[0])>0?[i[0]-1]:[0]})}),commitToHistory:!0}}var v=function(e,t){return{elements:e.map((function(e){return t.selectedElementIds[e.id]||(0,h.Xh)(e)&&t.selectedElementIds[e.containerId]?(0,u.BE)(e,{isDeleted:!0}):e})),appState:y(y({},t),{},{selectedElementIds:{}})}}(e,t),b=v.elements,w=v.appState;return(0,p.$q)(b,e.filter((function(e){var n=e.id;return t.selectedElementIds[n]}))),{elements:b,appState:y(y({},w=x(w,b)),{},{activeTool:(0,m.Om)(t,{type:\"selection\"}),multiElement:null}),commitToHistory:(0,o.N)((0,c.Lm)(e),t)}},contextItemLabel:\"labels.delete\",keyTest:function(e,t,n){return(e.key===i.tW.BACKSPACE||e.key===i.tW.DELETE)&&!e[i.tW.CTRL_OR_CMD]},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,v.jsx)(a.V,{type:\"button\",icon:g.XH,title:(0,l.t)(\"labels.delete\"),\"aria-label\":(0,l.t)(\"labels.delete\"),onClick:function(){return r(null)},visible:(0,o.N)((0,c.Lm)(t),n)})}})},8671:function(e,t,n){\"use strict\";n.d(t,{_d:function(){return te},mM:function(){return ee},ns:function(){return Q}});var r=n(8950),o=n(2577),i=n(7169),a=n(2975),l=n.n(a),s=n(3646),c=n(487),u=n.n(c),d=n(631),f=n.n(d),p=n(2052),h=n.n(p),m=n(4010),g=n.n(m),v=n(1469),b=n.n(v),y=n(9329),x=n.n(y),w=n(6759),k={};k.styleTagTransform=x(),k.setAttributes=g(),k.insert=h().bind(null,\"head\"),k.domAPI=f(),k.insertStyleElement=b();u()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals;var E=n(9787),S=n(6340),j=n(532),_={};_.styleTagTransform=x(),_.setAttributes=g(),_.insert=h().bind(null,\"head\"),_.domAPI=f(),_.insertStyleElement=b();u()(j.Z,_),j.Z&&j.Z.locals&&j.Z.locals;var O=n(2134),C=n(4512),I=function(e){var t=(0,O.J0)().id,n=(0,E.useState)(e.value),r=(0,o.Z)(n,2),i=r[0],a=r[1];return(0,C.jsxs)(\"div\",{className:\"ProjectName\",children:[(0,C.jsx)(\"label\",{className:\"ProjectName-label\",htmlFor:\"filename\",children:\"\".concat(e.label).concat(e.isNameEditable?\"\":\":\")}),e.isNameEditable?(0,C.jsx)(\"input\",{type:\"text\",className:\"TextInput\",onBlur:function(t){(0,S.qz)(t.target);var n=t.target.value;n!==e.value&&e.onChange(n)},onKeyDown:function(e){if(\"Enter\"===e.key){if(e.preventDefault(),e.nativeEvent.isComposing||229===e.keyCode)return;e.currentTarget.blur()}},id:\"\".concat(t,\"-filename\"),value:i,onChange:function(e){return a(e.target.value)}}):(0,C.jsx)(\"span\",{className:\"TextInput TextInput--readonly\",id:\"\".concat(t,\"-filename\"),children:e.value})]})},M=n(1319),T=n(1894),P=(n(5422),n(8211)),D=n(2335),A=function(e){var t=e.title||(\"dark\"===e.value?(0,P.t)(\"buttons.lightMode\"):(0,P.t)(\"buttons.darkMode\"));return(0,C.jsx)(M.V,{type:\"icon\",icon:e.value===D.C6.LIGHT?L.MOON:L.SUN,title:t,\"aria-label\":t,onClick:function(){return e.onChange(e.value===D.C6.DARK?D.C6.LIGHT:D.C6.DARK)},\"data-testid\":\"toggle-dark-mode\"})},L={SUN:(0,C.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,C.jsx)(\"path\",{fill:\"currentColor\",d:\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"})}),MOON:(0,C.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,C.jsx)(\"path\",{fill:\"currentColor\",d:\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"})})},Z=n(9485),z=n(1047),R=n(434);function N(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?N(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):N(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var H=function(){var e=(0,r.Z)(l().mark((function e(t,n,r){var o,i,a,s,c,u;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=(o=n).exportBackground,a=o.viewBackgroundColor,s=o.name,c=o.fileHandle,u=(0,R.Qk)(c),c&&(0,R.DQ)(u)){e.next=4;break}throw new Error(\"fileHandle should exist and should be of type svg or png when resaving\");case 4:return n=B(B({},n),{},{exportEmbedScene:!0}),e.next=7,(0,Z.p1)(u,(0,z.Lm)(t),n,r,{exportBackground:i,viewBackgroundColor:a,name:s,fileHandle:c});case 7:return e.abrupt(\"return\",{fileHandle:c});case 8:case\"end\":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),W=n(6066),F=n(7901),U=n(3807),K=n(4162),Y=n(75),G=n(1393);function V(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function X(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?V(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):V(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,F.z)({name:\"changeProjectName\",trackEvent:!1,perform:function(e,t,n){return{appState:X(X({},t),{},{name:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.appProps;return(0,C.jsx)(I,{label:(0,P.t)(\"labels.fileTitle\"),value:t.name||\"Unnamed\",onChange:function(e){return n(e)},isNameEditable:void 0===r.name&&!t.viewModeEnabled})}}),(0,F.z)({name:\"changeExportScale\",trackEvent:{category:\"export\",action:\"scale\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportScale:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,i=(0,z.Lm)(t),a=(0,Y.N)(i,n)?(0,Y.eD)(i,n):i;return(0,C.jsx)(C.Fragment,{children:D.ZB.map((function(e){var t=(0,K.Cg)(a,D.qy,e),i=(0,o.Z)(t,2),l=i[0],s=i[1],c=\"\".concat((0,P.t)(\"buttons.scale\"),\" \").concat(e,\"x (\").concat(l,\"x\").concat(s,\")\");return(0,C.jsx)(M.V,{size:\"small\",type:\"radio\",icon:\"\".concat(e,\"x\"),name:\"export-canvas-scale\",title:c,\"aria-label\":c,id:\"export-canvas-scale\",checked:e===n.exportScale,onChange:function(){return r(e)}},e)}))})}}),(0,F.z)({name:\"changeExportBackground\",trackEvent:{category:\"export\",action:\"toggleBackground\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportBackground:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,C.jsx)(U.o,{checked:t.exportBackground,onChange:function(e){return n(e)},children:(0,P.t)(\"labels.withBackground\")})}}),(0,F.z)({name:\"changeExportEmbedScene\",trackEvent:{category:\"export\",action:\"embedScene\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportEmbedScene:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,C.jsxs)(U.o,{checked:t.exportEmbedScene,onChange:function(e){return n(e)},children:[(0,P.t)(\"labels.exportEmbedScene\"),(0,C.jsx)(T.u,{label:(0,P.t)(\"labels.exportEmbedScene_details\"),long:!0,children:(0,C.jsx)(\"div\",{className:\"excalidraw-tooltip-icon\",children:s.Vl})})]})}});var q,J,$,Q=(0,F.z)({name:\"saveToActiveFile\",trackEvent:{category:\"export\"},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.saveToActiveFile&&!!t.fileHandle&&!t.viewModeEnabled},perform:(q=(0,r.Z)(l().mark((function e(t,n,r,o){var i,a,s;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=!!n.fileHandle,e.prev=1,!(0,R.g8)(n.fileHandle)){e.next=8;break}return e.next=5,H(t,n,o.files);case 5:e.t0=e.sent,e.next=11;break;case 8:return e.next=10,(0,Z.Um)(t,n,o.files);case 10:e.t0=e.sent;case 11:return a=e.t0,s=a.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:X(X({},n),{},{fileHandle:s,toast:i?{message:null!=s&&s.name?(0,P.t)(\"toast.fileSavedToFilename\").replace(\"{filename}\",'\"'.concat(s.name,'\"')):(0,P.t)(\"toast.fileSaved\")}:null})});case 16:return e.prev=16,e.t1=e.catch(1),\"AbortError\"!==(null===e.t1||void 0===e.t1?void 0:e.t1.name)?console.error(e.t1):console.warn(e.t1),e.abrupt(\"return\",{commitToHistory:!1});case 20:case\"end\":return e.stop()}}),e,null,[[1,16]])}))),function(e,t,n,r){return q.apply(this,arguments)}),keyTest:function(e){return e.key===W.tW.S&&e[W.tW.CTRL_OR_CMD]&&!e.shiftKey}}),ee=(0,F.z)({name:\"saveFileToDisk\",viewMode:!0,trackEvent:{category:\"export\"},perform:(J=(0,r.Z)(l().mark((function e(t,n,r,o){var i,a;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,(0,Z.Um)(t,X(X({},n),{},{fileHandle:null}),o.files);case 3:return i=e.sent,a=i.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:X(X({},n),{},{fileHandle:a})});case 8:return e.prev=8,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)?console.error(e.t0):console.warn(e.t0),e.abrupt(\"return\",{commitToHistory:!1});case 12:case\"end\":return e.stop()}}),e,null,[[0,8]])}))),function(e,t,n,r){return J.apply(this,arguments)}),keyTest:function(e){return e.key===W.tW.S&&e.shiftKey&&e[W.tW.CTRL_OR_CMD]},PanelComponent:function(e){var t=e.updateData;return(0,C.jsx)(M.V,{type:\"button\",icon:s.po,title:(0,P.t)(\"buttons.saveAs\"),\"aria-label\":(0,P.t)(\"buttons.saveAs\"),showAriaLabel:(0,O.Fy)().isMobile,hidden:!G.kr,onClick:function(){return t(null)},\"data-testid\":\"save-as-button\"})}}),te=(0,F.z)({name:\"loadScene\",trackEvent:{category:\"export\"},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.loadScene&&!t.viewModeEnabled},perform:($=(0,r.Z)(l().mark((function e(t,n,r,o){var i,a,s,c;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,(0,Z.n8)(n,t);case 3:return i=e.sent,a=i.elements,s=i.appState,c=i.files,e.abrupt(\"return\",{elements:a,appState:s,files:c,commitToHistory:!0});case 10:if(e.prev=10,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)){e.next=15;break}return console.warn(e.t0),e.abrupt(\"return\",!1);case 15:return e.abrupt(\"return\",{elements:t,appState:X(X({},n),{},{errorMessage:e.t0.message}),files:o.files,commitToHistory:!1});case 16:case\"end\":return e.stop()}}),e,null,[[0,10]])}))),function(e,t,n,r){return $.apply(this,arguments)}),keyTest:function(e){return e[W.tW.CTRL_OR_CMD]&&e.key===W.tW.O}});(0,F.z)({name:\"exportWithDarkMode\",trackEvent:{category:\"export\",action:\"toggleTheme\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportWithDarkMode:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,C.jsx)(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginTop:\"-45px\",marginBottom:\"10px\"},children:(0,C.jsx)(A,{value:t.exportWithDarkMode?D.C6.DARK:D.C6.LIGHT,onChange:function(e){n(e===D.C6.DARK)},title:(0,P.t)(\"labels.toggleExportColorScheme\")})})}})},6208:function(e,t,n){\"use strict\";n.d(t,{Tu:function(){return q},Zq:function(){return J}});var r=n(1930),o=n(7169),i=n(7047),a=n(45),l=n(4512),s=function(e){return(0,l.jsx)(\"div\",{className:\"buttonList buttonListIcon\",children:e.options.map((function(t){var n;return\"button\"===e.type?(0,l.jsx)(\"button\",{onClick:function(n){return e.onClick(t.value,n)},className:(0,a.Z)({active:null!==(n=t.active)&&void 0!==n?n:e.value===t.value}),\"data-testid\":t.testId,title:t.text,children:t.icon},t.text):(0,l.jsxs)(\"label\",{className:(0,a.Z)({active:e.value===t.value}),title:t.text,children:[(0,l.jsx)(\"input\",{type:\"radio\",name:e.group,onChange:function(){return e.onChange(t.value)},checked:e.value===t.value,\"data-testid\":t.testId}),t.icon]},t.text)}))})},c=n(4499),u=n(2577),d=n(9787),f=n.n(d),p=n(2891),h=n(487),m=n.n(h),g=n(631),v=n.n(g),b=n(2052),y=n.n(b),x=n(4010),w=n.n(x),k=n(1469),E=n.n(k),S=n(9329),j=n.n(S),_=n(9478),O={};O.styleTagTransform=j(),O.setAttributes=w(),O.insert=y().bind(null,\"head\"),O.domAPI=v(),O.insertStyleElement=E();m()(_.Z,O),_.Z&&_.Z.locals&&_.Z.locals;var C=n(6066),I=n(8211);function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function P(e){var t=e.options,n=e.value,r=e.label,o=e.onChange,i=e.onClose,s=f().useRef(),c=f().useRef(),u=f().useRef(null);f().useEffect((function(){c.current?c.current.focus():u.current&&u.current.focus()}),[]);return(0,l.jsx)(\"div\",{className:\"picker\",role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":r,onKeyDown:function(e){var n=t.find((function(t){return t.keyBinding===e.key.toLowerCase()}));if(e.metaKey||e.altKey||e.ctrlKey||!n)if(e.key===C.tW.TAB)setTimeout((function(){c.current!==document.activeElement&&i()}),0);else if((0,C.Wl)(e.key)){var r=document.activeElement,o=(0,I.G3)().rtl,a=Array.prototype.indexOf.call(u.current.children,r);if(-1!==a){var l=t.length,s=a;switch(e.key){case o?C.tW.ARROW_LEFT:C.tW.ARROW_RIGHT:case C.tW.ARROW_DOWN:s=(a+1)%l;break;case o?C.tW.ARROW_RIGHT:C.tW.ARROW_LEFT:case C.tW.ARROW_UP:s=(l+a-1)%l}u.current.children[s].focus()}e.preventDefault()}else e.key!==C.tW.ESCAPE&&e.key!==C.tW.ENTER||(e.preventDefault(),i());else{var d=t.indexOf(n);u.current.children[d].focus(),e.preventDefault()}e.nativeEvent.stopImmediatePropagation(),e.stopPropagation()},children:(0,l.jsx)(\"div\",{className:\"picker-content\",ref:u,children:t.map((function(e,t){return(0,l.jsxs)(\"button\",{className:(0,a.Z)(\"picker-option\",{active:n===e.value}),onClick:function(t){t.currentTarget.focus(),o(e.value)},title:\"\".concat(e.text,\" \u2014 \").concat(e.keyBinding.toUpperCase()),\"aria-label\":e.text||\"none\",\"aria-keyshortcuts\":e.keyBinding,ref:function(r){r&&0===t&&(s.current=r),r&&e.value===n&&(c.current=r)},onFocus:function(){o(e.value)},children:[e.icon,(0,l.jsx)(\"span\",{className:\"picker-keybinding\",children:e.keyBinding})]},e.text)}))})})}function D(e){var t,n=e.value,r=e.label,o=e.options,i=e.onChange,a=e.group,s=void 0===a?\"\":a,c=f().useState(!1),d=(0,u.Z)(c,2),h=d[0],m=d[1],g=f().useRef(null),v=(0,I.G3)().rtl;return(0,l.jsxs)(\"div\",{children:[(0,l.jsx)(\"button\",{name:s,className:h?\"active\":\"\",\"aria-label\":r,onClick:function(){return m(!h)},ref:g,children:null===(t=o.find((function(e){return e.value===n})))||void 0===t?void 0:t.icon}),(0,l.jsx)(f().Suspense,{fallback:\"\",children:h?(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(p.J,T(T({onCloseRequest:function(e){return e.target!==g.current&&m(!1)}},v?{right:5.5}:{left:-5.5}),{},{children:(0,l.jsx)(P,{options:o,value:n,label:r,onChange:i,onClose:function(){var e;m(!1),null===(e=g.current)||void 0===e||e.focus()}})})),(0,l.jsx)(\"div\",{className:\"picker-triangle\"})]}):null})]})}var A=n(3646),L=n(2335),Z=n(1047),z=n(1935),R=n(5710),N=n(1974),B=n(6954),H=n(75),W=n(8120),F=n(6340),U=n(7901);function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var G=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=(0,F.xn)((0,H.eD)(e,t,r));return e.map((function(e){var r;return o.get(e.id)||e.id===(null===(r=t.editingElement)||void 0===r?void 0:r.id)?n(e):e}))},V=function(e,t,n,r){var o,i,a=t.editingElement,l=(0,Z.Lm)(e);return null!==(o=null!==(i=a&&n(a))&&void 0!==i?i:(0,H.N)(l,t)?(0,H.PR)(l,t,n):r)&&void 0!==o?o:null},X=function(e,t,n,o){var i=new Set;return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=n(e);i.add(t);var r=(0,z.BE)(e,{fontSize:t});return(0,Z.oN)(r,(0,R.tl)(e)),o=e,a=r,r=(0,N.Xh)(a)?a:(0,z.DR)(a,{x:\"left\"===o.textAlign?o.x:o.x+(o.width-a.width)\/(\"center\"===o.textAlign?2:1),y:o.y+(o.height-a.height)\/2},!1)}var o,a;return e}),!0),appState:Y(Y({},t),{},{currentItemFontSize:1===i.size?(0,r.Z)(i)[0]:null!=o?o:t.currentItemFontSize}),commitToHistory:!0}},q=((0,U.z)({name:\"changeStrokeColor\",trackEvent:!1,perform:function(e,t,n){return Y(Y({},n.currentItemStrokeColor&&{elements:G(e,t,(function(e){return(0,W.PD)(e.type)?(0,z.BE)(e,{strokeColor:n.currentItemStrokeColor}):e}),!0)}),{},{appState:Y(Y({},t),n),commitToHistory:!!n.currentItemStrokeColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:(0,I.t)(\"labels.stroke\")}),(0,l.jsx)(c.z,{type:\"elementStroke\",label:(0,I.t)(\"labels.stroke\"),color:V(t,n,(function(e){return e.strokeColor}),n.currentItemStrokeColor),onChange:function(e){return r({currentItemStrokeColor:e})},isActive:\"strokeColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"strokeColorPicker\":null})},elements:t,appState:n})]})}}),(0,U.z)({name:\"changeBackgroundColor\",trackEvent:!1,perform:function(e,t,n){return Y(Y({},n.currentItemBackgroundColor&&{elements:G(e,t,(function(e){return(0,z.BE)(e,{backgroundColor:n.currentItemBackgroundColor})}))}),{},{appState:Y(Y({},t),n),commitToHistory:!!n.currentItemBackgroundColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:(0,I.t)(\"labels.background\")}),(0,l.jsx)(c.z,{type:\"elementBackground\",label:(0,I.t)(\"labels.background\"),color:V(t,n,(function(e){return e.backgroundColor}),n.currentItemBackgroundColor),onChange:function(e){return r({currentItemBackgroundColor:e})},isActive:\"backgroundColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"backgroundColorPicker\":null})},elements:t,appState:n})]})}}),(0,U.z)({name:\"changeFillStyle\",trackEvent:!1,perform:function(e,t,n,r){return(0,i.L)(\"element\",\"changeFillStyle\",\"\".concat(n,\" (\").concat(r.device.isMobile?\"mobile\":\"desktop\",\")\")),{elements:G(e,t,(function(e){return(0,z.BE)(e,{fillStyle:n})})),appState:Y(Y({},t),{},{currentItemFillStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,H.eD)(t,n),i=o.length>0&&o.every((function(e){return\"zigzag\"===e.fillStyle}));return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.fill\")}),(0,l.jsx)(s,{type:\"button\",options:[{value:\"hachure\",text:\"\".concat(i?(0,I.t)(\"labels.zigzag\"):(0,I.t)(\"labels.hachure\"),\" (\").concat((0,F.uY)(\"Alt-Click\"),\")\"),icon:i?A.lF:A.a0,active:!!i||void 0},{value:\"cross-hatch\",text:(0,I.t)(\"labels.crossHatch\"),icon:A.np},{value:\"solid\",text:(0,I.t)(\"labels.solid\"),icon:A.X7}],value:V(t,n,(function(e){return e.fillStyle}),n.currentItemFillStyle),onClick:function(e,t){var n=t.altKey&&\"hachure\"===e&&o.every((function(e){return\"hachure\"===e.fillStyle}))?\"zigzag\":e;r(n)}})]})}}),(0,U.z)({name:\"changeStrokeWidth\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{strokeWidth:n})})),appState:Y(Y({},t),{},{currentItemStrokeWidth:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.strokeWidth\")}),(0,l.jsx)(s,{group:\"stroke-width\",options:[{value:1,text:(0,I.t)(\"labels.thin\"),icon:A.ZA},{value:2,text:(0,I.t)(\"labels.bold\"),icon:A.Wl},{value:4,text:(0,I.t)(\"labels.extraBold\"),icon:A.m9}],value:V(t,n,(function(e){return e.strokeWidth}),n.currentItemStrokeWidth),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeSloppiness\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{seed:(0,B.LU)(),roughness:n})})),appState:Y(Y({},t),{},{currentItemRoughness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.sloppiness\")}),(0,l.jsx)(s,{group:\"sloppiness\",options:[{value:0,text:(0,I.t)(\"labels.architect\"),icon:A.bf},{value:1,text:(0,I.t)(\"labels.artist\"),icon:A.kM},{value:2,text:(0,I.t)(\"labels.cartoonist\"),icon:A.W2}],value:V(t,n,(function(e){return e.roughness}),n.currentItemRoughness),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeStrokeStyle\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{strokeStyle:n})})),appState:Y(Y({},t),{},{currentItemStrokeStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.strokeStyle\")}),(0,l.jsx)(s,{group:\"strokeStyle\",options:[{value:\"solid\",text:(0,I.t)(\"labels.strokeStyle_solid\"),icon:A.ZA},{value:\"dashed\",text:(0,I.t)(\"labels.strokeStyle_dashed\"),icon:A.a5},{value:\"dotted\",text:(0,I.t)(\"labels.strokeStyle_dotted\"),icon:A.aT}],value:V(t,n,(function(e){return e.strokeStyle}),n.currentItemStrokeStyle),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeOpacity\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{opacity:n})}),!0),appState:Y(Y({},t),{},{currentItemOpacity:n}),commitToHistory:!0}},PanelComponent:function(e){var t,n=e.elements,r=e.appState,o=e.updateData;return(0,l.jsxs)(\"label\",{className:\"control-label\",children:[(0,I.t)(\"labels.opacity\"),(0,l.jsx)(\"input\",{type:\"range\",min:\"0\",max:\"100\",step:\"10\",onChange:function(e){return o(+e.target.value)},value:null!==(t=V(n,r,(function(e){return e.opacity}),r.currentItemOpacity))&&void 0!==t?t:void 0})]})}}),(0,U.z)({name:\"changeFontSize\",trackEvent:!1,perform:function(e,t,n){return X(e,t,(function(){return n}),n)},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.fontSize\")}),(0,l.jsx)(s,{group:\"font-size\",options:[{value:16,text:(0,I.t)(\"labels.small\"),icon:A.q0,testId:\"fontSize-small\"},{value:20,text:(0,I.t)(\"labels.medium\"),icon:A.nq,testId:\"fontSize-medium\"},{value:28,text:(0,I.t)(\"labels.large\"),icon:A.tW,testId:\"fontSize-large\"},{value:36,text:(0,I.t)(\"labels.veryLarge\"),icon:A.OA,testId:\"fontSize-veryLarge\"}],value:V(t,n,(function(e){if((0,Z.iB)(e))return e.fontSize;var t=(0,R.WJ)(e);return t?t.fontSize:null}),n.currentItemFontSize||L.n5),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"decreaseFontSize\",trackEvent:!1,perform:function(e,t,n){return X(e,t,(function(e){return Math.round(1\/1.1*e.fontSize)}))},keyTest:function(e){return e[C.tW.CTRL_OR_CMD]&&e.shiftKey&&(e.key===C.tW.CHEVRON_LEFT||e.key===C.tW.COMMA)}})),J=(0,U.z)({name:\"increaseFontSize\",trackEvent:!1,perform:function(e,t,n){return X(e,t,(function(e){return Math.round(1.1*e.fontSize)}))},keyTest:function(e){return e[C.tW.CTRL_OR_CMD]&&e.shiftKey&&(e.key===C.tW.CHEVRON_RIGHT||e.key===C.tW.PERIOD)}});(0,U.z)({name:\"changeFontFamily\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=(0,z.BE)(e,{fontFamily:n,lineHeight:(0,R.PT)(n)});return(0,Z.oN)(t,(0,R.tl)(e)),t}return e}),!0),appState:Y(Y({},t),{},{currentItemFontFamily:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=[{value:L.ut.Virgil,text:(0,I.t)(\"labels.handDrawn\"),icon:A.Pm},{value:L.ut.Helvetica,text:(0,I.t)(\"labels.normal\"),icon:A.vo},{value:L.ut.Cascadia,text:(0,I.t)(\"labels.code\"),icon:A.z6}];return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.fontFamily\")}),(0,l.jsx)(s,{group:\"font-family\",options:o,value:V(t,n,(function(e){if((0,Z.iB)(e))return e.fontFamily;var t=(0,R.WJ)(e);return t?t.fontFamily:null}),n.currentItemFontFamily||L.rk),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeTextAlign\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=(0,z.BE)(e,{textAlign:n});return(0,Z.oN)(t,(0,R.tl)(e)),t}return e}),!0),appState:Y(Y({},t),{},{currentItemTextAlign:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.textAlign\")}),(0,l.jsx)(s,{group:\"text-align\",options:[{value:\"left\",text:(0,I.t)(\"labels.left\"),icon:A.rr,testId:\"align-left\"},{value:\"center\",text:(0,I.t)(\"labels.center\"),icon:A.o3,testId:\"align-horizontal-center\"},{value:\"right\",text:(0,I.t)(\"labels.right\"),icon:A.oT,testId:\"align-right\"}],value:V(t,n,(function(e){if((0,Z.iB)(e))return e.textAlign;var t=(0,R.WJ)(e);return t?t.textAlign:null}),n.currentItemTextAlign),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeVerticalAlign\",trackEvent:{category:\"element\"},perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=(0,z.BE)(e,{verticalAlign:n});return(0,Z.oN)(t,(0,R.tl)(e)),t}return e}),!0),appState:Y({},t),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsx)(\"fieldset\",{children:(0,l.jsx)(s,{group:\"text-align\",options:[{value:L.oX.TOP,text:(0,I.t)(\"labels.alignTop\"),icon:(0,l.jsx)(A.EO,{theme:n.theme}),testId:\"align-top\"},{value:L.oX.MIDDLE,text:(0,I.t)(\"labels.centerVertically\"),icon:(0,l.jsx)(A.P7,{theme:n.theme}),testId:\"align-middle\"},{value:L.oX.BOTTOM,text:(0,I.t)(\"labels.alignBottom\"),icon:(0,l.jsx)(A.aA,{theme:n.theme}),testId:\"align-bottom\"}],value:V(t,n,(function(e){if((0,Z.iB)(e)&&e.containerId)return e.verticalAlign;var t=(0,R.WJ)(e);return t?t.verticalAlign:null})),onChange:function(e){return r(e)}})})}}),(0,U.z)({name:\"changeRoundness\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{roundness:\"round\"===n?{type:(0,N.QI)(e.type)?L.a6.ADAPTIVE_RADIUS:L.a6.PROPORTIONAL_RADIUS}:null})})),appState:Y(Y({},t),{},{currentItemRoundness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,H.Zs)((0,Z.Lm)(t),n).some((function(e){var t;return(null===(t=e.roundness)||void 0===t?void 0:t.type)===L.a6.LEGACY}));return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.edges\")}),(0,l.jsx)(s,{group:\"edges\",options:[{value:\"sharp\",text:(0,I.t)(\"labels.sharp\"),icon:A.wr},{value:\"round\",text:(0,I.t)(\"labels.round\"),icon:A.DS}],value:V(t,n,(function(e){return o?null:e.roundness?\"round\":\"sharp\"}),(0,H.sh)(n.activeTool.type)&&n.currentItemRoundness||null),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeArrowhead\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,N.bt)(e)){var t=n.position,r=n.type;if(\"start\"===t)return(0,z.BE)(e,{startArrowhead:r});if(\"end\"===t)return(0,z.BE)(e,{endArrowhead:r})}return e})),appState:Y(Y({},t),{},(0,o.Z)({},\"start\"===n.position?\"currentItemStartArrowhead\":\"currentItemEndArrowhead\",n.type)),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,I.G3)().rtl;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.arrowheads\")}),(0,l.jsxs)(\"div\",{className:\"iconSelectList buttonList\",children:[(0,l.jsx)(D,{label:\"arrowhead_start\",options:[{value:null,text:(0,I.t)(\"labels.arrowhead_none\"),icon:A.fr,keyBinding:\"q\"},{value:\"arrow\",text:(0,I.t)(\"labels.arrowhead_arrow\"),icon:(0,l.jsx)(A.il,{flip:!o}),keyBinding:\"w\"},{value:\"bar\",text:(0,I.t)(\"labels.arrowhead_bar\"),icon:(0,l.jsx)(A.m,{flip:!o}),keyBinding:\"e\"},{value:\"dot\",text:(0,I.t)(\"labels.arrowhead_dot\"),icon:(0,l.jsx)(A.tn,{flip:!o}),keyBinding:\"r\"},{value:\"triangle\",text:(0,I.t)(\"labels.arrowhead_triangle\"),icon:(0,l.jsx)(A.j8,{flip:!o}),keyBinding:\"t\"}],value:V(t,n,(function(e){return(0,N.bt)(e)&&(0,H.Un)(e.type)?e.startArrowhead:n.currentItemStartArrowhead}),n.currentItemStartArrowhead),onChange:function(e){return r({position:\"start\",type:e})}}),(0,l.jsx)(D,{label:\"arrowhead_end\",group:\"arrowheads\",options:[{value:null,text:(0,I.t)(\"labels.arrowhead_none\"),keyBinding:\"q\",icon:A.fr},{value:\"arrow\",text:(0,I.t)(\"labels.arrowhead_arrow\"),keyBinding:\"w\",icon:(0,l.jsx)(A.il,{flip:o})},{value:\"bar\",text:(0,I.t)(\"labels.arrowhead_bar\"),keyBinding:\"e\",icon:(0,l.jsx)(A.m,{flip:o})},{value:\"dot\",text:(0,I.t)(\"labels.arrowhead_dot\"),keyBinding:\"r\",icon:(0,l.jsx)(A.tn,{flip:o})},{value:\"triangle\",text:(0,I.t)(\"labels.arrowhead_triangle\"),icon:(0,l.jsx)(A.j8,{flip:o}),keyBinding:\"t\"}],value:V(t,n,(function(e){return(0,N.bt)(e)&&(0,H.Un)(e.type)?e.endArrowhead:n.currentItemEndArrowhead}),n.currentItemEndArrowhead),onChange:function(e){return r({position:\"end\",type:e})}})]})]})}})},4958:function(e,t,n){\"use strict\";n.d(t,{u:function(){return s}});var r=n(7169),o=n(7901),i=n(6066);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s=(0,o.z)({name:\"stats\",viewMode:!0,trackEvent:{category:\"menu\"},perform:function(e,t){return{appState:l(l({},t),{},{showStats:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.showStats},contextItemLabel:\"stats.title\",keyTest:function(e){return!e[i.tW.CTRL_OR_CMD]&&e.altKey&&e.code===i.aU.SLASH}})},6710:function(e,t,n){\"use strict\";n.d(t,{FL:function(){return We},vD:function(){return mt.vD},yA:function(){return _},BZ:function(){return C},mo:function(){return X.mo},uN:function(){return lt.uN},jK:function(){return lt.jK},FA:function(){return lt.FA},pw:function(){return ie},ZM:function(){return lt.ZM},X9:function(){return r.X},xF:function(){return G},pL:function(){return ee},jl:function(){return tt},kt:function(){return nt},EQ:function(){return ve},nz:function(){return gt.nz},_d:function(){return te._d},W3:function(){return ae},ns:function(){return te.ns},Yy:function(){return L},V:function(){return j},zi:function(){return O},jY:function(){return ce},Pb:function(){return ut},Qs:function(){return Et},iL:function(){return yt},u0:function(){return ht.u},Zp:function(){return X.Zp},JN:function(){return pt},y7:function(){return mt.y7},s:function(){return be},zp:function(){return lt.zp}});var r=n(533),o=n(1930),i=n(1935),a=n(242),l=n(75),s=n(1564),c=n(6340),u=function(e,t){for(var n=[],r=[],o=null,i=-1,a=(0,c.xn)((0,l.eD)(e,t,!0));++i<e.length;)a.get(e[i].id)?(r.length&&(n=n.concat(r),r=[]),n.push(i),o=i+1):e[i].isDeleted&&o===i?(o=i+1,r.push(i)):r=[];return n},d=function(e,t,n){if(\"containerId\"in e&&e.containerId){if(\"left\"!==n)return t.indexOf(e);var r=s.Z.getScene(e).getElement(e.containerId);if(r)return t.indexOf(r)}else{var o,i,a=null===(o=e.boundElements)||void 0===o||null===(i=o.find((function(e){return\"arrow\"!==e.type})))||void 0===i?void 0:i.id;if(a){if(\"left\"===n)return t.indexOf(e);var l=s.Z.getScene(e).getElement(a);if(l)return t.indexOf(l)}}},f=function(e,t){return t.reduce((function(t,n){var r=e[n];return t[r.id]=r,t}),{})},p=function(e,t,n){var r,l,s=u(t,e),p=f(t,s),h=(l=0,(r=s).reduce((function(e,t,n){return n>0&&r[n-1]!==t-1&&(l=++l),(e[l]||(e[l]=[])).push(t),e}),[]));return\"right\"===n&&(h=h.reverse()),h.forEach((function(r,i){var l=r[0],s=r[r.length-1],u=\"left\"===n?l:s,f=function(e,t,n,r){var o,i=t[n],l=function(t){return!t.isDeleted&&(!e.editingGroupId||t.groupIds.includes(e.editingGroupId))},s=\"left\"===r?(0,c.qr)(t,l,Math.max(0,n-1)):(0,c.cx)(t,l,n+1),u=t[s];if(!u)return-1;if(e.editingGroupId){var f;if((null==i?void 0:i.groupIds.join(\"\"))===(null==u?void 0:u.groupIds.join(\"\")))return null!==(f=d(u,t,r))&&void 0!==f?f:s;if(null==u||!u.groupIds.includes(e.editingGroupId))return-1}if(!u.groupIds.length)return null!==(o=d(u,t,r))&&void 0!==o?o:s;var p=e.editingGroupId?u.groupIds[u.groupIds.indexOf(e.editingGroupId)-1]:u.groupIds[u.groupIds.length-1],h=(0,a.Fb)(t,p);return h.length?\"left\"===r?t.indexOf(h[0]):t.indexOf(h[h.length-1]):s}(e,t,u,n);if(-1!==f&&u!==f){var p=\"left\"===n?t.slice(0,f):t.slice(0,l),h=t.slice(l,s+1),m=\"left\"===n?t.slice(f,l):t.slice(s+1,f+1),g=\"left\"===n?t.slice(s+1):t.slice(f+1);t=\"left\"===n?[].concat((0,o.Z)(p),(0,o.Z)(h),(0,o.Z)(m),(0,o.Z)(g)):[].concat((0,o.Z)(p),(0,o.Z)(m),(0,o.Z)(h),(0,o.Z)(g))}})),t.map((function(e){return p[e.id]?(0,i.ZP)(e):e}))},h=function(e,t,n){var r,l,s=u(e,t),c=f(e,s),d=[];if(\"left\"===n){if(t.editingGroupId){var p=(0,a.Fb)(e,t.editingGroupId);if(!p.length)return e;r=e.indexOf(p[0])}else r=0;l=s[s.length-1]}else{if(t.editingGroupId){var h=(0,a.Fb)(e,t.editingGroupId);if(!h.length)return e;l=e.indexOf(h[h.length-1])}else l=e.length-1;r=s[0]}for(var m=r;m<l+1;m++)s.includes(m)||d.push(e[m]);var g=Object.values(c).map((function(e){return(0,i.ZP)(e)})),v=e.slice(0,r),b=e.slice(l+1);return\"left\"===n?[].concat((0,o.Z)(v),(0,o.Z)(g),d,(0,o.Z)(b)):[].concat((0,o.Z)(v),d,(0,o.Z)(g),(0,o.Z)(b))},m=function(e,t){return p(t,e,\"left\")},g=function(e,t){return p(t,e,\"right\")},v=function(e,t){return h(e,t,\"left\")},b=function(e,t){return h(e,t,\"right\")},y=n(6066),x=n(8211),w=n(7901),k=n(3646),E=n(2335),S=n(4512),j=(0,w.z)({name:\"sendBackward\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:m(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendBackward\",keyPriority:40,keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&!e.shiftKey&&e.code===y.aU.BRACKET_LEFT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat((0,x.t)(\"labels.sendBackward\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+[\")),children:k.Gc})}}),_=(0,w.z)({name:\"bringForward\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:g(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringForward\",keyPriority:40,keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&!e.shiftKey&&e.code===y.aU.BRACKET_RIGHT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat((0,x.t)(\"labels.bringForward\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+]\")),children:k.t5})}}),O=(0,w.z)({name:\"sendToBack\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:v(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendToBack\",keyTest:function(e){return E.Um?e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.BRACKET_LEFT:e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.code===y.aU.BRACKET_LEFT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat((0,x.t)(\"labels.sendToBack\"),\" \u2014 \").concat(E.Um?(0,c.uY)(\"CtrlOrCmd+Alt+[\"):(0,c.uY)(\"CtrlOrCmd+Shift+[\")),children:k.pw})}}),C=(0,w.z)({name:\"bringToFront\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:b(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringToFront\",keyTest:function(e){return E.Um?e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.BRACKET_RIGHT:e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.code===y.aU.BRACKET_RIGHT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(e){return t(null)},title:\"\".concat((0,x.t)(\"labels.bringToFront\"),\" \u2014 \").concat(E.Um?(0,c.uY)(\"CtrlOrCmd+Alt+]\"):(0,c.uY)(\"CtrlOrCmd+Shift+]\")),children:k.IN})}}),I=n(7169),M=n(1047),T=n(1974),P=n(6938);function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var L=(0,w.z)({name:\"selectAll\",trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){if(t.editingLinearElement)return!1;var o=e.reduce((function(e,t){return t.isDeleted||(0,M.iB)(t)&&t.containerId||t.locked||(e[t.id]=!0),e}),{});return{appState:(0,a.bO)(A(A({},t),{},{selectedLinearElement:1===Object.keys(o).length&&(0,T.bt)(e[0])?new P._(e[0],r.scene):null,editingGroupId:null,selectedElementIds:o}),(0,M.Lm)(e)),commitToHistory:!0}},contextItemLabel:\"labels.selectAll\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.A}}),Z=n(1319),z=n(8290),R=n(5710);function N(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return B(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var H=function(e){var t=e.slice(),n=new Set,r=function e(t){var n,r,i,a=null===(n=t[0])||void 0===n||null===(r=n.groupIds)||void 0===r?void 0:r.join(\"\"),l=[t[0]],s=[],c=N(t.slice(1));try{for(c.s();!(i=c.n()).done;){var u,d=i.value;(null===(u=d.groupIds)||void 0===u?void 0:u.join(\"\"))===a?l.push(d):s.push(d)}}catch(e){c.e(e)}finally{c.f()}return s.length?[].concat(l,(0,o.Z)(e(s))):l},i=new Map;return t.forEach((function(e,o){var a;if(!i.has(e.id))if(null!==(a=e.groupIds)&&void 0!==a&&a.length){var l,s=e.groupIds[e.groupIds.length-1],c=t.slice(o).filter((function(e){var t,n=null==e||null===(t=e.groupIds)||void 0===t?void 0:t.some((function(e){return e===s}));return n&&i.set(e.id,!0),n})),u=N(r(c));try{for(u.s();!(l=u.n()).done;){var d=l.value;n.add(d)}}catch(e){u.e(e)}finally{u.f()}}else n.add(e)})),n.size!==e.length?(console.error(\"normalizeGroupElementOrder: lost some elements... bailing!\"),e):(0,o.Z)(n)},W=function(e){var t=function(e){var t=(0,c.I4)(e),n=e.slice(),r=new Set;return n.forEach((function(e,o){var i;if(e)if(null!==(i=e.boundElements)&&void 0!==i&&i.length)r.add(e),n[o]=null,e.boundElements.forEach((function(e){var o=t.get(e.id);o&&\"text\"===e.type&&(r.add(o[0]),n[o[1]]=null)}));else if(\"text\"===e.type&&e.containerId){var a,l=t.get(e.containerId);null!=l&&null!==(a=l[0].boundElements)&&void 0!==a&&a.find((function(t){return t.id===e.id}))||(r.add(e),n[o]=null)}else r.add(e),n[o]=null})),r.size!==e.length?(console.error(\"normalizeBoundElementsOrder: lost some elements... bailing!\"),e):(0,o.Z)(r)}(H(e));return t};function F(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return U(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return U(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function U(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var G=(0,w.z)({name:\"duplicateSelection\",trackEvent:{category:\"element\"},perform:function(e,t){if(t.editingLinearElement){var n=P._.duplicateSelectedPoints(t);return!!n&&{elements:e,appState:n.appState,commitToHistory:!0}}return Y(Y({},V(e,t)),{},{commitToHistory:!0})},contextItemLabel:\"labels.duplicateSelection\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.D},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{type:\"button\",icon:k.NA,title:\"\".concat((0,x.t)(\"labels.duplicateSelection\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+D\")),\"aria-label\":(0,x.t)(\"labels.duplicateSelection\"),onClick:function(){return r(null)},visible:(0,l.N)((0,M.Lm)(t),n)})}}),V=function(e,t){for(var n=W(e),r=new Map,i=[],s=[],u=new Map,d=function(e){var n=(0,M.Sy)(t.editingGroupId,r,e,{x:e.x+E.k\/2,y:e.y+E.k\/2});return u.set(e.id,n.id),s.push(e),i.push(n),n},f=(0,c.xn)((0,l.eD)(n,t,!0)),p=new Map,h=function(e){var t,n=F(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;p.set(r.id,!0)}}catch(e){n.e(e)}finally{n.f()}return e},m=[],g=-1;++g<n.length;){var v=n[g];if(!p.get(v.id)){var b=(0,R.WJ)(v);if(f.get(v.id)){if(v.groupIds.length||b){var y=(0,a.yO)(t,v);if(y){var x=(0,a.Fb)(n,y);m.push.apply(m,(0,o.Z)(h([].concat((0,o.Z)(x),(0,o.Z)(x.map((function(e){return d(e)})))))));continue}if(b){m.push.apply(m,(0,o.Z)(h([v,b,d(v),d(b)])));continue}}m.push.apply(m,(0,o.Z)(h([v,d(v)])))}else m.push.apply(m,(0,o.Z)(h([v])))}}var w=[],k=new Map;for(g=m.length;--g>=0;){var S=m[g];k.get(S.id)||(k.set(S.id,!0),w.push(S))}var j=w.reverse();return(0,R.P7)(m,s,u),(0,z.ek)(m,s,u),{elements:j,appState:(0,a.bO)(Y(Y({},t),{},{selectedGroupIds:{},selectedElementIds:i.reduce((function(e,t){return(0,T.Xh)(t)||(e[t.id]=!0),e}),{})}),(0,M.Lm)(j))}},X=(n(6208),n(2416)),q=n(2577),J=n(6552);function $(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ee=(0,w.z)({name:\"finalize\",trackEvent:!1,perform:function(e,t,n,r){var o,a=r.canvas,l=r.focusContainer,u=r.scene;if(t.editingLinearElement){var d=t.editingLinearElement,f=d.elementId,p=d.startBindingElement,h=d.endBindingElement,m=P._.getElement(f);if(m)return(0,T.Mn)(m)&&(0,z.HG)(m,p,h),{elements:m.points.length<2||(0,M.QD)(m)?e.filter((function(e){return e.id!==m.id})):void 0,appState:Q(Q({},t),{},{cursorButton:\"up\",editingLinearElement:null}),commitToHistory:!0}}var g=e,v=t.pendingImageElementId&&u.getElement(t.pendingImageElementId);v&&(0,i.DR)(v,{isDeleted:!0},!1),window.document.activeElement instanceof HTMLElement&&l();var b,y=t.multiElement?t.multiElement:\"freedraw\"===(null===(o=t.editingElement)||void 0===o?void 0:o.type)?t.editingElement:null;if(y){if(\"freedraw\"!==y.type&&\"touch\"!==t.lastPointerDownWith){var x=y.points,w=y.lastCommittedPoint;w&&x[x.length-1]===w||(0,i.DR)(y,{points:y.points.slice(0,-1)})}(0,M.QD)(y)&&(g=g.slice(0,-1));var k=(0,J.g6)(y.points,t.zoom.value);if((\"line\"===y.type||\"freedraw\"===y.type)&&k){var E=y.points,S=E[0];(0,i.DR)(y,{points:E.map((function(e,t){return t===E.length-1?[S[0],S[1]]:e}))})}if((0,T.Mn)(y)&&!k&&y.points.length>1){var j=P._.getPointAtIndexGlobalCoordinates(y,-1),_=(0,q.Z)(j,2),O=_[0],C=_[1];(0,z.R)(y,t,s.Z.getScene(y),{x:O,y:C})}t.activeTool.locked||\"freedraw\"===t.activeTool.type||(t.selectedElementIds[y.id]=!0)}return(t.activeTool.locked||\"freedraw\"===t.activeTool.type)&&y||(0,c.z8)(a),b=\"eraser\"===t.activeTool.type?(0,c.Om)(t,Q(Q({},t.activeTool.lastActiveTool||{type:\"selection\"}),{},{lastActiveToolBeforeEraser:null})):(0,c.Om)(t,{type:\"selection\"}),{elements:g,appState:Q(Q({},t),{},{cursorButton:\"up\",activeTool:(t.activeTool.locked||\"freedraw\"===t.activeTool.type)&&y?t.activeTool:b,draggingElement:null,multiElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:y&&!t.activeTool.locked&&\"freedraw\"!==t.activeTool.type?Q(Q({},t.selectedElementIds),{},(0,I.Z)({},y.id,!0)):t.selectedElementIds,selectedLinearElement:y&&(0,T.bt)(y)?new P._(y,u):t.selectedLinearElement,pendingImageElementId:null}),commitToHistory:\"freedraw\"===t.activeTool.type}},keyTest:function(e,t){return e.key===y.tW.ESCAPE&&(null!==t.editingLinearElement||!t.draggingElement&&null===t.multiElement)||(e.key===y.tW.ESCAPE||e.key===y.tW.ENTER)&&null!==t.multiElement},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.data;return(0,S.jsx)(Z.V,{type:\"button\",icon:k.$c,title:(0,x.t)(\"buttons.done\"),\"aria-label\":(0,x.t)(\"buttons.done\"),onClick:n,visible:null!=t.multiElement,size:(null==r?void 0:r.size)||\"medium\"})}}),te=n(8671);function ne(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ne(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ne(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var oe=\"{}\",ie=(0,w.z)({name:\"copyStyles\",trackEvent:{category:\"element\"},perform:function(e,t){var n=[],r=e.find((function(e){return t.selectedElementIds[e.id]}));if(n.push(r),r&&(0,T.Xo)(r)){var o=(0,R.WJ)(r);n.push(o)}return r&&(oe=JSON.stringify(n)),{appState:re(re({},t),{},{toast:{message:(0,x.t)(\"toast.copyStyles\")}}),commitToHistory:!1}},contextItemLabel:\"labels.copyStyles\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.C}}),ae=(0,w.z)({name:\"pasteStyles\",trackEvent:{category:\"element\"},perform:function(e,t){var n=JSON.parse(oe),r=n[0],o=n[1];if(!(0,M.r2)(r))return{elements:e,commitToHistory:!1};var a=(0,l.eD)(e,t,!0),s=a.map((function(e){return e.id}));return{elements:e.map((function(e){if(s.includes(e.id)){var t,n,l,c,u,d,f,p=r;if((0,M.iB)(e)&&e.containerId&&(p=o),!p)return e;var h=(0,i.BE)(e,{backgroundColor:null===(t=p)||void 0===t?void 0:t.backgroundColor,strokeWidth:null===(n=p)||void 0===n?void 0:n.strokeWidth,strokeColor:null===(l=p)||void 0===l?void 0:l.strokeColor,strokeStyle:null===(c=p)||void 0===c?void 0:c.strokeStyle,fillStyle:null===(u=p)||void 0===u?void 0:u.fillStyle,opacity:null===(d=p)||void 0===d?void 0:d.opacity,roughness:null===(f=p)||void 0===f?void 0:f.roughness,roundness:p.roundness?(0,T.eK)(p.roundness.type,e)?p.roundness:(0,T.UQ)(e):null});if((0,M.iB)(h)){var m,g,v,b=(null===(m=p)||void 0===m?void 0:m.fontSize)||E.n5,y=(null===(g=p)||void 0===g?void 0:g.fontFamily)||E.rk,x=null;(h=(0,i.BE)(h,{fontSize:b,fontFamily:y,textAlign:(null===(v=p)||void 0===v?void 0:v.textAlign)||E.Hg,lineHeight:p.lineHeight||(0,R.PT)(y)})).containerId&&(x=a.find((function(e){return(0,M.iB)(h)&&e.id===h.containerId}))||null),(0,M.oN)(h,x)}return\"arrow\"===h.type&&(h=(0,i.BE)(h,{startArrowhead:p.startArrowhead,endArrowhead:p.endArrowhead})),h}return e})),commitToHistory:!0}},contextItemLabel:\"labels.pasteStyles\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.V}});function le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?le(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,w.z)({name:\"toggleCanvasMenu\",trackEvent:{category:\"menu\"},perform:function(e,t){return{appState:se(se({},t),{},{openMenu:\"canvas\"===t.openMenu?null:\"canvas\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,S.jsx)(Z.V,{type:\"button\",icon:k.RY,\"aria-label\":(0,x.t)(\"buttons.menu\"),onClick:n,selected:\"canvas\"===t.openMenu})}}),(0,w.z)({name:\"toggleEditMenu\",trackEvent:{category:\"menu\"},perform:function(e,t){return{appState:se(se({},t),{},{openMenu:\"shape\"===t.openMenu?null:\"shape\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{visible:(0,M.RT)(n,(0,M.Lm)(t)),type:\"button\",icon:k.DG,\"aria-label\":(0,x.t)(\"buttons.edit\"),onClick:r,selected:\"shape\"===n.openMenu})}}),(0,w.z)({name:\"toggleFullScreen\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!(0,c.rB)()}},perform:function(){return(0,c.rB)()||(0,c.wo)(),(0,c.rB)()&&(0,c.Pr)(),{commitToHistory:!1}},keyTest:function(e){return e.key===y.tW.F&&!e[y.tW.CTRL_OR_CMD]}});var ce=(0,w.z)({name:\"toggleShortcuts\",viewMode:!0,trackEvent:{category:\"menu\",action:\"toggleHelpDialog\"},perform:function(e,t,n,r){var o=r.focusContainer;return\"help\"===t.openDialog&&o(),{appState:se(se({},t),{},{openDialog:\"help\"===t.openDialog?null:\"help\"}),commitToHistory:!1}},keyTest:function(e){return e.key===y.tW.QUESTION_MARK}}),ue=n(6655),de=n(6954);function fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fe(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function he(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return me(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return me(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function me(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ge=function(e,t){var n=(0,l.eD)((0,M.Lm)(e),t,!0);return n.length>=2&&!function(e){if(e.length>=2){var t,n=he(e[0].groupIds);try{var r=function(){var n=t.value;if(e.reduce((function(e,t){return e&&(0,a.Nd)(t,n)}),!0))return{v:!0}};for(n.s();!(t=n.n()).done;){var o=r();if(\"object\"===(0,ue.Z)(o))return o.v}}catch(e){n.e(e)}finally{n.f()}}return!1}(n)},ve=(0,w.z)({name:\"group\",trackEvent:{category:\"element\"},perform:function(e,t){var n=(0,l.eD)((0,M.Lm)(e),t,!0);if(n.length<2)return{appState:t,elements:e,commitToHistory:!1};var r=(0,a.iJ)(t);if(1===r.length){var s=r[0],u=new Set((0,a.Fb)(e,s).map((function(e){return e.id}))),d=new Set(n.map((function(e){return e.id})));if(new Set([].concat((0,o.Z)(Array.from(u)),(0,o.Z)(Array.from(d)))).size===u.size)return{appState:t,elements:e,commitToHistory:!1}}var f=(0,de.kb)(),p=(0,c.xn)(n),h=e.map((function(e){return p.get(e.id)?(0,i.BE)(e,{groupIds:(0,a.S_)(e.groupIds,f,t.editingGroupId)}):e})),m=(0,a.Fb)(h,f),g=m[m.length-1],v=h.lastIndexOf(g),b=h.slice(v+1),y=h.slice(0,v).filter((function(e){return!(0,a.Nd)(e,f)})),x=[].concat((0,o.Z)(y),(0,o.Z)(m),(0,o.Z)(b));return{appState:(0,a.F$)(f,pe(pe({},t),{},{selectedGroupIds:{}}),(0,M.Lm)(x)),elements:x,commitToHistory:!0}},contextItemLabel:\"labels.group\",predicate:function(e,t){return ge(e,t)},keyTest:function(e){return!e.shiftKey&&e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.G},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!ge(t,n),type:\"button\",icon:(0,S.jsx)(k.BF,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.group\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+G\")),\"aria-label\":(0,x.t)(\"labels.group\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),be=(0,w.z)({name:\"ungroup\",trackEvent:{category:\"element\"},perform:function(e,t){if(0===(0,a.iJ)(t).length)return{appState:t,elements:e,commitToHistory:!1};var n=[],r=e.map((function(e){(0,T.Xh)(e)&&n.push(e.id);var r=(0,a.h6)(e.groupIds,t.selectedGroupIds);return r.length===e.groupIds.length?e:(0,i.BE)(e,{groupIds:r})})),o=(0,a.bO)(pe(pe({},t),{},{selectedGroupIds:{}}),(0,M.Lm)(r));return n.forEach((function(e){return o.selectedElementIds[e]=!1})),{appState:o,elements:r,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.G.toUpperCase()},contextItemLabel:\"labels.ungroup\",predicate:function(e,t){return(0,a.iJ)(t).length>0},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{type:\"button\",hidden:0===(0,a.iJ)(n).length,icon:(0,S.jsx)(k.RJ,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.ungroup\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+G\")),\"aria-label\":(0,x.t)(\"labels.ungroup\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),ye=n(8982),xe=n(487),we=n.n(xe),ke=n(631),Ee=n.n(ke),Se=n(2052),je=n.n(Se),_e=n(4010),Oe=n.n(_e),Ce=n(1469),Ie=n.n(Ce),Me=n(9329),Te=n.n(Me),Pe=n(3729),De={};De.styleTagTransform=Te(),De.setAttributes=Oe(),De.insert=je().bind(null,\"head\"),De.domAPI=Ee(),De.insertStyleElement=Ie();we()(Pe.Z,De),Pe.Z&&Pe.Z.locals&&Pe.Z.locals;var Ae=n(9787),Le=function(e){var t=e.color,n=e.onClick,r=e.name,o=e.src,i=(0,ye.f)(r),a=(0,Ae.useState)(!1),l=(0,q.Z)(a,2),s=l[0],c=l[1],u=!s&&o,d=u?void 0:{background:t};return(0,S.jsx)(\"div\",{className:\"Avatar\",style:d,onClick:n,children:u?(0,S.jsx)(\"img\",{className:\"Avatar-img\",src:o,alt:i,referrerPolicy:\"no-referrer\",onError:function(){return c(!0)}}):i})},Ze=n(2264);function ze(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ze(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ze(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,w.z)({name:\"goToCollaborator\",viewMode:!0,trackEvent:{category:\"collab\"},perform:function(e,t,n){var r=n;return r?{appState:Re(Re(Re({},t),(0,Ze.s)({scenePoint:r,viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})),{},{openMenu:\"canvas\"===t.openMenu?null:t.openMenu}),commitToHistory:!1}:{appState:t,commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.data,o=(0,q.Z)(r,2),i=o[0],a=o[1],l=(0,ye.X)(i,t),s=l.background,c=l.stroke;return(0,S.jsx)(Le,{color:s,border:c,onClick:function(){return n(a.pointer)},name:a.username||\"\",src:a.avatarUrl})}});var Ne=n(2791);function Be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function He(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Be(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var We=(0,w.z)({name:\"addToLibrary\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){var i=(0,l.eD)((0,M.Lm)(e),t,!0);return i.some((function(e){return\"image\"===e.type}))?{commitToHistory:!1,appState:He(He({},t),{},{errorMessage:\"Support for adding images to the library coming soon!\"})}:r.library.getLatestLibrary().then((function(e){return r.library.setLibrary([{id:(0,de.kb)(),status:\"unpublished\",elements:i.map(Ne.OL),created:Date.now()}].concat((0,o.Z)(e)))})).then((function(){return{commitToHistory:!1,appState:He(He({},t),{},{toast:{message:(0,x.t)(\"toast.addedToLibrary\")}})}})).catch((function(e){return{commitToHistory:!1,appState:He(He({},t),{},{errorMessage:e.message})}}))},contextItemLabel:\"labels.addToLibrary\"}),Fe=n(8925);function Ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ke(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ue(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ue(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ye=function(e,t,n){var r=n.axis,o=n.position,i=(0,Fe.v2)(e),a=\"x\"===r?[\"minX\",\"maxX\"]:[\"minY\",\"maxY\"],l=(0,q.Z)(a,2),s=l[0],c=l[1],u={x:0,y:0};return Ke(Ke({},u),{},\"start\"===o?(0,I.Z)({},r,t[s]-i[s]):\"end\"===o?(0,I.Z)({},r,t[c]-i[c]):(0,I.Z)({},r,(t[s]+t[c])\/2-(i[s]+i[c])\/2))},Ge=function(e,t){return(0,l.eD)((0,M.Lm)(e),t).length>1},Ve=function(e,t,n){var r=function(e,t){var n=(0,a.AI)(e),r=(0,Fe.v2)(e);return n.flatMap((function(e){var n=Ye(e,r,t);return e.map((function(e){return(0,i.BE)(e,{x:e.x+n.x,y:e.y+n.y})}))}))}((0,l.eD)((0,M.Lm)(e),t),n),o=(0,c.xn)(r);return e.map((function(e){return o.get(e.id)||e}))};(0,w.z)({name:\"alignTop\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"start\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_UP},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.Ct,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignTop\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Up\")),\"aria-label\":(0,x.t)(\"labels.alignTop\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignBottom\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"end\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_DOWN},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.HL,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignBottom\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Down\")),\"aria-label\":(0,x.t)(\"labels.alignBottom\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignLeft\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"start\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_LEFT},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.xs,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignLeft\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Left\")),\"aria-label\":(0,x.t)(\"labels.alignLeft\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignRight\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"end\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_RIGHT},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.mh,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignRight\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Right\")),\"aria-label\":(0,x.t)(\"labels.alignRight\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignVerticallyCentered\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"center\",axis:\"y\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.ST,onClick:function(){return r(null)},title:(0,x.t)(\"labels.centerVertically\"),\"aria-label\":(0,x.t)(\"labels.centerVertically\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignHorizontallyCentered\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"center\",axis:\"x\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.gK,onClick:function(){return r(null)},title:(0,x.t)(\"labels.centerHorizontally\"),\"aria-label\":(0,x.t)(\"labels.centerHorizontally\"),visible:(0,l.N)((0,M.Lm)(t),n)})}});function Xe(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return qe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return qe(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function qe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Je=function(e,t){return(0,l.eD)((0,M.Lm)(e),t).length>1},$e=function(e,t,n){var r=function(e,t){var n,r=\"x\"===t.axis?[\"minX\",\"midX\",\"maxX\",\"width\"]:[\"minY\",\"midY\",\"maxY\",\"height\"],o=(0,q.Z)(r,4),l=o[0],s=o[1],c=o[2],u=o[3],d=(0,Fe.v2)(e),f=(0,a.AI)(e).map((function(e){return[e,(0,Fe.v2)(e)]})).sort((function(e,t){return e[1][s]-t[1][s]})),p=0,h=Xe(f);try{for(h.s();!(n=h.n()).done;)p+=n.value[1][u]}catch(e){h.e(e)}finally{h.f()}var m=(d[u]-p)\/(f.length-1);if(m<0){var g=f.findIndex((function(e){return e[1][l]===d[l]})),v=f.findIndex((function(e){return e[1][c]===d[c]})),b=(f[v][1][s]-f[g][1][s])\/(f.length-1),y=f[g][1][s];return f.flatMap((function(e,n){var r=(0,q.Z)(e,2),o=r[0],a=r[1],l={x:0,y:0};return n!==g&&n!==v&&(y+=b,l[t.axis]=y-a[s]),o.map((function(e){return(0,i.BE)(e,{x:e.x+l.x,y:e.y+l.y})}))}))}var x=d[l];return f.flatMap((function(e){var n=(0,q.Z)(e,2),r=n[0],o=n[1],a={x:0,y:0};return a[t.axis]=x-o[l],x+=m,x+=o[u],r.map((function(e){return(0,i.BE)(e,{x:e.x+a.x,y:e.y+a.y})}))}))}((0,l.eD)((0,M.Lm)(e),t),n),o=(0,c.xn)(r);return e.map((function(e){return o.get(e.id)||e}))},Qe=((0,w.z)({name:\"distributeHorizontally\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:$e(e,t,{space:\"between\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return!e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.H},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Je(t,n),type:\"button\",icon:k.uD,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.distributeHorizontally\"),\" \u2014 \").concat((0,c.uY)(\"Alt+H\")),\"aria-label\":(0,x.t)(\"labels.distributeHorizontally\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"distributeVertically\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:$e(e,t,{space:\"between\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return!e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.V},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Je(t,n),type:\"button\",icon:k.W5,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.distributeVertically\"),\" \u2014 \").concat((0,c.uY)(\"Alt+V\")),\"aria-label\":(0,x.t)(\"labels.distributeVertically\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),n(8634)),et=n(267),tt=(0,w.z)({name:\"flipHorizontal\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:rt(e,t,\"horizontal\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyH\"===e.code},contextItemLabel:\"labels.flipHorizontal\",predicate:function(e,t){return function(e,t){var n=(0,l.eD)((0,M.Lm)(e),t);return 1===n.length&&\"text\"!==n[0].type}(e,t)}}),nt=(0,w.z)({name:\"flipVertical\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:rt(e,t,\"vertical\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyV\"===e.code&&!e[y.tW.CTRL_OR_CMD]},contextItemLabel:\"labels.flipVertical\",predicate:function(e,t){return function(e,t){return 1===(0,l.eD)((0,M.Lm)(e),t).length}(e,t)}}),rt=function(e,t,n){var r=(0,l.eD)((0,M.Lm)(e),t);if(r.length>1)return e;var o=ot(r,t,n),i=(0,c.xn)(o);return e.map((function(e){return i.get(e.id)||e}))},ot=function(e,t,n){return e.forEach((function(e){it(e,t),\"vertical\"===n&&at(e,Math.PI)})),e},it=function(e,t){var n=e.x,r=e.y,o=e.width,a=e.height,l=(0,Qe.LW)(e.angle);(0,i.DR)(e,{angle:(0,Qe.LW)(0)});var s=(0,et.PC)(e,t.zoom),c=!0,u=s.nw;if(u||(c=!1,u=s.ne)){var d,f=0;(0,T.bt)(e)&&e.points.length<3&&(f=2*e.points.reduce((function(e,t){return Math.max(e,t[0])}),0)-e.width),(0,T.bt)(e)&&(d=(0,Fe.Ut)(e,e.points));var p=(0,Fe.qf)(e);if((0,T.bt)(e)&&e.points.length<3){for(var h=1;h<e.points.length;h++)P._.movePoints(e,[{index:h,point:[-e.points[h][0],e.points[h][1]]}]);P._.normalizePoints(e)}else{var m=d?d[2]-d[0]:p[2]-p[0],g=d?[d[0],d[1]]:[p[0],p[1]];(0,Qe.l2)((new Map).set(e.id,e),!1,e,c?\"nw\":\"ne\",!0,c?g[0]+m:g[0]-m,g[1])}var v=(0,Qe.LW)(2*Math.PI-l);if(v<0&&(v=(0,Qe.LW)(v+2*Math.PI)),(0,i.DR)(e,{angle:v}),(0,i.DR)(e,{x:n+f,y:r,width:o,height:a}),(0,z.Ww)(e),d&&(0,T.bt)(e)){var b=(0,Fe.Ut)(e,e.points),y=d[0]-b[0]+(d[2]-b[2]);(0,i.DR)(e,{x:e.x+.5*y,y:e.y,width:o,height:a})}}else(0,i.DR)(e,{angle:l})},at=function(e,t){var n=e.x,r=e.y,o=(0,Qe.LW)(e.angle+t);o<0&&(o=(0,Qe.LW)(2*Math.PI+o)),(0,i.DR)(e,{angle:o}),(0,i.DR)(e,{x:n,y:r})},lt=n(4688);function st(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ct(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?st(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):st(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ut=(0,w.z)({name:\"gridMode\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!e.gridSize}},perform:function(e,t){return{appState:ct(ct({},t),{},{gridSize:this.checked(t)?null:E.k}),commitToHistory:!1}},checked:function(e){return null!==e.gridSize},predicate:function(e,t,n){return void 0===n.gridModeEnabled},contextItemLabel:\"labels.showGrid\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.code===y.aU.QUOTE}});function dt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ft(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dt(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var pt=(0,w.z)({name:\"zenMode\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!e.zenModeEnabled}},perform:function(e,t){return{appState:ft(ft({},t),{},{zenModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.zenModeEnabled},predicate:function(e,t,n){return void 0===n.zenModeEnabled},contextItemLabel:\"buttons.zenMode\",keyTest:function(e){return!e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.Z}}),ht=n(4958),mt=n(202),gt=n(4929);function vt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function bt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?vt(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):vt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var yt=(0,w.z)({name:\"toggleLock\",trackEvent:{category:\"element\"},perform:function(e,t){var n=(0,l.eD)(e,t,!0);if(!n.length)return!1;var r=xt(n),o=(0,c.xn)(n),a=\"lock\"===r;return{elements:e.map((function(e){return o.has(e.id)?(0,i.BE)(e,{locked:a}):e})),appState:bt(bt({},t),{},{selectedLinearElement:a?null:t.selectedLinearElement}),commitToHistory:!0}},contextItemLabel:function(e,t){var n=(0,l.eD)(e,t,!1);return 1===n.length?n[0].locked?\"labels.elementLock.unlock\":\"labels.elementLock.lock\":\"lock\"===xt(n)?\"labels.elementLock.lockAll\":\"labels.elementLock.unlockAll\"},keyTest:function(e,t,n){return e.key.toLocaleLowerCase()===y.tW.L&&e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&(0,l.eD)(n,t,!1).length>0}}),xt=function(e){return e.some((function(e){return!e.locked}))?\"lock\":\"unlock\"};function wt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function kt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wt(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Et=(0,w.z)({name:\"toggleLinearEditor\",trackEvent:{category:\"element\"},predicate:function(e,t){var n=(0,l.eD)(e,t);return!(1!==n.length||!(0,T.bt)(n[0]))},perform:function(e,t,n,r){var o,i=(0,l.eD)((0,M.Lm)(e),t,!0)[0],a=(null===(o=t.editingLinearElement)||void 0===o?void 0:o.elementId)===i.id?null:new P._(i,r.scene);return{appState:kt(kt({},t),{},{editingLinearElement:a}),commitToHistory:!1}},contextItemLabel:function(e,t){var n,r=(0,l.eD)((0,M.Lm)(e),t,!0)[0];return(null===(n=t.editingLinearElement)||void 0===n?void 0:n.elementId)===r.id?\"labels.lineEditor.exit\":\"labels.lineEditor.edit\"}})},7901:function(e,t,n){\"use strict\";n.d(t,{N:function(){return r},z:function(){return o}});var r=[],o=function(e){return r=r.concat(e),e}},785:function(e,t,n){\"use strict\";n.d(t,{C:function(){return l}});var r=n(2335),o=n(8211),i=n(6340),a={toggleTheme:[(0,i.uY)(\"Shift+Alt+D\")],saveScene:[(0,i.uY)(\"CtrlOrCmd+S\")],loadScene:[(0,i.uY)(\"CtrlOrCmd+O\")],clearCanvas:[(0,i.uY)(\"CtrlOrCmd+Delete\")],imageExport:[(0,i.uY)(\"CtrlOrCmd+Shift+E\")],cut:[(0,i.uY)(\"CtrlOrCmd+X\")],copy:[(0,i.uY)(\"CtrlOrCmd+C\")],paste:[(0,i.uY)(\"CtrlOrCmd+V\")],copyStyles:[(0,i.uY)(\"CtrlOrCmd+Alt+C\")],pasteStyles:[(0,i.uY)(\"CtrlOrCmd+Alt+V\")],selectAll:[(0,i.uY)(\"CtrlOrCmd+A\")],deleteSelectedElements:[(0,i.uY)(\"Delete\")],duplicateSelection:[(0,i.uY)(\"CtrlOrCmd+D\"),(0,i.uY)(\"Alt+\".concat((0,o.t)(\"helpDialog.drag\")))],sendBackward:[(0,i.uY)(\"CtrlOrCmd+[\")],bringForward:[(0,i.uY)(\"CtrlOrCmd+]\")],sendToBack:[r.Um?(0,i.uY)(\"CtrlOrCmd+Alt+[\"):(0,i.uY)(\"CtrlOrCmd+Shift+[\")],bringToFront:[r.Um?(0,i.uY)(\"CtrlOrCmd+Alt+]\"):(0,i.uY)(\"CtrlOrCmd+Shift+]\")],copyAsPng:[(0,i.uY)(\"Shift+Alt+C\")],copyAsSvg:[],group:[(0,i.uY)(\"CtrlOrCmd+G\")],ungroup:[(0,i.uY)(\"CtrlOrCmd+Shift+G\")],gridMode:[(0,i.uY)(\"CtrlOrCmd+'\")],zenMode:[(0,i.uY)(\"Alt+Z\")],stats:[(0,i.uY)(\"Alt+\/\")],addToLibrary:[],flipHorizontal:[(0,i.uY)(\"Shift+H\")],flipVertical:[(0,i.uY)(\"Shift+V\")],viewMode:[(0,i.uY)(\"Alt+R\")],hyperlink:[(0,i.uY)(\"CtrlOrCmd+K\")],toggleLock:[(0,i.uY)(\"CtrlOrCmd+Shift+L\")]},l=function(e){var t=a[e];return t&&t.length>0?t[0]:\"\"}},7047:function(e,t,n){\"use strict\";n.d(t,{L:function(){return r}});var r=function(e,t,n,r){try{if(\"undefined\"==typeof window||{REACT_APP_BACKEND_V2_GET_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/\",REACT_APP_BACKEND_V2_POST_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/post\/\",REACT_APP_LIBRARY_URL:\"https:\/\/libraries.excalidraw.com\",REACT_APP_LIBRARY_BACKEND:\"https:\/\/us-central1-excalidraw-room-persistence.cloudfunctions.net\/libraries\",REACT_APP_PORTAL_URL:\"https:\/\/portal.excalidraw.com\",REACT_APP_WS_SERVER_URL:\"\",REACT_APP_FIREBASE_CONFIG:'{\"apiKey\":\"AIzaSyAd15pYlMci_xIp9ko6wkEsDzAAA0Dn0RU\",\"authDomain\":\"excalidraw-room-persistence.firebaseapp.com\",\"databaseURL\":\"https:\/\/excalidraw-room-persistence.firebaseio.com\",\"projectId\":\"excalidraw-room-persistence\",\"storageBucket\":\"excalidraw-room-persistence.appspot.com\",\"messagingSenderId\":\"654800341332\",\"appId\":\"1:654800341332:web:4a692de832b55bd57ce0c1\"}',REACT_APP_GOOGLE_ANALYTICS_ID:\"UA-387204-13\",REACT_APP_MATOMO_URL:\"https:\/\/excalidraw.matomo.cloud\/\",REACT_APP_CDN_MATOMO_TRACKER_URL:\"\/\/cdn.matomo.cloud\/excalidraw.matomo.cloud\/matomo.js\",REACT_APP_MATOMO_SITE_ID:\"1\",REACT_APP_PLUS_APP:\"https:\/\/app.excalidraw.com\",PKG_NAME:\"@excalidraw\/excalidraw\",PKG_VERSION:\"0.15.3\",IS_EXCALIDRAW_NPM_PACKAGE:!0}.JEST_WORKER_ID)return;window.gtag&&window.gtag(\"event\",t,{event_category:e,event_label:n,value:r}),window._paq&&window._paq.push([\"trackEvent\",e,t,n,r])}catch(e){console.error(\"error during analytics\",e)}}},8897:function(e,t,n){\"use strict\";n.d(t,{EN:function(){return p},eS:function(){return f},im:function(){return s},l$:function(){return h},s:function(){return d}});var r=n(5284),o=n(2335),i=n(8211),a=n(6340),l=o.ZB.includes(devicePixelRatio)?devicePixelRatio:1,s=function(){return{showWelcomeScreen:!1,theme:o.C6.LIGHT,collaborators:new Map,currentChartType:\"bar\",currentItemBackgroundColor:o.HN.backgroundColor,currentItemEndArrowhead:\"arrow\",currentItemFillStyle:o.HN.fillStyle,currentItemFontFamily:o.rk,currentItemFontSize:o.n5,currentItemOpacity:o.HN.opacity,currentItemRoughness:o.HN.roughness,currentItemStartArrowhead:null,currentItemStrokeColor:o.HN.strokeColor,currentItemRoundness:\"round\",currentItemStrokeStyle:o.HN.strokeStyle,currentItemStrokeWidth:o.HN.strokeWidth,currentItemTextAlign:o.Hg,cursorButton:\"up\",draggingElement:null,editingElement:null,editingGroupId:null,editingLinearElement:null,activeTool:{type:\"selection\",customType:null,locked:o.HN.locked,lastActiveTool:null},penMode:!1,penDetected:!1,errorMessage:null,exportBackground:!0,exportScale:l,exportEmbedScene:!1,exportWithDarkMode:!1,fileHandle:null,gridSize:null,isBindingEnabled:!0,isSidebarDocked:!1,isLoading:!1,isResizing:!1,isRotating:!1,lastPointerDownWith:\"mouse\",multiElement:null,name:\"\".concat((0,i.t)(\"labels.untitled\"),\"-\").concat((0,a.Fc)()),contextMenu:null,openMenu:null,openPopup:null,openSidebar:null,openDialog:null,pasteDialog:{shown:!1,data:null},previousSelectedElementIds:{},resizingElement:null,scrolledOutside:!1,scrollX:0,scrollY:0,selectedElementIds:{},selectedGroupIds:{},selectionElement:null,shouldCacheIgnoreZoom:!1,showStats:!1,startBoundElement:null,suggestedBindings:[],toast:null,viewBackgroundColor:r.white,zenModeEnabled:!1,zoom:{value:1},viewModeEnabled:!1,pendingImageElementId:null,showHyperlinkPopup:!1,selectedLinearElement:null}},c={showWelcomeScreen:{browser:!0,export:!1,server:!1},theme:{browser:!0,export:!1,server:!1},collaborators:{browser:!1,export:!1,server:!1},currentChartType:{browser:!0,export:!1,server:!1},currentItemBackgroundColor:{browser:!0,export:!1,server:!1},currentItemEndArrowhead:{browser:!0,export:!1,server:!1},currentItemFillStyle:{browser:!0,export:!1,server:!1},currentItemFontFamily:{browser:!0,export:!1,server:!1},currentItemFontSize:{browser:!0,export:!1,server:!1},currentItemRoundness:{browser:!0,export:!1,server:!1},currentItemOpacity:{browser:!0,export:!1,server:!1},currentItemRoughness:{browser:!0,export:!1,server:!1},currentItemStartArrowhead:{browser:!0,export:!1,server:!1},currentItemStrokeColor:{browser:!0,export:!1,server:!1},currentItemStrokeStyle:{browser:!0,export:!1,server:!1},currentItemStrokeWidth:{browser:!0,export:!1,server:!1},currentItemTextAlign:{browser:!0,export:!1,server:!1},cursorButton:{browser:!0,export:!1,server:!1},draggingElement:{browser:!1,export:!1,server:!1},editingElement:{browser:!1,export:!1,server:!1},editingGroupId:{browser:!0,export:!1,server:!1},editingLinearElement:{browser:!1,export:!1,server:!1},activeTool:{browser:!0,export:!1,server:!1},penMode:{browser:!0,export:!1,server:!1},penDetected:{browser:!0,export:!1,server:!1},errorMessage:{browser:!1,export:!1,server:!1},exportBackground:{browser:!0,export:!1,server:!1},exportEmbedScene:{browser:!0,export:!1,server:!1},exportScale:{browser:!0,export:!1,server:!1},exportWithDarkMode:{browser:!0,export:!1,server:!1},fileHandle:{browser:!1,export:!1,server:!1},gridSize:{browser:!0,export:!0,server:!0},height:{browser:!1,export:!1,server:!1},isBindingEnabled:{browser:!1,export:!1,server:!1},isSidebarDocked:{browser:!0,export:!1,server:!1},isLoading:{browser:!1,export:!1,server:!1},isResizing:{browser:!1,export:!1,server:!1},isRotating:{browser:!1,export:!1,server:!1},lastPointerDownWith:{browser:!0,export:!1,server:!1},multiElement:{browser:!1,export:!1,server:!1},name:{browser:!0,export:!1,server:!1},offsetLeft:{browser:!1,export:!1,server:!1},offsetTop:{browser:!1,export:!1,server:!1},contextMenu:{browser:!1,export:!1,server:!1},openMenu:{browser:!0,export:!1,server:!1},openPopup:{browser:!1,export:!1,server:!1},openSidebar:{browser:!0,export:!1,server:!1},openDialog:{browser:!1,export:!1,server:!1},pasteDialog:{browser:!1,export:!1,server:!1},previousSelectedElementIds:{browser:!0,export:!1,server:!1},resizingElement:{browser:!1,export:!1,server:!1},scrolledOutside:{browser:!0,export:!1,server:!1},scrollX:{browser:!0,export:!1,server:!1},scrollY:{browser:!0,export:!1,server:!1},selectedElementIds:{browser:!0,export:!1,server:!1},selectedGroupIds:{browser:!0,export:!1,server:!1},selectionElement:{browser:!1,export:!1,server:!1},shouldCacheIgnoreZoom:{browser:!0,export:!1,server:!1},showStats:{browser:!0,export:!1,server:!1},startBoundElement:{browser:!1,export:!1,server:!1},suggestedBindings:{browser:!1,export:!1,server:!1},toast:{browser:!1,export:!1,server:!1},viewBackgroundColor:{browser:!0,export:!0,server:!0},width:{browser:!1,export:!1,server:!1},zenModeEnabled:{browser:!0,export:!1,server:!1},zoom:{browser:!0,export:!1,server:!1},viewModeEnabled:{browser:!1,export:!1,server:!1},pendingImageElementId:{browser:!1,export:!1,server:!1},showHyperlinkPopup:{browser:!1,export:!1,server:!1},selectedLinearElement:{browser:!0,export:!1,server:!1}},u=function(e,t){for(var n={},r=0,o=Object.keys(e);r<o.length;r++){var i=o[r],a=c[i];if(null!=a&&a[t]){var l=e[i];n[i]=l}}return n},d=function(e){return u(e,\"export\")},f=function(e){return u(e,\"server\")},p=function(e){return\"eraser\"===e.activeTool.type},h=function(e){return\"hand\"===e.activeTool.type}},5674:function(e,t,n){\"use strict\";n.d(t,{dz:function(){return k},i$:function(){return b},ps:function(){return O}});var r=n(1930),o=n(7169),i=n(2577),a=n(56),l=n(2335),s=n(1047),c=n(6954);function u(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return d(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=32,m=12,g=256,v=\"NOT_SPREADSHEET\",b=\"VALID_SPREADSHEET\",y=function(e){var t=\/^([-+]?)[$\u20ac\u00a3\u00a5\u20a9]?([-+]?)([\\d.,]+)[%]?$\/.exec(e);return t?parseFloat(\"\".concat((t[1]||t[2])+t[3]).replace(\/,\/g,\"\")):null},x=function(e,t){return e.slice(1).every((function(e){return null!==y(e[t])}))},w=function(e){var t=e[0].length;if(t>2)return{type:v,reason:\"More than 2 columns\"};if(1===t){if(!x(e,0))return{type:v,reason:\"Value is not numeric\"};var n=null===y(e[0][0]),r=(n?e.slice(1):e).map((function(e){return y(e[0])}));return r.length<2?{type:v,reason:\"Less than two rows\"}:{type:b,spreadsheet:{title:n?e[0][0]:null,labels:null,values:r}}}var o=x(e,0),a=x(e,1);if(!o&&!a)return{type:v,reason:\"Value is not numeric\"};var l=a?[0,1]:[1,0],s=(0,i.Z)(l,2),c=s[0],u=s[1],d=null===y(e[0][u]),f=d?e.slice(1):e;return f.length<2?{type:v,reason:\"Less than 2 rows\"}:{type:b,spreadsheet:{title:d?e[0][u]:null,labels:f.map((function(e){return e[c]})),values:f.map((function(e){return y(e[u])}))}}},k=function(e){var t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\"\\t\")}));if(t.length&&2!==t[0].length&&(t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\",\")}))),0===t.length)return{type:v,reason:\"No values\"};var n=t[0].length;if(!t.every((function(e){return e.length===n})))return{type:v,reason:\"All rows don't have same number of columns\"};var r=w(t);if(r.type!==b){var o=w(function(e){for(var t=[],n=0;n<e[0].length;n++){for(var r=[],o=0;o<e.length;o++)r.push(e[o][n]);t.push(r)}return t}(t));if(o.type===b)return o}return r},E=a.Z.elementBackground.slice(2,a.Z.elementBackground.length),S={strokeColor:a.Z.elementStroke[0]},j=function(e){return{chartWidth:44*e.values.length+m,chartHeight:280}},_=function(e,t,n,o,i,c){var u=j(e),d=u.chartWidth,f=u.chartHeight,v=e.title?(0,s.VL)(p(p({backgroundColor:i,groupIds:[o]},S),{},{text:e.title,x:t+d\/2,y:n-g-24-l.n5,roundness:null,textAlign:\"center\"})):null,b=c?(0,s.Up)(p(p({backgroundColor:i,groupIds:[o]},S),{},{type:\"rectangle\",x:t,y:n-f,width:d,height:f,strokeColor:a.Z.elementStroke[0],fillStyle:\"solid\",opacity:6})):null;return[].concat((0,r.Z)(b?[b]:[]),(0,r.Z)(v?[v]:[]),(0,r.Z)(function(e,t,n,r,o){var i;return(null===(i=e.labels)||void 0===i?void 0:i.map((function(e,i){return(0,s.VL)(p(p({groupIds:[r],backgroundColor:o},S),{},{text:e.length>8?\"\".concat(e.slice(0,5),\"...\"):e,x:t+44*i+24,y:n+6,width:h,angle:5.87,fontSize:16,textAlign:\"center\",verticalAlign:\"top\"}))})))||[]}(e,t,n,o,i)),(0,r.Z)(function(e,t,n,o,i){var a=(0,s.VL)(p(p({groupIds:[o],backgroundColor:i},S),{},{x:t-m,y:n-m,text:\"0\",textAlign:\"right\"}));return[a,(0,s.VL)(p(p({groupIds:[o],backgroundColor:i},S),{},{x:t-m,y:n-g-a.height\/2,text:Math.max.apply(Math,(0,r.Z)(e.values)).toLocaleString(),textAlign:\"right\"}))]}(e,t,n,o,i)),(0,r.Z)(function(e,t,n,r,o){var i=j(e),a=i.chartWidth,l=i.chartHeight;return[(0,s.y8)(p(p({backgroundColor:o,groupIds:[r]},S),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,width:a,points:[[0,0],[a,0]]})),(0,s.y8)(p(p({backgroundColor:o,groupIds:[r]},S),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,height:l,points:[[0,0],[0,-l]]})),(0,s.y8)(p(p({backgroundColor:o,groupIds:[r]},S),{},{type:\"line\",x:t,y:n-g-m,startArrowhead:null,endArrowhead:null,strokeStyle:\"dotted\",width:a,opacity:50,points:[[0,0],[a,0]]}))]}(e,t,n,o,i)))},O=function(e,t,n,o){return\"line\"===e?function(e,t,n){var o,i=Math.max.apply(Math,(0,r.Z)(e.values)),a=(0,c.kb)(),d=E[Math.floor(Math.random()*E.length)],f=0,h=[],v=u(e.values);try{for(v.s();!(o=v.n()).done;){var b=o.value,y=44*f,x=-b\/i*g;h.push([y,x]),f++}}catch(e){v.e(e)}finally{v.f()}var w=Math.max.apply(Math,(0,r.Z)(h.map((function(e){return e[0]})))),k=Math.max.apply(Math,(0,r.Z)(h.map((function(e){return e[1]})))),j=Math.min.apply(Math,(0,r.Z)(h.map((function(e){return e[0]})))),O=Math.min.apply(Math,(0,r.Z)(h.map((function(e){return e[1]})))),C=(0,s.y8)(p(p({backgroundColor:d,groupIds:[a]},S),{},{type:\"line\",x:t+m+16,y:n-m,startArrowhead:null,endArrowhead:null,height:k-O,width:w-j,strokeWidth:2,points:h})),I=e.values.map((function(e,r){var o=44*r+6,l=-e\/i*g+6;return(0,s.Up)(p(p({backgroundColor:d,groupIds:[a]},S),{},{fillStyle:\"solid\",strokeWidth:2,type:\"ellipse\",x:t+o+16,y:n+l-24,width:m,height:m}))})),M=e.values.map((function(e,r){var o=44*r+6,l=e\/i*g+6+m;return(0,s.y8)(p(p({backgroundColor:d,groupIds:[a]},S),{},{type:\"line\",x:t+o+16+6,y:n-l,startArrowhead:null,endArrowhead:null,height:l,strokeStyle:\"dotted\",opacity:50,points:[[0,0],[0,l]]}))}));return[].concat((0,r.Z)(_(e,t,n,a,d,\"production\"===l.Vi.DEVELOPMENT)),[C],(0,r.Z)(M),(0,r.Z)(I))}(t,n,o):function(e,t,n){var o=Math.max.apply(Math,(0,r.Z)(e.values)),i=(0,c.kb)(),a=E[Math.floor(Math.random()*E.length)],u=e.values.map((function(e,r){var l=e\/o*g;return(0,s.Up)(p(p({backgroundColor:a,groupIds:[i]},S),{},{type:\"rectangle\",x:t+44*r+m,y:n-l-m,width:h,height:l}))}));return[].concat((0,r.Z)(u),(0,r.Z)(_(e,t,n,i,a,\"production\"===l.Vi.DEVELOPMENT)))}(t,n,o)}},8982:function(e,t,n){\"use strict\";n.d(t,{X:function(){return o},f:function(){return i}});var r=n(56),o=function(e,t){if(null!=t&&t.collaborators){var n=t.collaborators.get(e);if(null!=n&&n.color)return n.color}var o=e.split(\"\").reduce((function(e,t){return e+t.charCodeAt(0)}),0),i=r.Z.elementBackground.slice(3),a=r.Z.elementStroke.slice(3);return{background:i[o%i.length],stroke:a[o%a.length]}},i=function(e){return null!=e&&e.trim()?e.trim()[0].toUpperCase():\"?\"}},6665:function(e,t,n){\"use strict\";n.d(t,{dd:function(){return _},mQ:function(){return S},uR:function(){return j},vQ:function(){return x},vt:function(){return b},wx:function(){return v}});var r=n(7169),o=n(8950),i=n(2975),a=n.n(i),l=n(4162),s=n(5674),c=n(2335),u=n(1974),d=n(6340);function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=\"\",m=!1,g=\"clipboard\"in navigator&&\"readText\"in navigator.clipboard,v=\"clipboard\"in navigator&&\"writeText\"in navigator.clipboard,b=\"clipboard\"in navigator&&\"write\"in navigator.clipboard&&\"ClipboardItem\"in window&&\"toBlob\"in HTMLCanvasElement.prototype,y=function(e){return!(![c.r8.excalidraw,c.r8.excalidrawClipboard].includes(null==e?void 0:e.type)||!Array.isArray(e.elements))},x=function(){var e=(0,o.Z)(a().mark((function e(t,n,r){var o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o={type:c.r8.excalidrawClipboard,elements:t,files:r?t.reduce((function(e,t){return(0,u.wi)(t)&&r[t.fileId]&&(e[t.fileId]=r[t.fileId]),e}),{}):void 0},i=JSON.stringify(o),h=i,e.prev=3,m=!1,e.next=7,_(i);case 7:e.next=13;break;case 9:e.prev=9,e.t0=e.catch(3),m=!0,console.error(e.t0);case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n,r){return e.apply(this,arguments)}}(),w=function(){if(!h)return{};try{return JSON.parse(h)}catch(e){return console.error(e),{}}},k=function(e){var t=(0,s.dz)(e);return t.type===s.i$?{spreadsheet:t.spreadsheet}:null},E=function(){var e=(0,o.Z)(a().mark((function e(t){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!t){e.next=5;break}e.t0=null===(n=t.clipboardData)||void 0===n?void 0:n.getData(\"text\/plain\"),e.next=11;break;case 5:if(e.t1=g,!e.t1){e.next=10;break}return e.next=9,navigator.clipboard.readText();case 9:e.t1=e.sent;case 10:e.t0=e.t1;case 11:return r=e.t0,e.abrupt(\"return\",(r||\"\").trim());case 15:return e.prev=15,e.t2=e.catch(0),e.abrupt(\"return\",\"\");case 18:case\"end\":return e.stop()}}),e,null,[[0,15]])})));return function(t){return e.apply(this,arguments)}}(),S=function(){var e=(0,o.Z)(a().mark((function e(t){var n,r,o,i,s,c=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=c.length>1&&void 0!==c[1]&&c[1],e.next=3,E(t);case 3:if((r=e.sent)&&(n||!r.includes(l.oj))){e.next=6;break}return e.abrupt(\"return\",w());case 6:if(!(o=!n&&k(r))){e.next=9;break}return e.abrupt(\"return\",o);case 9:if(i=w(),e.prev=10,s=JSON.parse(r),!y(s)){e.next=14;break}return e.abrupt(\"return\",{elements:s.elements,files:s.files,text:n?JSON.stringify(s.elements,null,2):void 0});case 14:e.next=18;break;case 16:e.prev=16,e.t0=e.catch(10);case 18:return e.abrupt(\"return\",m&&i.elements?p(p({},i),{},{text:n?JSON.stringify(i.elements,null,2):void 0}):{text:r});case 19:case\"end\":return e.stop()}}),e,null,[[10,16]])})));return function(t){return e.apply(this,arguments)}}(),j=function(){var e=(0,o.Z)(a().mark((function e(t){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,navigator.clipboard.write([new window.ClipboardItem((0,r.Z)({},c.LO.png,t))]);case 3:case 21:e.next=24;break;case 5:if(e.prev=5,e.t0=e.catch(0),!(0,d.y8)(t)){e.next=23;break}return e.t1=navigator.clipboard,e.t2=window.ClipboardItem,e.t3=r.Z,e.t4={},e.t5=c.LO.png,e.next=15,t;case 15:return e.t6=e.sent,e.t7=(0,e.t3)(e.t4,e.t5,e.t6),e.t8=new e.t2(e.t7),e.t9=[e.t8],e.next=21,e.t1.write.call(e.t1,e.t9);case 23:throw e.t0;case 24:case\"end\":return e.stop()}}),e,null,[[0,5]])})));return function(t){return e.apply(this,arguments)}}(),_=function(){var e=(0,o.Z)(a().mark((function e(t){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!1,!v){e.next=11;break}return e.prev=2,e.next=5,navigator.clipboard.writeText(t||\"\");case 5:n=!0,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(e.t0);case 11:if(n||O(t||\" \")){e.next=13;break}throw new Error(\"couldn't copy\");case 13:case\"end\":return e.stop()}}),e,null,[[2,8]])})));return function(t){return e.apply(this,arguments)}}(),O=function(e){var t=\"rtl\"===document.documentElement.getAttribute(\"dir\"),n=document.createElement(\"textarea\");n.style.border=\"0\",n.style.padding=\"0\",n.style.margin=\"0\",n.style.position=\"absolute\",n.style[t?\"right\":\"left\"]=\"-9999px\";var r=window.pageYOffset||document.documentElement.scrollTop;n.style.top=\"\".concat(r,\"px\"),n.style.fontSize=\"12pt\",n.setAttribute(\"readonly\",\"\"),n.value=e,document.body.appendChild(n);var o=!1;try{n.select(),n.setSelectionRange(0,n.value.length),o=document.execCommand(\"copy\")}catch(e){console.error(e)}return n.remove(),o}},56:function(e,t,n){\"use strict\";var r=n(1930),o=n(5284),i=function(e){return[o.red[e],o.pink[e],o.grape[e],o.violet[e],o.indigo[e],o.blue[e],o.cyan[e],o.teal[e],o.green[e],o.lime[e],o.yellow[e],o.orange[e]]};t.Z={canvasBackground:[o.white,o.gray[0],o.gray[1]].concat((0,r.Z)(i(0))),elementBackground:[\"transparent\",o.gray[4],o.gray[6]].concat((0,r.Z)(i(6))),elementStroke:[o.black,o.gray[8],o.gray[7]].concat((0,r.Z)(i(9)))}},6798:function(e,t,n){\"use strict\";n.d(t,{o:function(){return f},w:function(){return d}});var r=n(2577),o=n(4739),i=n(6710),a=n(8211),l=n(9487),s=n(2134),c=n(7046),u=n(4512),d=(0,o.cn)(null),f=function(){var e=(0,o.KO)(d,l.yE),t=(0,r.Z)(e,2),n=t[0],f=t[1],p=(0,s.eh)();return n&&\"clearCanvas\"===n?(0,u.jsx)(c.Z,{onConfirm:function(){p.executeAction(i.mo),f(null)},onCancel:function(){return f(null)},title:(0,a.t)(\"clearCanvasDialog.title\"),children:(0,u.jsxs)(\"p\",{className:\"clear-canvas__content\",children:[\" \",(0,a.t)(\"alerts.clearReset\")]})}):null}},2134:function(e,t,n){\"use strict\";n.d(t,{ZP:function(){return Kr},Fy:function(){return wr},eh:function(){return _r},gF:function(){return Sr},J0:function(){return kr},bd:function(){return Er},n9:function(){return jr}});var r=n(6655),o=n(2577),i=n(1930),a=n(8950),l=n(8821),s=n(5169),c=n(3173),u=n(2248),d=n(7245),f=n(2312),p=n(7169),h=n(2975),m=n.n(h),g=n(9787),v=n.n(g),b=n(5156),y=n(8234),x=n(45),w=n(5605),k=n(6710),E=n(3646),S=n(1319),j=n(8211),_=n(6066),O=n(1935),C=n(8290),I=n(6340),M=n(2335),T=n(4512);function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function D(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var A=function(e,t,n){var r=!1;if(!(t.multiElement||t.resizingElement||t.editingElement||t.draggingElement)){var o=n();if(null===o)return{commitToHistory:r};var i=(0,I.xn)(e),a=o.elements,l=(0,I.xn)(a),s=e.filter((function(e){return!l.has(e.id)})),c=a.map((function(e){return(0,O.BE)(i.get(e.id)||e,e)})).concat(s.map((function(e){return(0,O.BE)(e,{isDeleted:!0})})));return(0,C.$q)(c,s),{elements:c,appState:D(D({},t),o.appState),commitToHistory:r,syncHistory:!0}}return{commitToHistory:r}},L=n(7047),Z=function(e,t,n,o,i,a){if(e.trackEvent)try{if(\"object\"===(0,r.Z)(e.trackEvent))(!e.trackEvent.predicate||e.trackEvent.predicate(n,o,a))&&(0,L.L)(e.trackEvent.category,e.trackEvent.action||e.name,\"\".concat(t,\" (\").concat(i.device.isMobile?\"mobile\":\"desktop\",\")\"))}catch(e){console.error(\"error while logging action:\",e)}},z=function(){function e(t,n,r,o){var i=this;(0,l.Z)(this,e),this.actions={},this.renderAction=function(e,t){var n=i.app.props.UIOptions.canvasActions;if(i.actions[e]&&\"PanelComponent\"in i.actions[e]&&(!(e in n)||n[e])){var r=i.actions[e],o=r.PanelComponent;o.displayName=\"PanelComponent\";var a=i.getElementsIncludingDeleted(),l=i.getAppState();return(0,T.jsx)(o,{elements:i.getElementsIncludingDeleted(),appState:i.getAppState(),updateData:function(e){Z(r,\"ui\",l,a,i.app,e),i.updater(r.perform(i.getElementsIncludingDeleted(),i.getAppState(),e,i.app))},appProps:i.app.props,data:t})}return null},this.isActionEnabled=function(e){var t=i.getElementsIncludingDeleted(),n=i.getAppState();return!e.predicate||e.predicate(t,n,i.app.props,i.app)},this.updater=function(e){if(!e||!(\"then\"in e))return t(e);e.then((function(e){return t(e)}))},this.getAppState=n,this.getElementsIncludingDeleted=r,this.app=o}return(0,s.Z)(e,[{key:\"registerAction\",value:function(e){this.actions[e.name]=e}},{key:\"registerAll\",value:function(e){var t=this;e.forEach((function(e){return t.registerAction(e)}))}},{key:\"handleKeyDown\",value:function(e){var t=this,n=this.app.props.UIOptions.canvasActions,r=Object.values(this.actions).sort((function(e,t){return(t.keyPriority||0)-(e.keyPriority||0)})).filter((function(r){return(!(r.name in n)||n[r.name])&&r.keyTest&&r.keyTest(e,t.getAppState(),t.getElementsIncludingDeleted())}));if(1!==r.length)return r.length>1&&console.warn(\"Canceling as multiple actions match this shortcut\",r),!1;var o=r[0];if(this.getAppState().viewModeEnabled&&!0!==o.viewMode)return!1;var i=this.getElementsIncludingDeleted(),a=this.getAppState();return Z(o,\"keyboard\",a,i,this.app,null),e.preventDefault(),e.stopPropagation(),this.updater(r[0].perform(i,a,null,this.app)),!0}},{key:\"executeAction\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"api\",n=this.getElementsIncludingDeleted(),r=this.getAppState(),o=null;Z(e,t,r,n,this.app,o),this.updater(e.perform(n,r,o,this.app))}}]),e}(),R=n(7901),N=n(8897),B=n(6665),H=n(9485),W=n(7053),F=n(679),U=n(1047),K=n(6938),Y=n(2791),G=n(1974),V=function(e){var t=Array.from(e.values());return{x:q(t,(function(e){return e.x}))\/t.length,y:q(t,(function(e){return e.y}))\/t.length}},X=function(e){var t=(0,o.Z)(e,2),n=t[0],r=t[1];return Math.hypot(n.x-r.x,n.y-r.y)},q=function(e,t){return e.reduce((function(e,n){return e+t(n)}),0)},J=n(242);function $(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ee=function(e){return{selectedElementIds:e.selectedElementIds,selectedGroupIds:e.selectedGroupIds,viewBackgroundColor:e.viewBackgroundColor,editingLinearElement:e.editingLinearElement,editingGroupId:e.editingGroupId,name:e.name}},te=function(){function e(){var t=this;(0,l.Z)(this,e),this.elementCache=new Map,this.recording=!0,this.stateHistory=[],this.redoStack=[],this.lastEntry=null,this.generateEntry=function(e,n){return t.dehydrateHistoryEntry({appState:ee(e),elements:n.reduce((function(t,n){if((0,G.bt)(n)&&e.multiElement&&e.multiElement.id===n.id){if(e.multiElement&&e.multiElement.id===n.id&&n.points.length<2)return t;t.push(Q(Q({},n),{},{points:n.lastCommittedPoint!==n.points[n.points.length-1]?n.points.slice(0,-1):n.points}))}else t.push(n);return t}),[])})}}return(0,s.Z)(e,[{key:\"hydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.parse(n),elements:r.map((function(e){var n,r=null===(n=t.elementCache.get(e.id))||void 0===n?void 0:n.get(e.versionNonce);if(!r)throw new Error(\"Element not found: \".concat(e.id,\":\").concat(e.versionNonce));return r}))}}},{key:\"dehydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.stringify(n),elements:r.map((function(e){t.elementCache.has(e.id)||t.elementCache.set(e.id,new Map);var n=t.elementCache.get(e.id);return n.has(e.versionNonce)||n.set(e.versionNonce,(0,Y.OL)(e)),{id:e.id,versionNonce:e.versionNonce}}))}}},{key:\"getSnapshotForTest\",value:function(){var e=this;return{recording:this.recording,stateHistory:this.stateHistory.map((function(t){return e.hydrateHistoryEntry(t)})),redoStack:this.redoStack.map((function(t){return e.hydrateHistoryEntry(t)}))}}},{key:\"clear\",value:function(){this.stateHistory.length=0,this.redoStack.length=0,this.lastEntry=null,this.elementCache.clear()}},{key:\"shouldCreateEntry\",value:function(e){var t,n=this.lastEntry;if(!n)return!0;if(e.elements.length!==n.elements.length)return!0;for(var r=e.elements.length-1;r>-1;r--){var o=e.elements[r],i=n.elements[r];if(!o||!i||o.id!==i.id||o.versionNonce!==i.versionNonce)return!0}for(t in e.appState){var a,l;if(\"editingLinearElement\"===t)if((null===(a=e.appState[t])||void 0===a?void 0:a.elementId)===(null===(l=n.appState[t])||void 0===l?void 0:l.elementId))continue;if(\"selectedElementIds\"!==t&&\"selectedGroupIds\"!==t&&e.appState[t]!==n.appState[t])return!0}return!1}},{key:\"pushEntry\",value:function(e,t){var n=this.generateEntry(e,t),r=this.hydrateHistoryEntry(n);if(r){if(!this.shouldCreateEntry(r))return;this.stateHistory.push(n),this.lastEntry=r,this.clearRedoStack()}}},{key:\"clearRedoStack\",value:function(){this.redoStack.splice(0,this.redoStack.length)}},{key:\"redoOnce\",value:function(){if(0===this.redoStack.length)return null;var e=this.redoStack.pop();return void 0!==e?(this.stateHistory.push(e),this.hydrateHistoryEntry(e)):null}},{key:\"undoOnce\",value:function(){if(1===this.stateHistory.length)return null;var e=this.stateHistory.pop(),t=this.stateHistory[this.stateHistory.length-1];return void 0!==e?(this.redoStack.push(e),this.hydrateHistoryEntry(t)):null}},{key:\"setCurrentState\",value:function(e,t){this.lastEntry=this.hydrateHistoryEntry(this.generateEntry(e,t))}},{key:\"resumeRecording\",value:function(){this.recording=!0}},{key:\"record\",value:function(e,t){this.recording&&(this.pushEntry(e,t),this.recording=!1)}}]),e}(),ne=n(6552),re=n(3547),oe=n(3063),ie=n(75),ae=n(1564),le=n(746),se=[{icon:E.zu,value:\"selection\",key:_.tW.V,numericKey:_.tW[1],fillable:!0},{icon:E.OW,value:\"rectangle\",key:_.tW.R,numericKey:_.tW[2],fillable:!0},{icon:E.nb,value:\"diamond\",key:_.tW.D,numericKey:_.tW[3],fillable:!0},{icon:E.Re,value:\"ellipse\",key:_.tW.O,numericKey:_.tW[4],fillable:!0},{icon:E.e0,value:\"arrow\",key:_.tW.A,numericKey:_.tW[5],fillable:!0},{icon:E.zb,value:\"line\",key:_.tW.L,numericKey:_.tW[6],fillable:!0},{icon:E.Pm,value:\"freedraw\",key:[_.tW.P,_.tW.X],numericKey:_.tW[7],fillable:!1},{icon:E.VL,value:\"text\",key:_.tW.T,numericKey:_.tW[8],fillable:!1},{icon:E.XB,value:\"image\",key:null,numericKey:_.tW[9],fillable:!1},{icon:E.$q,value:\"eraser\",key:_.tW.E,numericKey:_.tW[0],fillable:!1}],ce=n(2891),ue=n(487),de=n.n(ue),fe=n(631),pe=n.n(fe),he=n(2052),me=n.n(he),ge=n(4010),ve=n.n(ge),be=n(1469),ye=n.n(be),xe=n(9329),we=n.n(xe),ke=n(6578),Ee={};Ee.styleTagTransform=we(),Ee.setAttributes=ve(),Ee.insert=me().bind(null,\"head\"),Ee.domAPI=pe(),Ee.insertStyleElement=ye();de()(ke.Z,Ee),ke.Z&&ke.Z.locals&&ke.Z.locals;var Se=n(785),je=\"separator\",_e=v().memo((function(e){var t=e.actionManager,n=e.items,r=e.top,o=e.left,i=Sr(),a=jr(),l=Er(),s=n.reduce((function(e,n){return!n||n!==je&&n.predicate&&!n.predicate(l,i,t.app.props,t.app)||e.push(n),e}),[]);return(0,T.jsx)(ce.J,{onCloseRequest:function(){return a({contextMenu:null})},top:r,left:o,fitInViewport:!0,offsetLeft:i.offsetLeft,offsetTop:i.offsetTop,viewportWidth:i.width,viewportHeight:i.height,children:(0,T.jsx)(\"ul\",{className:\"context-menu\",onContextMenu:function(e){return e.preventDefault()},children:s.map((function(e,n){var r;if(e===je)return s[n-1]&&s[n-1]!==je?(0,T.jsx)(\"hr\",{className:\"context-menu-item-separator\"},n):null;var o=e.name,c=\"\";return e.contextItemLabel&&(c=\"function\"==typeof e.contextItemLabel?(0,j.t)(e.contextItemLabel(l,i)):(0,j.t)(e.contextItemLabel)),(0,T.jsx)(\"li\",{\"data-testid\":o,onClick:function(){a({contextMenu:null},(function(){t.executeAction(e,\"contextMenu\")}))},children:(0,T.jsxs)(\"button\",{className:(0,x.Z)(\"context-menu-item\",{dangerous:\"deleteSelectedElements\"===o,checkmark:null===(r=e.checked)||void 0===r?void 0:r.call(e,i)}),children:[(0,T.jsx)(\"div\",{className:\"context-menu-item__label\",children:c}),(0,T.jsx)(\"kbd\",{className:\"context-menu-item__shortcut\",children:o?(0,Se.C)(o):\"\"})]})},n)}))})})})),Oe=n(2726),Ce=n(7239),Ie=n(8120),Me=n(6086),Te={};Te.styleTagTransform=we(),Te.setAttributes=ve(),Te.insert=me().bind(null,\"head\"),Te.domAPI=pe(),Te.insertStyleElement=ye();de()(Me.Z,Te),Me.Z&&Me.Z.locals&&Me.Z.locals;var Pe=n(1894),De=n(5710);function Ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ae(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ae(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ze(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ze(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ze(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function ze(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Re=function(e){var t,n=e.appState,r=e.elements,o=e.renderAction,i=(0,ie.Zs)((0,U.Lm)(r),n),a=!1;2===i.length&&((0,G.Xo)(i[0])||(0,G.Xo)(i[1]))&&(a=!0);var l,s=Boolean(n.editingElement),c=wr(),u=\"rtl\"===document.documentElement.getAttribute(\"dir\"),d=(0,ie.$b)(n.activeTool.type)||i.some((function(e){return(0,ie.$b)(e.type)&&!(0,I.Qm)(e.backgroundColor)})),f=(0,ie.$b)(n.activeTool.type)||i.some((function(e){return(0,ie.$b)(e.type)})),p=1===i.length||a,h=(null===(t=i[0])||void 0===t?void 0:t.type)||null,m=Ze(i);try{for(m.s();!(l=m.n()).done;){if(l.value.type!==h){h=null;break}}}catch(e){m.e(e)}finally{m.f()}return(0,T.jsxs)(\"div\",{className:\"panelColumn\",children:[(0,T.jsx)(\"div\",{children:((0,Ie.PD)(n.activeTool.type)&&\"image\"!==n.activeTool.type&&\"image\"!==h||i.some((function(e){return(0,Ie.PD)(e.type)})))&&o(\"changeStrokeColor\")}),f&&(0,T.jsx)(\"div\",{children:o(\"changeBackgroundColor\")}),d&&o(\"changeFillStyle\"),((0,ie.Zd)(n.activeTool.type)||i.some((function(e){return(0,ie.Zd)(e.type)})))&&o(\"changeStrokeWidth\"),(\"freedraw\"===n.activeTool.type||i.some((function(e){return\"freedraw\"===e.type})))&&o(\"changeStrokeShape\"),((0,ie.M9)(n.activeTool.type)||i.some((function(e){return(0,ie.M9)(e.type)})))&&(0,T.jsxs)(T.Fragment,{children:[o(\"changeStrokeStyle\"),o(\"changeSloppiness\")]}),((0,ie.sh)(n.activeTool.type)||i.some((function(e){return(0,ie.sh)(e.type)})))&&(0,T.jsx)(T.Fragment,{children:o(\"changeRoundness\")}),((0,ie.bZ)(n.activeTool.type)||i.some((function(e){return(0,ie.bZ)(e.type)})))&&(0,T.jsxs)(T.Fragment,{children:[o(\"changeFontSize\"),o(\"changeFontFamily\"),(0,De.aV)(i)&&o(\"changeTextAlign\")]}),(0,De.cn)(i)&&o(\"changeVerticalAlign\"),((0,ie.Un)(n.activeTool.type)||i.some((function(e){return(0,ie.Un)(e.type)})))&&(0,T.jsx)(T.Fragment,{children:o(\"changeArrowhead\")}),o(\"changeOpacity\"),(0,T.jsxs)(\"fieldset\",{children:[(0,T.jsx)(\"legend\",{children:(0,j.t)(\"labels.layers\")}),(0,T.jsxs)(\"div\",{className:\"buttonList\",children:[o(\"sendToBack\"),o(\"sendBackward\"),o(\"bringToFront\"),o(\"bringForward\")]})]}),i.length>1&&!a&&(0,T.jsxs)(\"fieldset\",{children:[(0,T.jsx)(\"legend\",{children:(0,j.t)(\"labels.align\")}),(0,T.jsxs)(\"div\",{className:\"buttonList\",children:[u?(0,T.jsxs)(T.Fragment,{children:[o(\"alignRight\"),o(\"alignHorizontallyCentered\"),o(\"alignLeft\")]}):(0,T.jsxs)(T.Fragment,{children:[o(\"alignLeft\"),o(\"alignHorizontallyCentered\"),o(\"alignRight\")]}),i.length>2&&o(\"distributeHorizontally\"),(0,T.jsx)(\"div\",{style:{flexBasis:\"100%\",height:0}}),(0,T.jsxs)(\"div\",{style:{display:\"flex\",flexWrap:\"wrap\",gap:\".5rem\",marginTop:\"-0.5rem\"},children:[o(\"alignTop\"),o(\"alignVerticallyCentered\"),o(\"alignBottom\"),i.length>2&&o(\"distributeVertically\")]})]})]}),!s&&i.length>0&&(0,T.jsxs)(\"fieldset\",{children:[(0,T.jsx)(\"legend\",{children:(0,j.t)(\"labels.actions\")}),(0,T.jsxs)(\"div\",{className:\"buttonList\",children:[!c.isMobile&&o(\"duplicateSelection\"),!c.isMobile&&o(\"deleteSelectedElements\"),o(\"group\"),o(\"ungroup\"),p&&o(\"hyperlink\")]})]})]})},Ne=function(e){var t=e.canvas,n=e.activeTool,r=e.setAppState,o=e.onImageAction,i=e.appState;return(0,T.jsx)(T.Fragment,{children:se.map((function(e,a){var l=e.value,s=e.icon,c=e.key,u=e.numericKey,d=e.fillable,f=(0,j.t)(\"toolBar.\".concat(l)),p=c&&(0,I.Oo)(\"string\"==typeof c?c:c[0]),h=p?\"\".concat(p,\" \").concat((0,j.t)(\"helpDialog.or\"),\" \").concat(u):\"\".concat(u);return(0,T.jsx)(S.V,{className:(0,x.Z)(\"Shape\",{fillable:d}),type:\"radio\",icon:s,checked:n.type===l,name:\"editor-current-shape\",title:\"\".concat((0,I.Oo)(f),\" \u2014 \").concat(h),keyBindingLabel:u||p,\"aria-label\":(0,I.Oo)(f),\"aria-keyshortcuts\":h,\"data-testid\":\"toolbar-\".concat(l),onPointerDown:function(e){var t=e.pointerType;i.penDetected||\"pen\"!==t||r({penDetected:!0,penMode:!0})},onChange:function(e){var n=e.pointerType;i.activeTool.type!==l&&(0,L.L)(\"toolbar\",l,\"ui\");var a=(0,I.Om)(i,{type:l});r({activeTool:a,multiElement:null,selectedElementIds:{}}),(0,I.Uk)(t,Le(Le({},i),{},{activeTool:a})),\"image\"===l&&o({pointerType:n})}},l)}))})},Be=function(e){var t=e.renderAction;e.zoom;return(0,T.jsx)(Ce.Z.Col,{gap:1,className:\"zoom-actions\",children:(0,T.jsxs)(Ce.Z.Row,{align:\"center\",children:[t(\"zoomOut\"),t(\"resetZoom\"),t(\"zoomIn\")]})})},He=function(e){var t=e.renderAction,n=e.className;return(0,T.jsxs)(\"div\",{className:\"undo-redo-buttons \".concat(n),children:[(0,T.jsx)(\"div\",{className:\"undo-button-container\",children:(0,T.jsx)(Pe.u,{label:(0,j.t)(\"buttons.undo\"),children:t(\"undo\")})}),(0,T.jsx)(\"div\",{className:\"redo-button-container\",children:(0,T.jsxs)(Pe.u,{label:(0,j.t)(\"buttons.redo\"),children:[\" \",t(\"redo\")]})})]})},We=function(e){var t=e.actionManager,n=e.showExitZenModeBtn;return(0,T.jsx)(\"button\",{className:(0,x.Z)(\"disable-zen-mode\",{\"disable-zen-mode--visible\":n}),onClick:function(){return t.executeAction(k.JN)},children:(0,j.t)(\"buttons.exitZenMode\")})},Fe=function(e){var t=e.renderAction,n=e.className;return(0,T.jsx)(\"div\",{className:\"finalize-button \".concat(n),children:t(\"finalize\",{size:\"small\"})})},Ue=n(8396),Ke=function(e){var t=e.children,n=e.onClose,r=(0,g.useState)(!!t),i=(0,o.Z)(r,2),a=i[0],l=i[1],s=kr().container,c=v().useCallback((function(){l(!1),n&&n(),null==s||s.focus()}),[n,s]);return(0,T.jsx)(T.Fragment,{children:a&&(0,T.jsx)(Ue.V,{small:!0,onCloseRequest:c,title:(0,j.t)(\"errorDialog.title\"),children:(0,T.jsx)(\"div\",{style:{whiteSpace:\"pre-wrap\"},children:t})})})},Ye=n(434),Ge=n(7955),Ve={};Ve.styleTagTransform=we(),Ve.setAttributes=ve(),Ve.insert=me().bind(null,\"head\"),Ve.domAPI=pe(),Ve.insertStyleElement=ye();de()(Ge.Z,Ve),Ge.Z&&Ge.Z.locals&&Ge.Z.locals;var Xe=n(5284),qe=n(3807),Je=n(1393),$e=n(3024),Qe=\"filter\"in document.createElement(\"canvas\").getContext(\"2d\"),et=function(){return(0,T.jsxs)(\"div\",{children:[(0,T.jsx)(\"h3\",{children:(0,j.t)(\"canvasError.cannotShowPreview\")}),(0,T.jsx)(\"p\",{children:(0,T.jsx)(\"span\",{children:(0,j.t)(\"canvasError.canvasTooBig\")})}),(0,T.jsxs)(\"em\",{children:[\"(\",(0,j.t)(\"canvasError.canvasTooBigTip\"),\")\"]})]})},tt=function(e){var t,n=e.children,r=e.title,o=e.onClick,i=e.color,a=e.shade,l=void 0===a?6:a;return(0,T.jsx)(\"button\",{className:\"ExportDialog-imageExportButton\",style:(t={},(0,p.Z)(t,\"--button-color\",Xe[i][l]),(0,p.Z)(t,\"--button-color-darker\",Xe[i][l+1]),(0,p.Z)(t,\"--button-color-darkest\",Xe[i][l+2]),t),title:r,\"aria-label\":r,onClick:o,children:n})},nt=function(e){var t=e.elements,n=e.appState,r=e.files,i=e.exportPadding,a=void 0===i?M.qy:i,l=e.actionManager,s=e.onExportToPng,c=e.onExportToSvg,u=e.onExportToClipboard,d=(0,ie.N)(t,n),f=(0,g.useState)(d),p=(0,o.Z)(f,2),h=p[0],m=p[1],v=(0,g.useRef)(null),b=(0,g.useState)(null),y=(0,o.Z)(b,2),x=y[0],w=y[1],k=h?(0,ie.eD)(t,n,!0):t;return(0,g.useEffect)((function(){m(d)}),[d]),(0,g.useEffect)((function(){var e=v.current;if(e){var t=e.offsetWidth;t&&(0,$e.NL)({elements:k,appState:n,files:r,exportPadding:a,maxWidthOrHeight:t}).then((function(t){return w(null),(0,Ye._c)(t).then((function(){e.replaceChildren(t)}))})).catch((function(e){console.error(e),w(e)}))}}),[n,r,k,a]),(0,T.jsxs)(\"div\",{className:\"ExportDialog\",children:[(0,T.jsx)(\"div\",{className:\"ExportDialog__preview\",ref:v,children:x&&(0,T.jsx)(et,{})}),Qe&&l.renderAction(\"exportWithDarkMode\"),(0,T.jsx)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"1fr\"},children:(0,T.jsxs)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"repeat(auto-fit, minmax(190px, 1fr))\",overflow:\"hidden\"},children:[l.renderAction(\"changeExportBackground\"),d&&(0,T.jsx)(qe.o,{checked:h,onChange:function(e){return m(e)},children:(0,j.t)(\"labels.onlySelected\")}),l.renderAction(\"changeExportEmbedScene\")]})}),(0,T.jsxs)(\"div\",{style:{display:\"flex\",alignItems:\"center\",marginTop:\".6em\"},children:[(0,T.jsx)(Ce.Z.Row,{gap:2,children:l.renderAction(\"changeExportScale\")}),(0,T.jsx)(\"p\",{style:{marginLeft:\"1em\",userSelect:\"none\"},children:(0,j.t)(\"buttons.scale\")})]}),(0,T.jsx)(\"div\",{style:{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",margin:\".6em 0\"},children:!Je.kr&&l.renderAction(\"changeProjectName\")}),(0,T.jsxs)(Ce.Z.Row,{gap:2,justifyContent:\"center\",style:{margin:\"2em 0\"},children:[(0,T.jsx)(tt,{color:\"indigo\",title:(0,j.t)(\"buttons.exportToPng\"),\"aria-label\":(0,j.t)(\"buttons.exportToPng\"),onClick:function(){return s(k)},children:\"PNG\"}),(0,T.jsx)(tt,{color:\"red\",title:(0,j.t)(\"buttons.exportToSvg\"),\"aria-label\":(0,j.t)(\"buttons.exportToSvg\"),onClick:function(){return c(k)},children:\"SVG\"}),(B.vt||M.vU)&&(0,T.jsx)(tt,{title:(0,j.t)(\"buttons.copyPngToClipboard\"),onClick:function(){return u(k)},color:\"gray\",shade:7,children:E.BR})]})]})},rt=function(e){var t=e.elements,n=e.appState,r=e.setAppState,o=e.files,i=e.exportPadding,a=void 0===i?M.qy:i,l=e.actionManager,s=e.onExportToPng,c=e.onExportToSvg,u=e.onExportToClipboard,d=v().useCallback((function(){r({openDialog:null})}),[r]);return(0,T.jsx)(T.Fragment,{children:\"imageExport\"===n.openDialog&&(0,T.jsx)(Ue.V,{onCloseRequest:d,title:(0,j.t)(\"buttons.exportImage\"),children:(0,T.jsx)(nt,{elements:t,appState:n,files:o,exportPadding:a,actionManager:l,onExportToPng:s,onExportToSvg:c,onExportToClipboard:u,onCloseRequest:d})})})},ot=n(3195),it={};it.styleTagTransform=we(),it.setAttributes=ve(),it.insert=me().bind(null,\"head\"),it.domAPI=pe(),it.insertStyleElement=ye();de()(ot.Z,it),ot.Z&&ot.Z.locals&&ot.Z.locals;var at=function(e){var t=e.children,n=e.side,r=e.className;return(0,T.jsx)(\"div\",{className:(0,x.Z)(\"FixedSideContainer\",\"FixedSideContainer_side_\".concat(n),r),children:t})},lt=n(1587),st={};st.styleTagTransform=we(),st.setAttributes=ve(),st.insert=me().bind(null,\"head\"),st.domAPI=pe(),st.insertStyleElement=ye();de()(lt.Z,st),lt.Z&&lt.Z.locals&&lt.Z.locals;var ct=function(e){var t=function(e){var t=e.appState,n=e.elements,r=e.isMobile,o=e.device,i=t.activeTool,a=t.isResizing,l=t.isRotating,s=t.lastPointerDownWith,c=null!==t.multiElement;if(\"library\"===t.openSidebar&&!o.canDeviceFitSidebar)return null;if((0,N.EN)(t))return(0,j.t)(\"hints.eraserRevert\");if(\"arrow\"===i.type||\"line\"===i.type)return c?(0,j.t)(\"hints.linearElementMulti\"):(0,j.t)(\"hints.linearElement\");if(\"freedraw\"===i.type)return(0,j.t)(\"hints.freeDraw\");if(\"text\"===i.type)return(0,j.t)(\"hints.text\");if(\"image\"===t.activeTool.type&&t.pendingImageElementId)return(0,j.t)(\"hints.placeImage\");var u=(0,ie.eD)(n,t);if(a&&\"mouse\"===s&&1===u.length){var d=u[0];return(0,G.bt)(d)&&2===d.points.length?(0,j.t)(\"hints.lockAngle\"):(0,G.pC)(d)?(0,j.t)(\"hints.resizeImage\"):(0,j.t)(\"hints.resize\")}if(l&&\"mouse\"===s)return(0,j.t)(\"hints.rotate\");if(1===u.length&&(0,G.iB)(u[0]))return(0,j.t)(\"hints.text_selected\");if(t.editingElement&&(0,G.iB)(t.editingElement))return(0,j.t)(\"hints.text_editing\");if(\"selection\"===i.type){var f;if(\"selection\"===(null===(f=t.draggingElement)||void 0===f?void 0:f.type)&&!t.editingElement&&!t.editingLinearElement)return(0,j.t)(\"hints.deepBoxSelect\");if(!u.length&&!r)return(0,j.t)(\"hints.canvasPanning\")}if(1===u.length){if((0,G.bt)(u[0]))return t.editingLinearElement?t.editingLinearElement.selectedPointsIndices?(0,j.t)(\"hints.lineEditor_pointSelected\"):(0,j.t)(\"hints.lineEditor_nothingSelected\"):(0,j.t)(\"hints.lineEditor_info\");if((0,G.mG)(u[0]))return(0,j.t)(\"hints.bindTextToElement\")}return null}({appState:e.appState,elements:e.elements,isMobile:e.isMobile,device:e.device});return t?(t=(0,I.uY)(t),(0,T.jsx)(\"div\",{className:\"HintViewer\",children:(0,T.jsx)(\"span\",{children:t})})):null},ut=n(1881),dt=n(5440),ft=(n(5422),{CHECKED:E.FC,UNCHECKED:E._C}),pt=function(e){return(0,T.jsxs)(\"label\",{className:(0,x.Z)(\"ToolIcon ToolIcon__lock\",\"ToolIcon_size_\".concat(\"medium\"),{\"is-mobile\":e.isMobile}),title:\"\".concat(e.title,\" \u2014 Q\"),children:[(0,T.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title,\"data-testid\":\"toolbar-lock\"}),(0,T.jsx)(\"div\",{className:\"ToolIcon__icon\",children:e.checked?ft.CHECKED:ft.UNCHECKED})]})},ht=[\"heading\",\"children\"];function mt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mt(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vt=function(e){var t=e.heading,n=e.children,r=(0,Oe.Z)(e,ht),o=kr().id,i=(0,T.jsx)(\"h2\",{className:\"visually-hidden\",id:\"\".concat(o,\"-\").concat(t,\"-title\"),children:(0,j.t)(\"headings.\".concat(t))});return(0,T.jsx)(\"section\",gt(gt({},r),{},{\"aria-labelledby\":\"\".concat(o,\"-\").concat(t,\"-title\"),children:\"function\"==typeof n?n(i):(0,T.jsxs)(T.Fragment,{children:[i,n]})}))},bt=n(756),yt=n(2316),xt={};xt.styleTagTransform=we(),xt.setAttributes=ve(),xt.insert=me().bind(null,\"head\"),xt.domAPI=pe(),xt.insertStyleElement=ye();de()(yt.Z,xt),yt.Z&&yt.Z.locals&&yt.Z.locals;var wt=function(e){var t=e.appState,n=e.setAppState,r=e.isMobile,o=wr(),i=!r;return t.isSidebarDocked&&\"library\"===t.openSidebar?null:(0,T.jsxs)(\"label\",{title:\"\".concat((0,I.Oo)((0,j.t)(\"toolBar.library\"))),children:[(0,T.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:\"editor-library\",onChange:function(e){var t;null===(t=document.querySelector(\".layer-ui__wrapper\"))||void 0===t||t.classList.remove(\"animate\");var r=e.target.checked;n({openSidebar:r?\"library\":null}),r&&(0,L.L)(\"library\",\"toggleLibrary (open)\",\"toolbar (\".concat(o.isMobile?\"mobile\":\"desktop\",\")\"))},checked:\"library\"===t.openSidebar,\"aria-label\":(0,I.Oo)((0,j.t)(\"toolBar.library\")),\"aria-keyshortcuts\":\"0\"}),(0,T.jsxs)(\"div\",{className:\"library-button\",children:[(0,T.jsx)(\"div\",{children:E.Vq}),i&&(0,T.jsx)(\"div\",{className:\"library-button__label\",children:(0,j.t)(\"toolBar.library\")})]})]})},kt=function(e){return e.penDetected?(0,T.jsxs)(\"label\",{className:(0,x.Z)(\"ToolIcon ToolIcon__penMode\",\"ToolIcon_size_\".concat(\"medium\"),{\"is-mobile\":e.isMobile}),title:\"\".concat(e.title),children:[(0,T.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title}),(0,T.jsx)(\"div\",{className:\"ToolIcon__icon\",children:E.tb})]}):null},Et=n(8925),St=n(2681),jt={};jt.styleTagTransform=we(),jt.setAttributes=ve(),jt.insert=me().bind(null,\"head\"),jt.domAPI=pe(),jt.insertStyleElement=ye();de()(St.Z,jt),St.Z&&St.Z.locals&&St.Z.locals;var _t=function(e){var t,n=(0,Et.KP)(e.elements),r=(0,ie.Zs)(e.elements,e.appState),o=(0,Et.KP)(r);return(0,T.jsx)(\"div\",{className:\"Stats\",children:(0,T.jsxs)(ut.W,{padding:2,children:[(0,T.jsx)(\"div\",{className:\"close\",onClick:e.onClose,children:E.Tw}),(0,T.jsx)(\"h3\",{children:(0,j.t)(\"stats.title\")}),(0,T.jsx)(\"table\",{children:(0,T.jsxs)(\"tbody\",{children:[(0,T.jsx)(\"tr\",{children:(0,T.jsx)(\"th\",{colSpan:2,children:(0,j.t)(\"stats.scene\")})}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.elements\")}),(0,T.jsx)(\"td\",{children:e.elements.length})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.width\")}),(0,T.jsx)(\"td\",{children:Math.round(n[2])-Math.round(n[0])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.height\")}),(0,T.jsx)(\"td\",{children:Math.round(n[3])-Math.round(n[1])})]}),1===r.length&&(0,T.jsx)(\"tr\",{children:(0,T.jsx)(\"th\",{colSpan:2,children:(0,j.t)(\"stats.element\")})}),r.length>1&&(0,T.jsxs)(T.Fragment,{children:[(0,T.jsx)(\"tr\",{children:(0,T.jsx)(\"th\",{colSpan:2,children:(0,j.t)(\"stats.selected\")})}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.elements\")}),(0,T.jsx)(\"td\",{children:r.length})]})]}),r.length>0&&(0,T.jsxs)(T.Fragment,{children:[(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:\"x\"}),(0,T.jsx)(\"td\",{children:Math.round(o[0])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:\"y\"}),(0,T.jsx)(\"td\",{children:Math.round(o[1])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.width\")}),(0,T.jsx)(\"td\",{children:Math.round(o[2]-o[0])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.height\")}),(0,T.jsx)(\"td\",{children:Math.round(o[3]-o[1])})]})]}),1===r.length&&(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.angle\")}),(0,T.jsx)(\"td\",{children:\"\".concat(Math.round(180*r[0].angle\/Math.PI),\"\u00b0\")})]}),null===(t=e.renderCustomStats)||void 0===t?void 0:t.call(e,e.elements,e.appState)]})})]})})},Ot=function(e){return(0,T.jsx)(S.V,{className:(0,x.Z)(\"Shape\",{fillable:!1}),type:\"radio\",icon:E.Hk,name:\"editor-current-shape\",checked:e.checked,title:\"\".concat(e.title,\" \u2014 H\"),keyBindingLabel:e.isMobile?void 0:_.tW.H.toLocaleUpperCase(),\"aria-label\":\"\".concat(e.title,\" \u2014 H\"),\"aria-keyshortcuts\":_.tW.H,\"data-testid\":\"toolbar-hand\",onChange:function(){var t;return null===(t=e.onChange)||void 0===t?void 0:t.call(e)}})},Ct=n(8888);function It(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Mt=function(e){var t=e.appState,n=e.elements,r=e.actionManager,o=e.setAppState,i=e.onLockToggle,a=e.onHandToolToggle,l=e.onPenModeToggle,s=e.canvas,c=e.onImageAction,u=e.renderTopRightUI,d=e.renderCustomStats,f=e.renderSidebars,h=e.device,m=e.renderWelcomeScreen,g=(0,Ct.R6)(),v=g.welcomeScreenCenterTunnel,b=g.mainMenuTunnel;return(0,T.jsxs)(T.Fragment,{children:[f(),!t.viewModeEnabled&&(0,T.jsxs)(at,{side:\"top\",className:\"App-top-bar\",children:[m&&(0,T.jsx)(v.Out,{}),(0,T.jsx)(vt,{heading:\"shapes\",children:function(e){return(0,T.jsx)(Ce.Z.Col,{gap:4,align:\"center\",children:(0,T.jsxs)(Ce.Z.Row,{gap:1,className:\"App-toolbar-container\",children:[(0,T.jsxs)(ut.W,{padding:1,className:\"App-toolbar App-toolbar--mobile\",children:[e,(0,T.jsx)(Ce.Z.Row,{gap:1,children:(0,T.jsx)(Ne,{appState:t,canvas:s,activeTool:t.activeTool,setAppState:o,onImageAction:function(e){var t=e.pointerType;c({insertOnCanvasDirectly:\"mouse\"!==t})}})})]}),u&&u(!0,t),(0,T.jsxs)(\"div\",{className:\"mobile-misc-tools-container\",children:[!t.viewModeEnabled&&(0,T.jsx)(wt,{appState:t,setAppState:o,isMobile:!0}),(0,T.jsx)(kt,{checked:t.penMode,onChange:l,title:(0,j.t)(\"toolBar.penMode\"),isMobile:!0,penDetected:t.penDetected}),(0,T.jsx)(pt,{checked:t.activeTool.locked,onChange:i,title:(0,j.t)(\"toolBar.lock\"),isMobile:!0}),(0,T.jsx)(Ot,{checked:(0,N.l$)(t),onChange:function(){return a()},title:(0,j.t)(\"toolBar.hand\"),isMobile:!0})]})]})})}}),(0,T.jsx)(ct,{appState:t,elements:n,isMobile:!0,device:h})]}),!t.openMenu&&t.showStats&&(0,T.jsx)(_t,{appState:t,setAppState:o,elements:n,onClose:function(){r.executeAction(k.u0)},renderCustomStats:d}),(0,T.jsx)(\"div\",{className:\"App-bottom-bar\",style:{marginBottom:bt.nn+2*bt.WM,marginLeft:bt.nn+2*bt.WM,marginRight:bt.nn+2*bt.WM},children:(0,T.jsxs)(ut.W,{padding:0,children:[\"shape\"===t.openMenu&&!t.viewModeEnabled&&(0,U.RT)(t,n)?(0,T.jsx)(vt,{className:\"App-mobile-menu\",heading:\"selectedShapeActions\",children:(0,T.jsx)(Re,{appState:t,elements:n,renderAction:r.renderAction})}):null,(0,T.jsxs)(\"footer\",{className:\"App-toolbar\",children:[t.viewModeEnabled?(0,T.jsx)(\"div\",{className:\"App-toolbar-content\",children:(0,T.jsx)(b.Out,{})}):(0,T.jsxs)(\"div\",{className:\"App-toolbar-content\",children:[(0,T.jsx)(b.Out,{}),r.renderAction(\"toggleEditMenu\"),r.renderAction(\"undo\"),r.renderAction(\"redo\"),r.renderAction(t.multiElement?\"finalize\":\"duplicateSelection\"),r.renderAction(\"deleteSelectedElements\")]}),t.scrolledOutside&&!t.openMenu&&\"library\"!==t.openSidebar&&(0,T.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?It(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):It(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,ie.W)(n,t,s)))},children:(0,j.t)(\"buttons.scrollBackToContent\")})]})]})})]})},Tt=n(5674),Pt=n(4162),Dt=n(8461),At={};At.styleTagTransform=we(),At.setAttributes=ve(),At.insert=me().bind(null,\"head\"),At.domAPI=pe(),At.insertStyleElement=ye();de()(Dt.Z,At),Dt.Z&&Dt.Z.locals&&Dt.Z.locals;var Lt=function(e){var t=(0,g.useRef)(null),n=(0,g.useState)(null),r=(0,o.Z)(n,2),i=r[0],l=r[1];return(0,g.useLayoutEffect)((function(){if(e.spreadsheet){var n,r=(0,Tt.ps)(e.chartType,e.spreadsheet,0,0);l(r);var o=t.current;return(0,a.Z)(m().mark((function t(){var i;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,Pt.$D)(r,{exportBackground:!1,viewBackgroundColor:Xe.white},null);case 2:n=t.sent,null===(i=n.querySelector(\".style-fonts\"))||void 0===i||i.remove(),o.replaceChildren(),o.appendChild(n),e.selected&&o.parentNode.focus();case 7:case\"end\":return t.stop()}}),t)})))(),function(){o.replaceChildren()}}}),[e.spreadsheet,e.chartType,e.selected]),(0,T.jsx)(\"button\",{className:\"ChartPreview\",onClick:function(){i&&e.onClick(e.chartType,i)},children:(0,T.jsx)(\"div\",{ref:t})})},Zt=function(e){var t=e.setAppState,n=e.appState,r=e.onClose,o=e.onInsertChart,i=v().useCallback((function(){r&&r()}),[r]),a=function(e,n){o(n),(0,L.L)(\"magic\",\"chart\",e),t({currentChartType:e,pasteDialog:{shown:!1,data:null}})};return(0,T.jsx)(Ue.V,{small:!0,onCloseRequest:i,title:(0,j.t)(\"labels.pasteCharts\"),className:\"PasteChartDialog\",autofocus:!1,children:(0,T.jsxs)(\"div\",{className:\"container\",children:[(0,T.jsx)(Lt,{chartType:\"bar\",spreadsheet:n.pasteDialog.data,selected:\"bar\"===n.currentChartType,onClick:a}),(0,T.jsx)(Lt,{chartType:\"line\",spreadsheet:n.pasteDialog.data,selected:\"line\"===n.currentChartType,onClick:a})]})})},zt=n(2978),Rt={};Rt.styleTagTransform=we(),Rt.setAttributes=ve(),Rt.insert=me().bind(null,\"head\"),Rt.domAPI=pe(),Rt.insertStyleElement=ye();de()(zt.Z,Rt),zt.Z&&zt.Z.locals&&zt.Z.locals;function Nt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Bt=m().mark(Yt);function Ht(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return Wt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return Wt(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function Wt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ft=function(){return(0,T.jsxs)(\"div\",{className:\"HelpDialog__header\",children:[(0,T.jsxs)(\"a\",{className:\"HelpDialog__btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw#documentation\",target:\"_blank\",rel:\"noopener noreferrer\",children:[(0,j.t)(\"helpDialog.documentation\"),(0,T.jsx)(\"div\",{className:\"HelpDialog__link-icon\",children:E.h0})]}),(0,T.jsxs)(\"a\",{className:\"HelpDialog__btn\",href:\"https:\/\/blog.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\",children:[(0,j.t)(\"helpDialog.blog\"),(0,T.jsx)(\"div\",{className:\"HelpDialog__link-icon\",children:E.h0})]}),(0,T.jsxs)(\"a\",{className:\"HelpDialog__btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\",target:\"_blank\",rel:\"noopener noreferrer\",children:[(0,j.t)(\"helpDialog.github\"),(0,T.jsx)(\"div\",{className:\"HelpDialog__link-icon\",children:E.h0})]})]})},Ut=function(e){return(0,T.jsxs)(T.Fragment,{children:[(0,T.jsx)(\"h3\",{children:e.title}),(0,T.jsx)(\"div\",{className:\"HelpDialog__islands-container\",children:e.children})]})},Kt=function(e){return(0,T.jsxs)(\"div\",{className:\"HelpDialog__island \".concat(e.className),children:[(0,T.jsx)(\"h4\",{className:\"HelpDialog__island-title\",children:e.caption}),(0,T.jsx)(\"div\",{className:\"HelpDialog__island-content\",children:e.children})]})};function Yt(e,t){var n,r,o,i;return m().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:n=!0,r=Ht(e),a.prev=2,r.s();case 4:if((o=r.n()).done){a.next=14;break}if(i=o.value,n){a.next=9;break}return a.next=9,t;case 9:return n=!1,a.next=12,i;case 12:a.next=4;break;case 14:a.next=19;break;case 16:a.prev=16,a.t0=a.catch(2),r.e(a.t0);case 19:return a.prev=19,r.f(),a.finish(19);case 22:case\"end\":return a.stop()}}),Bt,null,[[2,16,19,22]])}var Gt=function(e){var t=e.label,n=e.shortcuts,r=e.isOr,o=void 0===r||r,a=n.map((function(e){return(e.endsWith(\"++\")?[].concat((0,i.Z)(e.slice(0,-2).split(\"+\")),[\"+\"]):e.split(\"+\")).map((function(e){return(0,T.jsx)(Vt,{children:(t=e,t.replace(\/\\b[a-z]\\b\/,(function(e){return e.toUpperCase()})))},e);var t}))}));return(0,T.jsxs)(\"div\",{className:\"HelpDialog__shortcut\",children:[(0,T.jsx)(\"div\",{children:t}),(0,T.jsx)(\"div\",{className:\"HelpDialog__key-container\",children:(0,i.Z)(Yt(a,o?(0,j.t)(\"helpDialog.or\"):null))})]})},Vt=function(e){return(0,T.jsx)(\"kbd\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Nt(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Nt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:\"HelpDialog__key\"},e))},Xt=function(e){var t=e.onClose,n=v().useCallback((function(){t&&t()}),[t]);return(0,T.jsx)(T.Fragment,{children:(0,T.jsxs)(Ue.V,{onCloseRequest:n,title:(0,j.t)(\"helpDialog.title\"),className:\"HelpDialog\",children:[(0,T.jsx)(Ft,{}),(0,T.jsxs)(Ut,{title:(0,j.t)(\"helpDialog.shortcuts\"),children:[(0,T.jsxs)(Kt,{className:\"HelpDialog__island--tools\",caption:(0,j.t)(\"helpDialog.tools\"),children:[(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.hand\"),shortcuts:[_.tW.H]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.selection\"),shortcuts:[_.tW.V,_.tW[1]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.rectangle\"),shortcuts:[_.tW.R,_.tW[2]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.diamond\"),shortcuts:[_.tW.D,_.tW[3]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.ellipse\"),shortcuts:[_.tW.O,_.tW[4]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.arrow\"),shortcuts:[_.tW.A,_.tW[5]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.line\"),shortcuts:[_.tW.L,_.tW[6]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.freedraw\"),shortcuts:[_.tW.P,_.tW[7]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.text\"),shortcuts:[_.tW.T,_.tW[8]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.image\"),shortcuts:[_.tW[9]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.eraser\"),shortcuts:[_.tW.E,_.tW[0]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.editLineArrowPoints\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.editText\"),shortcuts:[(0,I.uY)(\"Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.textNewLine\"),shortcuts:[(0,I.uY)(\"Enter\"),(0,I.uY)(\"Shift+Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.textFinish\"),shortcuts:[(0,I.uY)(\"Esc\"),(0,I.uY)(\"CtrlOrCmd+Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.curvedArrow\"),shortcuts:[\"A\",(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\")],isOr:!1}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.curvedLine\"),shortcuts:[\"L\",(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\")],isOr:!1}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.lock\"),shortcuts:[_.tW.Q]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.preventBinding\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.link\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+K\")]})]}),(0,T.jsxs)(Kt,{className:\"HelpDialog__island--view\",caption:(0,j.t)(\"helpDialog.view\"),children:[(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.zoomIn\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd++\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.zoomOut\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+-\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.resetZoom\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+0\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.zoomToFit\"),shortcuts:[\"Shift+1\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.zoomToSelection\"),shortcuts:[\"Shift+2\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.movePageUpDown\"),shortcuts:[\"PgUp\/PgDn\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.movePageLeftRight\"),shortcuts:[\"Shift+PgUp\/PgDn\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.fullScreen\"),shortcuts:[\"F\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.zenMode\"),shortcuts:[(0,I.uY)(\"Alt+Z\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.showGrid\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+'\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.viewMode\"),shortcuts:[(0,I.uY)(\"Alt+R\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.toggleTheme\"),shortcuts:[(0,I.uY)(\"Alt+Shift+D\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"stats.title\"),shortcuts:[(0,I.uY)(\"Alt+\/\")]})]}),(0,T.jsxs)(Kt,{className:\"HelpDialog__island--editor\",caption:(0,j.t)(\"helpDialog.editor\"),children:[(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.moveCanvas\"),shortcuts:[(0,I.uY)(\"Space+\".concat((0,j.t)(\"helpDialog.drag\"))),(0,I.uY)(\"Wheel+\".concat((0,j.t)(\"helpDialog.drag\")))],isOr:!0}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.clearReset\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Delete\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.delete\"),shortcuts:[(0,I.uY)(\"Delete\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.cut\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+X\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.copy\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+C\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.paste\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.pasteAsPlaintext\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.selectAll\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+A\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.multiSelect\"),shortcuts:[(0,I.uY)(\"Shift+\".concat((0,j.t)(\"helpDialog.click\")))]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.deepSelect\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+\".concat((0,j.t)(\"helpDialog.click\")))]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.deepBoxSelect\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+\".concat((0,j.t)(\"helpDialog.drag\")))]}),(B.vt||M.vU)&&(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.copyAsPng\"),shortcuts:[(0,I.uY)(\"Shift+Alt+C\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.copyStyles\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Alt+C\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.pasteStyles\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Alt+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.sendToBack\"),shortcuts:[M.Um?(0,I.uY)(\"CtrlOrCmd+Alt+[\"):(0,I.uY)(\"CtrlOrCmd+Shift+[\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.bringToFront\"),shortcuts:[M.Um?(0,I.uY)(\"CtrlOrCmd+Alt+]\"):(0,I.uY)(\"CtrlOrCmd+Shift+]\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.sendBackward\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+[\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.bringForward\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+]\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignTop\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Up\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignBottom\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Down\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignLeft\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Left\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignRight\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Right\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.duplicateSelection\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+D\"),(0,I.uY)(\"Alt+\".concat((0,j.t)(\"helpDialog.drag\")))]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.toggleElementLock\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+L\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.undo\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Z\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.redo\"),shortcuts:M.ED?[(0,I.uY)(\"CtrlOrCmd+Y\"),(0,I.uY)(\"CtrlOrCmd+Shift+Z\")]:[(0,I.uY)(\"CtrlOrCmd+Shift+Z\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.group\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+G\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.ungroup\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+G\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.flipHorizontal\"),shortcuts:[(0,I.uY)(\"Shift+H\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.flipVertical\"),shortcuts:[(0,I.uY)(\"Shift+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.showStroke\"),shortcuts:[(0,I.uY)(\"S\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.showBackground\"),shortcuts:[(0,I.uY)(\"G\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.decreaseFontSize\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+<\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.increaseFontSize\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+>\")]})]})]})]})})},qt=n(6773),Jt=n(8671),$t=n(4241),Qt={};Qt.styleTagTransform=we(),Qt.setAttributes=ve(),Qt.insert=me().bind(null,\"head\"),Qt.domAPI=pe(),Qt.insertStyleElement=ye();de()($t.Z,Qt),$t.Z&&$t.Z.locals&&$t.Z.locals;var en=function(e){var t,n=e.children,r=e.color;return(0,T.jsx)(\"div\",{className:\"Card\",style:(t={},(0,p.Z)(t,\"--card-color\",\"primary\"===r?\"var(--color-primary)\":Xe[r][7]),(0,p.Z)(t,\"--card-color-darker\",\"primary\"===r?\"var(--color-primary-darker)\":Xe[r][8]),(0,p.Z)(t,\"--card-color-darkest\",\"primary\"===r?\"var(--color-primary-darkest)\":Xe[r][9]),t),children:n})},tn=function(e){var t=e.elements,n=e.appState,r=e.files,o=e.actionManager,i=e.exportOpts,a=e.canvas,l=i.onExportToBackend;return(0,T.jsx)(\"div\",{className:\"ExportDialog ExportDialog--json\",children:(0,T.jsxs)(\"div\",{className:\"ExportDialog-cards\",children:[i.saveFileToDisk&&(0,T.jsxs)(en,{color:\"lime\",children:[(0,T.jsx)(\"div\",{className:\"Card-icon\",children:E.TP}),(0,T.jsx)(\"h2\",{children:(0,j.t)(\"exportDialog.disk_title\")}),(0,T.jsxs)(\"div\",{className:\"Card-details\",children:[(0,j.t)(\"exportDialog.disk_details\"),!Je.kr&&o.renderAction(\"changeProjectName\")]}),(0,T.jsx)(S.V,{className:\"Card-button\",type:\"button\",title:(0,j.t)(\"exportDialog.disk_button\"),\"aria-label\":(0,j.t)(\"exportDialog.disk_button\"),showAriaLabel:!0,onClick:function(){o.executeAction(Jt.mM,\"ui\")}})]}),l&&(0,T.jsxs)(en,{color:\"pink\",children:[(0,T.jsx)(\"div\",{className:\"Card-icon\",children:E.xP}),(0,T.jsx)(\"h2\",{children:(0,j.t)(\"exportDialog.link_title\")}),(0,T.jsx)(\"div\",{className:\"Card-details\",children:(0,j.t)(\"exportDialog.link_details\")}),(0,T.jsx)(S.V,{className:\"Card-button\",type:\"button\",title:(0,j.t)(\"exportDialog.link_button\"),\"aria-label\":(0,j.t)(\"exportDialog.link_button\"),showAriaLabel:!0,onClick:function(){l(t,n,r,a),(0,L.L)(\"export\",\"link\",\"ui (\".concat((0,I.$h)(),\")\"))}})]}),i.renderCustomUI&&i.renderCustomUI(t,n,r,a)]})})},nn=function(e){var t=e.elements,n=e.appState,r=e.files,o=e.actionManager,i=e.exportOpts,a=e.canvas,l=e.setAppState,s=v().useCallback((function(){l({openDialog:null})}),[l]);return(0,T.jsx)(T.Fragment,{children:\"jsonExport\"===n.openDialog&&(0,T.jsx)(Ue.V,{onCloseRequest:s,title:(0,j.t)(\"buttons.export\"),children:(0,T.jsx)(tn,{elements:t,appState:n,files:r,actionManager:o,onCloseRequest:s,exportOpts:i,canvas:a})})})},rn=n(6954),on=n(8923),an={};an.styleTagTransform=we(),an.setAttributes=ve(),an.insert=me().bind(null,\"head\"),an.domAPI=pe(),an.insertStyleElement=ye();de()(on.Z,an),on.Z&&on.Z.locals&&on.Z.locals;var ln=n(5523),sn=n(2701),cn={};cn.styleTagTransform=we(),cn.setAttributes=ve(),cn.insert=me().bind(null,\"head\"),cn.domAPI=pe(),cn.insertStyleElement=ye();de()(sn.Z,cn),sn.Z&&sn.Z.locals&&sn.Z.locals;var un=function(e){var t=e.id,n=e.elements,r=e.isPending,i=e.onClick,l=e.selected,s=e.onToggle,c=e.onDrag,u=(0,g.useRef)(null);(0,g.useEffect)((function(){var e=u.current;if(e)return(0,a.Z)(m().mark((function t(){var r,o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt(\"return\");case 2:return t.next=4,(0,$e.$D)({elements:n,appState:{exportBackground:!1,viewBackgroundColor:Xe.white},files:null});case 4:o=t.sent,null===(r=o.querySelector(\".style-fonts\"))||void 0===r||r.remove(),e.innerHTML=o.outerHTML;case 7:case\"end\":return t.stop()}}),t)})))(),function(){e.innerHTML=\"\"}}),[n]);var d=(0,g.useState)(!1),f=(0,o.Z)(d,2),p=f[0],h=f[1],v=wr().isMobile,b=r&&(0,T.jsx)(\"div\",{className:\"library-unit__adder\",children:E.pO});return(0,T.jsxs)(\"div\",{className:(0,x.Z)(\"library-unit\",{\"library-unit__active\":n,\"library-unit--hover\":n&&p,\"library-unit--selected\":l}),onMouseEnter:function(){return h(!0)},onMouseLeave:function(){return h(!1)},children:[(0,T.jsx)(\"div\",{className:(0,x.Z)(\"library-unit__dragger\",{\"library-unit__pulse\":!!r}),ref:u,draggable:!!n,onClick:n||r?function(e){t&&e.shiftKey?s(t,e):i()}:void 0,onDragStart:function(e){t?(h(!1),c(t,e)):e.preventDefault()}}),b,t&&n&&(p||v||l)&&(0,T.jsx)(qe.o,{checked:l,onChange:function(e,n){return s(t,n)},className:\"library-unit__checkbox\"})]})},dn=n(6440),fn={};fn.styleTagTransform=we(),fn.setAttributes=ve(),fn.insert=me().bind(null,\"head\"),fn.domAPI=pe(),fn.insertStyleElement=ye();de()(dn.Z,fn),dn.Z&&dn.Z.locals&&dn.Z.locals;var pn=n(5644),hn=function(e){var t=e.theme,n=e.id,r=e.libraryReturnUrl||window.location.origin+window.location.pathname;return(0,T.jsx)(\"a\",{className:\"library-menu-browse-button\",href:\"\".concat(\"https:\/\/libraries.excalidraw.com\",\"?target=\").concat(window.name||\"_blank\",\"&referrer=\").concat(r,\"&useHash=true&token=\").concat(n,\"&theme=\").concat(t,\"&version=\").concat(M.Kr.excalidrawLibrary),target:\"_excalidraw_libraries\",children:(0,j.t)(\"labels.libraries\")})};function mn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mn(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vn=function(e){var t=e.isLoading,n=e.libraryItems,r=e.onAddToLibrary,a=e.onInsertLibraryItems,l=e.pendingElements,s=e.selectedItems,c=e.onSelectItems,u=e.theme,d=e.id,f=e.libraryReturnUrl,p=(0,g.useState)(null),h=(0,o.Z)(p,2),m=h[0],v=h[1],b=function(e,t){var n=!s.includes(e),r=[].concat((0,i.Z)(E),(0,i.Z)(S));if(n){if(t.shiftKey&&m){var o=r.findIndex((function(e){return e.id===m})),a=r.findIndex((function(t){return t.id===e}));if(-1===o||-1===a)return void c([].concat((0,i.Z)(s),[e]));var l=(0,I.xn)(s),u=r.reduce((function(e,t,n){return(n>=o&&n<=a||l.has(t.id))&&e.push(t.id),e}),[]);c(u)}else c([].concat((0,i.Z)(s),[e]));v(e)}else v(null),c(s.filter((function(t){return t!==e})))},y=function(e){return(s.includes(e)?n.filter((function(e){return s.includes(e.id)})):n.filter((function(t){return t.id===e}))).map((function(e){return gn(gn({},e),{},{elements:(0,Y._N)(e.elements)})}))},w=function(e){var t,n,r,o,i;return(0,T.jsx)(Ce.Z.Col,{children:(0,T.jsx)(un,{elements:null===(t=e.item)||void 0===t?void 0:t.elements,isPending:!(null!==(n=e.item)&&void 0!==n&&n.id||null===(r=e.item)||void 0===r||!r.elements),onClick:e.onClick||function(){},id:(null===(o=e.item)||void 0===o?void 0:o.id)||null,selected:!(null===(i=e.item)||void 0===i||!i.id)&&s.includes(e.item.id),onToggle:b,onDrag:function(e,t){t.dataTransfer.setData(M.LO.excalidrawlib,(0,ln.NI)(y(e)))}})},e.key)},k=function(e){var t=e.map((function(e){return e.id?w({item:e,onClick:function(){return a(y(e.id))},key:e.id}):w({key:\"__pending__item__\",item:e,onClick:function(){return r(l)}})})),n=(0,I.yo)(t,4);return n.length||(n=[[]]),n.map((function(e,t,n){return t===n.length-1&&(e=e.concat(new Array(4-e.length).fill(null).map((function(e,t){return w({key:\"empty_\".concat(t),item:null})})))),(0,T.jsx)(Ce.Z.Row,{align:\"center\",className:\"library-menu-items-container__row\",children:e},t)}))},E=n.filter((function(e){return\"published\"!==e.status})),S=n.filter((function(e){return\"published\"===e.status})),_=!(n.length||E.length||S.length||l.length);return(0,T.jsx)(\"div\",{className:\"library-menu-items-container\",style:l.length||E.length||S.length?{justifyContent:\"flex-start\"}:{},children:(0,T.jsxs)(Ce.Z.Col,{className:\"library-menu-items-container__items\",align:\"start\",gap:1,style:{flex:S.length>0?1:\"0 1 auto\",marginBottom:0},children:[(0,T.jsxs)(T.Fragment,{children:[(0,T.jsxs)(\"div\",{children:[(l.length>0||E.length>0||S.length>0)&&(0,T.jsx)(\"div\",{className:\"library-menu-items-container__header\",children:(0,j.t)(\"labels.personalLib\")}),t&&(0,T.jsx)(\"div\",{style:{position:\"absolute\",top:\"var(--container-padding-y)\",right:\"var(--container-padding-x)\",transform:\"translateY(50%)\"},children:(0,T.jsx)(pn.Z,{})})]}),l.length||E.length?k([].concat((0,i.Z)(l.length?[{id:null,elements:l}]:[]),(0,i.Z)(E))):(0,T.jsxs)(\"div\",{className:\"library-menu-items__no-items\",children:[(0,T.jsx)(\"div\",{className:(0,x.Z)({\"library-menu-items__no-items__label\":_}),children:(0,j.t)(\"library.noItems\")}),(0,T.jsx)(\"div\",{className:\"library-menu-items__no-items__hint\",children:S.length>0?(0,j.t)(\"library.hint_emptyPrivateLibrary\"):(0,j.t)(\"library.hint_emptyLibrary\")})]})]}),(0,T.jsxs)(T.Fragment,{children:[(S.length>0||l.length>0||E.length>0)&&(0,T.jsx)(\"div\",{className:\"library-menu-items-container__header library-menu-items-container__header--excal\",children:(0,j.t)(\"labels.excalidrawLib\")}),S.length>0?k(S):E.length>0?(0,T.jsx)(\"div\",{style:{margin:\"1rem 0\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\",width:\"100%\",fontSize:\".9rem\"},children:(0,j.t)(\"library.noItems\")}):null]}),_&&(0,T.jsx)(hn,{id:d,libraryReturnUrl:f,theme:u})]})})},bn=n(4739),yn=n(9487),xn=n(9430),wn=n(9206),kn=(0,g.forwardRef)((function(e,t){var n=e.children;return(0,T.jsx)(\"div\",{ref:t,className:\"layer-ui__library\",children:n})})),En=function(e){var t=e.onInsertLibraryItems,n=e.pendingElements,r=e.onAddToLibrary,l=e.setAppState,s=e.libraryReturnUrl,c=e.library,u=e.id,d=e.appState,f=e.selectedItems,p=e.onSelectItems,h=(0,bn.KO)(W.rF,yn.yE),v=(0,o.Z)(h,1)[0],b=(0,g.useCallback)(function(){var e=(0,a.Z)(m().mark((function e(t,n){var o;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((0,L.L)(\"element\",\"addToLibrary\",\"ui\"),!t.some((function(e){return\"image\"===e.type}))){e.next=3;break}return e.abrupt(\"return\",l({errorMessage:\"Support for adding images to the library coming soon!\"}));case 3:o=[{status:\"unpublished\",elements:t,id:(0,rn.kb)(),created:Date.now()}].concat((0,i.Z)(n)),r(),c.setLibrary(o).catch((function(){l({errorMessage:(0,j.t)(\"alerts.errorAddingToLibrary\")})}));case 6:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),[r,c,l]);if(\"loading\"===v.status&&!v.isInitialized)return(0,T.jsx)(kn,{children:(0,T.jsx)(\"div\",{className:\"layer-ui__library-message\",children:(0,T.jsxs)(\"div\",{children:[(0,T.jsx)(pn.Z,{size:\"2em\"}),(0,T.jsx)(\"span\",{children:(0,j.t)(\"labels.libraryLoadingMessage\")})]})})});var y=v.libraryItems.length>0||n.length>0;return(0,T.jsxs)(kn,{children:[(0,T.jsx)(vn,{isLoading:\"loading\"===v.status,libraryItems:v.libraryItems,onAddToLibrary:function(e){return b(e,v.libraryItems)},onInsertLibraryItems:t,pendingElements:n,selectedItems:f,onSelectItems:p,id:u,libraryReturnUrl:s,theme:d.theme}),y&&(0,T.jsx)(hn,{id:u,libraryReturnUrl:s,theme:d.theme})]})},Sn=function(e){var t=e.appState,n=e.onInsertElements,r=e.libraryReturnUrl,i=e.focusContainer,l=e.library,s=e.id,c=jr(),u=Er(),d=wr(),f=(0,g.useState)([]),p=(0,o.Z)(f,2),h=p[0],v=p[1],b=(0,bn.KO)(W.rF,yn.yE),y=(0,o.Z)(b,1)[0],x=(0,g.useRef)(null),w=(0,g.useCallback)((function(){!!document.querySelector(\".Dialog\")||c({openSidebar:null})}),[c]);!function(e,t){(0,g.useEffect)((function(){var n=function(n){e.current&&(n.target instanceof Element&&(e.current.contains(n.target)||!document.body.contains(n.target))||t(n))};return document.addEventListener(\"pointerdown\",n,!1),function(){document.removeEventListener(\"pointerdown\",n)}}),[e,t])}(x,(0,g.useCallback)((function(e){e.target.closest(\".ToolIcon__library\")||t.isSidebarDocked&&d.canDeviceFitSidebar||w()}),[w,t.isSidebarDocked,d.canDeviceFitSidebar])),(0,g.useEffect)((function(){var e=function(e){e.key!==_.tW.ESCAPE||t.isSidebarDocked&&d.canDeviceFitSidebar||w()};return document.addEventListener(M.Ks.KEYDOWN,e),function(){document.removeEventListener(M.Ks.KEYDOWN,e)}}),[w,t.isSidebarDocked,d.canDeviceFitSidebar]);var k=(0,g.useCallback)((function(){c({selectedElementIds:{},selectedGroupIds:{}})}),[c]),E=(0,g.useCallback)(function(){var e=(0,a.Z)(m().mark((function e(t){var n;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.filter((function(e){return!h.includes(e.id)})),l.setLibrary(n).catch((function(){c({errorMessage:(0,j.t)(\"alerts.errorRemovingFromLibrary\")})})),v([]);case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[l,c,h,v]),S=(0,g.useCallback)((function(){l.resetLibrary(),i()}),[l,i]);return(0,T.jsxs)(xn.Y,{__isInternal:!0,className:\"layer-ui__library-sidebar\",initialDockedState:t.isSidebarDocked,onDock:function(e){(0,L.L)(\"library\",\"toggleLibraryDock (\".concat(e?\"dock\":\"undock\",\")\"),\"sidebar (\".concat(d.isMobile?\"mobile\":\"desktop\",\")\"))},ref:x,children:[(0,T.jsx)(xn.Y.Header,{className:\"layer-ui__library-header\",children:(0,T.jsx)(wn.W,{appState:t,setAppState:c,selectedItems:h,onSelectItems:v,library:l,onRemoveFromLibrary:function(){return E(y.libraryItems)},resetLibrary:S})}),(0,T.jsx)(En,{pendingElements:(0,ie.eD)(u,t,!0),onInsertLibraryItems:function(e){n((0,W.WV)(e))},onAddToLibrary:k,setAppState:c,libraryReturnUrl:r,library:l,id:s,appState:t,selectedItems:h,onSelectItems:v})]},\"library\")},jn=n(1434),_n={};_n.styleTagTransform=we(),_n.setAttributes=ve(),_n.insert=me().bind(null,\"head\"),_n.domAPI=pe(),_n.insertStyleElement=ye();de()(jn.Z,_n),jn.Z&&jn.Z.locals&&jn.Z.locals;var On=n(9144),Cn={};Cn.styleTagTransform=we(),Cn.setAttributes=ve(),Cn.insert=me().bind(null,\"head\"),Cn.domAPI=pe(),Cn.insertStyleElement=ye();de()(On.Z,Cn),On.Z&&On.Z.locals&&On.Z.locals;var In=n(4958),Mn=function(e){return(0,T.jsx)(\"button\",{className:\"help-icon\",onClick:e.onClick,type:\"button\",title:\"\".concat((0,j.t)(\"helpDialog.title\"),\" \u2014 ?\"),\"aria-label\":(0,j.t)(\"helpDialog.title\"),children:E.by})},Tn=function(e){var t=e.appState,n=e.actionManager,r=e.showExitZenModeBtn,o=e.renderWelcomeScreen,i=(0,Ct.R6)(),a=i.footerCenterTunnel,l=i.welcomeScreenHelpHintTunnel,s=wr(),c=!t.viewModeEnabled&&t.multiElement&&s.isTouchScreen;return(0,T.jsxs)(\"footer\",{role:\"contentinfo\",className:\"layer-ui__wrapper__footer App-menu App-menu_bottom\",children:[(0,T.jsx)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper__footer-left zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-left\":t.zenModeEnabled}),children:(0,T.jsx)(Ce.Z.Col,{gap:2,children:(0,T.jsxs)(vt,{heading:\"canvasActions\",children:[(0,T.jsx)(Be,{renderAction:n.renderAction,zoom:t.zoom}),!t.viewModeEnabled&&(0,T.jsx)(He,{renderAction:n.renderAction,className:(0,x.Z)(\"zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":t.zenModeEnabled})}),c&&(0,T.jsx)(Fe,{renderAction:n.renderAction,className:(0,x.Z)(\"zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-left\":t.zenModeEnabled})})]})})}),(0,T.jsx)(a.Out,{}),(0,T.jsx)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper__footer-right zen-mode-transition\",{\"transition-right disable-pointerEvents\":t.zenModeEnabled}),children:(0,T.jsxs)(\"div\",{style:{position:\"relative\"},children:[o&&(0,T.jsx)(l.Out,{}),(0,T.jsx)(Mn,{onClick:function(){return n.executeAction(k.jY)}})]})}),(0,T.jsx)(We,{actionManager:n,showExitZenModeBtn:r})]})},Pn=Tn;Tn.displayName=\"Footer\";var Dn=n(4709),An=n(6798),Ln=[\"suggestedBindings\",\"startBoundElement\",\"cursorButton\"],Zn=[\"canvas\",\"onInsertElements\",\"appState\"],zn=[\"canvas\",\"onInsertElements\",\"appState\"];function Rn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Nn=function(e){var t=e.UIOptions;return(0,T.jsxs)(Dn.Z,{__fallback:!0,children:[(0,T.jsx)(Dn.Z.DefaultItems.LoadScene,{}),(0,T.jsx)(Dn.Z.DefaultItems.SaveToActiveFile,{}),t.canvasActions.export&&(0,T.jsx)(Dn.Z.DefaultItems.Export,{}),t.canvasActions.saveAsImage&&(0,T.jsx)(Dn.Z.DefaultItems.SaveAsImage,{}),(0,T.jsx)(Dn.Z.DefaultItems.Help,{}),(0,T.jsx)(Dn.Z.DefaultItems.ClearCanvas,{}),(0,T.jsx)(Dn.Z.Separator,{}),(0,T.jsx)(Dn.Z.Group,{title:\"Excalidraw links\",children:(0,T.jsx)(Dn.Z.DefaultItems.Socials,{})}),(0,T.jsx)(Dn.Z.Separator,{}),(0,T.jsx)(Dn.Z.DefaultItems.ToggleTheme,{}),(0,T.jsx)(Dn.Z.DefaultItems.ChangeCanvasBackground,{})]})},Bn=function(e){var t,n=e.actionManager,r=e.appState,i=e.files,l=e.setAppState,s=e.elements,c=e.canvas,u=e.onLockToggle,d=e.onHandToolToggle,f=e.onPenModeToggle,h=e.onInsertElements,g=e.showExitZenModeBtn,v=e.renderTopRightUI,b=e.renderCustomStats,y=e.renderCustomSidebar,w=e.libraryReturnUrl,k=e.UIOptions,E=e.focusContainer,S=e.library,_=e.id,O=e.onImageAction,C=e.renderWelcomeScreen,P=e.children,D=wr(),A=(0,Ct.ZC)(),Z=function(){return k.canvasActions.export?(0,T.jsx)(nn,{elements:s,appState:r,files:i,actionManager:n,exportOpts:k.canvasActions.export,canvas:c,setAppState:l}):null},z=function(){if(!k.canvasActions.saveAsImage)return null;var e=function(e){return function(){var t=(0,a.Z)(m().mark((function t(n){var o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(0,L.L)(\"export\",e,\"ui\"),t.next=3,(0,H.p1)(e,n,r,i,{exportBackground:r.exportBackground,name:r.name,viewBackgroundColor:r.viewBackgroundColor}).catch(I.FG).catch((function(e){console.error(e),l({errorMessage:e.message})}));case 3:o=t.sent,r.exportEmbedScene&&o&&(0,Ye.g8)(o)&&l({fileHandle:o});case 5:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()};return(0,T.jsx)(rt,{elements:s,appState:r,setAppState:l,files:i,actionManager:n,onExportToPng:e(\"png\"),onExportToSvg:e(\"svg\"),onExportToClipboard:e(\"clipboard\")})},R=function(){return\"customSidebar\"===r.openSidebar?(null==y?void 0:y())||null:\"library\"===r.openSidebar?(0,T.jsx)(Sn,{appState:r,onInsertElements:h,libraryReturnUrl:w,focusContainer:E,library:S,id:_}):null},B=(0,bn.KO)(xn.b,yn.yE),W=(0,o.Z)(B,1)[0],F=(0,T.jsxs)(T.Fragment,{children:[P,(0,T.jsx)(Nn,{UIOptions:k}),r.isLoading&&(0,T.jsx)(dt.z,{delay:250}),r.errorMessage&&(0,T.jsx)(Ke,{onClose:function(){return l({errorMessage:null})},children:r.errorMessage}),\"help\"===r.openDialog&&(0,T.jsx)(Xt,{onClose:function(){l({openDialog:null})}}),(0,T.jsx)(An.o,{}),z(),Z(),r.pasteDialog.shown&&(0,T.jsx)(Zt,{setAppState:l,appState:r,onInsertChart:h,onClose:function(){return l({pasteDialog:{shown:!1,data:null}})}}),D.isMobile&&(0,T.jsx)(Mt,{appState:r,elements:s,actionManager:n,renderJSONExportDialog:Z,renderImageExportDialog:z,setAppState:l,onLockToggle:u,onHandToolToggle:d,onPenModeToggle:f,canvas:c,onImageAction:O,renderTopRightUI:v,renderCustomStats:b,renderSidebars:R,device:D,renderWelcomeScreen:C}),!D.isMobile&&(0,T.jsxs)(T.Fragment,{children:[(0,T.jsxs)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper\",{\"disable-pointerEvents\":r.draggingElement||r.resizingElement||r.editingElement&&!(0,U.iB)(r.editingElement)}),style:(\"library\"===r.openSidebar&&r.isSidebarDocked||W.docked)&&D.canDeviceFitSidebar?{width:\"calc(100% - \".concat(M.EE,\"px)\")}:{},children:[C&&(0,T.jsx)(A.welcomeScreenCenterTunnel.Out,{}),(t=(0,U.RT)(r,s),(0,T.jsx)(at,{side:\"top\",children:(0,T.jsxs)(\"div\",{className:\"App-menu App-menu_top\",children:[(0,T.jsxs)(Ce.Z.Col,{gap:6,className:(0,x.Z)(\"App-menu_top__left\",{\"disable-pointerEvents\":r.zenModeEnabled}),children:[(0,T.jsxs)(\"div\",{style:{position:\"relative\"},children:[(0,T.jsx)(A.mainMenuTunnel.Out,{}),C&&(0,T.jsx)(A.welcomeScreenMenuHintTunnel.Out,{})]}),t&&(0,T.jsx)(vt,{heading:\"selectedShapeActions\",className:(0,x.Z)(\"selected-shape-actions zen-mode-transition\",{\"transition-left\":r.zenModeEnabled}),children:(0,T.jsx)(ut.W,{className:M.$C.SHAPE_ACTIONS_MENU,padding:2,style:{maxHeight:\"\".concat(r.height-166,\"px\")},children:(0,T.jsx)(Re,{appState:r,elements:s,renderAction:n.renderAction})})})]}),!r.viewModeEnabled&&(0,T.jsx)(vt,{heading:\"shapes\",className:\"shapes-section\",children:function(e){return(0,T.jsxs)(\"div\",{style:{position:\"relative\"},children:[C&&(0,T.jsx)(A.welcomeScreenToolbarHintTunnel.Out,{}),(0,T.jsx)(Ce.Z.Col,{gap:4,align:\"start\",children:(0,T.jsx)(Ce.Z.Row,{gap:1,className:(0,x.Z)(\"App-toolbar-container\",{\"zen-mode\":r.zenModeEnabled}),children:(0,T.jsxs)(ut.W,{padding:1,className:(0,x.Z)(\"App-toolbar\",{\"zen-mode\":r.zenModeEnabled}),children:[(0,T.jsx)(ct,{appState:r,elements:s,isMobile:D.isMobile,device:D}),e,(0,T.jsxs)(Ce.Z.Row,{gap:1,children:[(0,T.jsx)(kt,{zenModeEnabled:r.zenModeEnabled,checked:r.penMode,onChange:f,title:(0,j.t)(\"toolBar.penMode\"),penDetected:r.penDetected}),(0,T.jsx)(pt,{checked:r.activeTool.locked,onChange:u,title:(0,j.t)(\"toolBar.lock\")}),(0,T.jsx)(\"div\",{className:\"App-toolbar__divider\"}),(0,T.jsx)(Ot,{checked:(0,N.l$)(r),onChange:function(){return d()},title:(0,j.t)(\"toolBar.hand\"),isMobile:!0}),(0,T.jsx)(Ne,{appState:r,canvas:c,activeTool:r.activeTool,setAppState:l,onImageAction:function(e){var t=e.pointerType;O({insertOnCanvasDirectly:\"mouse\"!==t})}})]})]})})})]})}}),(0,T.jsxs)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper__top-right zen-mode-transition\",{\"transition-right\":r.zenModeEnabled}),children:[(0,T.jsx)(qt.Z,{collaborators:r.collaborators}),null==v?void 0:v(D.isMobile,r),!r.viewModeEnabled&&(0,T.jsx)(wt,{appState:r,setAppState:l})]})]})})),(0,T.jsx)(Pn,{appState:r,actionManager:n,showExitZenModeBtn:g,renderWelcomeScreen:C}),r.showStats&&(0,T.jsx)(_t,{appState:r,setAppState:l,elements:s,onClose:function(){n.executeAction(In.u)},renderCustomStats:b}),r.scrolledOutside&&(0,T.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rn(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,ie.W)(s,r,c)))},children:(0,j.t)(\"buttons.scrollBackToContent\")})]}),R()]})]});return(0,T.jsx)(bn.zt,{scope:A.jotaiScope,children:(0,T.jsx)(Ct.A3.Provider,{value:A,children:F})})},Hn=function(e){e.suggestedBindings,e.startBoundElement,e.cursorButton;return(0,Oe.Z)(e,Ln)},Wn=function(e,t){if(e.children!==t.children)return!1;e.canvas,e.onInsertElements;var n=e.appState,r=(0,Oe.Z)(e,Zn),o=(t.canvas,t.onInsertElements,t.appState),i=(0,Oe.Z)(t,zn);return(0,I.w8)(Hn(n),Hn(o))&&(0,I.w8)(r,i)},Fn=v().memo(Bn,Wn),Un=n(9650),Kn={};Kn.styleTagTransform=we(),Kn.setAttributes=ve(),Kn.insert=me().bind(null,\"head\"),Kn.domAPI=pe(),Kn.insertStyleElement=ye();de()(Un.Z,Kn),Un.Z&&Un.Z.locals&&Un.Z.locals;var Yn=function(e){var t=e.message,n=e.onClose,r=e.closable,o=void 0!==r&&r,i=e.duration,a=void 0===i?5e3:i,l=(0,g.useRef)(0),s=a!==1\/0,c=(0,g.useCallback)((function(){s&&(l.current=window.setTimeout((function(){return n()}),a))}),[n,a,s]);(0,g.useEffect)((function(){if(s)return c(),function(){return clearTimeout(l.current)}}),[c,t,a,s]);var u=s?function(){return clearTimeout(null==l?void 0:l.current)}:void 0,d=s?c:void 0;return(0,T.jsxs)(\"div\",{className:\"Toast\",onMouseEnter:u,onMouseLeave:d,children:[(0,T.jsx)(\"p\",{className:\"Toast__message\",children:t}),o&&(0,T.jsx)(S.V,{icon:E.Tw,\"aria-label\":\"close\",type:\"icon\",onClick:n,className:\"close\"})]})};function Gn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gn(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Xn=(0,R.z)({name:\"viewMode\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!e.viewModeEnabled}},perform:function(e,t){return{appState:Vn(Vn({},t),{},{viewModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.viewModeEnabled},predicate:function(e,t,n){return void 0===n.viewModeEnabled},contextItemLabel:\"labels.viewMode\",keyTest:function(e){return!e[_.tW.CTRL_OR_CMD]&&e.altKey&&e.code===_.aU.R}}),qn=n(5637),Jn=n(200),$n=n.n(Jn),Qn=n(2325),er=n(4929),tr=n(6794),nr=n(267);function rr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var or=(0,s.Z)((function e(t){var n=this,r=t.scene,o=t.onSceneUpdated;(0,l.Z)(this,e),this.onFontsLoaded=function(t){if(t.every((function(t){var n=\"\".concat(t.family,\"-\").concat(t.style,\"-\").concat(t.weight);return!!e.loadedFontFaces.has(n)||(e.loadedFontFaces.add(n),!1)})))return!1;var r=!1;n.scene.mapElements((function(e){return(0,U.iB)(e)?((0,oe.bI)(e),r=!0,(0,O.BE)(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?rr(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):rr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,U.JZ)(e)))):e})),r&&n.onSceneUpdated()},this.loadFontsForElements=function(){var e=(0,a.Z)(m().mark((function e(t){var r;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all((0,i.Z)(new Set(t.filter((function(e){return(0,U.iB)(e)})).map((function(e){return e.fontFamily})))).map((function(e){var t,n,r,o,i=(0,I.mO)({fontFamily:e,fontSize:16});if(null===(t=document.fonts)||void 0===t||null===(n=t.check)||void 0===n||!n.call(t,i))return null===(r=document.fonts)||void 0===r||null===(o=r.load)||void 0===o?void 0:o.call(r,i)})));case 2:r=e.sent,n.onFontsLoaded(r.flat().filter(Boolean));case 4:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.scene=r,this.onSceneUpdated=o}));or.loadedFontFaces=new Set;var ir=n(4688),ar=n(2416),lr=n(202),sr=function(){return(0,T.jsxs)(\"div\",{\"data-testid\":\"brave-measure-text-error\",children:[(0,T.jsxs)(\"p\",{children:[(0,j.t)(\"errors.brave_measure_text_error.start\"),\" \u00a0\",(0,T.jsx)(\"span\",{style:{fontWeight:600},children:(0,j.t)(\"errors.brave_measure_text_error.aggressive_block_fingerprint\")}),\" \",(0,j.t)(\"errors.brave_measure_text_error.setting_enabled\"),\".\",(0,T.jsx)(\"br\",{}),(0,T.jsx)(\"br\",{}),(0,j.t)(\"errors.brave_measure_text_error.break\"),\" \",(0,T.jsx)(\"span\",{style:{fontWeight:600},children:(0,j.t)(\"errors.brave_measure_text_error.text_elements\")}),\" \",(0,j.t)(\"errors.brave_measure_text_error.in_your_drawings\"),\".\"]}),(0,T.jsxs)(\"p\",{children:[(0,j.t)(\"errors.brave_measure_text_error.strongly_recommend\"),\" \",(0,T.jsxs)(\"a\",{href:\"http:\/\/docs.excalidraw.com\/docs\/@excalidraw\/excalidraw\/faq#turning-off-aggresive-block-fingerprinting-in-brave-browser\",children:[\" \",(0,j.t)(\"errors.brave_measure_text_error.steps\")]}),\" \",(0,j.t)(\"errors.brave_measure_text_error.how\"),\".\"]}),(0,T.jsxs)(\"p\",{children:[(0,j.t)(\"errors.brave_measure_text_error.disable_setting\"),\" \",(0,T.jsx)(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\/new\",children:(0,j.t)(\"errors.brave_measure_text_error.issue\")}),\" \",(0,j.t)(\"errors.brave_measure_text_error.write\"),\" \",(0,T.jsx)(\"a\",{href:\"https:\/\/discord.gg\/UexuTaE\",children:(0,j.t)(\"errors.brave_measure_text_error.discord\")}),\".\"]})]})};function cr(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ur(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ur(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function ur(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function dr(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,f.Z)(e);if(t){var o=(0,f.Z)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,d.Z)(this,n)}}function fr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fr(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var hr={isSmScreen:!1,isMobile:!1,isTouchScreen:!1,canDeviceFitSidebar:!1},mr=v().createContext(hr);mr.displayName=\"DeviceContext\";var gr=v().createContext({container:null,id:null});gr.displayName=\"ExcalidrawContainerContext\";var vr=v().createContext([]);vr.displayName=\"ExcalidrawElementsContext\";var br=v().createContext(pr(pr({},(0,N.im)()),{},{width:0,height:0,offsetLeft:0,offsetTop:0}));br.displayName=\"ExcalidrawAppStateContext\";var yr=v().createContext((function(){console.warn(\"unitialized ExcalidrawSetAppStateContext context!\")}));yr.displayName=\"ExcalidrawSetAppStateContext\";var xr=v().createContext(null);xr.displayName=\"ExcalidrawActionManagerContext\";var wr=function(){return(0,g.useContext)(mr)},kr=function(){return(0,g.useContext)(gr)},Er=function(){return(0,g.useContext)(vr)},Sr=function(){return(0,g.useContext)(br)},jr=function(){return(0,g.useContext)(yr)},_r=function(){return(0,g.useContext)(xr)},Or=!1,Cr=0,Ir=0,Mr=0,Tr=!1,Pr=!1,Dr=!1,Ar={horizontal:null,vertical:null},Lr=0,Zr=!1,zr=!0,Rr=!1,Nr=0,Br=!1,Hr=null,Wr={pointers:new Map,lastCenter:null,initialDistance:null,initialScale:null},Fr=function(e){(0,u.Z)(d,e);var t,n,r=dr(d);function d(e){var t;(0,l.Z)(this,d),t=r.call(this,e),Ur.call((0,c.Z)(t));var n,o=(0,N.im)(),i=e.excalidrawRef,a=e.viewModeEnabled,s=void 0!==a&&a,u=e.zenModeEnabled,f=void 0!==u&&u,p=e.gridModeEnabled,h=void 0!==p&&p,m=e.theme,g=void 0===m?o.theme:m,v=e.name,b=void 0===v?o.name:v;if(t.state=pr(pr(pr({},o),{},{theme:g,isLoading:!0},t.getCanvasOffsets()),{},{viewModeEnabled:s,zenModeEnabled:f,gridSize:h?M.k:null,name:b,width:window.innerWidth,height:window.innerHeight,showHyperlinkPopup:!1,isSidebarDocked:!1}),t.id=(0,w.x0)(),t.library=new W.ZP((0,c.Z)(t)),i){var y,x=\"current\"in i&&(null===(y=i.current)||void 0===y?void 0:y.readyPromise)||(0,I.PI)(),k={ready:!0,readyPromise:x,updateScene:t.updateScene,updateLibrary:t.library.updateLibrary,addFiles:t.addFiles,resetScene:t.resetScene,getSceneElementsIncludingDeleted:t.getSceneElementsIncludingDeleted,history:{clear:t.resetHistory},scrollToContent:t.scrollToContent,getSceneElements:t.getSceneElements,getAppState:function(){return t.state},getFiles:function(){return t.files},refresh:t.refresh,setToast:t.setToast,id:t.id,setActiveTool:t.setActiveTool,setCursor:t.setCursor,resetCursor:t.resetCursor,toggleMenu:t.toggleMenu};\"function\"==typeof i?i(k):i.current=k,x.resolve(k)}return t.excalidrawContainerValue={container:t.excalidrawContainerRef.current,id:t.id},t.scene=new ae.Z,t.fonts=new or({scene:t.scene,onSceneUpdated:t.onSceneUpdated}),t.history=new te,t.actionManager=new z(t.syncActionResult,(function(){return t.state}),(function(){return t.scene.getElementsIncludingDeleted()}),(0,c.Z)(t)),t.actionManager.registerAll(R.N),t.actionManager.registerAction((n=t.history,{name:\"undo\",trackEvent:{category:\"history\"},perform:function(e,t){return A(e,t,(function(){return n.undoOnce()}))},keyTest:function(e){return e[_.tW.CTRL_OR_CMD]&&e.key.toLowerCase()===_.tW.Z&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,T.jsx)(S.V,{type:\"button\",icon:E.UE,\"aria-label\":(0,j.t)(\"buttons.undo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}})),t.actionManager.registerAction(function(e){return{name:\"redo\",trackEvent:{category:\"history\"},perform:function(t,n){return A(t,n,(function(){return e.redoOnce()}))},keyTest:function(e){return e[_.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key.toLowerCase()===_.tW.Z||M.ED&&e.ctrlKey&&!e.shiftKey&&e.key===_.tW.Y},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,T.jsx)(S.V,{type:\"button\",icon:E.zG,\"aria-label\":(0,j.t)(\"buttons.redo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}}}(t.history)),t}return(0,s.Z)(d,[{key:\"renderCanvas\",value:function(){var e=window.devicePixelRatio,t=this.state,n=t.width,r=t.height,o=n*e,i=r*e;return t.viewModeEnabled?(0,T.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r,cursor:M.oc.GRAB},width:o,height:i,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.handleCanvasPointerUp,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onPointerDown:this.handleCanvasPointerDown,children:(0,j.t)(\"labels.drawingCanvas\")}):(0,T.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r},width:o,height:i,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerDown:this.handleCanvasPointerDown,onDoubleClick:this.handleCanvasDoubleClick,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.handleCanvasPointerUp,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,children:(0,j.t)(\"labels.drawingCanvas\")})}},{key:\"render\",value:function(){var e,t=this,n=(0,ie.eD)(this.scene.getNonDeletedElements(),this.state),r=this.props,o=r.renderTopRightUI,i=r.renderCustomStats;return(0,T.jsx)(\"div\",{className:(0,x.Z)(\"excalidraw excalidraw-container\",{\"excalidraw--view-mode\":this.state.viewModeEnabled,\"excalidraw--mobile\":this.device.isMobile}),ref:this.excalidrawContainerRef,onDrop:this.handleAppOnDrop,tabIndex:0,onKeyDown:this.props.handleKeyboardGlobally?void 0:this.onKeyDown,children:(0,T.jsx)(gr.Provider,{value:this.excalidrawContainerValue,children:(0,T.jsx)(mr.Provider,{value:this.device,children:(0,T.jsx)(yr.Provider,{value:this.setAppState,children:(0,T.jsxs)(br.Provider,{value:this.state,children:[(0,T.jsx)(vr.Provider,{value:this.scene.getNonDeletedElements(),children:(0,T.jsxs)(xr.Provider,{value:this.actionManager,children:[(0,T.jsx)(Fn,{canvas:this.canvas,appState:this.state,files:this.files,setAppState:this.setAppState,actionManager:this.actionManager,elements:this.scene.getNonDeletedElements(),onLockToggle:this.toggleLock,onPenModeToggle:this.togglePenMode,onHandToolToggle:this.onHandToolToggle,onInsertElements:function(e){return t.addElementsFromPasteOrLibrary({elements:e,position:\"center\",files:null})},langCode:(0,j.G3)().code,renderTopRightUI:o,renderCustomStats:i,renderCustomSidebar:this.props.renderSidebar,showExitZenModeBtn:void 0===(null===(e=this.props)||void 0===e?void 0:e.zenModeEnabled)&&this.state.zenModeEnabled,libraryReturnUrl:this.props.libraryReturnUrl,UIOptions:this.props.UIOptions,focusContainer:this.focusContainer,library:this.library,id:this.id,onImageAction:this.onImageAction,renderWelcomeScreen:!this.state.isLoading&&this.state.showWelcomeScreen&&\"selection\"===this.state.activeTool.type&&!this.scene.getElementsIncludingDeleted().length,children:this.props.children}),(0,T.jsx)(\"div\",{className:\"excalidraw-textEditorContainer\"}),(0,T.jsx)(\"div\",{className:\"excalidraw-contextMenuContainer\"}),1===n.length&&!this.state.contextMenu&&this.state.showHyperlinkPopup&&(0,T.jsx)(er.nW,{element:n[0],setAppState:this.setAppState,onLinkOpen:this.props.onLinkOpen},n[0].id),null!==this.state.toast&&(0,T.jsx)(Yn,{message:this.state.toast.message,onClose:function(){return t.setToast(null)},duration:this.state.toast.duration,closable:this.state.toast.closable}),this.state.contextMenu&&(0,T.jsx)(_e,{items:this.state.contextMenu.items,top:this.state.contextMenu.top,left:this.state.contextMenu.left,actionManager:this.actionManager}),(0,T.jsx)(\"main\",{children:this.renderCanvas()})]})}),\" \"]})})})})})}},{key:\"componentDidMount\",value:(n=(0,a.Z)(m().mark((function e(){var t,n,r,o,i,a,l=this;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.unmounted=!1,this.excalidrawContainerValue.container=this.excalidrawContainerRef.current,\"production\"!==M.Vi.TEST&&\"production\"!==M.Vi.DEVELOPMENT||(this.setState.bind(this),Object.defineProperties(window.h,{state:{configurable:!0,get:function(){return l.state}},setState:{configurable:!0,value:function(){return l.setState.apply(l,arguments)}},app:{configurable:!0,value:this},history:{configurable:!0,value:this.history}})),this.scene.addCallback(this.onSceneUpdated),this.addEventListeners(),this.excalidrawContainerRef.current&&this.focusContainer(),this.excalidrawContainerRef.current&&this.refreshDeviceState(this.excalidrawContainerRef.current),\"ResizeObserver\"in window&&null!==(t=this.excalidrawContainerRef)&&void 0!==t&&t.current?(this.resizeObserver=new ResizeObserver((function(){zr=!1,l.refreshDeviceState(l.excalidrawContainerRef.current),l.updateDOMRect()})),null===(n=this.resizeObserver)||void 0===n||n.observe(this.excalidrawContainerRef.current)):window.matchMedia&&(r=window.matchMedia(\"(max-width: \".concat(M.kV,\"px), (max-height: \").concat(M.Yx,\"px) and (max-width: \").concat(M.sS,\"px)\")),o=window.matchMedia(\"(max-width: \".concat(M.eF,\"px)\")),i=window.matchMedia(\"(min-width: \".concat(null!=this.props.UIOptions.dockedSidebarBreakpoint?this.props.UIOptions.dockedSidebarBreakpoint:M.sk,\"px)\")),a=function(){l.excalidrawContainerRef.current.getBoundingClientRect(),l.device=(0,I.v4)(l.device,{isSmScreen:o.matches,isMobile:r.matches,canDeviceFitSidebar:i.matches})},r.addListener(a),this.detachIsMobileMqHandler=function(){return r.removeListener(a)}),new URLSearchParams(window.location.search.slice(1)).has(\"web-share-target\")?this.restoreFileFromShare():this.updateDOMRect(this.initializeScene),(0,M.jP)()&&!(0,De.eB)()&&this.setState({errorMessage:(0,T.jsx)(sr,{})});case 11:case\"end\":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:\"componentWillUnmount\",value:function(){var e;this.files={},this.imageCache.clear(),null===(e=this.resizeObserver)||void 0===e||e.disconnect(),this.unmounted=!0,this.removeEventListeners(),this.scene.destroy(),clearTimeout(Lr),Lr=0}},{key:\"removeEventListeners\",value:function(){var e,t,n,r,o;document.removeEventListener(M.Ks.POINTER_UP,this.removePointer),document.removeEventListener(M.Ks.COPY,this.onCopy),document.removeEventListener(M.Ks.PASTE,this.pasteFromClipboard),document.removeEventListener(M.Ks.CUT,this.onCut),null===(e=this.excalidrawContainerRef.current)||void 0===e||e.removeEventListener(M.Ks.WHEEL,this.onWheel),null===(t=this.nearestScrollableContainer)||void 0===t||t.removeEventListener(M.Ks.SCROLL,this.onScroll),document.removeEventListener(M.Ks.KEYDOWN,this.onKeyDown,!1),document.removeEventListener(M.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition,!1),document.removeEventListener(M.Ks.KEYUP,this.onKeyUp),window.removeEventListener(M.Ks.RESIZE,this.onResize,!1),window.removeEventListener(M.Ks.UNLOAD,this.onUnload,!1),window.removeEventListener(M.Ks.BLUR,this.onBlur,!1),null===(n=this.excalidrawContainerRef.current)||void 0===n||n.removeEventListener(M.Ks.DRAG_OVER,this.disableEvent,!1),null===(r=this.excalidrawContainerRef.current)||void 0===r||r.removeEventListener(M.Ks.DROP,this.disableEvent,!1),document.removeEventListener(M.Ks.GESTURE_START,this.onGestureStart,!1),document.removeEventListener(M.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.removeEventListener(M.Ks.GESTURE_END,this.onGestureEnd,!1),null===(o=this.detachIsMobileMqHandler)||void 0===o||o.call(this)}},{key:\"addEventListeners\",value:function(){var e,t,n,r,o,i=this;this.removeEventListeners(),document.addEventListener(M.Ks.POINTER_UP,this.removePointer),document.addEventListener(M.Ks.COPY,this.onCopy),null===(e=this.excalidrawContainerRef.current)||void 0===e||e.addEventListener(M.Ks.WHEEL,this.onWheel,{passive:!1}),this.props.handleKeyboardGlobally&&document.addEventListener(M.Ks.KEYDOWN,this.onKeyDown,!1),document.addEventListener(M.Ks.KEYUP,this.onKeyUp,{passive:!0}),document.addEventListener(M.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition),null===(t=document.fonts)||void 0===t||null===(n=t.addEventListener)||void 0===n||n.call(t,\"loadingdone\",(function(e){var t=e.fontfaces;i.fonts.onFontsLoaded(t)})),document.addEventListener(M.Ks.GESTURE_START,this.onGestureStart,!1),document.addEventListener(M.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.addEventListener(M.Ks.GESTURE_END,this.onGestureEnd,!1),this.state.viewModeEnabled||(document.addEventListener(M.Ks.PASTE,this.pasteFromClipboard),document.addEventListener(M.Ks.CUT,this.onCut),this.props.detectScroll&&(this.nearestScrollableContainer=(0,I.Ip)(this.excalidrawContainerRef.current),this.nearestScrollableContainer.addEventListener(M.Ks.SCROLL,this.onScroll)),window.addEventListener(M.Ks.RESIZE,this.onResize,!1),window.addEventListener(M.Ks.UNLOAD,this.onUnload,!1),window.addEventListener(M.Ks.BLUR,this.onBlur,!1),null===(r=this.excalidrawContainerRef.current)||void 0===r||r.addEventListener(M.Ks.DRAG_OVER,this.disableEvent,!1),null===(o=this.excalidrawContainerRef.current)||void 0===o||o.addEventListener(M.Ks.DROP,this.disableEvent,!1))}},{key:\"componentDidUpdate\",value:function(e,t){var n,r,o,i=this;(this.state.showWelcomeScreen||this.scene.getElementsIncludingDeleted().length||this.setState({showWelcomeScreen:!0}),this.excalidrawContainerRef.current&&e.UIOptions.dockedSidebarBreakpoint!==this.props.UIOptions.dockedSidebarBreakpoint&&this.refreshDeviceState(this.excalidrawContainerRef.current),t.scrollX!==this.state.scrollX||t.scrollY!==this.state.scrollY)&&(null===(r=this.props)||void 0===r||null===(o=r.onScrollChange)||void 0===o||o.call(r,this.state.scrollX,this.state.scrollY));Object.keys(this.state.selectedElementIds).length&&(0,N.EN)(this.state)&&this.setState({activeTool:(0,I.Om)(this.state,{type:\"selection\"})}),\"eraser\"===this.state.activeTool.type&&t.theme!==this.state.theme&&(0,I.OF)(this.canvas,this.state.theme),\"selection\"===t.activeTool.type&&\"selection\"!==this.state.activeTool.type&&this.state.showHyperlinkPopup&&this.setState({showHyperlinkPopup:!1}),e.langCode!==this.props.langCode&&this.updateLanguage(),e.viewModeEnabled!==this.props.viewModeEnabled&&this.setState({viewModeEnabled:!!this.props.viewModeEnabled}),t.viewModeEnabled!==this.state.viewModeEnabled&&(this.addEventListeners(),this.deselectElements()),e.zenModeEnabled!==this.props.zenModeEnabled&&this.setState({zenModeEnabled:!!this.props.zenModeEnabled}),e.theme!==this.props.theme&&this.props.theme&&this.setState({theme:this.props.theme}),e.gridModeEnabled!==this.props.gridModeEnabled&&this.setState({gridSize:this.props.gridModeEnabled?M.k:null}),this.props.name&&e.name!==this.props.name&&this.setState({name:this.props.name}),null===(n=this.excalidrawContainerRef.current)||void 0===n||n.classList.toggle(\"theme--dark\",\"dark\"===this.state.theme),this.state.editingLinearElement&&!this.state.selectedElementIds[this.state.editingLinearElement.elementId]&&setTimeout((function(){i.state.editingLinearElement&&i.actionManager.executeAction(k.pL)})),this.state.selectedLinearElement&&!this.state.selectedElementIds[this.state.selectedLinearElement.elementId]&&this.setState({selectedLinearElement:null});var a,l,s=t.multiElement;(t.activeTool!==this.state.activeTool&&null!=s&&(0,C.N1)(this.state)&&(0,G.Mn)(s,!1)&&(0,C.R)(s,this.state,this.scene,(0,I.AK)(K._.getPointAtIndexGlobalCoordinates(s,-1))),this.renderScene(),this.history.record(this.state,this.scene.getElementsIncludingDeleted()),this.state.isLoading)||(null===(a=(l=this.props).onChange)||void 0===a||a.call(l,this.scene.getElementsIncludingDeleted(),this.state,this.files))}},{key:\"addTextFromPaste\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(0,I.dE)({clientX:Ir,clientY:Mr},this.state),r=n.x,o=n.y,a={x:r,y:o,strokeColor:this.state.currentItemStrokeColor,backgroundColor:this.state.currentItemBackgroundColor,fillStyle:this.state.currentItemFillStyle,strokeWidth:this.state.currentItemStrokeWidth,strokeStyle:this.state.currentItemStrokeStyle,roundness:null,roughness:this.state.currentItemRoughness,opacity:this.state.currentItemOpacity,text:e,fontSize:this.state.currentItemFontSize,fontFamily:this.state.currentItemFontFamily,textAlign:this.state.currentItemTextAlign,verticalAlign:M.hs,locked:!1},l=10,s=o,c=t?[e]:e.split(\"\\n\"),u=c.reduce((function(e,t,n){var o=t.trim(),i=(0,De.PT)(a.fontFamily);if(o.length){var u=(0,U.VL)(pr(pr({},a),{},{x:r,y:s,text:o,lineHeight:i}));e.push(u),s+=u.height+l}else{var d;(null===(d=c[n-1])||void 0===d?void 0:d.trim())&&(s+=(0,De.Rg)(a.fontSize,i)+l)}return e}),[]);0!==u.length&&(this.scene.replaceAllElements([].concat((0,i.Z)(this.scene.getElementsIncludingDeleted()),(0,i.Z)(u))),this.setState({selectedElementIds:Object.fromEntries(u.map((function(e){return[e.id,!0]})))}),!t&&u.length>1&&!1===Br&&!this.device.isMobile&&(this.setToast({message:(0,j.t)(\"toast.pasteAsSingleElement\",{shortcut:(0,I.uY)(\"CtrlOrCmd+Shift+V\")}),duration:5e3}),Br=!0),this.history.resumeRecording())}},{key:\"handleTextWysiwyg\",value:function(e,t){var n=this,r=t.isExistingElement,o=void 0!==r&&r,a=function(t,r,o){n.scene.replaceAllElements((0,i.Z)(n.scene.getElementsIncludingDeleted().map((function(n){return n.id===e.id&&(0,U.iB)(n)?(0,U.N_)(n,{text:t,isDeleted:o,originalText:r}):n}))))};(0,U.b_)({id:e.id,canvas:this.canvas,getViewportCoords:function(e,t){var r=(0,I._i)({sceneX:e,sceneY:t},n.state),o=r.x,i=r.y;return[o-n.state.offsetLeft,i-n.state.offsetTop]},onChange:(0,I.tH)((function(t){a(t,t,!1),(0,U.qP)(e)&&(0,C.Ww)(e)})),onSubmit:(0,I.tH)((function(t){var r=t.text,i=t.viaKeyboard,l=t.originalText,s=!r.trim();if(a(r,l,s),!s&&i){var c=e.containerId?e.containerId:e.id;n.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},c,!0))}}))}s&&(0,C.$q)(n.scene.getNonDeletedElements(),[e]),s&&!o||n.history.resumeRecording(),n.setState({draggingElement:null,editingElement:null}),n.state.activeTool.locked&&(0,I.Uk)(n.canvas,n.state),n.focusContainer()})),element:e,excalidrawContainer:this.excalidrawContainerRef.current,app:this}),this.deselectElements(),a(e.text,e.originalText,!1)}},{key:\"deselectElements\",value:function(){this.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}},{key:\"getTextElementAtPosition\",value:function(e,t){var n=this.getElementAtPosition(e,t,{includeBoundTextElement:!0});return n&&(0,U.iB)(n)&&!n.isDeleted?n:null}},{key:\"getElementAtPosition\",value:function(e,t,n){var r=this.getElementsAtPosition(e,t,null==n?void 0:n.includeBoundTextElement,null==n?void 0:n.includeLockedElements);if(r.length>1){if(null!=n&&n.preferSelected)for(var o=r.length-1;o>-1;o--)if(this.state.selectedElementIds[r[o].id])return r[o];var i=r[r.length-1];return(0,U.wB)(i,this.state,e,t)?r[r.length-2]:i}return 1===r.length?r[0]:null}},{key:\"getElementsAtPosition\",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=r&&o?this.scene.getNonDeletedElements():this.scene.getNonDeletedElements().filter((function(e){return(o||!e.locked)&&(r||!((0,U.iB)(e)&&e.containerId))}));return(0,ie.CJ)(i,(function(r){return(0,U.wX)(r,n.state,e,t)}))}},{key:\"handleHoverSelectedLinearElement\",value:function(e,t,n){var r=K._.getElement(e.elementId),o=(0,De.WJ)(r);if(r)if(this.state.selectedLinearElement){var i=-1,a=null;(0,Qn.Qu)(r,this.state,[t,n])?(i=K._.getPointIndexUnderCursor(r,this.state.zoom,t,n),a=K._.getSegmentMidpointHitCoords(e,{x:t,y:n},this.state),i>=0||a?(0,I.KJ)(this.canvas,M.oc.POINTER):(0,I.KJ)(this.canvas,M.oc.MOVE)):((0,nr.oY)([r],this.state)&&(0,U.wB)(r,this.state,t,n)||o&&(0,U.wX)(o,this.state,t,n))&&(0,I.KJ)(this.canvas,M.oc.MOVE),this.state.selectedLinearElement.hoverPointIndex!==i&&this.setState({selectedLinearElement:pr(pr({},this.state.selectedLinearElement),{},{hoverPointIndex:i})}),K._.arePointsEqual(this.state.selectedLinearElement.segmentMidPointHoveredCoords,a)||this.setState({selectedLinearElement:pr(pr({},this.state.selectedLinearElement),{},{segmentMidPointHoveredCoords:a})})}else(0,I.KJ)(this.canvas,M.oc.AUTO)}},{key:\"maybeCleanupAfterMissingPointerUp\",value:function(e){null!==Hr&&Hr(e)}},{key:\"updateGestureOnPointerDown\",value:function(e){Wr.pointers.set(e.pointerId,{x:e.clientX,y:e.clientY}),2===Wr.pointers.size&&(Wr.lastCenter=V(Wr.pointers),Wr.initialScale=this.state.zoom.value,Wr.initialDistance=X(Array.from(Wr.pointers.values())))}},{key:\"initialPointerDownState\",value:function(e){var t=(0,I.dE)(e,this.state),n=(0,ie.eD)(this.scene.getNonDeletedElements(),this.state),r=(0,U.KP)(n),i=(0,o.Z)(r,4),a=i[0],l=i[1],s=i[2],c=i[3];return{origin:t,withCmdOrCtrl:e[_.tW.CTRL_OR_CMD],originInGrid:(0,I.AK)((0,ne.wC)(t.x,t.y,this.state.gridSize)),scrollbars:(0,ie._4)(Ar,e.clientX-this.state.offsetLeft,e.clientY-this.state.offsetTop),lastCoords:pr({},t),originalElements:this.scene.getNonDeletedElements().reduce((function(e,t){return e.set(t.id,(0,Y.OL)(t)),e}),new Map),resize:{handleType:!1,isResizing:!1,offset:{x:0,y:0},arrowDirection:\"origin\",center:{x:(s+a)\/2,y:(c+l)\/2}},hit:{element:null,allHitElements:[],wasAddedToSelection:!1,hasBeenDuplicated:!1,hasHitCommonBoundingBoxOfSelectedElements:this.isHittingCommonBoundingBoxOfSelectedElements(t,n)},drag:{hasOccurred:!1,offset:null},eventListeners:{onMove:null,onUp:null,onKeyUp:null,onKeyDown:null},boxSelection:{hasOccurred:!1},elementIdsToErase:{}}}},{key:\"handleDraggingScrollBar\",value:function(e,t){var n=this;if(!t.scrollbars.isOverEither||this.state.multiElement)return!1;Dr=!0,t.lastCoords.x=e.clientX,t.lastCoords.y=e.clientY;var r=(0,I.$9)((function(e){e.target instanceof HTMLElement&&n.handlePointerMoveOverScrollbars(e,t)})),o=(0,I.tH)((function(){Dr=!1,(0,I.Uk)(n.canvas,n.state),Hr=null,n.setState({cursorButton:\"up\"}),n.savePointer(e.clientX,e.clientY,\"up\"),window.removeEventListener(M.Ks.POINTER_MOVE,r),window.removeEventListener(M.Ks.POINTER_UP,o),r.flush()}));return Hr=o,window.addEventListener(M.Ks.POINTER_MOVE,r),window.addEventListener(M.Ks.POINTER_UP,o),!0}},{key:\"isASelectedElement\",value:function(e){return null!=e&&this.state.selectedElementIds[e.id]}},{key:\"isHittingCommonBoundingBoxOfSelectedElements\",value:function(e,t){if(t.length<2)return!1;var n=10\/this.state.zoom.value,r=(0,U.KP)(t),i=(0,o.Z)(r,4),a=i[0],l=i[1],s=i[2],c=i[3];return e.x>a-n&&e.x<s+n&&e.y>l-n&&e.y<c+n}},{key:\"onKeyDownFromPointerDownHandler\",value:function(e){var t=this;return(0,I.tH)((function(n){t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onKeyUpFromPointerDownHandler\",value:function(e){var t=this;return(0,I.tH)((function(n){n.key===_.tW.ALT&&n.preventDefault(),t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onPointerMoveFromPointerDownHandler\",value:function(e){var t=this;return(0,I.$9)((function(n){var r;if(null===e.drag.offset&&(e.drag.offset=(0,I.AK)((0,U.$V)((0,ie.eD)(t.scene.getNonDeletedElements(),t.state),e.origin.x,e.origin.y))),n.target instanceof HTMLElement&&!t.handlePointerMoveOverScrollbars(n,e)){var a=(0,I.dE)(n,t.state);if((0,N.EN)(t.state))t.handleEraser(n,e,a);else{var l=(0,ne.wC)(a.x,a.y,t.state.gridSize),s=(0,o.Z)(l,2),c=s[0],u=s[1];if(e.drag.hasOccurred||\"arrow\"!==t.state.activeTool.type&&\"line\"!==t.state.activeTool.type||!((0,ne.LW)(a.x,a.y,e.origin.x,e.origin.y)<M.f)){if(e.resize.isResizing&&(e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeHandleResize(e,n)))return!0;if(t.state.selectedLinearElement){var d=t.state.editingLinearElement||t.state.selectedLinearElement;if(K._.shouldAddMidpoint(t.state.selectedLinearElement,a,t.state)){var f=K._.addMidpoint(t.state.selectedLinearElement,a,t.state);if(!f)return;return void(0,b.flushSync)((function(){t.state.selectedLinearElement&&t.setState({selectedLinearElement:pr(pr({},t.state.selectedLinearElement),{},{pointerDownState:f.pointerDownState,selectedPointsIndices:f.selectedPointsIndices})}),t.state.editingLinearElement&&t.setState({editingLinearElement:pr(pr({},t.state.editingLinearElement),{},{pointerDownState:f.pointerDownState,selectedPointsIndices:f.selectedPointsIndices})})}))}if(null!==d.pointerDownState.segmentMidpoint.value&&!d.pointerDownState.segmentMidpoint.added)return;var h=K._.handlePointDragging(n,t.state,a.x,a.y,(function(e,n){t.maybeSuggestBindingsForLinearElementAtCoords(e,n)}),d);if(h)return e.lastCoords.x=a.x,e.lastCoords.y=a.y,e.drag.hasOccurred=!0,t.state.editingLinearElement&&!t.state.editingLinearElement.isDragging&&t.setState({editingLinearElement:pr(pr({},t.state.editingLinearElement),{},{isDragging:!0})}),void(t.state.selectedLinearElement.isDragging||t.setState({selectedLinearElement:pr(pr({},t.state.selectedLinearElement),{},{isDragging:!0})}))}var m=e.hit.allHitElements.some((function(e){return t.isASelectedElement(e)})),g=t.state.editingLinearElement&&n.shiftKey&&t.state.editingLinearElement.elementId===(null===(r=e.hit.element)||void 0===r?void 0:r.id);if((m||e.hit.hasHitCommonBoundingBoxOfSelectedElements)&&!g){var v=(0,ie.eD)(t.scene.getNonDeletedElements(),t.state);if(v.every((function(e){return e.locked})))return;if(e.drag.hasOccurred=!0,v.length>0&&!e.withCmdOrCtrl){var y=(0,ne.wC)(a.x-e.drag.offset.x,a.y-e.drag.offset.y,t.state.gridSize),x=(0,o.Z)(y,2),w=x[0],k=x[1],E=[Math.abs(a.x-e.origin.x),Math.abs(a.y-e.origin.y)],S=E[0],j=E[1],T=n.shiftKey;if((0,U.o8)(e,v,w,k,T,S,j,t.state),t.maybeSuggestBindingForAll(v),n.altKey&&!e.hit.hasBeenDuplicated){e.hit.hasBeenDuplicated=!0;var P,D=[],A=[],L=new Map,Z=new Map,z=e.hit.element,R=t.scene.getElementsIncludingDeleted(),B=(0,ie.eD)(R,t.state,!0).map((function(e){return e.id})),H=cr(R);try{for(H.s();!(P=H.n()).done;){var W=P.value;if(B.includes(W.id)||W.id===(null==z?void 0:z.id)&&e.hit.wasAddedToSelection){var F=(0,U.Sy)(t.state.editingGroupId,L,W),Y=(0,ne.wC)(e.origin.x-e.drag.offset.x,e.origin.y-e.drag.offset.y,t.state.gridSize),V=(0,o.Z)(Y,2),X=V[0],q=V[1];(0,O.DR)(F,{x:F.x+(X-w),y:F.y+(q-k)}),D.push(F),A.push(W),Z.set(W.id,F.id)}else D.push(W)}}catch(e){H.e(e)}finally{H.f()}var $=[].concat(D,A);(0,De.P7)(D,A,Z),(0,C.ek)($,A,Z,\"duplicatesServeAsOld\"),t.scene.replaceAllElements($)}return}}var Q=t.state.draggingElement;if(Q){if(\"freedraw\"===Q.type){var ee=Q.points,te=a.x-Q.x,re=a.y-Q.y,oe=ee.length>0&&ee[ee.length-1];if(!(oe&&oe[0]===te&&oe[1]===re)){var ae=Q.simulatePressure?Q.pressures:[].concat((0,i.Z)(Q.pressures),[n.pressure]);(0,O.DR)(Q,{points:[].concat((0,i.Z)(ee),[[te,re]]),pressures:ae})}}else if((0,G.bt)(Q)){e.drag.hasOccurred=!0;var le=Q.points,se=c-Q.x,ce=u-Q.y;if((0,_.Ge)(n)&&2===le.length){var ue=(0,U.o4)(Q.x,Q.y,a.x,a.y);se=ue.width,ce=ue.height}1===le.length?(0,O.DR)(Q,{points:[].concat((0,i.Z)(le),[[se,ce]])}):2===le.length&&(0,O.DR)(Q,{points:[].concat((0,i.Z)(le.slice(0,-1)),[[se,ce]])}),(0,G.Mn)(Q,!1)&&t.maybeSuggestBindingsForLinearElementAtCoords(Q,[a],t.state.startBoundElement)}else e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeDragNewGenericElement(e,n);if(\"selection\"===t.state.activeTool.type){e.boxSelection.hasOccurred=!0;var de=t.scene.getNonDeletedElements();if(n.shiftKey||t.state.editingLinearElement||!(0,ie.N)(de,t.state)||(e.withCmdOrCtrl&&e.hit.element?t.setState((function(n){return(0,J.bO)(pr(pr({},n),{},{selectedElementIds:(0,p.Z)({},e.hit.element.id,!0)}),t.scene.getNonDeletedElements())})):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),t.state.editingLinearElement)K._.handleBoxSelection(n,t.state,t.setState.bind(t));else{var fe=(0,ie.Yp)(de,Q);t.setState((function(n){return(0,J.bO)(pr(pr({},n),{},{selectedElementIds:pr(pr(pr({},n.selectedElementIds),fe.reduce((function(e,t){return e[t.id]=!0,e}),{})),e.hit.element?(0,p.Z)({},e.hit.element.id,!fe.length):null),showHyperlinkPopup:!(1!==fe.length||!fe[0].link)&&\"info\",selectedLinearElement:1===fe.length&&(0,G.bt)(fe[0])?new K._(fe[0],t.scene):null}),t.scene.getNonDeletedElements())}))}}}}}}}))}},{key:\"handlePointerMoveOverScrollbars\",value:function(e,t){if(t.scrollbars.isOverHorizontal){var n=e.clientX,r=n-t.lastCoords.x;return this.translateCanvas({scrollX:this.state.scrollX-r\/this.state.zoom.value}),t.lastCoords.x=n,!0}if(t.scrollbars.isOverVertical){var o=e.clientY,i=o-t.lastCoords.y;return this.translateCanvas({scrollY:this.state.scrollY-i\/this.state.zoom.value}),t.lastCoords.y=o,!0}return!1}},{key:\"onPointerUpFromPointerDownHandler\",value:function(e){var t=this;return(0,I.tH)((function(n){var r,o,a,l=t.state,s=l.draggingElement,c=l.resizingElement,u=l.multiElement,d=l.activeTool,f=l.isResizing,h=l.isRotating;if(t.setState({isResizing:!1,isRotating:!1,resizingElement:null,selectionElement:null,cursorButton:\"up\",editingElement:u||(0,U.iB)(t.state.editingElement)?t.state.editingElement:null}),t.savePointer(n.clientX,n.clientY,\"up\"),t.state.editingLinearElement)if(e.boxSelection.hasOccurred||(null===(o=e.hit)||void 0===o||null===(a=o.element)||void 0===a?void 0:a.id)===t.state.editingLinearElement.elementId){var m=K._.handlePointerUp(n,t.state.editingLinearElement,t.state);m!==t.state.editingLinearElement&&t.setState({editingLinearElement:m,suggestedBindings:[]})}else t.actionManager.executeAction(k.pL);else if(t.state.selectedLinearElement){var g,v;if((null===(g=e.hit)||void 0===g||null===(v=g.element)||void 0===v?void 0:v.id)!==t.state.selectedLinearElement.elementId){(0,ie.eD)(t.scene.getNonDeletedElements(),t.state).length>1&&t.setState({selectedLinearElement:null})}else{var b=K._.handlePointerUp(n,t.state.selectedLinearElement,t.state),y=b.startBindingElement,x=b.endBindingElement,w=t.scene.getElement(b.elementId);(0,G.Mn)(w)&&(0,C.HG)(w,y,x),b!==t.state.selectedLinearElement&&t.setState({selectedLinearElement:pr(pr({},b),{},{selectedPointsIndices:null}),suggestedBindings:[]})}}if(Hr=null,e.eventListeners.onMove&&e.eventListeners.onMove.flush(),window.removeEventListener(M.Ks.POINTER_MOVE,e.eventListeners.onMove),window.removeEventListener(M.Ks.POINTER_UP,e.eventListeners.onUp),window.removeEventListener(M.Ks.KEYDOWN,e.eventListeners.onKeyDown),window.removeEventListener(M.Ks.KEYUP,e.eventListeners.onKeyUp),t.state.pendingImageElementId&&t.setState({pendingImageElementId:null}),\"freedraw\"===(null==s?void 0:s.type)){var E=(0,I.dE)(n,t.state),S=s.points,j=E.x-s.x,_=E.y-s.y;j===S[0][0]&&_===S[0][1]&&(_+=1e-4,j+=1e-4);var T=s.simulatePressure?[]:[].concat((0,i.Z)(s.pressures),[n.pressure]);return(0,O.DR)(s,{points:[].concat((0,i.Z)(S),[[j,_]]),pressures:T,lastCommittedPoint:[j,_]}),void t.actionManager.executeAction(k.pL)}if((0,G.pC)(s)){var P=s;try{t.initializeImageDimensions(P),t.setState({selectedElementIds:(0,p.Z)({},P.id,!0)},(function(){t.actionManager.executeAction(k.pL)}))}catch(e){console.error(e),t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==P.id}))),t.actionManager.executeAction(k.pL)}}else if((0,G.bt)(s)){s.points.length>1&&t.history.resumeRecording();var D=(0,I.dE)(n,t.state);e.drag.hasOccurred||!s||u?e.drag.hasOccurred&&!u&&((0,C.N1)(t.state)&&(0,G.Mn)(s,!1)&&(0,C.R)(s,t.state,t.scene,D),t.setState({suggestedBindings:[],startBoundElement:null}),d.locked?t.setState((function(e){return{draggingElement:null}})):((0,I.z8)(t.canvas),t.setState((function(e){return{draggingElement:null,activeTool:(0,I.Om)(t.state,{type:\"selection\"}),selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},s.id,!0)),selectedLinearElement:new K._(s,t.scene)}})))):((0,O.DR)(s,{points:[].concat((0,i.Z)(s.points),[[D.x-s.x,D.y-s.y]])}),t.setState({multiElement:s,editingElement:t.state.draggingElement}))}else{if(\"selection\"!==d.type&&s&&(0,U.QD)(s))return t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().slice(0,-1)),void t.setState({draggingElement:null});s&&(0,O.DR)(s,(0,U.Qp)(s)),c&&t.history.resumeRecording(),c&&(0,U.QD)(c)&&t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==c.id})));var A=e.hit.element;if((null===(r=t.state.selectedLinearElement)||void 0===r?void 0:r.elementId)!==(null==A?void 0:A.id)&&(0,G.bt)(A))1===(0,ie.eD)(t.scene.getNonDeletedElements(),t.state).length&&t.setState({selectedLinearElement:new K._(A,t.scene)});if((0,N.EN)(t.state)){if(0===(0,ne.LW)(t.lastPointerDown.clientX,t.lastPointerDown.clientY,t.lastPointerUp.clientX,t.lastPointerUp.clientY)){var L=(0,I.dE)({clientX:t.lastPointerUp.clientX,clientY:t.lastPointerUp.clientY},t.state);t.getElementsAtPosition(L.x,L.y).forEach((function(t){return e.elementIdsToErase[t.id]={erase:!0,opacity:t.opacity}}))}t.eraseElements(e)}else{var Z;if(Object.keys(e.elementIdsToErase).length&&t.restoreReadyToEraseElements(e),A&&!e.drag.hasOccurred&&!e.hit.wasAddedToSelection&&(!t.state.editingLinearElement||!e.boxSelection.hasOccurred))if(n.shiftKey&&!t.state.editingLinearElement)if(t.state.selectedElementIds[A.id])if((0,J.zq)(t.state,A)){var z=A.groupIds.flatMap((function(e){return(0,J.Fb)(t.scene.getNonDeletedElements(),e)})).map((function(e){return(0,p.Z)({},e.id,!1)})).reduce((function(e,t){return pr(pr({},e),t)}),{});t.setState((function(e){return{selectedGroupIds:pr(pr({},e.selectedElementIds),A.groupIds.map((function(e){return(0,p.Z)({},e,!1)})).reduce((function(e,t){return pr(pr({},e),t)}),{})),selectedElementIds:pr(pr({},e.selectedElementIds),z)}}))}else null!==(Z=t.state.selectedLinearElement)&&void 0!==Z&&Z.isDragging||t.setState((function(e){var n=pr(pr({},e.selectedElementIds),{},(0,p.Z)({},A.id,!1)),r=(0,ie.eD)(t.scene.getNonDeletedElements(),pr(pr({},e),{},{selectedElementIds:n}));return(0,J.bO)(pr(pr({},e),{},{selectedElementIds:n,selectedLinearElement:1===r.length&&(0,G.bt)(r[0])?new K._(r[0],t.scene):e.selectedLinearElement}),t.scene.getNonDeletedElements())}));else t.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},A.id,!0))}}));else t.setState((function(e){var n;return pr({},(0,J.bO)(pr(pr({},e),{},{selectedElementIds:(0,p.Z)({},A.id,!0),selectedLinearElement:(0,G.bt)(A)&&(null===(n=e.selectedLinearElement)||void 0===n?void 0:n.elementId)!==A.id?new K._(A,t.scene):e.selectedLinearElement}),t.scene.getNonDeletedElements()))}));e.drag.hasOccurred||t.state.isResizing||!(A&&(0,U.wB)(A,t.state,e.origin.x,e.origin.y)||!A&&e.hit.hasHitCommonBoundingBoxOfSelectedElements)?(!d.locked&&\"freedraw\"!==d.type&&s&&t.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},s.id,!0))}})),(\"selection\"!==d.type||(0,ie.N)(t.scene.getNonDeletedElements(),t.state))&&t.history.resumeRecording(),(e.drag.hasOccurred||f||h)&&((0,C.N1)(t.state)?C.el:C.H)((0,ie.eD)(t.scene.getNonDeletedElements(),t.state)),d.locked||\"freedraw\"===d.type?t.setState({draggingElement:null,suggestedBindings:[]}):((0,I.z8)(t.canvas),t.setState({draggingElement:null,suggestedBindings:[],activeTool:(0,I.Om)(t.state,{type:\"selection\"})}))):t.state.editingLinearElement?t.setState({editingLinearElement:null}):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}}}))}},{key:\"maybeSuggestBindingForAll\",value:function(e){var t=(0,C.ZB)(e);this.setState({suggestedBindings:t})}},{key:\"clearSelection\",value:function(e){this.setState((function(t){return{selectedElementIds:{},selectedGroupIds:{},editingGroupId:t.editingGroupId&&null!=e&&(0,J.Nd)(e,t.editingGroupId)?t.editingGroupId:null}})),this.setState({selectedElementIds:{},previousSelectedElementIds:this.state.selectedElementIds})}},{key:\"getTextWysiwygSnappedToCenterPosition\",value:function(e,t,n,r){if(r){var o=r.x+r.width\/2,i=r.y+r.height\/2,a=(0,De.TP)(r,n);if(a&&(o=a.x,i=a.y),Math.hypot(e-o,t-i)<M.wZ){var l=(0,I._i)({sceneX:o,sceneY:i},n);return{viewportX:l.x,viewportY:l.y,elementCenterX:o,elementCenterY:i}}}}},{key:\"getCanvasOffsets\",value:function(){var e;if(null!==(e=this.excalidrawContainerRef)&&void 0!==e&&e.current){var t=this.excalidrawContainerRef.current.getBoundingClientRect();return{offsetLeft:t.left,offsetTop:t.top}}return{offsetLeft:0,offsetTop:0}}},{key:\"updateLanguage\",value:(t=(0,a.Z)(m().mark((function e(){var t,n=this;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=j.Mj.find((function(e){return e.code===n.props.langCode}))||j.Fp,e.next=3,(0,j.m0)(t);case 3:this.setAppState({});case 4:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}],[{key:\"resetTapTwice\",value:function(){Or=!1}}]),d}(v().Component);Fr.defaultProps={UIOptions:M.cW};var Ur=function(){var e=this;this.canvas=null,this.rc=null,this.unmounted=!1,this.device=hr,this.excalidrawContainerRef=v().createRef(),this.files={},this.imageCache=new Map,this.lastPointerDown=null,this.lastPointerUp=null,this.lastScenePointer=null,this.focusContainer=function(){var t;e.props.autoFocus&&(null===(t=e.excalidrawContainerRef.current)||void 0===t||t.focus())},this.getSceneElementsIncludingDeleted=function(){return e.scene.getElementsIncludingDeleted()},this.getSceneElements=function(){return e.scene.getNonDeletedElements()},this.syncActionResult=(0,I.tH)((function(t){if(!e.unmounted&&!1!==t){var n=null;if(t.elements&&(t.elements.forEach((function(t){var r;(null===(r=e.state.editingElement)||void 0===r?void 0:r.id)===t.id&&e.state.editingElement!==t&&(0,U.qP)(t)&&(n=t)})),e.scene.replaceAllElements(t.elements),t.commitToHistory&&e.history.resumeRecording()),t.files&&(e.files=t.replaceFiles?t.files:pr(pr({},e.files),t.files),e.addNewImagesToImageCache()),t.appState||n||e.state.contextMenu){var r,o,i,a,l,s,c,u;t.commitToHistory&&e.history.resumeRecording();var d=(null==t||null===(r=t.appState)||void 0===r?void 0:r.viewModeEnabled)||!1,f=(null==t||null===(o=t.appState)||void 0===o?void 0:o.zenModeEnabled)||!1,p=(null==t||null===(i=t.appState)||void 0===i?void 0:i.gridSize)||null,h=(null==t||null===(a=t.appState)||void 0===a?void 0:a.theme)||e.props.theme||M.C6.LIGHT,m=null!==(l=null==t||null===(s=t.appState)||void 0===s?void 0:s.name)&&void 0!==l?l:e.state.name,g=null!==(c=null==t||null===(u=t.appState)||void 0===u?void 0:u.errorMessage)&&void 0!==c?c:e.state.errorMessage;void 0!==e.props.viewModeEnabled&&(d=e.props.viewModeEnabled),void 0!==e.props.zenModeEnabled&&(f=e.props.zenModeEnabled),void 0!==e.props.gridModeEnabled&&(p=e.props.gridModeEnabled?M.k:null),void 0!==e.props.name&&(m=e.props.name),e.setState((function(e){var r;return Object.assign(t.appState||{},{contextMenu:null,editingElement:n||(null===(r=t.appState)||void 0===r?void 0:r.editingElement)||null,viewModeEnabled:d,zenModeEnabled:f,gridSize:p,theme:h,name:m,errorMessage:g})}),(function(){t.syncHistory&&e.history.setCurrentState(e.state,e.scene.getElementsIncludingDeleted())}))}}})),this.onBlur=(0,I.tH)((function(){Tr=!1,e.setState({isBindingEnabled:!0})})),this.onUnload=function(){e.onBlur()},this.disableEvent=function(e){e.preventDefault()},this.resetHistory=function(){e.history.clear()},this.resetScene=(0,I.tH)((function(t){e.scene.replaceAllElements([]),e.setState((function(n){return pr(pr({},(0,N.im)()),{},{isLoading:(null==t||!t.resetLoadingState)&&n.isLoading,theme:e.state.theme})})),e.resetHistory()})),this.initializeScene=(0,a.Z)(m().mark((function t(){var n,r,o,i,l;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return\"launchQueue\"in window&&\"LaunchParams\"in window&&window.launchQueue.setConsumer(function(){var t=(0,a.Z)(m().mark((function t(n){var r,o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n.files.length){t.next=2;break}return t.abrupt(\"return\");case 2:return r=n.files[0],t.next=5,r.getFile();case 5:o=t.sent,e.loadFileToCanvas(new File([o],o.name||\"\",{type:o.type}),r);case 7:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),e.props.theme&&e.setState({theme:e.props.theme}),e.state.isLoading||e.setState({isLoading:!0}),o=null,t.prev=4,t.next=7,e.props.initialData;case 7:if(t.t0=t.sent,t.t0){t.next=10;break}t.t0=null;case 10:o=t.t0,null!==(i=o)&&void 0!==i&&i.libraryItems&&e.library.updateLibrary({libraryItems:o.libraryItems,merge:!0}).catch((function(e){console.error(e)})),t.next=18;break;case 14:t.prev=14,t.t1=t.catch(4),console.error(t.t1),o={appState:{errorMessage:t.t1.message||\"Encountered an error during importing or restoring scene data\"}};case 18:(l=(0,F.nu)(o,null,null,{repairBindings:!0})).appState=pr(pr({},l.appState),{},{theme:e.props.theme||l.appState.theme,openSidebar:(null===(n=l.appState)||void 0===n?void 0:n.openSidebar)||e.state.openSidebar,activeTool:\"image\"===l.appState.activeTool.type?pr(pr({},l.appState.activeTool),{},{type:\"selection\"}):l.appState.activeTool,isLoading:!1,toast:e.state.toast}),null!==(r=o)&&void 0!==r&&r.scrollToContent&&(l.appState=pr(pr({},l.appState),(0,ie.W)(l.elements,pr(pr({},l.appState),{},{width:e.state.width,height:e.state.height,offsetTop:e.state.offsetTop,offsetLeft:e.state.offsetLeft}),null))),e.fonts.loadFontsForElements(l.elements),e.resetHistory(),e.syncActionResult(pr(pr({},l),{},{commitToHistory:!0}));case 24:case\"end\":return t.stop()}}),t,null,[[4,14]])}))),this.refreshDeviceState=function(t){var n=t.getBoundingClientRect(),r=n.width,o=n.height,i=null!=e.props.UIOptions.dockedSidebarBreakpoint?e.props.UIOptions.dockedSidebarBreakpoint:M.sk;e.device=(0,I.v4)(e.device,{isSmScreen:r<M.eF,isMobile:r<M.kV||o<M.Yx&&r<M.sS,canDeviceFitSidebar:r>i})},this.onResize=(0,I.tH)((function(){e.scene.getElementsIncludingDeleted().forEach((function(e){return(0,oe.bI)(e)})),e.setState({})})),this.renderScene=function(){var t={},n={},r={},o={},i={};e.state.collaborators.forEach((function(a,l){if(a.selectedElementIds)for(var s=0,c=Object.keys(a.selectedElementIds);s<c.length;s++){var u=c[s];u in r||(r[u]=[]),r[u].push(l)}a.pointer&&(a.username&&(o[l]=a.username),a.userState&&(i[l]=a.userState),n[l]=(0,I._i)({sceneX:a.pointer.x,sceneY:a.pointer.y},e.state),t[l]=a.button)}));var a=e.scene.getNonDeletedElements().filter((function(t){return(!(0,G.pC)(t)||e.state.pendingImageElementId!==t.id)&&(!e.state.editingElement||\"text\"!==e.state.editingElement.type||t.id!==e.state.editingElement.id)})),l=getComputedStyle(document.querySelector(\".excalidraw\")).getPropertyValue(\"--color-selection\");(0,re.Eu)({elements:a,appState:e.state,scale:window.devicePixelRatio,rc:e.rc,canvas:e.canvas,renderConfig:{selectionColor:l,scrollX:e.state.scrollX,scrollY:e.state.scrollY,viewBackgroundColor:e.state.viewBackgroundColor,zoom:e.state.zoom,remotePointerViewportCoords:n,remotePointerButton:t,remoteSelectedElementIds:r,remotePointerUsernames:o,remotePointerUserStates:i,shouldCacheIgnoreZoom:e.state.shouldCacheIgnoreZoom,theme:e.state.theme,imageCache:e.imageCache,isExporting:!1,renderScrollbars:!e.device.isMobile},callback:function(t){var n=t.atLeastOneVisibleElement,r=t.scrollBars;r&&(Ar=r);var o=!(0,U.iB)(e.state.editingElement)&&(!n&&a.length>0);e.state.scrolledOutside!==o&&e.setState({scrolledOutside:o}),e.scheduleImageRefresh()}},zr&&!0===window.EXCALIDRAW_THROTTLE_RENDER),zr||(zr=!0)},this.onScroll=(0,I.Ds)((function(){var t=e.getCanvasOffsets(),n=t.offsetTop,r=t.offsetLeft;e.setState((function(e){return e.offsetLeft===r&&e.offsetTop===n?null:{offsetTop:n,offsetLeft:r}}))}),M.HM),this.onCut=(0,I.tH)((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!(0,I.s)(t.target)&&(e.cutAll(),t.preventDefault(),t.stopPropagation())})),this.onCopy=(0,I.tH)((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!(0,I.s)(t.target)&&(e.copyAll(),t.preventDefault(),t.stopPropagation())})),this.cutAll=function(){e.actionManager.executeAction(k.ZM,\"keyboard\")},this.copyAll=function(){e.actionManager.executeAction(k.uN,\"keyboard\")},this.onTapStart=function(t){if(M.Dt||t.preventDefault(),!Or)return Or=!0,clearTimeout(Cr),void(Cr=window.setTimeout(Fr.resetTapTwice,M.Gj));if(Or&&1===t.touches.length){var n=(0,o.Z)(t.touches,1)[0];e.handleCanvasDoubleClick({clientX:n.clientX,clientY:n.clientY}),Or=!1,clearTimeout(Cr)}M.Dt&&t.preventDefault(),2===t.touches.length&&e.setState({selectedElementIds:{}})},this.onTapEnd=function(t){e.resetContextMenuTimer(),t.touches.length>0?e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}):Wr.pointers.clear()},this.pasteFromClipboard=(0,I.tH)(function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c,u,d,f,h,g,v;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=!(!Rr||!n),a=document.activeElement,l=null===(r=e.excalidrawContainerRef.current)||void 0===r?void 0:r.contains(a),!n||l){t.next=5;break}return t.abrupt(\"return\");case 5:if(s=document.elementFromPoint(Ir,Mr),!n||s instanceof HTMLCanvasElement&&!(0,I.s)(a)){t.next=8;break}return t.abrupt(\"return\");case 8:return c=null==n||null===(o=n.clipboardData)||void 0===o?void 0:o.files[0],t.next=11,(0,B.mQ)(n,i);case 11:if(u=t.sent,c||!u.text||i||(d=u.text.trim()).startsWith(\"<svg\")&&d.endsWith(\"<\/svg>\")&&(c=(0,Ye.Pn)(d)),!(0,Ye.Wr)(c)||u.spreadsheet){t.next=20;break}return f=(0,I.dE)({clientX:Ir,clientY:Mr},e.state),h=f.x,g=f.y,v=e.createImageElement({sceneX:h,sceneY:g}),e.insertImageElement(v,c),e.initializeImageDimensions(v),e.setState({selectedElementIds:(0,p.Z)({},v.id,!0)}),t.abrupt(\"return\");case 20:if(!e.props.onPaste){t.next=32;break}return t.prev=21,t.next=24,e.props.onPaste(u,n);case 24:if(t.t0=t.sent,!1!==t.t0){t.next=27;break}return t.abrupt(\"return\");case 27:t.next=32;break;case 29:t.prev=29,t.t1=t.catch(21),console.error(t.t1);case 32:u.errorMessage?e.setState({errorMessage:u.errorMessage}):u.spreadsheet&&!i?e.setState({pasteDialog:{data:u.spreadsheet,shown:!0}}):u.elements?e.addElementsFromPasteOrLibrary({elements:u.elements,files:u.files||null,position:\"cursor\"}):u.text&&e.addTextFromPaste(u.text,i),e.setActiveTool({type:\"selection\"}),null==n||n.preventDefault();case 35:case\"end\":return t.stop()}}),t,null,[[21,29]])})));return function(e){return t.apply(this,arguments)}}()),this.addElementsFromPasteOrLibrary=function(t){var n=(0,F.ET)(t.elements,null),a=(0,U.KP)(n),l=(0,o.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3],f=(0,I.TE)(s,u)\/2,p=(0,I.TE)(c,d)\/2,h=\"object\"===(0,r.Z)(t.position)?t.position.clientX:\"cursor\"===t.position?Ir:e.state.width\/2+e.state.offsetLeft,m=\"object\"===(0,r.Z)(t.position)?t.position.clientY:\"cursor\"===t.position?Mr:e.state.height\/2+e.state.offsetTop,g=(0,I.dE)({clientX:h,clientY:m},e.state),v=g.x-f,b=g.y-p,y=(0,ne.wC)(v,b,e.state.gridSize),x=(0,o.Z)(y,2),w=x[0],k=x[1],E=(0,Y._N)(n.map((function(e){return(0,O.BE)(e,{x:e.x+w-s,y:e.y+k-c})}))),S=[].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),(0,i.Z)(E));e.scene.replaceAllElements(S),E.forEach((function(e){if((0,U.iB)(e)&&(0,G.Xh)(e)){var t=(0,De.tl)(e);(0,U.oN)(e,t)}})),t.files&&(e.files=pr(pr({},e.files),t.files)),e.history.resumeRecording(),e.setState((0,J.bO)(pr(pr({},e.state),{},{openSidebar:e.state.openSidebar&&e.device.canDeviceFitSidebar&&e.state.isSidebarDocked?e.state.openSidebar:null,selectedElementIds:E.reduce((function(e,t){return(0,G.Xh)(t)||(e[t.id]=!0),e}),{}),selectedGroupIds:{}}),e.scene.getNonDeletedElements()),(function(){t.files&&e.addNewImagesToImageCache()})),e.setActiveTool({type:\"selection\"})},this.setAppState=function(t,n){e.setState(t,n)},this.removePointer=function(t){Lr&&e.resetContextMenuTimer(),Wr.pointers.delete(t.pointerId)},this.toggleLock=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"ui\";e.state.activeTool.locked||(0,L.L)(\"toolbar\",\"toggleLock\",\"\".concat(t,\" (\").concat(e.device.isMobile?\"mobile\":\"desktop\",\")\")),e.setState((function(t){return{activeTool:pr(pr(pr({},t.activeTool),(0,I.Om)(e.state,t.activeTool.locked?{type:\"selection\"}:t.activeTool)),{},{locked:!t.activeTool.locked})}}))},this.togglePenMode=function(){e.setState((function(e){return{penMode:!e.penMode}}))},this.onHandToolToggle=function(){e.actionManager.executeAction(ar.eF)},this.zoomCanvas=function(t){e.setState(pr({},(0,le.E)({viewportX:e.state.width\/2+e.state.offsetLeft,viewportY:e.state.height\/2+e.state.offsetTop,nextZoom:(0,ie.j)(t)},e.state)))},this.cancelInProgresAnimation=null,this.scrollToContent=function(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.scene.getNonDeletedElements(),r=arguments.length>1?arguments[1]:void 0;null===(t=e.cancelInProgresAnimation)||void 0===t||t.call(e);var o=Array.isArray(n)?n:[n],i=e.state.zoom,a=e.state.scrollX,l=e.state.scrollY;if(null!=r&&r.fitToContent){var s=(0,ar.md)(o,e.state,!1),c=s.appState;i=c.zoom,a=c.scrollX,l=c.scrollY}else{var u=(0,ie.W)(o,e.state,e.canvas);a=u.scrollX,l=u.scrollY}if(null!=r&&r.animate){var d,f=e.state.scrollX,p=e.state.scrollY;e.zoomCanvas(i.value);var h=(0,I.B4)([f,p],[a,l],(function(t,n){return e.setState({scrollX:t,scrollY:n})}),{duration:null!==(d=null==r?void 0:r.duration)&&void 0!==d?d:500});e.cancelInProgresAnimation=function(){h(),e.cancelInProgresAnimation=null}}else e.setState({scrollX:a,scrollY:l,zoom:i})},this.translateCanvas=function(t){var n;null===(n=e.cancelInProgresAnimation)||void 0===n||n.call(e),e.setState(t)},this.setToast=function(t){e.setState({toast:t})},this.restoreFileFromShare=(0,a.Z)(m().mark((function t(){var n,r,o,i;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,caches.open(\"web-share-target\");case 3:return n=t.sent,t.next=6,n.match(\"shared-file\");case 6:if(!(r=t.sent)){t.next=16;break}return t.next=10,r.blob();case 10:return o=t.sent,i=new File([o],o.name||\"\",{type:o.type}),e.loadFileToCanvas(i,null),t.next=15,n.delete(\"shared-file\");case 15:window.history.replaceState(null,M.iC,window.location.pathname);case 16:t.next=21;break;case 18:t.prev=18,t.t0=t.catch(0),e.setState({errorMessage:t.t0.message});case 21:case\"end\":return t.stop()}}),t,null,[[0,18]])}))),this.addFiles=(0,I.tH)((function(t){var n=t.reduce((function(e,t){return e.set(t.id,t),e}),new Map);e.files=pr(pr({},e.files),Object.fromEntries(n)),e.scene.getNonDeletedElements().forEach((function(t){(0,G.wi)(t)&&n.has(t.fileId)&&(e.imageCache.delete(t.fileId),(0,oe.bI)(t))})),e.scene.informMutation(),e.addNewImagesToImageCache()})),this.updateScene=(0,I.tH)((function(t){t.commitToHistory&&e.history.resumeRecording(),t.appState&&e.setState(t.appState),t.elements&&e.scene.replaceAllElements(t.elements),t.collaborators&&e.setState({collaborators:t.collaborators})})),this.onSceneUpdated=function(){e.setState({})},this.toggleMenu=function(t,n){return\"customSidebar\"!==t||e.props.renderSidebar?(\"library\"===t||\"customSidebar\"===t)&&(r=void 0===n?e.state.openSidebar===t?null:t:n?t:null,e.setState({openSidebar:r}),!!r):(console.warn('attempting to toggle \"customSidebar\", but no \"props.renderSidebar\" is defined'),!1);var r},this.updateCurrentCursorPosition=(0,I.tH)((function(e){Ir=e.clientX,Mr=e.clientY})),this.onKeyDown=(0,I.tH)((function(t){if(\"Proxy\"in window&&(!t.shiftKey&&\/^[A-Z]$\/.test(t.key)||t.shiftKey&&\/^[a-z]$\/.test(t.key))&&(t=new Proxy(t,{get:function(e,n){var r=e[n];return\"function\"==typeof r?r.bind(e):\"key\"===n?t.shiftKey?e.key.toUpperCase():e.key.toLowerCase():r}})),t[_.tW.CTRL_OR_CMD]&&t.key.toLowerCase()===_.tW.V&&(Rr=t.shiftKey,clearTimeout(Nr),Nr=window.setTimeout((function(){Rr=!1}),100)),!t[_.tW.CTRL_OR_CMD]||!(0,I.s)(t.target)||t.code!==_.aU.MINUS&&t.code!==_.aU.EQUAL){if(!((0,I.s)(t.target)&&t.key!==_.tW.ESCAPE||(0,_.Wl)(t.key)&&(0,I._Z)(t.target)))if(t.key!==_.tW.QUESTION_MARK)if(t.key.toLowerCase()===_.tW.E&&t.shiftKey&&t[_.tW.CTRL_OR_CMD])e.setState({openDialog:\"imageExport\"});else{if(t.key===_.tW.PAGE_UP||t.key===_.tW.PAGE_DOWN){var n=(t.shiftKey?e.state.width:e.state.height)\/e.state.zoom.value;t.key===_.tW.PAGE_DOWN&&(n=-n),t.shiftKey?e.translateCanvas((function(e){return{scrollX:e.scrollX+n}})):e.translateCanvas((function(e){return{scrollY:e.scrollY+n}}))}if(!e.actionManager.handleKeyDown(t)&&!e.state.viewModeEnabled){if(t[_.tW.CTRL_OR_CMD]&&e.state.isBindingEnabled&&e.setState({isBindingEnabled:!1}),(0,_.Wl)(t.key)){var r=e.state.gridSize&&(t.shiftKey?M.$e:e.state.gridSize)||(t.shiftKey?M.Iw:M.$e),o=0,i=0;t.key===_.tW.ARROW_LEFT?o=-r:t.key===_.tW.ARROW_RIGHT?o=r:t.key===_.tW.ARROW_UP?i=-r:t.key===_.tW.ARROW_DOWN&&(i=r);var a=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state,!0);a.forEach((function(e){(0,O.DR)(e,{x:e.x+o,y:e.y+i}),(0,C.Ww)(e,{simultaneouslyUpdated:a})})),e.maybeSuggestBindingForAll(a),t.preventDefault()}else if(t.key===_.tW.ENTER){var l=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);if(1===l.length){var s=l[0];if(t[_.tW.CTRL_OR_CMD])(0,G.bt)(s)&&(e.state.editingLinearElement&&e.state.editingLinearElement.elementId===l[0].id||(e.history.resumeRecording(),e.setState({editingLinearElement:new K._(s,e.scene)})));else if((0,U.iB)(s)||(0,De.Zr)(s)){var c;(0,U.iB)(s)||(c=s);var u=(0,De.TP)(s,e.state),d=u.x,f=u.y;return e.startTextEditing({sceneX:d,sceneY:f,container:c}),void t.preventDefault()}}}else if(!t.ctrlKey&&!t.altKey&&!t.metaKey&&null===e.state.draggingElement){var p=function(e){var t=se.find((function(t,n){return null!=t.numericKey&&e===t.numericKey.toString()||t.key&&(\"string\"==typeof t.key?t.key===e:t.key.includes(e))}));return(null==t?void 0:t.value)||null}(t.key);p?(e.state.activeTool.type!==p&&(0,L.L)(\"toolbar\",p,\"keyboard (\".concat(e.device.isMobile?\"mobile\":\"desktop\",\")\")),e.setActiveTool({type:p}),t.stopPropagation()):t.key===_.tW.Q&&(e.toggleLock(\"keyboard\"),t.stopPropagation())}if(t.key===_.tW.SPACE&&0===Wr.pointers.size&&(Tr=!0,(0,I.KJ)(e.canvas,M.oc.GRAB),t.preventDefault()),!(t.key!==_.tW.G&&t.key!==_.tW.S||t.altKey||t[_.tW.CTRL_OR_CMD])){var h=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);if(\"selection\"===e.state.activeTool.type&&!h.length)return;t.key===_.tW.G&&((0,ie.$b)(e.state.activeTool.type)||h.some((function(e){return(0,ie.$b)(e.type)})))&&(e.setState({openPopup:\"backgroundColorPicker\"}),t.stopPropagation()),t.key===_.tW.S&&(e.setState({openPopup:\"strokeColorPicker\"}),t.stopPropagation())}!t[_.tW.CTRL_OR_CMD]||t.key!==_.tW.BACKSPACE&&t.key!==_.tW.DELETE||yn.e_.set(An.w,\"clearCanvas\")}}else e.setState({openDialog:\"help\"})}else t.preventDefault()})),this.onWheel=(0,I.tH)((function(e){e.target instanceof HTMLCanvasElement||!e.ctrlKey||e.preventDefault()})),this.onKeyUp=(0,I.tH)((function(t){if(t.key===_.tW.SPACE&&(e.state.viewModeEnabled?(0,I.KJ)(e.canvas,M.oc.GRAB):\"selection\"===e.state.activeTool.type?(0,I.z8)(e.canvas):((0,I.Uk)(e.canvas,e.state),e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),Tr=!1),t[_.tW.CTRL_OR_CMD]||e.state.isBindingEnabled||e.setState({isBindingEnabled:!0}),(0,_.Wl)(t.key)){var n=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);(0,C.N1)(e.state)?(0,C.el)(n):(0,C.H)(n),e.setState({suggestedBindings:[]})}})),this.setActiveTool=function(t){var n=(0,I.Om)(e.state,t);\"hand\"===n.type?(0,I.KJ)(e.canvas,M.oc.GRAB):Tr||(0,I.Uk)(e.canvas,e.state),(0,I.wO)(document.activeElement)&&e.focusContainer(),(0,G.dt)(n.type)||e.setState({suggestedBindings:[]}),\"image\"===n.type&&e.onImageAction(),\"selection\"!==n.type?e.setState({activeTool:n,selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}):e.setState({activeTool:n})},this.setCursor=function(t){(0,I.KJ)(e.canvas,t)},this.resetCursor=function(){(0,I.z8)(e.canvas)},this.isTouchScreenMultiTouchGesture=function(){return Wr.pointers.size>=2},this.onGestureStart=(0,I.tH)((function(t){t.preventDefault(),e.isTouchScreenMultiTouchGesture()&&e.setState({selectedElementIds:{}}),Wr.initialScale=e.state.zoom.value})),this.onGestureChange=(0,I.tH)((function(t){if(t.preventDefault(),!e.isTouchScreenMultiTouchGesture()){var n=Wr.initialScale;n&&e.setState((function(e){return pr({},(0,le.E)({viewportX:Ir,viewportY:Mr,nextZoom:(0,ie.j)(n*t.scale)},e))}))}})),this.onGestureEnd=(0,I.tH)((function(t){t.preventDefault(),e.isTouchScreenMultiTouchGesture()&&e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}),Wr.initialScale=null})),this.startTextEditing=function(t){var n,r,o,a,l=t.sceneX,s=t.sceneY,c=t.insertAtParentCenter,u=void 0===c||c,d=t.container,f=!1,p=u&&e.getTextWysiwygSnappedToCenterPosition(l,s,e.state,d);d&&p&&(f=!0);var h=null,m=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state),g=(null===(n=h=1===m.length?(0,U.iB)(m[0])?m[0]:d?(0,De.WJ)(m[0]):e.getTextElementAtPosition(l,s):e.getTextElementAtPosition(l,s))||void 0===n?void 0:n.fontFamily)||e.state.currentItemFontFamily,v=(null===(r=h)||void 0===r?void 0:r.lineHeight)||(0,De.PT)(g),b=e.state.currentItemFontSize;if(!h&&f&&d&&!(0,G.Yv)(d)){var y={fontSize:b,fontFamily:g},x=(0,De.AT)((0,I.mO)(y),v),w=(0,De.w_)(b,v),k=(0,De.HE)(d),E=Math.max(k.height,w),S=Math.max(k.width,x);(0,O.DR)(d,{height:E,width:S}),l=d.x+S\/2,s=d.y+E\/2,p&&(p=e.getTextWysiwygSnappedToCenterPosition(l,s,e.state,d))}var j=h||(0,U.VL)({x:p?p.elementCenterX:l,y:p?p.elementCenterY:s,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,text:\"\",fontSize:b,fontFamily:g,textAlign:p?\"center\":e.state.currentItemTextAlign,verticalAlign:p?M.oX.MIDDLE:M.hs,containerId:f?null==d?void 0:d.id:void 0,groupIds:null!==(o=null==d?void 0:d.groupIds)&&void 0!==o?o:[],lineHeight:v,angle:null!==(a=null==d?void 0:d.angle)&&void 0!==a?a:0});if(!h&&f&&d&&(0,O.DR)(d,{boundElements:(d.boundElements||[]).concat({type:\"text\",id:j.id})}),e.setState({editingElement:j}),!h)if(d&&f){var _=e.scene.getElementIndex(d.id);e.scene.insertElementAtIndex(j,_+1)}else e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[j]));e.setState({editingElement:j}),e.handleTextWysiwyg(j,{isExistingElement:!!h})},this.handleCanvasDoubleClick=function(t){if(!e.state.multiElement&&\"selection\"===e.state.activeTool.type){var n=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);if(1===n.length&&(0,G.bt)(n[0])){if(t[_.tW.CTRL_OR_CMD]&&(!e.state.editingLinearElement||e.state.editingLinearElement.elementId!==n[0].id))return e.history.resumeRecording(),void e.setState({editingLinearElement:new K._(n[0],e.scene)});if(e.state.editingLinearElement&&e.state.editingLinearElement.elementId===n[0].id)return}(0,I.z8)(e.canvas);var r=(0,I.dE)(t,e.state),o=r.x,i=r.y;if((0,J.iJ)(e.state).length>0){var a=e.getElementAtPosition(o,i),l=a&&(0,J.YS)(a,e.state.selectedGroupIds);if(l)return void e.setState((function(t){return(0,J.bO)(pr(pr({},t),{},{editingGroupId:l,selectedElementIds:(0,p.Z)({},a.id,!0),selectedGroupIds:{}}),e.scene.getNonDeletedElements())}))}if((0,I.z8)(e.canvas),!t[_.tW.CTRL_OR_CMD]&&!e.state.viewModeEnabled){var s=(0,De.OW)(e.scene.getNonDeletedElements(),e.state,o,i);if(s&&((0,G.Xo)(s)||!(0,I.Qm)(s.backgroundColor)||(0,Qn.Qu)(s,e.state,[o,i]))){var c=(0,De.TP)(s,e.state);o=c.x,i=c.y}e.startTextEditing({sceneX:o,sceneY:i,insertAtParentCenter:!t.altKey,container:s})}}},this.getElementLinkAtPosition=function(t,n){var r=e.scene.getNonDeletedElements().slice().reverse(),o=1\/0;return r.find((function(r,i){return n&&r.id===n.id&&(o=i),r.link&&i<=o&&(0,er.wq)(r,e.state,[t.x,t.y],e.device.isMobile)}))},this.redirectToLink=function(t,n){var r=(0,ne.LW)(e.lastPointerDown.clientX,e.lastPointerDown.clientY,e.lastPointerUp.clientX,e.lastPointerUp.clientY);if(!(!e.hitLinkElement||n&&r>M.f||!n&&0!==r)){var o=(0,I.dE)(e.lastPointerDown,e.state),i=(0,er.wq)(e.hitLinkElement,e.state,[o.x,o.y],e.device.isMobile),a=(0,I.dE)(e.lastPointerUp,e.state),l=(0,er.wq)(e.hitLinkElement,e.state,[a.x,a.y],e.device.isMobile);if(i&&l){var s,c,u=e.hitLinkElement.link;if(u)if(u=(0,tr.$)(u),e.props.onLinkOpen&&(c=(0,I.ag)(M.Ks.EXCALIDRAW_LINK,t.nativeEvent),e.props.onLinkOpen(pr(pr({},e.hitLinkElement),{},{link:u}),c)),null===(s=c)||void 0===s||!s.defaultPrevented){var d=(0,tr.q)(u)?\"_self\":\"_blank\",f=window.open(void 0,d);f&&(f.opener=null,f.location=u)}}}},this.handleCanvasPointerMove=function(t){e.savePointer(t.clientX,t.clientY,e.state.cursorButton),Wr.pointers.has(t.pointerId)&&Wr.pointers.set(t.pointerId,{x:t.clientX,y:t.clientY});var n=Wr.initialScale;if(2===Wr.pointers.size&&Wr.lastCenter&&n&&Wr.initialDistance){var r=V(Wr.pointers),a=r.x-Wr.lastCenter.x,l=r.y-Wr.lastCenter.y;Wr.lastCenter=r;var s=X(Array.from(Wr.pointers.values())),c=\"freedraw\"===e.state.activeTool.type&&e.state.penMode?1:s\/Wr.initialDistance,u=c?(0,ie.j)(n*c):e.state.zoom.value;e.setState((function(t){var n=(0,le.E)({viewportX:r.x,viewportY:r.y,nextZoom:u},t);e.translateCanvas({zoom:n.zoom,scrollX:n.scrollX+a\/u,scrollY:n.scrollY+l\/u,shouldCacheIgnoreZoom:!0})})),e.resetShouldCacheIgnoreZoomDebounced()}else Wr.lastCenter=Wr.initialDistance=Wr.initialScale=null;if(!(Tr||Pr||Dr||(0,N.l$)(e.state))){var d=(0,ie._4)(Ar,t.clientX-e.state.offsetLeft,t.clientY-e.state.offsetTop).isOverEither;e.state.draggingElement||e.state.multiElement||(d?(0,I.z8)(e.canvas):(0,I.Uk)(e.canvas,e.state));var f=(0,I.dE)(t,e.state),p=f.x,h=f.y;if(e.state.editingLinearElement&&!e.state.editingLinearElement.isDragging){var m=K._.handlePointerMove(t,p,h,e.state);m&&m!==e.state.editingLinearElement&&(0,b.flushSync)((function(){e.setState({editingLinearElement:m})})),null!=(null==m?void 0:m.lastUncommittedPoint)?e.maybeSuggestBindingAtCursor(f):(0,b.flushSync)((function(){e.setState({suggestedBindings:[]})}))}if((0,G.Lx)(e.state.activeTool.type)){var g=e.state.draggingElement;(0,G.Mn)(g,!1)?e.maybeSuggestBindingsForLinearElementAtCoords(g,[f],e.state.startBoundElement):e.maybeSuggestBindingAtCursor(f)}if(e.state.multiElement){var v=e.state.multiElement,y=v.x,x=v.y,w=v.points,k=v.lastCommittedPoint,E=w[w.length-1];if((0,I.Uk)(e.canvas,e.state),E===k)(0,ne.LW)(p-y,h-x,E[0],E[1])>=M.qx?(0,O.DR)(v,{points:[].concat((0,i.Z)(w),[[p-y,h-x]])}):(0,I.KJ)(e.canvas,M.oc.POINTER);else if(w.length>2&&k&&(0,ne.LW)(p-y,h-x,k[0],k[1])<M.qx)(0,I.KJ)(e.canvas,M.oc.POINTER),(0,O.DR)(v,{points:w.slice(0,-1)});else{var S,j=(0,ne.wC)(p,h,e.state.gridSize),C=(0,o.Z)(j,2),T=C[0],P=C[1],D=null!==(S=null==v?void 0:v.lastCommittedPoint)&&void 0!==S?S:[0,0],A=(0,o.Z)(D,2),L=A[0],Z=A[1],z=T-y-L,R=P-x-Z;if((0,_.Ge)(t)){var B=(0,U.o4)(L+y,Z+x,T,P);z=B.width,R=B.height}(0,ne.g6)(w,e.state.zoom.value)&&(0,I.KJ)(e.canvas,M.oc.POINTER),(0,O.DR)(v,{points:[].concat((0,i.Z)(w.slice(0,-1)),[[L+z,Z+R]])})}}else{if(!(Boolean(t.buttons)||\"selection\"!==e.state.activeTool.type&&\"text\"!==e.state.activeTool.type&&\"eraser\"!==e.state.activeTool.type)){var H=e.scene.getNonDeletedElements(),W=(0,ie.eD)(H,e.state);if(1!==W.length||d||e.state.editingLinearElement){if(W.length>1&&!d){var F=(0,U.n2)((0,U.KP)(W),p,h,e.state.zoom,t.pointerType);if(F)return void(0,I.KJ)(e.canvas,(0,U.Un)({transformHandleType:F}))}}else{var Y=(0,U.jt)(H,e.state,p,h,e.state.zoom,t.pointerType);if(Y&&Y.transformHandleType)return void(0,I.KJ)(e.canvas,(0,U.Un)(Y))}var q=e.getElementAtPosition(f.x,f.y);e.hitLinkElement=e.getElementLinkAtPosition(f,q),(0,N.EN)(e.state)||(e.hitLinkElement&&!e.state.selectedElementIds[e.hitLinkElement.id]?((0,I.KJ)(e.canvas,M.oc.POINTER),(0,er.Pp)(e.hitLinkElement,e.state)):((0,er.lV)(),q&&q.link&&e.state.selectedElementIds[q.id]&&!e.state.contextMenu&&!e.state.showHyperlinkPopup?e.setState({showHyperlinkPopup:\"info\"}):\"text\"===e.state.activeTool.type?(0,I.KJ)(e.canvas,(0,U.iB)(q)?M.oc.TEXT:M.oc.CROSSHAIR):e.state.viewModeEnabled?(0,I.KJ)(e.canvas,M.oc.GRAB):d?(0,I.KJ)(e.canvas,M.oc.AUTO):e.state.selectedLinearElement?e.handleHoverSelectedLinearElement(e.state.selectedLinearElement,p,h):t[_.tW.CTRL_OR_CMD]?(0,I.KJ)(e.canvas,M.oc.AUTO):!q&&!e.isHittingCommonBoundingBoxOfSelectedElements(f,W)||null!=q&&q.locked||(0,I.KJ)(e.canvas,M.oc.MOVE)))}}}},this.handleEraser=function(t,n,r){for(var o=function(e){e.forEach((function(e){e.locked||(i.push(e.id),t.altKey?n.elementIdsToErase[e.id]&&n.elementIdsToErase[e.id].erase&&(n.elementIdsToErase[e.id].erase=!1):n.elementIdsToErase[e.id]||(n.elementIdsToErase[e.id]={erase:!0,opacity:e.opacity}))}))},i=[],a=(0,ne.LW)(n.lastCoords.x,n.lastCoords.y,r.x,r.y),l=10\/e.state.zoom.value,s=pr({},n.lastCoords),c=0;c<=a;){if(o(e.getElementsAtPosition(s.x,s.y)),c===a)break;var u=(c=Math.min(c+l,a))\/a,d=(1-u)*s.x+u*r.x,f=(1-u)*s.y+u*r.y;s.x=d,s.y=f}var p=e.scene.getElementsIncludingDeleted().map((function(e){var r=(0,G.Xh)(e)&&i.includes(e.containerId)?e.containerId:e.id;if(i.includes(r)){if(!t.altKey)return(0,O.BE)(e,{opacity:M.xY});if(n.elementIdsToErase[r]&&!1===n.elementIdsToErase[r].erase)return(0,O.BE)(e,{opacity:n.elementIdsToErase[r].opacity})}return e}));e.scene.replaceAllElements(p),n.lastCoords.x=r.x,n.lastCoords.y=r.y},this.handleTouchMove=function(e){Zr=!0},this.handleCanvasPointerDown=function(t){var n,r;if(e.state.contextMenu&&e.setState({contextMenu:null}),e.updateGestureOnPointerDown(t),\"touch\"===t.pointerType&&e.state.draggingElement&&\"freedraw\"===e.state.draggingElement.type){var o=e.state.draggingElement;e.updateScene(pr(pr({},o.points.length<10?{elements:e.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==o.id}))}:{}),{},{appState:{draggingElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:Object.keys(e.state.selectedElementIds).filter((function(e){return e!==o.id})).reduce((function(t,n){return t[n]=e.state.selectedElementIds[n],t}),{})}}))}else{var i=document.getSelection();if(null!=i&&i.anchorNode&&i.removeAllRanges(),e.maybeOpenContextMenuAfterPointerDownOnTouchDevices(t),e.maybeCleanupAfterMissingPointerUp(t),e.state.penDetected||\"pen\"!==t.pointerType||e.setState((function(e){return{penMode:!0,penDetected:!0}})),!e.device.isTouchScreen&&[\"pen\",\"touch\"].includes(t.pointerType)&&(e.device=(0,I.v4)(e.device,{isTouchScreen:!0})),!Pr&&(e.lastPointerDown=t,e.setState({lastPointerDownWith:t.pointerType,cursorButton:\"down\"}),e.savePointer(t.clientX,t.clientY,\"down\"),!e.handleCanvasPanUsingWheelOrSpaceDrag(t)&&!(t.button!==M.Oh.MAIN&&t.button!==M.Oh.TOUCH||Wr.pointers.size>1))){var a=e.initialPointerDownState(t);if(!e.handleDraggingScrollBar(t,a))if(e.clearSelectionIfNotUsingSelection(),e.updateBindingEnabledOnPointerMove(t),!e.handleSelectionOnPointerDown(t,a))if(!e.state.penMode||\"touch\"!==t.pointerType||\"selection\"===e.state.activeTool.type||\"text\"===e.state.activeTool.type||\"image\"===e.state.activeTool.type)if(\"text\"!==e.state.activeTool.type){if(\"arrow\"===e.state.activeTool.type||\"line\"===e.state.activeTool.type)e.handleLinearElementOnPointerDown(t,e.state.activeTool.type,a);else if(\"image\"===e.state.activeTool.type){(0,I.KJ)(e.canvas,M.oc.CROSSHAIR);var l=e.state.pendingImageElementId&&e.scene.getElement(e.state.pendingImageElementId);if(!l)return;e.setState({draggingElement:l,editingElement:l,pendingImageElementId:null,multiElement:null});var s=(0,I.dE)(t,e.state),c=s.x,u=s.y;(0,O.DR)(l,{x:c,y:u})}else\"freedraw\"===e.state.activeTool.type?e.handleFreeDrawElementOnPointerDown(t,e.state.activeTool.type,a):\"custom\"===e.state.activeTool.type?(0,I.KJ)(e.canvas,M.oc.AUTO):\"eraser\"!==e.state.activeTool.type&&\"hand\"!==e.state.activeTool.type&&e.createGenericElementOnPointerDown(e.state.activeTool.type,a);null===(n=e.props)||void 0===n||null===(r=n.onPointerDown)||void 0===r||r.call(n,e.state.activeTool,a);var d=e.onPointerMoveFromPointerDownHandler(a),f=e.onPointerUpFromPointerDownHandler(a),p=e.onKeyDownFromPointerDownHandler(a),h=e.onKeyUpFromPointerDownHandler(a);Hr=f,e.state.viewModeEnabled||(window.addEventListener(M.Ks.POINTER_MOVE,d),window.addEventListener(M.Ks.POINTER_UP,f),window.addEventListener(M.Ks.KEYDOWN,p),window.addEventListener(M.Ks.KEYUP,h),a.eventListeners.onMove=d,a.eventListeners.onUp=f,a.eventListeners.onKeyUp=h,a.eventListeners.onKeyDown=p)}else e.handleTextOnPointerDown(t,a)}}},this.handleCanvasPointerUp=function(t){if(e.lastPointerUp=t,e.device.isTouchScreen){var n=(0,I.dE)({clientX:t.clientX,clientY:t.clientY},e.state),r=e.getElementAtPosition(n.x,n.y);e.hitLinkElement=e.getElementLinkAtPosition(n,r)}e.hitLinkElement&&!e.state.selectedElementIds[e.hitLinkElement.id]&&e.redirectToLink(t,e.device.isTouchScreen),e.removePointer(t)},this.maybeOpenContextMenuAfterPointerDownOnTouchDevices=function(t){\"touch\"===t.pointerType&&(Zr=!1,Lr?Zr=!0:Lr=window.setTimeout((function(){Lr=0,Zr||e.handleCanvasContextMenu(t)}),M.nM))},this.resetContextMenuTimer=function(){clearTimeout(Lr),Lr=0,Zr=!1},this.handleCanvasPanUsingWheelOrSpaceDrag=function(t){if(!(Wr.pointers.size<=1&&(t.button===M.Oh.WHEEL||t.button===M.Oh.MAIN&&Tr||(0,N.l$)(e.state)||e.state.viewModeEnabled))||(0,U.iB)(e.state.editingElement))return!1;Pr=!0,t.preventDefault();var n=!1,r=\/Linux\/.test(window.navigator.platform);(0,I.KJ)(e.canvas,M.oc.GRABBING);var o=t.clientX,i=t.clientY,a=(0,I.$9)((function(t){var a=o-t.clientX,l=i-t.clientY;if(o=t.clientX,i=t.clientY,r&&!n&&(Math.abs(a)>1||Math.abs(l)>1)){n=!0;var s=function e(t){document.body.removeEventListener(M.Ks.PASTE,e),t.stopPropagation()};document.body.addEventListener(M.Ks.PASTE,s),window.addEventListener(M.Ks.POINTER_UP,(function e(){setTimeout((function(){document.body.removeEventListener(M.Ks.PASTE,s),window.removeEventListener(M.Ks.POINTER_UP,e)}),100)}))}e.translateCanvas({scrollX:e.state.scrollX-a\/e.state.zoom.value,scrollY:e.state.scrollY-l\/e.state.zoom.value})})),l=(0,I.tH)(Hr=function(){Hr=null,Pr=!1,Tr||(e.state.viewModeEnabled?(0,I.KJ)(e.canvas,M.oc.GRAB):(0,I.Uk)(e.canvas,e.state)),e.setState({cursorButton:\"up\"}),e.savePointer(t.clientX,t.clientY,\"up\"),window.removeEventListener(M.Ks.POINTER_MOVE,a),window.removeEventListener(M.Ks.POINTER_UP,l),window.removeEventListener(M.Ks.BLUR,l),a.flush()});return window.addEventListener(M.Ks.BLUR,l),window.addEventListener(M.Ks.POINTER_MOVE,a,{passive:!0}),window.addEventListener(M.Ks.POINTER_UP,l),!0},this.clearSelectionIfNotUsingSelection=function(){\"selection\"!==e.state.activeTool.type&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})},this.handleSelectionOnPointerDown=function(t,n){if(\"selection\"===e.state.activeTool.type){var r=e.scene.getNonDeletedElements(),o=(0,ie.eD)(r,e.state);if(1!==o.length||e.state.editingLinearElement)o.length>1&&(n.resize.handleType=(0,U.n2)((0,U.KP)(o),n.origin.x,n.origin.y,e.state.zoom,t.pointerType));else{var i=(0,U.jt)(r,e.state,n.origin.x,n.origin.y,e.state.zoom,t.pointerType);null!=i&&(e.setState({resizingElement:i.element}),n.resize.handleType=i.transformHandleType)}if(n.resize.handleType)(0,I.KJ)(e.canvas,(0,U.Un)({transformHandleType:n.resize.handleType})),n.resize.isResizing=!0,n.resize.offset=(0,I.AK)((0,U.xx)(n.resize.handleType,o,n.origin.x,n.origin.y)),1===o.length&&(0,G.bt)(o[0])&&2===o[0].points.length&&(n.resize.arrowDirection=(0,U.T)(n.resize.handleType,o[0]));else{var a;if(e.state.selectedLinearElement){var l=e.state.editingLinearElement||e.state.selectedLinearElement,s=K._.handlePointerDown(t,e.state,e.history,n.origin,l);if(s.hitElement&&(n.hit.element=s.hitElement),s.linearElementEditor&&(e.setState({selectedLinearElement:s.linearElementEditor}),e.state.editingLinearElement&&e.setState({editingLinearElement:s.linearElementEditor})),s.didAddPoint)return!0}if(n.hit.element=null!==(a=n.hit.element)&&void 0!==a?a:e.getElementAtPosition(n.origin.x,n.origin.y),n.hit.element)if(e.getElementLinkAtPosition({x:n.origin.x,y:n.origin.y},n.hit.element))return!1;n.hit.allHitElements=e.getElementsAtPosition(n.origin.x,n.origin.y);var c=n.hit.element,u=n.hit.allHitElements.some((function(t){return e.isASelectedElement(t)}));if(null!==c&&u||t.shiftKey||n.hit.hasHitCommonBoundingBoxOfSelectedElements||e.clearSelection(c),e.state.editingLinearElement)e.setState({selectedElementIds:(0,p.Z)({},e.state.editingLinearElement.elementId,!0)});else if(null!=c){if(t[_.tW.CTRL_OR_CMD])return e.state.selectedElementIds[c.id]||(n.hit.wasAddedToSelection=!0),e.setState((function(t){return pr(pr({},(0,J.iE)(t,c)),{},{previousSelectedElementIds:e.state.selectedElementIds})})),!1;e.state.selectedElementIds[c.id]||(e.state.editingGroupId&&!(0,J.Nd)(c,e.state.editingGroupId)&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),u||n.hit.hasHitCommonBoundingBoxOfSelectedElements||(e.setState((function(t){return(0,J.bO)(pr(pr({},t),{},{selectedElementIds:pr(pr({},t.selectedElementIds),{},(0,p.Z)({},c.id,!0)),showHyperlinkPopup:!!c.link&&\"info\"}),e.scene.getNonDeletedElements())})),n.hit.wasAddedToSelection=!0))}e.setState({previousSelectedElementIds:e.state.selectedElementIds})}}return!1},this.handleTextOnPointerDown=function(t,n){if(!(0,U.iB)(e.state.editingElement)){var r=n.origin.x,o=n.origin.y,i=e.getElementAtPosition(r,o,{includeBoundTextElement:!0}),a=(0,De.OW)(e.scene.getNonDeletedElements(),e.state,r,o);(0,G.Xo)(i)&&(a=i,r=i.x+i.width\/2,o=i.y+i.height\/2),e.startTextEditing({sceneX:r,sceneY:o,insertAtParentCenter:!t.altKey,container:a}),(0,I.z8)(e.canvas),e.state.activeTool.locked||e.setState({activeTool:(0,I.Om)(e.state,{type:\"selection\"})})}},this.handleFreeDrawElementOnPointerDown=function(t,n,r){var a=(0,ne.wC)(r.origin.x,r.origin.y,null),l=(0,o.Z)(a,2),s=l[0],c=l[1],u=(0,Y.KE)({type:n,x:s,y:c,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,roundness:null,simulatePressure:.5===t.pressure,locked:!1});e.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},u.id,!1))}}));var d=u.simulatePressure?u.pressures:[].concat((0,i.Z)(u.pressures),[t.pressure]);(0,O.DR)(u,{points:[[0,0]],pressures:d});var f=(0,C.Y9)(r.origin,e.scene);e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[u])),e.setState({draggingElement:u,editingElement:u,startBoundElement:f,suggestedBindings:[]})},this.createImageElement=function(t){var n=t.sceneX,r=t.sceneY,i=(0,ne.wC)(n,r,e.state.gridSize),a=(0,o.Z)(i,2),l=a[0],s=a[1];return(0,U.vw)({type:\"image\",x:l,y:s,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,roundness:null,opacity:e.state.currentItemOpacity,locked:!1})},this.handleLinearElementOnPointerDown=function(t,n,r){if(e.state.multiElement){var a=e.state.multiElement;if(\"line\"===a.type&&(0,ne.g6)(a.points,e.state.zoom.value))return(0,O.DR)(a,{lastCommittedPoint:a.points[a.points.length-1]}),void e.actionManager.executeAction(k.pL);var l=a.x,s=a.y,c=a.lastCommittedPoint;if(a.points.length>1&&c&&(0,ne.LW)(r.origin.x-l,r.origin.y-s,c[0],c[1])<M.qx)return void e.actionManager.executeAction(k.pL);e.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},a.id,!0))}})),(0,O.DR)(a,{lastCommittedPoint:a.points[a.points.length-1]}),(0,I.KJ)(e.canvas,M.oc.POINTER)}else{var u=(0,ne.wC)(r.origin.x,r.origin.y,e.state.gridSize),d=(0,o.Z)(u,2),f=d[0],h=d[1],m=e.state,g=m.currentItemStartArrowhead,v=m.currentItemEndArrowhead,b=\"arrow\"===n?[g,v]:[null,null],y=(0,o.Z)(b,2),x=y[0],w=y[1],E=(0,U.y8)({type:n,x:f,y:h,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,roundness:\"round\"===e.state.currentItemRoundness?{type:M.a6.PROPORTIONAL_RADIUS}:null,startArrowhead:x,endArrowhead:w,locked:!1});e.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},E.id,!1))}})),(0,O.DR)(E,{points:[].concat((0,i.Z)(E.points),[[0,0]])});var S=(0,C.Y9)(r.origin,e.scene);e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[E])),e.setState({draggingElement:E,editingElement:E,startBoundElement:S,suggestedBindings:[]})}},this.createGenericElementOnPointerDown=function(t,n){var r=(0,ne.wC)(n.origin.x,n.origin.y,e.state.gridSize),a=(0,o.Z)(r,2),l=a[0],s=a[1],c=(0,U.Up)({type:t,x:l,y:s,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,roundness:\"round\"===e.state.currentItemRoundness?{type:(0,G.QI)(t)?M.a6.ADAPTIVE_RADIUS:M.a6.PROPORTIONAL_RADIUS}:null,locked:!1});\"selection\"===c.type?e.setState({selectionElement:c,draggingElement:c}):(e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[c])),e.setState({multiElement:null,draggingElement:c,editingElement:c}))},this.restoreReadyToEraseElements=function(t){var n=e.scene.getElementsIncludingDeleted().map((function(e){return t.elementIdsToErase[e.id]&&t.elementIdsToErase[e.id].erase?(0,O.BE)(e,{opacity:t.elementIdsToErase[e.id].opacity}):(0,G.Xh)(e)&&t.elementIdsToErase[e.containerId]&&t.elementIdsToErase[e.containerId].erase?(0,O.BE)(e,{opacity:t.elementIdsToErase[e.containerId].opacity}):e}));e.scene.replaceAllElements(n)},this.eraseElements=function(t){var n=e.scene.getElementsIncludingDeleted().map((function(e){return t.elementIdsToErase[e.id]&&t.elementIdsToErase[e.id].erase||(0,G.Xh)(e)&&t.elementIdsToErase[e.containerId]&&t.elementIdsToErase[e.containerId].erase?(0,O.BE)(e,{isDeleted:!0}):e}));e.history.resumeRecording(),e.scene.replaceAllElements(n)},this.initializeImage=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,l,s,c,u,d,f,h,g,v,b,y,x;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(l=n.imageFile,s=n.imageElement,c=n.showCursorImagePreview,u=void 0!==c&&c,(0,Ye.Wr)(l)){t.next=3;break}throw new Error((0,j.t)(\"errors.unsupportedFileType\"));case 3:if(d=l.type,(0,I.KJ)(e.canvas,\"wait\"),d!==M.LO.svg){t.next=23;break}return t.prev=6,t.t0=Ye.Pn,t.t1=qn.bp,t.next=11,l.text();case 11:return t.t2=t.sent,t.next=14,(0,t.t1)(t.t2);case 14:t.t3=t.sent,t.t4=l.name,l=(0,t.t0)(t.t3,t.t4),t.next=23;break;case 19:throw t.prev=19,t.t5=t.catch(6),console.warn(t.t5),new Error((0,j.t)(\"errors.svgImageInsertError\"));case 23:return t.next=25,(null===(r=(o=e.props).generateIdForFile)||void 0===r?void 0:r.call(o,l))||(0,Ye.tW)(l);case 25:if(f=t.sent){t.next=29;break}throw console.warn(\"Couldn't generate file id or the supplied `generateIdForFile` didn't resolve to one.\"),new Error((0,j.t)(\"errors.imageInsertError\"));case 29:if(null!=(h=e.files[f])&&h.dataURL){t.next=42;break}return t.prev=31,t.next=34,(0,Ye.Tu)(l,{maxWidthOrHeight:M.h6});case 34:l=t.sent,t.next=40;break;case 37:t.prev=37,t.t6=t.catch(31),console.error(\"error trying to resing image file on insertion\",t.t6);case 40:if(!(l.size>M.$n)){t.next=42;break}throw new Error((0,j.t)(\"errors.fileTooBig\",{maxSize:\"\".concat(Math.trunc(M.$n\/1024\/1024),\"MB\")}));case 42:if(u&&(v=null===(g=e.files[f])||void 0===g?void 0:g.dataURL,b=v&&(0,Ye.KG)(v),e.setImagePreviewCursor(b||l)),t.t7=null===(i=e.files[f])||void 0===i?void 0:i.dataURL,t.t7){t.next=48;break}return t.next=47,(0,Ye.Sf)(l);case 47:t.t7=t.sent;case 48:return y=t.t7,x=(0,O.DR)(s,{fileId:f},!1),t.abrupt(\"return\",new Promise(function(){var t=(0,a.Z)(m().mark((function t(n,r){var o,i;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,e.files=pr(pr({},e.files),{},(0,p.Z)({},f,{mimeType:d,id:f,dataURL:y,created:Date.now(),lastRetrieved:Date.now()})),i=e.imageCache.get(f)){t.next=7;break}return e.addNewImagesToImageCache(),t.next=7,e.updateImageCache([x]);case 7:if(!((null==i?void 0:i.image)instanceof Promise)){t.next=10;break}return t.next=10,i.image;case 10:e.state.pendingImageElementId!==x.id&&(null===(o=e.state.draggingElement)||void 0===o?void 0:o.id)!==x.id&&e.initializeImageDimensions(x,!0),n(x),t.next=18;break;case 14:t.prev=14,t.t0=t.catch(0),console.error(t.t0),r(new Error((0,j.t)(\"errors.imageInsertError\")));case 18:return t.prev=18,u||(0,I.z8)(e.canvas),t.finish(18);case 21:case\"end\":return t.stop()}}),t,null,[[0,14,18,21]])})));return function(e,n){return t.apply(this,arguments)}}()));case 51:case\"end\":return t.stop()}}),t,null,[[6,19],[31,37]])})));return function(e){return t.apply(this,arguments)}}(),this.insertImageElement=function(){var t=(0,a.Z)(m().mark((function t(n,r,o){return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[n])),t.prev=1,t.next=4,e.initializeImage({imageFile:r,imageElement:n,showCursorImagePreview:o});case 4:t.next=11;break;case 6:t.prev=6,t.t0=t.catch(1),(0,O.DR)(n,{isDeleted:!0}),e.actionManager.executeAction(k.pL),e.setState({errorMessage:t.t0.message||(0,j.t)(\"errors.imageInsertError\")});case 11:case\"end\":return t.stop()}}),t,null,[[1,6]])})));return function(e,n,r){return t.apply(this,arguments)}}(),this.setImagePreviewCursor=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=96,t.next=3,(0,Ye.Tu)(n,{maxWidthOrHeight:r});case 3:return o=t.sent,t.next=6,(0,Ye.Sf)(o);case 6:if(i=t.sent,n.type!==M.LO.svg){t.next=20;break}return t.next=10,(0,qn.PK)(i);case 10:a=t.sent,l=Math.min(a.height,r),(s=l*(a.width\/a.height))>r&&(l=(s=r)*(a.height\/a.width)),(c=document.createElement(\"canvas\")).height=l,c.width=s,c.getContext(\"2d\").drawImage(a,0,0,s,l),i=c.toDataURL(M.LO.svg);case 20:e.state.pendingImageElementId&&(0,I.KJ)(e.canvas,\"url(\".concat(i,\") 4 4, auto\"));case 21:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),this.onImageAction=(0,a.Z)(m().mark((function t(){var n,r,o,i,a,l,s,c,u,d=arguments;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=d.length>0&&void 0!==d[0]?d[0]:{insertOnCanvasDirectly:!1},r=n.insertOnCanvasDirectly,t.prev=1,o=e.state.width\/2+e.state.offsetLeft,i=e.state.height\/2+e.state.offsetTop,a=(0,I.dE)({clientX:o,clientY:i},e.state),l=a.x,s=a.y,t.next=7,(0,Je.I$)({description:\"Image\",extensions:[\"jpg\",\"png\",\"svg\",\"gif\"]});case 7:c=t.sent,u=e.createImageElement({sceneX:l,sceneY:s}),r?(e.insertImageElement(u,c),e.initializeImageDimensions(u),e.setState({selectedElementIds:(0,p.Z)({},u.id,!0)},(function(){e.actionManager.executeAction(k.pL)}))):e.setState({pendingImageElementId:u.id},(function(){e.insertImageElement(u,c,!0)})),t.next=16;break;case 12:t.prev=12,t.t0=t.catch(1),\"AbortError\"!==t.t0.name?console.error(t.t0):console.warn(t.t0),e.setState({pendingImageElementId:null,editingElement:null,activeTool:(0,I.Om)(e.state,{type:\"selection\"})},(function(){e.actionManager.executeAction(k.pL)}));case 16:case\"end\":return t.stop()}}),t,null,[[1,12]])}))),this.initializeImageDimensions=function(t){var n,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=(0,G.wi)(t)&&(null===(n=e.imageCache.get(t.fileId))||void 0===n?void 0:n.image);if(!o||o instanceof Promise){if(t.width<M.f\/e.state.zoom.value&&t.height<M.f\/e.state.zoom.value){var i=100\/e.state.zoom.value;(0,O.DR)(t,{x:t.x-i\/2,y:t.y-i\/2,width:i,height:i})}}else if(r||t.width<M.f\/e.state.zoom.value&&t.height<M.f\/e.state.zoom.value){var a=Math.max(e.state.height-120,160),l=Math.min(a,Math.floor(.5*e.state.height)\/e.state.zoom.value),s=Math.min(o.naturalHeight,l),c=s*(o.naturalWidth\/o.naturalHeight),u=t.x+t.width\/2-c\/2,d=t.y+t.height\/2-s\/2;(0,O.DR)(t,{x:u,y:d,width:c,height:s})}},this.updateImageCache=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c,u=arguments;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=u.length>1&&void 0!==u[1]?u[1]:e.files,t.next=3,(0,qn.Xx)({imageCache:e.imageCache,fileIds:n.map((function(e){return e.fileId})),files:r});case 3:if(o=t.sent,i=o.updatedFiles,a=o.erroredFiles,i.size||a.size){l=cr(n);try{for(l.s();!(s=l.n()).done;)c=s.value,i.has(c.fileId)&&(0,oe.bI)(c)}catch(e){l.e(e)}finally{l.f()}}return a.size&&e.scene.replaceAllElements(e.scene.getElementsIncludingDeleted().map((function(e){return(0,G.wi)(e)&&a.has(e.fileId)?(0,O.BE)(e,{status:\"error\"}):e}))),t.abrupt(\"return\",{updatedFiles:i,erroredFiles:a});case 9:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),this.addNewImagesToImageCache=(0,a.Z)(m().mark((function t(){var n,r,o,i,a=arguments;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=a.length>0&&void 0!==a[0]?a[0]:(0,qn.oA)(e.scene.getNonDeletedElements()),r=a.length>1&&void 0!==a[1]?a[1]:e.files,!(o=n.filter((function(t){return!t.isDeleted&&!e.imageCache.has(t.fileId)}))).length){t.next=9;break}return t.next=6,e.updateImageCache(o,r);case 6:i=t.sent,i.updatedFiles.size&&e.scene.informMutation();case 9:case\"end\":return t.stop()}}),t)}))),this.scheduleImageRefresh=$n()((function(){e.addNewImagesToImageCache()}),M.LL),this.updateBindingEnabledOnPointerMove=function(t){var n=(0,C.cz)(t);e.state.isBindingEnabled!==n&&e.setState({isBindingEnabled:n})},this.maybeSuggestBindingAtCursor=function(t){var n=(0,C.Y9)(t,e.scene);e.setState({suggestedBindings:null!=n?[n]:[]})},this.maybeSuggestBindingsForLinearElementAtCoords=function(t,n,r){if(n.length){var o=n.reduce((function(n,o){var i=(0,C.Y9)(o,e.scene);return null==i||(0,C.DK)(t,null==r?void 0:r.id,i)||n.push(i),n}),[]);e.setState({suggestedBindings:o})}},this.handleCanvasRef=function(t){var n,r,o;null!==t?(e.canvas=t,e.rc=y.Z.canvas(e.canvas),e.canvas.addEventListener(M.Ks.WHEEL,e.handleWheel,{passive:!1}),e.canvas.addEventListener(M.Ks.TOUCH_START,e.onTapStart),e.canvas.addEventListener(M.Ks.TOUCH_END,e.onTapEnd)):(null===(n=e.canvas)||void 0===n||n.removeEventListener(M.Ks.WHEEL,e.handleWheel),null===(r=e.canvas)||void 0===r||r.removeEventListener(M.Ks.TOUCH_START,e.onTapStart),null===(o=e.canvas)||void 0===o||o.removeEventListener(M.Ks.TOUCH_END,e.onTapEnd))},this.handleAppOnDrop=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c,u,d,f;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,Ye.bv)(n);case 2:if(r=t.sent,o=r.file,i=r.fileHandle,t.prev=5,!(0,Ye.Wr)(o)){t.next=26;break}if((null==o?void 0:o.type)!==M.LO.png&&(null==o?void 0:o.type)!==M.LO.svg){t.next=20;break}return t.prev=8,t.next=11,(0,H.cT)(o,e.state,e.scene.getElementsIncludingDeleted(),i);case 11:return a=t.sent,e.syncActionResult(pr(pr({},a),{},{appState:pr(pr({},a.appState||e.state),{},{isLoading:!1}),replaceFiles:!0,commitToHistory:!0})),t.abrupt(\"return\");case 16:if(t.prev=16,t.t0=t.catch(8),\"EncodingError\"===t.t0.name){t.next=20;break}throw t.t0;case 20:return l=(0,I.dE)(n,e.state),s=l.x,c=l.y,u=e.createImageElement({sceneX:s,sceneY:c}),e.insertImageElement(u,o),e.initializeImageDimensions(u),e.setState({selectedElementIds:(0,p.Z)({},u.id,!0)}),t.abrupt(\"return\");case 26:t.next=31;break;case 28:return t.prev=28,t.t1=t.catch(5),t.abrupt(\"return\",e.setState({isLoading:!1,errorMessage:t.t1.message}));case 31:if(!(d=n.dataTransfer.getData(M.LO.excalidrawlib))||\"string\"!=typeof d){t.next=35;break}try{f=(0,Ye.wf)(d),e.addElementsFromPasteOrLibrary({elements:(0,W.WV)(f),position:n,files:null})}catch(t){e.setState({errorMessage:t.message})}return t.abrupt(\"return\");case 35:if(!o){t.next=38;break}return t.next=38,e.loadFileToCanvas(o,i);case 38:case\"end\":return t.stop()}}),t,null,[[5,28],[8,16]])})));return function(e){return t.apply(this,arguments)}}(),this.loadFileToCanvas=function(){var t=(0,a.Z)(m().mark((function t(n,r){var o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,Ye.gY)(n);case 2:return n=t.sent,t.prev=3,t.next=6,(0,Ye.ZY)(n,e.state,e.scene.getElementsIncludingDeleted(),r);case 6:if((o=t.sent).type!==M.LO.excalidraw){t.next=12;break}e.setState({isLoading:!0}),e.syncActionResult(pr(pr({},o.data),{},{appState:pr(pr({},o.data.appState||e.state),{},{isLoading:!1}),replaceFiles:!0,commitToHistory:!0})),t.next=15;break;case 12:if(o.type!==M.LO.excalidrawlib){t.next=15;break}return t.next=15,e.library.updateLibrary({libraryItems:n,merge:!0,openLibraryMenu:!0}).catch((function(t){console.error(t),e.setState({errorMessage:(0,j.t)(\"errors.importLibraryError\")})}));case 15:t.next=20;break;case 17:t.prev=17,t.t0=t.catch(3),e.setState({isLoading:!1,errorMessage:t.t0.message});case 20:case\"end\":return t.stop()}}),t,null,[[3,17]])})));return function(e,n){return t.apply(this,arguments)}}(),this.handleCanvasContextMenu=function(t){if(t.preventDefault(),\"touch\"!==t.nativeEvent.pointerType&&(\"pen\"!==t.nativeEvent.pointerType||t.button===M.Oh.SECONDARY)||\"selection\"===e.state.activeTool.type){var n=(0,I.dE)(t,e.state),r=n.x,o=n.y,i=e.getElementAtPosition(r,o,{preferSelected:!0,includeLockedElements:!0}),a=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state),l=e.isHittingCommonBoundingBoxOfSelectedElements({x:r,y:o},a),s=i||l?\"element\":\"canvas\",c=e.excalidrawContainerRef.current.getBoundingClientRect(),u=c.top,d=c.left,f=t.clientX-d,h=t.clientY-u;(0,L.L)(\"contextMenu\",\"openContextMenu\",s),e.setState(pr(pr({},i&&!e.state.selectedElementIds[i.id]?(0,J.bO)(pr(pr({},e.state),{},{selectedElementIds:(0,p.Z)({},i.id,!0),selectedLinearElement:(0,G.bt)(i)?new K._(i,e.scene):null}),e.scene.getNonDeletedElements()):e.state),{},{showHyperlinkPopup:!1}),(function(){e.setState({contextMenu:{top:h,left:f,items:e.getContextMenuItems(s)}})}))}},this.maybeDragNewGenericElement=function(t,n){var r=e.state.draggingElement,i=t.lastCoords;if(r)if(\"selection\"===r.type&&\"eraser\"!==e.state.activeTool.type)(0,U.EJ)(r,e.state.activeTool.type,t.origin.x,t.origin.y,i.x,i.y,(0,I.TE)(t.origin.x,i.x),(0,I.TE)(t.origin.y,i.y),(0,_.E0)(n),(0,_.OA)(n));else{var a,l=(0,ne.wC)(i.x,i.y,e.state.gridSize),s=(0,o.Z)(l,2),c=s[0],u=s[1],d=(0,G.wi)(r)&&(null===(a=e.imageCache.get(r.fileId))||void 0===a?void 0:a.image),f=!d||d instanceof Promise?null:d.width\/d.height;(0,U.EJ)(r,e.state.activeTool.type,t.originInGrid.x,t.originInGrid.y,c,u,(0,I.TE)(t.originInGrid.x,c),(0,I.TE)(t.originInGrid.y,u),(0,G.pC)(r)?!(0,_.E0)(n):(0,_.E0)(n),(0,_.OA)(n),f),e.maybeSuggestBindingForAll([r])}},this.maybeHandleResize=function(t,n){var r=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state),i=t.resize.handleType;e.setState({isResizing:i&&\"rotation\"!==i,isRotating:\"rotation\"===i});var a=t.lastCoords,l=(0,ne.wC)(a.x-t.resize.offset.x,a.y-t.resize.offset.y,e.state.gridSize),s=(0,o.Z)(l,2),c=s[0],u=s[1];return!!(0,U.vY)(t,i,r,t.resize.arrowDirection,(0,_.Ge)(n),(0,_.OA)(n),1===r.length&&(0,G.pC)(r[0])?!(0,_.E0)(n):(0,_.E0)(n),c,u,t.resize.center.x,t.resize.center.y)&&(e.maybeSuggestBindingForAll(r),!0)},this.getContextMenuItems=function(t){var n=[];return n.push(k.jK,k.FA),\"canvas\"===t?e.state.viewModeEnabled?[].concat(n,[k.Pb,k.JN,Xn,k.u0]):[ir.yQ,je,k.jK,k.FA,k.zp,je,k.Yy,je,k.Pb,k.JN,Xn,k.u0]:(n.push(k.zp),e.state.viewModeEnabled?[k.uN].concat(n):[k.ZM,k.uN,ir.yQ,je].concat(n,[je,k.pw,k.W3,je,k.EQ,k.y7,k.vD,lr.JQ,k.s,je,k.FL,je,k.V,k.yA,k.zi,k.BZ,je,k.jl,k.kt,je,k.Qs,k.nz,k.xF,k.iL,je,k.X9]))},this.handleWheel=(0,I.tH)((function(t){if(t.preventDefault(),!Pr){var n=t.deltaX,r=t.deltaY;if(t.metaKey||t.ctrlKey){var o=Math.sign(r),i=100*M.V4,a=Math.abs(r),l=r;a>i&&(l=i*o);var s=e.state.zoom.value-l\/100;return s+=Math.log10(Math.max(1,e.state.zoom.value))*-o*Math.min(1,a\/20),e.translateCanvas((function(e){return pr(pr({},(0,le.E)({viewportX:Ir,viewportY:Mr,nextZoom:(0,ie.j)(s)},e)),{},{shouldCacheIgnoreZoom:!0})})),void e.resetShouldCacheIgnoreZoomDebounced()}t.shiftKey?e.translateCanvas((function(e){var t=e.zoom;return{scrollX:e.scrollX-(r||n)\/t.value}})):e.translateCanvas((function(e){var t=e.zoom,o=e.scrollX,i=e.scrollY;return{scrollX:o-n\/t.value,scrollY:i-r\/t.value}}))}})),this.savePointer=function(t,n,r){var o,i;if(t&&n){var a=(0,I.dE)({clientX:t,clientY:n},e.state);isNaN(a.x)||isNaN(a.y),null===(o=(i=e.props).onPointerUpdate)||void 0===o||o.call(i,{pointer:a,button:r,pointersMap:Wr.pointers})}},this.resetShouldCacheIgnoreZoomDebounced=(0,I.Ds)((function(){e.unmounted||e.setState({shouldCacheIgnoreZoom:!1})}),300),this.updateDOMRect=function(t){var n;if(null!==(n=e.excalidrawContainerRef)&&void 0!==n&&n.current){var r=e.excalidrawContainerRef.current.getBoundingClientRect(),o=r.width,i=r.height,a=r.left,l=r.top,s=e.state,c=s.width,u=s.height,d=s.offsetTop,f=s.offsetLeft;if(o===c&&i===u&&a===f&&l===d)return void(t&&t());e.setState({width:o,height:i,offsetLeft:a,offsetTop:l},(function(){t&&t()}))}},this.refresh=function(){e.setState(pr({},e.getCanvasOffsets()))}};\"production\"!==M.Vi.TEST&&\"production\"!==M.Vi.DEVELOPMENT||(window.h=window.h||{},Object.defineProperties(window.h,{elements:{configurable:!0,get:function(){var e;return null===(e=this.app)||void 0===e?void 0:e.scene.getElementsIncludingDeleted()},set:function(e){var t;return null===(t=this.app)||void 0===t?void 0:t.scene.replaceAllElements(e)}}}));var Kr=Fr},3807:function(e,t,n){\"use strict\";n.d(t,{o:function(){return x}});var r=n(45),o=n(3646),i=n(487),a=n.n(i),l=n(631),s=n.n(l),c=n(2052),u=n.n(c),d=n(4010),f=n.n(d),p=n(1469),h=n.n(p),m=n(9329),g=n.n(m),v=n(6029),b={};b.styleTagTransform=g(),b.setAttributes=f(),b.insert=u().bind(null,\"head\"),b.domAPI=s(),b.insertStyleElement=h();a()(v.Z,b),v.Z&&v.Z.locals&&v.Z.locals;var y=n(4512),x=function(e){var t=e.children,n=e.checked,i=e.onChange,a=e.className;return(0,y.jsxs)(\"div\",{className:(0,r.Z)(\"Checkbox\",a,{\"is-checked\":n}),onClick:function(e){i(!n,e),e.currentTarget.querySelector(\".Checkbox-box\").focus()},children:[(0,y.jsx)(\"button\",{className:\"Checkbox-box\",role:\"checkbox\",\"aria-checked\":n,children:o.eQ}),(0,y.jsx)(\"div\",{className:\"Checkbox-label\",children:t})]})}},4499:function(e,t,n){\"use strict\";n.d(t,{z:function(){return T}});var r=n(2577),o=n(9787),i=n.n(o),a=n(2891),l=n(6340),s=n(487),c=n.n(s),u=n(631),d=n.n(u),f=n(2052),p=n.n(f),h=n(4010),m=n.n(h),g=n(1469),v=n.n(g),b=n(9329),y=n.n(b),x=n(2345),w={};w.styleTagTransform=y(),w.setAttributes=m(),w.insert=p().bind(null,\"head\"),w.domAPI=d(),w.insertStyleElement=v();c()(x.Z,w),x.Z&&x.Z.locals&&x.Z.locals;var k=n(6066),E=n(8211),S=n(56),j=n(4512),_=function(e,t){return!S.Z[t].includes(e)},O=function(e){var t=(new Option).style;return t.color=e,!!t.color},C=[[\"1\",\"2\",\"3\",\"4\",\"5\"],[\"q\",\"w\",\"e\",\"r\",\"t\"],[\"a\",\"s\",\"d\",\"f\",\"g\"],[\"z\",\"x\",\"c\",\"v\",\"b\"]].flat(),I=function(e){var t=e.colors,n=e.color,o=e.onChange,a=e.onClose,s=e.label,c=e.showInput,u=void 0===c||c,d=e.type,f=e.elements,p=i().useRef(),h=i().useRef(),m=i().useRef(),g=i().useRef(),v=i().useState((function(){return\"canvasBackground\"===d?[]:function(e,t){for(var n=[],r=e.filter((function(e){return!e.isDeleted})).sort((function(e,t){return t.updated-e.updated})),o=0,i={elementBackground:\"backgroundColor\",elementStroke:\"strokeColor\"}[t];o<r.length&&n.length<5;){var a=r[o];n.length<5&&_(a[i],t)&&!n.includes(a[i])&&n.push(a[i]),o++}return n}(f,d)})),b=(0,r.Z)(v,1)[0];i().useEffect((function(){h.current?h.current.focus():g.current?g.current.focus():m.current&&m.current.focus()}),[]);var y=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.map((function(e,r){var i=e.replace(\"#\",\"\"),a=t?C[r+15]:C[r],s=t?i:(0,E.t)(\"colors.\".concat(i));return(0,j.jsxs)(\"button\",{className:\"color-picker-swatch\",onClick:function(t){t.currentTarget.focus(),o(e)},title:\"\".concat(s).concat((0,l.Qm)(e)?\"\":\" (\".concat(e,\")\"),\" \u2014 \").concat(a.toUpperCase()),\"aria-label\":s,\"aria-keyshortcuts\":C[r],style:{color:e},ref:function(o){!t&&o&&0===r&&(p.current=o),o&&e===n&&(h.current=o)},onFocus:function(){o(e)},children:[(0,l.Qm)(e)?(0,j.jsx)(\"div\",{className:\"color-picker-transparent\"}):void 0,(0,j.jsx)(\"span\",{className:\"color-picker-keybinding\",children:a})]},e)}))};return(0,j.jsxs)(\"div\",{className:\"color-picker color-picker-type-\".concat(d),role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":(0,E.t)(\"labels.colorPicker\"),onKeyDown:function(e){var t=!1;if((0,k.Wl)(e.key)){var n,r,o;t=!0;var i,s=document.activeElement,c=(0,E.G3)().rtl,d=!1,f=Array.prototype.indexOf.call(null===(n=m.current.querySelector(\".color-picker-content--default\"))||void 0===n?void 0:n.children,s);if(-1===f)-1!==(f=Array.prototype.indexOf.call(null===(i=m.current.querySelector(\".color-picker-content--canvas-colors\"))||void 0===i?void 0:i.children,s))&&(d=!0);var p=d?null===(r=m.current)||void 0===r?void 0:r.querySelector(\".color-picker-content--canvas-colors\"):null===(o=m.current)||void 0===o?void 0:o.querySelector(\".color-picker-content--default\");if(p&&-1!==f){var h,g=p.children.length-(u?1:0),v=e.key===(c?k.tW.ARROW_LEFT:k.tW.ARROW_RIGHT)?(f+1)%g:e.key===(c?k.tW.ARROW_RIGHT:k.tW.ARROW_LEFT)?(g+f-1)%g:d||e.key!==k.tW.ARROW_DOWN?d||e.key!==k.tW.ARROW_UP?f:(g+f-5)%g:(f+5)%g;null===(h=p.children[v])||void 0===h||h.focus()}e.preventDefault()}else if(!C.includes(e.key.toLowerCase())||e[k.tW.CTRL_OR_CMD]||e.altKey||(0,l.s)(e.target))e.key!==k.tW.ESCAPE&&e.key!==k.tW.ENTER||(t=!0,e.preventDefault(),a());else{var b,y,x;t=!0;var w=C.indexOf(e.key.toLowerCase()),S=w>=15,j=S?null==m||null===(b=m.current)||void 0===b?void 0:b.querySelector(\".color-picker-content--canvas-colors\"):null==m||null===(y=m.current)||void 0===y?void 0:y.querySelector(\".color-picker-content--default\"),_=S?w-15:w;null==j||null===(x=j.children[_])||void 0===x||x.focus(),e.preventDefault()}t&&(e.nativeEvent.stopImmediatePropagation(),e.stopPropagation())},children:[(0,j.jsx)(\"div\",{className:\"color-picker-triangle color-picker-triangle-shadow\"}),(0,j.jsx)(\"div\",{className:\"color-picker-triangle\"}),(0,j.jsxs)(\"div\",{className:\"color-picker-content\",ref:function(e){e&&(m.current=e)},tabIndex:-1,children:[(0,j.jsx)(\"div\",{className:\"color-picker-content--default\",children:y(t)}),!!b.length&&(0,j.jsxs)(\"div\",{className:\"color-picker-content--canvas\",children:[(0,j.jsx)(\"span\",{className:\"color-picker-content--canvas-title\",children:(0,E.t)(\"labels.canvasColors\")}),(0,j.jsx)(\"div\",{className:\"color-picker-content--canvas-colors\",children:y(b,!0)})]}),u&&(0,j.jsx)(M,{color:n,label:s,onChange:function(e){o(e)},ref:g})]})]})},M=i().forwardRef((function(e,t){var n=e.color,o=e.onChange,a=e.label,s=i().useState(n),c=(0,r.Z)(s,2),u=c[0],d=c[1],f=i().useRef(null);i().useEffect((function(){d(n)}),[n]),i().useImperativeHandle(t,(function(){return f.current}));var p=i().useCallback((function(e){var t=e.toLowerCase(),n=function(e){return(0,l.Qm)(e)?e:O(\"#\".concat(e))?\"#\".concat(e):O(e)?e:null}(t);n&&o(n),d(t)}),[o]);return(0,j.jsxs)(\"label\",{className:\"color-input-container\",children:[(0,j.jsx)(\"div\",{className:\"color-picker-hash\",children:\"#\"}),(0,j.jsx)(\"input\",{spellCheck:!1,className:\"color-picker-input\",\"aria-label\":a,onChange:function(e){return p(e.target.value)},value:(u||\"\").replace(\/^#\/,\"\"),onBlur:function(){return d(n)},ref:f})]})}));M.displayName=\"ColorInput\";var T=function(e){var t,n=e.type,r=e.color,o=e.onChange,l=e.label,s=e.isActive,c=e.setActive,u=e.elements,d=(e.appState,i().useRef(null)),f=null===(t=d.current)||void 0===t?void 0:t.getBoundingClientRect();return(0,j.jsxs)(\"div\",{children:[(0,j.jsxs)(\"div\",{className:\"color-picker-control-container\",children:[(0,j.jsx)(\"div\",{className:\"color-picker-label-swatch-container\",children:(0,j.jsx)(\"button\",{className:\"color-picker-label-swatch\",\"aria-label\":l,style:r?{\"--swatch-color\":r}:void 0,onClick:function(){return c(!s)},ref:d})}),(0,j.jsx)(M,{color:r,label:l,onChange:function(e){o(e)}})]}),(0,j.jsx)(i().Suspense,{fallback:\"\",children:s?(0,j.jsx)(\"div\",{className:\"color-picker-popover-container\",style:{position:\"fixed\",top:null==f?void 0:f.top,left:null==f?void 0:f.right,zIndex:1},children:(0,j.jsx)(a.J,{onCloseRequest:function(e){return e.target!==d.current&&c(!1)},children:(0,j.jsx)(I,{colors:S.Z[n],color:r||null,onChange:function(e){o(e)},onClose:function(){var e;c(!1),null===(e=d.current)||void 0===e||e.focus()},label:l,showInput:!1,type:n,elements:u})})}):null})]})}},7046:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return M}});var r=n(7169),o=n(2726),i=n(8211),a=n(8396),l=n(487),s=n.n(l),c=n(631),u=n.n(c),d=n(2052),f=n.n(d),p=n(4010),h=n.n(p),m=n(1469),g=n.n(m),v=n(9329),b=n.n(v),y=n(9393),x={};x.styleTagTransform=b(),x.setAttributes=h(),x.insert=f().bind(null,\"head\"),x.domAPI=u(),x.insertStyleElement=g();s()(y.Z,x),y.Z&&y.Z.locals&&y.Z.locals;var w=n(6428),k=n(4739),E=n(9206),S=n(2134),j=n(9487),_=n(4512),O=[\"onConfirm\",\"onCancel\",\"children\",\"confirmText\",\"cancelText\",\"className\"];function C(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var M=function(e){var t=e.onConfirm,n=e.onCancel,r=e.children,l=e.confirmText,s=void 0===l?(0,i.t)(\"buttons.confirm\"):l,c=e.cancelText,u=void 0===c?(0,i.t)(\"buttons.cancel\"):c,d=e.className,f=void 0===d?\"\":d,p=(0,o.Z)(e,O),h=(0,S.n9)(),m=(0,k.b9)(E.u,j.yE);return(0,_.jsxs)(a.V,I(I({onCloseRequest:n,small:!0},p),{},{className:\"confirm-dialog \".concat(f),children:[r,(0,_.jsxs)(\"div\",{className:\"confirm-dialog-buttons\",children:[(0,_.jsx)(w.Z,{label:u,onClick:function(){h({openMenu:null}),m(!1),n()}}),(0,_.jsx)(w.Z,{label:s,onClick:function(){h({openMenu:null}),m(!1),t()},actionType:\"danger\"})]})]}))}},8396:function(e,t,n){\"use strict\";n.d(t,{V:function(){return Z}});var r=n(2577),o=n(45),i=n(9787),a=n(8211),l=n(2134),s=n(6066),c=n(487),u=n.n(c),d=n(631),f=n.n(d),p=n(2052),h=n.n(p),m=n(4010),g=n.n(m),v=n(1469),b=n.n(v),y=n(9329),x=n.n(y),w=n(9482),k={};k.styleTagTransform=x(),k.setAttributes=g(),k.insert=h().bind(null,\"head\"),k.domAPI=f(),k.insertStyleElement=b();u()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals;var E=n(3646),S=n(1881),j=n(6843),_={};_.styleTagTransform=x(),_.setAttributes=g(),_.insert=h().bind(null,\"head\"),_.domAPI=f(),_.insertStyleElement=b();u()(j.Z,_),j.Z&&j.Z.locals&&j.Z.locals;var O=n(5156),C=n(2335),I=n(4512),M=function(e){var t=e.theme,n=void 0===t?C.C6.LIGHT:t,r=e.closeOnClickOutside,i=void 0===r||r,a=T(n);if(!a)return null;return(0,O.createPortal)((0,I.jsxs)(\"div\",{className:(0,o.Z)(\"Modal\",e.className),role:\"dialog\",\"aria-modal\":\"true\",onKeyDown:function(t){t.key===s.tW.ESCAPE&&(t.nativeEvent.stopImmediatePropagation(),t.stopPropagation(),e.onCloseRequest())},\"aria-labelledby\":e.labelledBy,\"data-prevent-outside-click\":!0,children:[(0,I.jsx)(\"div\",{className:\"Modal__background\",onClick:i?e.onCloseRequest:void 0}),(0,I.jsx)(\"div\",{className:\"Modal__content\",style:{\"--max-width\":\"\".concat(e.maxWidth,\"px\")},tabIndex:0,children:e.children})]}),a)},T=function(e){var t=(0,i.useState)(null),n=(0,r.Z)(t,2),o=n[0],a=n[1],s=(0,l.Fy)(),c=(0,i.useRef)(s.isMobile);c.current=s.isMobile;var u=(0,l.J0)().container;return(0,i.useLayoutEffect)((function(){o&&o.classList.toggle(\"excalidraw--mobile\",s.isMobile)}),[o,s.isMobile]),(0,i.useLayoutEffect)((function(){var t=!(null==u||!u.classList.contains(\"theme--dark\"))||\"dark\"===e,n=document.createElement(\"div\");return n.classList.add(\"excalidraw\",\"excalidraw-modal-container\"),n.classList.toggle(\"excalidraw--mobile\",c.current),t&&(n.classList.add(\"theme--dark\"),n.classList.add(\"theme--dark-background-none\")),document.body.appendChild(n),a(n),function(){document.body.removeChild(n)}}),[u,e]),o},P=n(6340),D=n(4739),A=n(9206),L=n(9487),Z=function(e){var t=function(){var e=(0,i.useState)(null),t=(0,r.Z)(e,2),n=t[0],o=t[1];return[n,(0,i.useCallback)((function(e){return o(e)}),[])]}(),n=(0,r.Z)(t,2),c=n[0],u=n[1],d=(0,i.useState)(document.activeElement),f=(0,r.Z)(d,1)[0],p=(0,l.J0)().id;(0,i.useEffect)((function(){if(c){var t=(0,P.xp)(c);t.length>0&&!1!==e.autofocus&&(t[1]||t[0]).focus();var n=function(e){if(e.key===s.tW.TAB){var t=(0,P.xp)(c),n=document.activeElement,r=t.findIndex((function(e){return e===n}));0===r&&e.shiftKey?(t[t.length-1].focus(),e.preventDefault()):r!==t.length-1||e.shiftKey||(t[0].focus(),e.preventDefault())}};return c.addEventListener(\"keydown\",n),function(){return c.removeEventListener(\"keydown\",n)}}}),[c,e.autofocus]);var h=(0,l.n9)(),m=(0,D.b9)(A.u,L.yE),g=function(){h({openMenu:null}),m(!1),f.focus(),e.onCloseRequest()};return(0,I.jsx)(M,{className:(0,o.Z)(\"Dialog\",e.className),labelledBy:\"dialog-title\",maxWidth:e.small?550:800,onCloseRequest:g,theme:e.theme,closeOnClickOutside:e.closeOnClickOutside,children:(0,I.jsxs)(S.W,{ref:u,children:[(0,I.jsxs)(\"h2\",{id:\"\".concat(p,\"-dialog-title\"),className:\"Dialog__title\",children:[(0,I.jsx)(\"span\",{className:\"Dialog__titleContent\",children:e.title}),(0,I.jsx)(\"button\",{className:\"Modal__close\",onClick:g,title:(0,a.t)(\"buttons.close\"),\"aria-label\":(0,a.t)(\"buttons.close\"),children:(0,l.Fy)().isMobile?E.op:E.Tw})]}),(0,I.jsx)(\"div\",{className:\"Dialog__content\",children:e.children})]})})}},6428:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return j}});var r=n(7169),o=n(2726),i=n(45),a=n(487),l=n.n(a),s=n(631),c=n.n(s),u=n(2052),d=n.n(u),f=n(4010),p=n.n(f),h=n(1469),m=n.n(h),g=n(9329),v=n.n(g),b=n(6148),y={};y.styleTagTransform=v(),y.setAttributes=p(),y.insert=d().bind(null,\"head\"),y.domAPI=c(),y.insertStyleElement=m();l()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;var x=n(5644),w=n(4512),k=[\"label\",\"onClick\",\"className\",\"children\",\"actionType\",\"type\",\"isLoading\"];function E(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var j=function(e){var t=e.label,n=e.onClick,r=e.className,a=e.children,l=e.actionType,s=e.type,c=void 0===s?\"button\":s,u=e.isLoading,d=(0,o.Z)(e,k),f=l?\"Dialog__action-button--\".concat(l):\"\";return(0,w.jsxs)(\"button\",S(S({className:(0,i.Z)(\"Dialog__action-button\",f,r),type:c,\"aria-label\":t,onClick:n},d),{},{children:[a&&(0,w.jsx)(\"div\",{style:u?{visibility:\"hidden\"}:{},children:a}),(0,w.jsx)(\"div\",{style:u?{visibility:\"hidden\"}:{},children:t}),u&&(0,w.jsx)(\"div\",{style:{position:\"absolute\",inset:0},children:(0,w.jsx)(x.Z,{})})]}))}},1881:function(e,t,n){\"use strict\";n.d(t,{W:function(){return S}});var r=n(7169),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(7369),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(9787),y=n.n(b),x=n(45),w=n(4512);function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var S=y().forwardRef((function(e,t){var n=e.children,r=e.padding,o=e.className,i=e.style;return(0,w.jsx)(\"div\",{className:(0,x.Z)(\"Island\",o),style:E({\"--padding\":r},i),ref:t,children:n})}))},9206:function(e,t,n){\"use strict\";n.d(t,{W:function(){return J},u:function(){return X}});var r=n(8950),o=n(2577),i=n(2975),a=n.n(i),l=n(9787),s=n(5523),c=n(7053),u=n(8211),d=n(3646),f=n(1319),p=n(1393),h=n(6340),m=n(4739),g=n(9487),v=n(7046),b=n(7169),y=n(5284),x=n(8396),w=n(3024),k=n(2335),E=n(434),S=n(6428),j=n(487),_=n.n(j),O=n(631),C=n.n(O),I=n(2052),M=n.n(I),T=n(4010),P=n.n(T),D=n(1469),A=n.n(D),L=n(9329),Z=n.n(L),z=n(7589),R={};R.styleTagTransform=Z(),R.setAttributes=P(),R.insert=M().bind(null,\"head\"),R.domAPI=C(),R.insertStyleElement=A();_()(z.Z,R),z.Z&&z.Z.locals&&z.Z.locals;var N=n(4512);function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function H(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){(0,b.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function W(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return F(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var U=\"publish-library-data\",K=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r,i,l,s,c,u,d,f,p,m,g,v,b,x,S,j;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=6,r=128,i=Math.round(r\/16),l=Math.max(Math.round(r\/64),2),s=(0,h.yo)(t,n),(c=document.createElement(\"canvas\")).width=s[0].length*r+(s[0].length+1)*(2*i)-2*i,c.height=s.length*r+(s.length+1)*(2*i)-2*i,(u=c.getContext(\"2d\")).fillStyle=y.white,u.fillRect(0,0,c.width,c.height),d=W(t.entries()),e.prev=12,d.s();case 14:if((f=d.n()).done){e.next=28;break}return p=(0,o.Z)(f.value,2),m=p[0],g=p[1],e.next=18,(0,w.NL)({elements:g.elements,files:null,maxWidthOrHeight:r});case 18:v=e.sent,b=v.width,x=v.height,S=Math.floor(m\/n)*(r+2*i),j=m%n*(r+2*i),u.drawImage(v,j+(r-b)\/2+i,S+(r-x)\/2+i),u.lineWidth=l,u.strokeStyle=y.gray[4],u.strokeRect(j+i\/2,S+i\/2,r+i,r+i);case 26:e.next=14;break;case 28:e.next=33;break;case 30:e.prev=30,e.t0=e.catch(12),d.e(e.t0);case 33:return e.prev=33,d.f(),e.finish(33);case 36:return e.t1=E.Tu,e.t2=File,e.next=40,(0,E._c)(c);case 40:return e.t3=e.sent,e.t4=[e.t3],e.t5={type:k.LO.png},e.t6=new e.t2(e.t4,\"preview\",e.t5),e.t7={outputType:k.LO.jpg,maxWidthOrHeight:5e3},e.next=47,(0,e.t1)(e.t6,e.t7);case 47:return e.abrupt(\"return\",e.sent);case 48:case\"end\":return e.stop()}}),e,null,[[12,30,33,36]])})));return function(t){return e.apply(this,arguments)}}(),Y=function(e){var t=e.libItem,n=e.appState,o=e.index,i=e.onChange,s=e.onRemove,c=(0,l.useRef)(null),p=(0,l.useRef)(null);return(0,l.useEffect)((function(){var e=c.current;e&&(0,r.Z)(a().mark((function r(){var o;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,(0,w.$D)({elements:t.elements,appState:H(H({},n),{},{viewBackgroundColor:y.white,exportBackground:!0}),files:null});case 2:o=r.sent,e.innerHTML=o.outerHTML;case 4:case\"end\":return r.stop()}}),r)})))()}),[t.elements,n]),(0,N.jsxs)(\"div\",{className:\"single-library-item\",children:[\"published\"===t.status&&(0,N.jsx)(\"span\",{className:\"single-library-item-status\",children:(0,u.t)(\"labels.statusPublished\")}),(0,N.jsx)(\"div\",{ref:c,className:\"single-library-item__svg\"}),(0,N.jsx)(f.V,{\"aria-label\":(0,u.t)(\"buttons.remove\"),type:\"button\",icon:d.Tw,className:\"single-library-item--remove\",onClick:s.bind(null,t.id),title:(0,u.t)(\"buttons.remove\")}),(0,N.jsxs)(\"div\",{style:{display:\"flex\",margin:\"0.8rem 0\",width:\"100%\",fontSize:\"14px\",fontWeight:500,flexDirection:\"column\"},children:[(0,N.jsxs)(\"label\",{style:{display:\"flex\",justifyContent:\"space-between\",flexDirection:\"column\"},children:[(0,N.jsxs)(\"div\",{style:{padding:\"0.5em 0\"},children:[(0,N.jsx)(\"span\",{style:{fontWeight:500,color:y.gray[6]},children:(0,u.t)(\"publishDialog.itemName\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"input\",{type:\"text\",ref:p,style:{width:\"80%\",padding:\"0.2rem\"},defaultValue:t.name,placeholder:\"Item name\",onChange:function(e){i(e.target.value,o)}})]}),(0,N.jsx)(\"span\",{className:\"error\",children:t.error})]})]})},G=function(e){var t=e.onClose,n=e.libraryItems,i=e.appState,s=e.onSuccess,c=e.onError,d=e.updateItemsInStorage,f=e.onRemove,p=(0,l.useState)({authorName:\"\",githubHandle:\"\",name:\"\",description:\"\",twitterHandle:\"\",website:\"\"}),h=(0,o.Z)(p,2),m=h[0],g=h[1],v=(0,l.useState)(!1),y=(0,o.Z)(v,2),w=y[0],E=y[1];(0,l.useEffect)((function(){var e=function(){try{var e=localStorage.getItem(U);if(e)return JSON.parse(e)}catch(e){console.error(e)}return null}();e&&g(e)}),[]);var j=(0,l.useState)(n.slice()),_=(0,o.Z)(j,2),O=_[0],C=_[1];(0,l.useEffect)((function(){C(n.slice())}),[n]);var I,M=function(e){g(H(H({},m),{},(0,b.Z)({},e.target.name,e.target.value)))},T=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r,o,i,l,d,f;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),E(!0),n=[],r=!1,O.forEach((function(e){var t=\"\";e.name||(t=(0,u.t)(\"publishDialog.errors.required\"),r=!0),n.push(H(H({},e),{},{error:t}))})),!r){e.next=9;break}return C(n),E(!1),e.abrupt(\"return\");case 9:return e.next=11,K(O);case 11:o=e.sent,i={type:k.r8.excalidrawLibrary,version:k.Kr.excalidrawLibrary,source:k.pb,libraryItems:O},l=JSON.stringify(i,null,2),d=new Blob([l],{type:\"application\/json\"}),(f=new FormData).append(\"excalidrawLib\",d),f.append(\"previewImage\",o),f.append(\"previewImageType\",o.type),f.append(\"title\",m.name),f.append(\"authorName\",m.authorName),f.append(\"githubHandle\",m.githubHandle),f.append(\"name\",m.name),f.append(\"description\",m.description),f.append(\"twitterHandle\",m.twitterHandle),f.append(\"website\",m.website),fetch(\"\".concat(\"https:\/\/us-central1-excalidraw-room-persistence.cloudfunctions.net\/libraries\",\"\/submit\"),{method:\"post\",body:f}).then((function(e){return e.ok?e.json().then((function(e){var t=e.url;localStorage.removeItem(U),s({url:t,authorName:m.authorName,items:O})})):e.json().catch((function(){throw new Error(e.statusText||\"something went wrong\")})).then((function(t){throw new Error(t.message||e.statusText||\"something went wrong\")}))}),(function(e){console.error(e),c(e),E(!1)})).catch((function(e){console.error(e),c(e),E(!1)}));case 27:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),P=(0,l.useCallback)((function(){d(O),function(e){try{localStorage.setItem(U,JSON.stringify(e))}catch(e){console.error(e)}}(m),t()}),[O,t,d,m]),D=!!n.length,A=n.some((function(e){return\"published\"===e.status}));return(0,N.jsx)(x.V,{onCloseRequest:P,title:(0,u.t)(\"publishDialog.title\"),className:\"publish-library\",children:D?(0,N.jsxs)(\"form\",{onSubmit:T,children:[(0,N.jsxs)(\"div\",{className:\"publish-library-note\",children:[(0,u.t)(\"publishDialog.noteDescription.pre\"),(0,N.jsx)(\"a\",{href:\"https:\/\/libraries.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishDialog.noteDescription.link\")}),\" \",(0,u.t)(\"publishDialog.noteDescription.post\")]}),(0,N.jsxs)(\"span\",{className:\"publish-library-note\",children:[(0,u.t)(\"publishDialog.noteGuidelines.pre\"),(0,N.jsx)(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw-libraries#guidelines\",target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishDialog.noteGuidelines.link\")}),(0,u.t)(\"publishDialog.noteGuidelines.post\")]}),(0,N.jsx)(\"div\",{className:\"publish-library-note\",children:(0,u.t)(\"publishDialog.noteItems\")}),A&&(0,N.jsx)(\"span\",{className:\"publish-library-note publish-library-warning\",children:(0,u.t)(\"publishDialog.republishWarning\")}),(I=[],O.forEach((function(e,t){I.push((0,N.jsx)(\"div\",{className:\"single-library-item-wrapper\",children:(0,N.jsx)(Y,{libItem:e,appState:i,index:t,onChange:function(e,t){var n=O.slice();n[t].name=e,C(n)},onRemove:f})},t))})),(0,N.jsx)(\"div\",{className:\"selected-library-items\",children:I})),(0,N.jsxs)(\"div\",{className:\"publish-library__fields\",children:[(0,N.jsxs)(\"label\",{children:[(0,N.jsxs)(\"div\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.libraryName\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"input\",{type:\"text\",name:\"name\",required:!0,value:m.name,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.libraryName\")})]}),(0,N.jsxs)(\"label\",{style:{alignItems:\"flex-start\"},children:[(0,N.jsxs)(\"div\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.libraryDesc\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"textarea\",{name:\"description\",rows:4,required:!0,value:m.description,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.libraryDesc\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsxs)(\"div\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.authorName\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"input\",{type:\"text\",name:\"authorName\",required:!0,value:m.authorName,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.authorName\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.githubUsername\")}),(0,N.jsx)(\"input\",{type:\"text\",name:\"githubHandle\",value:m.githubHandle,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.githubHandle\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.twitterUsername\")}),(0,N.jsx)(\"input\",{type:\"text\",name:\"twitterHandle\",value:m.twitterHandle,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.twitterHandle\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.website\")}),(0,N.jsx)(\"input\",{type:\"text\",name:\"website\",pattern:\"https?:\/\/.+\",title:(0,u.t)(\"publishDialog.errors.website\"),value:m.website,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.website\")})]}),(0,N.jsxs)(\"span\",{className:\"publish-library-note\",children:[(0,u.t)(\"publishDialog.noteLicense.pre\"),(0,N.jsx)(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw-libraries\/blob\/main\/LICENSE\",target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishDialog.noteLicense.link\")}),(0,u.t)(\"publishDialog.noteLicense.post\")]})]}),(0,N.jsxs)(\"div\",{className:\"publish-library__buttons\",children:[(0,N.jsx)(S.Z,{label:(0,u.t)(\"buttons.cancel\"),onClick:P,\"data-testid\":\"cancel-clear-canvas-button\"}),(0,N.jsx)(S.Z,{type:\"submit\",label:(0,u.t)(\"buttons.submit\"),actionType:\"primary\",isLoading:w})]})]}):(0,N.jsx)(\"p\",{style:{padding:\"1em\",textAlign:\"center\",fontWeight:500},children:(0,u.t)(\"publishDialog.atleastOneLibItem\")})})},V=n(9127),X=(0,m.cn)(!1),q=function(e,t){return e.filter((function(e){return t.includes(e.id)}))},J=function(e){var t=e.setAppState,n=e.selectedItems,i=e.library,b=e.onRemoveFromLibrary,y=e.resetLibrary,w=e.onSelectItems,k=e.appState,E=(0,m.KO)(c.rF,g.yE),S=(0,o.Z)(E,1)[0],j=(0,m.KO)(X,g.yE),_=(0,o.Z)(j,2),O=_[0],C=_[1],I=(0,l.useCallback)((function(){var e=n.length?(0,u.t)(\"alerts.removeItemsFromsLibrary\",{count:n.length}):(0,u.t)(\"alerts.resetLibrary\"),t=n.length?(0,u.t)(\"confirmDialog.removeItemsFromLib\"):(0,u.t)(\"confirmDialog.resetLibrary\");return(0,N.jsx)(v.Z,{onConfirm:function(){n.length?b():y(),D(!1)},onCancel:function(){D(!1)},title:t,children:(0,N.jsx)(\"p\",{children:e})})}),[n,b,y]),M=(0,l.useState)(!1),T=(0,o.Z)(M,2),P=T[0],D=T[1],A=!!n.length,L=A?S.libraryItems.filter((function(e){return n.includes(e.id)})):S.libraryItems,Z=A?(0,u.t)(\"buttons.remove\"):(0,u.t)(\"buttons.resetLibrary\"),z=(0,l.useState)(!1),R=(0,o.Z)(z,2),B=R[0],H=R[1],W=(0,l.useState)(null),F=(0,o.Z)(W,2),U=F[0],K=F[1],Y=(0,l.useCallback)((function(){return(0,N.jsxs)(x.V,{onCloseRequest:function(){return K(null)},title:(0,u.t)(\"publishSuccessDialog.title\"),className:\"publish-library-success\",small:!0,children:[(0,N.jsxs)(\"p\",{children:[(0,u.t)(\"publishSuccessDialog.content\",{authorName:U.authorName}),\" \",(0,N.jsx)(\"a\",{href:null==U?void 0:U.url,target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishSuccessDialog.link\")})]}),(0,N.jsx)(f.V,{type:\"button\",title:(0,u.t)(\"buttons.close\"),\"aria-label\":(0,u.t)(\"buttons.close\"),label:(0,u.t)(\"buttons.close\"),onClick:function(){return K(null)},\"data-testid\":\"publish-library-success-close\",className:\"publish-library-success-close\"})]})}),[K,U]),J=(0,l.useCallback)((function(e,t){H(!1),K({url:e.url,authorName:e.authorName});var r=t.slice();r.forEach((function(e){n.includes(e.id)&&(e.status=\"published\")})),i.setLibrary(r)}),[H,K,n,i]),$=function(){var e=(0,r.Z)(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,i.updateLibrary({libraryItems:(0,p.I$)({description:\"Excalidraw library files\"}),merge:!0,openLibraryMenu:!0});case 3:e.next=11;break;case 5:if(e.prev=5,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)){e.next=10;break}return console.warn(e.t0),e.abrupt(\"return\");case 10:t({errorMessage:(0,u.t)(\"errors.importLibraryError\")});case 11:case\"end\":return e.stop()}}),e,null,[[0,5]])})));return function(){return e.apply(this,arguments)}}(),Q=function(){var e=(0,r.Z)(a().mark((function e(){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!A){e.next=4;break}e.t0=L,e.next=7;break;case 4:return e.next=6,i.getLatestLibrary();case 6:e.t0=e.sent;case 7:n=e.t0,(0,s.t1)(n).catch(h.FG).catch((function(e){t({errorMessage:e.message})}));case 9:case\"end\":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return(0,N.jsxs)(\"div\",{style:{position:\"relative\"},children:[(0,N.jsxs)(V.Z,{open:O,children:[(0,N.jsx)(V.Z.Trigger,{className:\"Sidebar__dropdown-btn\",onToggle:function(){return C(!O)},children:d.YA}),(0,N.jsxs)(V.Z.Content,{onClickOutside:function(){return C(!1)},onSelect:function(){return C(!1)},className:\"library-menu\",children:[!A&&(0,N.jsx)(V.Z.Item,{onSelect:$,icon:d.Tl,\"data-testid\":\"lib-dropdown--load\",children:(0,u.t)(\"buttons.load\")}),!!L.length&&(0,N.jsx)(V.Z.Item,{onSelect:Q,icon:d.Hy,\"data-testid\":\"lib-dropdown--export\",children:(0,u.t)(\"buttons.export\")}),!!L.length&&(0,N.jsx)(V.Z.Item,{onSelect:function(){return D(!0)},icon:d.XH,children:Z}),A&&(0,N.jsx)(V.Z.Item,{icon:d.Nw,onSelect:function(){return H(!0)},\"data-testid\":\"lib-dropdown--remove\",children:(0,u.t)(\"buttons.publishLibrary\")})]})]}),n.length>0&&(0,N.jsx)(\"div\",{className:\"library-actions-counter\",children:n.length}),P&&I(),B&&(0,N.jsx)(G,{onClose:function(){return H(!1)},libraryItems:q(S.libraryItems,n),appState:k,onSuccess:function(e){return J(e,S.libraryItems)},onError:function(e){return window.alert(e)},updateItemsInStorage:function(){return i.setLibrary(S.libraryItems)},onRemove:function(e){return w(n.filter((function(t){return t!==e})))}}),U&&Y()]})}},5440:function(e,t,n){\"use strict\";n.d(t,{z:function(){return u}});var r=n(2577),o=n(8211),i=n(9787),a=n(5644),l=n(45),s=n(2335),c=n(4512),u=function(e){var t=e.delay,n=e.theme,u=(0,i.useState)(!!t),d=(0,r.Z)(u,2),f=d[0],p=d[1];return(0,i.useEffect)((function(){if(t){var e=setTimeout((function(){p(!1)}),t);return function(){return clearTimeout(e)}}}),[t]),f?null:(0,c.jsxs)(\"div\",{className:(0,l.Z)(\"LoadingMessage\",{\"LoadingMessage--dark\":n===s.C6.DARK}),children:[(0,c.jsx)(\"div\",{children:(0,c.jsx)(a.Z,{})}),(0,c.jsx)(\"div\",{className:\"LoadingMessage-text\",children:(0,o.t)(\"labels.loadingScene\")})]})}},2891:function(e,t,n){\"use strict\";n.d(t,{J:function(){return k}});var r=n(9787),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(9935),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(5156),y=n(6340),x=n(6066),w=n(4512),k=function(e){var t=e.children,n=e.left,o=e.top,i=e.onCloseRequest,a=e.fitInViewport,l=void 0!==a&&a,s=e.offsetLeft,c=void 0===s?0:s,u=e.offsetTop,d=void 0===u?0:u,f=e.viewportWidth,p=void 0===f?window.innerWidth:f,h=e.viewportHeight,m=void 0===h?window.innerHeight:h,g=(0,r.useRef)(null);(0,r.useEffect)((function(){var e=g.current;if(e){e.contains(document.activeElement)||e.focus();var t=function(t){if(t.key===x.tW.TAB){var n=(0,y.xp)(e),r=document.activeElement,o=n.findIndex((function(e){return e===r}));if(r===e){var i;if(t.shiftKey)null===(i=n[n.length-1])||void 0===i||i.focus();else n[0].focus();t.preventDefault(),t.stopImmediatePropagation()}else if(0===o&&t.shiftKey){var a;null===(a=n[n.length-1])||void 0===a||a.focus(),t.preventDefault(),t.stopImmediatePropagation()}else if(o===n.length-1&&!t.shiftKey){var l;null===(l=n[0])||void 0===l||l.focus(),t.preventDefault(),t.stopImmediatePropagation()}}};return e.addEventListener(\"keydown\",t),function(){return e.removeEventListener(\"keydown\",t)}}}),[]);var v=(0,r.useRef)(null);return(0,r.useLayoutEffect)((function(){if(l&&g.current&&null!=o&&null!=n){var e,t,r=g.current,i=r.getBoundingClientRect(),a=i.width,s=i.height;if((null===(e=v.current)||void 0===e?void 0:e.top)===o&&(null===(t=v.current)||void 0===t?void 0:t.left)===n)return;v.current={top:o,left:n},a>=p?(r.style.width=\"\".concat(p,\"px\"),r.style.left=\"0px\",r.style.overflowX=\"scroll\"):r.style.left=\"\".concat(n+a-c>p?p-a-10:n,\"px\"),s>=m?(r.style.height=\"\".concat(m-20,\"px\"),r.style.top=\"10px\",r.style.overflowY=\"scroll\"):r.style.top=\"\".concat(o+s-d>m?m-s:o,\"px\")}}),[o,n,l,p,m,c,d]),(0,r.useEffect)((function(){if(i){var e=function(e){var t;null!==(t=g.current)&&void 0!==t&&t.contains(e.target)||(0,b.unstable_batchedUpdates)((function(){return i(e)}))};return document.addEventListener(\"pointerdown\",e,!1),function(){return document.removeEventListener(\"pointerdown\",e,!1)}}}),[i]),(0,w.jsx)(\"div\",{className:\"popover\",ref:g,tabIndex:-1,children:t})}},9430:function(e,t,n){\"use strict\";n.d(t,{Y:function(){return R},b:function(){return z}});var r=n(2577),o=n(9787),i=n.n(o),a=n(1881),l=n(4739),s=n(9487),c=i().createContext({}),u=n(45),d=n(8211),f=n(2134),p=n(3646),h=n(7169),m=n(4512);function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var v=n(1894),b=function(e){return(0,m.jsx)(\"div\",{className:\"layer-ui__sidebar-dock-button\",\"data-testid\":\"sidebar-dock\",children:(0,m.jsxs)(v.u,{label:(0,d.t)(\"labels.sidebarLock\"),children:[(0,m.jsxs)(\"label\",{className:(0,u.Z)(\"ToolIcon ToolIcon__lock ToolIcon_type_floating\",\"ToolIcon_size_medium\"),children:[(0,m.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",onChange:e.onChange,checked:e.checked,\"aria-label\":(0,d.t)(\"labels.sidebarLock\")}),\" \",(0,m.jsx)(\"div\",{className:(0,u.Z)(\"Sidebar__pin-btn\",{\"Sidebar__pin-btn--pinned\":e.checked}),tabIndex:0,children:p.qQ}),\" \"]}),\" \"]})})},y=function(e){var t=(0,o.createContext)([!1,function(){}]),n=function(e){var n=e.children,i=(0,o.useState)(!1),a=(0,r.Z)(i,2),l=a[0],s=a[1],c=(0,o.useMemo)((function(){return[l,s]}),[l]);return(0,m.jsx)(t.Provider,{value:c,children:n})},i=function(n){var i=(0,o.useContext)(t),a=(0,r.Z)(i,2),l=a[0],s=a[1];return(0,o.useLayoutEffect)((function(){if(!n.__isFallback)return s(!0),function(){return s(!1)}}),[n.__isFallback,s]),n.__isFallback&&l?null:(0,m.jsx)(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){(0,h.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n))};return e.name&&(i.displayName=\"\".concat(e.name,\"_upstreamOverrideWrapper\"),n.displayName=\"\".concat(e.name,\"_upstreamOverrideContextWrapper\")),[n,i]}((function(e){var t=e.children,n=e.className,r=(0,f.Fy)(),i=(0,o.useContext)(c),a=!(!r.canDeviceFitSidebar||!i.dockable),l=!!i.onClose;return(0,m.jsxs)(\"div\",{className:(0,u.Z)(\"layer-ui__sidebar__header\",n),\"data-testid\":\"sidebar-header\",children:[t,(a||l)&&(0,m.jsxs)(\"div\",{className:\"layer-ui__sidebar__header__buttons\",children:[a&&(0,m.jsx)(b,{checked:!!i.docked,onChange:function(){var e;null===(e=i.onDock)||void 0===e||e.call(i,!i.docked)}}),l&&(0,m.jsx)(\"button\",{\"data-testid\":\"sidebar-close\",className:\"Sidebar__close-btn\",onClick:i.onClose,\"aria-label\":(0,d.t)(\"buttons.close\"),children:p.Tw})]})]})})),x=(0,r.Z)(y,2),w={Context:x[0],Component:x[1]},k=n(487),E=n.n(k),S=n(631),j=n.n(S),_=n(2052),O=n.n(_),C=n(4010),I=n.n(C),M=n(1469),T=n.n(M),P=n(9329),D=n.n(P),A=n(8208),L={};L.styleTagTransform=D(),L.setAttributes=I(),L.insert=O().bind(null,\"head\"),L.domAPI=j(),L.insertStyleElement=T();E()(A.Z,L),A.Z&&A.Z.locals&&A.Z.locals;var Z=n(6340),z=(0,l.cn)({rendered:0,docked:0}),R=Object.assign((0,o.forwardRef)((function(e,t){var n,i=e.children,d=e.onClose,p=e.onDock,h=e.docked,g=e.initialDockedState,v=void 0===g?h:g,b=e.dockable,y=void 0===b||b,x=e.className,k=e.__isInternal,E=(0,l.KO)(z,s.yE),S=(0,r.Z)(E,2),j=S[0],_=S[1],O=(0,f.n9)(),C=(0,o.useState)(null!==(n=null!=h?h:v)&&void 0!==n&&n),I=(0,r.Z)(C,2),M=I[0],T=I[1];(0,o.useLayoutEffect)((function(){void 0===h&&O((function(e){return T(e.isSidebarDocked),null}))}),[O,h]),(0,o.useLayoutEffect)((function(){if(!k)return _((function(e){return{rendered:e.rendered+1,docked:M?e.docked+1:e.docked}})),function(){_((function(e){return{rendered:e.rendered-1,docked:M?e.docked-1:e.docked}}))}}),[k,_,M]);var P=(0,o.useRef)(d);P.current=d,(0,o.useEffect)((function(){return function(){var e;null===(e=P.current)||void 0===e||e.call(P)}}),[]);var D=(0,o.useRef)({});return D.current.onClose=function(){O({openSidebar:null})},D.current.onDock=function(e){void 0===h&&(O({isSidebarDocked:e}),T(e)),null==p||p(e)},D.current=(0,Z.v4)(D.current,{docked:null!=h?h:M,dockable:y}),j.rendered>0&&k?null:(0,m.jsx)(a.W,{className:(0,u.Z)(\"layer-ui__sidebar\",{\"layer-ui__sidebar--docked\":M},x),ref:t,children:(0,m.jsx)(c.Provider,{value:D.current,children:(0,m.jsxs)(w.Context,{children:[(0,m.jsx)(w.Component,{__isFallback:!0}),i]})})})})),{Header:w.Component})},5644:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return b}});var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(5892),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var v=n(4512),b=function(e){var t=e.size,n=void 0===t?\"1em\":t,r=e.circleWidth,o=void 0===r?8:r;return(0,v.jsx)(\"div\",{className:\"Spinner\",children:(0,v.jsx)(\"svg\",{viewBox:\"0 0 100 100\",style:{width:n,height:n},children:(0,v.jsx)(\"circle\",{cx:\"50\",cy:\"50\",r:50-o\/2,strokeWidth:o,fill:\"none\",strokeMiterlimit:\"10\"})})})}},7239:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return k}});var r=n(7169),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(3874),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(45),y=n(4512);function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var k={Row:function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,i=e.className,a=e.style;return(0,y.jsx)(\"div\",{className:(0,b.Z)(\"Stack Stack_horizontal\",i),style:w({\"--gap\":n,alignItems:r,justifyContent:o},a),children:t})},Col:function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,i=e.className,a=e.style;return(0,y.jsx)(\"div\",{className:(0,b.Z)(\"Stack Stack_vertical\",i),style:w({\"--gap\":n,justifyItems:r,justifyContent:o},a),children:t})}}},1319:function(e,t,n){\"use strict\";n.d(t,{V:function(){return h}});var r=n(8950),o=n(2577),i=n(2975),a=n.n(i),l=(n(5422),n(9787)),s=n.n(l),c=n(45),u=n(2134),d=n(6797),f=n(5644),p=n(4512),h=s().forwardRef((function(e,t){var n=(0,u.J0)().id,i=s().useRef(null);s().useImperativeHandle(t,(function(){return i.current}));var h=\"ToolIcon_size_\".concat(e.size),m=(0,l.useState)(!1),g=(0,o.Z)(m,2),v=g[0],b=g[1],y=(0,l.useRef)(!0),x=function(){var t=(0,r.Z)(a().mark((function t(n){var r,o;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(o=\"onClick\"in e&&(null===(r=e.onClick)||void 0===r?void 0:r.call(e,n)))||!(\"then\"in o)){t.next=18;break}return t.prev=2,b(!0),t.next=6,o;case 6:t.next=15;break;case 8:if(t.prev=8,t.t0=t.catch(2),t.t0 instanceof d._){t.next=14;break}throw t.t0;case 14:console.warn(t.t0);case 15:return t.prev=15,y.current&&b(!1),t.finish(15);case 18:case\"end\":return t.stop()}}),t,null,[[2,8,15,18]])})));return function(e){return t.apply(this,arguments)}}();(0,l.useEffect)((function(){return function(){y.current=!1}}),[]);var w=(0,l.useRef)(null);if(\"button\"===e.type||\"icon\"===e.type||\"submit\"===e.type){var k=\"icon\"===e.type?\"button\":e.type;return(0,p.jsxs)(\"button\",{className:(0,c.Z)(\"ToolIcon_type_button\",h,e.className,e.visible&&!e.hidden?\"ToolIcon_type_button--show\":\"ToolIcon_type_button--hide\",{ToolIcon:!e.hidden,\"ToolIcon--selected\":e.selected,\"ToolIcon--plain\":\"icon\"===e.type}),\"data-testid\":e[\"data-testid\"],hidden:e.hidden,title:e.title,\"aria-label\":e[\"aria-label\"],type:k,onClick:x,ref:i,disabled:v||e.isLoading,children:[(e.icon||e.label)&&(0,p.jsxs)(\"div\",{className:\"ToolIcon__icon\",\"aria-hidden\":\"true\",children:[e.icon||e.label,e.keyBindingLabel&&(0,p.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel}),e.isLoading&&(0,p.jsx)(f.Z,{})]}),e.showAriaLabel&&(0,p.jsxs)(\"div\",{className:\"ToolIcon__label\",children:[e[\"aria-label\"],\" \",v&&(0,p.jsx)(f.Z,{})]}),e.children]})}return(0,p.jsxs)(\"label\",{className:(0,c.Z)(\"ToolIcon\",e.className),title:e.title,onPointerDown:function(t){var n;w.current=t.pointerType||null,null===(n=e.onPointerDown)||void 0===n||n.call(e,{pointerType:t.pointerType||null})},onPointerUp:function(){requestAnimationFrame((function(){w.current=null}))},children:[(0,p.jsx)(\"input\",{className:\"ToolIcon_type_radio \".concat(h),type:\"radio\",name:e.name,\"aria-label\":e[\"aria-label\"],\"aria-keyshortcuts\":e[\"aria-keyshortcuts\"],\"data-testid\":e[\"data-testid\"],id:\"\".concat(n,\"-\").concat(e.id),onChange:function(){var t;null===(t=e.onChange)||void 0===t||t.call(e,{pointerType:w.current})},checked:e.checked,ref:i}),(0,p.jsxs)(\"div\",{className:\"ToolIcon__icon\",children:[e.icon,e.keyBindingLabel&&(0,p.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel})]})]})}));h.defaultProps={visible:!0,className:\"\",size:\"medium\"},h.displayName=\"ToolButton\"},1894:function(e,t,n){\"use strict\";n.d(t,{u:function(){return w},bK:function(){return y},Js:function(){return x}});var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(6626),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var v=n(9787),b=n(4512),y=function(){var e=document.querySelector(\".excalidraw-tooltip\");if(e)return e;var t=document.createElement(\"div\");return document.body.appendChild(t),t.classList.add(\"excalidraw-tooltip\"),t},x=function(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"bottom\",o=e.getBoundingClientRect(),i=window.innerWidth,a=window.innerHeight,l=5,s=t.left+t.width\/2-o.width\/2;s<0?s=l:s+o.width>=i&&(s=i-o.width-l),\"bottom\"===r?(n=t.top+t.height+l)+o.height>=a&&(n=t.top-o.height-l):(n=t.top-o.height-l)<0&&(n=t.top+t.height+l),Object.assign(e.style,{top:\"\".concat(n,\"px\"),left:\"\".concat(s,\"px\")})},w=function(e){var t=e.children,n=e.label,r=e.long,o=void 0!==r&&r,i=e.style;return(0,v.useEffect)((function(){return function(){return y().classList.remove(\"excalidraw-tooltip--visible\")}}),[]),(0,b.jsx)(\"div\",{className:\"excalidraw-tooltip-wrapper\",onPointerEnter:function(e){return function(e,t,n,r){t.classList.add(\"excalidraw-tooltip--visible\"),t.style.minWidth=r?\"50ch\":\"10ch\",t.style.maxWidth=r?\"50ch\":\"15ch\",t.textContent=n;var o=e.getBoundingClientRect();x(t,o)}(e.currentTarget,y(),n,o)},onPointerLeave:function(){return y().classList.remove(\"excalidraw-tooltip--visible\")},style:i,children:t})}},6773:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return S}});var r=n(2577),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(6359),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(9787),y=n.n(b),x=n(45),w=n(1894),k=n(2134),E=n(4512),S=function(e){var t=e.className,n=e.mobile,o=e.collaborators,i=(0,k.eh)(),a=new Map;o.forEach((function(e,t){a.set(e.id||t,e)}));var l=a.size>0&&Array.from(a).filter((function(e){var t=(0,r.Z)(e,2),n=(t[0],t[1]);return 0!==Object.keys(n).length})).map((function(e){var t=(0,r.Z)(e,2),o=t[0],a=t[1],l=i.renderAction(\"goToCollaborator\",[o,a]);return n?(0,E.jsx)(w.u,{label:a.username||\"Unknown user\",children:l},o):(0,E.jsx)(y().Fragment,{children:l},o)}));return(0,E.jsx)(\"div\",{className:(0,x.Z)(\"UserList\",t,{UserList_mobile:n}),children:l})}},8888:function(e,t,n){\"use strict\";n.d(t,{A3:function(){return f},ZC:function(){return h},R6:function(){return p}});var r=n(9787),o=n.n(r);const i=e=>{let t;const n=new Set,r=(e,r)=>{const o=\"function\"==typeof e?e(t):e;if(!Object.is(o,t)){const e=t;t=(null!=r?r:\"object\"!=typeof o)?o:Object.assign({},t,o),n.forEach((n=>n(t,e)))}},o=()=>t,i={setState:r,getState:o,subscribe:e=>(n.add(e),()=>n.delete(e)),destroy:()=>{console.warn(\"[DEPRECATED] The destroy method will be unsupported in the future version. You should use unsubscribe function returned by subscribe. Everything will be garbage collected if store is garbage collected.\"),n.clear()}};return t=e(r,o,i),i},a=e=>e?i(e):i;var l=n(5668);const{useSyncExternalStoreWithSelector:s}=l;const c=e=>{\"function\"!=typeof e&&console.warn('[DEPRECATED] Passing a vanilla store will be unsupported in the future version. Please use `import { useStore } from \"zustand\"` to use the vanilla store in React.');const t=\"function\"==typeof e?a(e):e,n=(e,n)=>function(e,t=e.getState,n){const o=s(e.subscribe,e.getState,e.getServerState||e.getState,t,n);return(0,r.useDebugValue)(o),o}(t,e,n);return Object.assign(n,t),n},u=e=>e?c(e):c;function d(){const e=u((e=>({current:new Array,version:0,set:e})));return{In:({children:t})=>{const n=e((e=>e.set)),o=e((e=>e.version));return(0,r.useLayoutEffect)((()=>{n((e=>({version:e.version+1})))}),[]),(0,r.useLayoutEffect)((()=>(n((({current:e})=>({current:[...e,t]}))),()=>n((({current:e})=>({current:e.filter((e=>e!==t))}))))),[t,o]),null},Out:()=>{const t=e((e=>e.current));return o().createElement(o().Fragment,null,t)}}}var f=o().createContext(null),p=function(){return o().useContext(f)},h=function(){return o().useMemo((function(){return{mainMenuTunnel:d(),welcomeScreenMenuHintTunnel:d(),welcomeScreenToolbarHintTunnel:d(),welcomeScreenHelpHintTunnel:d(),welcomeScreenCenterTunnel:d(),footerCenterTunnel:d(),jotaiScope:Symbol()}}),[])}},9127:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return F}});var r=n(45),o=n(2134),i=n(4512),a=function(e){var t=e.className,n=void 0===t?\"\":t,a=e.children,l=e.onToggle,s=(0,o.gF)(),c=(0,o.Fy)(),u=(0,r.Z)(\"dropdown-menu-button \".concat(n),\"zen-mode-transition\",{\"transition-left\":s.zenModeEnabled,\"dropdown-menu-button--mobile\":c.isMobile}).trim();return(0,i.jsx)(\"button\",{\"data-prevent-outside-click\":!0,className:u,onClick:l,type:\"button\",\"data-testid\":\"dropdown-menu-button\",children:a})},l=a;a.displayName=\"DropdownMenuTrigger\";var s=n(2739),c=function(){return(0,i.jsx)(\"div\",{style:{height:\"1px\",backgroundColor:\"var(--default-border-color)\",margin:\".5rem 0\"}})},u=c;c.displayName=\"DropdownMenuSeparator\";var d=function(e){var t=e.children,n=e.className,r=void 0===n?\"\":n,o=e.style,a=e.title;return(0,i.jsxs)(\"div\",{className:\"dropdown-menu-group \".concat(r),style:o,children:[a&&(0,i.jsx)(\"p\",{className:\"dropdown-menu-group-title\",children:a}),t]})},f=d;d.displayName=\"DropdownMenuGroup\";var p=n(1930),h=n(9787),m=n.n(h),g=n(1881),v=n(7239),b=n(6772),y=function(e){var t,n,a=e.children,l=e.onClickOutside,s=e.className,c=void 0===s?\"\":s,u=e.onSelect,d=e.style,f=(0,o.Fy)(),m=(t=function(){null==l||l()},n=(0,h.useRef)(null),(0,h.useEffect)((function(){var e=function(e){var r=n.current;!r||r.contains(e.target)||(0,p.Z)(document.querySelectorAll(\"[data-prevent-outside-click]\")).some((function(t){return t.contains(e.target)}))||t(e)};return document.addEventListener(\"pointerdown\",e),document.addEventListener(\"touchstart\",e),function(){document.removeEventListener(\"pointerdown\",e),document.removeEventListener(\"touchstart\",e)}}),[n,t]),n),y=(0,r.Z)(\"dropdown-menu \".concat(c),{\"dropdown-menu--mobile\":f.isMobile}).trim();return(0,i.jsx)(b.N7.Provider,{value:{onSelect:u},children:(0,i.jsx)(\"div\",{ref:m,className:y,style:d,\"data-testid\":\"dropdown-menu\",children:f.isMobile?(0,i.jsx)(v.Z.Col,{className:\"dropdown-menu-container\",children:a}):(0,i.jsx)(g.W,{className:\"dropdown-menu-container\",padding:2,style:{zIndex:1},children:a})})})};y.displayName=\"DropdownMenuContent\";var x=y,w=n(4215),k=n(7169),E=n(2726),S=[\"children\",\"className\"];function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){(0,k.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var O=function(e){var t=e.children,n=e.className,r=void 0===n?\"\":n,o=(0,E.Z)(e,S);return(0,i.jsx)(\"div\",_(_({},o),{},{className:\"dropdown-menu-item-base dropdown-menu-item-custom \".concat(r).trim(),children:t}))},C=n(487),I=n.n(C),M=n(631),T=n.n(M),P=n(2052),D=n.n(P),A=n(4010),L=n.n(A),Z=n(1469),z=n.n(Z),R=n(9329),N=n.n(R),B=n(7399),H={};H.styleTagTransform=N(),H.setAttributes=L(),H.insert=D().bind(null,\"head\"),H.domAPI=T(),H.insertStyleElement=z();I()(B.Z,H),B.Z&&B.Z.locals&&B.Z.locals;var W=function(e){var t=e.children,n=e.open,r=function(e){return m().Children.toArray(e).find((function(e){return m().isValidElement(e)&&\"string\"!=typeof e.type&&(null==e?void 0:e.type.displayName)&&\"DropdownMenuTrigger\"===e.type.displayName}))||null}(t),o=function(e){return m().Children.toArray(e).find((function(e){return m().isValidElement(e)&&\"string\"!=typeof e.type&&(null==e?void 0:e.type.displayName)&&\"DropdownMenuContent\"===e.type.displayName}))||null}(t);return(0,i.jsxs)(i.Fragment,{children:[r,n&&o]})};W.Trigger=l,W.Content=x,W.Item=s.Z,W.ItemLink=w.Z,W.ItemCustom=O,W.Group=f,W.Separator=u;var F=W;W.displayName=\"DropdownMenu\"},2739:function(e,t,n){\"use strict\";var r=n(7169),o=n(2726),i=n(6772),a=n(4122),l=n(4512),s=[\"icon\",\"onSelect\",\"children\",\"shortcut\",\"className\"];function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var d=function(e){var t,n=e.icon,r=e.onSelect,c=e.children,d=e.shortcut,f=e.className,p=(0,o.Z)(e,s),h=(0,i.qZ)(p.onClick,r);return(0,l.jsx)(\"button\",u(u({},p),{},{onClick:h,type:\"button\",className:(0,i.n)(f),title:null!==(t=p.title)&&void 0!==t?t:p[\"aria-label\"],children:(0,l.jsx)(a.Z,{icon:n,shortcut:d,children:c})}))};t.Z=d,d.displayName=\"DropdownMenuItem\"},4122:function(e,t,n){\"use strict\";var r=n(2134),o=n(4512);t.Z=function(e){var t=e.icon,n=e.shortcut,i=e.children,a=(0,r.Fy)();return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(\"div\",{className:\"dropdown-menu-item__icon\",children:t}),(0,o.jsx)(\"div\",{className:\"dropdown-menu-item__text\",children:i}),n&&!a.isMobile&&(0,o.jsx)(\"div\",{className:\"dropdown-menu-item__shortcut\",children:n})]})}},4215:function(e,t,n){\"use strict\";var r=n(7169),o=n(2726),i=n(4122),a=n(6772),l=n(4512),s=[\"icon\",\"shortcut\",\"href\",\"children\",\"onSelect\",\"className\"];function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var d=function(e){var t,n=e.icon,r=e.shortcut,c=e.href,d=e.children,f=e.onSelect,p=e.className,h=void 0===p?\"\":p,m=(0,o.Z)(e,s),g=(0,a.qZ)(m.onClick,f);return(0,l.jsx)(\"a\",u(u({},m),{},{href:c,target:\"_blank\",rel:\"noreferrer\",className:(0,a.n)(h),title:null!==(t=m.title)&&void 0!==t?t:m[\"aria-label\"],onClick:g,children:(0,l.jsx)(i.Z,{icon:n,shortcut:r,children:d})}))};t.Z=d,d.displayName=\"DropdownMenuItemLink\"},6772:function(e,t,n){\"use strict\";n.d(t,{N7:function(){return l},n:function(){return s},qZ:function(){return c}});var r=n(9787),o=n.n(r),i=n(2335),a=n(6340),l=o().createContext({}),s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\";return\"dropdown-menu-item dropdown-menu-item-base \".concat(e).trim()},c=function(e,t){var n=(0,r.useContext)(l);return(0,a.Mj)(e,(function(e){var r,o=new CustomEvent(i.Ks.MENU_ITEM_SELECT,{bubbles:!0,cancelable:!0});(null==t||t(o),o.defaultPrevented)||(null===(r=n.onSelect)||void 0===r||r.call(n,o))}))}},3646:function(e,t,n){\"use strict\";n.d(t,{$c:function(){return le},$q:function(){return R},BF:function(){return _e},BR:function(){return re},Ct:function(){return me},D7:function(){return q},DG:function(){return oe},DJ:function(){return _},DS:function(){return He},EO:function(){return nt},ET:function(){return X},FC:function(){return E},Gc:function(){return fe},HL:function(){return ge},Hk:function(){return at},Hy:function(){return Y},IN:function(){return pe},J8:function(){return ie},Mw:function(){return O},NA:function(){return W},NW:function(){return U},Nw:function(){return it},OA:function(){return qe},OW:function(){return I},P7:function(){return ot},Pm:function(){return L},RJ:function(){return Oe},RY:function(){return K},Re:function(){return T},ST:function(){return we},Sd:function(){return N},TP:function(){return ae},Tl:function(){return ne},Tw:function(){return Se},UE:function(){return se},VL:function(){return Z},Vl:function(){return ue},Vq:function(){return b},W2:function(){return Ne},W5:function(){return xe},Wl:function(){return De},X7:function(){return Te},XB:function(){return z},XH:function(){return H},YA:function(){return x},ZA:function(){return Pe},Zm:function(){return J},_C:function(){return k},_U:function(){return j},a0:function(){return Ie},a1:function(){return ee},a5:function(){return Le},aA:function(){return rt},aT:function(){return Ze},bf:function(){return ze},by:function(){return G},e0:function(){return P},eQ:function(){return $},fr:function(){return We},gK:function(){return ke},h0:function(){return V},il:function(){return Fe},j8:function(){return Ye},jn:function(){return Ee},kL:function(){return F},kM:function(){return Re},lF:function(){return Ce},m:function(){return Ke},m9:function(){return Ae},mh:function(){return be},nb:function(){return M},np:function(){return Me},nq:function(){return Ve},o3:function(){return et},oQ:function(){return S},oT:function(){return tt},op:function(){return je},pO:function(){return y},po:function(){return te},pw:function(){return he},q0:function(){return Ge},qQ:function(){return w},rr:function(){return Qe},t5:function(){return de},tW:function(){return Xe},tb:function(){return A},tn:function(){return Ue},uD:function(){return ye},vo:function(){return Je},wr:function(){return Be},xL:function(){return B},xP:function(){return Q},xs:function(){return ve},z6:function(){return $e},zG:function(){return ce},zb:function(){return D},zu:function(){return C}});var r=n(7169),o=n(2726),i=n(9787),a=n.n(i),l=n(5284),s=n(45),c=n(2335),u=n(4512),d=[\"width\",\"height\",\"mirror\",\"style\"];function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=function(e){return e===c.C6.LIGHT?l.white:\"#1e1e1e\"},m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,n=\"number\"==typeof t?{width:t}:t,r=n.width,i=void 0===r?512:r,a=n.height,l=void 0===a?i:a,c=n.mirror,f=n.style,h=(0,o.Z)(n,d);return(0,u.jsx)(\"svg\",p(p({\"aria-hidden\":\"true\",focusable:\"false\",role:\"img\",viewBox:\"0 0 \".concat(i,\" \").concat(l),className:(0,s.Z)({\"rtl-mirror\":c}),style:f},h),{},{children:\"string\"==typeof e?(0,u.jsx)(\"path\",{fill:\"currentColor\",d:e}):e}))},g={width:24,height:24,fill:\"none\",strokeWidth:2,stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\"},v={width:20,height:20,fill:\"none\",stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\"},b=(m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"rect\",{x:3,y:8,width:18,height:4,rx:1}),(0,u.jsx)(\"line\",{x1:12,y1:8,x2:12,y2:21}),(0,u.jsx)(\"path\",{d:\"M19 12v7a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2v-7\"}),(0,u.jsx)(\"path\",{d:\"M7.5 8a2.5 2.5 0 0 1 0 -5a4.8 8 0 0 1 4.5 5a4.8 8 0 0 1 4.5 -5a2.5 2.5 0 0 1 0 5\"})]}),g),m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0\"}),(0,u.jsx)(\"path\",{d:\"M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0\"}),(0,u.jsx)(\"line\",{x1:\"3\",y1:\"6\",x2:\"3\",y2:\"19\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"6\",x2:\"12\",y2:\"19\"}),(0,u.jsx)(\"line\",{x1:\"21\",y1:\"6\",x2:\"21\",y2:\"19\"})]}),g)),y=m((0,u.jsxs)(\"svg\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"5\",x2:\"12\",y2:\"19\"}),(0,u.jsx)(\"line\",{x1:\"5\",y1:\"12\",x2:\"19\",y2:\"12\"})]}),g),x=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"12\",r:\"1\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"19\",r:\"1\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"5\",r:\"1\"})]}),g),w=m((0,u.jsxs)(\"svg\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M9 4v6l-2 4v2h10v-2l-2 -4v-6\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"16\",x2:\"12\",y2:\"21\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"4\",x2:\"16\",y2:\"4\"})]}),g),k=m((0,u.jsxs)(\"g\",{children:[(0,u.jsx)(\"path\",{d:\"M13.542 8.542H6.458a2.5 2.5 0 0 0-2.5 2.5v3.75a2.5 2.5 0 0 0 2.5 2.5h7.084a2.5 2.5 0 0 0 2.5-2.5v-3.75a2.5 2.5 0 0 0-2.5-2.5Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"path\",{d:\"M10 13.958a1.042 1.042 0 1 0 0-2.083 1.042 1.042 0 0 0 0 2.083Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"UnlockedIcon\",style:{maskType:\"alpha\"},maskUnits:\"userSpaceOnUse\",x:6,y:1,width:9,height:9,children:(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M6.399 9.561V5.175c0-.93.401-1.823 1.116-2.48a3.981 3.981 0 0 1 2.693-1.028c1.01 0 1.98.37 2.694 1.027.715.658 1.116 1.55 1.116 2.481\",fill:\"#fff\"})}),(0,u.jsx)(\"g\",{mask:\"url(#UnlockedIcon)\",children:(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M5.149 9.561v1.25h2.5v-1.25h-2.5Zm5.06-7.894V.417v1.25Zm2.559 3.508v1.25h2.5v-1.25h-2.5ZM7.648 8.51V5.175h-2.5V8.51h2.5Zm0-3.334c0-.564.243-1.128.713-1.561L6.668 1.775c-.959.883-1.52 2.104-1.52 3.4h2.5Zm.713-1.561a2.732 2.732 0 0 1 1.847-.697v-2.5c-1.31 0-2.585.478-3.54 1.358L8.36 3.614Zm1.847-.697c.71 0 1.374.26 1.847.697l1.694-1.839a5.231 5.231 0 0 0-3.54-1.358v2.5Zm1.847.697c.47.433.713.997.713 1.561h2.5c0-1.296-.56-2.517-1.52-3.4l-1.693 1.839Z\",fill:\"currentColor\"})})]}),v),E=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M13.542 8.542H6.458a2.5 2.5 0 0 0-2.5 2.5v3.75a2.5 2.5 0 0 0 2.5 2.5h7.084a2.5 2.5 0 0 0 2.5-2.5v-3.75a2.5 2.5 0 0 0-2.5-2.5Z\"}),(0,u.jsx)(\"path\",{d:\"M10 13.958a1.042 1.042 0 1 0 0-2.083 1.042 1.042 0 0 0 0 2.083Z\"}),(0,u.jsx)(\"path\",{d:\"M6.667 8.333V5.417C6.667 3.806 8.159 2.5 10 2.5c1.841 0 3.333 1.306 3.333 2.917v2.916\"})]}),v),S=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M38.5 83.5c-14-2-17.833-10.473-21-22.5C14.333 48.984 12 22 12 12.5\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"m12.005 10.478 7.905 14.423L6 25.75l6.005-15.273Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M12.005 10.478c1.92 3.495 3.838 7 7.905 14.423m-7.905-14.423c3.11 5.683 6.23 11.368 7.905 14.423m0 0c-3.68.226-7.35.455-13.91.85m13.91-.85c-5.279.33-10.566.647-13.91.85m0 0c1.936-4.931 3.882-9.86 6.005-15.273M6 25.75c2.069-5.257 4.135-10.505 6.005-15.272\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"})]}),{width:41,height:94,fill:\"none\"}),j=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M18.026 1.232c-5.268 13.125-5.548 33.555 3.285 42.311 8.823 8.75 33.31 12.304 42.422 13.523\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"m72.181 59.247-13.058-10-2.948 13.62 16.006-3.62Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M72.181 59.247c-3.163-2.429-6.337-4.856-13.058-10m13.058 10c-5.145-3.936-10.292-7.882-13.058-10m0 0c-.78 3.603-1.563 7.196-2.948 13.62m2.948-13.62c-1.126 5.168-2.24 10.346-2.948 13.62m0 0c5.168-1.166 10.334-2.343 16.006-3.62m-16.006 3.62c5.51-1.248 11.01-2.495 16.006-3.62\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"})]}),{width:85,height:71,fill:\"none\"}),_=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M1 77c14-2 31.833-11.973 35-24 3.167-12.016-6-35-9.5-43.5\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"m24.165 1.093-2.132 16.309 13.27-4.258-11.138-12.05Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M24.165 1.093c-.522 3.953-1.037 7.916-2.132 16.309m2.131-16.309c-.835 6.424-1.68 12.854-2.13 16.308m0 0c3.51-1.125 7.013-2.243 13.27-4.257m-13.27 4.257c5.038-1.608 10.08-3.232 13.27-4.257m0 0c-3.595-3.892-7.197-7.777-11.14-12.05m11.14 12.05c-3.837-4.148-7.667-8.287-11.14-12.05\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"})]}),{width:38,height:78,fill:\"none\"}),O=m((0,u.jsxs)(\"g\",{fill:\"currentColor\",children:[(0,u.jsx)(\"path\",{d:\"M24.296 12.214c0 .112-.134.224-.291.224-.135 0-.516.629-.808 1.392-.897 2.335-9.867 20.096-9.89 19.534 0-.292-.134-.494-.359-.494-.313 0-.358.18-.224 1.055.135 1.01.045 1.236-3.14 7.432-1.793 3.525-3.722 7.208-4.282 8.196-.584 1.032-1.032 2.155-1.077 2.626-.067.809.022.92 1.973 2.605 1.122.988 2.557 2.223 3.185 2.784 2.826 2.582 4.149 3.615 4.508 3.547.538-.09 8.858-8.823 8.88-9.317 0-.225-.403-3.638-.897-7.59-.852-6.735-1.66-14.616-1.57-15.38.068-.47-.269-2.85-.516-3.884-.201-.808-.112-1.145 1.503-4.827.942-2.178 2.176-4.85 2.714-5.928.515-1.077.964-2.02.964-2.088 0-.067-.157-.112-.336-.112-.18 0-.337.09-.337.225Zm-5.158 16.772c.247 1.572.74 5.344 1.099 8.375.695 5.568 1.503 11.742 1.727 13.314.135.786.045.943-1.413 2.56-2.534 2.851-5.225 5.658-6.145 6.376l-.852.674-4.373-4.086c-4.037-3.728-4.373-4.11-4.127-4.558a5154.2 5154.2 0 0 1 2.535-4.626 727.864 727.864 0 0 0 3.678-6.78c.784-1.46 1.502-2.717 1.637-2.785.156-.09.201 2.178.156 7.006-.09 7.207-.067 7.23.651 7.072.09 0 .157-3.637.157-8.06V35.43l2.355-4.715c1.3-2.605 2.377-4.693 2.422-4.67.045.022.27 1.347.493 2.94ZM9.562 1.818C7.903 3.143 5.346 5.388 3.328 7.32L1.735 8.823l.292 1.976c.157 1.078.449 3.188.628 4.67.202 1.482.404 2.874.47 3.077.09.269 0 .404-.246.404-.426 0-.449-.113.718 3.592.286.952.577 1.903.875 2.851.044.158.224.225.425.158.202-.09.314-.27.247-.427-.067-.18.045-.36.224-.427.247-.09.225-.269-.157-.92-.605-1.01-2.152-9.633-2.242-12.416-.067-1.976-.067-1.999.762-3.121.808-1.1 2.67-2.762 5.54-4.873.807-.605 1.614-1.28 1.839-1.504.336-.404.493-.292 3.319 2.717 1.637 1.729 3.453 3.502 4.037 3.952l1.076.808-.83 1.75c-.448.944-2.265 4.581-4.059 8.04-3.745 7.274-2.983 6.578-7.333 6.645l-2.826.023-.942 1.077c-.987 1.146-1.121 1.572-.65 2.29.18.248.313.652.313.898 0 .405.157.472 1.055.517.56.023 1.076.09 1.144.157.067.068.156 1.46.224 3.098l.09 2.965-1.503 3.232C1.735 45.422.749 47.891.749 48.7c0 .427.09.786.18.786.224 0 .224-.022 9.35-19.085a4398.495 4398.495 0 0 1 8.927-18.546c.672-1.369 1.278-2.626 1.323-2.806.045-.202-1.503-1.751-3.97-3.93-2.22-1.975-4.171-3.772-4.35-3.974-.516-.628-1.279-.426-2.647.674ZM8.441 31.231c-.18.472-.65 1.46-1.031 2.2-.629 1.258-.696 1.303-.853.786-.09-.314-.157-1.235-.18-2.066-.022-1.639-.067-1.616 1.817-1.728L8.8 30.4l-.358.831Zm1.884-3.592c-1.032 1.998-1.077 2.02-3.903 2.155-2.489.135-2.533.112-2.533-.36 0-.269-.09-.628-.203-.808-.134-.202-.044-.56.27-1.055l.493-.763H6.69c1.234-.023 2.647-.113 3.14-.202.494-.09.92-.135.965-.113.045.023-.18.54-.471 1.146Zm-.09-20.477c-.404.292-.516.584-.516 1.325 0 .875.067 1.01.673 1.257.605.247.763.224 1.458-.247.92-.629.941-.786.269-1.796-.583-.876-1.166-1.033-1.884-.54Z\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M23.703 11.793c.166-.291.501-.514.93-.514.38 0 .698.161.82.283.161.162.225.35.225.54a.822.822 0 0 1-.056.289c-.08.218-.5 1.106-.983 2.116-.535 1.071-1.76 3.727-2.699 5.895-.79 1.802-1.209 2.784-1.404 3.416-.142.461-.132.665-.058.961.264 1.103.6 3.647.53 4.132-.088.756.727 8.547 1.57 15.21.5 3.997.903 7.45.903 7.676l-.001.033c-.004.087-.041.288-.211.54-.24.354-.914 1.143-1.8 2.119-2.004 2.21-5.107 5.423-6.463 6.653-.322.292-.566.485-.696.56a.884.884 0 0 1-.289.111c-.194.037-.579-.007-1.11-.349-.707-.453-1.981-1.522-4-3.366-.627-.561-2.061-1.794-3.176-2.776-.81-.699-1.308-1.138-1.612-1.466-.32-.343-.47-.61-.549-.87-.078-.257-.085-.515-.055-.874.05-.52.521-1.769 1.166-2.91.559-.985 2.48-4.654 4.269-8.17 1.579-3.071 2.392-4.663 2.792-5.612.32-.759.329-1 .277-1.387-.085-.553-.092-.891-.052-1.092a.942.942 0 0 1 .274-.52c.164-.157.384-.261.704-.261.094 0 .184.011.27.033 1.924-3.44 8.554-16.632 9.316-18.616.276-.724.64-1.336.848-1.556a.965.965 0 0 1 .32-.228Zm-5.399 16.402c-.49.942-.971 1.888-1.446 2.837l-2.28 4.565v7.871c0 4.023-.06 7.404-.136 8.04-.067.552-.474.691-.654.722l.075-.008c-.317.07-.574.063-.778-.023-.234-.098-.5-.297-.63-.857-.156-.681-.158-2.462-.103-6.893.019-2.022.022-3.592.008-4.725-.156.276-.315.562-.467.843a737.624 737.624 0 0 1-3.682 6.79 3618.972 3618.972 0 0 0-2.462 4.493c.062.088.169.231.289.364.55.61 1.631 1.623 3.624 3.462l3.931 3.674.377-.298c.907-.709 3.554-3.479 6.055-6.293.425-.47.73-.814.946-1.084.175-.22.28-.36.319-.501.031-.117.002-.227-.024-.379l-.004-.02c-.224-1.572-1.032-7.753-1.728-13.33-.358-3.022-.85-6.782-1.096-8.349l-.002-.01c-.042-.301-.087-.603-.132-.891ZM9.118 1.264C9.91.628 10.537.27 11.028.144c.727-.186 1.27.003 1.713.53.186.209 2.107 1.972 4.287 3.912 2.02 1.783 3.434 3.16 3.897 3.743.326.41.322.756.296.873a1.046 1.046 0 0 1-.005.018c-.047.188-.669 1.512-1.374 2.947a4348.55 4348.55 0 0 0-8.923 18.54c-7.335 15.32-8.808 18.396-9.217 19.015-.235.355-.419.404-.525.437a.815.815 0 0 1-.249.036.745.745 0 0 1-.647-.363C.176 49.67.04 49.222.04 48.7c0-.286.09-.754.316-1.434.452-1.356 1.466-3.722 3.225-7.53l1.432-3.083-.084-2.787a72.902 72.902 0 0 0-.156-2.53 7.307 7.307 0 0 0-.539-.046c-.463-.024-.764-.062-.96-.124-.304-.096-.48-.252-.598-.438-.105-.165-.17-.374-.17-.663 0-.134-.081-.348-.178-.481l-.019-.028c-.293-.448-.406-.831-.373-1.234.04-.484.34-1.052 1.08-1.91l.759-.869c-.103-.325-.471-1.513-.854-2.787-.737-2.339-1.004-3.238-1.018-3.578-.016-.393.134-.59.27-.715a.721.721 0 0 1 .192-.125 89.87 89.87 0 0 1-.414-2.782 231.651 231.651 0 0 0-.625-4.652l-.292-1.976a.71.71 0 0 1 .215-.62l1.589-1.501C4.87 4.86 7.446 2.599 9.118 1.264Zm-1.833 33.75a.819.819 0 0 1-.406.208.73.73 0 0 1-.491-.063l.048 1.618v.009l.849-1.773Zm5.874.697c-.035.087-.07.175-.107.261a20.92 20.92 0 0 1-.36.798.688.688 0 0 1 .457.007l.01.004v-1.07Zm.72-1.892-.015.018a.745.745 0 0 1-.407.236c.02.195.027.378 0 .592l.422-.846ZM7.7 31.175c-.268.027-.489.055-.6.07-.006.056-.013.13-.016.194-.005.19 0 .42.004.694.003.111.006.225.011.338.232-.471.459-.956.6-1.296Zm2.12-1.456a2.04 2.04 0 0 1-.415.31c.064.104.099.222.104.341l.132-.277.18-.374Zm-.14-2.374c-.654.079-1.882.153-2.974.173h-1.87l-.281.435c-.09.141-.17.331-.203.414.102.21.189.508.226.788h.007c.364.006.928-.023 1.805-.07 1.243-.06 1.88-.052 2.315-.291.154-.086.266-.215.387-.393.176-.261.354-.605.587-1.056Zm2.136-1.784c-.157.16-.331.3-.52.422a.631.631 0 0 1 .182.281l.337-.703Zm7.205-1.478c-.222.442-.445.883-.667 1.32a.787.787 0 0 1 .61.007c.036.018.145.07.243.2-.032-.165-.067-.33-.105-.493-.088-.351-.137-.633-.08-1.034h-.001ZM11.415 2.546c-.358.319-1.039.879-1.725 1.394C6.903 5.989 5.087 7.59 4.301 8.662c-.28.38-.458.605-.556.852-.15.38-.103.798-.068 1.824.063 1.923.833 6.669 1.493 9.686.262 1.199.483 2.11.654 2.394.25.426.364.71.398.894a.923.923 0 0 1-.184.764l1.27-.01c.863-.014 1.523.003 2.056-.019.424-.017.75-.052 1.034-.187.336-.159.596-.458.921-.955.62-.948 1.373-2.515 2.705-5.103 1.789-3.448 3.6-7.076 4.047-8.015l.582-1.227-.62-.466c-.595-.458-2.45-2.263-4.12-4.027a59.654 59.654 0 0 0-2.498-2.52ZM5.81 24.876v-.001l-.013-.03.013.031Zm-.71-.835.027-.011a.55.55 0 0 0-.028.011Zm19.904-11.777v.01-.01Zm.002-.016v-.034.034ZM9.82 6.587c-.587.424-.81.823-.81 1.9 0 .787.12 1.157.344 1.42.158.186.388.339.77.494.352.144.603.207.838.209.347.002.688-.12 1.285-.525.707-.483.98-.864 1.036-1.238.052-.352-.09-.812-.574-1.54-.412-.619-.853-.95-1.29-1.072-.489-.139-1.016-.05-1.586.342l-.013.01Zm2.015 2.028a6.288 6.288 0 0 0-.306-.52c-.19-.284-.326-.488-.531-.5-.113-.007-.224.058-.352.146-.218.159-.218.34-.218.745 0 .198.02.419.028.504.047.025.133.068.204.097.133.054.222.102.312.103.04 0 .071-.027.12-.054a4.29 4.29 0 0 0 .358-.225c.147-.1.299-.223.385-.296ZM9.12 1.263l-.002.002.002-.002Z\"})]}),{width:26,height:62,fill:\"none\"}),C=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M6 6l4.153 11.793a0.365 .365 0 0 0 .331 .207a0.366 .366 0 0 0 .332 -.207l2.184 -4.793l4.787 -1.994a0.355 .355 0 0 0 .213 -.323a0.355 .355 0 0 0 -.213 -.323l-11.787 -4.36z\"}),(0,u.jsx)(\"path\",{d:\"M13.5 13.5l4.5 4.5\"})]}),{fill:\"none\",width:22,height:22,strokeWidth:1.25}),I=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"rect\",{x:\"4\",y:\"4\",width:\"16\",height:\"16\",rx:\"2\"})]}),g),M=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M10.5 20.4l-6.9 -6.9c-.781 -.781 -.781 -2.219 0 -3l6.9 -6.9c.781 -.781 2.219 -.781 3 0l6.9 6.9c.781 .781 .781 2.219 0 3l-6.9 6.9c-.781 .781 -2.219 .781 -3 0z\"})]}),g),T=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"12\",r:\"9\"})]}),g),P=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"5\",y1:\"12\",x2:\"19\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"15\",y1:\"16\",x2:\"19\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"15\",y1:\"8\",x2:\"19\",y2:\"12\"})]}),g),D=m((0,u.jsx)(\"path\",{d:\"M4.167 10h11.666\",strokeWidth:\"1.5\"}),v),A=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M20 17v-12c0 -1.121 -.879 -2 -2 -2s-2 .879 -2 2v12l2 2l2 -2z\"}),(0,u.jsx)(\"path\",{d:\"M16 7h4\"}),(0,u.jsx)(\"path\",{d:\"M18 19h-13a2 2 0 1 1 0 -4h4a2 2 0 1 0 0 -4h-3\"})]}),g),L=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{clipRule:\"evenodd\",d:\"m7.643 15.69 7.774-7.773a2.357 2.357 0 1 0-3.334-3.334L4.31 12.357a3.333 3.333 0 0 0-.977 2.357v1.953h1.953c.884 0 1.732-.352 2.357-.977Z\"}),(0,u.jsx)(\"path\",{d:\"m11.25 5.417 3.333 3.333\"})]}),v),Z=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"20\",x2:\"7\",y2:\"20\"}),(0,u.jsx)(\"line\",{x1:\"14\",y1:\"20\",x2:\"21\",y2:\"20\"}),(0,u.jsx)(\"line\",{x1:\"6.9\",y1:\"15\",x2:\"13.8\",y2:\"15\"}),(0,u.jsx)(\"line\",{x1:\"10.2\",y1:\"6.3\",x2:\"16\",y2:\"20\"}),(0,u.jsx)(\"polyline\",{points:\"5 20 11 4 13 4 20 20\"})]}),g),z=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M12.5 6.667h.01\"}),(0,u.jsx)(\"path\",{d:\"M4.91 2.625h10.18a2.284 2.284 0 0 1 2.285 2.284v10.182a2.284 2.284 0 0 1-2.284 2.284H4.909a2.284 2.284 0 0 1-2.284-2.284V4.909a2.284 2.284 0 0 1 2.284-2.284Z\"}),(0,u.jsx)(\"path\",{d:\"m3.333 12.5 3.334-3.333c.773-.745 1.726-.745 2.5 0l4.166 4.166\"}),(0,u.jsx)(\"path\",{d:\"m11.667 11.667.833-.834c.774-.744 1.726-.744 2.5 0l1.667 1.667\"})]}),v),R=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M19 20h-10.5l-4.21 -4.3a1 1 0 0 1 0 -1.41l10 -10a1 1 0 0 1 1.41 0l5 5a1 1 0 0 1 0 1.41l-9.2 9.3\"}),(0,u.jsx)(\"path\",{d:\"M18 13.3l-6.3 -6.3\"})]}),g),N=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M10 4.167v11.666M4.167 10h11.666\"}),v),B=m((0,u.jsx)(\"path\",{d:\"M5 10h10\",strokeWidth:\"1.25\"}),v),H=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M3.333 5.833h13.334M8.333 9.167v5M11.667 9.167v5M4.167 5.833l.833 10c0 .92.746 1.667 1.667 1.667h6.666c.92 0 1.667-.746 1.667-1.667l.833-10M7.5 5.833v-2.5c0-.46.373-.833.833-.833h3.334c.46 0 .833.373.833.833v2.5\"}),v),W=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M14.375 6.458H8.958a2.5 2.5 0 0 0-2.5 2.5v5.417a2.5 2.5 0 0 0 2.5 2.5h5.417a2.5 2.5 0 0 0 2.5-2.5V8.958a2.5 2.5 0 0 0-2.5-2.5Z\"}),(0,u.jsx)(\"path\",{clipRule:\"evenodd\",d:\"M11.667 3.125c.517 0 .986.21 1.325.55.34.338.55.807.55 1.325v1.458H8.333c-.485 0-.927.185-1.26.487-.343.312-.57.75-.609 1.24l-.005 5.357H5a1.87 1.87 0 0 1-1.326-.55 1.87 1.87 0 0 1-.549-1.325V5c0-.518.21-.987.55-1.326.338-.34.807-.549 1.325-.549h6.667Z\"})]}),v),F=m((0,u.jsx)(\"path\",{clipRule:\"evenodd\",d:\"M10 2.5h.328a6.25 6.25 0 0 0 6.6 10.372A7.5 7.5 0 1 1 10 2.493V2.5Z\",stroke:\"currentColor\"}),v),U=m((0,u.jsx)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M10 12.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM10 4.167V2.5M14.167 5.833l1.166-1.166M15.833 10H17.5M14.167 14.167l1.166 1.166M10 15.833V17.5M5.833 14.167l-1.166 1.166M5 10H3.333M5.833 5.833 4.667 4.667\"})}),v),K=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"6\",x2:\"20\",y2:\"6\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"12\",x2:\"20\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"18\",x2:\"20\",y2:\"18\"})]}),g),Y=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M3.333 14.167v1.666c0 .92.747 1.667 1.667 1.667h10c.92 0 1.667-.746 1.667-1.667v-1.666M5.833 9.167 10 13.333l4.167-4.166M10 3.333v10\"}),v),G=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"12\",r:\"9\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"17\",x2:\"12\",y2:\"17.01\"}),(0,u.jsx)(\"path\",{d:\"M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4\"})]}),g),V=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M9.167 5.833H5.833c-1.254 0-2.5 1.282-2.5 2.5v5.834c0 1.283 1.252 2.5 2.5 2.5h5.834c1.251 0 2.5-1.25 2.5-2.5v-3.334M8.333 11.667l8.334-8.334M12.5 3.333h4.167V7.5\"}),v),X=m((0,u.jsx)(\"path\",{d:\"M7.5 15.833c-3.583 1.167-3.583-2.083-5-2.5m10 4.167v-2.917c0-.833.083-1.166-.417-1.666 2.334-.25 4.584-1.167 4.584-5a3.833 3.833 0 0 0-1.084-2.667 3.5 3.5 0 0 0-.083-2.667s-.917-.25-2.917 1.084a10.25 10.25 0 0 0-5.166 0C5.417 2.333 4.5 2.583 4.5 2.583a3.5 3.5 0 0 0-.083 2.667 3.833 3.833 0 0 0-1.084 2.667c0 3.833 2.25 4.75 4.584 5-.5.5-.5 1-.417 1.666V17.5\",strokeWidth:\"1.25\"}),v),q=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M7.5 10.833a.833.833 0 1 0 0-1.666.833.833 0 0 0 0 1.666ZM12.5 10.833a.833.833 0 1 0 0-1.666.833.833 0 0 0 0 1.666ZM6.25 6.25c2.917-.833 4.583-.833 7.5 0M5.833 13.75c2.917.833 5.417.833 8.334 0\"}),(0,u.jsx)(\"path\",{d:\"M12.917 14.167c0 .833 1.25 2.5 1.666 2.5 1.25 0 2.361-1.39 2.917-2.5.556-1.39.417-4.861-1.25-9.584-1.214-.846-2.5-1.116-3.75-1.25l-.833 2.084M7.083 14.167c0 .833-1.13 2.5-1.526 2.5-1.191 0-2.249-1.39-2.778-2.5-.529-1.39-.397-4.861 1.19-9.584 1.157-.846 2.318-1.116 3.531-1.25l.833 2.084\"})]}),v),J=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z\"})]}),g),$=m((0,u.jsx)(\"polyline\",{fill:\"none\",stroke:\"currentColor\",points:\"20 6 9 17 4 12\"}),{width:24,height:24}),Q=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M8.333 11.667a2.917 2.917 0 0 0 4.167 0l3.333-3.334a2.946 2.946 0 1 0-4.166-4.166l-.417.416\"}),(0,u.jsx)(\"path\",{d:\"M11.667 8.333a2.917 2.917 0 0 0-4.167 0l-3.333 3.334a2.946 2.946 0 0 0 4.166 4.166l.417-.416\"})]}),v),ee=m(\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\",{width:448,height:512}),te=m(\"M252 54L203 8a28 27 0 00-20-8H28C12 0 0 12 0 27v195c0 15 12 26 28 26h204c15 0 28-11 28-26V73a28 27 0 00-8-19zM130 213c-21 0-37-16-37-36 0-19 16-35 37-35 20 0 37 16 37 35 0 20-17 36-37 36zm56-169v56c0 4-4 6-7 6H44c-4 0-7-2-7-6V42c0-4 3-7 7-7h133l4 2 3 2a7 7 0 012 5z M296 201l87 95-188 205-78 9c-10 1-19-8-18-20l9-84zm141-14l-41-44a31 31 0 00-46 0l-38 41 87 95 38-42c13-14 13-36 0-50z\",{width:448,height:512}),ne=m((0,u.jsx)(\"path\",{d:\"m9.257 6.351.183.183H15.819c.34 0 .727.182 1.051.506.323.323.505.708.505 1.05v5.819c0 .316-.183.7-.52 1.035-.337.338-.723.522-1.037.522H4.182c-.352 0-.74-.181-1.058-.5-.318-.318-.499-.705-.499-1.057V5.182c0-.351.181-.736.5-1.054.32-.321.71-.503 1.057-.503H6.53l2.726 2.726Z\",strokeWidth:\"1.25\"}),v),re=m(\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\",{width:384,height:512}),oe=m(\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"),ie=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M15 8h.01\"}),(0,u.jsx)(\"path\",{d:\"M12 20h-5a3 3 0 0 1 -3 -3v-10a3 3 0 0 1 3 -3h10a3 3 0 0 1 3 3v5\"}),(0,u.jsx)(\"path\",{d:\"M4 15l4 -4c.928 -.893 2.072 -.893 3 0l4 4\"}),(0,u.jsx)(\"path\",{d:\"M14 14l1 -1c.617 -.593 1.328 -.793 2.009 -.598\"}),(0,u.jsx)(\"path\",{d:\"M19 16v6\"}),(0,u.jsx)(\"path\",{d:\"M22 19l-3 3l-3 -3\"})]}),g),ae=m(\"M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z\",{width:512,height:512}),le=(m(\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),m(\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),m(\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\")),se=(m(\"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"),m((0,u.jsx)(\"path\",{d:\"M7.5 10.833 4.167 7.5 7.5 4.167M4.167 7.5h9.166a3.333 3.333 0 0 1 0 6.667H12.5\",strokeWidth:\"1.25\"}),v)),ce=m((0,u.jsx)(\"path\",{d:\"M12.5 10.833 15.833 7.5 12.5 4.167M15.833 7.5H6.667a3.333 3.333 0 1 0 0 6.667H7.5\",strokeWidth:\"1.25\"}),v),ue=m(\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z\",{mirror:!0}),de=(m((0,u.jsx)(\"path\",{d:\"M5 12.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM15 7.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM15 17.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM7.25 8.917l5.5-2.834M7.25 11.083l5.5 2.834\",strokeWidth:\"1.5\"}),v),m(\"M16 5l-1.42 1.42-1.59-1.59V16h-1.98V4.83L9.42 6.42 8 5l4-4 4 4zm4 5v11c0 1.1-.9 2-2 2H6c-1.11 0-2-.9-2-2V10c0-1.11.89-2 2-2h3v2H6v11h12V10h-3V8h3c1.1 0 2 .89 2 2z\",{width:24,height:24}),m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{fill:\"currentColor\",d:\"M40 5.6v6.1l-4.1.7c-8.9 1.4-16.5 6.9-20.6 15C13 32 10.9 43 12.4 43c.4 0 2.4-1.3 4.4-3 5-3.9 12.1-7 18.2-7.7l5-.6v12.8l11.2-11.3L62.5 22 51.2 10.8 40-.5v6.1zm10.2 22.6L44 34.5v-6.8l-6.9.6c-3.9.3-9.8 1.7-13.2 3.1-3.5 1.4-6.5 2.4-6.7 2.2-.9-1 3-7.5 6.4-10.8C28 18.6 34.4 16 40.1 16c3.7 0 3.9-.1 3.9-3.2V9.5l6.2 6.3 6.3 6.2-6.3 6.2z\"}),(0,u.jsx)(\"path\",{stroke:\"currentColor\",fill:\"currentColor\",d:\"M0 36v20h48v-6.2c0-6 0-6.1-2-4.3-1.1 1-2 2.9-2 4.2V52H4V34c0-17.3-.1-18-2-18s-2 .7-2 20z\"})]}),{width:64,height:64}),m((0,u.jsx)(\"path\",{stroke:\"currentColor\",strokeWidth:\"40\",fill:\"currentColor\",d:\"M148 560a318 318 0 0 0 522 110 316 316 0 0 0 0-450 316 316 0 0 0-450 0c-11 11-21 22-30 34v4h47c25 0 46 21 46 46s-21 45-46 45H90c-13 0-25-6-33-14-9-9-14-20-14-33V156c0-25 20-45 45-45s45 20 45 45v32l1 1a401 401 0 0 1 623 509l212 212a42 42 0 0 1-59 59L698 757A401 401 0 0 1 65 570a42 42 0 0 1 83-10z\"}),{width:1024}),m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{d:\"M13.889 4.167H8.333c-.767 0-1.389.622-1.389 1.389v5.555c0 .767.622 1.389 1.39 1.389h5.555c.767 0 1.389-.622 1.389-1.389V5.556c0-.767-.622-1.39-1.39-1.39Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M12.5 12.5v1.389a1.389 1.389 0 0 1-1.389 1.389H5.556a1.389 1.389 0 0 1-1.39-1.39V8.334a1.389 1.389 0 0 1 1.39-1.389h1.388\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v)),fe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M6.944 12.5H12.5v1.389a1.389 1.389 0 0 1-1.389 1.389H5.556a1.389 1.389 0 0 1-1.39-1.39V8.334a1.389 1.389 0 0 1 1.39-1.389h1.388\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M13.889 4.167H8.333c-.767 0-1.389.621-1.389 1.389v5.555c0 .767.622 1.389 1.39 1.389h5.555c.767 0 1.389-.622 1.389-1.389V5.556c0-.768-.622-1.39-1.39-1.39Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),pe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M8.775 6.458h2.45a2.316 2.316 0 0 1 2.317 2.316v2.452a2.316 2.316 0 0 1-2.316 2.316H8.774a2.316 2.316 0 0 1-2.317-2.316V8.774a2.316 2.316 0 0 1 2.317-2.316Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M5.441 9.792h2.451a2.316 2.316 0 0 1 2.316 2.316v2.45a2.316 2.316 0 0 1-2.316 2.317h-2.45a2.316 2.316 0 0 1-2.317-2.316v-2.451a2.316 2.316 0 0 1 2.316-2.316ZM12.108 3.125h2.45a2.316 2.316 0 0 1 2.317 2.316v2.451a2.316 2.316 0 0 1-2.316 2.316h-2.451a2.316 2.316 0 0 1-2.316-2.316v-2.45a2.316 2.316 0 0 1 2.316-2.317Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),he=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",children:[(0,u.jsx)(\"path\",{d:\"M5.441 9.792h2.451a2.316 2.316 0 0 1 2.316 2.316v2.45a2.316 2.316 0 0 1-2.316 2.317h-2.45a2.316 2.316 0 0 1-2.317-2.316v-2.451a2.316 2.316 0 0 1 2.316-2.316Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"path\",{d:\"M5.441 9.792h2.451a2.316 2.316 0 0 1 2.316 2.316v2.45a2.316 2.316 0 0 1-2.316 2.317h-2.45a2.316 2.316 0 0 1-2.317-2.316v-2.451a2.316 2.316 0 0 1 2.316-2.316Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"SendToBackIcon\",fill:\"#fff\",children:(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M9.167 5.833v2.06a2.941 2.941 0 0 0 2.94 2.94h2.06v.393a2.941 2.941 0 0 1-2.941 2.94h-.393v-2.058a2.941 2.941 0 0 0-2.94-2.941h-2.06v-.393a2.941 2.941 0 0 1 2.942-2.94h.392Z\"})}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M9.167 5.833v2.06a2.941 2.941 0 0 0 2.94 2.94h2.06v.393a2.941 2.941 0 0 1-2.941 2.94h-.393v-2.058a2.941 2.941 0 0 0-2.94-2.941h-2.06v-.393a2.941 2.941 0 0 1 2.942-2.94h.392Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M9.167 5.833h1.25v-1.25h-1.25v1.25Zm5 5h1.25v-1.25h-1.25v1.25Zm-3.334 3.334h-1.25v1.25h1.25v-1.25Zm-5-5h-1.25v1.25h1.25v-1.25Zm2.084-3.334v2.06h2.5v-2.06h-2.5Zm0 2.06a4.191 4.191 0 0 0 4.19 4.19v-2.5a1.691 1.691 0 0 1-1.69-1.69h-2.5Zm4.19 4.19h2.06v-2.5h-2.06v2.5Zm.81-1.25v.393h2.5v-.393h-2.5Zm0 .393c0 .933-.758 1.69-1.691 1.69v2.5a4.191 4.191 0 0 0 4.19-4.19h-2.5Zm-1.691 1.69h-.393v2.5h.393v-2.5Zm.857 1.25v-2.058h-2.5v2.059h2.5Zm0-2.058a4.191 4.191 0 0 0-4.19-4.191v2.5c.933 0 1.69.757 1.69 1.69h2.5Zm-4.19-4.191h-2.06v2.5h2.06v-2.5Zm-.81 1.25v-.393h-2.5v.393h2.5Zm0-.393c0-.934.758-1.69 1.692-1.69v-2.5a4.191 4.191 0 0 0-4.192 4.19h2.5Zm1.692-1.69h.392v-2.5h-.392v2.5Z\",fill:\"currentColor\",mask:\"url(#SendToBackIcon)\"}),(0,u.jsx)(\"path\",{d:\"M12.108 3.125h2.45a2.316 2.316 0 0 1 2.317 2.316v2.451a2.316 2.316 0 0 1-2.316 2.316h-2.451a2.316 2.316 0 0 1-2.316-2.316v-2.45a2.316 2.316 0 0 1 2.316-2.317Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),me=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 3.333h13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M13.542 6.458h-.417c-.92 0-1.667.747-1.667 1.667v7.083c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667V8.125c0-.92-.746-1.667-1.666-1.667ZM6.875 6.458h-.417c-.92 0-1.666.747-1.666 1.667v3.75c0 .92.746 1.667 1.666 1.667h.417c.92 0 1.667-.746 1.667-1.667v-3.75c0-.92-.747-1.667-1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),ge=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 16.667h13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M6.875 3.125h-.417c-.92 0-1.666.746-1.666 1.667v7.083c0 .92.746 1.667 1.666 1.667h.417c.92 0 1.667-.746 1.667-1.667V4.792c0-.92-.747-1.667-1.667-1.667ZM13.542 5.817h-.417c-.92 0-1.667.747-1.667 1.667v4.391c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667V7.484c0-.92-.746-1.667-1.666-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),ve=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 3.333v13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M15.208 4.792H8.125c-.92 0-1.667.746-1.667 1.666v.417c0 .92.747 1.667 1.667 1.667h7.083c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666ZM12.516 11.458H8.125c-.92 0-1.667.746-1.667 1.667v.417c0 .92.747 1.666 1.667 1.666h4.391c.92 0 1.667-.746 1.667-1.666v-.417c0-.92-.746-1.667-1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),be=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M16.667 3.333v13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M11.875 4.792H4.792c-.92 0-1.667.746-1.667 1.666v.417c0 .92.746 1.667 1.667 1.667h7.083c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666ZM11.683 11.458H7.292c-.92 0-1.667.746-1.667 1.667v.417c0 .92.746 1.666 1.667 1.666h4.39c.921 0 1.667-.746 1.667-1.666v-.417c0-.92-.746-1.667-1.666-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),ye=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M16.667 3.333v13.334M3.333 3.333v13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M14.375 10.208v-.416c0-.92-.746-1.667-1.667-1.667H7.292c-.92 0-1.667.746-1.667 1.667v.416c0 .92.746 1.667 1.667 1.667h5.416c.92 0 1.667-.746 1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),xe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 3.333h13.334M3.333 16.667h13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M10.208 5.625h-.416c-.92 0-1.667.746-1.667 1.667v5.416c0 .92.746 1.667 1.667 1.667h.416c.92 0 1.667-.746 1.667-1.667V7.292c0-.92-.746-1.667-1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),we=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M1.667 10h2.916\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M8.333 10h3.334\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M15.417 10h2.916\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M6.875 4.792h-.417c-.92 0-1.666.746-1.666 1.666v7.084c0 .92.746 1.666 1.666 1.666h.417c.92 0 1.667-.746 1.667-1.666V6.458c0-.92-.747-1.666-1.667-1.666ZM13.542 6.458h-.417c-.92 0-1.667.747-1.667 1.667v3.75c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667v-3.75c0-.92-.746-1.667-1.666-1.667Z\"})]}),v),ke=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M10 18.333v-2.916\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M10 11.667V8.333\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M10 4.583V1.667\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M4.792 13.125v.417c0 .92.746 1.666 1.666 1.666h7.084c.92 0 1.666-.746 1.666-1.666v-.417c0-.92-.746-1.667-1.666-1.667H6.458c-.92 0-1.666.746-1.666 1.667ZM6.458 6.458v.417c0 .92.747 1.667 1.667 1.667h3.75c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666h-3.75c-.92 0-1.667.746-1.667 1.666Z\"})]}),v),Ee=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"9\",cy:\"7\",r:\"4\"}),(0,u.jsx)(\"path\",{d:\"M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2\"}),(0,u.jsx)(\"path\",{d:\"M16 3.13a4 4 0 0 1 0 7.75\"}),(0,u.jsx)(\"path\",{d:\"M21 21v-2a4 4 0 0 0 -3 -3.85\"})]}),g),Se=(m(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z\"),m(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z\"),m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M15 5 5 15M5 5l10 10\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v)),je=m(\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\",{width:320,height:512,style:{marginLeft:\"-0.2rem\"},mirror:!0}),_e=(m(\"M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z\",{mirror:!0}),m(\"M11.553 22.894a.998.998 0 00.894 0s3.037-1.516 5.465-4.097C19.616 16.987 21 14.663 21 12V5a1 1 0 00-.649-.936l-8-3a.998.998 0 00-.702 0l-8 3A1 1 0 003 5v7c0 2.663 1.384 4.987 3.088 6.797 2.428 2.581 5.465 4.097 5.465 4.097zm-1.303-8.481l6.644-6.644a.856.856 0 111.212 1.212l-7.25 7.25a.856.856 0 01-1.212 0l-3.75-3.75a.856.856 0 111.212-1.212l3.144 3.144z\",{width:24}),m(\"M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z\",{width:384,height:512}),a().memo((function(e){var t=e.theme;return m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsxs)(\"g\",{fill:h(t),stroke:\"var(--icon-fill-color)\",strokeWidth:\"6\",children:[(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"2.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})}))),Oe=a().memo((function(e){var t=e.theme;return m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsxs)(\"g\",{fill:h(t),stroke:\"var(--icon-fill-color)\",strokeWidth:\"6\",children:[(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"78.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"78.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"105.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"102.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})})),Ce=m((0,u.jsx)(\"g\",{strokeWidth:1.25,children:(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.27 3.27 0 0 1 3.254 3.254v8.242a3.27 3.27 0 0 1-3.254 3.254H5.88a3.27 3.27 0 0 1-3.254-3.254V5.88A3.27 3.27 0 0 1 5.88 2.626l-.001-.001ZM4.518 16.118l7.608-12.83m.198 13.934 5.051-9.897M2.778 9.675l9.348-6.387m-7.608 12.83 12.857-8.793\"})}),v),Ie=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"FillHachureIcon\",style:{maskType:\"alpha\"},maskUnits:\"userSpaceOnUse\",x:2,y:2,width:16,height:16,children:(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z\",fill:\"currentColor\",stroke:\"currentColor\",strokeWidth:\"1.25\"})}),(0,u.jsx)(\"g\",{mask:\"url(#FillHachureIcon)\",children:(0,u.jsx)(\"path\",{d:\"M2.258 15.156 15.156 2.258M7.324 20.222 20.222 7.325m-20.444 5.35L12.675-.222m-8.157 18.34L17.416 5.22\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})})]}),v),Me=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",children:[(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"FillCrossHatchIcon\",style:{maskType:\"alpha\"},maskUnits:\"userSpaceOnUse\",x:-1,y:-1,width:22,height:22,children:(0,u.jsx)(\"path\",{d:\"M2.426 15.044 15.044 2.426M7.383 20 20 7.383M0 12.617 12.617 0m-7.98 17.941L17.256 5.324m-2.211 12.25L2.426 4.956M20 12.617 7.383 0m5.234 20L0 7.383m17.941 7.98L5.324 2.745\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"g\",{mask:\"url(#FillCrossHatchIcon)\",children:(0,u.jsx)(\"path\",{d:\"M14.121 2H5.88A3.879 3.879 0 0 0 2 5.879v8.242A3.879 3.879 0 0 0 5.879 18h8.242A3.879 3.879 0 0 0 18 14.121V5.88A3.879 3.879 0 0 0 14.121 2Z\",fill:\"currentColor\"})})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Te=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M4.91 2.625h10.18a2.284 2.284 0 0 1 2.285 2.284v10.182a2.284 2.284 0 0 1-2.284 2.284H4.909a2.284 2.284 0 0 1-2.284-2.284V4.909a2.284 2.284 0 0 1 2.284-2.284Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),p(p({},v),{},{fill:\"currentColor\"})),Pe=m((0,u.jsx)(u.Fragment,{children:(0,u.jsx)(\"path\",{d:\"M4.167 10h11.666\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),v),De=m((0,u.jsx)(\"path\",{d:\"M5 10h10\",stroke:\"currentColor\",strokeWidth:\"2.5\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),v),Ae=m((0,u.jsx)(\"path\",{d:\"M5 10h10\",stroke:\"currentColor\",strokeWidth:\"3.75\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),v),Le=m((0,u.jsxs)(\"g\",{strokeWidth:\"2\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M5 12h2\"}),(0,u.jsx)(\"path\",{d:\"M17 12h2\"}),(0,u.jsx)(\"path\",{d:\"M11 12h2\"})]}),g),Ze=m((0,u.jsxs)(\"g\",{strokeWidth:\"2\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M4 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M8 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M12 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M16 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M20 12v.01\"})]}),g),ze=m((0,u.jsx)(\"path\",{d:\"M2.5 12.038c1.655-.885 5.9-3.292 8.568-4.354 2.668-1.063.101 2.821 1.32 3.104 1.218.283 5.112-1.814 5.112-1.814\",strokeWidth:\"1.25\"}),v),Re=m((0,u.jsx)(\"path\",{d:\"M2.5 12.563c1.655-.886 5.9-3.293 8.568-4.355 2.668-1.062.101 2.822 1.32 3.105 1.218.283 5.112-1.814 5.112-1.814m-13.469 2.23c2.963-1.586 6.13-5.62 7.468-4.998 1.338.623-1.153 4.11-.132 5.595 1.02 1.487 6.133-1.43 6.133-1.43\",strokeWidth:\"1.25\"}),v),Ne=m((0,u.jsx)(\"path\",{d:\"M2.5 11.936c1.737-.879 8.627-5.346 10.42-5.268 1.795.078-.418 5.138.345 5.736.763.598 3.53-1.789 4.235-2.147M2.929 9.788c1.164-.519 5.47-3.28 6.987-3.114 1.519.165 1 3.827 2.121 4.109 1.122.281 3.839-2.016 4.606-2.42\",strokeWidth:\"1.25\"}),v),Be=m((0,u.jsxs)(\"svg\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{d:\"M3.33334 9.99998V6.66665C3.33334 6.04326 3.33403 4.9332 3.33539 3.33646C4.95233 3.33436 6.06276 3.33331 6.66668 3.33331H10\"}),(0,u.jsx)(\"path\",{d:\"M13.3333 3.33331V3.34331\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 3.33331V3.34331\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 6.66669V6.67669\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 10V10.01\"}),(0,u.jsx)(\"path\",{d:\"M3.33334 13.3333V13.3433\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 13.3333V13.3433\"}),(0,u.jsx)(\"path\",{d:\"M3.33334 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M6.66666 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M10 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M13.3333 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 16.6667V16.6767\"})]}),v),He=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M4 12v-4a4 4 0 0 1 4 -4h4\"}),(0,u.jsx)(\"line\",{x1:\"16\",y1:\"4\",x2:\"16\",y2:\"4.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"4\",x2:\"20\",y2:\"4.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"8\",x2:\"20\",y2:\"8.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"12\",x2:\"20\",y2:\"12.01\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"16\",x2:\"4\",y2:\"16.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"16\",x2:\"20\",y2:\"16.01\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"20\",x2:\"4\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"20\",x2:\"8\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"20\",x2:\"12\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"16\",y1:\"20\",x2:\"16\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"20\",x2:\"20\",y2:\"20.01\"})]}),g),We=m((0,u.jsx)(\"path\",{d:\"M6 10H34\",stroke:\"currentColor\",strokeWidth:2,fill:\"none\"}),{width:40,height:20}),Fe=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsxs)(\"g\",{transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",stroke:\"currentColor\",strokeWidth:2,fill:\"none\",children:[(0,u.jsx)(\"path\",{d:\"M34 10H6M34 10L27 5M34 10L27 15\"}),(0,u.jsx)(\"path\",{d:\"M27.5 5L34.5 10L27.5 15\"})]}),{width:40,height:20})})),Ue=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"currentColor\",transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",children:[(0,u.jsx)(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),(0,u.jsx)(\"circle\",{r:\"4\",transform:\"matrix(-1 0 0 1 30 10)\"})]}),{width:40,height:20})})),Ke=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsx)(\"g\",{transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",children:(0,u.jsx)(\"path\",{d:\"M34 10H5.99996M34 10L34 5M34 10L34 15\",stroke:\"currentColor\",strokeWidth:2,fill:\"none\"})}),{width:40,height:20})})),Ye=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"currentColor\",transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",children:[(0,u.jsx)(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),(0,u.jsx)(\"path\",{d:\"M27.5 5.5L34.5 10L27.5 14.5L27.5 5.5\"})]}),{width:40,height:20})})),Ge=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M14.167 6.667a3.333 3.333 0 0 0-3.334-3.334H9.167a3.333 3.333 0 0 0 0 6.667h1.666a3.333 3.333 0 0 1 0 6.667H9.167a3.333 3.333 0 0 1-3.334-3.334\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Ve=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M5 16.667V3.333L10 15l5-11.667v13.334\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Xe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M5.833 3.333v13.334h8.334\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),qe=m((0,u.jsx)(u.Fragment,{children:(0,u.jsx)(\"path\",{d:\"m1.667 3.333 6.666 13.334M8.333 3.333 1.667 16.667M11.667 3.333v13.334h6.666\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),v),Je=m((0,u.jsx)(u.Fragment,{children:(0,u.jsx)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M5.833 16.667v-10a3.333 3.333 0 0 1 3.334-3.334h1.666a3.333 3.333 0 0 1 3.334 3.334v10M5.833 10.833h8.334\"})})}),v),$e=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M5.833 6.667 2.5 10l3.333 3.333M14.167 6.667 17.5 10l-3.333 3.333M11.667 3.333 8.333 16.667\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Qe=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"8\",x2:\"20\",y2:\"8\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"12\",x2:\"12\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"16\",x2:\"16\",y2:\"16\"})]}),g),et=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"8\",x2:\"20\",y2:\"8\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"12\",x2:\"16\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"6\",y1:\"16\",x2:\"18\",y2:\"16\"})]}),g),tt=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"8\",x2:\"20\",y2:\"8\"}),(0,u.jsx)(\"line\",{x1:\"10\",y1:\"12\",x2:\"20\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"16\",x2:\"20\",y2:\"16\"})]}),g),nt=a().memo((function(e){e.theme;return m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"4\",x2:\"20\",y2:\"4\"}),(0,u.jsx)(\"rect\",{x:\"9\",y:\"8\",width:\"6\",height:\"12\",rx:\"2\"})]}),g)})),rt=a().memo((function(e){e.theme;return m((0,u.jsxs)(\"g\",{strokeWidth:\"2\",stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"20\",x2:\"20\",y2:\"20\"}),(0,u.jsx)(\"rect\",{x:\"9\",y:\"4\",width:\"6\",height:\"12\",rx:\"2\"})]}),g)})),ot=a().memo((function(e){e.theme;return m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"12\",x2:\"9\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"15\",y1:\"12\",x2:\"20\",y2:\"12\"}),(0,u.jsx)(\"rect\",{x:\"9\",y:\"6\",width:\"6\",height:\"12\",rx:\"2\"})]}),g)})),it=m((0,u.jsx)(\"path\",{d:\"M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4zM393.4 288H328v112c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V288h-65.4c-14.3 0-21.4-17.2-11.3-27.3l105.4-105.4c6.2-6.2 16.4-6.2 22.6 0l105.4 105.4c10.1 10.1 2.9 27.3-11.3 27.3z\",fill:\"currentColor\"}),{width:640,height:512}),at=(m((0,u.jsx)(\"path\",{d:\"M480 416C497.7 416 512 430.3 512 448C512 465.7 497.7 480 480 480H150.6C133.7 480 117.4 473.3 105.4 461.3L25.37 381.3C.3786 356.3 .3786 315.7 25.37 290.7L258.7 57.37C283.7 32.38 324.3 32.38 349.3 57.37L486.6 194.7C511.6 219.7 511.6 260.3 486.6 285.3L355.9 416H480zM265.4 416L332.7 348.7L195.3 211.3L70.63 336L150.6 416L265.4 416z\"})),m((0,u.jsxs)(\"g\",{strokeWidth:1.25,children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M8 13v-7.5a1.5 1.5 0 0 1 3 0v6.5\"}),(0,u.jsx)(\"path\",{d:\"M11 5.5v-2a1.5 1.5 0 1 1 3 0v8.5\"}),(0,u.jsx)(\"path\",{d:\"M14 5.5a1.5 1.5 0 0 1 3 0v6.5\"}),(0,u.jsx)(\"path\",{d:\"M17 7.5a1.5 1.5 0 0 1 3 0v8.5a6 6 0 0 1 -6 6h-2h.208a6 6 0 0 1 -5.012 -2.7a69.74 69.74 0 0 1 -.196 -.3c-.312 -.479 -1.407 -2.388 -3.286 -5.728a1.5 1.5 0 0 1 .536 -2.022a1.867 1.867 0 0 1 2.28 .28l1.47 1.47\"})]}),g))},4709:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return ee}});var r={};n.r(r),n.d(r,{ChangeCanvasBackground:function(){return z},ClearCanvas:function(){return L},Export:function(){return R},Help:function(){return A},LiveCollaborationTrigger:function(){return B},LoadScene:function(){return T},SaveAsImage:function(){return D},SaveToActiveFile:function(){return P},Socials:function(){return N},ToggleTheme:function(){return Z}});var o=n(2134),i=n(9127),a=n(785),l=n(8211),s=n(3646),c=n(2739),u=n(4215),d=n(6710),f=n(487),p=n.n(f),h=n(631),m=n.n(h),g=n(2052),v=n.n(g),b=n(4010),y=n.n(b),x=n(1469),w=n.n(x),k=n(9329),E=n.n(k),S=n(4343),j={};j.styleTagTransform=E(),j.setAttributes=y(),j.insert=v().bind(null,\"head\"),j.domAPI=m(),j.insertStyleElement=w();p()(S.Z,j),S.Z&&S.Z.locals&&S.Z.locals;var _=n(45),O=n(4739),C=n(6798),I=n(9487),M=n(4512),T=function(){var e=(0,l.QT)().t,t=(0,o.eh)();return t.isActionEnabled(d._d)?(0,M.jsx)(c.Z,{icon:s.Tl,onSelect:function(){return t.executeAction(d._d)},\"data-testid\":\"load-button\",shortcut:(0,a.C)(\"loadScene\"),\"aria-label\":e(\"buttons.load\"),children:e(\"buttons.load\")}):null};T.displayName=\"LoadScene\";var P=function(){var e=(0,l.QT)().t,t=(0,o.eh)();return t.isActionEnabled(d.ns)?(0,M.jsx)(c.Z,{shortcut:(0,a.C)(\"saveScene\"),\"data-testid\":\"save-button\",onSelect:function(){return t.executeAction(d.ns)},icon:s.a1,\"aria-label\":\"\".concat(e(\"buttons.save\")),children:\"\".concat(e(\"buttons.save\"))}):null};P.displayName=\"SaveToActiveFile\";var D=function(){var e=(0,o.n9)(),t=(0,l.QT)().t;return(0,M.jsx)(c.Z,{icon:s.J8,\"data-testid\":\"image-export-button\",onSelect:function(){return e({openDialog:\"imageExport\"})},shortcut:(0,a.C)(\"imageExport\"),\"aria-label\":t(\"buttons.exportImage\"),children:t(\"buttons.exportImage\")})};D.displayName=\"SaveAsImage\";var A=function(){var e=(0,l.QT)().t,t=(0,o.eh)();return(0,M.jsx)(c.Z,{\"data-testid\":\"help-menu-item\",icon:s.by,onSelect:function(){return t.executeAction(d.jY)},shortcut:\"?\",\"aria-label\":e(\"helpDialog.title\"),children:e(\"helpDialog.title\")})};A.displayName=\"Help\";var L=function(){var e=(0,l.QT)().t,t=(0,O.b9)(C.w,I.yE);return(0,o.eh)().isActionEnabled(d.mo)?(0,M.jsx)(c.Z,{icon:s.XH,onSelect:function(){return t(\"clearCanvas\")},\"data-testid\":\"clear-canvas-button\",\"aria-label\":e(\"buttons.clearReset\"),children:e(\"buttons.clearReset\")}):null};L.displayName=\"ClearCanvas\";var Z=function(){var e=(0,l.QT)().t,t=(0,o.gF)(),n=(0,o.eh)();return n.isActionEnabled(d.Zp)?(0,M.jsx)(c.Z,{onSelect:function(e){return e.preventDefault(),n.executeAction(d.Zp)},icon:\"dark\"===t.theme?s.NW:s.kL,\"data-testid\":\"toggle-dark-mode\",shortcut:(0,a.C)(\"toggleTheme\"),\"aria-label\":\"dark\"===t.theme?e(\"buttons.lightMode\"):e(\"buttons.darkMode\"),children:\"dark\"===t.theme?e(\"buttons.lightMode\"):e(\"buttons.darkMode\")}):null};Z.displayName=\"ToggleTheme\";var z=function(){var e=(0,l.QT)().t,t=(0,o.gF)(),n=(0,o.eh)();return t.viewModeEnabled?null:(0,M.jsxs)(\"div\",{style:{marginTop:\"0.5rem\"},children:[(0,M.jsx)(\"div\",{style:{fontSize:\".75rem\",marginBottom:\".5rem\"},children:e(\"labels.canvasBackground\")}),(0,M.jsx)(\"div\",{style:{padding:\"0 0.625rem\"},children:n.renderAction(\"changeViewBackgroundColor\")})]})};z.displayName=\"ChangeCanvasBackground\";var R=function(){var e=(0,l.QT)().t,t=(0,o.n9)();return(0,M.jsx)(c.Z,{icon:s.Hy,onSelect:function(){t({openDialog:\"jsonExport\"})},\"data-testid\":\"json-export-button\",\"aria-label\":e(\"buttons.export\"),children:e(\"buttons.export\")})};R.displayName=\"Export\";var N=function(){return(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(u.Z,{icon:s.ET,href:\"https:\/\/github.com\/excalidraw\/excalidraw\",\"aria-label\":\"GitHub\",children:\"GitHub\"}),(0,M.jsx)(u.Z,{icon:s.D7,href:\"https:\/\/discord.gg\/UexuTaE\",\"aria-label\":\"Discord\",children:\"Discord\"}),(0,M.jsx)(u.Z,{icon:s.Zm,href:\"https:\/\/twitter.com\/excalidraw\",\"aria-label\":\"Twitter\",children:\"Twitter\"})]})};N.displayName=\"Socials\";var B=function(e){var t=e.onSelect,n=e.isCollaborating,r=(0,l.QT)().t;return(0,M.jsx)(c.Z,{\"data-testid\":\"collab-button\",icon:s.jn,className:(0,_.Z)({\"active-collab\":n}),onSelect:t,children:r(\"labels.liveCollaboration\")})};B.displayName=\"LiveCollaborationTrigger\";var H=n(6773),W=n(7169),F=n(2577),U=n(9787),K=n(8888);function Y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var G,V,X,q,J,$=n(6340),Q=Object.assign((G=\"MainMenu\",V=function(e){var t=e.children,n=e.onSelect,r=(0,K.R6)().mainMenuTunnel,a=(0,o.Fy)(),c=(0,o.gF)(),u=(0,o.n9)(),d=a.isMobile?void 0:function(){return u({openMenu:null})};return(0,M.jsx)(r.In,{children:(0,M.jsxs)(i.Z,{open:\"canvas\"===c.openMenu,children:[(0,M.jsx)(i.Z.Trigger,{onToggle:function(){u({openMenu:\"canvas\"===c.openMenu?null:\"canvas\"})},children:s.RY}),(0,M.jsxs)(i.Z.Content,{onClickOutside:d,onSelect:(0,$.Mj)(n,(function(){u({openMenu:null})})),children:[t,a.isMobile&&c.collaborators.size>0&&(0,M.jsxs)(\"fieldset\",{className:\"UserList-Wrapper\",children:[(0,M.jsx)(\"legend\",{children:(0,l.t)(\"labels.collaborators\")}),(0,M.jsx)(H.Z,{mobile:!0,collaborators:c.collaborators})]})]})]})})},X=(0,O.cn)(0),q=!1,J=function(e){var t=(0,K.R6)().jotaiScope,n=(0,O.KO)(X,t),r=(0,F.Z)(n,2),o=r[0],i=r[1];return(0,U.useLayoutEffect)((function(){return i((function(e){return e+1})),function(){i((function(e){return e-1}))}}),[i]),e.__fallback||(q=!0),!o&&e.__fallback&&q||o>1&&e.__fallback?null:(0,M.jsx)(V,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Y(Object(n),!0).forEach((function(t){(0,W.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e))},J.displayName=G,J),{Trigger:i.Z.Trigger,Item:i.Z.Item,ItemLink:i.Z.ItemLink,ItemCustom:i.Z.ItemCustom,Group:i.Z.Group,Separator:i.Z.Separator,DefaultItems:r}),ee=Q},2335:function(e,t,n){\"use strict\";n.d(t,{jo:function(){return me},iC:function(){return _},gK:function(){return ye},$C:function(){return Z},oc:function(){return D},_9:function(){return Se},HN:function(){return Oe},qy:function(){return pe},rk:function(){return H},n5:function(){return B},h6:function(){return he},Rx:function(){return Ee},Hg:function(){return W},cW:function(){return oe},hs:function(){return F},f:function(){return O},xY:function(){return ke},Iw:function(){return I},$e:function(){return M},Vi:function(){return L},Ks:function(){return v},r8:function(){return Y},ZB:function(){return fe},pb:function(){return G},ut:function(){return z},k:function(){return U},sA:function(){return ee},LL:function(){return V},EE:function(){return ue},qx:function(){return C},$n:function(){return ge},zK:function(){return de},LO:function(){return K},Zj:function(){return Q},Yx:function(){return se},sS:function(){return le},kV:function(){return ae},sk:function(){return ce},eF:function(){return ie},Oh:function(){return A},WR:function(){return _e},a6:function(){return je},HM:function(){return J},ay:function(){return P},hR:function(){return ve},Gj:function(){return X},I8:function(){return we},wZ:function(){return T},C6:function(){return R},ZF:function(){return te},nM:function(){return q},ah:function(){return re},UO:function(){return ne},Kr:function(){return be},oX:function(){return xe},_D:function(){return N},V4:function(){return $},Dt:function(){return k},jP:function(){return j},Um:function(){return x},vU:function(){return E},G6:function(){return S},ED:function(){return w}});var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(6464),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g);var v,b=m.Z&&m.Z.locals?m.Z.locals:void 0,y=n(5284),x=\/Mac|iPod|iPhone|iPad\/.test(navigator.platform),w=\/^Win\/.test(navigator.platform),k=\/\\b(android)\\b\/i.test(navigator.userAgent),E=\"netscape\"in window&&navigator.userAgent.indexOf(\"rv:\")>1&&navigator.userAgent.indexOf(\"Gecko\")>1,S=!(-1!==navigator.userAgent.indexOf(\"Chrome\"))&&-1!==navigator.userAgent.indexOf(\"Safari\"),j=function(){var e,t;return\"isBrave\"===(null===(e=navigator.brave)||void 0===e||null===(t=e.isBrave)||void 0===t?void 0:t.name)},_=\"Excalidraw\",O=10,C=8,I=5,M=1,T=30,P=Math.PI\/12,D={TEXT:\"text\",CROSSHAIR:\"crosshair\",GRABBING:\"grabbing\",GRAB:\"grab\",POINTER:\"pointer\",MOVE:\"move\",AUTO:\"\"},A={MAIN:0,WHEEL:1,SECONDARY:2,TOUCH:-1};!function(e){e.COPY=\"copy\",e.PASTE=\"paste\",e.CUT=\"cut\",e.KEYDOWN=\"keydown\",e.KEYUP=\"keyup\",e.MOUSE_MOVE=\"mousemove\",e.RESIZE=\"resize\",e.UNLOAD=\"unload\",e.FOCUS=\"focus\",e.BLUR=\"blur\",e.DRAG_OVER=\"dragover\",e.DROP=\"drop\",e.GESTURE_END=\"gestureend\",e.BEFORE_UNLOAD=\"beforeunload\",e.GESTURE_START=\"gesturestart\",e.GESTURE_CHANGE=\"gesturechange\",e.POINTER_MOVE=\"pointermove\",e.POINTER_UP=\"pointerup\",e.STATE_CHANGE=\"statechange\",e.WHEEL=\"wheel\",e.TOUCH_START=\"touchstart\",e.TOUCH_END=\"touchend\",e.HASHCHANGE=\"hashchange\",e.VISIBILITY_CHANGE=\"visibilitychange\",e.SCROLL=\"scroll\",e.EXCALIDRAW_LINK=\"excalidraw-link\",e.MENU_ITEM_SELECT=\"menu.itemSelect\"}(v||(v={}));var L={TEST:\"test\",DEVELOPMENT:\"development\"},Z={SHAPE_ACTIONS_MENU:\"App-menu__left\"},z={Virgil:1,Helvetica:2,Cascadia:3},R={LIGHT:\"light\",DARK:\"dark\"},N=\"Segoe UI Emoji\",B=20,H=z.Virgil,W=\"left\",F=\"top\",U=20,K={excalidraw:\"application\/vnd.excalidraw+json\",excalidrawlib:\"application\/vnd.excalidrawlib+json\",json:\"application\/json\",svg:\"image\/svg+xml\",\"excalidraw.svg\":\"image\/svg+xml\",png:\"image\/png\",\"excalidraw.png\":\"image\/png\",jpg:\"image\/jpeg\",gif:\"image\/gif\",webp:\"image\/webp\",bmp:\"image\/bmp\",ico:\"image\/x-icon\",binary:\"application\/octet-stream\"},Y={excalidraw:\"excalidraw\",excalidrawClipboard:\"excalidraw\/clipboard\",excalidrawLibrary:\"excalidrawlib\"},G=window.EXCALIDRAW_EXPORT_SOURCE||window.location.origin,V=500,X=300,q=500,J=100,$=.1,Q=.1,ee=300,te=b.themeFilter,ne={addLibrary:\"addLibrary\"},re={addLibrary:\"addLibrary\"},oe={canvasActions:{changeViewBackgroundColor:!0,clearCanvas:!0,export:{saveFileToDisk:!0},loadScene:!0,saveToActiveFile:!0,toggleTheme:null,saveAsImage:!0}},ie=640,ae=730,le=1e3,se=500,ce=1229,ue=parseInt(b.rightSidebarWidth),de=2,fe=[1,2,3],pe=10,he=1440,me=[K.png,K.jpg,K.svg,K.gif,K.webp,K.bmp,K.ico],ge=2097152,ve=\"http:\/\/www.w3.org\/2000\/svg\",be={excalidraw:2,excalidrawLibrary:2},ye=5,xe={TOP:\"top\",MIDDLE:\"middle\",BOTTOM:\"bottom\"},we={LEFT:\"left\",CENTER:\"center\",RIGHT:\"right\"},ke=20,Ee=.25,Se=32,je={LEGACY:1,PROPORTIONAL_RADIUS:2,ADAPTIVE_RADIUS:3},_e=\"__precedingElement__\",Oe={strokeColor:y.black,backgroundColor:\"transparent\",fillStyle:\"hachure\",strokeWidth:1,strokeStyle:\"solid\",roughness:1,opacity:100,locked:!1}},434:function(e,t,n){\"use strict\";n.d(t,{DQ:function(){return S},KG:function(){return A},Pn:function(){return Z},Qk:function(){return E},Sf:function(){return D},Tu:function(){return L},Wr:function(){return _},ZY:function(){return O},_c:function(){return T},bv:function(){return z},cT:function(){return C},g8:function(){return j},gY:function(){return H},lV:function(){return M},tW:function(){return P},vZ:function(){return W},wf:function(){return I}});var r=n(1930),o=n(2577),i=n(7169),a=n(8950),l=n(2975),s=n.n(l),c=n(5605),u=n(8897),d=n(2335),f=n(1047),p=n(6797),h=n(8211),m=n(75),g=n(6340),v=n(1393),b=n(5523),y=n(679);function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var k=function(){var e=(0,a.Z)(s().mark((function e(t){var r;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.type!==d.LO.png){e.next=18;break}return e.prev=1,e.next=4,Promise.resolve().then(n.bind(n,673));case 4:return e.next=6,e.sent.decodePngMetadata(t);case 6:return e.abrupt(\"return\",e.sent);case 9:if(e.prev=9,e.t0=e.catch(1),\"INVALID\"!==e.t0.message){e.next=15;break}throw new DOMException((0,h.t)(\"alerts.imageDoesNotContainScene\"),\"EncodingError\");case 15:throw new DOMException((0,h.t)(\"alerts.cannotRestoreFromImage\"),\"EncodingError\");case 16:e.next=43;break;case 18:if(!(\"text\"in Blob)){e.next=24;break}return e.next=21,t.text();case 21:r=e.sent,e.next=27;break;case 24:return e.next=26,new Promise((function(e){var n=new FileReader;n.readAsText(t,\"utf8\"),n.onloadend=function(){n.readyState===FileReader.DONE&&e(n.result)}}));case 26:r=e.sent;case 27:if(t.type!==d.LO.svg){e.next=43;break}return e.prev=28,e.next=31,Promise.resolve().then(n.bind(n,673));case 31:return e.next=33,e.sent.decodeSvgMetadata({svg:r});case 33:return e.abrupt(\"return\",e.sent);case 36:if(e.prev=36,e.t1=e.catch(28),\"INVALID\"!==e.t1.message){e.next=42;break}throw new DOMException((0,h.t)(\"alerts.imageDoesNotContainScene\"),\"EncodingError\");case 42:throw new DOMException((0,h.t)(\"alerts.cannotRestoreFromImage\"),\"EncodingError\");case 43:return e.abrupt(\"return\",r);case 44:case\"end\":return e.stop()}}),e,null,[[1,9],[28,36]])})));return function(t){return e.apply(this,arguments)}}(),E=function(e){var t;return e&&(null===(t=e.name.match(\/\\.(json|excalidraw|png|svg)$\/))||void 0===t?void 0:t[1])||null},S=function(e){return\"png\"===e||\"svg\"===e},j=function(e){var t=E(e);return\"png\"===t||\"svg\"===t},_=function(e){var t=(e||{}).type;return!!t&&d.jo.includes(t)},O=function(){var e=(0,a.Z)(s().mark((function e(t,n,r,o){var i,a;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,k(t);case 2:if(i=e.sent,e.prev=3,a=JSON.parse(i),!(0,b.dS)(a)){e.next=9;break}return e.abrupt(\"return\",{type:d.LO.excalidraw,data:(0,y.nu)({elements:(0,f._M)(a.elements||[]),appState:w(w({theme:null==n?void 0:n.theme,fileHandle:o||t.handle||null},(0,u.s)(a.appState||{})),n?(0,m.W)(a.elements||[],n,null):{}),files:a.files},n,r,{repairBindings:!0,refreshDimensions:!0})});case 9:if(!(0,b.HT)(a)){e.next=11;break}return e.abrupt(\"return\",{type:d.LO.excalidrawlib,data:a});case 11:throw new Error((0,h.t)(\"alerts.couldNotLoadInvalidFile\"));case 14:throw e.prev=14,e.t0=e.catch(3),console.error(e.t0.message),new Error((0,h.t)(\"alerts.couldNotLoadInvalidFile\"));case 18:case\"end\":return e.stop()}}),e,null,[[3,14]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),C=function(){var e=(0,a.Z)(s().mark((function e(t,n,r,o){var i;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,O(t,n,r,o);case 2:if((i=e.sent).type===d.LO.excalidraw){e.next=5;break}throw new Error((0,h.t)(\"alerts.couldNotLoadInvalidFile\"));case 5:return e.abrupt(\"return\",i.data);case 6:case\"end\":return e.stop()}}),e)})));return function(t,n,r,o){return e.apply(this,arguments)}}(),I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"unpublished\",n=JSON.parse(e);if(!(0,b.HT)(n))throw new Error(\"Invalid library\");var r=n.libraryItems||n.library;return(0,y.wJ)(r,t)},M=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r=arguments;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.length>1&&void 0!==r[1]?r[1]:\"unpublished\",e.t0=I,e.next=4,k(t);case 4:return e.t1=e.sent,e.t2=n,e.abrupt(\"return\",(0,e.t0)(e.t1,e.t2));case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),T=function(){var e=(0,a.Z)(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,n){try{t.toBlob((function(t){if(!t)return n(new p.l((0,h.t)(\"canvasError.canvasTooBig\"),\"CANVAS_POSSIBLY_TOO_BIG\"));e(t)}))}catch(e){n(e)}})));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),P=function(){var e=(0,a.Z)(s().mark((function e(t){var n;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.t0=window.crypto.subtle,e.next=4,W(t);case 4:return e.t1=e.sent,e.next=7,e.t0.digest.call(e.t0,\"SHA-1\",e.t1);case 7:return n=e.sent,e.abrupt(\"return\",(0,g.G3)(new Uint8Array(n)));case 11:return e.prev=11,e.t2=e.catch(0),console.error(e.t2),e.abrupt(\"return\",(0,c.x0)(40));case 15:case\"end\":return e.stop()}}),e,null,[[0,11]])})));return function(t){return e.apply(this,arguments)}}(),D=function(){var e=(0,a.Z)(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,n){var r=new FileReader;r.onload=function(){var t=r.result;e(t)},r.onerror=function(e){return n(e)},r.readAsDataURL(t)})));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),A=function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\",n=e.indexOf(\",\"),r=atob(e.slice(n+1)),o=e.slice(0,n).split(\":\")[1].split(\";\")[0],i=new ArrayBuffer(r.length),a=new Uint8Array(i),l=0;l<r.length;l++)a[l]=r.charCodeAt(l);return new File([i],t,{type:o})},L=function(){var e=(0,a.Z)(s().mark((function e(t,r){var i,a,l,c,u,f;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.type!==d.LO.svg){e.next=2;break}return e.abrupt(\"return\",t);case 2:return e.next=4,Promise.all([n.e(4736).then(n.t.bind(n,4881,23)).then((function(e){return e.default})),n.e(4736).then(n.bind(n,100)).then((function(e){return e.default}))]);case 4:if(i=e.sent,a=(0,o.Z)(i,2),l=a[0],c=a[1],u=c({pica:l({features:[\"js\",\"wasm\"]})}),r.outputType&&(f=r.outputType,u._create_blob=function(e){return this.pica.toBlob(e.out_canvas,f,.8).then((function(t){return e.out_blob=t,e}))}),_(t)){e.next=12;break}throw new Error((0,h.t)(\"errors.unsupportedFileType\"));case 12:return e.t0=File,e.next=15,u.toBlob(t,{max:r.maxWidthOrHeight});case 15:return e.t1=e.sent,e.t2=[e.t1],e.t3=t.name,e.t4={type:r.outputType||t.type},e.abrupt(\"return\",new e.t0(e.t2,e.t3,e.t4));case 20:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\";return new File([(new TextEncoder).encode(e)],t,{type:d.LO.svg})},z=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.dataTransfer.files.item(0),e.next=3,R(t);case 3:if(r=e.sent,!n){e.next=10;break}return e.next=7,H(n);case 7:e.t0=e.sent,e.next=11;break;case 10:e.t0=null;case 11:return e.t1=e.t0,e.t2=r,e.abrupt(\"return\",{file:e.t1,fileHandle:e.t2});case 14:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),R=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!v.kr){e.next=16;break}return e.prev=1,n=t.dataTransfer.items[0],e.next=5,n.getAsFileSystemHandle();case 5:if(e.t0=e.sent,e.t0){e.next=8;break}e.t0=null;case 8:return r=e.t0,e.abrupt(\"return\",r);case 12:return e.prev=12,e.t1=e.catch(1),console.warn(e.t1.name,e.t1.message),e.abrupt(\"return\",null);case 16:return e.abrupt(\"return\",null);case 17:case\"end\":return e.stop()}}),e,null,[[1,12]])})));return function(t){return e.apply(this,arguments)}}(),N=function(e){var t=null,n=\"\".concat((0,r.Z)(new Uint8Array(e).slice(0,8)).join(\" \"),\" \"),o=\"255 216 255 \",i=\"71 73 70 56 57 97 \";return n===\"137 80 78 71 13 10 26 10 \"?t=d.LO.png:n.startsWith(o)?t=d.LO.jpg:n.startsWith(i)&&(t=d.LO.gif),t},B=function(e,t,n){return new File([e],n||\"\",{type:t})},H=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r,o,i,a,l,c,u;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.type){e.next=28;break}if(null===(n=t)||void 0===n||null===(r=n.name)||void 0===r||!r.endsWith(\".excalidrawlib\")){e.next=11;break}return e.t0=B,e.next=5,W(t);case 5:e.t1=e.sent,e.t2=d.LO.excalidrawlib,e.t3=t.name,t=(0,e.t0)(e.t1,e.t2,e.t3),e.next=26;break;case 11:if(null===(o=t)||void 0===o||null===(i=o.name)||void 0===i||!i.endsWith(\".excalidraw\")){e.next=21;break}return e.t4=B,e.next=15,W(t);case 15:e.t5=e.sent,e.t6=d.LO.excalidraw,e.t7=t.name,t=(0,e.t4)(e.t5,e.t6,e.t7),e.next=26;break;case 21:return e.next=23,W(t);case 23:a=e.sent,(l=N(a))&&(t=B(a,l,t.name));case 26:e.next=34;break;case 28:if(!_(t)){e.next=34;break}return e.next=31,W(t);case 31:c=e.sent,(u=N(c))&&u!==t.type&&(t=B(c,u,t.name));case 34:return e.abrupt(\"return\",t);case 35:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),W=function(e){return\"arrayBuffer\"in e?e.arrayBuffer():new Promise((function(t,n){var r=new FileReader;r.onload=function(e){var r;if(null===(r=e.target)||void 0===r||!r.result)return n(new Error(\"Couldn't convert blob to ArrayBuffer\"));t(e.target.result)},r.readAsArrayBuffer(e)}))}},1393:function(e,t,n){\"use strict\";n.d(t,{I$:function(){return h},NL:function(){return m},kr:function(){return a}});var r=n(1930),o=n(8950),i=n(2975),a=function(){if(\"undefined\"==typeof self)return!1;if(\"top\"in self&&self!==top)try{top}catch(e){return!1}else if(\"showOpenFilePicker\"in self)return\"showOpenFilePicker\";return!1}(),l=a?n.e(4736).then(n.bind(n,2254)):n.e(4736).then(n.bind(n,3499));function s(){return s=(0,o.Z)(i.mark((function e(){var t,n=arguments;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,l;case 2:return e.abrupt(\"return\",(t=e.sent).default.apply(t,n));case 3:case\"end\":return e.stop()}}),e)}))),s.apply(this,arguments)}a?n.e(4736).then(n.bind(n,6474)):n.e(4736).then(n.bind(n,9521));var c=a?n.e(4736).then(n.bind(n,9475)):n.e(4736).then(n.bind(n,6281));function u(){return u=(0,o.Z)(i.mark((function e(){var t,n=arguments;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,c;case 2:return e.abrupt(\"return\",(t=e.sent).default.apply(t,n));case 3:case\"end\":return e.stop()}}),e)}))),u.apply(this,arguments)}var d=n(2335),f=n(6797),p=n(6340),h=function(e){var t,n,o,i=null===(t=e.extensions)||void 0===t?void 0:t.reduce((function(e,t){return e.push(d.LO[t]),e}),[]),a=null===(n=e.extensions)||void 0===n?void 0:n.reduce((function(e,t){return\"jpg\"===t?e.concat(\".jpg\",\".jpeg\"):e.concat(\".\".concat(t))}),[]);return function(){return s.apply(this,arguments)}({description:e.description,extensions:a,mimeTypes:i,multiple:null!==(o=e.multiple)&&void 0!==o&&o,legacySetup:function(t,n,o){var i=(0,p.Ds)(n,500),a=function(){l(),document.addEventListener(d.Ks.KEYUP,i),document.addEventListener(d.Ks.POINTER_UP,i),i()},l=function(){var n;if(null!==(n=o.files)&&void 0!==n&&n.length){var i=e.multiple?(0,r.Z)(o.files):o.files[0];t(i)}};requestAnimationFrame((function(){window.addEventListener(d.Ks.FOCUS,a)}));var s=window.setInterval((function(){l()}),500);return function(e){clearInterval(s),i.cancel(),window.removeEventListener(d.Ks.FOCUS,a),document.removeEventListener(d.Ks.KEYUP,i),document.removeEventListener(d.Ks.POINTER_UP,i),e&&(console.warn(\"Opening the file was canceled (legacy-fs).\"),e(new f._))}}})},m=function(e,t){return function(){return u.apply(this,arguments)}(e,{fileName:\"\".concat(t.name,\".\").concat(t.extension),description:t.description,extensions:[\".\".concat(t.extension)]},t.fileHandle)}},673:function(e,t,n){\"use strict\";n.r(t),n.d(t,{decodePngMetadata:function(){return E},decodeSvgMetadata:function(){return j},encodePngMetadata:function(){return k},encodeSvgMetadata:function(){return S},getTEXtChunk:function(){return w}});var r=n(8950),o=n(2975),i=n.n(o),a=n(2983),l=n.n(a),s=n(1194),c=n(3434),u=n.n(c),d=n(2744),f=n(2335),p=n(434),h=function(e){return new Promise((function(t,n){var r=\"string\"==typeof e?new Blob([(new TextEncoder).encode(e)]):new Blob([e instanceof Uint8Array?e:new Uint8Array(e)]),o=new FileReader;o.onload=function(e){if(!e.target||\"string\"!=typeof e.target.result)return n(new Error(\"couldn't convert to byte string\"));t(e.target.result)},o.readAsBinaryString(r)}))},m=function(e){for(var t=new ArrayBuffer(e.length),n=new Uint8Array(t),r=0,o=e.length;r<o;r++)n[r]=e.charCodeAt(r);return t},g=function(e){return new TextDecoder(\"utf-8\").decode(m(e))},v=function(){var e=(0,r.Z)(i().mark((function e(t){var n=arguments;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n.length>1&&void 0!==n[1]&&n[1])){e.next=5;break}e.t0=window.btoa(t),e.next=10;break;case 5:return e.t1=window,e.next=8,h(t);case 8:e.t2=e.sent,e.t0=e.t1.btoa.call(e.t1,e.t2);case 10:return e.abrupt(\"return\",e.t0);case 11:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),b=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r=arguments;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.length>1&&void 0!==r[1]&&r[1],e.abrupt(\"return\",n?window.atob(t):g(window.atob(t)));case 2:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),y=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.text,!1===t.compress){e.next=11;break}return e.prev=2,e.next=5,h((0,d.deflate)(n));case 5:r=e.sent,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(\"encode: cannot deflate\",e.t0);case 11:if(e.t1=!!r,e.t2=r,e.t2){e.next=17;break}return e.next=16,h(n);case 16:e.t2=e.sent;case 17:return e.t3=e.t2,e.abrupt(\"return\",{version:\"1\",encoding:\"bstring\",compressed:e.t1,encoded:e.t3});case 19:case\"end\":return e.stop()}}),e,null,[[2,8]])})));return function(t){return e.apply(this,arguments)}}(),x=function(){var e=(0,r.Z)(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t.encoding,e.next=\"bstring\"===e.t0?3:12;break;case 3:if(!t.compressed){e.next=7;break}e.t1=t.encoded,e.next=10;break;case 7:return e.next=9,g(t.encoded);case 9:e.t1=e.sent;case 10:return n=e.t1,e.abrupt(\"break\",13);case 12:throw new Error('decode: unknown encoding \"'.concat(t.encoding,'\"'));case 13:if(!t.compressed){e.next=15;break}return e.abrupt(\"return\",(0,d.inflate)(new Uint8Array(m(n)),{to:\"string\"}));case 15:return e.abrupt(\"return\",n);case 16:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();var w=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=l(),e.t1=Uint8Array,e.next=4,(0,p.vZ)(t);case 4:if(e.t2=e.sent,e.t3=new e.t1(e.t2),n=(0,e.t0)(e.t3),!(r=n.find((function(e){return\"tEXt\"===e.name})))){e.next=10;break}return e.abrupt(\"return\",s.decode(r.data));case 10:return e.abrupt(\"return\",null);case 11:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),k=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r,o,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.blob,r=t.metadata,e.t0=l(),e.t1=Uint8Array,e.next=5,(0,p.vZ)(n);case 5:return e.t2=e.sent,e.t3=new e.t1(e.t2),o=(0,e.t0)(e.t3),e.t4=s,e.t5=f.LO.excalidraw,e.t6=JSON,e.next=13,y({text:r,compress:!0});case 13:return e.t7=e.sent,e.t8=e.t6.stringify.call(e.t6,e.t7),a=e.t4.encode.call(e.t4,e.t5,e.t8),o.splice(-1,0,a),e.abrupt(\"return\",new Blob([u()(o)],{type:f.LO.png}));case 18:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),E=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,w(t);case 2:if((null==(n=e.sent)?void 0:n.keyword)!==f.LO.excalidraw){e.next=19;break}if(e.prev=4,\"encoded\"in(r=JSON.parse(n.text))){e.next=10;break}if(!(\"type\"in r)||r.type!==f.r8.excalidraw){e.next=9;break}return e.abrupt(\"return\",n.text);case 9:throw new Error(\"FAILED\");case 10:return e.next=12,x(r);case 12:return e.abrupt(\"return\",e.sent);case 15:throw e.prev=15,e.t0=e.catch(4),console.error(e.t0),new Error(\"FAILED\");case 19:throw new Error(\"INVALID\");case 20:case\"end\":return e.stop()}}),e,null,[[4,15]])})));return function(t){return e.apply(this,arguments)}}(),S=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r,o;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.text,e.t0=v,e.t1=JSON,e.next=5,y({text:n});case 5:return e.t2=e.sent,e.t3=e.t1.stringify.call(e.t1,e.t2),e.next=9,(0,e.t0)(e.t3,!0);case 9:return r=e.sent,o=\"\",o+=\"\\x3c!-- payload-type:\".concat(f.LO.excalidraw,\" --\\x3e\"),o+=\"\\x3c!-- payload-version:2 --\\x3e\",o+=\"\\x3c!-- payload-start --\\x3e\",o+=r,o+=\"\\x3c!-- payload-end --\\x3e\",e.abrupt(\"return\",o);case 17:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),j=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r,o,a,l,s,c;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n=t.svg).includes(\"payload-type:\".concat(f.LO.excalidraw))){e.next=26;break}if(r=n.match(\/<!-- payload-start -->\\s*(.+?)\\s*<!-- payload-end -->\/)){e.next=5;break}throw new Error(\"INVALID\");case 5:return o=n.match(\/<!-- payload-version:(\\d+) -->\/),a=(null==o?void 0:o[1])||\"1\",l=\"1\"!==a,e.prev=8,e.next=11,b(r[1],l);case 11:if(s=e.sent,\"encoded\"in(c=JSON.parse(s))){e.next=17;break}if(!(\"type\"in c)||c.type!==f.r8.excalidraw){e.next=16;break}return e.abrupt(\"return\",s);case 16:throw new Error(\"FAILED\");case 17:return e.next=19,x(c);case 19:return e.abrupt(\"return\",e.sent);case 22:throw e.prev=22,e.t0=e.catch(8),console.error(e.t0),new Error(\"FAILED\");case 26:throw new Error(\"INVALID\");case 27:case\"end\":return e.stop()}}),e,null,[[8,22]])})));return function(t){return e.apply(this,arguments)}}()},9485:function(e,t,n){\"use strict\";n.d(t,{Um:function(){return f.Um},cT:function(){return u.cT},n8:function(){return f.n8},p1:function(){return p}});var r=n(8950),o=n(2975),i=n.n(o),a=n(6665),l=n(2335),s=n(8211),c=n(4162),u=n(434),d=n(1393),f=n(5523),p=function(){var e=(0,r.Z)(i().mark((function e(t,r,o,p,h){var m,g,v,b,y,x,w,k,E,S,j;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(m=h.exportBackground,g=h.exportPadding,v=void 0===g?l.qy:g,b=h.viewBackgroundColor,y=h.name,x=h.fileHandle,w=void 0===x?null:x,0!==r.length){e.next=3;break}throw new Error((0,s.t)(\"alerts.cannotExportEmptyCanvas\"));case 3:if(\"svg\"!==t&&\"clipboard-svg\"!==t){e.next=17;break}return e.next=6,(0,c.$D)(r,{exportBackground:m,exportWithDarkMode:o.exportWithDarkMode,viewBackgroundColor:b,exportPadding:v,exportScale:o.exportScale,exportEmbedScene:o.exportEmbedScene&&\"svg\"===t},p);case 6:if(k=e.sent,\"svg\"!==t){e.next=13;break}return e.next=10,(0,d.NL)(new Blob([k.outerHTML],{type:l.LO.svg}),{description:\"Export to SVG\",name:y,extension:o.exportEmbedScene?\"excalidraw.svg\":\"svg\",fileHandle:w});case 10:return e.abrupt(\"return\",e.sent);case 13:if(\"clipboard-svg\"!==t){e.next=17;break}return e.next=16,(0,a.dd)(k.outerHTML);case 16:return e.abrupt(\"return\");case 17:return e.next=19,(0,c.NL)(r,o,p,{exportBackground:m,viewBackgroundColor:b,exportPadding:v});case 19:if((E=e.sent).style.display=\"none\",document.body.appendChild(E),\"png\"!==t){e.next=38;break}return e.next=25,(0,u._c)(E);case 25:if(S=e.sent,E.remove(),!o.exportEmbedScene){e.next=33;break}return e.next=30,Promise.resolve().then(n.bind(n,673));case 30:return e.next=32,e.sent.encodePngMetadata({blob:S,metadata:(0,f.I_)(r,o,p,\"local\")});case 32:S=e.sent;case 33:return e.next=35,(0,d.NL)(S,{description:\"Export to PNG\",name:y,extension:\"png\",fileHandle:w});case 35:return e.abrupt(\"return\",e.sent);case 38:if(\"clipboard\"!==t){e.next=60;break}return e.prev=39,j=(0,u._c)(E),e.next=43,(0,a.uR)(j);case 43:e.next=55;break;case 45:if(e.prev=45,e.t0=e.catch(39),console.warn(e.t0),\"CANVAS_POSSIBLY_TOO_BIG\"!==e.t0.name){e.next=50;break}throw e.t0;case 50:if(!l.vU||\"TypeError\"!==e.t0.name){e.next=54;break}throw new Error(\"\".concat((0,s.t)(\"alerts.couldNotCopyToClipboard\"),\"\\n\\n\").concat((0,s.t)(\"hints.firefox_clipboard_write\")));case 54:throw new Error((0,s.t)(\"alerts.couldNotCopyToClipboard\"));case 55:return e.prev=55,E.remove(),e.finish(55);case 58:e.next=62;break;case 60:throw E.remove(),new Error(\"Unsupported export type\");case 62:case\"end\":return e.stop()}}),e,null,[[39,45,55,58]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}()},5523:function(e,t,n){\"use strict\";n.d(t,{HT:function(){return y},I_:function(){return m},NI:function(){return x},Um:function(){return g},dS:function(){return b},n8:function(){return v},t1:function(){return w}});var r=n(6655),o=n(8950),i=n(2975),a=n.n(i),l=n(1393),s=n(8897),c=n(2335),u=n(1047),d=n(434);function f(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return p(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=function(e,t){var n,r={},o=f(e);try{for(o.s();!(n=o.n()).done;){var i=n.value;!i.isDeleted&&\"fileId\"in i&&i.fileId&&t[i.fileId]&&(r[i.fileId]=t[i.fileId])}}catch(e){o.e(e)}finally{o.f()}return r},m=function(e,t,n,r){var o={type:c.r8.excalidraw,version:c.Kr.excalidraw,source:c.pb,elements:\"local\"===r?(0,u._M)(e):(0,u.BQ)(e),appState:\"local\"===r?(0,s.s)(t):(0,s.eS)(t),files:\"local\"===r?h(e,n):void 0};return JSON.stringify(o,null,2)},g=function(){var e=(0,o.Z)(a().mark((function e(t,n,r){var o,i,s;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=m(t,n,r,\"local\"),i=new Blob([o],{type:c.LO.excalidraw}),e.next=4,(0,l.NL)(i,{name:n.name,extension:\"excalidraw\",description:\"Excalidraw file\",fileHandle:(0,d.g8)(n.fileHandle)?null:n.fileHandle});case 4:return s=e.sent,e.abrupt(\"return\",{fileHandle:s});case 6:case\"end\":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),v=function(){var e=(0,o.Z)(a().mark((function e(t,n){var r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,l.I$)({description:\"Excalidraw files\"});case 2:return r=e.sent,e.t0=d.cT,e.next=6,(0,d.gY)(r);case 6:return e.t1=e.sent,e.t2=t,e.t3=n,e.t4=r.handle,e.abrupt(\"return\",(0,e.t0)(e.t1,e.t2,e.t3,e.t4));case 11:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),b=function(e){return(null==e?void 0:e.type)===c.r8.excalidraw&&(!e.elements||Array.isArray(e.elements)&&(!e.appState||\"object\"===(0,r.Z)(e.appState)))},y=function(e){return\"object\"===(0,r.Z)(e)&&e&&e.type===c.r8.excalidrawLibrary&&(1===e.version||2===e.version)},x=function(e){var t={type:c.r8.excalidrawLibrary,version:c.Kr.excalidrawLibrary,source:c.pb,libraryItems:e};return JSON.stringify(t,null,2)},w=function(){var e=(0,o.Z)(a().mark((function e(t){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=x(t),e.next=3,(0,l.NL)(new Blob([n],{type:c.LO.excalidrawlib}),{name:\"library\",extension:\"excalidrawlib\",description:\"Excalidraw library file\"});case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},7053:function(e,t,n){\"use strict\";n.d(t,{Di:function(){return I},WV:function(){return C},rF:function(){return E},xS:function(){return M},zh:function(){return _}});var r=n(7169),o=n(8950),i=n(5169),a=n(8821),l=n(1930),s=n(2975),c=n.n(s),u=n(434),d=n(679),f=n(4739),p=n(9487),h=n(8925),m=n(6797),g=n(8211),v=n(9787),b=n(2335);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return k(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E=(0,f.cn)({status:\"loaded\",isInitialized:!0,libraryItems:[]}),S=function(e){return JSON.parse(JSON.stringify(e))},j=function(e,t){return!e.find((function(e){return e.elements.length===t.elements.length&&e.elements.every((function(e,n){return e.id===t.elements[n].id&&e.versionNonce===t.elements[n].versionNonce}))}))},_=function(e,t){var n,r=[],o=w(t);try{for(o.s();!(n=o.n()).done;){var i=n.value;j(e,i)&&r.push(i)}}catch(e){o.e(e)}finally{o.f()}return[].concat(r,(0,l.Z)(e))},O=(0,i.Z)((function e(t){var n=this;(0,a.Z)(this,e),this.lastLibraryItems=[],this.isInitialized=!1,this.updateQueue=[],this.getLastUpdateTask=function(){return n.updateQueue[n.updateQueue.length-1]},this.notifyListeners=function(){if(n.updateQueue.length>0)p.e_.set(E,{status:\"loading\",libraryItems:n.lastLibraryItems,isInitialized:n.isInitialized});else{n.isInitialized=!0,p.e_.set(E,{status:\"loaded\",libraryItems:n.lastLibraryItems,isInitialized:n.isInitialized});try{var e,t;null===(e=(t=n.app.props).onLibraryChange)||void 0===e||e.call(t,S(n.lastLibraryItems))}catch(e){console.error(e)}}},this.resetLibrary=function(){return n.setLibrary([])},this.getLatestLibrary=function(){return new Promise(function(){var e=(0,o.Z)(c().mark((function e(t){var r;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,n.getLastUpdateTask()||n.lastLibraryItems;case 3:r=e.sent,n.updateQueue.length>0?t(n.getLatestLibrary()):t(S(r)),e.next=10;break;case 7:return e.prev=7,e.t0=e.catch(0),e.abrupt(\"return\",t(n.lastLibraryItems));case 10:case\"end\":return e.stop()}}),e,null,[[0,7]])})));return function(t){return e.apply(this,arguments)}}())},this.updateLibrary=function(){var e=(0,o.Z)(c().mark((function e(t){var r,i,a,l,s,f,p,h,v;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.libraryItems,i=t.prompt,a=void 0!==i&&i,l=t.merge,s=void 0!==l&&l,f=t.openLibraryMenu,p=void 0!==f&&f,h=t.defaultStatus,v=void 0===h?\"unpublished\":h,p&&n.app.setState({openSidebar:\"library\"}),e.abrupt(\"return\",n.setLibrary((function(){return new Promise(function(){var e=(0,o.Z)(c().mark((function e(t,o){var i,l;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,\"function\"!=typeof r||r instanceof Blob?r:r(n.lastLibraryItems);case 3:if(!((i=e.sent)instanceof Blob)){e.next=10;break}return e.next=7,(0,u.lV)(i,v);case 7:l=e.sent,e.next=11;break;case 10:l=(0,d.wJ)(i,v);case 11:!a||window.confirm((0,g.t)(\"alerts.confirmAddLibrary\",{numShapes:l.length}))?t(s?_(n.lastLibraryItems,l):l):o(new m._),e.next=17;break;case 14:e.prev=14,e.t0=e.catch(0),o(e.t0);case 17:case\"end\":return e.stop()}}),e,null,[[0,14]])})));return function(t,n){return e.apply(this,arguments)}}())})).finally((function(){n.app.focusContainer()})));case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.setLibrary=function(e){var t=new Promise(function(){var t=(0,o.Z)(c().mark((function t(r,o){return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,n.getLastUpdateTask();case 3:return\"function\"==typeof e&&(e=e(n.lastLibraryItems)),t.t0=S,t.next=7,e;case 7:t.t1=t.sent,n.lastLibraryItems=(0,t.t0)(t.t1),r(n.lastLibraryItems),t.next=15;break;case 12:t.prev=12,t.t2=t.catch(0),o(t.t2);case 15:case\"end\":return t.stop()}}),t,null,[[0,12]])})));return function(e,n){return t.apply(this,arguments)}}()).catch((function(e){if(\"AbortError\"===e.name)return console.warn(\"Library update aborted by user\"),n.lastLibraryItems;throw e})).finally((function(){n.updateQueue=n.updateQueue.filter((function(e){return e!==t})),n.notifyListeners()}));return n.updateQueue.push(t),n.notifyListeners(),t},this.app=t}));t.ZP=O;var C=function(e){var t,n=Math.ceil(Math.sqrt(e.length)),r=[],o=0,i=0,a=0,s=0,c=0,u=0,d=0,f=w(e);try{var p=function(){var f=t.value;c&&c%n==0&&(i+=a+50,o=0,u=0,d++),0===u&&(a=function(t){return e.slice(t*n,t*n+n).reduce((function(e,t){var n=(0,h.v2)(t.elements).height;return Math.max(e,n)}),0)}(d)),s=function(t){var r,o=0,i=0,a=0,l=w(e);try{for(l.s();!(r=l.n()).done;){var s=r.value;if(o%n==0&&(i=0),i===t){var c=(0,h.v2)(s.elements).width;a=Math.max(a,c)}o++,i++}}catch(e){l.e(e)}finally{l.f()}return a}(u);var p=(0,h.v2)(f.elements),m=p.minX,g=p.minY,v=p.width,b=p.height,y=(s-v)\/2,k=(a-b)\/2;r.push.apply(r,(0,l.Z)(f.elements.map((function(e){return x(x({},e),{},{x:e.x+o+y-m,y:e.y+i+k-g})})))),o+=s+50,c++,u++};for(f.s();!(t=f.n()).done;)p()}catch(e){f.e(e)}finally{f.f()}return r},I=function(){var e=new URLSearchParams(window.location.hash.slice(1)).get(b.ah.addLibrary)||new URLSearchParams(window.location.search).get(b.UO.addLibrary),t=e?new URLSearchParams(window.location.hash.slice(1)).get(\"token\"):null;return e?{libraryUrl:e,idToken:t}:null},M=function(e){var t=e.excalidrawAPI,n=e.getInitialLibraryItems,r=(0,v.useRef)(n);(0,v.useEffect)((function(){if(t){var e=function(){var e=(0,o.Z)(c().mark((function e(n){var r,i,a,l,s,u;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.libraryUrl,i=n.idToken,a=new Promise(function(){var e=(0,o.Z)(c().mark((function e(t,n){var o,i;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch(decodeURIComponent(r));case 3:return o=e.sent,e.next=6,o.blob();case 6:i=e.sent,t(i),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),n(e.t0);case 13:case\"end\":return e.stop()}}),e,null,[[0,10]])})));return function(t,n){return e.apply(this,arguments)}}()),l=i!==t.id,e.next=5,l&&document.hidden?new Promise((function(e){window.addEventListener(\"focus\",(function(){return e()}),{once:!0})})):null;case 5:return e.prev=5,e.next=8,t.updateLibrary({libraryItems:a,prompt:l,merge:!0,defaultStatus:\"published\",openLibraryMenu:!0});case 8:e.next=13;break;case 10:throw e.prev=10,e.t0=e.catch(5),e.t0;case 13:return e.prev=13,window.location.hash.includes(b.ah.addLibrary)?((s=new URLSearchParams(window.location.hash.slice(1))).delete(b.ah.addLibrary),window.history.replaceState({},b.iC,\"#\".concat(s.toString()))):window.location.search.includes(b.UO.addLibrary)&&((u=new URLSearchParams(window.location.search)).delete(b.UO.addLibrary),window.history.replaceState({},b.iC,\"?\".concat(u.toString()))),e.finish(13);case 16:case\"end\":return e.stop()}}),e,null,[[5,10,13,16]])})));return function(t){return e.apply(this,arguments)}}(),n=function(t){t.preventDefault();var n=I();n&&(t.stopImmediatePropagation(),window.history.replaceState({},\"\",t.oldURL),e(n))};r.current&&t.updateLibrary({libraryItems:r.current()});var i=I();return i&&e(i),window.addEventListener(b.Ks.HASHCHANGE,n),function(){window.removeEventListener(b.Ks.HASHCHANGE,n)}}}),[t])}},679:function(e,t,n){\"use strict\";n.d(t,{ET:function(){return j},lY:function(){return C},nu:function(){return I},wJ:function(){return T}});var r=n(2577),o=n(7169),i=n(1047),a=n(1974),l=n(6954),s=n(2335),c=n(8897),u=n(6938),d=n(1935),f=n(6340),p=n(5284),h=n(5710),m=n(6794);function g(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return v(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var x={selection:!0,text:!0,rectangle:!0,diamond:!0,ellipse:!0,line:!0,image:!0,arrow:!0,freedraw:!0,eraser:!1,custom:!0,hand:!0},w=function(e){return Object.keys(s.ut).includes(e)?s.ut[e]:s.rk},k=function(e,t){var n,r,o,c,u,d,h,g,v,b,x,w,k,E={type:t.type||e.type,version:e.version||1,versionNonce:null!==(n=e.versionNonce)&&void 0!==n?n:0,isDeleted:null!==(r=e.isDeleted)&&void 0!==r&&r,id:e.id||(0,l.kb)(),fillStyle:e.fillStyle||\"hachure\",strokeWidth:e.strokeWidth||1,strokeStyle:null!==(o=e.strokeStyle)&&void 0!==o?o:\"solid\",roughness:null!==(c=e.roughness)&&void 0!==c?c:1,opacity:null==e.opacity?100:e.opacity,angle:e.angle||0,x:null!==(u=null!==(d=t.x)&&void 0!==d?d:e.x)&&void 0!==u?u:0,y:null!==(h=null!==(g=t.y)&&void 0!==g?g:e.y)&&void 0!==h?h:0,strokeColor:e.strokeColor||p.black,backgroundColor:e.backgroundColor||\"transparent\",width:e.width||0,height:e.height||0,seed:null!==(v=e.seed)&&void 0!==v?v:1,groupIds:null!==(b=e.groupIds)&&void 0!==b?b:[],roundness:e.roundness?e.roundness:\"round\"===e.strokeSharpness?{type:(0,a.QI)(e.type)?s.a6.LEGACY:s.a6.PROPORTIONAL_RADIUS}:null,boundElements:e.boundElementIds?e.boundElementIds.map((function(e){return{type:\"arrow\",id:e}})):null!==(x=e.boundElements)&&void 0!==x?x:[],updated:null!==(w=e.updated)&&void 0!==w?w:(0,f.C3)(),link:e.link?(0,m.$)(e.link):null,locked:null!==(k=e.locked)&&void 0!==k&&k};return\"customData\"in e&&(E.customData=e.customData),s.WR in e&&(E[s.WR]=e[s.WR]),y(y(y({},E),(0,i.Qp)(E)),t)},E=function(e,t){if(e.boundElements){var n=e.boundElements.slice(),r=new Set;e.boundElements=n.reduce((function(n,o){var i=t.get(o.id);if(i&&!r.has(o.id)){if(r.add(o.id),i.isDeleted)return n;n.push(o),(0,a.iB)(i)&&!i.containerId&&(i.containerId=e.id)}return n}),[])}},S=function(e,t){var n=e.containerId?t.get(e.containerId):null;if(n){if(!e.isDeleted&&n.boundElements&&!n.boundElements.find((function(t){return t.id===e.id}))){var r=(n.boundElements||(n.boundElements=[])).slice();r.push({type:\"text\",id:e.id}),n.boundElements=r}}else e.containerId=null},j=function(e,t,n){var o=new Set,c=t?(0,f.xn)(t):null,p=(e||[]).reduce((function(e,t){if(\"selection\"!==t.type&&!(0,i.QD)(t)){var a=function(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]&&arguments[1];switch(e.type){case\"text\":var a=e.fontSize,l=e.fontFamily;if(\"font\"in e){var c=e.font.split(\" \"),d=(0,r.Z)(c,2),p=d[0],m=d[1];a=parseFloat(p),l=w(m)}var g=null!==(t=e.text)&&void 0!==t?t:\"\",v=e.lineHeight||(e.height?(0,h.$2)(e):(0,h.PT)(e.fontFamily)),b=(0,h.R8)(e.text,(0,f.mO)(e),v);return e=k(e,{fontSize:a,fontFamily:l,text:g,textAlign:e.textAlign||s.Hg,verticalAlign:e.verticalAlign||s.hs,containerId:null!==(n=e.containerId)&&void 0!==n?n:null,originalText:e.originalText||g,lineHeight:v,baseline:b}),o&&(e=y(y({},e),(0,i.JZ)(e))),e;case\"freedraw\":return k(e,{points:e.points,lastCommittedPoint:null,simulatePressure:e.simulatePressure,pressures:e.pressures});case\"image\":return k(e,{status:e.status||\"pending\",fileId:e.fileId,scale:e.scale||[1,1]});case\"line\":case\"draw\":case\"arrow\":var x=e,E=x.startArrowhead,S=void 0===E?null:E,j=x.endArrowhead,_=void 0===j?\"arrow\"===e.type?\"arrow\":null:j,O=e.x,C=e.y,I=!Array.isArray(e.points)||e.points.length<2?[[0,0],[e.width,e.height]]:e.points;if(0!==I[0][0]||0!==I[0][1]){var M=u._.getNormalizedPoints(e);I=M.points,O=M.x,C=M.y}return k(e,{type:\"draw\"===e.type?\"line\":e.type,startBinding:e.startBinding,endBinding:e.endBinding,lastCommittedPoint:null,startArrowhead:S,endArrowhead:_,points:I,x:O,y:C});case\"ellipse\":case\"rectangle\":case\"diamond\":return k(e,{})}}(t,null==n?void 0:n.refreshDimensions);if(a){var p=null==c?void 0:c.get(t.id);p&&p.version>a.version&&(a=(0,d.ZP)(a,p.version)),o.has(a.id)&&(a=y(y({},a),{},{id:(0,l.kb)()})),o.add(a.id),e.push(a)}}return e}),[]);if(null==n||!n.repairBindings)return p;var m,v=(0,f.xn)(p),b=g(p);try{for(b.s();!(m=b.n()).done;){var x=m.value;(0,a.iB)(x)&&x.containerId?S(x,v):x.boundElements&&E(x,v)}}catch(e){b.e(e)}finally{b.f()}return p},_=function(e,t,n){var r=t[e];return void 0!==r?r:n[e]},O={isLibraryOpen:function(e,t){return[\"openSidebar\",\"isLibraryOpen\"in e?e.isLibraryOpen?\"library\":null:_(\"openSidebar\",e,t)]},isLibraryMenuDocked:function(e,t){var n;return[\"isSidebarDocked\",null!==(n=e.isLibraryMenuDocked)&&void 0!==n?n:_(\"isSidebarDocked\",e,t)]}},C=function(e,t){var n,o,i,a;e=e||{};for(var l=(0,c.im)(),s={},u=0,d=Object.keys(O);u<d.length;u++){var p=d[u];if(p in e){var h=O[p](e,l),m=(0,r.Z)(h,2),g=m[0],v=m[1];s[g]=v}}for(var b=0,w=Object.entries(l);b<w.length;b++){var k=(0,r.Z)(w[b],2),E=k[0],S=k[1],j=e[E],_=t?t[E]:void 0;s[E]=void 0!==j?j:void 0!==_?_:S}return y(y({},s),{},{cursorButton:(null==t?void 0:t.cursorButton)||\"up\",penDetected:null!==(n=null==t?void 0:t.penDetected)&&void 0!==n?n:!!e.penMode&&(null!==(o=e.penDetected)&&void 0!==o&&o),activeTool:y(y({},(0,f.Om)(l,s.activeTool.type&&x[s.activeTool.type]?s.activeTool:{type:\"selection\"})),{},{lastActiveTool:null,locked:null!==(i=s.activeTool.locked)&&void 0!==i&&i}),zoom:\"number\"==typeof e.zoom?{value:e.zoom}:null!==(a=e.zoom)&&void 0!==a&&a.value?e.zoom:l.zoom,openSidebar:\"library\"===s.openSidebar?s.isSidebarDocked?\"library\":null:s.openSidebar})},I=function(e,t,n,r){return{elements:j(null==e?void 0:e.elements,n,r),appState:C(null==e?void 0:e.appState,t||null),files:(null==e?void 0:e.files)||{}}},M=function(e){var t=j((0,i.Lm)(e.elements),null);return t.length?y(y({},e),{},{elements:t}):null},T=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,r=[],o=g(t);try{for(o.s();!(e=o.n()).done;){var i=e.value;if(Array.isArray(i)){var a=M({status:n,elements:i,id:(0,l.kb)(),created:Date.now()});a&&r.push(a)}else{var s=i,c=M(y(y({},s),{},{id:s.id||(0,l.kb)(),status:s.status||n,created:s.created||Date.now()}));c&&r.push(c)}}}catch(e){o.e(e)}finally{o.f()}return r}},6794:function(e,t,n){\"use strict\";n.d(t,{$:function(){return o},q:function(){return i}});var r=n(5779),o=function(e){return(0,r.N)(e)},i=function(e){return!!(null!=e&&e.includes(location.origin)||null!=e&&e.startsWith(\"\/\"))}},4929:function(e,t,n){\"use strict\";n.d(t,{rj:function(){return H},nW:function(){return F},nz:function(){return K},sw:function(){return G},lV:function(){return $},wq:function(){return V},Pp:function(){return q}});var r=n(7169),o=n(2577),i=n(6340),a=n(1935),l=n(7901),s=n(1319),c=n(3646),u=n(8211),d=n(9787),f=n(45),p=n(6066),h=n(3063),m=n(6552),g=n(2335),v=n(1894),b=n(75),y=n(2325),x=n(1047),w=n(6794),k=n(487),E=n.n(k),S=n(631),j=n.n(S),_=n(2052),O=n.n(_),C=n(4010),I=n.n(C),M=n(1469),T=n.n(M),P=n(9329),D=n.n(P),A=n(5260),L={};L.styleTagTransform=D(),L.setAttributes=I(),L.insert=O().bind(null,\"head\"),L.domAPI=j(),L.insertStyleElement=T();E()(A.Z,L),A.Z&&A.Z.locals&&A.Z.locals;var Z=n(7047),z=n(2134),R=n(4512);function N(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?N(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):N(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var H=document.createElement(\"img\");H.src=\"data:\".concat(g.LO.svg,\", \").concat(encodeURIComponent('<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#1971c2\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-external-link\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"><\/path><polyline points=\"15 3 21 3 21 9\"><\/polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"><\/line><\/svg>'));var W=!1,F=function(e){var t=e.element,n=e.setAppState,r=e.onLinkOpen,l=(0,z.gF)(),h=t.link||\"\",m=(0,d.useState)(h),v=(0,o.Z)(m,2),b=v[0],y=v[1],x=(0,d.useRef)(null),k=\"editor\"===l.showHyperlinkPopup||!h,E=(0,d.useCallback)((function(){if(x.current){var e=(0,w.$)(x.current.value);!t.link&&e&&(0,Z.L)(\"hyperlink\",\"create\"),(0,a.DR)(t,{link:e}),n({showHyperlinkPopup:\"info\"})}}),[t,n]);(0,d.useLayoutEffect)((function(){return function(){E()}}),[E]),(0,d.useEffect)((function(){var e=null,r=function(r){k||(e&&clearTimeout(e),Q(t,l,[r.clientX,r.clientY])&&(e=window.setTimeout((function(){n({showHyperlinkPopup:!1})}),500)))};return window.addEventListener(g.Ks.POINTER_MOVE,r,!1),function(){window.removeEventListener(g.Ks.POINTER_MOVE,r,!1),e&&clearTimeout(e)}}),[l,t,k,n]);var S=(0,d.useCallback)((function(){(0,Z.L)(\"hyperlink\",\"delete\"),(0,a.DR)(t,{link:null}),k&&(x.current.value=\"\"),n({showHyperlinkPopup:!1})}),[n,t,k]),j=U(t,l),_=j.x,O=j.y;return l.draggingElement||l.resizingElement||l.isRotating||l.openMenu?null:(0,R.jsxs)(\"div\",{className:\"excalidraw-hyperlinkContainer\",style:{top:\"\".concat(O,\"px\"),left:\"\".concat(_,\"px\"),width:320,padding:5},children:[k?(0,R.jsx)(\"input\",{className:(0,f.Z)(\"excalidraw-hyperlinkContainer-input\"),placeholder:\"Type or paste your link here\",ref:x,value:b,onChange:function(e){return y(e.target.value)},autoFocus:!0,onKeyDown:function(e){e.stopPropagation(),e[p.tW.CTRL_OR_CMD]&&e.key===p.tW.K&&e.preventDefault(),e.key!==p.tW.ENTER&&e.key!==p.tW.ESCAPE||E()}}):(0,R.jsx)(\"a\",{href:(0,w.$)(t.link||\"\"),className:(0,f.Z)(\"excalidraw-hyperlinkContainer-link\",{\"d-none\":k}),target:(0,w.q)(t.link)?\"_self\":\"_blank\",onClick:function(e){if(t.link&&r){var n=(0,i.ag)(g.Ks.EXCALIDRAW_LINK,e.nativeEvent);r(B(B({},t),{},{link:(0,w.$)(t.link)}),n),n.defaultPrevented&&e.preventDefault()}},rel:\"noopener noreferrer\",children:t.link}),(0,R.jsxs)(\"div\",{className:\"excalidraw-hyperlinkContainer__buttons\",children:[!k&&(0,R.jsx)(s.V,{type:\"button\",title:(0,u.t)(\"buttons.edit\"),\"aria-label\":(0,u.t)(\"buttons.edit\"),label:(0,u.t)(\"buttons.edit\"),onClick:function(){(0,Z.L)(\"hyperlink\",\"edit\",\"popup-ui\"),n({showHyperlinkPopup:\"editor\"})},className:\"excalidraw-hyperlinkContainer--edit\",icon:c.Pm}),h&&(0,R.jsx)(s.V,{type:\"button\",title:(0,u.t)(\"buttons.remove\"),\"aria-label\":(0,u.t)(\"buttons.remove\"),label:(0,u.t)(\"buttons.remove\"),onClick:S,className:\"excalidraw-hyperlinkContainer--remove\",icon:c.XH})]})]})},U=function(e,t){var n=(0,x.qf)(e),r=(0,o.Z)(n,2),a=r[0],l=r[1],s=(0,i._i)({sceneX:a+e.width\/2,sceneY:l},t),c=s.x,u=s.y;return{x:c-t.offsetLeft-160,y:u-t.offsetTop-85}},K=(0,l.z)({name:\"hyperlink\",perform:function(e,t){return\"editor\"!==t.showHyperlinkPopup&&{elements:e,appState:B(B({},t),{},{showHyperlinkPopup:\"editor\",openMenu:null}),commitToHistory:!0}},trackEvent:{category:\"hyperlink\",action:\"click\"},keyTest:function(e){return e[p.tW.CTRL_OR_CMD]&&e.key===p.tW.K},contextItemLabel:function(e,t){return Y(e,t)},predicate:function(e,t){return 1===(0,b.eD)(e,t).length},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,b.eD)(t,n);return(0,R.jsx)(s.V,{type:\"button\",icon:c.xP,\"aria-label\":(0,u.t)(Y(t,n)),title:\"\".concat((0,u.t)(\"labels.link.label\"),\" - \").concat((0,i.uY)(\"CtrlOrCmd+K\")),onClick:function(){return r(null)},selected:1===o.length&&!!o[0].link})}}),Y=function(e,t){return(0,b.eD)(e,t)[0].link?\"labels.link.edit\":\"labels.link.create\"},G=function(e,t,n){var r=(0,o.Z)(e,4),i=r[0],a=r[1],l=r[2],s=r[3],c=h.Dn,u=c\/n.zoom.value,d=c\/n.zoom.value,f=c\/n.zoom.value,p=(i+l)\/2,g=(a+s)\/2,v=(c-8)\/(2*n.zoom.value),b=4\/n.zoom.value,y=l+b-v,x=a-b-f+v,w=(0,m.U1)(y+u\/2,x+d\/2,p,g,t),k=(0,o.Z)(w,2);return[k[0]-u\/2,k[1]-d\/2,u,d]},V=function(e,t,n,r){var i=(0,o.Z)(n,2),a=i[0],l=i[1];if(!e.link||t.selectedElementIds[e.id])return!1;var s=4\/t.zoom.value;if(!r&&t.viewModeEnabled&&(0,y.pX)(e,[a,l],s))return!0;var c=(0,x.qf)(e),u=(0,o.Z)(c,4),d=u[0],f=u[1],p=u[2],h=u[3],m=G([d,f,p,h],e.angle,t),g=(0,o.Z)(m,4),v=g[0],b=g[1],w=g[2],k=g[3];return a>v-s&&a<v+s+w&&l>b-s&&l<b+k+s},X=null,q=function(e,t){X&&clearTimeout(X),X=window.setTimeout((function(){return J(e,t)}),g.sA)},J=function(e,t){if(e.link){var n=(0,v.bK)();n.classList.add(\"excalidraw-tooltip--visible\"),n.style.maxWidth=\"20rem\",n.textContent=e.link;var r=(0,x.qf)(e),a=(0,o.Z)(r,4),l=a[0],s=a[1],c=a[2],u=a[3],d=G([l,s,c,u],e.angle,t),f=(0,o.Z)(d,4),p=f[0],h=f[1],m=f[2],g=f[3],b=(0,i._i)({sceneX:p,sceneY:h},t);(0,v.Js)(n,{left:b.x,top:b.y,width:m,height:g},\"top\"),(0,Z.L)(\"hyperlink\",\"tooltip\",\"link-icon\"),W=!0}},$=function(){X&&clearTimeout(X),W&&(W=!1,(0,v.bK)().classList.remove(\"excalidraw-tooltip--visible\"))},Q=function(e,t,n){var r=(0,o.Z)(n,2),a=r[0],l=r[1],s=(0,i.dE)({clientX:a,clientY:l},t),c=s.x,u=s.y,d=15\/t.zoom.value;if((0,y.pX)(e,[c,u],d))return!1;var f=(0,x.qf)(e),p=(0,o.Z)(f,3),h=p[0],m=p[1],g=p[2];if(c>=h&&c<=g&&u>=m-85&&u<=m)return!1;var v=U(e,t),b=v.x,w=v.y;return!(a>=b-d&&a<=b+320+10+d&&l>=w-d&&l<=w+d+10+42)}},8290:function(e,t,n){\"use strict\";n.d(t,{$q:function(){return F},DK:function(){return j},H:function(){return _},HG:function(){return b},N1:function(){return g},R:function(){return k},Ww:function(){return M},Y9:function(){return C},ZB:function(){return L},cz:function(){return m},ek:function(){return H},el:function(){return x}});var r=n(7169),o=n(2577),i=n(75),a=n(1974),l=n(2325),s=n(1935),c=n(1564),u=n(6938),d=n(6340),f=n(6066),p=n(5710);function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var m=function(e){return!e[f.tW.CTRL_OR_CMD]},g=function(e){return e.isBindingEnabled},v=function(e,t){var n=[];return t.forEach((function(t){var r=e.getNonDeletedElement(t);null!=r&&n.push(r)})),n},b=function(e,t,n){var r=new Set,o=new Set;y(e,t,n,\"start\",r,o),y(e,n,t,\"end\",r,o);var i=Array.from(o).filter((function(e){return!r.has(e)}));v(c.Z.getScene(e),i).forEach((function(t){var n;(0,s.DR)(t,{boundElements:null===(n=t.boundElements)||void 0===n?void 0:n.filter((function(t){return\"arrow\"!==t.type||t.id!==e.id}))})}))},y=function(e,t,n,r,o,i){if(\"keep\"!==t)if(null!=t)null!=n&&(\"keep\"===n?S(e,t,r):\"start\"!==r&&n.id===t.id)||(E(e,t,r),o.add(t.id));else{var a=O(e,r);null!=a&&i.add(a)}},x=function(e){e.forEach((function(e){(0,a.Mn)(e)?b(e,z(e,\"start\"),z(e,\"end\")):(0,a.f0)(e)&&w(e)}))},w=function(e){N(e).forEach((function(t){var n=(0,o.Z)(t,2),r=n[0],i=n[1];return b(r,\"end\"===i?\"keep\":e,\"start\"===i?\"keep\":e)}))},k=function(e,t,n,r){null!=t.startBoundElement&&E(e,t.startBoundElement,\"start\");var o=C(r,n);null==o||S(e,o,\"end\")||E(e,o,\"end\")},E=function(e,t,n){(0,s.DR)(e,(0,r.Z)({},\"start\"===n?\"startBinding\":\"endBinding\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({elementId:t.id},I(e,t,n)))),(0,d.xn)(t.boundElements||[]).has(e.id)||(0,s.DR)(t,{boundElements:(t.boundElements||[]).concat({id:e.id,type:\"arrow\"})})},S=function(e,t,n){var r=e[\"start\"===n?\"endBinding\":\"startBinding\"];return j(e,null==r?void 0:r.elementId,t)},j=function(e,t,n){return t===n.id&&e.points.length<3},_=function(e){e.forEach((function(e){(0,a.Mn)(e)&&b(e,null,null)}))},O=function(e,t){var n=\"start\"===t?\"startBinding\":\"endBinding\",o=e[n];return null==o?null:((0,s.DR)(e,(0,r.Z)({},n,null)),o.elementId)},C=function(e,t){return(0,i.QG)(t.getNonDeletedElements(),(function(t){return(0,a.f0)(t,!1)&&(0,l.uu)(t,e)}))},I=function(e,t,n){var r=\"start\"===n?-1:1,o=-1===r?0:e.points.length-1,i=o-r,a=u._.getPointAtIndexGlobalCoordinates(e,o),s=u._.getPointAtIndexGlobalCoordinates(e,i);return{focus:(0,l.T_)(t,s,a),gap:Math.max(1,(0,l.oT)(t,a))}},M=function(e,t){var n,r=(null!==(n=e.boundElements)&&void 0!==n?n:[]).filter((function(e){return\"arrow\"===e.type}));if(0!==r.length){var o=null!=t?t:{},i=o.newSize,l=o.simultaneouslyUpdated,u=P(l);v(c.Z.getScene(e),r.map((function(e){return e.id}))).forEach((function(t){if((0,a.bt)(t)){var n=e;if(T(t,n)){var r=A(n,t.startBinding,i),o=A(n,t.endBinding,i);if(u.has(t.id))(0,s.DR)(t,{startBinding:r,endBinding:o});else D(t,\"start\",r,e),D(t,\"end\",o,e),(0,p.WJ)(t)&&(0,p.RB)(t,!1)}}}))}},T=function(e,t){var n,r;return(null===(n=e.startBinding)||void 0===n?void 0:n.elementId)===t.id||(null===(r=e.endBinding)||void 0===r?void 0:r.elementId)===t.id},P=function(e){return new Set((e||[]).map((function(e){return e.id})))},D=function(e,t,n,o){if(!(null==n||n.elementId!==o.id&&e.points.length>2)){var i=c.Z.getScene(e).getElement(n.elementId);if(null!=i){var a,s=\"start\"===t?-1:1,d=-1===s?0:e.points.length-1,f=d-s,p=u._.getPointAtIndexGlobalCoordinates(e,f),h=(0,l.j_)(i,n.focus,p);if(0===n.gap)a=h;else{var m=(0,l.MZ)(i,p,h,n.gap);a=0===m.length?h:m[0]}u._.movePoints(e,[{index:d,point:u._.pointFromAbsoluteCoords(e,a)}],(0,r.Z)({},\"start\"===t?\"startBinding\":\"endBinding\",n))}}},A=function(e,t,n){if(null==t||null==n)return t;var r=t.gap,o=t.focus,i=t.elementId,a=n.width,s=n.height,c=e.width,u=e.height;return{elementId:i,gap:Math.max(1,Math.min((0,l.fb)(e,a,s),r*(a<s?a\/c:s\/u))),focus:o}},L=function(e){var t=new Set(e.map((function(e){return e.id})));return e.flatMap((function(e){return(0,a.Mn)(e,!1)?Z(e).filter((function(e){return!t.has(e.id)})):(0,a.f0)(e,!1)?N(e).filter((function(e){return!t.has(e[0].id)})):[]}))},Z=function(e){return[z(e,\"start\"),z(e,\"end\")].filter((function(e){return null!=e}))},z=function(e,t){return C(R(e,t),c.Z.getScene(e))},R=function(e,t){var n=\"start\"===t?0:-1;return(0,d.AK)(u._.getPointAtIndexGlobalCoordinates(e,n))},N=function(e){return c.Z.getScene(e).getNonDeletedElements().map((function(t){if(!(0,a.Mn)(t,!1))return null;var n=B(t,\"start\",e),r=B(t,\"end\",e);return n||r?[t,n&&r?\"both\":n?\"start\":\"end\",e]:null})).filter((function(e){return null!=e}))},B=function(e,t,n){return null==e[\"start\"===t?\"startBinding\":\"endBinding\"]&&!S(e,n,t)&&(0,l.uu)(n,R(e,t))},H=function(e,t,n,r){var o=new Set,i=new Set,l=\"duplicatesServeAsOld\"===r;t.forEach((function(e){var t=e.boundElements;if(null!=t&&t.length>0&&(t.forEach((function(e){l&&!n.has(e.id)&&o.add(e.id)})),i.add(n.get(e.id))),(0,a.Mn)(e)){if(null!=e.startBinding){var r=e.startBinding.elementId;l&&!n.has(r)&&i.add(r)}if(null!=e.endBinding){var s=e.endBinding.elementId;l&&!n.has(s)&&i.add(s)}null==e.startBinding&&null==e.endBinding||o.add(n.get(e.id))}})),e.filter((function(e){var t=e.id;return o.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;(0,s.DR)(e,{startBinding:W(t,n),endBinding:W(r,n)})})),e.filter((function(e){var t=e.id;return i.has(t)})).forEach((function(e){var t=e.boundElements;null!=t&&t.length>0&&(0,s.DR)(e,{boundElements:t.map((function(e){return n.has(e.id)?{id:n.get(e.id),type:e.type}:e}))})}))},W=function(e,t){var n;if(null==e)return null;var r=e.elementId;return{focus:e.focus,gap:e.gap,elementId:null!==(n=t.get(r))&&void 0!==n?n:r}},F=function(e,t){var n=new Set(t.map((function(e){return e.id}))),r=new Set;t.forEach((function(e){var t;(0,a.f0)(e)?null===(t=e.boundElements)||void 0===t||t.forEach((function(e){n.has(e.id)||r.add(e.id)})):(0,a.Mn)(e)&&(e.startBinding&&r.add(e.startBinding.elementId),e.endBinding&&r.add(e.endBinding.elementId))})),e.filter((function(e){var t=e.id;return r.has(t)})).forEach((function(e){(0,a.f0)(e)?(0,s.DR)(e,{boundElements:K(e.boundElements,n)}):(0,a.Mn)(e)&&(0,s.DR)(e,{startBinding:U(e.startBinding,n),endBinding:U(e.endBinding,n)})}))},U=function(e,t){return null==e||t.has(e.elementId)?null:e},K=function(e,t){return e?e.filter((function(e){return!t.has(e.id)})):null}},8925:function(e,t,n){\"use strict\";n.d(t,{CM:function(){return g},IX:function(){return y},KP:function(){return j},Pi:function(){return S},UC:function(){return m},Ut:function(){return O},Y5:function(){return k},os:function(){return C},qf:function(){return h},v2:function(){return I},wC:function(){return _}});var r=n(2577),o=n(1930),i=n(6552),a=n(8234),l=n(3063),s=n(1974),c=n(5001),u=n(5710),d=n(6938);function f(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return p(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if((0,s.F9)(e))return w(e);if((0,s.bt)(e))return d._.getElementAbsoluteCoords(e,t);if((0,s.iB)(e)){var n=(0,u.tl)(e);if((0,s.Yv)(n)){var r=d._.getBoundTextElementPosition(n,e);return[r.x,r.y,r.x+e.width,r.y+e.height,r.x+e.width\/2,r.y+e.height\/2]}}return[e.x,e.y,e.x+e.width,e.y+e.height,e.x+e.width\/2,e.y+e.height\/2]},m=function(e){var t=Math.floor(e.width\/2)+1,n=e.width,r=Math.floor(e.height\/2)+1;return[t,0,n,r,t,e.height,0,r]},g=function(e){var t,n=f(e.sets);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(\"path\"===r.type)return r.ops}}catch(e){n.e(e)}finally{n.f()}return e.sets[0].ops},v=function(e,t,n,r,o){var i=1-e;return Math.pow(i,3)*t+3*Math.pow(i,2)*e*n+3*i*Math.pow(e,2)*r+Math.pow(e,3)*o},b=function(e,t,n,r){var o=t-e,i=n-t,a=3*o-6*i+3*(r-n),l=6*i-6*o,s=3*o,c=l*l-4*a*s;if(!(c>=0))return!1;var u=null,d=null,f=1\/0,p=1\/0;return 0===a?f=p=-s\/l:(f=(-l+Math.sqrt(c))\/(2*a),p=(-l-Math.sqrt(c))\/(2*a)),f>=0&&f<=1&&(u=v(f,e,t,n,r)),p>=0&&p<=1&&(d=v(p,e,t,n,r)),[u,d]},y=function(e,t){var n=[0,0],i=e.reduce((function(e,i){var a=i.op,l=i.data;if(\"move\"===a)n=l;else if(\"bcurveTo\"===a){var s=[l[0],l[1]],c=[l[2],l[3]],u=[l[4],l[5]],d=t?t.apply(void 0,s):s,f=t?t.apply(void 0,c):c,p=t?t.apply(void 0,u):u,h=t?t.apply(void 0,(0,o.Z)(n)):n;n=u;var m=function(e,t,n,r){var i=b(e[0],t[0],n[0],r[0]),a=b(e[1],t[1],n[1],r[1]),l=Math.min(e[0],r[0]),s=Math.max(e[0],r[0]);if(i){var c=i.filter((function(e){return null!==e}));l=Math.min.apply(Math,[l].concat((0,o.Z)(c))),s=Math.max.apply(Math,[s].concat((0,o.Z)(c)))}var u=Math.min(e[1],r[1]),d=Math.max(e[1],r[1]);if(a){var f=a.filter((function(e){return null!==e}));u=Math.min.apply(Math,[u].concat((0,o.Z)(f))),d=Math.max.apply(Math,[d].concat((0,o.Z)(f)))}return[l,u,s,d]}(h,d,f,p),g=(0,r.Z)(m,4),v=g[0],y=g[1],x=g[2],w=g[3];e.minX=Math.min(e.minX,v),e.minY=Math.min(e.minY,y),e.maxX=Math.max(e.maxX,x),e.maxY=Math.max(e.maxY,w)}return e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[i.minX,i.minY,i.maxX,i.maxY]},x=function(e){var t,n=1\/0,o=1\/0,i=-1\/0,a=-1\/0,l=f(e);try{for(l.s();!(t=l.n()).done;){var s=(0,r.Z)(t.value,2),c=s[0],u=s[1];n=Math.min(n,c),o=Math.min(o,u),i=Math.max(i,c),a=Math.max(a,u)}}catch(e){l.e(e)}finally{l.f()}return[n,o,i,a]},w=function(e){var t=x(e.points),n=(0,r.Z)(t,4),o=n[0],i=n[1],a=n[2],l=n[3],s=o+e.x,c=i+e.y,u=a+e.x,d=l+e.y;return[s,c,u,d,(s+u)\/2,(c+d)\/2]},k=function(e,t,n,o){var a=g(t[0]);if(a.length<1)return null;var l=\"start\"===n?1:a.length-1,s=a[l].data,c=[s[4],s[5]],u=[s[2],s[3]],d=[s[0],s[1]],f=a[l-1],p=[0,0];\"move\"===f.op?p=f.data:\"bcurveTo\"===f.op&&(p=[f.data[4],f.data[5]]);var h=function(e,t){return Math.pow(1-e,3)*c[t]+3*e*Math.pow(1-e,2)*u[t]+3*Math.pow(e,2)*(1-e)*d[t]+p[t]*Math.pow(e,3)},m=\"start\"===n?p:c,v=(0,r.Z)(m,2),b=v[0],y=v[1],x=[h(.3,0),h(.3,1)],w=x[0],k=x[1],E=Math.hypot(b-w,y-k),S=(b-w)\/E,j=(y-k)\/E,_={arrow:30,bar:15,dot:15,triangle:15}[o],O=0;if(\"arrow\"===o){var C=(0,r.Z)(e.points[e.points.length-1],2),I=C[0],M=C[1],T=e.points.length>1?e.points[e.points.length-2]:[0,0],P=(0,r.Z)(T,2),D=P[0],A=P[1];O=Math.hypot(I-D,M-A)}else for(var L=0;L<e.points.length;L++){var Z=e.points[L-1]||[0,0],z=(0,r.Z)(Z,2),R=z[0],N=z[1],B=(0,r.Z)(e.points[L],2),H=B[0],W=B[1];O+=Math.hypot(H-R,W-N)}var F=Math.min(_,O\/2),U=b-S*F,K=y-j*F;if(\"dot\"===o)return[b,y,Math.hypot(K-y,U-b)+e.strokeWidth];var Y={arrow:20,bar:90,triangle:25}[o],G=(0,i.U1)(U,K,b,y,-Y*Math.PI\/180),V=(0,r.Z)(G,2),X=V[0],q=V[1],J=(0,i.U1)(U,K,b,y,Y*Math.PI\/180),$=(0,r.Z)(J,2);return[b,y,X,q,$[0],$[1]]},E=function(e,t,n){var o;if(e.points.length<2){var s=(0,r.Z)(e.points[0],2),c=s[0],f=s[1],p=(0,i.U1)(e.x+c,e.y+f,t,n,e.angle),h=(0,r.Z)(p,2),m=h[0],v=h[1],b=[m,v,m,v],x=(0,u.WJ)(e);if(x){var w=d._.getMinMaxXYWithBoundText(e,[m,v,m,v],x);b=[w[0],w[1],w[2],w[3]]}return b}var k=null===(o=(0,l.R2)(e))||void 0===o?void 0:o[0],E=null!=k?k:function(e){var t=a.Z.generator(),n=(0,l.i)(e);return t[e.roundness?\"curve\":n.fill?\"polygon\":\"linearPath\"](e.points,n)}(e),S=g(E),j=y(S,(function(r,o){return(0,i.U1)(e.x+r,e.y+o,t,n,e.angle)})),_=[j[0],j[1],j[2],j[3]],O=(0,u.WJ)(e);if(O){var C=d._.getMinMaxXYWithBoundText(e,_,O);_=[C[0],C[1],C[2],C[3]]}return _},S=function(e){var t,n=h(e),o=(0,r.Z)(n,6),a=o[0],l=o[1],c=o[2],u=o[3],d=o[4],f=o[5];if((0,s.F9)(e)){var p=x(e.points.map((function(t){var n=(0,r.Z)(t,2),o=n[0],a=n[1];return(0,i.U1)(o,a,d-e.x,f-e.y,e.angle)}))),m=(0,r.Z)(p,4),g=m[0],v=m[1],b=m[2],y=m[3];return[g+e.x,v+e.y,b+e.x,y+e.y]}if((0,s.bt)(e))t=E(e,d,f);else if(\"diamond\"===e.type){var w=(0,i.U1)(d,l,d,f,e.angle),k=(0,r.Z)(w,2),S=k[0],j=k[1],_=(0,i.U1)(d,u,d,f,e.angle),O=(0,r.Z)(_,2),C=O[0],I=O[1],M=(0,i.U1)(a,f,d,f,e.angle),T=(0,r.Z)(M,2),P=T[0],D=T[1],A=(0,i.U1)(c,f,d,f,e.angle),L=(0,r.Z)(A,2),Z=L[0],z=L[1];t=[Math.min(S,C,P,Z),Math.min(j,I,D,z),Math.max(S,C,P,Z),Math.max(j,I,D,z)]}else if(\"ellipse\"===e.type){var R=(c-a)\/2,N=(u-l)\/2,B=Math.cos(e.angle),H=Math.sin(e.angle),W=Math.hypot(R*B,N*H),F=Math.hypot(N*B,R*H);t=[d-W,f-F,d+W,f+F]}else{var U=(0,i.U1)(a,l,d,f,e.angle),K=(0,r.Z)(U,2),Y=K[0],G=K[1],V=(0,i.U1)(a,u,d,f,e.angle),X=(0,r.Z)(V,2),q=X[0],J=X[1],$=(0,i.U1)(c,u,d,f,e.angle),Q=(0,r.Z)($,2),ee=Q[0],te=Q[1],ne=(0,i.U1)(c,l,d,f,e.angle),re=(0,r.Z)(ne,2),oe=re[0],ie=re[1];t=[Math.min(Y,q,ee,oe),Math.min(G,J,te,ie),Math.max(Y,q,ee,oe),Math.max(G,J,te,ie)]}return t},j=function(e){if(!e.length)return[0,0,0,0];var t=1\/0,n=-1\/0,o=1\/0,i=-1\/0;return e.forEach((function(e){var a=S(e),l=(0,r.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3];t=Math.min(t,s),o=Math.min(o,c),n=Math.max(n,u),i=Math.max(i,d)})),[t,o,n,i]},_=function(e,t,n,o){if(!(0,s.bt)(e)&&!(0,s.F9)(e))return[e.x,e.y,e.x+t,e.y+n];var i,u=(0,c.z)(0,t,(0,c.z)(1,n,e.points,o),o);if((0,s.F9)(e))i=x(u);else{var d=a.Z.generator(),f=e.roundness?d.curve(u,(0,l.i)(e)):d.linearPath(u,(0,l.i)(e)),p=g(f);i=y(p)}var h=i,m=(0,r.Z)(h,4),v=m[0],b=m[1],w=m[2],k=m[3];return[v+e.x,b+e.y,w+e.x,k+e.y]},O=function(e,t){var n=a.Z.generator(),o=null==e.roundness?n.linearPath(t,(0,l.i)(e)):n.curve(t,(0,l.i)(e)),i=g(o),s=y(i),c=(0,r.Z)(s,4),u=c[0],d=c[1],f=c[2],p=c[3];return[u+e.x,d+e.y,f+e.x,p+e.y]},C=function(e,t){if(!e.length)return[0,0,0,0];var n=1\/0,o=e[0];return e.forEach((function(e){var a=S(e),l=(0,r.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3],f=(0,i.LW)((s+u)\/2,(c+d)\/2,t.x,t.y);f<n&&(n=f,o=e)})),S(o)},I=function(e){var t=j(e),n=(0,r.Z)(t,4),o=n[0],i=n[1],a=n[2],l=n[3];return{minX:o,minY:i,maxX:a,maxY:l,width:a-o,height:l-i,midX:(o+a)\/2,midY:(i+l)\/2}}},2325:function(e,t,n){\"use strict\";n.d(t,{uu:function(){return F},T_:function(){return ae},j_:function(){return le},oT:function(){return Y},wX:function(){return R},MZ:function(){return se},wB:function(){return N},Qu:function(){return B},pX:function(){return W},fb:function(){return U}});var r=n(2577),o=function(e,t){return[0,0,0,0,t,e,1,0]},i=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[0,0,0,0,0,0,0,0];if(t<0||t>7)throw new Error(\"Expected `index` between 0 and 7, got `\".concat(t,\"`\"));return 0!==e&&(n[t]=e),n},a=function(e){return[e[0],e[1],e[2],e[3],-e[4],-e[5],-e[6],-e[7]]},l=function(e,t){return m(t)?[e[0]-t,e[1],e[2],e[3],e[4],e[5],e[6],e[7]]:[e[0]-t[0],e[1]-t[1],e[2]-t[2],e[3]-t[3],e[4]-t[4],e[5]-t[5],e[6]-t[6],e[7]-t[7]]},s=function(e,t){return m(t)?[e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t]:[c(e,t),t[1]*e[0]+t[0]*e[1]-t[4]*e[2]+t[5]*e[3]+t[2]*e[4]-t[3]*e[5]-t[7]*e[6]-t[6]*e[7],t[2]*e[0]+t[0]*e[2]-t[6]*e[3]+t[3]*e[6],t[3]*e[0]+t[6]*e[2]+t[0]*e[3]-t[2]*e[6],t[4]*e[0]+t[2]*e[1]-t[1]*e[2]+t[7]*e[3]+t[0]*e[4]+t[6]*e[5]-t[5]*e[6]+t[3]*e[7],t[5]*e[0]-t[3]*e[1]+t[7]*e[2]+t[1]*e[3]-t[6]*e[4]+t[0]*e[5]+t[4]*e[6]+t[2]*e[7],t[6]*e[0]+t[3]*e[2]-t[2]*e[3]+t[0]*e[6],t[7]*e[0]+t[6]*e[1]+t[5]*e[2]+t[4]*e[3]+t[3]*e[4]+t[2]*e[5]+t[1]*e[6]+t[0]*e[7]]},c=function(e,t){return t[0]*e[0]+t[2]*e[2]+t[3]*e[3]-t[6]*e[6]},u=function(e,t){return[d(e,t),e[1]*t[7]+e[4]*t[5]-e[5]*t[4]+e[7]*t[1],e[2]*t[7]-e[4]*t[6]+e[6]*t[4]+e[7]*t[2],e[3]*t[7]+e[5]*t[6]-e[6]*t[5]+e[7]*t[3],e[4]*t[7]+e[7]*t[4],e[5]*t[7]+e[7]*t[5],e[6]*t[7]+e[7]*t[6],e[7]*t[7]]},d=function(e,t){return e[0]*t[7]+e[1]*t[6]+e[2]*t[5]+e[3]*t[4]+e[4]*t[3]+e[5]*t[2]+e[6]*t[1]+e[7]*t[0]},f=function(e){return Math.sqrt(Math.abs(e[0]*e[0]-e[2]*e[2]-e[3]*e[3]+e[6]*e[6]))},p=function(e){var t=f(e);if(0===t||1===t)return e;var n=e[6]<0?-1:1;return s(e,n\/t)},h=function(e){var t=function(e){return Math.sqrt(Math.abs(e[7]*e[7]-e[5]*e[5]-e[4]*e[4]+e[1]*e[1]))}(e);return 0===t||1===t?e:s(e,1\/t)},m=function(e){return\"number\"==typeof e},g=(i(1,1),i(1,2),i(1,3),i(1,4),i(1,5),i(1,6),i(1,7),function(e,t,n){return p([0,n,e,t,0,0,0,0])}),v=function(e,t){return p(u(t,e))},b=function(e,t){return n=e,[(r=t)[0]*n[0]+r[2]*n[2]+r[3]*n[3]-r[6]*n[6],r[1]*n[0]+r[0]*n[1]-r[4]*n[2]+r[5]*n[3]+r[2]*n[4]-r[3]*n[5]-r[7]*n[6]-r[6]*n[7],r[2]*n[0]+r[0]*n[2]-r[6]*n[3]+r[3]*n[6],r[3]*n[0]+r[6]*n[2]+r[0]*n[3]-r[2]*n[6],r[4]*n[0]+r[7]*n[3]+r[0]*n[4]+r[3]*n[7],r[5]*n[0]+r[7]*n[2]+r[0]*n[5]+r[2]*n[7],r[6]*n[0]+r[0]*n[6],r[7]*n[0]+r[0]*n[7]];var n,r},y=function(e){var t=(0,r.Z)(e,2),n=t[0];return[0,0,0,0,t[1],n,1,0]},x=function(e){return[e[5],e[4]]},w=function(e,t){return p((n=e,[(r=t)[0]*n[0],r[1]*n[0]+r[0]*n[1],r[2]*n[0]+r[0]*n[2],r[3]*n[0]+r[0]*n[3],r[4]*n[0]+r[2]*n[1]-r[1]*n[2]+r[0]*n[4],r[5]*n[0]-r[3]*n[1]+r[1]*n[3]+r[0]*n[5],r[6]*n[0]+r[3]*n[2]-r[2]*n[3]+r[0]*n[6],r[7]*n[0]+r[6]*n[1]+r[5]*n[2]+r[4]*n[3]+r[3]*n[4]+r[2]*n[5]+r[1]*n[6]]));var n,r},k=function(e,t){return f(u(e,t))},E=function(e,t){return d(e,t)},S=function(e){return[0,0,0,0,e[4],e[5],0,0]},j=function(e,t){return n=s(e,Math.sin(t\/2)),r=Math.cos(t\/2),m(r)?[n[0]+r,n[1],n[2],n[3],n[4],n[5],n[6],n[7]]:[n[0]+r[0],n[1]+r[1],n[2]+r[2],n[3]+r[3],n[4]+r[4],n[5]+r[5],n[6]+r[6],n[7]+r[7]];var n,r},_=function(e,t){return p(s(s(e,t),a(e)))},O=n(6552),C=n(1493),I=n(8925),M=n(3063),T=n(1974),P=n(1047),D=n(6340),A=n(267),L=n(5710);function Z(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return z(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var R=function e(t,n,r,o){var i=10\/n.zoom.value,a=[r,o];if(H(n,t)&&(0,A.oY)([t],n))return W(t,a,i);var l=(0,L.WJ)(t);if(l&&e(l,n,r,o))return!0;return B(t,n,a)},N=function(e,t,n,r){var o=10\/t.zoom.value,i=(0,L.WJ)(e);return(!i||!R(i,t,n,r))&&(!B(e,t,[n,r])&&W(e,[n,r],o))},B=function(e,t,n){var r=10\/t.zoom.value,o=(0,P.iB)(e)?G:function(e){if(\"arrow\"===e.type)return!1;if(\"freedraw\"===e.type)return!0;var t=!(0,D.Qm)(e.backgroundColor)||(0,T.Xo)(e);return\"line\"===e.type?t&&(0,O.g6)(e.points):t||(0,T.pC)(e)}(e)?V:X;return K({element:e,point:n,threshold:r,check:o})},H=function(e,t){return e.selectedElementIds[t.id]},W=function(e,t,n){var o=(0,r.Z)(t,2),i=o[0],a=o[1],l=(0,I.qf)(e),s=(0,r.Z)(l,4),c=s[0],u=s[1],d=s[2],f=s[3],p=(c+d)\/2,h=(u+f)\/2,m=(0,O.U1)(i,a,p,h,-e.angle),g=(0,r.Z)(m,2),v=g[0],b=g[1];return v>c-n&&v<d+n&&b>u-n&&b<f+n},F=function(e,t){var n=t.x,r=t.y,o=U(e,e.width,e.height);return K({element:e,point:[n,r],threshold:o,check:q})},U=function(e,t,n){var r=(\"diamond\"===e.type?1\/Math.sqrt(2):1)*Math.min(t,n);return Math.max(16,Math.min(.25*r,32))},K=function(e){switch(e.element.type){case\"rectangle\":case\"image\":case\"text\":case\"diamond\":case\"ellipse\":var t=Y(e.element,e.point);return e.check(t,e.threshold);case\"freedraw\":return!!e.check(J(e.element,e.point),e.threshold)&&te(e.element,e.point,e.threshold);case\"arrow\":case\"line\":return ne(e);case\"selection\":return console.warn(\"This should not happen, we need to investigate why it does.\"),!1}},Y=function(e,t){switch(e.type){case\"rectangle\":case\"image\":case\"text\":return J(e,t);case\"diamond\":return $(e,t);case\"ellipse\":return Q(e,t)}},G=function(e,t){return e<0},V=function(e,t){return e<t},X=function(e,t){return Math.abs(e)<t},q=function(e,t){return 0<=e&&e<t},J=function(e,t){var n=re(e,t),o=(0,r.Z)(n,4),i=o[1],a=o[2],l=o[3];return Math.max(E(i,g(0,1,-l)),E(i,g(1,0,-a)))},$=function(e,t){var n=re(e,t),o=(0,r.Z)(n,4),i=o[1],a=o[2],l=o[3],s=g(l,a,-l*a);return E(i,s)},Q=function(e,t){var n,o=ee(e,t),i=(0,r.Z)(o,2),a=i[0],l=i[1];return n=l,-Math.sign(n[1])*E(a,l)},ee=function(e,t){var n=re(e,t),i=(0,r.Z)(n,4),a=i[1],l=i[2],s=i[3],c=x(a),u=(0,r.Z)(c,2),d=u[0],f=u[1],p=.707,h=.707,m=l,g=s;[0,1,2,3].forEach((function(e){var t=m*p,n=g*h,r=(m*m-g*g)*Math.pow(p,3)\/m,o=(g*g-m*m)*Math.pow(h,3)\/g,i=t-r,a=n-o,l=d-r,s=f-o,c=Math.hypot(a,i),u=Math.hypot(s,l);p=Math.min(1,Math.max(0,(l*c\/u+r)\/m)),h=Math.min(1,Math.max(0,(s*c\/u+o)\/g));var v=Math.hypot(h,p);p\/=v,h\/=v}));var y,w=o(m*p,g*h);return[a,b(v(a,y=w),y)]},te=function(e,t,n){var o,i;if(0===e.angle)o=t[0]-e.x,i=t[1]-e.y;else{var a=(0,I.qf)(e),l=(0,r.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3],f=(0,O.xj)(t,[s+(u-s)\/2,c+(d-c)\/2],-e.angle);o=f[0]-e.x,i=f[1]-e.y}var p,h=(0,r.Z)(e.points,2),m=h[0],g=h[1];if((0,O.LW)(m[0],m[1],o,i)<n||(0,O.LW)(g[0],g[1],o,i)<n)return!0;for(var v=0;v<e.points.length;v++){var b=[g[0]-m[0],g[1]-m[1]],y=Math.hypot(b[1],b[0]),x=[b[0]\/y,b[1]\/y],w=[o-m[0],i-m[1]],k=(w[0]*x[0]+w[1]*x[1])\/Math.hypot(x[1],x[0]);p=[m[0]+x[0]*k,m[1]+x[1]*k];var E=(0,O.LW)(p[0],p[1],m[0],m[1]),S=(0,O.LW)(p[0],p[1],g[0],g[1]);if(p=S<E&&E>y?g:E<S&&S>y?m:p,Math.hypot(i-p[1],o-p[0])<n)return!0;m=g,g=e.points[v+1]}var j=(0,M.R2)(e);return!(!j||!j.sets.length)&&be(j,o,i,n)},ne=function(e){var t=e.element,n=e.threshold;if(!(0,M.R2)(t))return!1;var o=re(e.element,e.point),i=(0,r.Z)(o,4),a=i[0],l=i[1],s=i[2],c=i[3],u=g(0,1,-c),d=g(1,0,-s);if(!V(E(l,u),n)||!V(E(l,d),n))return!1;var f=x(a),p=(0,r.Z)(f,2),h=p[0],m=p[1],v=(0,M.R2)(t);if(!v)return!1;if(e.check===V&&v.some((function(e){return ve(e,h,m,t.roundness?\"round\":\"sharp\")})))return!0;return v.some((function(e){return be(e,h,m,n)}))},re=function(e,t){var n,o=y(t),i=(0,I.qf)(e),a=(0,r.Z)(i,4),s=a[0],c=a[1],u=a[2],d=a[3],f=(0,I.qf)(e),p=ie([s,c,u,d]),h=j(p,e.angle),m=_(h,o),g=function(e){return[0,0,0,0,Math.abs(e[4]),Math.abs(e[5]),1,0]}(l(m,S(p))),v=(n=e.x,[0,0,0,0,e.y,n,0,0]),b=l(m,v),x=(0,r.Z)(f,4),w=x[0],k=x[1];return[b,g,(x[2]-w)\/2,(x[3]-k)\/2]},oe=function(e){var t=(0,I.qf)(e),n=(0,r.Z)(t,4),o=n[0],i=n[1],l=n[2],c=n[3],u=ie([o,i,l,c]),d=j(u,e.angle),f=a(function(e){return[1,0,0,0,-.5*e[5],.5*e[4],0,0]}(S(u)));return s(f,d)},ie=function(e){var t=(0,r.Z)(e,4),n=t[0],i=t[1],a=t[2],l=t[3];return o((n+a)\/2,(i+l)\/2)},ae=function(e,t,n){var r=oe(e),o=_(r,y(t)),i=_(r,y(n)),a=v(o,i),l=e.height\/e.width,s=e.width\/2,c=e.height\/2,u=a[2],d=a[3],f=a[1],p=Math.abs(d),h=Math.abs(u);switch(e.type){case\"rectangle\":case\"image\":case\"text\":return f\/(s*(h+l*p));case\"diamond\":return p<h?f\/(h*s):f\/(p*c);case\"ellipse\":return f\/(s*Math.sqrt(Math.pow(u,2)+Math.pow(l,2)*Math.pow(d,2)))}},le=function(e,t,n){if(0===t){var o=(0,I.qf)(e),i=(0,r.Z)(o,4),l=i[0],s=i[1],c=i[2],u=i[3],d=ie([l,s,c,u]);return x(d)}var f,p=oe(e),h=_(p,y(n)),m=a(p);switch(e.type){case\"rectangle\":case\"image\":case\"text\":case\"diamond\":f=ge(e,t,h);break;case\"ellipse\":f=me(e,t,h)}return x(_(m,f))},se=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=oe(e),i=_(o,y(t)),l=_(o,y(n)),s=v(i,l),c=a(o),u=ce(e,s,i,r);return u.map((function(e){return x(_(c,e))}))},ce=function(e,t,n){var r,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;switch(e.type){case\"rectangle\":case\"image\":case\"text\":case\"diamond\":var i=ue(e);r=i.flatMap((function(e,n){var r=[e,i[(n+1)%4]];return de(t,fe(r,o))})).concat(i.flatMap((function(e){return he(e,o,t)})));break;case\"ellipse\":r=pe(e,o,t)}if(r.length<2)return[];var a=r.sort((function(e,t){return k(e,n)-k(t,n)}));return[a[0],a[a.length-1]]},ue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=t*e.width\/2,r=t*e.height\/2;switch(e.type){case\"rectangle\":case\"image\":case\"text\":return[o(n,r),o(n,-r),o(-n,-r),o(-n,r)];case\"diamond\":return[o(0,r),o(n,0),o(0,-r),o(-n,0)]}},de=function(e,t){var n=(0,r.Z)(t,2),o=n[0],i=n[1];return E(o,e)*E(i,e)>=0?[]:[w(e,v(o,i))]},fe=function(e,t){var n=(0,r.Z)(e,2),o=n[0],i=n[1],a=function(e,t){var n=.5*t;return[1,0,0,0,n*e[4],n*e[5],0,0]}(function(e,t){return h([0,0,0,0,t[4]-e[4],t[5]-e[5],0,0])}(o,i),t);return[_(a,o),_(a,i)]},pe=function(e,t,n){var r=e.width\/2+t,i=e.height\/2+t,a=n[2],l=n[3],s=n[1],c=r*r*a*a+i*i*l*l,u=c-s*s;if(0===c||u<=0)return[];var d=Math.sqrt(u),f=-r*r*a*s,p=-i*i*l*s;return[o((f+r*i*l*d)\/c,(p-r*i*a*d)\/c),o((f-r*i*l*d)\/c,(p+r*i*a*d)\/c)]},he=function(e,t,n){if(0===t)return 0===E(n,e)?[e]:[];var i=n[2],a=n[3],l=n[1],s=x(e),c=(0,r.Z)(s,2),u=c[0],d=c[1],f=i*i+a*a,p=t*t*f-Math.pow(i*u+a*d+l,2);if(0===f||p<=0)return[];var h=Math.sqrt(p),m=u*a*a-d*i*a-i*l,g=d*i*i-u*i*a-a*l;return[o((m+a*h)\/f,(g-i*h)\/f),o((m-a*h)\/f,(g+i*h)\/f)]},me=function(e,t,n){var i=Math.abs(t),a=e.width*i\/2,l=e.height*i\/2,s=Math.sign(t),c=x(n),u=(0,r.Z)(c,2),d=u[0],f=u[1],p=0===f?1e-4:f,h=Math.pow(d,2)*Math.pow(l,2)+Math.pow(p,2)*Math.pow(a,2),m=(-d*Math.pow(l,2)+s*p*Math.sqrt(Math.max(0,h-Math.pow(a,2)*Math.pow(l,2))))\/h,g=(-m*d-1)\/p;0===g&&(g=.01*(Object.is(g,-0)?-1:1));var v=-Math.pow(a,2)*m\/(Math.pow(g,2)*Math.pow(l,2)+Math.pow(m,2)*Math.pow(a,2));return o(v,(-m*v-1)\/g)},ge=function(e,t,n){var r=Math.abs(t),o=Math.sign(t),i=ue(e,r),a=0,l=null;return i.forEach((function(e){var t=o*v(n,e)[1];t>a&&(a=t,l=e)})),l},ve=function(e,t,n,r){var o,i=[],a=!1,l=Z((0,I.CM)(e));try{for(l.s();!(o=l.n()).done;){var s=o.value;\"move\"===s.op?(a=!a)&&i.push([s.data[0],s.data[1]]):\"bcurveTo\"===s.op?a&&(i.push([s.data[0],s.data[1]]),i.push([s.data[2],s.data[3]]),i.push([s.data[4],s.data[5]])):\"lineTo\"===s.op&&a&&i.push([s.data[0],s.data[1]])}}catch(e){l.e(e)}finally{l.f()}if(i.length>=4){if(\"sharp\"===r)return(0,O.c9)(i,t,n);var c=(0,C.s)(i,10,5);return(0,O.c9)(c,t,n)}return!1},be=function(e,t,n,o){var i=(0,I.CM)(e),a=[0,0];return i.some((function(i,l){var s=i.op,c=i.data;if(\"move\"===s)a=c;else{if(\"bcurveTo\"===s){var u=[c[0],c[1]],d=[c[2],c[3]],f=[c[4],c[5]],p=a;a=f;var h=function(e,t,n,o,i,a){for(var l=(0,r.Z)(i,2),s=l[0],c=l[1],u=function(r,i){return Math.pow(1-r,3)*o[i]+3*r*Math.pow(1-r,2)*n[i]+3*Math.pow(r,2)*(1-r)*t[i]+e[i]*Math.pow(r,3)},d=0;d<=1;){var f=u(d,0),p=u(d,1);if(Math.sqrt(Math.pow(f-s,2)+Math.pow(p-c,2))<a)return!0;d+=.01}return!1}(p,u,d,f,[t,n],o);return h}if(\"lineTo\"===s)return ve(e,t,n,\"sharp\");\"qcurveTo\"===s&&console.warn(\"qcurveTo is not implemented yet\")}return!1}))}},5637:function(e,t,n){\"use strict\";n.d(t,{PK:function(){return p},Xx:function(){return h},bp:function(){return g},oA:function(){return m}});var r=n(2577),o=n(7169),i=n(8950),a=n(2975),l=n.n(a),s=n(2335),c=n(8211),u=n(1974);function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p=function(e){return new Promise((function(t,n){var r=new Image;r.onload=function(){t(r)},r.onerror=function(e){n(e)},r.src=e}))},h=function(){var e=(0,i.Z)(l().mark((function e(t){var n,r,o,a,c;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.fileIds,r=t.files,o=t.imageCache,a=new Map,c=new Map,e.next=5,Promise.all(n.reduce((function(e,t){var n=r[t];return n&&!a.has(t)?(a.set(t,!0),e.concat((0,i.Z)(l().mark((function e(){var r,i,a;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,n.mimeType!==s.LO.binary){e.next=3;break}throw new Error(\"Only images can be added to ImageCache\");case 3:return r=p(n.dataURL),i={image:r,mimeType:n.mimeType},o.set(t,i),e.next=8,r;case 8:a=e.sent,o.set(t,f(f({},i),{},{image:a})),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(0),c.set(t,!0);case 15:case\"end\":return e.stop()}}),e,null,[[0,12]])})))())):e}),[]));case 5:return e.abrupt(\"return\",{imageCache:o,updatedFiles:a,erroredFiles:c});case 6:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),m=function(e){return e.filter((function(e){return(0,u.wi)(e)}))},g=function(){var e=(0,i.Z)(l().mark((function e(t){var n,o,i,a,u,d,f;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=(new DOMParser).parseFromString(t,s.LO.svg),o=n.querySelector(\"svg\"),!n.querySelector(\"parsererror\")&&\"svg\"===(null==(l=o)?void 0:l.nodeName.toLowerCase())){e.next=7;break}throw new Error((0,c.t)(\"errors.invalidSVGString\"));case 7:return o.hasAttribute(\"xmlns\")||o.setAttribute(\"xmlns\",s.hR),o.hasAttribute(\"width\")&&o.hasAttribute(\"height\")||(i=o.getAttribute(\"viewBox\"),a=o.getAttribute(\"width\")||\"50\",u=o.getAttribute(\"height\")||\"50\",i&&(d=i.match(\/\\d+ +\\d+ +(\\d+) +(\\d+)\/))&&(f=(0,r.Z)(d,3),a=f[1],u=f[2]),o.setAttribute(\"width\",a),o.setAttribute(\"height\",u)),e.abrupt(\"return\",o.outerHTML);case 10:case\"end\":return e.stop()}var l}),e)})));return function(t){return e.apply(this,arguments)}}()},1047:function(e,t,n){\"use strict\";n.d(t,{ox:function(){return p.ox},BQ:function(){return H},_M:function(){return W},EJ:function(){return M},o8:function(){return O},Sy:function(){return d.Sy},os:function(){return f.os},KP:function(){return f.KP},Un:function(){return k},$V:function(){return I},qf:function(){return f.qf},Pi:function(){return f.Pi},jt:function(){return y},o4:function(){return c},Lm:function(){return R},Qp:function(){return u},T:function(){return E.T},xx:function(){return E.xx},Uo:function(){return Z},n2:function(){return x},PC:function(){return p.PC},kK:function(){return p.kK},n_:function(){return z},wX:function(){return h.wX},r2:function(){return i.r2},wB:function(){return h.wB},QD:function(){return l},qP:function(){return N},iB:function(){return i.iB},Up:function(){return d.Up},vw:function(){return d.vw},y8:function(){return d.y8},VL:function(){return d.VL},oN:function(){return j.oN},JZ:function(){return d.JZ},RT:function(){return D},b_:function(){return T.b_},vY:function(){return E.vY},N_:function(){return d.N_}});var r=n(7169),o=n(1935),i=n(1974),a=n(2335),l=function(e){return(0,i.bt)(e)||(0,i.F9)(e)?e.points.length<2:0===e.width&&0===e.height},s=function(e,t,n){var r=Math.abs(t),o=Math.abs(n);if(\"line\"===e||\"arrow\"===e||\"freedraw\"===e){var i=Math.round(Math.atan(o\/r)\/a.ay)*a.ay;0===i?n=0:i===Math.PI\/2?t=0:n=r*Math.tan(i)*Math.sign(n)||n}else\"selection\"!==e&&(n=r*Math.sign(n));return{width:t,height:n}},c=function(e,t,n,r){var o=n-e,i=r-t,l=Math.round(Math.atan(i\/o)\/a.ay)*a.ay;if(0===l)i=0;else if(l===Math.PI\/2)o=0;else{var s=Math.tan(l),c=t-s*e,u=-1\/s,d=r-u*n;o=(-1*d- -1*c)\/(-1*s- -1*u)-e,i=(c*u-d*s)\/(-1*s- -1*u)-t}return{width:o,height:i}},u=function(e){var t={width:e.width,height:e.height,x:e.x,y:e.y};if(e.width<0){var n=Math.abs(e.width);t.width=n,t.x=e.x-n}if(e.height<0){var r=Math.abs(e.height);t.height=r,t.y=e.y-r}return t},d=n(2791),f=n(8925),p=n(267),h=n(2325),m=n(2577),g=n(2726),v=[\"rotation\"],b=function(e,t,n){return t>=e[0]&&t<=e[0]+e[2]&&n>=e[1]&&n<=e[1]+e[3]},y=function(e,t,n,r,o,i){return e.reduce((function(e,a){if(e)return e;var l=function(e,t,n,r,o,i){if(!t.selectedElementIds[e.id])return!1;var a=(0,p.PC)(e,o,i),l=a.rotation,s=(0,g.Z)(a,v);if(l&&b(l,n,r))return\"rotation\";var c=Object.keys(s).filter((function(e){var t=s[e];return!!t&&b(t,n,r)}));return c.length>0&&c[0]}(a,t,n,r,o,i);return l?{element:a,transformHandleType:l}:null}),null)},x=function(e,t,n,r,o){var i=(0,m.Z)(e,4),a=i[0],l=i[1],s=i[2],c=i[3],u=(0,p.kK)([a,l,s,c,(a+s)\/2,(l+c)\/2],0,r,o,p.ox);return Object.keys(u).find((function(e){var r=u[e];return r&&b(r,t,n)}))||!1},w=[\"ns\",\"nesw\",\"ew\",\"nwse\"],k=function(e){var t=e.element,n=e.transformHandleType,r=t&&Math.sign(t.height)*Math.sign(t.width)==-1,o=null;switch(n){case\"n\":case\"s\":o=\"ns\";break;case\"w\":case\"e\":o=\"ew\";break;case\"nw\":case\"se\":o=r?\"nesw\":\"nwse\";break;case\"ne\":case\"sw\":o=r?\"nwse\":\"nesw\";break;case\"rotation\":return\"grab\"}return o&&t&&(o=function(e,t){var n=w.indexOf(e);if(n>=0){var r=Math.round(t\/(Math.PI\/4));e=w[(n+r)%w.length]}return e}(o,t.angle)),o?\"\".concat(o,\"-resize\"):\"\"},E=n(8634),S=n(8290),j=n(5710),_=n(242),O=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,l=arguments.length>7?arguments[7]:void 0,s=(0,f.KP)(t),c=(0,m.Z)(s,2),u=c[0],d=c[1],p={x:n-u,y:r-d};t.forEach((function(n){if(C(o,i,a,e,n,p),!n.groupIds.length||l.editingGroupId&&!(0,_.zq)(l,n)){var r=(0,j.WJ)(n);r&&C(o,i,a,e,r,p)}(0,S.Ww)(n,{simultaneouslyUpdated:t})}))},C=function(e,t,n,r,i,a){var l,s;if(e){var c=e&&t<n,u=e&&t>n,d=r.originalElements.get(i.id);l=c&&d?d.x:i.x+a.x,s=u&&d?d.y:i.y+a.y}else l=i.x+a.x,s=i.y+a.y;(0,o.DR)(i,{x:l,y:s})},I=function(e,t,n){var r=(0,f.KP)(e),o=(0,m.Z)(r,2);return[t-o[0],n-o[1]]},M=function(e,t,n,r,i,a,l,c,u,d,f){if(u&&\"selection\"!==e.type)if(f)c=l\/f;else{if(Math.abs(a-r)>Math.abs(i-n)){var p=s(t,c,i<n?-l:l);l=p.width,c=p.height}else{var h=s(t,l,a<r?-c:c);l=h.width,c=h.height}c<0&&(c=-c)}var m=i<n?n-l:n,g=a<r?r-c:r;d&&(m=n-(l+=l)\/2,g=r-(c+=c)\/2),0!==l&&0!==c&&(0,o.DR)(e,{x:m,y:g,width:l,height:c})},T=n(6906),P=n(75),D=function(e,t){return Boolean(!e.viewModeEnabled&&\"custom\"!==e.activeTool.type&&(e.editingElement||\"selection\"!==e.activeTool.type&&\"eraser\"!==e.activeTool.type&&\"hand\"!==e.activeTool.type)||(0,P.eD)(t,e).length)};function A(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function L(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?A(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):A(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Z=function(e){return e.reduce((function(e,t){return e+t.version}),0)},z=function(e){return e.filter((function(e){return!e.isDeleted&&!l(e)}))},R=function(e){return e.filter((function(e){return!e.isDeleted}))},N=function(e){return!e.isDeleted},B=function(e){return R(e).map((function(e){return(0,i.dt)(e.type)?L(L({},e),{},{lastCommittedPoint:null}):e}))},H=function(e){return B(e)},W=function(e){return B(e)}},6938:function(e,t,n){\"use strict\";n.d(t,{_:function(){return j}});var r=n(1930),o=n(7169),i=n(2577),a=n(8821),l=n(5169),s=n(6552),c=n(1047),u=n(8925),d=n(1935),f=n(1564),p=n(8290),h=n(6340),m=n(1974),g=n(6066),v=n(5710),b=n(3063),y=n(2335);function x(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return w(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return w(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var S={version:null,points:[],zoom:null},j=function(){function e(t,n){(0,a.Z)(this,e),this.elementId=t.id,f.Z.mapElementToScene(this.elementId,n),e.normalizePoints(t),this.selectedPointsIndices=null,this.lastUncommittedPoint=null,this.isDragging=!1,this.pointerOffset={x:0,y:0},this.startBindingElement=\"keep\",this.endBindingElement=\"keep\",this.pointerDownState={prevSelectedPointsIndices:null,lastClickedPoint:-1,origin:null,segmentMidpoint:{value:null,index:null,added:!1}},this.hoverPointIndex=-1,this.segmentMidPointHoveredCoords=null}return(0,l.Z)(e,null,[{key:\"getElement\",value:function(e){var t,n=null===(t=f.Z.getScene(e))||void 0===t?void 0:t.getNonDeletedElement(e);return n||null}},{key:\"handleBoxSelection\",value:function(t,n,r){var o;if(!n.editingLinearElement||\"selection\"!==(null===(o=n.draggingElement)||void 0===o?void 0:o.type))return!1;var a=n.editingLinearElement,l=a.selectedPointsIndices,s=a.elementId,u=e.getElement(s);if(!u)return!1;var d=(0,c.qf)(n.draggingElement),f=(0,i.Z)(d,4),p=f[0],h=f[1],m=f[2],g=f[3],v=e.getPointsGlobalCoordinates(u).reduce((function(e,n,r){return(n[0]>=p&&n[0]<=m&&n[1]>=h&&n[1]<=g||t.shiftKey&&null!=l&&l.includes(r))&&e.push(r),e}),[]);r({editingLinearElement:E(E({},a),{},{selectedPointsIndices:v.length?v:null})})}},{key:\"handlePointDragging\",value:function(t,n,r,o,a,l){if(!l)return!1;var s=l.selectedPointsIndices,c=l.elementId,u=e.getElement(c);if(!u)return!1;var d=u.points[l.pointerDownState.lastClickedPoint];if(s&&d){if((0,g.Ge)(t)&&1===s.length&&u.points.length>1){var f=s[0],p=u.points[0===f?1:f-1],b=e._getShiftLockedDelta(u,p,[r,o],n.gridSize),y=(0,i.Z)(b,2),x=y[0],w=y[1];e.movePoints(u,[{index:f,point:[x+p[0],w+p[1]],isDragging:f===l.pointerDownState.lastClickedPoint}])}else{var k=e.createPointAt(u,r-l.pointerOffset.x,o-l.pointerOffset.y,n.gridSize),E=k[0]-d[0],S=k[1]-d[1];e.movePoints(u,s.map((function(t){return{index:t,point:t===l.pointerDownState.lastClickedPoint?e.createPointAt(u,r-l.pointerOffset.x,o-l.pointerOffset.y,n.gridSize):[u.points[t][0]+E,u.points[t][1]+S],isDragging:t===l.pointerDownState.lastClickedPoint}}))),(0,v.WJ)(u)&&(0,v.RB)(u,!1)}if((0,m.Mn)(u,!1)){var j=[];0===s[0]&&j.push((0,h.AK)(e.getPointGlobalCoordinates(u,u.points[0])));var _=s[s.length-1];_===u.points.length-1&&j.push((0,h.AK)(e.getPointGlobalCoordinates(u,u.points[_]))),j.length&&a(u,j)}return!0}return!1}},{key:\"handlePointerUp\",value:function(t,n,r){var o,i=n.elementId,a=n.selectedPointsIndices,l=n.isDragging,c=n.pointerDownState,u=e.getElement(i);if(!u)return n;var d={};if(l&&a){var m,g=x(a);try{for(g.s();!(m=g.n()).done;){var v=m.value;if(0===v||v===u.points.length-1){(0,s.g6)(u.points,r.zoom.value)&&e.movePoints(u,[{index:v,point:0===v?u.points[u.points.length-1]:u.points[0]}]);var b=(0,p.N1)(r)?(0,p.Y9)((0,h.AK)(e.getPointAtIndexGlobalCoordinates(u,v)),f.Z.getScene(u)):null;d[0===v?\"startBindingElement\":\"endBindingElement\"]=b}}}catch(e){g.e(e)}finally{g.f()}}return E(E(E({},n),d),{},{selectedPointsIndices:l||t.shiftKey?!l&&t.shiftKey&&null!==(o=c.prevSelectedPointsIndices)&&void 0!==o&&o.includes(c.lastClickedPoint)?a&&a.filter((function(e){return e!==c.lastClickedPoint})):a:null!=a&&a.includes(c.lastClickedPoint)?[c.lastClickedPoint]:a,isDragging:!1,pointerOffset:{x:0,y:0}})}},{key:\"isSegmentTooShort\",value:function(t,n,r,o){var i=(0,s.LW)(n[0],n[1],r[0],r[1]);return t.points.length>2&&t.roundness&&(i=(0,s.eH)(t,r)),i*o.value<4*e.POINT_HANDLE_SIZE}},{key:\"getSegmentMidPoint\",value:function(t,n,r,o){var a=(0,s.H5)(n,r);if(t.points.length>2&&t.roundness){var l=(0,s.yB)(t,t.points[o]);if(l){var c=(0,s.lk)(t,t.points[o],.5),u=(0,s.N_)(l[0],l[1],l[2],l[3],c),d=(0,i.Z)(u,2),f=d[0],p=d[1];a=e.getPointGlobalCoordinates(t,[f,p])}}return a}},{key:\"getSegmentMidPointIndex\",value:function(t,n,r){var o=e.getElement(t.elementId);if(!o)return-1;for(var i=e.getEditorMidPoints(o,n),a=0;a<i.length;){if(e.arePointsEqual(r,i[a]))return a+1;a++}return-1}},{key:\"handlePointerDown\",value:function(t,n,o,a,l){var u,h={didAddPoint:!1,hitElement:null,linearElementEditor:null};if(!l)return h;var g=l.elementId,v=e.getElement(g);if(!v)return h;var b=e.getSegmentMidpointHitCoords(l,a,n),y=null;if(b&&(y=e.getSegmentMidPointIndex(l,n,b)),t.altKey&&n.editingLinearElement)return null==l.lastUncommittedPoint&&((0,d.DR)(v,{points:[].concat((0,r.Z)(v.points),[e.createPointAt(v,a.x,a.y,n.gridSize)])}),h.didAddPoint=!0),o.resumeRecording(),h.linearElementEditor=E(E({},l),{},{pointerDownState:{prevSelectedPointsIndices:l.selectedPointsIndices,lastClickedPoint:-1,origin:{x:a.x,y:a.y},segmentMidpoint:{value:b,index:y,added:!1}},selectedPointsIndices:[v.points.length-1],lastUncommittedPoint:null,endBindingElement:(0,p.Y9)(a,f.Z.getScene(v))}),h.didAddPoint=!0,h;var x=e.getPointIndexUnderCursor(v,n.zoom,a.x,a.y);if(x>=0||b)h.hitElement=v;else{var w=l.startBindingElement,k=l.endBindingElement;(0,p.N1)(n)&&(0,m.Mn)(v)&&(0,p.HG)(v,w,k)}var S=(0,c.qf)(v),j=(0,i.Z)(S,4),O=j[0],C=j[1],I=(O+j[2])\/2,M=(C+j[3])\/2,T=x>-1&&(0,s.U1)(v.x+v.points[x][0],v.y+v.points[x][1],I,M,v.angle),P=x>-1||t.shiftKey?t.shiftKey||null!==(u=l.selectedPointsIndices)&&void 0!==u&&u.includes(x)?_([].concat((0,r.Z)(l.selectedPointsIndices||[]),[x])):[x]:null;return h.linearElementEditor=E(E({},l),{},{pointerDownState:{prevSelectedPointsIndices:l.selectedPointsIndices,lastClickedPoint:x,origin:{x:a.x,y:a.y},segmentMidpoint:{value:b,index:y,added:!1}},selectedPointsIndices:P,pointerOffset:T?{x:a.x-T[0],y:a.y-T[1]}:{x:0,y:0}}),h}},{key:\"arePointsEqual\",value:function(e,t){return!e&&!t||!(!e||!t)&&(0,s.Jj)(e,t)}},{key:\"handlePointerMove\",value:function(t,n,r,o){if(!o.editingLinearElement)return null;var a=o.editingLinearElement,l=a.elementId,s=a.lastUncommittedPoint,c=e.getElement(l);if(!c)return o.editingLinearElement;var u,d=c.points,f=d[d.length-1];if(!t.altKey)return f===s&&e.deletePoints(c,[d.length-1]),E(E({},o.editingLinearElement),{},{lastUncommittedPoint:null});if((0,g.Ge)(t)&&d.length>=2){var p=d[d.length-2],h=e._getShiftLockedDelta(c,p,[n,r],o.gridSize),m=(0,i.Z)(h,2),v=m[0],b=m[1];u=[v+p[0],b+p[1]]}else u=e.createPointAt(c,n-o.editingLinearElement.pointerOffset.x,r-o.editingLinearElement.pointerOffset.y,o.gridSize);return f===s?e.movePoints(c,[{index:c.points.length-1,point:u}]):e.addPoints(c,o,[{point:u}]),E(E({},o.editingLinearElement),{},{lastUncommittedPoint:c.points[c.points.length-1]})}},{key:\"getPointGlobalCoordinates\",value:function(e,t){var n=(0,c.qf)(e),r=(0,i.Z)(n,4),o=r[0],a=r[1],l=(o+r[2])\/2,u=(a+r[3])\/2,d=e.x,f=e.y,p=(0,s.U1)(d+t[0],f+t[1],l,u,e.angle),h=(0,i.Z)(p,2);return[d=h[0],f=h[1]]}},{key:\"getPointsGlobalCoordinates\",value:function(e){var t=(0,c.qf)(e),n=(0,i.Z)(t,4),r=n[0],o=n[1],a=n[2],l=n[3],u=(r+a)\/2,d=(o+l)\/2;return e.points.map((function(t){var n=e.x,r=e.y,o=(0,s.U1)(n+t[0],r+t[1],u,d,e.angle),a=(0,i.Z)(o,2);return[n=a[0],r=a[1]]}))}},{key:\"getPointAtIndexGlobalCoordinates\",value:function(e,t){var n=t<0?e.points.length+t:t,r=(0,c.qf)(e),o=(0,i.Z)(r,4),a=o[0],l=o[1],u=(a+o[2])\/2,d=(l+o[3])\/2,f=e.points[n],p=e.x,h=e.y;return f?(0,s.U1)(p+f[0],h+f[1],u,d,e.angle):(0,s.U1)(p,h,u,d,e.angle)}},{key:\"pointFromAbsoluteCoords\",value:function(e,t){var n=(0,c.qf)(e),r=(0,i.Z)(n,4),o=r[0],a=r[1],l=(o+r[2])\/2,u=(a+r[3])\/2,d=(0,s.U1)(t[0],t[1],l,u,-e.angle),f=(0,i.Z)(d,2),p=f[0],h=f[1];return[p-e.x,h-e.y]}},{key:\"getPointIndexUnderCursor\",value:function(t,n,r,o){for(var i=e.getPointsGlobalCoordinates(t),a=i.length;--a>-1;){var l=i[a];if((0,s.LW)(r,o,l[0],l[1])*n.value<e.POINT_HANDLE_SIZE+1)return a}return-1}},{key:\"createPointAt\",value:function(e,t,n,r){var o=(0,s.wC)(t,n,r),a=(0,c.qf)(e),l=(0,i.Z)(a,4),u=l[0],d=l[1],f=(u+l[2])\/2,p=(d+l[3])\/2,h=(0,s.U1)(o[0],o[1],f,p,-e.angle),m=(0,i.Z)(h,2),g=m[0],v=m[1];return[g-e.x,v-e.y]}},{key:\"getNormalizedPoints\",value:function(e){var t=e.points,n=t[0][0],r=t[0][1];return{points:t.map((function(e,t){return[e[0]-n,e[1]-r]})),x:e.x+n,y:e.y+r}}},{key:\"normalizePoints\",value:function(t){(0,d.DR)(t,e.getNormalizedPoints(t))}},{key:\"duplicateSelectedPoints\",value:function(t){if(!t.editingLinearElement)return!1;var n=t.editingLinearElement,r=n.selectedPointsIndices,o=n.elementId,i=e.getElement(o);if(!i||null===r)return!1;var a=i.points,l=[],s=!1,c=-1,u=a.reduce((function(e,t,n){if(++c,e.push(t),r.includes(n)){var o=a[n+1];o||(s=!0),e.push(o?[(t[0]+o[0])\/2,(t[1]+o[1])\/2]:[t[0],t[1]]),l.push(c+1),++c}return e}),[]);if((0,d.DR)(i,{points:u}),s){var f=i.points[i.points.length-1];e.movePoints(i,[{index:i.points.length-1,point:[f[0]+30,f[1]+30]}])}return{appState:E(E({},t),{},{editingLinearElement:E(E({},t.editingLinearElement),{},{selectedPointsIndices:l})})}}},{key:\"deletePoints\",value:function(t,n){var r=0,o=0;if(n.includes(0)){var i=t.points.find((function(e,t){return!n.includes(t)}));i&&(r=i[0],o=i[1])}var a=t.points.reduce((function(e,t,i){return n.includes(i)||e.push(e.length?[t[0]-r,t[1]-o]:[0,0]),e}),[]);e._updatePoints(t,a,r,o)}},{key:\"addPoints\",value:function(t,n,o){var i=[].concat((0,r.Z)(t.points),(0,r.Z)(o.map((function(e){return e.point}))));e._updatePoints(t,i,0,0)}},{key:\"movePoints\",value:function(t,n,r){var o=t.points,i=0,a=0,l=n.find((function(e){return 0===e.index}));l&&(i=l.point[0]+o[l.index][0],a=l.point[1]+o[l.index][1]);var s=o.map((function(e,t){var r=n.find((function(e){return e.index===t}));if(r){if(l)return e;var s=r.point[0]-o[r.index][0],c=r.point[1]-o[r.index][1];return[e[0]+s,e[1]+c]}return i||a?[e[0]-i,e[1]-a]:e}));e._updatePoints(t,s,i,a,r)}},{key:\"shouldAddMidpoint\",value:function(t,n,r){if(!e.getElement(t.elementId))return!1;var o=t.pointerDownState.segmentMidpoint;if(o.added||null===o.value||null===o.index||null===t.pointerDownState.origin)return!1;var i=t.pointerDownState.origin,a=(0,s.LW)(i.x,i.y,n.x,n.y);return!(!r.editingLinearElement&&a<y.f\/r.zoom.value)}},{key:\"addMidpoint\",value:function(t,n,o){var i=e.getElement(t.elementId);if(i){var a=t.pointerDownState.segmentMidpoint,l={pointerDownState:t.pointerDownState,selectedPointsIndices:t.selectedPointsIndices},s=e.createPointAt(i,n.x,n.y,o.gridSize),c=[].concat((0,r.Z)(i.points.slice(0,a.index)),[s],(0,r.Z)(i.points.slice(a.index)));return(0,d.DR)(i,{points:c}),l.pointerDownState=E(E({},t.pointerDownState),{},{segmentMidpoint:E(E({},t.pointerDownState.segmentMidpoint),{},{added:!0}),lastClickedPoint:a.index}),l.selectedPointsIndices=[a.index],l}}},{key:\"_updatePoints\",value:function(e,t,n,r,o){var i=(0,u.Ut)(e,t),a=(0,u.Ut)(e,e.points),l=(i[0]+i[2])\/2,c=(i[1]+i[3])\/2,f=(a[0]+a[2])\/2-l,p=(a[1]+a[3])\/2-c,h=(0,s.U1)(n,r,f,p,e.angle);(0,d.DR)(e,E(E({},o),{},{points:t,x:e.x+h[0],y:e.y+h[1]}))}},{key:\"_getShiftLockedDelta\",value:function(t,n,r,o){var a=e.getPointGlobalCoordinates(t,n),l=(0,s.wC)(r[0],r[1],o),u=(0,i.Z)(l,2),d=u[0],f=u[1],p=(0,c.o4)(a[0],a[1],d,f),h=p.width,m=p.height;return(0,s.xj)([h,m],[0,0],-t.angle)}}]),e}();j.POINT_HANDLE_SIZE=10,j.getEditorMidPoints=function(e,t){var n=(0,v.WJ)(e);return!t.editingLinearElement&&e.points.length>2&&!n?[]:(S.version===e.version&&S.zoom===t.zoom.value||j.updateEditorMidPointsCache(e,t),S.points)},j.updateEditorMidPointsCache=function(e,t){for(var n=j.getPointsGlobalCoordinates(e),r=0,o=[];r<n.length-1;)if(j.isSegmentTooShort(e,e.points[r],e.points[r+1],t.zoom))o.push(null),r++;else{var i=j.getSegmentMidPoint(e,n[r],n[r+1],r+1);o.push(i),r++}S.points=o,S.version=e.version,S.zoom=t.zoom.value},j.getSegmentMidpointHitCoords=function(e,t,n){var r=e.elementId,o=j.getElement(r);if(!o)return null;if(j.getPointIndexUnderCursor(o,n.zoom,t.x,t.y)>=0)return null;if(j.getPointsGlobalCoordinates(o).length>=3&&!n.editingLinearElement)return null;var i=j.POINT_HANDLE_SIZE\/n.zoom.value,a=e.segmentMidPointHoveredCoords;if(a&&(0,s.LW)(a[0],a[1],t.x,t.y)<=i)return a;for(var l=0,c=j.getEditorMidPoints(o,n);l<c.length;){if(null!==c[l])if((0,s.LW)(c[l][0],c[l][1],t.x,t.y)<=i)return c[l];l++}return null},j.getBoundTextElementPosition=function(e,t){var n=j.getPointsGlobalCoordinates(e);n.length<2&&(0,d.DR)(t,{isDeleted:!0});var r=0,o=0;if(e.points.length%2==1){var i=Math.floor(e.points.length\/2),a=j.getPointGlobalCoordinates(e,e.points[i]);r=a[0]-t.width\/2,o=a[1]-t.height\/2}else{var l=e.points.length\/2-1,c=S.points[l];2===e.points.length&&(c=(0,s.H5)(n[0],n[1])),c&&S.version===e.version||(c=j.getSegmentMidPoint(e,n[l],n[l+1],l+1)),r=c[0]-t.width\/2,o=c[1]-t.height\/2}return{x:r,y:o}},j.getMinMaxXYWithBoundText=function(e,t,n){var r=(0,i.Z)(t,4),o=r[0],a=r[1],l=r[2],c=r[3],u=(o+l)\/2,d=(a+c)\/2,f=j.getBoundTextElementPosition(e,n),p=f.x,h=f.y,m=p+n.width,g=h+n.height,v=(0,s.xj)([o,a],[u,d],e.angle),b=(0,s.xj)([l,a],[u,d],e.angle),y=(0,s.xj)([p,h],[u,d],-e.angle),x=(0,s.xj)([m,h],[u,d],-e.angle),w=(0,s.xj)([p,g],[u,d],-e.angle),k=(0,s.xj)([m,g],[u,d],-e.angle);return v[0]<b[0]&&v[1]>=b[1]?(o=Math.min(o,w[0]),l=Math.max(l,Math.max(x[0],k[0])),a=Math.min(a,y[1]),c=Math.max(c,k[1])):v[0]>=b[0]&&v[1]>b[1]?(o=Math.min(o,k[0]),l=Math.max(l,Math.max(y[0],x[0])),a=Math.min(a,w[1]),c=Math.max(c,x[1])):v[0]>=b[0]?(o=Math.min(o,x[0]),l=Math.max(l,w[0]),a=Math.min(a,k[1]),c=Math.max(c,y[1])):v[1]<=b[1]&&(o=Math.min(o,Math.min(x[0],y[0])),l=Math.max(l,k[0]),a=Math.min(a,x[1]),c=Math.max(c,w[1])),[o,a,l,c,u,d]},j.getElementAbsoluteCoords=function(e){var t,n,r,o,a,l=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e.points.length<2||!(0,b.R2)(e)){var s=e.points.reduce((function(e,t){var n=(0,i.Z)(t,2),r=n[0],o=n[1];return e.minY=Math.min(e.minY,o),e.minX=Math.min(e.minX,r),e.maxX=Math.max(e.maxX,r),e.maxY=Math.max(e.maxY,o),e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0}),c=s.minX,d=s.minY,f=s.maxX,p=s.maxY;n=c+e.x,r=d+e.y,o=f+e.x,a=p+e.y}else{var h=(0,b.R2)(e),m=(0,u.CM)(h[0]),g=(0,u.IX)(m),y=(0,i.Z)(g,4),x=y[0],w=y[1],k=y[2],E=y[3];n=x+e.x,r=w+e.y,o=k+e.x,a=E+e.y}var S=(n+o)\/2,_=(r+a)\/2;if(t=[n,r,o,a,S,_],!l)return t;var O=(0,v.WJ)(e);return O&&(t=j.getMinMaxXYWithBoundText(e,[n,r,o,a],O)),t};var _=function(e){var t=(0,r.Z)(new Set(e.filter((function(e){return null!==e&&-1!==e}))));return(t=t.sort((function(e,t){return e-t}))).length?t:null}},1935:function(e,t,n){\"use strict\";n.d(t,{BE:function(){return p},DR:function(){return f},ZP:function(){return h}});var r=n(6655),o=n(7169),i=n(3063),a=n(1564),l=n(5001),s=n(6954),c=n(6340);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var f=function(e,t){var n,o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],u=!1,f=t,p=f.points,h=f.fileId;for(var m in void 0!==p&&(t=d(d({},(0,l.k)(p)),t)),t){var g=t[m];if(void 0!==g){if(e[m]===g&&(\"object\"!==(0,r.Z)(g)||null===g||\"groupIds\"===m||\"scale\"===m))continue;if(\"scale\"===m){var v=e[m],b=g;if(v[0]===b[0]&&v[1]===b[1])continue}else if(\"points\"===m){var y=e[m],x=g;if(y.length===x.length){for(var w=!1,k=y.length;--k;){var E=y[k],S=x[k];if(E[0]!==S[0]||E[1]!==S[1]){w=!0;break}}if(!w)continue}}e[m]=g,u=!0}}if(!u)return e;(void 0===t.height&&void 0===t.width&&void 0===h&&void 0===p||(0,i.bI)(e),e.version++,e.versionNonce=(0,s.LU)(),e.updated=(0,c.C3)(),o)&&(null===(n=a.Z.getScene(e))||void 0===n||n.informMutation());return e},p=function(e,t){var n=!1;for(var o in t){var i=t[o];if(void 0!==i){if(e[o]===i&&(\"object\"!==(0,r.Z)(i)||null===i))continue;n=!0}}return n?d(d(d({},e),t),{},{updated:(0,c.C3)(),version:e.version+1,versionNonce:(0,s.LU)()}):e},h=function(e,t){return e.version=(null!=t?t:e.version)+1,e.versionNonce=(0,s.LU)(),e.updated=(0,c.C3)(),e}},2791:function(e,t,n){\"use strict\";n.d(t,{JZ:function(){return O},KE:function(){return I},N_:function(){return C},OL:function(){return D},Sy:function(){return L},Up:function(){return E},VL:function(){return j},_N:function(){return Z},vw:function(){return T},y8:function(){return M}});var r=n(6655),o=n(2577),i=n(7169),a=n(2726),l=n(6340),s=n(6954),c=n(1935),u=n(242),d=n(1047),f=n(6552),p=n(8925),h=n(5710),m=n(2335),g=n(1974),v=[\"x\",\"y\",\"strokeColor\",\"backgroundColor\",\"fillStyle\",\"strokeWidth\",\"strokeStyle\",\"roughness\",\"opacity\",\"width\",\"height\",\"angle\",\"groupIds\",\"roundness\",\"boundElements\",\"link\",\"locked\"];function b(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return y(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var k=function(e,t){var n,r,o=t.x,i=t.y,c=t.strokeColor,u=void 0===c?m.HN.strokeColor:c,d=t.backgroundColor,f=void 0===d?m.HN.backgroundColor:d,p=t.fillStyle,h=void 0===p?m.HN.fillStyle:p,g=t.strokeWidth,b=void 0===g?m.HN.strokeWidth:g,y=t.strokeStyle,x=void 0===y?m.HN.strokeStyle:y,w=t.roughness,k=void 0===w?m.HN.roughness:w,E=t.opacity,S=void 0===E?m.HN.opacity:E,j=t.width,_=void 0===j?0:j,O=t.height,C=void 0===O?0:O,I=t.angle,M=void 0===I?0:I,T=t.groupIds,P=void 0===T?[]:T,D=t.roundness,A=void 0===D?null:D,L=t.boundElements,Z=void 0===L?null:L,z=t.link,R=void 0===z?null:z,N=t.locked,B=void 0===N?m.HN.locked:N,H=(0,a.Z)(t,v);return{id:H.id||(0,s.kb)(),type:e,x:o,y:i,width:_,height:C,angle:M,strokeColor:u,backgroundColor:f,fillStyle:h,strokeWidth:b,strokeStyle:x,roughness:k,opacity:S,groupIds:P,roundness:A,seed:null!==(n=H.seed)&&void 0!==n?n:(0,s.LU)(),version:H.version||1,versionNonce:null!==(r=H.versionNonce)&&void 0!==r?r:0,isDeleted:!1,boundElements:Z,updated:(0,l.C3)(),link:R,locked:B}},E=function(e){return k(e.type,e)},S=function(e,t){return{x:\"center\"===e.textAlign?t.width\/2:\"right\"===e.textAlign?t.width:0,y:\"middle\"===e.verticalAlign?t.height\/2:0}},j=function(e){var t=e.fontFamily||m.rk,n=e.fontSize||m.n5,r=e.lineHeight||(0,h.PT)(t),o=(0,h.bG)(e.text),i=(0,h.X1)(o,(0,l.mO)({fontFamily:t,fontSize:n}),r),a=e.textAlign||m.Hg,s=e.verticalAlign||m.hs,u=S({textAlign:a,verticalAlign:s},i);return(0,c.BE)(w(w({},k(\"text\",e)),{},{text:o,fontSize:n,fontFamily:t,textAlign:a,verticalAlign:s,x:e.x-u.x,y:e.y-u.y,width:i.width,height:i.height,baseline:i.baseline,containerId:e.containerId||null,originalText:o,lineHeight:r}),{})},_=function(e,t){var n,r,i=(0,h.tl)(e),a=(0,h.X1)(t,(0,l.mO)(e),e.lineHeight),s=a.width,u=a.height,v=a.baseline,b=e.textAlign,y=e.verticalAlign;if(\"center\"!==b||y!==m.oX.MIDDLE||e.containerId){var x=(0,d.qf)(e),w=(0,o.Z)(x,4),k=w[0],E=w[1],j=w[2],_=w[3],O=(0,p.wC)(e,s,u,!1),C=(0,o.Z)(O,4),I=(k-C[0])\/2,M=(E-C[1])\/2,T=(j-C[2])\/2,P=(_-C[3])\/2,D=(0,f.yq)({s:!0,e:\"center\"===b||\"left\"===b,w:\"center\"===b||\"right\"===b},e.x,e.y,e.angle,I,M,T,P),A=(0,o.Z)(D,2);n=A[0],r=A[1]}else{var L=(0,h.X1)(e.text,(0,l.mO)(e),e.lineHeight),Z=S(e,{width:s-L.width,height:u-L.height});n=e.x-Z.x,r=e.y-Z.y}if(i){var z=(0,h.S)(e),R=(0,h.HE)(i),N=R.height,B=R.width;u>N-2*z&&(N=u+2*z),s>B-2*z&&(B=s+2*z),(0,g.Yv)(i)||N===R.height&&B===R.width||(0,c.DR)(i,{height:N,width:B})}return{width:s,height:u,baseline:v,x:Number.isFinite(n)?n:e.x,y:Number.isFinite(r)?r:e.y}},O=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.text;if(!e.isDeleted){var n=(0,h.tl)(e);n&&(t=(0,h.lD)(t,(0,l.mO)(e),(0,h.jd)(n)));var r=_(e,t);return w({text:t},r)}},C=function(e,t){t.text;var n=t.isDeleted,r=t.originalText;return(0,c.BE)(e,w({originalText:r,isDeleted:null!=n?n:e.isDeleted},O(e,r)))},I=function(e){return w(w({},k(e.type,e)),{},{points:e.points||[],pressures:[],simulatePressure:e.simulatePressure,lastCommittedPoint:null})},M=function(e){return w(w({},k(e.type,e)),{},{points:e.points||[],lastCommittedPoint:null,startBinding:null,endBinding:null,startArrowhead:e.startArrowhead,endArrowhead:e.endArrowhead})},T=function(e){var t,n,r;return w(w({},k(\"image\",e)),{},{strokeColor:\"transparent\",status:null!==(t=e.status)&&void 0!==t?t:\"pending\",fileId:null!==(n=e.fileId)&&void 0!==n?n:null,scale:null!==(r=e.scale)&&void 0!==r?r:[1,1]})},P=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(null==t||\"object\"!==(0,r.Z)(t))return t;var o=Object.prototype.toString.call(t);if(\"[object Object]\"===o){var i=\"function\"==typeof t.constructor?Object.create(Object.getPrototypeOf(t)):{};for(var a in t)if(t.hasOwnProperty(a)){if(0===n&&(\"shape\"===a||\"canvas\"===a))continue;i[a]=e(t[a],n+1)}return i}if(Array.isArray(t)){for(var l=t.length,s=new Array(l);l--;)s[l]=e(t[l],n+1);return s}return t},D=function(e){return P(e)},A=function(e){if((0,l.h2)()&&e){var t,n,r=\"\".concat(e,\"_copy\");return null!==(t=window.h)&&void 0!==t&&null!==(n=t.app)&&void 0!==n&&n.getSceneElementsIncludingDeleted().find((function(e){return e.id===r}))&&(r+=\"_copy\"),r}return(0,s.kb)()},L=function(e,t,n,r){var o=D(n);return o.id=A(o.id),o.boundElements=null,o.updated=(0,l.C3)(),o.seed=(0,s.LU)(),o.groupIds=(0,u.Qy)(o.groupIds,e,(function(e){return t.has(e)||t.set(e,A(e)),t.get(e)})),r&&(o=Object.assign(o,r)),o},Z=function(e){var t,n=[],r=(0,l.xn)(e),o=new Map,i=function(e){if(o.has(e))return o.get(e);if(r.has(e)){var t=A(e);return o.set(e,t),t}return null},a=new Map,s=b(e);try{for(s.s();!(t=s.n()).done;){var c=t.value,u=P(c);if(u.id=i(c.id),u.groupIds&&(u.groupIds=u.groupIds.map((function(e){return a.has(e)||a.set(e,A(e)),a.get(e)}))),\"containerId\"in u&&u.containerId){var d=i(u.containerId);u.containerId=d}if(\"boundElements\"in u&&u.boundElements&&(u.boundElements=u.boundElements.reduce((function(e,t){var n=i(t.id);return n&&e.push(w(w({},t),{},{id:n})),e}),[])),\"endBinding\"in u&&u.endBinding){var f=i(u.endBinding.elementId);u.endBinding=f?w(w({},u.endBinding),{},{elementId:f}):null}if(\"startBinding\"in u&&u.startBinding){var p=i(u.startBinding.elementId);u.startBinding=p?w(w({},u.startBinding),{},{elementId:p}):null}n.push(u)}}catch(e){s.e(e)}finally{s.f()}return n}},8634:function(e,t,n){\"use strict\";n.d(t,{LW:function(){return b},T:function(){return O},l2:function(){return E},vY:function(){return y},xx:function(){return _}});var r=n(1930),o=n(7169),i=n(2577),a=n(2335),l=n(5001),s=n(6552),c=n(8925),u=n(1974),d=n(1935),f=n(6340),p=n(8290),h=n(1564),m=n(5710);function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var b=function(e){return e>=2*Math.PI?e-2*Math.PI:e},y=function(e,t,n,r,o,a,l,s,c,d,f){if(1===n.length){var h=(0,i.Z)(n,1)[0];return\"rotation\"===t?(x(h,s,c,o,e.originalElements),(0,p.Ww)(h)):!(0,u.iB)(h)||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?t&&E(e.originalElements,l,h,t,a,s,c):(k(h,t,a,s,c),(0,p.Ww)(h)),!0}if(n.length>1){if(\"rotation\"===t)return j(e,n,s,c,o,d,f),!0;if(\"nw\"===t||\"ne\"===t||\"sw\"===t||\"se\"===t)return S(e,n,t,a,s,c),!0}return!1},x=function(e,t,n,r,o){var l=(0,c.qf)(e),s=(0,i.Z)(l,4),f=s[0],p=s[1],g=(f+s[2])\/2,v=(p+s[3])\/2,y=5*Math.PI\/2+Math.atan2(n-v,t-g);r&&(y+=a.ay\/2,y-=y%a.ay),y=b(y);var x=(0,m.xB)(e);if((0,d.DR)(e,{angle:y}),x){var w,k=null===(w=h.Z.getScene(e))||void 0===w?void 0:w.getElement(x);k&&!(0,u.Yv)(e)&&(0,d.DR)(k,{angle:y})}},w=function(e,t,n){var r=e.width;if((0,u.Xh)(e)){var o=(0,m.tl)(e);o&&(r=(0,m.jd)(o))}var i=e.fontSize*(t\/r);if(i<1)return null;var a=(0,m.X1)(e.text,(0,f.mO)({fontSize:i,fontFamily:e.fontFamily}),e.lineHeight);return{size:i,baseline:a.baseline+(n-a.height)}},k=function(e,t,n,r,o){var a,l=(0,c.qf)(e),u=(0,i.Z)(l,4),f=u[0],p=u[1],h=u[2],m=u[3],g=(f+h)\/2,v=(p+m)\/2,b=(0,s.U1)(r,o,g,v,-e.angle),y=(0,i.Z)(b,2),x=y[0],k=y[1];switch(t){case\"se\":a=Math.max((x-f)\/(h-f),(k-p)\/(m-p));break;case\"nw\":a=Math.max((h-x)\/(h-f),(m-k)\/(m-p));break;case\"ne\":a=Math.max((x-f)\/(h-f),(m-k)\/(m-p));break;case\"sw\":a=Math.max((h-x)\/(h-f),(k-p)\/(m-p))}if(a>0){var E=e.width*a,S=e.height*a,j=w(e,E,S);if(null===j)return;var _=(0,c.wC)(e,E,S,!1),O=(0,i.Z)(_,4),C=(f-O[0])\/2,I=(p-O[1])\/2,M=(h-O[2])\/2,T=(m-O[3])\/2,P=(0,s.yq)(function(e,t){return{n:\/^(n|ne|nw)$\/.test(e)||t&&\/^(s|se|sw)$\/.test(e),s:\/^(s|se|sw)$\/.test(e)||t&&\/^(n|ne|nw)$\/.test(e),w:\/^(w|nw|sw)$\/.test(e)||t&&\/^(e|ne|se)$\/.test(e),e:\/^(e|ne|se)$\/.test(e)||t&&\/^(w|nw|sw)$\/.test(e)}}(t,n),e.x,e.y,e.angle,C,I,M,T),D=(0,i.Z)(P,2),A=D[0],L=D[1];(0,d.DR)(e,{fontSize:j.size,width:E,height:S,baseline:j.baseline,x:A,y:L})}},E=function(e,t,n,o,a,h,g){var b=e.get(n.id),y=(0,c.wC)(b,b.width,b.height,!0),x=(0,i.Z)(y,4),k=[x[0],x[1]],E=[x[2],x[3]],S=(0,s.H5)(k,E),j=(0,s.xj)([h,g],S,-b.angle),_=(0,c.wC)(n,n.width,n.height,!0),O=(0,i.Z)(_,4),C=O[0],I=O[1],M=O[2]-C,T=O[3]-I,P=(E[0]-k[0])\/M,D=(E[1]-k[1])\/T,A={},L=(0,m.WJ)(n);o.includes(\"e\")&&(P=(j[0]-k[0])\/M),o.includes(\"s\")&&(D=(j[1]-k[1])\/T),o.includes(\"w\")&&(P=(E[0]-j[0])\/M),o.includes(\"n\")&&(D=(E[1]-j[1])\/T);var Z=b.width,z=b.height,R=n.width*P,N=n.height*D;if(a&&(R=2*R-Z,N=2*N-z),t){var B=Math.abs(R)\/Z,H=Math.abs(N)\/z;if(1===o.length&&(N*=B,R*=H),2===o.length){var W=Math.max(B,H);R=Z*W*Math.sign(R),N=z*W*Math.sign(N)}}if(L){var F=e.get(L.id);if(F&&(A={fontSize:F.fontSize,baseline:F.baseline}),t){var U=v(v({},n),{},{width:R,height:N}),K=w(L,(0,m.jd)(U),(0,m.N2)(U));if(null===K)return;A={fontSize:K.size,baseline:K.baseline}}else{var Y=(0,m.AT)((0,f.mO)(L),L.lineHeight),G=(0,m.w_)(L.fontSize,L.lineHeight);R=Math.ceil(Math.max(R,Y)),N=Math.ceil(Math.max(N,G))}}var V=(0,c.wC)(b,R,N,!0),X=(0,i.Z)(V,4),q=X[0],J=X[1],$=X[2],Q=X[3],ee=$-q,te=Q-J,ne=[].concat(k);if([\"n\",\"w\",\"nw\"].includes(o)&&(ne=[E[0]-Math.abs(ee),E[1]-Math.abs(te)]),\"ne\"===o){var re=[k[0],E[1]];ne=[re[0],re[1]-Math.abs(te)]}if(\"sw\"===o){var oe=[E[0],k[1]];ne=[oe[0]-Math.abs(ee),oe[1]]}t&&([\"s\",\"n\"].includes(o)&&(ne[0]=S[0]-ee\/2),[\"e\",\"w\"].includes(o)&&(ne[1]=S[1]-te\/2)),R<0&&(o.includes(\"e\")&&(ne[0]-=Math.abs(ee)),o.includes(\"w\")&&(ne[0]+=Math.abs(ee))),N<0&&(o.includes(\"s\")&&(ne[1]-=Math.abs(te)),o.includes(\"n\")&&(ne[1]+=Math.abs(te))),a&&(ne[0]=S[0]-Math.abs(ee)\/2,ne[1]=S[1]-Math.abs(te)\/2);var ie,ae,le=b.angle,se=(0,s.xj)(ne,S,le),ce=[ne[0]+Math.abs(ee)\/2,ne[1]+Math.abs(te)\/2],ue=(0,s.xj)(ce,S,le);ne=(0,s.xj)(se,ue,-le),((0,u.bt)(n)||(0,u.F9)(n))&&(ie=(0,l.z)(1,N,b.points,!0),ae=(0,l.z)(0,R,ie,!0));var de=(0,r.Z)(ne);de[0]+=b.x-q,de[1]+=b.y-J;var fe={width:Math.abs(R),height:Math.abs(N),x:de[0],y:de[1],points:ae};\"scale\"in n&&\"scale\"in b&&(0,d.DR)(n,{scale:[(Math.sign($-b.x)||b.scale[0])*b.scale[0],(Math.sign(Q-b.y)||b.scale[1])*b.scale[1]]}),0!==fe.width&&0!==fe.height&&Number.isFinite(fe.x)&&Number.isFinite(fe.y)&&((0,p.Ww)(n,{newSize:{width:fe.width,height:fe.height}}),(0,d.DR)(n,fe),L&&null!=A&&(0,d.DR)(L,{fontSize:A.fontSize,baseline:A.baseline}),(0,m.RB)(n,o))},S=function(e,t,n,r,o,a){var s=t.reduce((function(t,n){var r=e.originalElements.get(n.id);return r&&t.push({orig:r,latest:n}),t}),[]),f=(0,c.v2)(s.map((function(e){return e.orig}))),h=f.minX,g=f.minY,b=f.maxX,y=f.maxY,x=f.midX,k=f.midY,E=n,S=r?[x,k]:{ne:[h,y],se:[h,g],sw:[b,g],nw:[b,y]}[E],j=(0,i.Z)(S,2),_=j[0],O=j[1],C={ne:[o>=_,a<=O],se:[o>=_,a>=O],sw:[o<=_,a>=O],nw:[o<=_,a<=O]}[E].map((function(e){return e?1:-1})),I=(0,i.Z)(C,2),M=I[0],T=I[1];if(!(M<0&&T<0)){var P=Math.max(M*Math.abs(o-_)\/(b-h),T*Math.abs(a-O)\/(y-g))*(r?2:1);0!==P&&s.forEach((function(e){var t=e.orig.width*P,r=e.orig.height*P,o=_+(e.orig.x-_)*P,i=O+(e.orig.y-O)*P,a=function(e,t,n,r){return(0,u.bt)(e)||(0,u.F9)(e)?{points:(0,l.z)(0,t,(0,l.z)(1,n,e.points,r),r)}:{}}(e.orig,t,r,!1),s=v({width:t,height:r,x:o,y:i},a),c=null,f=(0,m.WJ)(e.latest);if(f||(0,u.iB)(e.orig)){var h=v(v({},e.latest),{},{width:t,height:r}),g=w(null!=f?f:e.orig,f?(0,m.jd)(h):h.width,f?(0,m.N2)(h):h.height);if(!g)return;(0,u.iB)(e.orig)&&(s.fontSize=g.size,s.baseline=g.baseline),f&&(c={fontSize:g.size,baseline:g.baseline})}(0,p.Ww)(e.latest,{newSize:{width:t,height:r}}),(0,d.DR)(e.latest,s),f&&c&&((0,d.DR)(f,c),(0,m.RB)(e.latest,n))}))}},j=function(e,t,n,r,o,l,f){var p=5*Math.PI\/2+Math.atan2(r-f,n-l);o&&(p+=a.ay\/2,p-=p%a.ay),t.forEach((function(t){var n,r,o=(0,c.qf)(t),a=(0,i.Z)(o,4),g=a[0],v=a[1],y=(g+a[2])\/2,x=(v+a[3])\/2,w=null!==(n=null===(r=e.originalElements.get(t.id))||void 0===r?void 0:r.angle)&&void 0!==n?n:t.angle,k=(0,s.U1)(y,x,l,f,p+w-t.angle),E=(0,i.Z)(k,2),S=E[0],j=E[1];(0,d.DR)(t,{x:t.x+(S-y),y:t.y+(j-x),angle:b(p+w)});var _=(0,m.xB)(t);if(_){var O,C=null===(O=h.Z.getScene(t))||void 0===O?void 0:O.getElement(_);C&&!(0,u.Yv)(t)&&(0,d.DR)(C,{x:C.x+(S-y),y:C.y+(j-x),angle:b(p+w)})}}))},_=function(e,t,n,r){var o=1===t.length?(0,c.qf)(t[0]):(0,c.KP)(t),a=(0,i.Z)(o,4),l=a[0],u=a[1],d=a[2],f=a[3],p=(l+d)\/2,h=(u+f)\/2,m=1===t.length?t[0].angle:0,g=(0,s.U1)(n,r,p,h,-m),v=(0,i.Z)(g,2);switch(n=v[0],r=v[1],e){case\"n\":return(0,s.U1)(n-(l+d)\/2,r-u,0,0,m);case\"s\":return(0,s.U1)(n-(l+d)\/2,r-f,0,0,m);case\"w\":return(0,s.U1)(n-l,r-(u+f)\/2,0,0,m);case\"e\":return(0,s.U1)(n-d,r-(u+f)\/2,0,0,m);case\"nw\":return(0,s.U1)(n-l,r-u,0,0,m);case\"ne\":return(0,s.U1)(n-d,r-u,0,0,m);case\"sw\":return(0,s.U1)(n-l,r-f,0,0,m);case\"se\":return(0,s.U1)(n-d,r-f,0,0,m);default:return[0,0]}},O=function(e,t){var n=(0,i.Z)(t.points,2),r=(0,i.Z)(n[1],2),o=r[0],a=r[1];return\"nw\"===e&&(o<0||a<0)||\"ne\"===e&&o>=0||\"sw\"===e&&o<=0||\"se\"===e&&(o>0||a>0)?\"end\":\"origin\"}},5710:function(e,t,n){\"use strict\";n.d(t,{$2:function(){return I},AT:function(){return R},FE:function(){return _},HE:function(){return F},H_:function(){return Y},N2:function(){return te},NS:function(){return Q},OW:function(){return q},P7:function(){return S},PT:function(){return oe},R8:function(){return C},RB:function(){return j},Rg:function(){return M},S:function(){return G},TP:function(){return U},WJ:function(){return H},X1:function(){return O},Zr:function(){return $},aV:function(){return X},bG:function(){return w},cn:function(){return V},cw:function(){return K},eB:function(){return ne},jd:function(){return ee},lD:function(){return L},mY:function(){return D},oN:function(){return E},tl:function(){return W},w_:function(){return T},xB:function(){return B}});var r,o=n(2577),i=n(1930),a=n(7169),l=n(6340),s=n(1935),c=n(2335),u=n(1564),d=n(1047),f=n(1974),p=n(6938),h=n(75),m=n(2325),g=n(6906);function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var y,x,w=function(e){return e.replace(\/\\t\/g,\"        \").replace(\/\\r?\\n|\\r\/g,\"\\n\")},k=function(e){return w(e).split(\"\\n\")},E=function(e,t){var n=void 0,r={x:e.x,y:e.y,text:e.text,width:e.width,height:e.height,baseline:e.baseline};r.text=e.text,t&&(n=ee(t),r.text=L(e.originalText,(0,l.mO)(e),n));var o=O(r.text,(0,l.mO)(e),e.lineHeight);if(r.width=o.width,r.height=o.height,r.baseline=o.baseline,t)if((0,f.Yv)(t)){var i=e.x+e.width\/2,a=e.y+e.height\/2,c=o.width-e.width,u=o.height-e.height;r.x=a-(e.height+u)\/2,r.y=i-(e.width+c)\/2}else{var d=F(t),p=te(t),h=d.height;o.height>p&&(h=Q(o.height,t.type),(0,s.DR)(t,{height:h}),p=te(t),(0,g.h_)(t.id,h));var m=b(b({},e),r),v=_(t,m),y=v.x,x=v.y;r.x=y,r.y=x}(0,s.DR)(e,r)},S=function(e,t,n){var r=(0,l.xn)(e);t.forEach((function(e){var t=n.get(e.id),o=B(e);if(o){var i=n.get(o);if(i){var a=r.get(t);a&&(0,s.DR)(a,{boundElements:(e.boundElements||[]).filter((function(e){return e.id!==i&&e.id!==o})).concat({type:\"text\",id:i})});var l=r.get(i);l&&(0,d.iB)(l)&&(0,s.DR)(l,{containerId:a?t:null})}}}))},j=function(e,t){var n=B(e);if(n){(0,g.kT)(e.id);var r=u.Z.getScene(e).getElement(n);if(r&&r.text){if(!e)return;var o=(r=u.Z.getScene(e).getElement(n)).text,i=r.height,a=r.width,c=F(e),d=ee(e),p=te(e),h=c.height,m=r.baseline;if(\"n\"!==t&&\"s\"!==t){o&&(o=L(r.originalText,(0,l.mO)(r),d));var v=O(o,(0,l.mO)(r),r.lineHeight);i=v.height,a=v.width,m=v.baseline}if(i>p){var b=(h=Q(i,e.type))-c.height,y=(0,f.Yv)(e)||\"ne\"!==t&&\"nw\"!==t&&\"n\"!==t?e.y:e.y-b;(0,s.DR)(e,{height:h,y:y})}(0,s.DR)(r,{text:o,width:a,height:i,baseline:m}),(0,f.Yv)(e)||(0,s.DR)(r,_(e,r))}}},_=function(e,t){if((0,f.Yv)(e))return p._.getBoundTextElementPosition(e,t);var n,r=K(e),o=te(e),i=ee(e);return n=t.verticalAlign===c.oX.TOP?r.y:t.verticalAlign===c.oX.BOTTOM?r.y+(o-t.height):r.y+(o\/2-t.height\/2),{x:t.textAlign===c.I8.LEFT?r.x:t.textAlign===c.I8.RIGHT?r.x+(i-t.width):r.x+(i\/2-t.width\/2),y:n}},O=function(e,t,n){e=e.split(\"\\n\").map((function(e){return e||\" \"})).join(\"\\n\");var r=parseFloat(t),o=A(e,r,n);return{width:D(e,t),height:o,baseline:C(e,t,n)}},C=function(e,t,n,r){var o=document.createElement(\"div\");o.style.position=\"absolute\",o.style.whiteSpace=\"pre\",o.style.font=t,o.style.minHeight=\"1em\",r&&(o.style.overflow=\"hidden\",o.style.wordBreak=\"break-word\",o.style.whiteSpace=\"pre-wrap\"),o.style.lineHeight=String(n),o.innerText=e,document.body.appendChild(o);var i=document.createElement(\"span\");i.style.display=\"inline-block\",i.style.overflow=\"hidden\",i.style.width=\"1px\",i.style.height=\"1px\",o.appendChild(i);var a=i.offsetTop+i.offsetHeight,l=o.offsetHeight;if(c.G6){var s=A(e,parseFloat(t),n),u=parseFloat(t),d=A(e,Math.round(u),n);s>l&&(a+=s-d),l>s&&(a-=d-s)}return document.body.removeChild(o),a},I=function(e){var t=k(e.text).length;return e.height\/t\/e.fontSize},M=function(e,t){return e*t},T=function(e,t){return M(e,t)+2*c.gK},P=function(e,t){y||(y=document.createElement(\"canvas\"));var n=y.getContext(\"2d\");n.font=t;var r=n.measureText(e).width;return(0,l.h2)()?10*r:r},D=function(e,t){var n=k(e),r=0;return n.forEach((function(e){r=Math.max(r,P(e,t))})),r},A=function(e,t,n){var r=k(e).length;return M(t,n)*r},L=function(e,t,n){if(!Number.isFinite(n)||n<0)return e;var r=[],o=e.split(\"\\n\"),i=P(\" \",t),a=\"\",l=0,s=function(e){e.trim()&&r.push(e)},c=function(){a=\"\",l=0};return o.forEach((function(e){if(D(e,t)<=n)r.push(e);else{var o=function(e){var t=e.split(\"-\");return t.length>1&&t.forEach((function(e,n){n!==t.length-1&&(t[n]=e+=\"-\")})),t.join(\" \").split(\" \")}(e);c();for(var u=0;u<o.length;){var d=P(o[u],t);if(d===n)s(o[u]),u++;else if(d>n){for(s(a),c();o[u].length>0;){var f=String.fromCodePoint(o[u].codePointAt(0)),p=Z.calculate(f,t);l+=p,o[u]=o[u].slice(f.length),l>=n?(s(a),a=f,l=p):a+=f}l+i>=n?(s(a),c()):a.endsWith(\"-\")||(a+=\" \",l+=i),u++}else for(;l<n&&u<o.length;){var h=o[u];if((l=P(a+h,t))>n){s(a),c();break}u++;var m=!h.endsWith(\"-\");if(a+=h,m&&(a+=\" \"),l+i>=n){m?r.push(a.slice(0,-1)):r.push(a),c();break}}}\" \"===a.slice(-1)&&(a=a.slice(0,-1),s(a))}})),r.join(\"\\n\")},Z=(x={},{calculate:function(e,t){var n=e.charCodeAt(0);if(x[t]||(x[t]=[]),!x[t][n]){var r=P(e,t);x[t][n]=r}return x[t][n]},getCache:function(e){return x[e]}}),z=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\".toLocaleUpperCase(),R=function(e,t){var n=N(e);return 0===n?O(z.split(\"\").join(\"\\n\"),e,t).width+2*c.gK:n+2*c.gK},N=function(e){var t=Z.getCache(e);if(!t)return 0;var n=t.filter((function(e){return void 0!==e}));return Math.max.apply(Math,(0,i.Z)(n))},B=function(e){var t,n,r;return null!=e&&null!==(t=e.boundElements)&&void 0!==t&&t.length&&(null==e||null===(n=e.boundElements)||void 0===n||null===(r=n.filter((function(e){return\"text\"===e.type}))[0])||void 0===r?void 0:r.id)||null},H=function(e){if(!e)return null;var t,n=B(e);return n&&(null===(t=u.Z.getScene(e))||void 0===t?void 0:t.getElement(n))||null},W=function(e){return e&&e.containerId&&(null===(t=u.Z.getScene(e))||void 0===t?void 0:t.getElement(e.containerId))||null;var t},F=function(e){return(0,f.Yv)(e)?{width:Math.max(e.width,300),height:e.height}:{width:e.width,height:e.height}},U=function(e,t){if(!(0,f.Yv)(e))return{x:e.x+e.width\/2,y:e.y+e.height\/2};var n=p._.getPointsGlobalCoordinates(e);if(n.length%2==1){var r=Math.floor(e.points.length\/2),o=p._.getPointGlobalCoordinates(e,e.points[r]);return{x:o[0],y:o[1]}}var i=e.points.length\/2-1,a=p._.getEditorMidPoints(e,t)[i];return a||(a=p._.getSegmentMidPoint(e,n[i],n[i+1],i+1)),{x:a[0],y:a[1]}},K=function(e){var t=c.gK,n=c.gK;return\"ellipse\"===e.type&&(t+=e.width\/2*(1-Math.sqrt(2)\/2),n+=e.height\/2*(1-Math.sqrt(2)\/2)),\"diamond\"===e.type&&(t+=e.width\/4,n+=e.height\/4),{x:e.x+t,y:e.y+n}},Y=function(e){var t=W(e);return!t||(0,f.Yv)(t)?e.angle:t.angle},G=function(e){var t=W(e);return t&&e?(0,f.Yv)(t)?8*c.gK:c.gK:0},V=function(e){return e.some((function(e){if((0,f.Xh)(e)){var t=W(e);return!(0,d.iB)(e)||!(0,f.Yv)(t)}return!1}))},X=function(e){return e.some((function(e){if((0,f.Xh)(e)){var t=W(e);return!(0,d.iB)(e)||!(0,f.Yv)(t)}return(0,d.iB)(e)}))},q=function(e,t,n,r){var i=(0,h.eD)(e,t);if(1===i.length)return(0,f.mG)(i[0],!1)?i[0]:null;for(var a=null,l=e.length-1;l>=0;--l)if(!e[l].isDeleted){var s=(0,d.qf)(e[l]),c=(0,o.Z)(s,4),u=c[0],p=c[1],g=c[2],v=c[3];if((0,f.Yv)(e[l])&&(0,m.Qu)(e[l],t,[n,r])){a=e[l];break}if(u<n&&n<g&&p<r&&r<v){a=e[l];break}}return(0,f.mG)(a,!1)?a:null},J=new Set([\"rectangle\",\"ellipse\",\"diamond\",\"image\",\"arrow\"]),$=function(e){return J.has(e.type)},Q=function(e,t){e=Math.ceil(e);var n=2*c.gK;return\"ellipse\"===t?Math.round((e+n)\/Math.sqrt(2)*2):\"arrow\"===t?e+8*n:\"diamond\"===t?2*(e+n):e+n},ee=function(e){var t=F(e).width;if((0,f.Yv)(e)){var n=t-8*c.gK*2;if(n<=0){var r=H(e);return r?r.width:8*c.gK*2}return n}return\"ellipse\"===e.type?Math.round(t\/2*Math.sqrt(2))-2*c.gK:\"diamond\"===e.type?Math.round(t\/2)-2*c.gK:t-2*c.gK},te=function(e){var t=F(e).height;if((0,f.Yv)(e)){if(t-8*c.gK*2<=0){var n=H(e);return n?n.height:8*c.gK*2}return t}return\"ellipse\"===e.type?Math.round(t\/2*Math.sqrt(2))-2*c.gK:\"diamond\"===e.type?Math.round(t\/2)-2*c.gK:t-2*c.gK},ne=function(){return D(z,(0,l.mO)({fontSize:c.n5,fontFamily:c.rk}))>0},re=(r={},(0,a.Z)(r,c.ut.Virgil,1.25),(0,a.Z)(r,c.ut.Helvetica,1.15),(0,a.Z)(r,c.ut.Cascadia,1.2),r),oe=function(e){return e in re?re[e]:re[c.rk]}},6906:function(e,t,n){\"use strict\";n.d(t,{b_:function(){return _},eR:function(){return j},h_:function(){return E},kT:function(){return S}});var r=n(8950),o=n(7169),i=n(2577),a=n(2975),l=n.n(a),s=n(6066),c=n(6340),u=n(1564),d=n(1974),f=n(2335),p=n(1935),h=n(5710),m=n(6208),g=n(2416),v=n(6938),b=n(6665);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var w=function(e,t,n,r,o,i){var a=r.zoom,l=180*n\/Math.PI,s=e*(a.value-1)\/2,c=t*(a.value-1)\/2;return e>o&&1!==a.value&&(s=o*(a.value-1)\/2),t>i&&1!==a.value&&(c=i*(a.value-1)\/2),\"translate(\".concat(s,\"px, \").concat(c,\"px) scale(\").concat(a.value,\") rotate(\").concat(l,\"deg)\")},k={},E=function(e,t){var n=k[e]||(k[e]={height:t});return n.height=t,n},S=function(e){k[e]&&delete k[e]},j=function(e){var t,n;return null!==(t=null===(n=k[e])||void 0===n?void 0:n.height)&&void 0!==t?t:null},_=function(e){var t=e.id,n=e.onChange,o=e.onSubmit,a=e.getViewportCoords,y=e.element,S=e.canvas,j=e.excalidrawContainer,_=e.app,O=function(){var e,n=_.state,r=null===(e=u.Z.getScene(y))||void 0===e?void 0:e.getElement(t);if(r){var o=r.textAlign,l=r.verticalAlign;if(r&&(0,d.iB)(r)){var s=r.x,m=r.y,g=(0,h.tl)(r),b=r.width,S=r.height,j=r.width,O=r.height;if(g&&r.containerId){if((0,d.Yv)(g)){var I=v._.getBoundTextElementPosition(g,r);s=I.x,m=I.y}var M,T=function(e,t){if(!t.style.fontFamily||!t.style.fontSize)return!1;var n=t.style.fontFamily.replace(\/\"\/g,\"\");return(0,c.$g)({fontFamily:e.fontFamily})!==n||\"\".concat(e.fontSize,\"px\")!==t.style.fontSize}(r,C),P=(0,h.HE)(g),D=Number(C.style.height.slice(0,-2));if(D>0&&(O=D),T&&(O=r.height),T?M=E(g.id,P.height):(M=k[g.id])||(M=E(g.id,P.height)),b=(0,h.jd)(g),S=(0,h.N2)(g),!(0,d.Yv)(g)&&O>S){var A=(0,h.NS)(O,g.type);return void(0,p.DR)(g,{height:A})}if(!(0,d.Yv)(g)&&P.height>M.height&&O<S){var L=(0,h.NS)(O,g.type);(0,p.DR)(g,{height:L})}else{var Z=(0,h.cw)(g);l===f.oX.MIDDLE&&((0,d.Yv)(g)||(m=Z.y+S\/2-O\/2)),l===f.oX.BOTTOM&&(m=Z.y+(S-O))}}var z=a(s,m),R=(0,i.Z)(z,2),N=R[0],B=R[1],H=C.selectionStart,W=C.selectionEnd,F=C.value.length;if(C.value=r.originalText,H===W&&W!==F){var U=F-W;C.selectionStart=C.value.length-U,C.selectionEnd=C.value.length-U}g?j+=.5:(b=(n.width-8-N)\/n.zoom.value,j=Math.min(j,b));var K=r.lineHeight;f.G6&&(K=(0,h.$2)(x(x({},r),{},{fontSize:Math.round(r.fontSize)})));var Y=(n.height-B)\/n.zoom.value;Object.assign(C.style,{font:(0,c.mO)(r),lineHeight:K,width:\"\".concat(j,\"px\"),height:\"\".concat(O,\"px\"),left:\"\".concat(N,\"px\"),top:\"\".concat(B,\"px\"),transform:w(j,O,(0,h.H_)(r),n,b,Y),textAlign:o,verticalAlign:l,color:r.strokeColor,opacity:r.opacity\/100,filter:\"var(--theme-filter)\",maxHeight:\"\".concat(Y,\"px\")}),C.scrollTop=0,(0,c.h2)()&&(C.style.fontFamily=(0,c.$g)(r)),(0,p.DR)(r,{x:s,y:m})}}},C=document.createElement(\"textarea\");C.dir=\"auto\",C.tabIndex=0,C.dataset.type=\"wysiwyg\",C.wrap=\"off\",C.classList.add(\"excalidraw-wysiwyg\");var I=\"pre\",M=\"normal\";(0,d.Xh)(y)&&(I=\"pre-wrap\",M=\"break-word\"),Object.assign(C.style,{position:\"absolute\",display:\"inline-block\",minHeight:\"1em\",backfaceVisibility:\"hidden\",margin:0,padding:0,border:0,outline:0,resize:\"none\",background:\"transparent\",overflow:\"hidden\",zIndex:\"var(--zIndex-wysiwyg)\",wordBreak:M,whiteSpace:I,overflowWrap:\"break-word\",boxSizing:\"content-box\"}),O(),n&&(C.onpaste=function(){var e=(0,r.Z)(l().mark((function e(t){var n,r,o,i,a,s;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,b.mQ)(t,!0);case 2:if((n=e.sent).text){e.next=5;break}return e.abrupt(\"return\");case 5:if(r=(0,h.bG)(n.text)){e.next=8;break}return e.abrupt(\"return\");case 8:o=(0,h.tl)(y),i=(0,c.mO)({fontSize:_.state.currentItemFontSize,fontFamily:_.state.currentItemFontFamily}),o&&(a=(0,h.lD)(\"\".concat(C.value).concat(r),i,(0,h.jd)(o)),s=(0,h.mY)(a,i),C.style.width=\"\".concat(s,\"px\"));case 11:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),C.oninput=function(){var e,r=null===(e=u.Z.getScene(y))||void 0===e?void 0:e.getElement(t),o=(0,c.mO)(r);if((0,d.Xh)(y)){var i=(0,h.tl)(y),a=(0,h.lD)((0,h.bG)(C.value),o,(0,h.jd)(i)),l=(0,h.X1)(a,o,r.lineHeight),s=l.width,f=l.height;C.style.width=\"\".concat(s,\"px\"),C.style.height=\"\".concat(f,\"px\")}n((0,h.bG)(C.value))}),C.onkeydown=function(e){if(!e.shiftKey&&g.Lo.keyTest(e))e.preventDefault(),_.actionManager.executeAction(g.Lo),O();else if(!e.shiftKey&&g.CZ.keyTest(e))e.preventDefault(),_.actionManager.executeAction(g.CZ),O();else if(m.Tu.keyTest(e))_.actionManager.executeAction(m.Tu);else if(m.Zq.keyTest(e))_.actionManager.executeAction(m.Zq);else if(e.key===s.tW.ESCAPE)e.preventDefault(),z=!0,R();else if(e.key===s.tW.ENTER&&e[s.tW.CTRL_OR_CMD]){if(e.preventDefault(),e.isComposing||229===e.keyCode)return;z=!0,R()}else if(e.key===s.tW.TAB||e[s.tW.CTRL_OR_CMD]&&(e.code===s.aU.BRACKET_LEFT||e.code===s.aU.BRACKET_RIGHT)){if(e.preventDefault(),e.isComposing)return;e.shiftKey||e.code===s.aU.BRACKET_LEFT?A():D(),C.dispatchEvent(new Event(\"input\"))}};var T=\" \".repeat(4),P=new RegExp(\"^ {1,\".concat(4,\"}\")),D=function(){var e=C.selectionStart,t=C.selectionEnd,n=L(),r=C.value;n.forEach((function(e){var t=r.slice(0,e),n=r.slice(e);r=\"\".concat(t).concat(T).concat(n)})),C.value=r,C.selectionStart=e+4,C.selectionEnd=t+4*n.length},A=function(){var e=C.selectionStart,t=C.selectionEnd,n=L(),r=[],o=C.value;n.forEach((function(e){var t=o.slice(e,e+4).match(P);if(t){var n=o.slice(0,e),i=o.slice(e+t[0].length);o=\"\".concat(n).concat(i),r.push(e)}})),C.value=o,r.length&&(e>r[r.length-1]?C.selectionStart=Math.max(e-4,r[r.length-1]):C.selectionStart=e,C.selectionEnd=Math.max(C.selectionStart,t-4*r.length))},L=function(){var e=C.selectionStart,t=C.selectionEnd,n=C.value,r=n.slice(0,e).match(\/[^\\n]*$\/)[0].length;return e-=r,n.slice(e,t).split(\"\\n\").reduce((function(t,n,r,o){return t.concat(r?t[r-1]+o[r-1].length+1:e)}),[]).reverse()},Z=function(e){e.preventDefault(),e.stopPropagation()},z=!1,R=function(){var e;N();var t=null===(e=u.Z.getScene(y))||void 0===e?void 0:e.getElement(y.id);if(t){var n=C.value,r=(0,h.tl)(t);if(r){if(n=t.text,C.value.trim()){var i=(0,h.xB)(r);i&&i===y.id||(0,p.DR)(r,{boundElements:(r.boundElements||[]).concat({type:\"text\",id:y.id})})}else{var a;(0,p.DR)(r,{boundElements:null===(a=r.boundElements)||void 0===a?void 0:a.filter((function(e){return!(0,d.iB)(e)}))})}(0,h.oN)(t,r)}o({text:n,viaKeyboard:z,originalText:C.value})}},N=function(){F||(F=!0,C.onblur=null,C.oninput=null,C.onkeydown=null,U&&U.disconnect(),window.removeEventListener(\"resize\",O),window.removeEventListener(\"wheel\",Z,!0),window.removeEventListener(\"pointerdown\",H),window.removeEventListener(\"pointerup\",B),window.removeEventListener(\"blur\",R),W(),C.remove())},B=function e(t){window.removeEventListener(\"pointerup\",e);var n=null==t?void 0:t.target,r=n instanceof HTMLInputElement&&n.closest(\".color-picker-input\")&&(0,c.s)(n);setTimeout((function(){C.onblur=R,n&&r&&(n.onblur=function(){C.focus()}),r||C.focus()}))},H=function(e){var t=e.target instanceof HTMLInputElement&&e.target.closest(\".color-picker-input\")&&(0,c.s)(e.target);((e.target instanceof HTMLElement||e.target instanceof SVGElement)&&e.target.closest(\".\".concat(f.$C.SHAPE_ACTIONS_MENU))&&!(0,c.s)(e.target)||t)&&(C.onblur=null,window.addEventListener(\"pointerup\",B),window.addEventListener(\"blur\",R))},W=u.Z.getScene(y).addCallback((function(){var e;O(),!(null===(e=document.activeElement)||void 0===e||!e.closest(\".color-picker-input\"))||C.focus()})),F=!1;C.select(),B();var U=null;S&&\"ResizeObserver\"in window?(U=new window.ResizeObserver((function(){O()}))).observe(S):window.addEventListener(\"resize\",O),window.addEventListener(\"pointerdown\",H),window.addEventListener(\"wheel\",Z,{passive:!1,capture:!0}),null==j||j.querySelector(\".excalidraw-textEditorContainer\").appendChild(C)}},267:function(e,t,n){\"use strict\";n.d(t,{PC:function(){return g},kK:function(){return m},oY:function(){return v},ox:function(){return u}});var r=n(2577),o=n(8925),i=n(6552),a=n(1047),l=n(1974),s=n(3547),c={mouse:8,pen:16,touch:28},u={e:!0,s:!0,n:!0,w:!0},d={e:!0,s:!0,n:!0,w:!0},f={e:!0,s:!0,n:!0,w:!0,nw:!0,se:!0},p={e:!0,s:!0,n:!0,w:!0},h=function(e,t,n,o,a,l,s){var c=(0,i.U1)(e+n\/2,t+o\/2,a,l,s),u=(0,r.Z)(c,2);return[u[0]-n\/2,u[1]-o\/2,n,o]},m=function(e,t,n,o){var i=(0,r.Z)(e,6),a=i[0],l=i[1],u=i[2],d=i[3],f=i[4],p=i[5],m=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},g=arguments.length>5&&void 0!==arguments[5]?arguments[5]:4,v=c[o],b=v\/n.value,y=v\/n.value,x=v\/n.value,w=v\/n.value,k=u-a,E=d-l,S=g\/n.value,j=(v-2*s.Lu)\/(2*n.value),_={nw:m.nw?void 0:h(a-S-x+j,l-S-w+j,b,y,f,p,t),ne:m.ne?void 0:h(u+S-j,l-S-w+j,b,y,f,p,t),sw:m.sw?void 0:h(a-S-x+j,d+S-j,b,y,f,p,t),se:m.se?void 0:h(u+S-j,d+S-j,b,y,f,p,t),rotation:m.rotation?void 0:h(a+k\/2-b\/2,l-S-w+j-16\/n.value,b,y,f,p,t)},O=5*c.mouse\/n.value;return Math.abs(k)>O&&(m.n||(_.n=h(a+k\/2-b\/2,l-S-w+j,b,y,f,p,t)),m.s||(_.s=h(a+k\/2-b\/2,d+S-j,b,y,f,p,t))),Math.abs(E)>O&&(m.w||(_.w=h(a-S-x+j,l+E\/2-y\/2,b,y,f,p,t)),m.e||(_.e=h(u+S-j,l+E\/2-y\/2,b,y,f,p,t))),_},g=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"mouse\";if(e.locked)return{};var i={};if(\"freedraw\"===e.type||(0,l.bt)(e)){if(2===e.points.length){var c=(0,r.Z)(e.points,2),u=c[1];0===u[0]||0===u[1]?i=p:u[0]>0&&u[1]<0?i=f:u[0]>0&&u[1]>0?i=p:u[0]<0&&u[1]>0?i=f:u[0]<0&&u[1]<0&&(i=p)}}else(0,a.iB)(e)&&(i=d);var h=(0,l.bt)(e)?s.Lu+8:s.Lu;return m((0,o.qf)(e,!0),e.angle,t,n,i,h)},v=function(e,t){if(t.editingLinearElement)return!1;if(e.length>1)return!0;var n=e[0];return!(0,l.bt)(n)||n.points.length>2}},1974:function(e,t,n){\"use strict\";n.d(t,{F9:function(){return l},Lx:function(){return p},Mn:function(){return f},QI:function(){return y},UQ:function(){return w},Xh:function(){return b},Xo:function(){return v},Yv:function(){return u},bt:function(){return c},dt:function(){return d},eK:function(){return x},f0:function(){return h},iB:function(){return a},mG:function(){return m},pC:function(){return i},r2:function(){return g},wi:function(){return o}});var r=n(2335),o=function(e){return!!e&&\"image\"===e.type&&!!e.fileId},i=function(e){return!!e&&\"image\"===e.type},a=function(e){return null!=e&&\"text\"===e.type},l=function(e){return null!=e&&s(e.type)},s=function(e){return\"freedraw\"===e},c=function(e){return null!=e&&d(e.type)},u=function(e){return null!=e&&\"arrow\"===e.type},d=function(e){return\"arrow\"===e||\"line\"===e},f=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return null!=e&&(!e.locked||!0===t)&&p(e.type)},p=function(e){return\"arrow\"===e},h=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return!(null==e||e.locked&&!0!==t||\"rectangle\"!==e.type&&\"diamond\"!==e.type&&\"ellipse\"!==e.type&&\"image\"!==e.type&&(\"text\"!==e.type||e.containerId))},m=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return null!=e&&(!e.locked||!0===t)&&(\"rectangle\"===e.type||\"diamond\"===e.type||\"ellipse\"===e.type||\"image\"===e.type||u(e))},g=function(e){return\"text\"===(null==e?void 0:e.type)||\"diamond\"===(null==e?void 0:e.type)||\"rectangle\"===(null==e?void 0:e.type)||\"ellipse\"===(null==e?void 0:e.type)||\"arrow\"===(null==e?void 0:e.type)||\"freedraw\"===(null==e?void 0:e.type)||\"line\"===(null==e?void 0:e.type)},v=function(e){var t;return m(e)&&!(null===(t=e.boundElements)||void 0===t||!t.some((function(e){return\"text\"===e.type})))},b=function(e){return null!==e&&\"containerId\"in e&&null!==e.containerId&&a(e)},y=function(e){return\"rectangle\"===e},x=function(e,t){return!(e!==r.a6.ADAPTIVE_RADIUS&&e!==r.a6.LEGACY||!y(t.type))||e===r.a6.PROPORTIONAL_RADIUS&&(\"line\"===(n=t.type)||\"arrow\"===n||\"diamond\"===n);var n},w=function(e){return\"arrow\"===e.type||\"line\"===e.type||\"diamond\"===e.type?{type:r.a6.PROPORTIONAL_RADIUS}:\"rectangle\"===e.type?{type:r.a6.ADAPTIVE_RADIUS}:null}},6797:function(e,t,n){\"use strict\";n.d(t,{_:function(){return h},l:function(){return p}});var r=n(5169),o=n(8821),i=n(2248),a=n(7245),l=n(2312),s=n(5901);function c(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,n){return u=c()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&(0,s.Z)(o,n.prototype),o},u.apply(null,arguments)}function d(e){var t=\"function\"==typeof Map?new Map:void 0;return d=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf(\"[native code]\")))return e;var n;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return u(e,arguments,(0,l.Z)(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),(0,s.Z)(r,e)},d(e)}function f(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,l.Z)(e);if(t){var o=(0,l.Z)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,a.Z)(this,n)}}var p=function(e){(0,i.Z)(n,e);var t=f(n);function n(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Couldn't export canvas.\",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"CANVAS_ERROR\";return(0,o.Z)(this,n),(e=t.call(this)).name=i,e.message=r,e}return(0,r.Z)(n)}(d(Error)),h=function(e){(0,i.Z)(n,e);var t=f(n);function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Request Aborted\";return(0,o.Z)(this,n),t.call(this,e,\"AbortError\")}return(0,r.Z)(n)}(d(DOMException))},242:function(e,t,n){\"use strict\";n.d(t,{AI:function(){return S},F$:function(){return f},Fb:function(){return y},Nd:function(){return b},Qy:function(){return w},S_:function(){return k},YS:function(){return x},bO:function(){return g},h6:function(){return E},iE:function(){return v},iJ:function(){return m},yO:function(){return h},zq:function(){return p}});var r=n(1930),o=n(2577),i=n(7169),a=n(75),l=n(5710);function s(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return c(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var f=function(e,t,n){var r=n.filter((function(t){return t.groupIds.includes(e)}));return r.length<2?t.selectedGroupIds[e]||t.editingGroupId===e?d(d({},t),{},{selectedGroupIds:d(d({},t.selectedGroupIds),{},(0,i.Z)({},e,!1)),editingGroupId:null}):t:d(d({},t),{},{selectedGroupIds:d(d({},t.selectedGroupIds),{},(0,i.Z)({},e,!0)),selectedElementIds:d(d({},t.selectedElementIds),Object.fromEntries(r.map((function(e){return[e.id,!0]}))))})},p=function(e,t){return null!=h(e,t)},h=function(e,t){return t.groupIds.filter((function(t){return t!==e.editingGroupId})).find((function(t){return e.selectedGroupIds[t]}))},m=function(e){return Object.entries(e.selectedGroupIds).filter((function(e){var t=(0,o.Z)(e,2);t[0];return t[1]})).map((function(e){var t=(0,o.Z)(e,2),n=t[0];t[1];return n}))},g=function(e,t){var n=d(d({},e),{},{selectedGroupIds:{}}),r=(0,a.eD)(t,e);if(!r.length)return d(d({},n),{},{editingGroupId:null});var o,i=s(r);try{for(i.s();!(o=i.n()).done;){var l=o.value.groupIds;if(e.editingGroupId){var c=l.indexOf(e.editingGroupId);c>-1&&(l=l.slice(0,c))}if(l.length>0){var u=l[l.length-1];n=f(u,n,t)}}}catch(e){i.e(e)}finally{i.f()}return n},v=function(e,t){return d(d({},e),{},{editingGroupId:t.groupIds.length?t.groupIds[0]:null,selectedGroupIds:{},selectedElementIds:(0,i.Z)({},t.id,!0)})},b=function(e,t){return e.groupIds.includes(t)},y=function(e,t){return e.filter((function(e){return b(e,t)}))},x=function(e,t){return e.groupIds.find((function(e){return t[e]}))},w=function(e,t,n){for(var o=(0,r.Z)(e),i=t?e.indexOf(t):-1,a=i>-1?i:e.length,l=0;l<a;l++)o[l]=n(o[l]);return o},k=function(e,t,n){var o=(0,r.Z)(e),i=n?o.indexOf(n):-1,a=i>-1?i:o.length;return o.splice(a,0,t),o},E=function(e,t){return e.filter((function(e){return!t[e]}))},S=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],o=t.get(n)||[],i=(0,l.WJ)(e);i&&o.push(i),t.set(n,[].concat((0,r.Z)(o),[e]))})),Array.from(t.values())}},8211:function(e,t,n){\"use strict\";n.d(t,{Fp:function(){return d},G3:function(){return v},Mj:function(){return f},QT:function(){return w},m0:function(){return g},t:function(){return y}});var r=n(8950),o=n(2975),i=n.n(o),a=n(1463),l=n(4451),s=n(2335),c=n(9487),u=n(4739),d={code:\"en\",label:\"English\"},f=[{code:\"ar-SA\",label:\"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",rtl:!0},{code:\"bg-BG\",label:\"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\"},{code:\"ca-ES\",label:\"Catal\u00e0\"},{code:\"cs-CZ\",label:\"\u010cesky\"},{code:\"de-DE\",label:\"Deutsch\"},{code:\"el-GR\",label:\"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"},{code:\"es-ES\",label:\"Espa\u00f1ol\"},{code:\"eu-ES\",label:\"Euskara\"},{code:\"fa-IR\",label:\"\u0641\u0627\u0631\u0633\u06cc\",rtl:!0},{code:\"fi-FI\",label:\"Suomi\"},{code:\"fr-FR\",label:\"Fran\u00e7ais\"},{code:\"gl-ES\",label:\"Galego\"},{code:\"he-IL\",label:\"\u05e2\u05d1\u05e8\u05d9\u05ea\",rtl:!0},{code:\"hi-IN\",label:\"\u0939\u093f\u0928\u094d\u0926\u0940\"},{code:\"hu-HU\",label:\"Magyar\"},{code:\"id-ID\",label:\"Bahasa Indonesia\"},{code:\"it-IT\",label:\"Italiano\"},{code:\"ja-JP\",label:\"\u65e5\u672c\u8a9e\"},{code:\"kab-KAB\",label:\"Taqbaylit\"},{code:\"kk-KZ\",label:\"\u049a\u0430\u0437\u0430\u049b \u0442\u0456\u043b\u0456\"},{code:\"ko-KR\",label:\"\ud55c\uad6d\uc5b4\"},{code:\"ku-TR\",label:\"Kurd\u00ee\"},{code:\"lt-LT\",label:\"Lietuvi\u0173\"},{code:\"lv-LV\",label:\"Latvie\u0161u\"},{code:\"my-MM\",label:\"Burmese\"},{code:\"nb-NO\",label:\"Norsk bokm\u00e5l\"},{code:\"nl-NL\",label:\"Nederlands\"},{code:\"nn-NO\",label:\"Norsk nynorsk\"},{code:\"oc-FR\",label:\"Occitan\"},{code:\"pa-IN\",label:\"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\"},{code:\"pl-PL\",label:\"Polski\"},{code:\"pt-BR\",label:\"Portugu\u00eas Brasileiro\"},{code:\"pt-PT\",label:\"Portugu\u00eas\"},{code:\"ro-RO\",label:\"Rom\u00e2n\u0103\"},{code:\"ru-RU\",label:\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"},{code:\"sk-SK\",label:\"Sloven\u010dina\"},{code:\"sv-SE\",label:\"Svenska\"},{code:\"sl-SI\",label:\"Sloven\u0161\u010dina\"},{code:\"tr-TR\",label:\"T\u00fcrk\u00e7e\"},{code:\"uk-UA\",label:\"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\"},{code:\"zh-CN\",label:\"\u7b80\u4f53\u4e2d\u6587\"},{code:\"zh-TW\",label:\"\u7e41\u9ad4\u4e2d\u6587\"},{code:\"vi-VN\",label:\"Ti\u1ebfng Vi\u1ec7t\"},{code:\"mr-IN\",label:\"\u092e\u0930\u093e\u0920\u0940\"}].concat([d]).sort((function(e,t){return e.label>t.label?1:-1})).filter((function(e){return l[e.code]>=85})),p=\"__test__\";\"production\"===s.Vi.DEVELOPMENT&&f.unshift({code:p,label:\"test language\"},{code:\"\".concat(p,\".rtl\"),label:\"\u202atest language (rtl)\u202c\",rtl:!0});var h=d,m={},g=function(){var e=(0,r.Z)(i().mark((function e(t){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(h=t,document.documentElement.dir=h.rtl?\"rtl\":\"ltr\",document.documentElement.lang=h.code,!t.code.startsWith(p)){e.next=7;break}m={},e.next=17;break;case 7:return e.prev=7,e.next=10,n(940)(\".\/\".concat(h.code,\".json\"));case 10:m=e.sent,e.next=17;break;case 13:e.prev=13,e.t0=e.catch(7),console.error(\"Failed to load language \".concat(t.code,\":\"),e.t0.message),m=a;case 17:c.e_.set(x,t.code);case 18:case\"end\":return e.stop()}}),e,null,[[7,13]])})));return function(t){return e.apply(this,arguments)}}(),v=function(){return h},b=function(e,t){for(var n=0;n<t.length;++n){var r=t[n];if(void 0===e[r])return;e=e[r]}if(\"string\"==typeof e)return e},y=function(e,t){if(h.code.startsWith(p)){var n=t?\"\".concat(e,\"(\").concat(JSON.stringify(t).slice(1,-1),\")\"):e;return\"\u202a[[\".concat(n,\"]]\u202c\")}var r=e.split(\".\"),o=b(m,r)||b(a,r);if(void 0===o)throw new Error(\"Can't find translation for \".concat(e));if(t)for(var i in t)o=o.replace(\"{{\".concat(i,\"}}\"),String(t[i]));return o},x=(0,u.cn)(d.code),w=function(){var e=(0,u.Dv)(x,c.yE);return{t:y,langCode:e}}},9487:function(e,t,n){\"use strict\";n.d(t,{e_:function(){return i},yE:function(){return o}});var r=n(4739),o=(n(9787),Symbol()),i=(0,r.Vv)()},6066:function(e,t,n){\"use strict\";n.d(t,{E0:function(){return s},Ge:function(){return c},OA:function(){return l},Wl:function(){return a},aU:function(){return o},tW:function(){return i}});var r=n(2335),o={EQUAL:\"Equal\",MINUS:\"Minus\",NUM_ADD:\"NumpadAdd\",NUM_SUBTRACT:\"NumpadSubtract\",NUM_ZERO:\"Numpad0\",BRACKET_RIGHT:\"BracketRight\",BRACKET_LEFT:\"BracketLeft\",ONE:\"Digit1\",TWO:\"Digit2\",NINE:\"Digit9\",QUOTE:\"Quote\",ZERO:\"Digit0\",SLASH:\"Slash\",C:\"KeyC\",D:\"KeyD\",H:\"KeyH\",V:\"KeyV\",Z:\"KeyZ\",R:\"KeyR\"},i={ARROW_DOWN:\"ArrowDown\",ARROW_LEFT:\"ArrowLeft\",ARROW_RIGHT:\"ArrowRight\",ARROW_UP:\"ArrowUp\",PAGE_UP:\"PageUp\",PAGE_DOWN:\"PageDown\",BACKSPACE:\"Backspace\",ALT:\"Alt\",CTRL_OR_CMD:r.Um?\"metaKey\":\"ctrlKey\",DELETE:\"Delete\",ENTER:\"Enter\",ESCAPE:\"Escape\",QUESTION_MARK:\"?\",SPACE:\" \",TAB:\"Tab\",CHEVRON_LEFT:\"<\",CHEVRON_RIGHT:\">\",PERIOD:\".\",COMMA:\",\",A:\"a\",C:\"c\",D:\"d\",E:\"e\",F:\"f\",G:\"g\",H:\"h\",I:\"i\",L:\"l\",O:\"o\",P:\"p\",Q:\"q\",R:\"r\",S:\"s\",T:\"t\",V:\"v\",X:\"x\",Y:\"y\",Z:\"z\",K:\"k\",0:\"0\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\"},a=function(e){return e===i.ARROW_LEFT||e===i.ARROW_RIGHT||e===i.ARROW_DOWN||e===i.ARROW_UP},l=function(e){return e.altKey},s=function(e){return e.shiftKey},c=function(e){return e.shiftKey}},6552:function(e,t,n){\"use strict\";n.d(t,{EK:function(){return S},H5:function(){return u},Jj:function(){return E},LW:function(){return c},N_:function(){return y},U1:function(){return a},c9:function(){return f},eH:function(){return w},g6:function(){return d},lk:function(){return k},wC:function(){return g},xj:function(){return l},yB:function(){return b},yW:function(){return v},yq:function(){return s}});var r=n(2335),o=n(3063),i=n(8925),a=function(e,t,n,r,o){return[(e-n)*Math.cos(o)-(t-r)*Math.sin(o)+n,(e-n)*Math.sin(o)+(t-r)*Math.cos(o)+r]},l=function(e,t,n){return a(e[0],e[1],t[0],t[1],n)},s=function(e,t,n,r,o,i,a,l){var s=Math.cos(r),c=Math.sin(r);return e.e&&e.w?t+=o+a:e.e?(t+=o*(1+s),n+=o*c,t+=a*(1-s),n+=a*-c):e.w&&(t+=o*(1-s),n+=o*-c,t+=a*(1+s),n+=a*c),e.n&&e.s?n+=i+l:e.n?(t+=i*c,n+=i*(1-s),t+=l*-c,n+=l*(1+s)):e.s&&(t+=i*-c,n+=i*(1+s),t+=l*c,n+=l*(1-s)),[t,n]},c=function(e,t,n,r){var o=n-e,i=r-t;return Math.hypot(o,i)},u=function(e,t){return[(e[0]+t[0])\/2,(e[1]+t[1])\/2]},d=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(e.length>=3){var n=[e[0],e[e.length-1]],o=n[0],i=n[1],a=c(o[0],o[1],i[0],i[1]);return a<=r.qx\/t}return!1},f=function(e,t,n){var r=e.length;if(r<3)return!1;for(var o=[Number.MAX_SAFE_INTEGER,n],i=[t,n],a=0,l=0;l<r;l++){var s=e[l],c=e[(l+1)%r];if(m(s,c,i,o)){if(0===h(s,i,c))return p(s,i,c);a++}}return a%2==1},p=function(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])},h=function(e,t,n){var r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2},m=function(e,t,n,r){var o=h(e,t,n),i=h(e,t,r),a=h(n,r,e),l=h(n,r,t);return o!==i&&a!==l||(!(0!==o||!p(e,n,t))||(!(0!==i||!p(e,r,t))||(!(0!==a||!p(n,e,r))||!(0!==l||!p(n,t,r)))))},g=function(e,t,n){return n?[Math.round(e\/n)*n,Math.round(t\/n)*n]:[e,t]},v=function(e,t){var n,o,i;if((null===(n=t.roundness)||void 0===n?void 0:n.type)===r.a6.PROPORTIONAL_RADIUS||(null===(o=t.roundness)||void 0===o?void 0:o.type)===r.a6.LEGACY)return e*r.Rx;if((null===(i=t.roundness)||void 0===i?void 0:i.type)===r.a6.ADAPTIVE_RADIUS){var a,l,s=null!==(a=null===(l=t.roundness)||void 0===l?void 0:l.value)&&void 0!==a?a:r._9;return e<=s\/r.Rx?e*r.Rx:s}return 0},b=function(e,t){var n=(0,o.R2)(e);if(!n)return null;for(var r=(0,i.CM)(n[0]),a=[0,0],l=0,s=1\/0,u=null;l<r.length;){var d=r[l],f=d.op,p=d.data;if(\"move\"===f&&(a=p),\"bcurveTo\"===f){var h=a,m=[p[0],p[1]],g=[p[2],p[3]],v=[p[4],p[5]],b=c(v[0],v[1],t[0],t[1]);b<s&&(s=b,u=[h,m,g,v]),a=v}l++}return u},y=function(e,t,n,r,o){var i=function(o,i){return Math.pow(1-o,3)*r[i]+3*o*Math.pow(1-o,2)*n[i]+3*Math.pow(o,2)*(1-o)*t[i]+e[i]*Math.pow(o,3)};return[i(o,0),i(o,1)]},x=function(e,t){var n=[];n[0]=0;for(var r=function(e,t){var n=b(e,t);if(!n)return[];for(var r=[],o=1;o>0;){var i=y(n[0],n[1],n[2],n[3],o);r.push([i[0],i[1]]),o-=.05}return r.length&&E(r.at(-1),t)&&r.push([t[0],t[1]]),r}(e,t),o=0,i=0;o<r.length-1;){i+=c(r[o][0],r[o][1],r[o+1][0],r[o+1][1]),n.push(i),o++}return n},w=function(e,t){return x(e,t).at(-1)},k=function(e,t,n){for(var r=x(e,t),o=r.length-1,i=n*r.at(-1),a=0,l=o,s=0;a<l;)r[s=Math.floor(a+(l-a)\/2)]<i?a=s+1:l=s;return r[s]>i&&s--,r[s]===i?s\/o:1-(s+(i-r[s])\/(r[s+1]-r[s]))\/o},E=function(e,t){return e[0]===t[0]&&e[1]===t[1]},S=function(e){return Math.round(e\/Math.PI*1e4)%5e3==0}},3024:function(e,t,n){\"use strict\";n.d(t,{$D:function(){return S},Fl:function(){return E},I_:function(){return f.I_},N7:function(){return v.N7},NI:function(){return f.NI},NL:function(){return k},ZY:function(){return g.ZY},cT:function(){return g.cT},i1:function(){return j},lV:function(){return g.lV},zh:function(){return b.zh}});var r=n(8950),o=n(7169),i=n(2975),a=n.n(i),l=n(4162),s=n(8897),c=n(679),u=n(2335),d=n(673),f=n(5523),p=n(6665),h=n(1564),m=n(2791),g=n(434),v=n(3063),b=n(7053);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var w=function(e){var t=new h.Z;return t.replaceAllElements((0,m._N)(e)),t.getNonDeletedElements()},k=function(e){var t=e.elements,n=e.appState,r=e.files,o=e.maxWidthOrHeight,i=e.getDimensions,a=e.exportPadding,s=(0,c.nu)({elements:t,appState:n},null,null),u=s.elements,d=s.appState,f=d.exportBackground,p=d.viewBackgroundColor;return(0,l.NL)(w(u),x(x({},d),{},{offsetTop:0,offsetLeft:0,width:0,height:0}),r||{},{exportBackground:f,exportPadding:a,viewBackgroundColor:p},(function(e,t){var r,a=document.createElement(\"canvas\");if(o){var l;\"function\"==typeof i&&console.warn(\"`getDimensions()` is ignored when `maxWidthOrHeight` is supplied.\");var s=Math.max(e,t),c=o<s?o\/s:null!==(l=null==n?void 0:n.exportScale)&&void 0!==l?l:1;return a.width=e*c,a.height=t*c,{canvas:a,scale:c}}var u=(null==i?void 0:i(e,t))||{width:e,height:t};return a.width=u.width,a.height=u.height,{canvas:a,scale:null!==(r=u.scale)&&void 0!==r?r:1}}))},E=function(){var e=(0,r.Z)(a().mark((function e(t){var n,o,i,l,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=(o=t).mimeType,l=void 0===i?u.LO.png:i,s=o.quality,l===u.LO.png&&\"number\"==typeof s&&console.warn('\"quality\" will be ignored for \"'.concat(u.LO.png,'\" mimeType')),\"image\/jpg\"===l&&(l=u.LO.jpg),l!==u.LO.jpg||null!==(n=t.appState)&&void 0!==n&&n.exportBackground||(console.warn('Defaulting \"exportBackground\" to \"true\" for \"'.concat(u.LO.jpg,'\" mimeType')),t=x(x({},t),{},{appState:x(x({},t.appState),{},{exportBackground:!0})})),e.next=6,k(x(x({},t),{},{elements:w(t.elements)}));case 6:return c=e.sent,s=s||(\/image\\\/jpe?g\/.test(l)?.92:.8),e.abrupt(\"return\",new Promise((function(e,n){c.toBlob(function(){var o=(0,r.Z)(a().mark((function r(o){var i;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(o){r.next=2;break}return r.abrupt(\"return\",n(new Error(\"couldn't export to blob\")));case 2:if(!o||l!==u.LO.png||null===(i=t.appState)||void 0===i||!i.exportEmbedScene){r.next=6;break}return r.next=5,(0,d.encodePngMetadata)({blob:o,metadata:(0,f.I_)(t.elements,t.appState,t.files||{},\"local\")});case 5:o=r.sent;case 6:e(o);case 7:case\"end\":return r.stop()}}),r)})));return function(e){return o.apply(this,arguments)}}(),l,s)})));case 9:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),S=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r,o,i,u,d,p,h,m,g;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.elements,r=t.appState,o=void 0===r?(0,s.im)():r,i=t.files,u=void 0===i?{}:i,d=t.exportPadding,p=(0,c.nu)({elements:n,appState:o},null,null),h=p.elements,m=p.appState,g=x(x({},m),{},{exportPadding:d}),e.abrupt(\"return\",(0,l.$D)(w(h),g,u,{serializeAsJSON:function(){return(0,f.I_)(h,g,u||{},\"local\")}}));case 4:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),j=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(\"svg\"!==t.type){e.next=8;break}return e.next=3,S(t);case 3:return n=e.sent,e.next=6,(0,p.dd)(n.outerHTML);case 6:case 11:case 17:e.next=20;break;case 8:if(\"png\"!==t.type){e.next=13;break}return e.next=11,(0,p.uR)(E(t));case 13:if(\"json\"!==t.type){e.next=19;break}return r=x(x({offsetTop:0,offsetLeft:0,width:0,height:0},(0,s.im)()),t.appState),e.next=17,(0,p.vQ)(t.elements,r,t.files);case 19:throw new Error(\"Invalid export type\");case 20:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},5001:function(e,t,n){\"use strict\";n.d(t,{k:function(){return o},z:function(){return i}});var r=n(1930),o=function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{width:Math.max.apply(Math,(0,r.Z)(t))-Math.min.apply(Math,(0,r.Z)(t)),height:Math.max.apply(Math,(0,r.Z)(n))-Math.min.apply(Math,(0,r.Z)(n))}},i=function(e,t,n,o){var i=n.map((function(t){return t[e]})),a=Math.max.apply(Math,(0,r.Z)(i)),l=Math.min.apply(Math,(0,r.Z)(i)),s=a-l,c=0===s?1:t\/s,u=1\/0,d=n.map((function(t){var n=t[e]*c,o=(0,r.Z)(t);return o[e]=n,n<u&&(u=n),o}));if(!o)return d;if(2===d.length)return d;var f=l-u;return d.map((function(t){return t.map((function(t,n){return n===e?t+f:t}))}))}},6954:function(e,t,n){\"use strict\";n.d(t,{LU:function(){return s},kb:function(){return c}});var r=n(8152),o=n(5605),i=n(6340),a=new r.k(Date.now()),l=0,s=function(){return Math.floor(a.next()*Math.pow(2,31))},c=function(){return(0,i.h2)()?\"id\".concat(l++):(0,o.x0)()}},3063:function(e,t,n){\"use strict\";n.d(t,{Dn:function(){return F},i:function(){return $},N7:function(){return le},R2:function(){return X},bI:function(){return J},lw:function(){return ne},Rg:function(){return oe}});var r=n(1930),o=n(7169),i=n(2577),a=n(1974),l=n(8925),s=n(6340),c=n(6552),u=n(8234),d=n(8897),f=n(2335);function p(e,t,n,r=(e=>e)){return e*r(.5-t*(.5-n))}function h(e,t){return[e[0]+t[0],e[1]+t[1]]}function m(e,t){return[e[0]-t[0],e[1]-t[1]]}function g(e,t){return[e[0]*t,e[1]*t]}function v(e){return[e[1],-e[0]]}function b(e,t){return e[0]*t[0]+e[1]*t[1]}function y(e,t){return e[0]===t[0]&&e[1]===t[1]}function x(e,t){return function(e){return e[0]*e[0]+e[1]*e[1]}(m(e,t))}function w(e){return function(e,t){return[e[0]\/t,e[1]\/t]}(e,function(e){return Math.hypot(e[0],e[1])}(e))}function k(e,t){return Math.hypot(e[1]-t[1],e[0]-t[0])}function E(e,t,n){let r=Math.sin(n),o=Math.cos(n),i=e[0]-t[0],a=e[1]-t[1],l=i*r+a*o;return[i*o-a*r+t[0],l+t[1]]}function S(e,t,n){return h(e,g(m(t,e),n))}function j(e,t,n){return h(e,g(t,n))}var{min:_,PI:O}=Math,C=O+1e-4;function I(e,t={}){return function(e,t={}){let{size:n=16,smoothing:r=.5,thinning:o=.5,simulatePressure:i=!0,easing:a=(e=>e),start:l={},end:s={},last:c=!1}=t,{cap:u=!0,easing:d=(e=>e*(2-e))}=l,{cap:f=!0,easing:y=(e=>--e*e*e+1)}=s;if(0===e.length||n<=0)return[];let k,O=e[e.length-1].runningLength,I=!1===l.taper?0:!0===l.taper?Math.max(n,O):l.taper,M=!1===s.taper?0:!0===s.taper?Math.max(n,O):s.taper,T=Math.pow(n*r,2),P=[],D=[],A=e.slice(0,10).reduce(((e,t)=>{let r=t.pressure;if(i){let o=_(1,t.distance\/n),i=_(1,1-o);r=_(1,e+.275*o*(i-e))}return(e+r)\/2}),e[0].pressure),L=p(n,o,e[e.length-1].pressure,a),Z=e[0].vector,z=e[0].point,R=z,N=z,B=R,H=!1;for(let t=0;t<e.length;t++){let{pressure:r}=e[t],{point:l,vector:s,distance:c,runningLength:u}=e[t];if(t<e.length-1&&O-u<3)continue;if(o){if(i){let e=_(1,c\/n),t=_(1,1-e);r=_(1,A+.275*e*(t-A))}L=p(n,o,r,a)}else L=n\/2;void 0===k&&(k=L);let f=u<I?d(u\/I):1,w=O-u<M?y((O-u)\/M):1;L=Math.max(.01,L*Math.min(f,w));let j=(t<e.length-1?e[t+1]:e[t]).vector,W=t<e.length-1?b(s,j):1,F=null!==W&&W<0;if(b(s,Z)<0&&!H||F){let e=g(v(Z),L);for(let t=1\/13,n=0;n<=1;n+=t)N=E(m(l,e),l,C*n),P.push(N),B=E(h(l,e),l,C*-n),D.push(B);z=N,R=B,F&&(H=!0);continue}if(H=!1,t===e.length-1){let e=g(v(s),L);P.push(m(l,e)),D.push(h(l,e));continue}let U=g(v(S(j,s,W)),L);N=m(l,U),(t<=1||x(z,N)>T)&&(P.push(N),z=N),B=h(l,U),(t<=1||x(R,B)>T)&&(D.push(B),R=B),A=r,Z=s}let W=e[0].point.slice(0,2),F=e.length>1?e[e.length-1].point.slice(0,2):h(e[0].point,[1,1]),U=[],K=[];if(1===e.length){if(!I&&!M||c){let e=j(W,w(v(m(W,F))),-(k||L)),t=[];for(let n=1\/13,r=n;r<=1;r+=n)t.push(E(e,W,2*C*r));return t}}else{if(!(I||M&&1===e.length))if(u)for(let e=1\/13,t=e;t<=1;t+=e){let e=E(D[0],W,C*t);U.push(e)}else{let e=m(P[0],D[0]),t=g(e,.5),n=g(e,.51);U.push(m(W,t),m(W,n),h(W,n),h(W,t))}let t=v(function(e){return[-e[0],-e[1]]}(e[e.length-1].vector));if(M||I&&1===e.length)K.push(F);else if(f){let e=j(F,t,L);for(let t=1\/29,n=t;n<1;n+=t)K.push(E(e,F,3*C*n))}else K.push(h(F,g(t,L)),h(F,g(t,.99*L)),m(F,g(t,.99*L)),m(F,g(t,L)))}return P.concat(K,D.reverse(),U)}(function(e,t={}){var n;let{streamline:r=.5,size:o=16,last:i=!1}=t;if(0===e.length)return[];let a=.15+.85*(1-r),l=Array.isArray(e[0])?e:e.map((({x:e,y:t,pressure:n=.5})=>[e,t,n]));if(2===l.length){let e=l[1];l=l.slice(0,-1);for(let t=1;t<5;t++)l.push(S(l[0],e,t\/4))}1===l.length&&(l=[...l,[...h(l[0],[1,1]),...l[0].slice(2)]]);let s=[{point:[l[0][0],l[0][1]],pressure:l[0][2]>=0?l[0][2]:.25,vector:[1,1],distance:0,runningLength:0}],c=!1,u=0,d=s[0],f=l.length-1;for(let e=1;e<l.length;e++){let t=i&&e===f?l[e].slice(0,2):S(d.point,l[e],a);if(y(d.point,t))continue;let n=k(t,d.point);if(u+=n,e<f&&!c){if(u<o)continue;c=!0}d={point:t,pressure:l[e][2]>=0?l[e][2]:.5,vector:w(m(d.point,t)),distance:n,runningLength:u},s.push(d)}return s[0].vector=(null==(n=s[1])?void 0:n.vector)||[0,0],s}(e,t),t)}var M=n(5710),T=n(6938),P=n(6794);function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var L=\"invert(100%) hue-rotate(180deg) saturate(1.25)\",Z=(0,d.im)(),z=function(e,t){return(0,a.wi)(e)&&!t.imageCache.has(e.fileId)},R=function(e,t){var n;return\"dark\"===t.theme&&(0,a.wi)(e)&&!z(e,t)&&(null===(n=t.imageCache.get(e.fileId))||void 0===n?void 0:n.mimeType)!==f.LO.svg},N=function(e){return[8,8+e]},B=function(e){return[1.5,6+e]},H=function(e){return\"freedraw\"===e.type?12*e.strokeWidth:20},W=function(e,t,n){var r,o=document.createElement(\"canvas\"),c=o.getContext(\"2d\"),d=H(e),f=function(e,t){var n=16777216,r=32767,o=H(e),c=(0,l.qf)(e),u=(0,i.Z)(c,4),d=u[0],f=u[1],p=u[2],h=u[3],m=(0,a.bt)(e)||(0,a.F9)(e)?(0,s.TE)(d,p):e.width,g=(0,a.bt)(e)||(0,a.F9)(e)?(0,s.TE)(f,h):e.height,v=m*window.devicePixelRatio+2*o,b=g*window.devicePixelRatio+2*o,y=t.value;return(v*y>r||b*y>r)&&(y=Math.min(r\/v,r\/b)),v*b*y*y>n&&(y=Math.sqrt(n\/(v*b))),{width:v=Math.floor(v*y),height:b=Math.floor(b*y),scale:y}}(e,t),p=f.width,h=f.height,m=f.scale;o.width=p,o.height=h;var g=0,v=0;if((0,a.bt)(e)||(0,a.F9)(e)){var b=(0,l.qf)(e),y=(0,i.Z)(b,2),x=y[0],w=y[1];g=e.x>x?(0,s.TE)(e.x,x)*window.devicePixelRatio*m:0,v=e.y>w?(0,s.TE)(e.y,w)*window.devicePixelRatio*m:0,c.translate(g,v)}c.save(),c.translate(d*m,d*m),c.scale(window.devicePixelRatio*m,window.devicePixelRatio*m);var k=u.Z.canvas(o);return R(e,n)&&(c.filter=L),Y(e,k,c,n),c.restore(),{element:e,canvas:o,theme:n.theme,scale:m,zoomValue:t.value,canvasOffsetX:g,canvasOffsetY:v,boundTextElementVersion:(null===(r=(0,M.WJ)(e))||void 0===r?void 0:r.version)||null}},F=14,U=document.createElement(\"img\");U.src=\"data:\".concat(f.LO.svg,\",\").concat(encodeURIComponent('<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"image\" class=\"svg-inline--fa fa-image fa-w-16\" role=\"img\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 512 512\"><path fill=\"#888\" d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z\"><\/path><\/svg>'));var K=document.createElement(\"img\");K.src=\"data:\".concat(f.LO.svg,\",\").concat(encodeURIComponent('<svg viewBox=\"0 0 668 668\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xml:space=\"preserve\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2\"><path d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48ZM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56ZM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48Z\" style=\"fill:#888;fill-rule:nonzero\" transform=\"matrix(.81709 0 0 .81709 124.825 145.825)\"\/><path d=\"M256 8C119.034 8 8 119.033 8 256c0 136.967 111.034 248 248 248s248-111.034 248-248S392.967 8 256 8Zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676ZM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676Z\" style=\"fill:#888;fill-rule:nonzero\" transform=\"matrix(.30366 0 0 .30366 506.822 60.065)\"\/><\/svg>'));var Y=function(e,t,n,r){switch(n.globalAlpha=e.opacity\/100,e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":n.lineJoin=\"round\",n.lineCap=\"round\",t.draw(X(e));break;case\"arrow\":case\"line\":n.lineJoin=\"round\",n.lineCap=\"round\",X(e).forEach((function(e){t.draw(e)}));break;case\"freedraw\":n.save(),n.fillStyle=e.strokeColor;var o=function(e){return ie.get(e)}(e),i=X(e);i&&t.draw(i),n.fillStyle=e.strokeColor,n.fill(o),n.restore();break;case\"image\":var l,c=(0,a.wi)(e)?null===(l=r.imageCache.get(e.fileId))||void 0===l?void 0:l.image:void 0;null==c||c instanceof Promise?function(e,t,n){t.fillStyle=\"#E7E7E7\",t.fillRect(0,0,e.width,e.height);var r=Math.min(e.width,e.height),o=Math.min(r,Math.min(.4*r,100));t.drawImage(\"error\"===e.status?K:U,e.width\/2-o\/2,e.height\/2-o\/2,o,o)}(e,n,r.zoom.value):n.drawImage(c,0,0,e.width,e.height);break;default:if(!(0,a.iB)(e))throw new Error(\"Unimplemented type \".concat(e.type));var u=(0,s.dZ)(e.text),d=u&&!n.canvas.isConnected;d&&document.body.appendChild(n.canvas),n.canvas.setAttribute(\"dir\",u?\"rtl\":\"ltr\"),n.save(),n.font=(0,s.mO)(e),n.fillStyle=e.strokeColor,n.textAlign=e.textAlign;for(var f=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),p=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,h=(0,M.Rg)(e.fontSize,e.lineHeight),m=e.height-e.baseline,g=0;g<f.length;g++)n.fillText(f[g],p,(g+1)*h-m);n.restore(),d&&n.canvas.remove()}n.globalAlpha=1},G=new WeakMap,V=new WeakMap,X=function(e){return V.get(e)},q=function(e,t){return V.set(e,t)},J=function(e){return V.delete(e)},$=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n={seed:e.seed,strokeLineDash:\"dashed\"===e.strokeStyle?N(e.strokeWidth):\"dotted\"===e.strokeStyle?B(e.strokeWidth):void 0,disableMultiStroke:\"solid\"!==e.strokeStyle,strokeWidth:\"solid\"!==e.strokeStyle?e.strokeWidth+.5:e.strokeWidth,fillWeight:e.strokeWidth\/2,hachureGap:4*e.strokeWidth,roughness:e.roughness,stroke:e.strokeColor,preserveVertices:t};switch(e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":return n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor,\"ellipse\"===e.type&&(n.curveFitting=1),n;case\"line\":case\"freedraw\":return(0,c.g6)(e.points)&&(n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor),n;case\"arrow\":return n;default:throw new Error(\"Unimplemented type \".concat(e.type))}},Q=function(e,t){var n=V.get(e);if(void 0===n)switch(G.delete(e),e.type){case\"rectangle\":if(e.roundness){var o=e.width,a=e.height,s=(0,c.yW)(Math.min(o,a),e);n=t.path(\"M \".concat(s,\" 0 L \").concat(o-s,\" 0 Q \").concat(o,\" 0, \").concat(o,\" \").concat(s,\" L \").concat(o,\" \").concat(a-s,\" Q \").concat(o,\" \").concat(a,\", \").concat(o-s,\" \").concat(a,\" L \").concat(s,\" \").concat(a,\" Q 0 \").concat(a,\", 0 \").concat(a-s,\" L 0 \").concat(s,\" Q 0 0, \").concat(s,\" 0\"),$(e,!0))}else n=t.rectangle(0,0,e.width,e.height,$(e));q(e,n);break;case\"diamond\":var u=(0,l.UC)(e),d=(0,i.Z)(u,8),f=d[0],p=d[1],h=d[2],m=d[3],g=d[4],v=d[5],b=d[6],y=d[7];if(e.roundness){var x=(0,c.yW)(Math.abs(f-b),e),w=(0,c.yW)(Math.abs(m-p),e);n=t.path(\"M \".concat(f+x,\" \").concat(p+w,\" L \").concat(h-x,\" \").concat(m-w,\"\\n            C \").concat(h,\" \").concat(m,\", \").concat(h,\" \").concat(m,\", \").concat(h-x,\" \").concat(m+w,\"\\n            L \").concat(g+x,\" \").concat(v-w,\"\\n            C \").concat(g,\" \").concat(v,\", \").concat(g,\" \").concat(v,\", \").concat(g-x,\" \").concat(v-w,\"\\n            L \").concat(b+x,\" \").concat(y+w,\"\\n            C \").concat(b,\" \").concat(y,\", \").concat(b,\" \").concat(y,\", \").concat(b+x,\" \").concat(y-w,\"\\n            L \").concat(f-x,\" \").concat(p+w,\"\\n            C \").concat(f,\" \").concat(p,\", \").concat(f,\" \").concat(p,\", \").concat(f+x,\" \").concat(p+w),$(e,!0))}else n=t.polygon([[f,p],[h,m],[g,v],[b,y]],$(e));q(e,n);break;case\"ellipse\":n=t.ellipse(e.width\/2,e.height\/2,e.width,e.height,$(e)),q(e,n);break;case\"line\":case\"arrow\":var k=$(e),E=e.points.length?e.points:[[0,0]];if(n=e.roundness?[t.curve(E,k)]:k.fill?[t.polygon(E,k)]:[t.linearPath(E,k)],\"arrow\"===e.type){var S=e.startArrowhead,j=void 0===S?null:S,_=e.endArrowhead,O=void 0===_?\"arrow\":_,C=function(e,n,r,o){var a=(0,l.Y5)(e,n,r,o);if(null===a)return[];if(\"dot\"===o){var s=(0,i.Z)(a,3),c=s[0],u=s[1],d=s[2];return[t.circle(c,u,d,A(A({},k),{},{fill:e.strokeColor,fillStyle:\"solid\",stroke:\"none\"}))]}if(\"triangle\"===o){var f=(0,i.Z)(a,6),p=f[0],h=f[1],m=f[2],g=f[3],v=f[4],b=f[5];return delete k.strokeLineDash,[t.polygon([[p,h],[m,g],[v,b],[p,h]],A(A({},k),{},{fill:e.strokeColor,fillStyle:\"solid\"}))]}var y=(0,i.Z)(a,6),x=y[0],w=y[1],E=y[2],S=y[3],j=y[4],_=y[5];if(\"dotted\"===e.strokeStyle){var O=B(e.strokeWidth-1);k.strokeLineDash=[O[0],O[1]-1]}else delete k.strokeLineDash;return[t.line(E,S,x,w,k),t.line(j,_,x,w,k)]};if(null!==j){var I,M=C(e,n,\"start\",j);(I=n).push.apply(I,(0,r.Z)(M))}if(null!==O){var T,P=C(e,n,\"end\",O);(T=n).push.apply(T,(0,r.Z)(P))}}q(e,n);break;case\"freedraw\":ae(e),n=(0,c.g6)(e.points)?t.polygon(e.points,A(A({},$(e)),{},{stroke:\"none\"})):null,q(e,n);break;case\"text\":case\"image\":q(e,null)}},ee=function(e,t){var n,r=t?t.zoom:Z.zoom,o=G.get(e),i=o&&o.zoomValue!==r.value&&!(null!=t&&t.shouldCacheIgnoreZoom),a=(null===(n=(0,M.WJ)(e))||void 0===n?void 0:n.version)||null;if(!o||i||o.theme!==t.theme||o.boundTextElementVersion!==a){var l=W(e,r,t);return G.set(e,l),l}return o},te=function(e,t,n,r){var o=e.element,c=H(o),u=e.scale,d=(0,l.qf)(o),p=(0,i.Z)(d,4),h=p[0],m=p[1],g=p[2],v=p[3];(0,a.F9)(o)&&(h=Math.floor(h),g=Math.ceil(g),m=Math.floor(m),v=Math.ceil(v));var b=((h+g)\/2+r.scrollX)*window.devicePixelRatio,y=((m+v)\/2+r.scrollY)*window.devicePixelRatio;n.save(),n.scale(1\/window.devicePixelRatio,1\/window.devicePixelRatio);var x=(0,M.WJ)(o);if((0,a.Yv)(o)&&x){var w=document.createElement(\"canvas\"),k=w.getContext(\"2d\"),E=Math.max((0,s.TE)(h,g),(0,s.TE)(m,v));w.width=E*window.devicePixelRatio*u+c*e.scale*10,w.height=E*window.devicePixelRatio*u+c*e.scale*10;var S=(w.width-e.canvas.width)\/2,j=(w.height-e.canvas.height)\/2;k.translate(w.width\/2,w.height\/2),k.rotate(o.angle),k.drawImage(e.canvas,-e.canvas.width\/2,-e.canvas.height\/2,e.canvas.width,e.canvas.height);var _=(0,l.qf)(x),O=(0,i.Z)(_,6),C=O[4],I=O[5];k.rotate(-o.angle);var T=w.width\/2-(C-h)*window.devicePixelRatio*u-S-c*u,P=w.height\/2-(I-m)*window.devicePixelRatio*u-j-c*u;k.translate(-T,-P),k.clearRect(-(x.width\/2+f.gK)*window.devicePixelRatio*u,-(x.height\/2+f.gK)*window.devicePixelRatio*u,(x.width+2*f.gK)*window.devicePixelRatio*u,(x.height+2*f.gK)*window.devicePixelRatio*u),n.translate(b,y),n.drawImage(w,-(g-h)\/2*window.devicePixelRatio-S\/u-c,-(v-m)\/2*window.devicePixelRatio-j\/u-c,w.width\/u,w.height\/u)}else if(n.translate(b,y),n.rotate(o.angle),\"scale\"in e.element&&!z(o,r)&&n.scale(e.element.scale[0],e.element.scale[1]),n.translate(-b,-y),n.drawImage(e.canvas,(h+r.scrollX)*window.devicePixelRatio-c*e.scale\/e.scale,(m+r.scrollY)*window.devicePixelRatio-c*e.scale\/e.scale,e.canvas.width\/e.scale,e.canvas.height\/e.scale),\"true\"==={REACT_APP_BACKEND_V2_GET_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/\",REACT_APP_BACKEND_V2_POST_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/post\/\",REACT_APP_LIBRARY_URL:\"https:\/\/libraries.excalidraw.com\",REACT_APP_LIBRARY_BACKEND:\"https:\/\/us-central1-excalidraw-room-persistence.cloudfunctions.net\/libraries\",REACT_APP_PORTAL_URL:\"https:\/\/portal.excalidraw.com\",REACT_APP_WS_SERVER_URL:\"\",REACT_APP_FIREBASE_CONFIG:'{\"apiKey\":\"AIzaSyAd15pYlMci_xIp9ko6wkEsDzAAA0Dn0RU\",\"authDomain\":\"excalidraw-room-persistence.firebaseapp.com\",\"databaseURL\":\"https:\/\/excalidraw-room-persistence.firebaseio.com\",\"projectId\":\"excalidraw-room-persistence\",\"storageBucket\":\"excalidraw-room-persistence.appspot.com\",\"messagingSenderId\":\"654800341332\",\"appId\":\"1:654800341332:web:4a692de832b55bd57ce0c1\"}',REACT_APP_GOOGLE_ANALYTICS_ID:\"UA-387204-13\",REACT_APP_MATOMO_URL:\"https:\/\/excalidraw.matomo.cloud\/\",REACT_APP_CDN_MATOMO_TRACKER_URL:\"\/\/cdn.matomo.cloud\/excalidraw.matomo.cloud\/matomo.js\",REACT_APP_MATOMO_SITE_ID:\"1\",REACT_APP_PLUS_APP:\"https:\/\/app.excalidraw.com\",PKG_NAME:\"@excalidraw\/excalidraw\",PKG_VERSION:\"0.15.3\",IS_EXCALIDRAW_NPM_PACKAGE:!0}.REACT_APP_DEBUG_ENABLE_TEXT_CONTAINER_BOUNDING_BOX&&(0,a.Xo)(o)){var D=(0,M.cw)(o);n.strokeStyle=\"#c92a2a\",n.lineWidth=3,n.strokeRect((D.x+r.scrollX)*window.devicePixelRatio,(D.y+r.scrollY)*window.devicePixelRatio,(0,M.jd)(o)*window.devicePixelRatio,(0,M.N2)(o)*window.devicePixelRatio)}n.restore()},ne=function(e,t,n,r,o){var d=t.generator;switch(e.type){case\"selection\":n.save(),n.translate(e.x+r.scrollX,e.y+r.scrollY),n.fillStyle=\"rgba(0, 0, 200, 0.04)\";var f=.5\/r.zoom.value;n.fillRect(f,f,e.width,e.height),n.lineWidth=1\/r.zoom.value,n.strokeStyle=\"rgb(105, 101, 219)\",n.strokeRect(f,f,e.width,e.height),n.restore();break;case\"freedraw\":if(Q(e,d),r.isExporting){var p=(0,l.qf)(e),h=(0,i.Z)(p,4),m=h[0],g=h[1],v=h[2],b=h[3],y=(m+v)\/2+r.scrollX,x=(g+b)\/2+r.scrollY,w=(v-m)\/2-(e.x-m),k=(b-g)\/2-(e.y-g);n.save(),n.translate(y,x),n.rotate(e.angle),n.translate(-w,-k),Y(e,t,n,r),n.restore()}else{var E=ee(e,r);te(E,0,n,r)}break;case\"rectangle\":case\"diamond\":case\"ellipse\":case\"line\":case\"arrow\":case\"image\":case\"text\":if(Q(e,d),r.isExporting){var S=(0,l.qf)(e),j=(0,i.Z)(S,4),_=j[0],O=j[1],C=j[2],I=j[3],P=(_+C)\/2+r.scrollX,D=(O+I)\/2+r.scrollY,A=(C-_)\/2-(e.x-_),L=(I-O)\/2-(e.y-O);if((0,a.iB)(e)){var Z=(0,M.tl)(e);if((0,a.Yv)(Z)){var z=T._.getBoundTextElementPosition(Z,e);A=(C-_)\/2-(z.x-_),L=(I-O)\/2-(z.y-O)}}n.save(),n.translate(P,D),R(e,r)&&(n.filter=\"none\");var N=(0,M.WJ)(e);if((0,a.Yv)(e)&&N){var B=document.createElement(\"canvas\"),W=B.getContext(\"2d\"),F=Math.max((0,s.TE)(_,C),(0,s.TE)(O,I)),U=H(e);B.width=F*o.exportScale+10*U*o.exportScale,B.height=F*o.exportScale+10*U*o.exportScale,W.translate(B.width\/2,B.height\/2),W.scale(o.exportScale,o.exportScale),A=e.width\/2-(e.x-_),L=e.height\/2-(e.y-O),W.rotate(e.angle);var K=u.Z.canvas(B);W.translate(-A,-L),Y(e,K,W,r),W.translate(A,L),W.rotate(-e.angle);var G=(0,l.qf)(N),V=(0,i.Z)(G,6),X=(_+C)\/2-V[4],q=(O+I)\/2-V[5];W.translate(-X,-q),W.clearRect(-N.width\/2,-N.height\/2,N.width,N.height),n.scale(1\/o.exportScale,1\/o.exportScale),n.drawImage(B,-B.width\/2,-B.height\/2,B.width,B.height)}else n.rotate(e.angle),\"image\"===e.type&&n.scale(e.scale[0],e.scale[1]),n.translate(-A,-L),Y(e,t,n,r);n.restore()}else{var J=ee(e,r),$=n.imageSmoothingEnabled;null!=r&&r.shouldCacheIgnoreZoom||e.angle&&!(0,c.EK)(e.angle)||(n.imageSmoothingEnabled=!1),te(J,0,n,r),n.imageSmoothingEnabled=$}break;default:throw new Error(\"Unimplemented type \".concat(e.type))}},re=function(e,t,n){if(void 0===n)return e.draw(t);var r={sets:t.sets,shape:t.shape,options:A(A({},t.options),{},{fixedDecimalPlaceDigits:n})};return e.draw(r)},oe=function(e,t,n,r,o,u,d){var p=(0,l.qf)(e),h=(0,i.Z)(p,4),m=h[0],g=h[1],v=h[2],b=h[3],y=(v-m)\/2-(e.x-m),x=(b-g)\/2-(e.y-g);if((0,a.iB)(e)){var w=(0,M.tl)(e);if((0,a.Yv)(w)){var k=(0,l.qf)(w),E=(0,i.Z)(k,4),S=E[0],j=E[1],_=E[2],O=E[3],C=T._.getBoundTextElementPosition(w,e);y=(_-S)\/2-(C.x-S),x=(O-j)\/2-(C.y-j),o=o+C.x-e.x,u=u+C.y-e.y}}var I=180*e.angle\/Math.PI,D=t.generator,A=n;if(e.link){var Z=n.ownerDocument.createElementNS(f.hR,\"a\");Z.setAttribute(\"href\",(0,P.$)(e.link)),A.appendChild(Z),A=Z}switch(e.type){case\"selection\":throw new Error(\"Selection rendering is not supported for SVG\");case\"rectangle\":case\"diamond\":case\"ellipse\":Q(e,D);var z=re(t,X(e),f.zK),R=e.opacity\/100;1!==R&&(z.setAttribute(\"stroke-opacity\",\"\".concat(R)),z.setAttribute(\"fill-opacity\",\"\".concat(R))),z.setAttribute(\"stroke-linecap\",\"round\"),z.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),A.appendChild(z);break;case\"line\":case\"arrow\":var N=(0,M.WJ)(e),B=n.ownerDocument.createElementNS(f.hR,\"mask\");if(N){B.setAttribute(\"id\",\"mask-\".concat(e.id));var H=n.ownerDocument.createElementNS(f.hR,\"rect\");o=o||0,u=u||0,H.setAttribute(\"x\",\"0\"),H.setAttribute(\"y\",\"0\"),H.setAttribute(\"fill\",\"#fff\"),H.setAttribute(\"width\",\"\".concat(e.width+100+o)),H.setAttribute(\"height\",\"\".concat(e.height+100+u)),B.appendChild(H);var W=n.ownerDocument.createElementNS(f.hR,\"rect\"),F=T._.getBoundTextElementPosition(e,N),U=o+F.x-e.x,K=u+F.y-e.y;W.setAttribute(\"x\",U.toString()),W.setAttribute(\"y\",K.toString()),W.setAttribute(\"fill\",\"#000\"),W.setAttribute(\"width\",\"\".concat(N.width)),W.setAttribute(\"height\",\"\".concat(N.height)),W.setAttribute(\"opacity\",\"1\"),B.appendChild(W)}Q(e,D);var Y=n.ownerDocument.createElementNS(f.hR,\"g\");N&&Y.setAttribute(\"mask\",\"url(#mask-\".concat(e.id,\")\"));var G=e.opacity\/100;Y.setAttribute(\"stroke-linecap\",\"round\"),X(e).forEach((function(n){var r=re(t,n,f.zK);1!==G&&(r.setAttribute(\"stroke-opacity\",\"\".concat(G)),r.setAttribute(\"fill-opacity\",\"\".concat(G))),r.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),\"line\"===e.type&&(0,c.g6)(e.points)&&\"transparent\"!==e.backgroundColor&&r.setAttribute(\"fill-rule\",\"evenodd\"),Y.appendChild(r)})),A.appendChild(Y),A.append(B);break;case\"freedraw\":Q(e,D),ae(e);var V=e.opacity\/100,q=X(e),J=q?re(t,q,f.zK):n.ownerDocument.createElementNS(f.hR,\"g\");1!==V&&(J.setAttribute(\"stroke-opacity\",\"\".concat(V)),J.setAttribute(\"fill-opacity\",\"\".concat(V))),J.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),J.setAttribute(\"stroke\",\"none\");var $=n.ownerDocument.createElementNS(f.hR,\"path\");$.setAttribute(\"fill\",e.strokeColor),$.setAttribute(\"d\",le(e)),J.appendChild($),A.appendChild(J);break;case\"image\":var ee=Math.round(e.width),te=Math.round(e.height),ne=(0,a.wi)(e)&&r[e.fileId];if(ne){var oe=\"image-\".concat(ne.id),ie=n.querySelector(\"#\".concat(oe));if(!ie){(ie=n.ownerDocument.createElementNS(f.hR,\"symbol\")).id=oe;var se=n.ownerDocument.createElementNS(f.hR,\"image\");se.setAttribute(\"width\",\"100%\"),se.setAttribute(\"height\",\"100%\"),se.setAttribute(\"href\",ne.dataURL),ie.appendChild(se),A.prepend(ie)}var ce=n.ownerDocument.createElementNS(f.hR,\"use\");if(ce.setAttribute(\"href\",\"#\".concat(oe)),d&&ne.mimeType!==f.LO.svg&&ce.setAttribute(\"filter\",L),ce.setAttribute(\"width\",\"\".concat(ee)),ce.setAttribute(\"height\",\"\".concat(te)),1!==e.scale[0]||1!==e.scale[1]){var ue=1!==e.scale[0]?-ee:0,de=1!==e.scale[1]?-te:0;ce.setAttribute(\"transform\",\"scale(\".concat(e.scale[0],\", \").concat(e.scale[1],\") translate(\").concat(ue,\" \").concat(de,\")\"))}var fe=n.ownerDocument.createElementNS(f.hR,\"g\");fe.appendChild(ce),fe.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),A.appendChild(fe)}break;default:if(!(0,a.iB)(e))throw new Error(\"Unimplemented type \".concat(e.type));var pe=e.opacity\/100,he=n.ownerDocument.createElementNS(f.hR,\"g\");1!==pe&&(he.setAttribute(\"stroke-opacity\",\"\".concat(pe)),he.setAttribute(\"fill-opacity\",\"\".concat(pe))),he.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\"));for(var me=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),ge=(0,M.Rg)(e.fontSize,e.lineHeight),ve=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,be=(0,s.dZ)(e.text)?\"rtl\":\"ltr\",ye=\"center\"===e.textAlign?\"middle\":\"right\"===e.textAlign||\"rtl\"===be?\"end\":\"start\",xe=0;xe<me.length;xe++){var we=n.ownerDocument.createElementNS(f.hR,\"text\");we.textContent=me[xe],we.setAttribute(\"x\",\"\".concat(ve)),we.setAttribute(\"y\",\"\".concat(xe*ge)),we.setAttribute(\"font-family\",(0,s.$g)(e)),we.setAttribute(\"font-size\",\"\".concat(e.fontSize,\"px\")),we.setAttribute(\"fill\",e.strokeColor),we.setAttribute(\"text-anchor\",ye),we.setAttribute(\"style\",\"white-space: pre;\"),we.setAttribute(\"direction\",be),we.setAttribute(\"dominant-baseline\",\"text-before-edge\"),he.appendChild(we)}A.appendChild(he)}},ie=new WeakMap([]);function ae(e){var t=le(e),n=new Path2D(t);return ie.set(e,n),n}function le(e){return function(e){if(!e.length)return\"\";var t=e.length-1;return e.reduce((function(e,n,r,o){return r===t?e.push(n,se(n,o[0]),\"L\",o[0],\"Z\"):e.push(n,se(n,o[r+1])),e}),[\"M\",e[0],\"Q\"]).join(\" \").replace(ce,\"$1\")}(I(e.simulatePressure?e.points:e.points.length?e.points.map((function(t,n){var r=(0,i.Z)(t,2);return[r[0],r[1],e.pressures[n]]})):[[0,0,.5]],{simulatePressure:e.simulatePressure,size:4.25*e.strokeWidth,thinning:.6,smoothing:.5,streamline:.5,easing:function(e){return Math.sin(e*Math.PI\/2)},last:!!e.lastCommittedPoint}))}function se(e,t){return[(e[0]+t[0])\/2,(e[1]+t[1])\/2]}var ce=\/(\\s?[A-Z]?,?-?[0-9]*\\.[0-9]{0,2})(([0-9]|e|-)*)\/g},3547:function(e,t,n){\"use strict\";n.d(t,{Lu:function(){return j},Eu:function(){return D},M_:function(){return H}});var r,o=n(2577),i=n(1930),a=n(5284),l=n(1047),s=n(756),c=n(1868),u=n(3063),d=n(8982),f=n(6938),p=n(242),h=n(2325),m=n(8290),g=n(267),v=n(6340);!function(e){e.ACTIVE=\"active\",e.AWAY=\"away\",e.IDLE=\"idle\"}(r||(r={}));var b=n(2335),y=n(4929),x=n(1974);function w(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return k(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E,S=(0,v.Q5)(),j=2,_=function(e,t,n,r,o,i,a,l){var s=arguments.length>8&&void 0!==arguments[8]&&arguments[8];e.save(),e.translate(i,a),e.rotate(l),s&&e.fillRect(t-i,n-a,r,o),e.strokeRect(t-i,n-a,r,o),e.restore()},O=function(e,t,n,r){var o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];e.beginPath(),e.arc(t,n,r,0,2*Math.PI),e.fill(),o&&e.stroke()},C=function(e,t,n,r,o,i){var a=arguments.length>6&&void 0!==arguments[6]&&arguments[6];e.strokeStyle=\"#5e5ad8\",e.setLineDash([]),e.fillStyle=\"rgba(255, 255, 255, 0.9)\",i?e.fillStyle=\"rgba(134, 131, 226, 0.9)\":a&&(e.fillStyle=\"rgba(177, 151, 252, 0.7)\"),O(e,r[0],r[1],o\/n.zoom.value,!a)},I=function(e,t,n,r){if(t.selectedLinearElement){e.save(),e.translate(n.scrollX,n.scrollY),e.lineWidth=1\/n.zoom.value;var o=f._.getPointsGlobalCoordinates(r),i=f._.POINT_HANDLE_SIZE,a=t.editingLinearElement?i:i\/2;o.forEach((function(r,o){var i,l,s=!(null===(i=t.editingLinearElement)||void 0===i||null===(l=i.selectedPointsIndices)||void 0===l||!l.includes(o));C(e,t,n,r,a,s)})),f._.getEditorMidPoints(r,t).filter((function(e){return null!==e})).forEach((function(r){var l;null!=t&&null!==(l=t.selectedLinearElement)&&void 0!==l&&l.segmentMidPointHoveredCoords&&f._.arePointsEqual(r,t.selectedLinearElement.segmentMidPointHoveredCoords)?t.editingLinearElement?(C(e,t,n,r,a,!1),M(r,e,n)):(M(r,e,n),C(e,t,n,r,a,!1)):(t.editingLinearElement||2===o.length)&&C(e,t,n,r,i\/2,!1,!0)})),e.restore()}},M=function(e,t,n){t.fillStyle=\"rgba(105, 101, 219, 0.4)\",O(t,e[0],e[1],f._.POINT_HANDLE_SIZE\/n.zoom.value,!1)},T=function(e){var t,n=e.elements,h=e.appState,v=e.scale,y=e.rc,k=e.canvas,E=e.renderConfig;if(null===k)return{atLeastOneVisibleElement:!1};var O=E.renderScrollbars,C=void 0===O||O,T=E.renderSelection,P=void 0===T||T,D=E.renderGrid,z=void 0===D||D,R=E.isExporting,H=E.selectionColor||a.black,W=k.getContext(\"2d\");W.setTransform(1,0,0,1,0,0),W.save(),W.scale(v,v);var F=k.width\/v,U=k.height\/v;(R&&\"dark\"===E.theme&&(W.filter=b.ZF),\"string\"==typeof E.viewBackgroundColor)?((\"transparent\"===E.viewBackgroundColor||5===E.viewBackgroundColor.length||9===E.viewBackgroundColor.length||\/(hsla|rgba)\\(\/.test(E.viewBackgroundColor))&&W.clearRect(0,0,F,U),W.save(),W.fillStyle=E.viewBackgroundColor,W.fillRect(0,0,F,U),W.restore()):W.clearRect(0,0,F,U);W.save(),W.scale(E.zoom.value,E.zoom.value),z&&h.gridSize&&function(e,t,n,r,o,i){e.save(),e.strokeStyle=\"rgba(0,0,0,0.1)\",e.beginPath();for(var a=n;a<n+o+2*t;a+=t)e.moveTo(a,r-t),e.lineTo(a,r+i+2*t);for(var l=r;l<r+i+2*t;l+=t)e.moveTo(n-t,l),e.lineTo(n+o+2*t,l);e.stroke(),e.restore()}(W,h.gridSize,-Math.ceil(E.zoom.value\/h.gridSize)*h.gridSize+E.scrollX%h.gridSize,-Math.ceil(E.zoom.value\/h.gridSize)*h.gridSize+E.scrollY%h.gridSize,F\/E.zoom.value,U\/E.zoom.value);var K=n.filter((function(e){return B(e,F,U,{zoom:E.zoom,offsetLeft:h.offsetLeft,offsetTop:h.offsetTop,scrollX:E.scrollX,scrollY:E.scrollY})})),Y=void 0;if(K.forEach((function(e){try{var t;(0,u.lw)(e,y,W,E,h),(null===(t=h.editingLinearElement)||void 0===t?void 0:t.elementId)===e.id&&e&&(Y=e),R||N(e,W,h)}catch(e){console.error(e)}})),Y&&I(W,h,E,Y),h.selectionElement)try{(0,u.lw)(h.selectionElement,y,W,E,h)}catch(e){console.error(e)}(0,m.N1)(h)&&h.suggestedBindings.filter((function(e){return null!=e})).forEach((function(e){Z(W,E,e)}));var G,V=(0,c.eD)(n,h);if(1===V.length&&(null===(t=h.editingLinearElement)||void 0===t?void 0:t.elementId)===V[0].id&&I(W,h,E,V[0]),h.selectedLinearElement&&h.selectedLinearElement.hoverPointIndex>=0&&function(e,t,n){var r,o,i=t.selectedLinearElement,a=i.elementId,l=i.hoverPointIndex;if(null===(r=t.editingLinearElement)||void 0===r||null===(o=r.selectedPointsIndices)||void 0===o||!o.includes(l)){var s=f._.getElement(a);if(s){var c=f._.getPointAtIndexGlobalCoordinates(s,l);e.save(),e.translate(n.scrollX,n.scrollY),M(c,e,n),e.restore()}}}(W,h,E),P&&!h.multiElement&&!h.editingLinearElement){var X,q=(0,g.oY)(V,h),J=V.map((function(e){return e.id}));if(1===V.length&&(0,x.bt)(V[0])&&(null===(X=h.selectedLinearElement)||void 0===X?void 0:X.elementId)===V[0].id&&!V[0].locked&&I(W,h,E,V[0]),q){var $,Q=n.reduce((function(e,t){var n=[];if(J.includes(t.id)&&!(0,p.zq)(h,t)&&n.push(H),E.remoteSelectedElementIds[t.id]&&n.push.apply(n,(0,i.Z)(E.remoteSelectedElementIds[t.id].map((function(e){return(0,d.X)(e,h).background})))),n.length){var r=(0,l.qf)(t,!0),a=(0,o.Z)(r,6),s=a[0],c=a[1],u=a[2],f=a[3],m=a[4],g=a[5];e.push({angle:t.angle,elementX1:s,elementY1:c,elementX2:u,elementY2:f,selectionColors:n,dashed:!!E.remoteSelectedElementIds[t.id],cx:m,cy:g})}return e}),[]),ee=function(e){var t=(0,p.Fb)(n,e),r=(0,l.KP)(t),i=(0,o.Z)(r,4),s=i[0],c=i[1],u=i[2],d=i[3];Q.push({angle:0,elementX1:s,elementX2:u,elementY1:c,elementY2:d,selectionColors:[a.black],dashed:!0,cx:s+(u-s)\/2,cy:c+(d-c)\/2})},te=w((0,p.iJ)(h));try{for(te.s();!($=te.n()).done;){ee($.value)}}catch(e){te.e(e)}finally{te.f()}h.editingGroupId&&ee(h.editingGroupId),Q.forEach((function(e){return L(W,E,e)}))}if(W.save(),W.translate(E.scrollX,E.scrollY),1===V.length){W.fillStyle=a.white;var ne=(0,l.PC)(V[0],E.zoom,\"mouse\");!h.viewModeEnabled&&q&&A(W,E,ne,V[0].angle)}else if(V.length>1&&!h.isRotating){var re=2*j\/E.zoom.value;W.fillStyle=a.white;var oe=(0,l.KP)(V),ie=(0,o.Z)(oe,4),ae=ie[0],le=ie[1],se=ie[2],ce=ie[3],ue=W.getLineDash();W.setLineDash([2\/E.zoom.value]);var de=W.lineWidth;W.lineWidth=1\/E.zoom.value,W.strokeStyle=H,_(W,ae-re,le-re,se-ae+2*re,ce-le+2*re,(ae+se)\/2,(le+ce)\/2,0),W.lineWidth=de,W.setLineDash(ue);var fe=(0,l.kK)([ae,le,se,ce,(ae+se)\/2,(le+ce)\/2],0,E.zoom,\"mouse\",l.ox);V.some((function(e){return!e.locked}))&&A(W,E,fe,0)}W.restore()}for(var pe in W.restore(),E.remotePointerViewportCoords){var he=E.remotePointerViewportCoords[pe],me=he.x,ge=he.y;me-=h.offsetLeft,ge-=h.offsetTop;var ve=me<0||me>F-9||ge<0||ge>U-14;me=Math.max(me,0),me=Math.min(me,F-9),ge=Math.max(ge,0),ge=Math.min(ge,U-14);var be=(0,d.X)(pe,h),ye=be.background,xe=be.stroke;W.save(),W.strokeStyle=xe,W.fillStyle=ye;var we=E.remotePointerUserStates[pe];(ve||we===r.AWAY)&&(W.globalAlpha=.48),E.remotePointerButton&&\"down\"===E.remotePointerButton[pe]&&(W.beginPath(),W.arc(me,ge,15,0,2*Math.PI,!1),W.lineWidth=3,W.strokeStyle=\"#ffffff88\",W.stroke(),W.closePath(),W.beginPath(),W.arc(me,ge,15,0,2*Math.PI,!1),W.lineWidth=1,W.strokeStyle=xe,W.stroke(),W.closePath()),W.beginPath(),W.moveTo(me,ge),W.lineTo(me+1,ge+14),W.lineTo(me+4,ge+9),W.lineTo(me+9,ge+10),W.lineTo(me,ge),W.fill(),W.stroke();var ke=E.remotePointerUsernames[pe],Ee=\"\";we===r.AWAY?Ee=S?\"\u26ab\ufe0f\":\" (\".concat(r.AWAY,\")\"):we===r.IDLE&&(Ee=S?\"\ud83d\udca4\":\" (\".concat(r.IDLE,\")\"));var Se=\"\".concat(ke||\"\").concat(Ee?\" \".concat(Ee):\"\");if(!ve&&Se){var je=me+9,_e=ge+14,Oe=W.measureText(Se),Ce=Oe.actualBoundingBoxDescent+Oe.actualBoundingBoxAscent,Ie=je-1,Me=_e-1,Te=Oe.width+8+2,Pe=Ce+8+2;W.roundRect?(W.beginPath(),W.roundRect(Ie,Me,Te,Pe,4\/E.zoom.value),W.fillStyle=ye,W.fill(),W.fillStyle=xe,W.stroke()):(W.fillStyle=xe,W.fillRect(Ie,Me,Te,Pe),W.fillStyle=ye,W.fillRect(je,_e,Te-2,Pe-2)),W.fillStyle=a.white,W.fillText(Se,je+4,_e+4+Oe.actualBoundingBoxAscent)}W.restore(),W.closePath()}return C&&(G=(0,s.tJ)(n,F,U,E),W.save(),W.fillStyle=s.w1,W.strokeStyle=\"rgba(255,255,255,0.8)\",[G.horizontal,G.vertical].forEach((function(e){e&&function(e,t,n,r,o,i){e.beginPath(),e.moveTo(t+i,n),e.lineTo(t+r-i,n),e.quadraticCurveTo(t+r,n,t+r,n+i),e.lineTo(t+r,n+o-i),e.quadraticCurveTo(t+r,n+o,t+r-i,n+o),e.lineTo(t+i,n+o),e.quadraticCurveTo(t,n+o,t,n+o-i),e.lineTo(t,n+i),e.quadraticCurveTo(t,n,t+i,n),e.closePath(),e.fill(),e.stroke()}(W,e.x,e.y,e.width,e.height,s.nn\/2)})),W.restore()),W.restore(),{atLeastOneVisibleElement:K.length>0,scrollBars:G}},P=(0,v.hR)((function(e){var t,n=T(e);null===(t=e.callback)||void 0===t||t.call(e,n)}),{trailing:!0}),D=function(e,t){var n;if(!t){var r=T(e);return null===(n=e.callback)||void 0===n||n.call(e,r),r}P(e)},A=function(e,t,n,r){Object.keys(n).forEach((function(i){var a=n[i];if(void 0!==a){var l=(0,o.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3];e.save(),e.lineWidth=1\/t.zoom.value,t.selectionColor&&(e.strokeStyle=t.selectionColor),\"rotation\"===i?O(e,s+u\/2,c+d\/2,u\/2):e.roundRect?(e.beginPath(),e.roundRect(s,c,u,d,2\/t.zoom.value),e.fill(),e.stroke()):_(e,s,c,u,d,s+u\/2,c+d\/2,r,!0),e.restore()}}))},L=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:2*j,o=n.angle,i=n.elementX1,a=n.elementY1,l=n.elementX2,s=n.elementY2,c=n.selectionColors,u=n.cx,d=n.cy,f=n.dashed,p=l-i,h=s-a,m=r\/t.zoom.value,g=8\/t.zoom.value,v=4\/t.zoom.value;e.save(),e.translate(t.scrollX,t.scrollY),e.lineWidth=1\/t.zoom.value;for(var b=c.length,y=0;y<b;++y)e.strokeStyle=c[y],f&&e.setLineDash([g,v+(g+v)*(b-1)]),e.lineDashOffset=(g+v)*y,_(e,i-m,a-m,p+2*m,h+2*m,u,d,o);e.restore()},Z=function(e,t,n){var r=Array.isArray(n)?R:z;e.save(),e.translate(t.scrollX,t.scrollY),r(e,n),e.restore()},z=function(e,t){var n=(0,l.qf)(t),r=(0,o.Z)(n,4),i=r[0],a=r[1],s=r[2]-i,c=r[3]-a,u=(0,h.fb)(t,s,c);e.strokeStyle=\"rgba(0,0,0,.05)\",e.lineWidth=u-4;var d=2+u\/2;switch(t.type){case\"rectangle\":case\"text\":case\"image\":_(e,i-d,a-d,s+2*d,c+2*d,i+s\/2,a+c\/2,t.angle);break;case\"diamond\":var f=Math.hypot(s,c);!function(e,t,n,r,o,i){e.save(),e.translate(r,o),e.rotate(i),e.beginPath(),e.moveTo(0,n\/2),e.lineTo(t\/2,0),e.lineTo(0,-n\/2),e.lineTo(-t\/2,0),e.closePath(),e.stroke(),e.restore()}(e,s+2*(d*f\/c),c+2*(d*f\/s),i+s\/2,a+c\/2,t.angle);break;case\"ellipse\":!function(e,t,n,r,o,i){e.beginPath(),e.ellipse(r,o,t\/2,n\/2,i,0,2*Math.PI),e.stroke()}(e,s+2*d,c+2*d,i+s\/2,a+c\/2,t.angle)}},R=function(e,t){var n=(0,o.Z)(t,3),r=n[0],i=n[1],a=n[2],l=(0,h.fb)(a,a.width,a.height);e.strokeStyle=\"rgba(0,0,0,0)\",e.fillStyle=\"rgba(0,0,0,.05)\",(\"both\"===i?[0,-1]:\"start\"===i?[0]:[-1]).forEach((function(t){var n=f._.getPointAtIndexGlobalCoordinates(r,t),i=(0,o.Z)(n,2),a=i[0],s=i[1];O(e,a,s,l)}))},N=function(e,t,n){if(e.link&&!n.selectedElementIds[e.id]){var r=(0,l.qf)(e),i=(0,o.Z)(r,4),a=i[0],s=i[1],c=i[2],u=i[3],d=(0,y.sw)([a,s,c,u],e.angle,n),f=(0,o.Z)(d,4),p=f[0],h=f[1],m=f[2],g=f[3],v=p+m\/2,b=h+g\/2;if(t.save(),t.translate(n.scrollX+v,n.scrollY+b),t.rotate(e.angle),E&&E.zoom===n.zoom.value)t.drawImage(E,p-v,h-b,m,g);else{(E=document.createElement(\"canvas\")).zoom=n.zoom.value,E.width=m*window.devicePixelRatio*n.zoom.value,E.height=g*window.devicePixelRatio*n.zoom.value;var x=E.getContext(\"2d\");x.scale(window.devicePixelRatio*n.zoom.value,window.devicePixelRatio*n.zoom.value),x.fillStyle=\"#fff\",x.fillRect(0,0,m,g),x.drawImage(y.rj,0,0,m,g),x.restore(),t.drawImage(E,p-v,h-b,m,g)}t.restore()}},B=function(e,t,n,r){var i=(0,l.Pi)(e),a=(0,o.Z)(i,4),s=a[0],c=a[1],u=a[2],d=a[3],f=(0,v.dE)({clientX:r.offsetLeft,clientY:r.offsetTop},r),p=(0,v.dE)({clientX:r.offsetLeft+t,clientY:r.offsetTop+n},r);return f.x<=u&&f.y<=d&&p.x>=s&&p.y>=c},H=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=o.offsetX,a=void 0===i?0:i,l=o.offsetY,s=void 0===l?0:l,c=o.exportWithDarkMode,d=void 0!==c&&c;n&&e.forEach((function(e,o){if(!e.isDeleted)try{(0,u.Rg)(e,t,n,r,e.x+a,e.y+s,d)}catch(e){console.error(e)}}))}},1564:function(e,t,n){\"use strict\";var r=n(1930),o=n(8821),i=n(5169),a=n(1047),l=function(e){return\"string\"==typeof e},s=function(){function e(){(0,o.Z)(this,e),this.callbacks=new Set,this.nonDeletedElements=[],this.elements=[],this.elementsMap=new Map}return(0,i.Z)(e,[{key:\"getElementsIncludingDeleted\",value:function(){return this.elements}},{key:\"getNonDeletedElements\",value:function(){return this.nonDeletedElements}},{key:\"getElement\",value:function(e){return this.elementsMap.get(e)||null}},{key:\"getNonDeletedElement\",value:function(e){var t=this.getElement(e);return t&&(0,a.qP)(t)?t:null}},{key:\"mapElements\",value:function(e){var t=!1,n=this.elements.map((function(n){var r=e(n);return r!==n&&(t=!0),r}));return t&&this.replaceAllElements(n),t}},{key:\"replaceAllElements\",value:function(t){var n=this;this.elements=t,this.elementsMap.clear(),t.forEach((function(t){n.elementsMap.set(t.id,t),e.mapElementToScene(t,n)})),this.nonDeletedElements=(0,a.Lm)(this.elements),this.informMutation()}},{key:\"informMutation\",value:function(){for(var e=0,t=Array.from(this.callbacks);e<t.length;e++){(0,t[e])()}}},{key:\"addCallback\",value:function(e){var t=this;if(this.callbacks.has(e))throw new Error;return this.callbacks.add(e),function(){if(!t.callbacks.has(e))throw new Error;t.callbacks.delete(e)}}},{key:\"destroy\",value:function(){var t=this;e.sceneMapById.forEach((function(n,r){n===t&&e.sceneMapById.delete(r)})),this.callbacks.clear()}},{key:\"insertElementAtIndex\",value:function(e,t){if(!Number.isFinite(t)||t<0)throw new Error(\"insertElementAtIndex can only be called with index >= 0\");var n=[].concat((0,r.Z)(this.elements.slice(0,t)),[e],(0,r.Z)(this.elements.slice(t)));this.replaceAllElements(n)}},{key:\"getElementIndex\",value:function(e){return this.elements.findIndex((function(t){return t.id===e}))}}],[{key:\"mapElementToScene\",value:function(e,t){l(e)?this.sceneMapById.set(e,t):(this.sceneMapByElement.set(e,t),this.sceneMapById.set(e.id,t))}},{key:\"getScene\",value:function(e){return l(e)?this.sceneMapById.get(e)||null:this.sceneMapByElement.get(e)||null}}]),e}();s.sceneMapByElement=new WeakMap,s.sceneMapById=new Map,t.Z=s},8120:function(e,t,n){\"use strict\";n.d(t,{$b:function(){return r},CJ:function(){return d},M9:function(){return a},PD:function(){return o},QG:function(){return u},Un:function(){return c},Zd:function(){return i},bZ:function(){return s},sh:function(){return l}});var r=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"line\"===e||\"freedraw\"===e},o=function(e){return\"image\"!==e},i=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"freedraw\"===e||\"arrow\"===e||\"line\"===e},a=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"arrow\"===e||\"line\"===e},l=function(e){return\"rectangle\"===e||\"arrow\"===e||\"line\"===e||\"diamond\"===e},s=function(e){return\"text\"===e},c=function(e){return\"arrow\"===e},u=function(e,t){for(var n=null,r=e.length-1;r>=0;--r){var o=e[r];if(!o.isDeleted&&t(o)){n=o;break}}return n},d=function(e,t){return e.filter((function(e){return!e.isDeleted&&t(e)}))}},4162:function(e,t,n){\"use strict\";n.d(t,{$D:function(){return v},Cg:function(){return y},NL:function(){return g},oj:function(){return m}});var r=n(2577),o=n(8950),i=n(2975),a=n.n(i),l=n(8234),s=n(8925),c=n(3547),u=n(6340),d=n(2335),f=n(8897),p=n(5523),h=n(5637),m=\"\\x3c!-- svg-source:excalidraw --\\x3e\",g=function(){var e=(0,o.Z)(a().mark((function e(t,n,o,i){var s,u,p,m,g,v,y,x,w,k,E,S,j,_,O,C,I,M,T=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return s=i.exportBackground,u=i.exportPadding,p=void 0===u?d.qy:u,m=i.viewBackgroundColor,g=T.length>4&&void 0!==T[4]?T[4]:function(e,t){var r=document.createElement(\"canvas\");return r.width=e*n.exportScale,r.height=t*n.exportScale,{canvas:r,scale:n.exportScale}},v=b(t,p),y=(0,r.Z)(v,4),x=y[0],w=y[1],k=y[2],E=y[3],S=g(k,E),j=S.canvas,_=S.scale,O=void 0===_?1:_,C=(0,f.im)(),e.next=7,(0,h.Xx)({imageCache:new Map,fileIds:(0,h.oA)(t).map((function(e){return e.fileId})),files:o});case 7:return I=e.sent,M=I.imageCache,(0,c.Eu)({elements:t,appState:n,scale:O,rc:l.Z.canvas(j),canvas:j,renderConfig:{viewBackgroundColor:s?m:null,scrollX:-x+p,scrollY:-w+p,zoom:C.zoom,remotePointerViewportCoords:{},remoteSelectedElementIds:{},shouldCacheIgnoreZoom:!1,remotePointerUsernames:{},remotePointerUserStates:{},theme:n.exportWithDarkMode?\"dark\":\"light\",imageCache:M,renderScrollbars:!1,renderSelection:!1,renderGrid:!1,isExporting:!0}}),e.abrupt(\"return\",j);case 11:case\"end\":return e.stop()}}),e)})));return function(t,n,r,o){return e.apply(this,arguments)}}(),v=function(){var e=(0,o.Z)(a().mark((function e(t,o,i,s){var u,f,h,g,v,y,x,w,k,E,S,j,_,O,C,I,M,T,P;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=o.exportPadding,f=void 0===u?d.qy:u,h=o.viewBackgroundColor,g=o.exportScale,v=void 0===g?1:g,y=o.exportEmbedScene,x=\"\",!y){e.next=14;break}return e.prev=3,e.next=6,Promise.resolve().then(n.bind(n,673));case 6:return e.next=8,e.sent.encodeSvgMetadata({text:null!=s&&s.serializeAsJSON?null==s||null===(w=s.serializeAsJSON)||void 0===w?void 0:w.call(s):(0,p.I_)(t,o,i||{},\"local\")});case 8:x=e.sent,e.next=14;break;case 11:e.prev=11,e.t0=e.catch(3),console.error(e.t0);case 14:return k=b(t,f),E=(0,r.Z)(k,4),S=E[0],j=E[1],_=E[2],O=E[3],(C=document.createElementNS(d.hR,\"svg\")).setAttribute(\"version\",\"1.1\"),C.setAttribute(\"xmlns\",d.hR),C.setAttribute(\"viewBox\",\"0 0 \".concat(_,\" \").concat(O)),C.setAttribute(\"width\",\"\".concat(_*v)),C.setAttribute(\"height\",\"\".concat(O*v)),o.exportWithDarkMode&&C.setAttribute(\"filter\",d.ZF),I=\"https:\/\/excalidraw.com\/\",I=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(\"@excalidraw\/excalidraw\",\"@\").concat(\"0.15.3\"),null!==(M=I)&&void 0!==M&&M.startsWith(\"\/\")&&(I=I.replace(\"\/\",\"\".concat(window.location.origin,\"\/\"))),I=\"\".concat(I,\"\/dist\/excalidraw-assets\/\"),C.innerHTML=\"\\n  \".concat(m,\"\\n  \").concat(x,'\\n  <defs>\\n    <style class=\"style-fonts\">\\n      @font-face {\\n        font-family: \"Virgil\";\\n        src: url(\"').concat(I,'Virgil.woff2\");\\n      }\\n      @font-face {\\n        font-family: \"Cascadia\";\\n        src: url(\"').concat(I,'Cascadia.woff2\");\\n      }\\n    <\/style>\\n  <\/defs>\\n  '),o.exportBackground&&h&&((T=C.ownerDocument.createElementNS(d.hR,\"rect\")).setAttribute(\"x\",\"0\"),T.setAttribute(\"y\",\"0\"),T.setAttribute(\"width\",\"\".concat(_)),T.setAttribute(\"height\",\"\".concat(O)),T.setAttribute(\"fill\",h),C.appendChild(T)),P=l.Z.svg(C),(0,c.M_)(t,P,C,i||{},{offsetX:-S+f,offsetY:-j+f,exportWithDarkMode:o.exportWithDarkMode}),e.abrupt(\"return\",C);case 29:case\"end\":return e.stop()}}),e,null,[[3,11]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),b=function(e,t){var n=(0,s.KP)(e),o=(0,r.Z)(n,4),i=o[0],a=o[1],l=o[2],c=o[3];return[i,a,(0,u.TE)(i,l)+2*t,(0,u.TE)(a,c)+t+t]},y=function(e,t,n){var o=b(e,t).map((function(e){return Math.trunc(e*n)})),i=(0,r.Z)(o,4);return[i[2],i[3]]}},75:function(e,t,n){\"use strict\";n.d(t,{$b:function(){return a.$b},CJ:function(){return a.CJ},M9:function(){return a.M9},N:function(){return o.N},PR:function(){return o.PR},QG:function(){return a.QG},Un:function(){return a.Un},W:function(){return i.W},Yp:function(){return o.Yp},Zd:function(){return a.Zd},Zs:function(){return o.Zs},_4:function(){return r._4},bZ:function(){return a.bZ},eD:function(){return o.eD},j:function(){return l.j},sh:function(){return a.sh}});var r=n(756),o=n(1868),i=n(2264),a=n(8120),l=n(746)},2264:function(e,t,n){\"use strict\";n.d(t,{W:function(){return l},s:function(){return a}});var r=n(2577),o=n(1047),i=n(6340),a=function(e){var t=e.scenePoint,n=e.viewportDimensions,r=e.zoom;return{scrollX:n.width\/2\/r.value-t.x,scrollY:n.height\/2\/r.value-t.y}},l=function(e,t,n){if(!(e=(0,o.n_)(e)).length)return{scrollX:0,scrollY:0};var l=(0,o.KP)(e),s=(0,r.Z)(l,4),c=s[0],u=s[1],d=s[2],f=s[3];if(function(e,t,n){var o=(0,r.Z)(n,4),a=o[0],l=o[1],s=o[2],c=o[3],u=(0,i._i)({sceneX:a,sceneY:l},e),d=u.x,f=u.y,p=(0,i._i)({sceneX:s,sceneY:c},e),h=p.x,m=p.y;return h-d>e.width||m-f>e.height}(t,0,[c,u,d,f])){var p=(0,o.os)(e,(0,i.dE)({clientX:t.scrollX,clientY:t.scrollY},t)),h=(0,r.Z)(p,4);c=h[0],u=h[1],d=h[2],f=h[3]}return a({scenePoint:{x:(c+d)\/2,y:(u+f)\/2},viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})}},756:function(e,t,n){\"use strict\";n.d(t,{WM:function(){return l},_4:function(){return d},nn:function(){return s},tJ:function(){return u},w1:function(){return c}});var r=n(2577),o=n(1047),i=n(6340),a=n(8211),l=4,s=6,c=\"rgba(0,0,0,0.3)\",u=function(e,t,n,c){var u=c.scrollX,d=c.scrollY,f=c.zoom;if(0===e.length)return{horizontal:null,vertical:null};var p=(0,o.KP)(e),h=(0,r.Z)(p,4),m=h[0],g=h[1],v=h[2],b=h[3],y=t\/f.value,x=n\/f.value,w=t-y,k=n-x,E={top:parseInt((0,i.IH)(\"sat\")),bottom:parseInt((0,i.IH)(\"sab\")),left:parseInt((0,i.IH)(\"sal\")),right:parseInt((0,i.IH)(\"sar\"))},S=(0,a.G3)().rtl,j=w\/2-u+E.left,_=k\/2-d+E.top,O=j+y-E.right,C=_+x-E.bottom,I=Math.min(m,j),M=Math.min(g,_),T=Math.max(v,O),P=Math.max(b,C);return{horizontal:j===I&&O===T?null:{x:Math.max(E.left,l)+(j-I)\/(T-I)*t,y:n-s-Math.max(l,E.bottom),width:(O-j)\/(T-I)*t-Math.max(2*l,E.left+E.right),height:s},vertical:_===M&&C===P?null:{x:S?Math.max(E.left,l):t-s-Math.max(E.right,l),y:(_-M)\/(P-M)*n+Math.max(E.top,l),width:s,height:(C-_)\/(P-M)*n-Math.max(2*l,E.top+E.bottom)}}},d=function(e,t,n){var o=[e.horizontal,e.vertical].map((function(e){return null!=e&&e.x<=t&&t<=e.x+e.width&&e.y<=n&&n<=e.y+e.height})),i=(0,r.Z)(o,2),a=i[0],l=i[1];return{isOverEither:a||l,isOverHorizontal:a,isOverVertical:l}}},1868:function(e,t,n){\"use strict\";n.d(t,{N:function(){return l},PR:function(){return s},Yp:function(){return a},Zs:function(){return u},eD:function(){return c}});var r=n(2577),o=n(1047),i=n(1974),a=function(e,t){var n=(0,o.qf)(t),a=(0,r.Z)(n,4),l=a[0],s=a[1],c=a[2],u=a[3];return e.filter((function(e){var t=(0,o.Pi)(e),n=(0,r.Z)(t,4),a=n[0],d=n[1],f=n[2],p=n[3];return!1===e.locked&&\"selection\"!==e.type&&!(0,i.Xh)(e)&&l<=a&&s<=d&&c>=f&&u>=p}))},l=function(e,t){return e.some((function(e){return t.selectedElementIds[e.id]}))},s=function(e,t,n){var r=Array.from(new Set(c(e,t).map((function(e){return n(e)}))));return 1===r.length?r[0]:null},c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return e.filter((function(e){return t.selectedElementIds[e.id]||n&&(0,i.Xh)(e)&&t.selectedElementIds[null==e?void 0:e.containerId]?e:null}))},u=function(e,t){return t.editingElement?[t.editingElement]:c(e,t,!0)}},746:function(e,t,n){\"use strict\";n.d(t,{E:function(){return i},j:function(){return o}});var r=n(2335),o=function(e){return Math.max(r.Zj,Math.min(e,30))},i=function(e,t){var n=e.viewportX,r=e.viewportY,o=e.nextZoom,i=n-t.offsetLeft,a=r-t.offsetTop,l=t.zoom.value;return{scrollX:t.scrollX+(i-i\/l)+-(i-i\/o),scrollY:t.scrollY+(a-a\/l)+-(a-a\/o),zoom:{value:o}}}},6340:function(e,t,n){\"use strict\";n.d(t,{$9:function(){return J},$g:function(){return x},$h:function(){return se},AK:function(){return U},B4:function(){return O},C3:function(){return ne},Ds:function(){return k},FG:function(){return K},Fc:function(){return m},G3:function(){return te},I4:function(){return oe},IH:function(){return H},Ip:function(){return Q},KJ:function(){return P},Mj:function(){return fe},OF:function(){return D},Om:function(){return M},Oo:function(){return g},PI:function(){return X},Pr:function(){return z},Q5:function(){return $},Qm:function(){return V},TE:function(){return I},Uk:function(){return A},_Z:function(){return b},_i:function(){return B},ag:function(){return ae},cx:function(){return Y},dE:function(){return N},dZ:function(){return F},h2:function(){return ie},hR:function(){return E},mO:function(){return w},qr:function(){return G},qz:function(){return ee},rB:function(){return L},s:function(){return y},tH:function(){return q},uY:function(){return R},v4:function(){return le},w8:function(){return de},wO:function(){return v},wo:function(){return Z},xn:function(){return re},xp:function(){return ue},y8:function(){return ce},yo:function(){return C},z8:function(){return T}});var r=n(6655),o=n(7169),i=n(1930),a=n(2577),l=n(5284),s=n(56),c=n(2335),u=n(5156),d=n(8897);function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=null,m=function(){if(h)return h;var e=new Date,t=e.getFullYear(),n=\"\".concat(e.getMonth()+1).padStart(2,\"0\"),r=\"\".concat(e.getDate()).padStart(2,\"0\"),o=\"\".concat(e.getHours()).padStart(2,\"0\"),i=\"\".concat(e.getMinutes()).padStart(2,\"0\");return\"\".concat(t,\"-\").concat(n,\"-\").concat(r,\"-\").concat(o).concat(i)},g=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},v=function(e){return e instanceof HTMLElement&&e.className.includes(\"ToolIcon\")},b=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement||e instanceof HTMLSelectElement},y=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLTextAreaElement||e instanceof HTMLInputElement&&(\"text\"===e.type||\"number\"===e.type)},x=function(e){for(var t=e.fontFamily,n=0,r=Object.entries(c.ut);n<r.length;n++){var o=(0,a.Z)(r[n],2),i=o[0];if(o[1]===t)return\"\".concat(i,\", \").concat(c._D)}return c._D},w=function(e){var t=e.fontSize,n=e.fontFamily;return\"\".concat(t,\"px \").concat(x({fontFamily:n}))},k=function(e,t){var n=0,r=null,o=function(){for(var o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];r=i,clearTimeout(n),n=window.setTimeout((function(){r=null,e.apply(void 0,i)}),t)};return o.flush=function(){if(clearTimeout(n),r){var t=r;r=null,e.apply(void 0,(0,i.Z)(t))}},o.cancel=function(){r=null,clearTimeout(n)},o},E=function(e,t){var n=null,r=null,o=null,a=function t(a){n=window.requestAnimationFrame((function(){n=null,e.apply(void 0,(0,i.Z)(a)),r=null,o&&(r=o,o=null,t(r))}))},l=function(){for(var e=arguments.length,i=new Array(e),l=0;l<e;l++)i[l]=arguments[l];r=i,null===n?a(r):null!=t&&t.trailing&&(o=i)};return l.flush=function(){null!==n&&(cancelAnimationFrame(n),n=null),r&&(e.apply(void 0,(0,i.Z)(o||r)),r=o=null)},l.cancel=function(){r=o=null,null!==n&&(cancelAnimationFrame(n),n=null)},l};function S(e){return 1-Math.pow(1-e,4)}var j,_,O=function(e,t,n,r){var o,a=!1,l=0,s=(null==r?void 0:r.duration)||250,c=(null==r?void 0:r.easeFn)||S;return l=window.requestAnimationFrame((function r(u){if(!a){void 0===o&&(o=u);var d=u-o;if(d<s){var f=c(d\/s),p=e.map((function(e,n){return(t[n]-e)*f+e}));n.apply(void 0,(0,i.Z)(p)),l=window.requestAnimationFrame(r)}else n.apply(void 0,(0,i.Z)(t))}})),function(){a=!0,window.cancelAnimationFrame(l)}},C=function(e,t){if(!e.length||t<1)return[];for(var n=0,r=0,o=Array(Math.ceil(e.length\/t));n<e.length;)o[r++]=e.slice(n,n+=t);return o},I=function(e,t){return Math.abs(e-t)},M=function(e,t){return\"custom\"===t.type?p(p({},e.activeTool),{},{type:\"custom\",customType:t.customType}):p(p({},e.activeTool),{},{lastActiveTool:void 0===t.lastActiveToolBeforeEraser?e.activeTool.lastActiveTool:t.lastActiveToolBeforeEraser,type:t.type,customType:null})},T=function(e){e&&(e.style.cursor=\"\")},P=function(e,t){e&&(e.style.cursor=t)},D=function(e,t){j&&j.theme===t||function(){var e=t===c.C6.DARK;(j=document.createElement(\"canvas\")).theme=t,j.height=20,j.width=20;var n=j.getContext(\"2d\");n.lineWidth=1,n.beginPath(),n.arc(j.width\/2,j.height\/2,5,0,2*Math.PI),n.fillStyle=e?l.black:l.white,n.fill(),n.strokeStyle=e?l.white:l.black,n.stroke(),_=j.toDataURL(c.LO.svg)}(),P(e,\"url(\".concat(_,\") \").concat(10,\" \").concat(10,\", auto\"))},A=function(e,t){e&&(\"selection\"===t.activeTool.type?T(e):(0,d.l$)(t)?e.style.cursor=c.oc.GRAB:(0,d.EN)(t)?D(e,t.theme):[\"image\",\"custom\"].includes(t.activeTool.type)||(e.style.cursor=c.oc.CROSSHAIR))},L=function(){var e;return\"HTML\"===(null===(e=document.fullscreenElement)||void 0===e?void 0:e.nodeName)},Z=function(){return document.documentElement.requestFullscreen()},z=function(){return document.exitFullscreen()},R=function(e){return e=e.replace(\/\\bAlt\\b\/i,\"Alt\").replace(\/\\bShift\\b\/i,\"Shift\").replace(\/\\b(Enter|Return)\\b\/i,\"Enter\"),c.Um?e.replace(\/\\bCtrlOrCmd\\b\/gi,\"Cmd\").replace(\/\\bAlt\\b\/i,\"Option\"):e.replace(\/\\bCtrlOrCmd\\b\/gi,\"Ctrl\")},N=function(e,t){var n=e.clientX,r=e.clientY,o=t.zoom,i=t.offsetLeft,a=t.offsetTop,l=t.scrollX,s=t.scrollY;return{x:(n-i)\/o.value-l,y:(r-a)\/o.value-s}},B=function(e,t){var n=e.sceneX,r=e.sceneY,o=t.zoom,i=t.offsetLeft,a=t.offsetTop,l=t.scrollX,s=t.scrollY;return{x:(n+l)*o.value+i,y:(r+s)*o.value+a}},H=function(e){return getComputedStyle(document.documentElement).getPropertyValue(\"--\".concat(e))},W=new RegExp(\"^[^\".concat(\"A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u2c00-\ufb1c\ufdfe-\ufe6f\ufefd-\uffff\",\"]*[\").concat(\"\u0591-\u07ff\ufb1d-\ufdfd\ufe70-\ufefc\",\"]\")),F=function(e){return W.test(e)},U=function(e){var t=(0,a.Z)(e,2);return{x:t[0],y:t[1]}},K=function(e){if(\"AbortError\"!==(null==e?void 0:e.name))throw e;console.warn(e)},Y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length,Math.max(n,0)))-1;++r<e.length;)if(t(e[r],r,e))return r;return-1},G=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length-1;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length-1,Math.max(n,0)))+1;--r>-1;)if(t(e[r],r,e))return r;return-1},V=function(e){var t=5===e.length&&\"0\"===e.substr(4,1),n=9===e.length&&\"00\"===e.substr(7,2);return t||n||e===s.Z.elementBackground[0]},X=function(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n},q=function(e){return function(t){(0,u.unstable_batchedUpdates)(e,t)}},J=function(e){return E((function(t){(0,u.unstable_batchedUpdates)(e,t)}))},$=function(){var e=document.createElement(\"canvas\").getContext(\"2d\");if(!e)return!1;return e.fillStyle=\"#f00\",e.textBaseline=\"top\",e.font=\"32px Arial\",e.fillText(\"\ud83d\ude00\",0,0),0!==e.getImageData(12,12,1,1).data[0]},Q=function(e){for(var t=e.parentElement;t;){if(t===document.body)return document;var n=window.getComputedStyle(t).overflowY;if(t.scrollHeight>t.clientHeight&&(\"auto\"===n||\"scroll\"===n||\"overlay\"===n))return t;t=t.parentElement}return document},ee=function(e){for(var t=e.parentElement;t;){if(t.tabIndex>-1)return void t.focus();t=t.parentElement}},te=function(e){return Array.from(e).map((function(e){return\"0\".concat(e.toString(16)).slice(-2)})).join(\"\")},ne=function(){return ie()?1:Date.now()},re=function(e){return e.reduce((function(e,t){return e.set(\"string\"==typeof t?t:t.id,t),e}),new Map)},oe=function(e){return e.reduce((function(e,t,n){return e.set(t.id,[t,n]),e}),new Map)},ie=function(){return!1},ae=function(e,t){return new CustomEvent(e,{detail:{nativeEvent:t},cancelable:!0})},le=function(e,t){var n=!1;for(var o in t){var i=t[o];if(void 0!==i){if(e[o]===i&&(\"object\"!==(0,r.Z)(i)||null===i))continue;n=!0}}return n?p(p({},e),t):e},se=function(){try{return window.self===window.top?\"top\":\"iframe\"}catch(e){return\"iframe\"}},ce=function(e){return!!e&&\"object\"===(0,r.Z)(e)&&\"then\"in e&&\"catch\"in e&&\"finally\"in e},ue=function(e){var t=null==e?void 0:e.querySelectorAll(\"button, a, input, select, textarea, div[tabindex], label[tabindex]\");return t?Array.from(t).filter((function(e){return e.tabIndex>-1&&!e.disabled})):[]},de=function(e,t){var n=Object.keys(e),r=Object.keys(e);return n.length===r.length&&n.every((function(n){return e[n]===t[n]}))},fe=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.checkForDefaultPrevented,o=void 0===r||r;return function(n){if(null==e||e(n),!o||!n.defaultPrevented)return null==t?void 0:t(n)}}},9669:function(e){\"use strict\";e.exports=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\"},7984:function(e){\"use strict\";e.exports='data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>'},1639:function(e){\"use strict\";e.exports='data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path fill=\"%23ced4da\" d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>'},9729:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-Bold.woff2\"},1273:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-Medium.woff2\"},8303:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-Regular.woff2\"},9577:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-SemiBold.woff2\"},3147:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Cascadia.woff2\"},3940:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Virgil.woff2\"},9787:function(t){\"use strict\";t.exports=e},5156:function(e){\"use strict\";e.exports=t},9649:function(e,t,n){var r=n(8114).default;function o(){\"use strict\";e.exports=o=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},n=Object.prototype,i=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},l=\"function\"==typeof Symbol?Symbol:{},s=l.iterator||\"@@iterator\",c=l.asyncIterator||\"@@asyncIterator\",u=l.toStringTag||\"@@toStringTag\";function d(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{d({},\"\")}catch(e){d=function(e,t,n){return e[t]=n}}function f(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),l=new C(r||[]);return a(i,\"_invoke\",{value:S(e,n,l)}),i}function p(e,t,n){try{return{type:\"normal\",arg:e.call(t,n)}}catch(e){return{type:\"throw\",arg:e}}}t.wrap=f;var h={};function m(){}function g(){}function v(){}var b={};d(b,s,(function(){return this}));var y=Object.getPrototypeOf,x=y&&y(y(I([])));x&&x!==n&&i.call(x,s)&&(b=x);var w=v.prototype=m.prototype=Object.create(b);function k(e){[\"next\",\"throw\",\"return\"].forEach((function(t){d(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,l,s){var c=p(e[o],e,a);if(\"throw\"!==c.type){var u=c.arg,d=u.value;return d&&\"object\"==r(d)&&i.call(d,\"__await\")?t.resolve(d.__await).then((function(e){n(\"next\",e,l,s)}),(function(e){n(\"throw\",e,l,s)})):t.resolve(d).then((function(e){u.value=e,l(u)}),(function(e){return n(\"throw\",e,l,s)}))}s(c.arg)}var o;a(this,\"_invoke\",{value:function(e,r){function i(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(i,i):i()}})}function S(e,t,n){var r=\"suspendedStart\";return function(o,i){if(\"executing\"===r)throw new Error(\"Generator is already running\");if(\"completed\"===r){if(\"throw\"===o)throw i;return M()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=j(a,n);if(l){if(l===h)continue;return l}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(\"suspendedStart\"===r)throw r=\"completed\",n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);r=\"executing\";var s=p(e,t,n);if(\"normal\"===s.type){if(r=n.done?\"completed\":\"suspendedYield\",s.arg===h)continue;return{value:s.arg,done:n.done}}\"throw\"===s.type&&(r=\"completed\",n.method=\"throw\",n.arg=s.arg)}}}function j(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,\"throw\"===t.method){if(e.iterator.return&&(t.method=\"return\",t.arg=void 0,j(e,t),\"throw\"===t.method))return h;t.method=\"throw\",t.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return h}var r=p(n,e.iterator,t.arg);if(\"throw\"===r.type)return t.method=\"throw\",t.arg=r.arg,t.delegate=null,h;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,\"return\"!==t.method&&(t.method=\"next\",t.arg=void 0),t.delegate=null,h):o:(t.method=\"throw\",t.arg=new TypeError(\"iterator result is not an object\"),t.delegate=null,h)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(_,this),this.reset(!0)}function I(e){if(e){var t=e[s];if(t)return t.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,r=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:M}}function M(){return{value:void 0,done:!0}}return g.prototype=v,a(w,\"constructor\",{value:v,configurable:!0}),a(v,\"constructor\",{value:g,configurable:!0}),g.displayName=d(v,u,\"GeneratorFunction\"),t.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===g||\"GeneratorFunction\"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,d(e,u,\"GeneratorFunction\")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},k(E.prototype),d(E.prototype,c,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new E(f(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},k(w),d(w,u,\"Generator\"),d(w,s,(function(){return this})),d(w,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=I,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(O),!e)for(var t in this)\"t\"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return a.type=\"throw\",a.arg=e,t.next=n,r&&(t.method=\"next\",t.arg=void 0),!!r}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],a=o.completion;if(\"root\"===o.tryLoc)return n(\"end\");if(o.tryLoc<=this.prev){var l=i.call(o,\"catchLoc\"),s=i.call(o,\"finallyLoc\");if(l&&s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!s)throw new Error(\"try statement without catch or finally\");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,\"finallyLoc\")&&this.prev<r.finallyLoc){var o=r;break}}o&&(\"break\"===e||\"continue\"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method=\"next\",this.next=o.finallyLoc,h):this.complete(a)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if(\"throw\"===r.type){var o=r.arg;O(n)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,t,n){return this.delegate={iterator:I(e),resultName:t,nextLoc:n},\"next\"===this.method&&(this.arg=void 0),h}},t}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},8114:function(e){function t(n){return e.exports=t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(n)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},2975:function(e,t,n){var r=n(9649)();e.exports=r;try{regeneratorRuntime=r}catch(e){\"object\"==typeof globalThis?globalThis.regeneratorRuntime=r:Function(\"r\",\"regeneratorRuntime = r\")(r)}},7017:function(e,t,n){\"use strict\";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,{Z:function(){return r}})},3173:function(e,t,n){\"use strict\";function r(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}n.d(t,{Z:function(){return r}})},8950:function(e,t,n){\"use strict\";function r(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function l(e){r(a,o,i,l,s,\"next\",e)}function s(e){r(a,o,i,l,s,\"throw\",e)}l(void 0)}))}}n.d(t,{Z:function(){return o}})},8821:function(e,t,n){\"use strict\";function r(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}n.d(t,{Z:function(){return r}})},5169:function(e,t,n){\"use strict\";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),Object.defineProperty(e,\"prototype\",{writable:!1}),e}n.d(t,{Z:function(){return o}})},7169:function(e,t,n){\"use strict\";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:function(){return r}})},2312:function(e,t,n){\"use strict\";function r(e){return r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},r(e)}n.d(t,{Z:function(){return r}})},2248:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return o}});var r=n(5901);function o(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,\"prototype\",{writable:!1}),t&&(0,r.Z)(e,t)}},2726:function(e,t,n){\"use strict\";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,{Z:function(){return r}})},7245:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return i}});var r=n(6655),o=n(3173);function i(e,t){if(t&&(\"object\"===(0,r.Z)(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return(0,o.Z)(e)}},5901:function(e,t,n){\"use strict\";function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}n.d(t,{Z:function(){return r}})},2577:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return o}});var r=n(9139);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||(0,r.Z)(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}},1930:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return i}});var r=n(7017);var o=n(9139);function i(e){return function(e){if(Array.isArray(e))return(0,r.Z)(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e[\"@@iterator\"])return Array.from(e)}(e)||(0,o.Z)(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}},6655:function(e,t,n){\"use strict\";function r(e){return r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},r(e)}n.d(t,{Z:function(){return r}})},9139:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return o}});var r=n(7017);function o(e,t){if(e){if(\"string\"==typeof e)return(0,r.Z)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)?(0,r.Z)(e,t):void 0}}},5605:function(e,t,n){\"use strict\";n.d(t,{x0:function(){return r}});let r=(e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+=(t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?\"-\":\"_\"),\"\")},5284:function(e){\"use strict\";e.exports=JSON.parse('{\"white\":\"#ffffff\",\"black\":\"#000000\",\"gray\":[\"#f8f9fa\",\"#f1f3f5\",\"#e9ecef\",\"#dee2e6\",\"#ced4da\",\"#adb5bd\",\"#868e96\",\"#495057\",\"#343a40\",\"#212529\"],\"red\":[\"#fff5f5\",\"#ffe3e3\",\"#ffc9c9\",\"#ffa8a8\",\"#ff8787\",\"#ff6b6b\",\"#fa5252\",\"#f03e3e\",\"#e03131\",\"#c92a2a\"],\"pink\":[\"#fff0f6\",\"#ffdeeb\",\"#fcc2d7\",\"#faa2c1\",\"#f783ac\",\"#f06595\",\"#e64980\",\"#d6336c\",\"#c2255c\",\"#a61e4d\"],\"grape\":[\"#f8f0fc\",\"#f3d9fa\",\"#eebefa\",\"#e599f7\",\"#da77f2\",\"#cc5de8\",\"#be4bdb\",\"#ae3ec9\",\"#9c36b5\",\"#862e9c\"],\"violet\":[\"#f3f0ff\",\"#e5dbff\",\"#d0bfff\",\"#b197fc\",\"#9775fa\",\"#845ef7\",\"#7950f2\",\"#7048e8\",\"#6741d9\",\"#5f3dc4\"],\"indigo\":[\"#edf2ff\",\"#dbe4ff\",\"#bac8ff\",\"#91a7ff\",\"#748ffc\",\"#5c7cfa\",\"#4c6ef5\",\"#4263eb\",\"#3b5bdb\",\"#364fc7\"],\"blue\":[\"#e7f5ff\",\"#d0ebff\",\"#a5d8ff\",\"#74c0fc\",\"#4dabf7\",\"#339af0\",\"#228be6\",\"#1c7ed6\",\"#1971c2\",\"#1864ab\"],\"cyan\":[\"#e3fafc\",\"#c5f6fa\",\"#99e9f2\",\"#66d9e8\",\"#3bc9db\",\"#22b8cf\",\"#15aabf\",\"#1098ad\",\"#0c8599\",\"#0b7285\"],\"teal\":[\"#e6fcf5\",\"#c3fae8\",\"#96f2d7\",\"#63e6be\",\"#38d9a9\",\"#20c997\",\"#12b886\",\"#0ca678\",\"#099268\",\"#087f5b\"],\"green\":[\"#ebfbee\",\"#d3f9d8\",\"#b2f2bb\",\"#8ce99a\",\"#69db7c\",\"#51cf66\",\"#40c057\",\"#37b24d\",\"#2f9e44\",\"#2b8a3e\"],\"lime\":[\"#f4fce3\",\"#e9fac8\",\"#d8f5a2\",\"#c0eb75\",\"#a9e34b\",\"#94d82d\",\"#82c91e\",\"#74b816\",\"#66a80f\",\"#5c940d\"],\"yellow\":[\"#fff9db\",\"#fff3bf\",\"#ffec99\",\"#ffe066\",\"#ffd43b\",\"#fcc419\",\"#fab005\",\"#f59f00\",\"#f08c00\",\"#e67700\"],\"orange\":[\"#fff4e6\",\"#ffe8cc\",\"#ffd8a8\",\"#ffc078\",\"#ffa94d\",\"#ff922b\",\"#fd7e14\",\"#f76707\",\"#e8590c\",\"#d9480f\"]}')},1463:function(e){\"use strict\";e.exports=JSON.parse('{\"labels\":{\"paste\":\"Paste\",\"pasteAsPlaintext\":\"Paste as plaintext\",\"pasteCharts\":\"Paste charts\",\"selectAll\":\"Select all\",\"multiSelect\":\"Add element to selection\",\"moveCanvas\":\"Move canvas\",\"cut\":\"Cut\",\"copy\":\"Copy\",\"copyAsPng\":\"Copy to clipboard as PNG\",\"copyAsSvg\":\"Copy to clipboard as SVG\",\"copyText\":\"Copy to clipboard as text\",\"bringForward\":\"Bring forward\",\"sendToBack\":\"Send to back\",\"bringToFront\":\"Bring to front\",\"sendBackward\":\"Send backward\",\"delete\":\"Delete\",\"copyStyles\":\"Copy styles\",\"pasteStyles\":\"Paste styles\",\"stroke\":\"Stroke\",\"background\":\"Background\",\"fill\":\"Fill\",\"strokeWidth\":\"Stroke width\",\"strokeStyle\":\"Stroke style\",\"strokeStyle_solid\":\"Solid\",\"strokeStyle_dashed\":\"Dashed\",\"strokeStyle_dotted\":\"Dotted\",\"sloppiness\":\"Sloppiness\",\"opacity\":\"Opacity\",\"textAlign\":\"Text align\",\"edges\":\"Edges\",\"sharp\":\"Sharp\",\"round\":\"Round\",\"arrowheads\":\"Arrowheads\",\"arrowhead_none\":\"None\",\"arrowhead_arrow\":\"Arrow\",\"arrowhead_bar\":\"Bar\",\"arrowhead_dot\":\"Dot\",\"arrowhead_triangle\":\"Triangle\",\"fontSize\":\"Font size\",\"fontFamily\":\"Font family\",\"onlySelected\":\"Only selected\",\"withBackground\":\"Background\",\"exportEmbedScene\":\"Embed scene\",\"exportEmbedScene_details\":\"Scene data will be saved into the exported PNG\/SVG file so that the scene can be restored from it.\\\\nWill increase exported file size.\",\"addWatermark\":\"Add \\\\\"Made with Excalidraw\\\\\"\",\"handDrawn\":\"Hand-drawn\",\"normal\":\"Normal\",\"code\":\"Code\",\"small\":\"Small\",\"medium\":\"Medium\",\"large\":\"Large\",\"veryLarge\":\"Very large\",\"solid\":\"Solid\",\"hachure\":\"Hachure\",\"zigzag\":\"Zigzag\",\"crossHatch\":\"Cross-hatch\",\"thin\":\"Thin\",\"bold\":\"Bold\",\"left\":\"Left\",\"center\":\"Center\",\"right\":\"Right\",\"extraBold\":\"Extra bold\",\"architect\":\"Architect\",\"artist\":\"Artist\",\"cartoonist\":\"Cartoonist\",\"fileTitle\":\"File name\",\"colorPicker\":\"Color picker\",\"canvasColors\":\"Used on canvas\",\"canvasBackground\":\"Canvas background\",\"drawingCanvas\":\"Drawing canvas\",\"layers\":\"Layers\",\"actions\":\"Actions\",\"language\":\"Language\",\"liveCollaboration\":\"Live collaboration...\",\"duplicateSelection\":\"Duplicate\",\"untitled\":\"Untitled\",\"name\":\"Name\",\"yourName\":\"Your name\",\"madeWithExcalidraw\":\"Made with Excalidraw\",\"group\":\"Group selection\",\"ungroup\":\"Ungroup selection\",\"collaborators\":\"Collaborators\",\"showGrid\":\"Show grid\",\"addToLibrary\":\"Add to library\",\"removeFromLibrary\":\"Remove from library\",\"libraryLoadingMessage\":\"Loading library\u2026\",\"libraries\":\"Browse libraries\",\"loadingScene\":\"Loading scene\u2026\",\"align\":\"Align\",\"alignTop\":\"Align top\",\"alignBottom\":\"Align bottom\",\"alignLeft\":\"Align left\",\"alignRight\":\"Align right\",\"centerVertically\":\"Center vertically\",\"centerHorizontally\":\"Center horizontally\",\"distributeHorizontally\":\"Distribute horizontally\",\"distributeVertically\":\"Distribute vertically\",\"flipHorizontal\":\"Flip horizontal\",\"flipVertical\":\"Flip vertical\",\"viewMode\":\"View mode\",\"toggleExportColorScheme\":\"Toggle export color scheme\",\"share\":\"Share\",\"showStroke\":\"Show stroke color picker\",\"showBackground\":\"Show background color picker\",\"toggleTheme\":\"Toggle theme\",\"personalLib\":\"Personal Library\",\"excalidrawLib\":\"Excalidraw Library\",\"decreaseFontSize\":\"Decrease font size\",\"increaseFontSize\":\"Increase font size\",\"unbindText\":\"Unbind text\",\"bindText\":\"Bind text to the container\",\"createContainerFromText\":\"Wrap text in a container\",\"link\":{\"edit\":\"Edit link\",\"create\":\"Create link\",\"label\":\"Link\"},\"lineEditor\":{\"edit\":\"Edit line\",\"exit\":\"Exit line editor\"},\"elementLock\":{\"lock\":\"Lock\",\"unlock\":\"Unlock\",\"lockAll\":\"Lock all\",\"unlockAll\":\"Unlock all\"},\"statusPublished\":\"Published\",\"sidebarLock\":\"Keep sidebar open\"},\"library\":{\"noItems\":\"No items added yet...\",\"hint_emptyLibrary\":\"Select an item on canvas to add it here, or install a library from the public repository, below.\",\"hint_emptyPrivateLibrary\":\"Select an item on canvas to add it here.\"},\"buttons\":{\"clearReset\":\"Reset the canvas\",\"exportJSON\":\"Export to file\",\"exportImage\":\"Export image...\",\"export\":\"Save to...\",\"exportToPng\":\"Export to PNG\",\"exportToSvg\":\"Export to SVG\",\"copyToClipboard\":\"Copy to clipboard\",\"copyPngToClipboard\":\"Copy PNG to clipboard\",\"scale\":\"Scale\",\"save\":\"Save to current file\",\"saveAs\":\"Save as\",\"load\":\"Open\",\"getShareableLink\":\"Get shareable link\",\"close\":\"Close\",\"selectLanguage\":\"Select language\",\"scrollBackToContent\":\"Scroll back to content\",\"zoomIn\":\"Zoom in\",\"zoomOut\":\"Zoom out\",\"resetZoom\":\"Reset zoom\",\"menu\":\"Menu\",\"done\":\"Done\",\"edit\":\"Edit\",\"undo\":\"Undo\",\"redo\":\"Redo\",\"resetLibrary\":\"Reset library\",\"createNewRoom\":\"Create new room\",\"fullScreen\":\"Full screen\",\"darkMode\":\"Dark mode\",\"lightMode\":\"Light mode\",\"zenMode\":\"Zen mode\",\"exitZenMode\":\"Exit zen mode\",\"cancel\":\"Cancel\",\"clear\":\"Clear\",\"remove\":\"Remove\",\"publishLibrary\":\"Publish\",\"submit\":\"Submit\",\"confirm\":\"Confirm\"},\"alerts\":{\"clearReset\":\"This will clear the whole canvas. Are you sure?\",\"couldNotCreateShareableLink\":\"Couldn\\'t create shareable link.\",\"couldNotCreateShareableLinkTooBig\":\"Couldn\\'t create shareable link: the scene is too big\",\"couldNotLoadInvalidFile\":\"Couldn\\'t load invalid file\",\"importBackendFailed\":\"Importing from backend failed.\",\"cannotExportEmptyCanvas\":\"Cannot export empty canvas.\",\"couldNotCopyToClipboard\":\"Couldn\\'t copy to clipboard.\",\"decryptFailed\":\"Couldn\\'t decrypt data.\",\"uploadedSecurly\":\"The upload has been secured with end-to-end encryption, which means that Excalidraw server and third parties can\\'t read the content.\",\"loadSceneOverridePrompt\":\"Loading external drawing will replace your existing content. Do you wish to continue?\",\"collabStopOverridePrompt\":\"Stopping the session will overwrite your previous, locally stored drawing. Are you sure?\\\\n\\\\n(If you want to keep your local drawing, simply close the browser tab instead.)\",\"errorAddingToLibrary\":\"Couldn\\'t add item to the library\",\"errorRemovingFromLibrary\":\"Couldn\\'t remove item from the library\",\"confirmAddLibrary\":\"This will add {{numShapes}} shape(s) to your library. Are you sure?\",\"imageDoesNotContainScene\":\"This image does not seem to contain any scene data. Have you enabled scene embedding during export?\",\"cannotRestoreFromImage\":\"Scene couldn\\'t be restored from this image file\",\"invalidSceneUrl\":\"Couldn\\'t import scene from the supplied URL. It\\'s either malformed, or doesn\\'t contain valid Excalidraw JSON data.\",\"resetLibrary\":\"This will clear your library. Are you sure?\",\"removeItemsFromsLibrary\":\"Delete {{count}} item(s) from library?\",\"invalidEncryptionKey\":\"Encryption key must be of 22 characters. Live collaboration is disabled.\",\"collabOfflineWarning\":\"No internet connection available.\\\\nYour changes will not be saved!\"},\"errors\":{\"unsupportedFileType\":\"Unsupported file type.\",\"imageInsertError\":\"Couldn\\'t insert image. Try again later...\",\"fileTooBig\":\"File is too big. Maximum allowed size is {{maxSize}}.\",\"svgImageInsertError\":\"Couldn\\'t insert SVG image. The SVG markup looks invalid.\",\"invalidSVGString\":\"Invalid SVG.\",\"cannotResolveCollabServer\":\"Couldn\\'t connect to the collab server. Please reload the page and try again.\",\"importLibraryError\":\"Couldn\\'t load library\",\"collabSaveFailed\":\"Couldn\\'t save to the backend database. If problems persist, you should save your file locally to ensure you don\\'t lose your work.\",\"collabSaveFailed_sizeExceeded\":\"Couldn\\'t save to the backend database, the canvas seems to be too big. You should save the file locally to ensure you don\\'t lose your work.\",\"brave_measure_text_error\":{\"start\":\"Looks like you are using Brave browser with the\",\"aggressive_block_fingerprint\":\"Aggressively Block Fingerprinting\",\"setting_enabled\":\"setting enabled\",\"break\":\"This could result in breaking the\",\"text_elements\":\"Text Elements\",\"in_your_drawings\":\"in your drawings\",\"strongly_recommend\":\"We strongly recommend disabling this setting. You can follow\",\"steps\":\"these steps\",\"how\":\"on how to do so\",\"disable_setting\":\" If disabling this setting doesn\\'t fix the display of text elements, please open an\",\"issue\":\"issue\",\"write\":\"on our GitHub, or write us on\",\"discord\":\"Discord\"}},\"toolBar\":{\"selection\":\"Selection\",\"image\":\"Insert image\",\"rectangle\":\"Rectangle\",\"diamond\":\"Diamond\",\"ellipse\":\"Ellipse\",\"arrow\":\"Arrow\",\"line\":\"Line\",\"freedraw\":\"Draw\",\"text\":\"Text\",\"library\":\"Library\",\"lock\":\"Keep selected tool active after drawing\",\"penMode\":\"Pen mode - prevent touch\",\"link\":\"Add\/ Update link for a selected shape\",\"eraser\":\"Eraser\",\"hand\":\"Hand (panning tool)\"},\"headings\":{\"canvasActions\":\"Canvas actions\",\"selectedShapeActions\":\"Selected shape actions\",\"shapes\":\"Shapes\"},\"hints\":{\"canvasPanning\":\"To move canvas, hold mouse wheel or spacebar while dragging, or use the hand tool\",\"linearElement\":\"Click to start multiple points, drag for single line\",\"freeDraw\":\"Click and drag, release when you\\'re finished\",\"text\":\"Tip: you can also add text by double-clicking anywhere with the selection tool\",\"text_selected\":\"Double-click or press ENTER to edit text\",\"text_editing\":\"Press Escape or CtrlOrCmd+ENTER to finish editing\",\"linearElementMulti\":\"Click on last point or press Escape or Enter to finish\",\"lockAngle\":\"You can constrain angle by holding SHIFT\",\"resize\":\"You can constrain proportions by holding SHIFT while resizing,\\\\nhold ALT to resize from the center\",\"resizeImage\":\"You can resize freely by holding SHIFT,\\\\nhold ALT to resize from the center\",\"rotate\":\"You can constrain angles by holding SHIFT while rotating\",\"lineEditor_info\":\"Hold CtrlOrCmd and Double-click or press CtrlOrCmd + Enter to edit points\",\"lineEditor_pointSelected\":\"Press Delete to remove point(s),\\\\nCtrlOrCmd+D to duplicate, or drag to move\",\"lineEditor_nothingSelected\":\"Select a point to edit (hold SHIFT to select multiple),\\\\nor hold Alt and click to add new points\",\"placeImage\":\"Click to place the image, or click and drag to set its size manually\",\"publishLibrary\":\"Publish your own library\",\"bindTextToElement\":\"Press enter to add text\",\"deepBoxSelect\":\"Hold CtrlOrCmd to deep select, and to prevent dragging\",\"eraserRevert\":\"Hold Alt to revert the elements marked for deletion\",\"firefox_clipboard_write\":\"This feature can likely be enabled by setting the \\\\\"dom.events.asyncClipboard.clipboardItem\\\\\" flag to \\\\\"true\\\\\". To change the browser flags in Firefox, visit the \\\\\"about:config\\\\\" page.\"},\"canvasError\":{\"cannotShowPreview\":\"Cannot show preview\",\"canvasTooBig\":\"The canvas may be too big.\",\"canvasTooBigTip\":\"Tip: try moving the farthest elements a bit closer together.\"},\"errorSplash\":{\"headingMain_pre\":\"Encountered an error. Try \",\"headingMain_button\":\"reloading the page.\",\"clearCanvasMessage\":\"If reloading doesn\\'t work, try \",\"clearCanvasMessage_button\":\"clearing the canvas.\",\"clearCanvasCaveat\":\" This will result in loss of work \",\"trackedToSentry_pre\":\"The error with identifier \",\"trackedToSentry_post\":\" was tracked on our system.\",\"openIssueMessage_pre\":\"We were very cautious not to include your scene information on the error. If your scene is not private, please consider following up on our \",\"openIssueMessage_button\":\"bug tracker.\",\"openIssueMessage_post\":\" Please include information below by copying and pasting into the GitHub issue.\",\"sceneContent\":\"Scene content:\"},\"roomDialog\":{\"desc_intro\":\"You can invite people to your current scene to collaborate with you.\",\"desc_privacy\":\"Don\\'t worry, the session uses end-to-end encryption, so whatever you draw will stay private. Not even our server will be able to see what you come up with.\",\"button_startSession\":\"Start session\",\"button_stopSession\":\"Stop session\",\"desc_inProgressIntro\":\"Live-collaboration session is now in progress.\",\"desc_shareLink\":\"Share this link with anyone you want to collaborate with:\",\"desc_exitSession\":\"Stopping the session will disconnect you from the room, but you\\'ll be able to continue working with the scene, locally. Note that this won\\'t affect other people, and they\\'ll still be able to collaborate on their version.\",\"shareTitle\":\"Join a live collaboration session on Excalidraw\"},\"errorDialog\":{\"title\":\"Error\"},\"exportDialog\":{\"disk_title\":\"Save to disk\",\"disk_details\":\"Export the scene data to a file from which you can import later.\",\"disk_button\":\"Save to file\",\"link_title\":\"Shareable link\",\"link_details\":\"Export as a read-only link.\",\"link_button\":\"Export to Link\",\"excalidrawplus_description\":\"Save the scene to your Excalidraw+ workspace.\",\"excalidrawplus_button\":\"Export\",\"excalidrawplus_exportError\":\"Couldn\\'t export to Excalidraw+ at this moment...\"},\"helpDialog\":{\"blog\":\"Read our blog\",\"click\":\"click\",\"deepSelect\":\"Deep select\",\"deepBoxSelect\":\"Deep select within box, and prevent dragging\",\"curvedArrow\":\"Curved arrow\",\"curvedLine\":\"Curved line\",\"documentation\":\"Documentation\",\"doubleClick\":\"double-click\",\"drag\":\"drag\",\"editor\":\"Editor\",\"editLineArrowPoints\":\"Edit line\/arrow points\",\"editText\":\"Edit text \/ add label\",\"github\":\"Found an issue? Submit\",\"howto\":\"Follow our guides\",\"or\":\"or\",\"preventBinding\":\"Prevent arrow binding\",\"tools\":\"Tools\",\"shortcuts\":\"Keyboard shortcuts\",\"textFinish\":\"Finish editing (text editor)\",\"textNewLine\":\"Add new line (text editor)\",\"title\":\"Help\",\"view\":\"View\",\"zoomToFit\":\"Zoom to fit all elements\",\"zoomToSelection\":\"Zoom to selection\",\"toggleElementLock\":\"Lock\/unlock selection\",\"movePageUpDown\":\"Move page up\/down\",\"movePageLeftRight\":\"Move page left\/right\"},\"clearCanvasDialog\":{\"title\":\"Clear canvas\"},\"publishDialog\":{\"title\":\"Publish library\",\"itemName\":\"Item name\",\"authorName\":\"Author name\",\"githubUsername\":\"GitHub username\",\"twitterUsername\":\"Twitter username\",\"libraryName\":\"Library name\",\"libraryDesc\":\"Library description\",\"website\":\"Website\",\"placeholder\":{\"authorName\":\"Your name or username\",\"libraryName\":\"Name of your library\",\"libraryDesc\":\"Description of your library to help people understand its usage\",\"githubHandle\":\"GitHub handle (optional), so you can edit the library once submitted for review\",\"twitterHandle\":\"Twitter username (optional), so we know who to credit when promoting over Twitter\",\"website\":\"Link to your personal website or elsewhere (optional)\"},\"errors\":{\"required\":\"Required\",\"website\":\"Enter a valid URL\"},\"noteDescription\":{\"pre\":\"Submit your library to be included in the \",\"link\":\"public library repository\",\"post\":\"for other people to use in their drawings.\"},\"noteGuidelines\":{\"pre\":\"The library needs to be manually approved first. Please read the \",\"link\":\"guidelines\",\"post\":\" before submitting. You will need a GitHub account to communicate and make changes if requested, but it is not strictly required.\"},\"noteLicense\":{\"pre\":\"By submitting, you agree the library will be published under the \",\"link\":\"MIT License, \",\"post\":\"which in short means anyone can use them without restrictions.\"},\"noteItems\":\"Each library item must have its own name so it\\'s filterable. The following library items will be included:\",\"atleastOneLibItem\":\"Please select at least one library item to get started\",\"republishWarning\":\"Note: some of the selected items are marked as already published\/submitted. You should only resubmit items when updating an existing library or submission.\"},\"publishSuccessDialog\":{\"title\":\"Library submitted\",\"content\":\"Thank you {{authorName}}. Your library has been submitted for review. You can track the status\",\"link\":\"here\"},\"confirmDialog\":{\"resetLibrary\":\"Reset library\",\"removeItemsFromLib\":\"Remove selected items from library\"},\"encrypted\":{\"tooltip\":\"Your drawings are end-to-end encrypted so Excalidraw\\'s servers will never see them.\",\"link\":\"Blog post on end-to-end encryption in Excalidraw\"},\"stats\":{\"angle\":\"Angle\",\"element\":\"Element\",\"elements\":\"Elements\",\"height\":\"Height\",\"scene\":\"Scene\",\"selected\":\"Selected\",\"storage\":\"Storage\",\"title\":\"Stats for nerds\",\"total\":\"Total\",\"version\":\"Version\",\"versionCopy\":\"Click to copy\",\"versionNotAvailable\":\"Version not available\",\"width\":\"Width\"},\"toast\":{\"addedToLibrary\":\"Added to library\",\"copyStyles\":\"Copied styles.\",\"copyToClipboard\":\"Copied to clipboard.\",\"copyToClipboardAsPng\":\"Copied {{exportSelection}} to clipboard as PNG\\\\n({{exportColorScheme}})\",\"fileSaved\":\"File saved.\",\"fileSavedToFilename\":\"Saved to {filename}\",\"canvas\":\"canvas\",\"selection\":\"selection\",\"pasteAsSingleElement\":\"Use {{shortcut}} to paste as a single element,\\\\nor paste into an existing text editor\"},\"colors\":{\"495057\":\"Gray 7\",\"ffffff\":\"White\",\"f8f9fa\":\"Gray 0\",\"f1f3f5\":\"Gray 1\",\"fff5f5\":\"Red 0\",\"fff0f6\":\"Pink 0\",\"f8f0fc\":\"Grape 0\",\"f3f0ff\":\"Violet 0\",\"edf2ff\":\"Indigo 0\",\"e7f5ff\":\"Blue 0\",\"e3fafc\":\"Cyan 0\",\"e6fcf5\":\"Teal 0\",\"ebfbee\":\"Green 0\",\"f4fce3\":\"Lime 0\",\"fff9db\":\"Yellow 0\",\"fff4e6\":\"Orange 0\",\"transparent\":\"Transparent\",\"ced4da\":\"Gray 4\",\"868e96\":\"Gray 6\",\"fa5252\":\"Red 6\",\"e64980\":\"Pink 6\",\"be4bdb\":\"Grape 6\",\"7950f2\":\"Violet 6\",\"4c6ef5\":\"Indigo 6\",\"228be6\":\"Blue 6\",\"15aabf\":\"Cyan 6\",\"12b886\":\"Teal 6\",\"40c057\":\"Green 6\",\"82c91e\":\"Lime 6\",\"fab005\":\"Yellow 6\",\"fd7e14\":\"Orange 6\",\"000000\":\"Black\",\"343a40\":\"Gray 8\",\"c92a2a\":\"Red 9\",\"a61e4d\":\"Pink 9\",\"862e9c\":\"Grape 9\",\"5f3dc4\":\"Violet 9\",\"364fc7\":\"Indigo 9\",\"1864ab\":\"Blue 9\",\"0b7285\":\"Cyan 9\",\"087f5b\":\"Teal 9\",\"2b8a3e\":\"Green 9\",\"5c940d\":\"Lime 9\",\"e67700\":\"Yellow 9\",\"d9480f\":\"Orange 9\"},\"welcomeScreen\":{\"app\":{\"center_heading\":\"All your data is saved locally in your browser.\",\"center_heading_plus\":\"Did you want to go to the Excalidraw+ instead?\",\"menuHint\":\"Export, preferences, languages, ...\"},\"defaults\":{\"menuHint\":\"Export, preferences, and more...\",\"center_heading\":\"Diagrams. Made. Simple.\",\"toolbarHint\":\"Pick a tool & Start drawing!\",\"helpHint\":\"Shortcuts & help\"}}}')},4451:function(e){\"use strict\";e.exports=JSON.parse('{\"ar-SA\":89,\"bg-BG\":52,\"bn-BD\":57,\"ca-ES\":96,\"cs-CZ\":72,\"da-DK\":31,\"de-DE\":100,\"el-GR\":98,\"en\":100,\"es-ES\":99,\"eu-ES\":99,\"fa-IR\":91,\"fi-FI\":96,\"fr-FR\":99,\"gl-ES\":99,\"he-IL\":99,\"hi-IN\":73,\"hu-HU\":85,\"id-ID\":98,\"it-IT\":99,\"ja-JP\":97,\"kab-KAB\":93,\"kk-KZ\":19,\"ko-KR\":99,\"ku-TR\":91,\"lt-LT\":61,\"lv-LV\":93,\"mr-IN\":100,\"my-MM\":40,\"nb-NO\":100,\"nl-NL\":92,\"nn-NO\":86,\"oc-FR\":94,\"pa-IN\":79,\"pl-PL\":87,\"pt-BR\":96,\"pt-PT\":99,\"ro-RO\":100,\"ru-RU\":96,\"si-LK\":8,\"sk-SK\":99,\"sl-SI\":100,\"sv-SE\":99,\"ta-IN\":90,\"th-TH\":39,\"tr-TR\":98,\"uk-UA\":93,\"vi-VN\":52,\"zh-CN\":99,\"zh-HK\":25,\"zh-TW\":100}')}},l={};function s(e){var t=l[e];if(void 0!==t)return t.exports;var n=l[e]={id:e,exports:{}};return a[e](n,n.exports,s),n.exports}s.m=a,s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,{a:t}),t},r=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},s.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if(\"object\"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&\"function\"==typeof e.then)return e}var o=Object.create(null);s.r(o);var i={};n=n||[null,r({}),r([]),r(r)];for(var a=2&t&&e;\"object\"==typeof a&&!~n.indexOf(a);a=r(a))Object.getOwnPropertyNames(a).forEach((function(t){i[t]=function(){return e[t]}}));return i.default=function(){return e},s.d(o,i),o},s.d=function(e,t){for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=function(e){return Promise.all(Object.keys(s.f).reduce((function(t,n){return s.f[n](e,t),t}),[]))},s.u=function(e){return\"excalidraw-assets\/\"+{22:\"locales\/kk-KZ-json\",537:\"locales\/th-TH-json\",1204:\"locales\/ja-JP-json\",1302:\"locales\/si-LK-json\",1477:\"locales\/my-MM-json\",1513:\"locales\/el-GR-json\",1628:\"locales\/bg-BG-json\",1690:\"locales\/oc-FR-json\",1790:\"locales\/da-DK-json\",2091:\"locales\/ar-SA-json\",2312:\"locales\/he-IL-json\",2359:\"locales\/nb-NO-json\",2404:\"locales\/ta-IN-json\",2943:\"locales\/gl-ES-json\",3024:\"locales\/nl-NL-json\",3031:\"locales\/ku-TR-json\",3082:\"locales\/de-DE-json\",3162:\"locales\/pa-IN-json\",3397:\"locales\/mr-IN-json\",3421:\"locales\/zh-TW-json\",3512:\"locales\/fi-FI-json\",3674:\"locales\/pl-PL-json\",3682:\"locales\/fr-FR-json\",3721:\"locales\/pt-BR-json\",3808:\"locales\/id-ID-json\",3885:\"locales\/nn-NO-json\",4e3:\"locales\/vi-VN-json\",4680:\"locales\/zh-CN-json\",4736:\"vendor\",4977:\"locales\/tr-TR-json\",5089:\"locales\/ro-RO-json\",5130:\"locales\/ca-ES-json\",5330:\"locales\/fa-IR-json\",5395:\"locales\/pt-PT-json\",6071:\"locales\/sl-SI-json\",6239:\"locales\/it-IT-json\",6265:\"locales\/cs-CZ-json\",6768:\"locales\/lv-LV-json\",6844:\"locales\/ko-KR-json\",7368:\"locales\/hu-HU-json\",7429:\"locales\/bn-BD-json\",7759:\"locales\/uk-UA-json\",7920:\"locales\/zh-HK-json\",8081:\"locales\/eu-ES-json\",8124:\"locales\/ru-RU-json\",8340:\"locales\/lt-LT-json\",8534:\"locales\/sv-SE-json\",8750:\"locales\/sk-SK-json\",8759:\"locales\/es-ES-json\",9551:\"locales\/kab-KAB-json\",9828:\"locales\/hi-IN-json\"}[e]+\"-\"+{22:\"1f9df2b51e34996bad30\",537:\"3a152569bbebfec7c6c0\",1204:\"ef6ec5abb0c3c53c7a51\",1302:\"db1222db995d9425e281\",1477:\"1a05d5c242c822079dca\",1513:\"79f7d66730b39df84f8e\",1628:\"72ac7b7548d7fefdcd2a\",1690:\"e90ca79174b6e1eccb72\",1790:\"ed85a6f48e1df51b1b46\",2091:\"06d4bd2f3a164162f2b8\",2312:\"3280be0edae615c7685f\",2359:\"7ea7ab2356e76889af8d\",2404:\"4063d11b19f24794564a\",2943:\"2117445509ba7c479ee0\",3024:\"5805f36f33a3f8e53adc\",3031:\"d10a4bb9ede3c08a08e1\",3082:\"f70dfb7201a16dc3f9fc\",3162:\"1854ecccf3c6f8ea9c46\",3397:\"c922a007bb00d3e4f3b1\",3421:\"c39caba2da3f001066a8\",3512:\"d43636fb51002f55e2a4\",3674:\"b4be83b26070e4cf70ca\",3682:\"b5ea877625968f748b7f\",3721:\"2e7a1690edc8d46e8842\",3808:\"6031eb8be253b20c28e9\",3885:\"8209f0f674435b52293d\",4e3:\"2f5b95c0011820e16f4b\",4680:\"2cb13b38b6615ada3097\",4736:\"53d1c69ef585b6dd219b\",4977:\"9002b1505b0931924d42\",5089:\"3397acad1a98b5093c8b\",5130:\"6108f4ae0be3d1e369a6\",5330:\"586a1324f942d89620b6\",5395:\"aba1622a80e32e465a3d\",6071:\"68eba9ac00ae57bae3f4\",6239:\"446b14f993000d0f572f\",6265:\"1ae99f296c9febb99f72\",6768:\"1e3a5e87e39d2d90274c\",6844:\"cf33ecf52ab95055544b\",7368:\"6ccf0d8a164ecec52187\",7429:\"759924ef13bd9e602cb3\",7759:\"4e345c790342b7672248\",7920:\"4bcbf71743fda1544a84\",8081:\"1cc77079b354b962615f\",8124:\"8ab49e8d0473e92a8ab9\",8340:\"08c7fc343ef2f533ec5f\",8534:\"36b97455521e61312a47\",8750:\"50dcb09552f93c2de3a4\",8759:\"682b92427b8b27bb0aa8\",9551:\"69853849c71eff277ba0\",9828:\"dad8ce15f9b7a435a926\"}[e]+\".js\"},s.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(e){if(\"object\"==typeof window)return window}}(),s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o={},i=\"ExcalidrawLib:\",s.l=function(e,t,n,r){if(o[e])o[e].push(t);else{var a,l;if(void 0!==n)for(var c=document.getElementsByTagName(\"script\"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute(\"src\")==e||d.getAttribute(\"data-webpack\")==i+n){a=d;break}}a||(l=!0,(a=document.createElement(\"script\")).charset=\"utf-8\",a.timeout=120,s.nc&&a.setAttribute(\"nonce\",s.nc),a.setAttribute(\"data-webpack\",i+n),a.src=e),o[e]=[t];var f=function(t,n){a.onerror=a.onload=null,clearTimeout(p);var r=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((function(e){return e(n)})),t)return t(n)},p=setTimeout(f.bind(null,void 0,{type:\"timeout\",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},s.p=\"\",function(){s.b=document.baseURI||self.location.href;var e={1388:0};s.f.j=function(t,n){var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise((function(n,o){r=e[t]=[n,o]}));n.push(r[2]=o);var i=s.p+s.u(t),a=new Error;s.l(i,(function(n){if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&(\"load\"===n.type?\"missing\":n.type),i=n&&n.target&&n.target.src;a.message=\"Loading chunk \"+t+\" failed.\\n(\"+o+\": \"+i+\")\",a.name=\"ChunkLoadError\",a.type=o,a.request=i,r[1](a)}}),\"chunk-\"+t,t)}};var t=function(t,n){var r,o,i=n[0],a=n[1],l=n[2],c=0;if(i.some((function(t){return 0!==e[t]}))){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);if(l)l(s)}for(t&&t(n);c<i.length;c++)o=i[c],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkExcalidrawLib=self.webpackChunkExcalidrawLib||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),s.nc=void 0;var c={};return function(){\"use strict\";s.r(c),s.d(c,{Button:function(){return Se},Excalidraw:function(){return Ge},FONT_FAMILY:function(){return e.ut},Footer:function(){return K},LiveCollaborationTrigger:function(){return Te},MIME_TYPES:function(){return e.LO},MainMenu:function(){return Y.Z},Sidebar:function(){return Re.Y},THEME:function(){return e.C6},WelcomeScreen:function(){return be},bumpVersion:function(){return Ze.ZP},defaultLang:function(){return I.Fp},exportToBlob:function(){return Ae.Fl},exportToCanvas:function(){return Ae.NL},exportToClipboard:function(){return Ae.i1},exportToSvg:function(){return Ae.$D},getFreeDrawSvgPath:function(){return Ae.N7},getNonDeletedElements:function(){return Pe.Lm},getSceneVersion:function(){return Pe.Uo},isInvisiblySmallElement:function(){return Pe.QD},isLinearElement:function(){return Le.bt},languages:function(){return I.Mj},loadFromBlob:function(){return Ae.cT},loadLibraryFromBlob:function(){return Ae.lV},loadSceneOrLibraryFromBlob:function(){return Ae.ZY},mergeLibraryItems:function(){return Ae.zh},mutateElement:function(){return Ze.DR},newElementWith:function(){return Ze.BE},normalizeLink:function(){return Ne.$},parseLibraryTokensFromUrl:function(){return ze.Di},restore:function(){return De.nu},restoreAppState:function(){return De.lY},restoreElements:function(){return De.ET},restoreLibraryItems:function(){return De.wJ},sceneCoordsToViewportCoords:function(){return D._i},serializeAsJSON:function(){return Ae.I_},serializeLibraryAsJSON:function(){return Ae.NI},useDevice:function(){return P.Fy},useHandleLibrary:function(){return ze.xS},useI18n:function(){return I.QT},viewportCoordsToSceneCoords:function(){return D.dE}});var e=s(2335);\"production\"!==e.Vi.TEST&&(s.p=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(\"@excalidraw\/excalidraw\",\"@\").concat(\"0.15.3\",\"\/dist\/\"));var t=function(){Array.prototype.at||Object.defineProperty(Array.prototype,\"at\",{value:function(e){if((e=Math.trunc(e)||0)<0&&(e+=this.length),!(e<0||e>=this.length))return this[e]},writable:!0,enumerable:!1,configurable:!0})},n=s(487),r=s.n(n),o=s(631),i=s.n(o),a=s(2052),l=s.n(a),u=s(4010),d=s.n(u),f=s(1469),p=s.n(f),h=s(9329),m=s.n(h),g=s(4295),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=l().bind(null,\"head\"),v.domAPI=i(),v.insertStyleElement=p();r()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=s(6479),y=s.n(b),x=s(9713),w=s.n(x),k=s(9787),E=s.n(k),S=s(8950),j=s(2577),_=s(2975),O=s.n(_),C=s(5440),I=s(8211),M=s(4512),T=function(e){var t=(0,k.useState)(!0),n=(0,j.Z)(t,2),r=n[0],o=n[1];return(0,k.useEffect)((function(){var t=function(){var e=(0,S.Z)(O().mark((function e(){return O().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,I.m0)(n);case 2:o(!1);case 3:case\"end\":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),n=I.Mj.find((function(t){return t.code===e.langCode}))||I.Fp;t()}),[e.langCode]),r?(0,M.jsx)(C.z,{theme:e.theme}):e.children},P=s(2134),D=s(6340),A=s(9915),L={};L.styleTagTransform=m(),L.setAttributes=d(),L.insert=l().bind(null,\"head\"),L.domAPI=i(),L.insertStyleElement=p();r()(A.Z,L),A.Z&&A.Z.locals&&A.Z.locals;var Z=s(9310),z={};z.styleTagTransform=m(),z.setAttributes=d(),z.insert=l().bind(null,\"head\"),z.domAPI=i(),z.insertStyleElement=p();r()(Z.Z,z),Z.Z&&Z.Z.locals&&Z.Z.locals;var R=s(4739),N=s(9487),B=s(45),H=s(8888),W=s(8793),F={};F.styleTagTransform=m(),F.setAttributes=d(),F.insert=l().bind(null,\"head\"),F.domAPI=i(),F.insertStyleElement=p();r()(W.Z,F),W.Z&&W.Z.locals&&W.Z.locals;var U=function(e){var t=e.children,n=(0,H.R6)().footerCenterTunnel,r=(0,P.gF)();return(0,M.jsx)(n.In,{children:(0,M.jsx)(\"div\",{className:(0,B.Z)(\"footer-center zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":r.zenModeEnabled}),children:t})})},K=U;U.displayName=\"FooterCenter\";var Y=s(4709),G=s(7169),V=s(2726),X=s(6710),q=s(785),J=s(3646),$=[\"onSelect\",\"children\",\"icon\",\"shortcut\",\"className\"],Q=[\"children\",\"href\",\"icon\",\"shortcut\",\"className\"];function ee(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function te(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ee(Object(n),!0).forEach((function(t){(0,G.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ee(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ne=function(e){var t=e.icon,n=e.shortcut,r=e.children,o=(0,P.Fy)();return(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(\"div\",{className:\"welcome-screen-menu-item__icon\",children:t}),(0,M.jsx)(\"div\",{className:\"welcome-screen-menu-item__text\",children:r}),n&&!o.isMobile&&(0,M.jsx)(\"div\",{className:\"welcome-screen-menu-item__shortcut\",children:n})]})};ne.displayName=\"WelcomeScreenMenuItemContent\";var re=function(e){var t=e.onSelect,n=e.children,r=e.icon,o=e.shortcut,i=e.className,a=void 0===i?\"\":i,l=(0,V.Z)(e,$);return(0,M.jsx)(\"button\",te(te({},l),{},{type:\"button\",className:\"welcome-screen-menu-item \".concat(a),onClick:t,children:(0,M.jsx)(ne,{icon:r,shortcut:o,children:n})}))};re.displayName=\"WelcomeScreenMenuItem\";var oe=function(e){var t=e.children,n=e.href,r=e.icon,o=e.shortcut,i=e.className,a=void 0===i?\"\":i,l=(0,V.Z)(e,Q);return(0,M.jsx)(\"a\",te(te({},l),{},{className:\"welcome-screen-menu-item \".concat(a),href:n,target:\"_blank\",rel:\"noreferrer\",children:(0,M.jsx)(ne,{icon:r,shortcut:o,children:t})}))};oe.displayName=\"WelcomeScreenMenuItemLink\";var ie=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenCenterTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsx)(\"div\",{className:\"welcome-screen-center\",children:t||(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(ae,{}),(0,M.jsx)(le,{children:(0,I.t)(\"welcomeScreen.defaults.center_heading\")}),(0,M.jsxs)(se,{children:[(0,M.jsx)(ue,{}),(0,M.jsx)(ce,{})]})]})})})};ie.displayName=\"Center\";var ae=function(e){var t=e.children;return(0,M.jsx)(\"div\",{className:\"welcome-screen-center__logo virgil welcome-screen-decor\",children:t||(0,M.jsxs)(M.Fragment,{children:[J.Mw,\" Excalidraw\"]})})};ae.displayName=\"Logo\";var le=function(e){var t=e.children;return(0,M.jsx)(\"div\",{className:\"welcome-screen-center__heading welcome-screen-decor virgil\",children:t})};le.displayName=\"Heading\";var se=function(e){var t=e.children;return(0,M.jsx)(\"div\",{className:\"welcome-screen-menu\",children:t})};se.displayName=\"Menu\";var ce=function(){var e=(0,P.eh)();return(0,M.jsx)(re,{onSelect:function(){return e.executeAction(X.jY)},shortcut:\"?\",icon:J.by,children:(0,I.t)(\"helpDialog.title\")})};ce.displayName=\"MenuItemHelp\";var ue=function(){var e=(0,P.gF)(),t=(0,P.eh)();return e.viewModeEnabled?null:(0,M.jsx)(re,{onSelect:function(){return t.executeAction(X._d)},shortcut:(0,q.C)(\"loadScene\"),icon:J.Tl,children:(0,I.t)(\"buttons.load\")})};ue.displayName=\"MenuItemLoadScene\";var de=function(e){var t=e.onSelect,n=(0,I.QT)().t;return(0,M.jsx)(re,{shortcut:null,onSelect:t,icon:J.jn,children:n(\"labels.liveCollaboration\")})};de.displayName=\"MenuItemLiveCollaborationTrigger\",ie.Logo=ae,ie.Heading=le,ie.Menu=se,ie.MenuItem=re,ie.MenuItemLink=oe,ie.MenuItemHelp=ce,ie.MenuItemLoadScene=ue,ie.MenuItemLiveCollaborationTrigger=de;var fe=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenMenuHintTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsxs)(\"div\",{className:\"virgil welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--menu\",children:[J.oQ,(0,M.jsx)(\"div\",{className:\"welcome-screen-decor-hint__label\",children:t||(0,I.t)(\"welcomeScreen.defaults.menuHint\")})]})})};fe.displayName=\"MenuHint\";var pe=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenToolbarHintTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsxs)(\"div\",{className:\"virgil welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--toolbar\",children:[(0,M.jsx)(\"div\",{className:\"welcome-screen-decor-hint__label\",children:t||(0,I.t)(\"welcomeScreen.defaults.toolbarHint\")}),J.DJ]})})};pe.displayName=\"ToolbarHint\";var he=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenHelpHintTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsxs)(\"div\",{className:\"virgil welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--help\",children:[(0,M.jsx)(\"div\",{children:t||(0,I.t)(\"welcomeScreen.defaults.helpHint\")}),J._U]})})};he.displayName=\"HelpHint\";var me=s(1569),ge={};ge.styleTagTransform=m(),ge.setAttributes=d(),ge.insert=l().bind(null,\"head\"),ge.domAPI=i(),ge.insertStyleElement=p();r()(me.Z,ge),me.Z&&me.Z.locals&&me.Z.locals;var ve=function(e){return(0,M.jsx)(M.Fragment,{children:e.children||(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(ie,{}),(0,M.jsx)(fe,{}),(0,M.jsx)(pe,{}),(0,M.jsx)(he,{})]})})};ve.displayName=\"WelcomeScreen\",ve.Center=ie,ve.Hints={MenuHint:fe,ToolbarHint:pe,HelpHint:he};var be=ve,ye=s(3137),xe={};xe.styleTagTransform=m(),xe.setAttributes=d(),xe.insert=l().bind(null,\"head\"),xe.domAPI=i(),xe.insertStyleElement=p();r()(ye.Z,xe),ye.Z&&ye.Z.locals&&ye.Z.locals;var we=[\"type\",\"onSelect\",\"children\",\"className\"];function ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(n),!0).forEach((function(t){(0,G.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Se=function(e){var t=e.type,n=void 0===t?\"button\":t,r=e.onSelect,o=e.children,i=e.className,a=void 0===i?\"\":i,l=(0,V.Z)(e,we);return(0,M.jsx)(\"button\",Ee(Ee({onClick:function(e){var t;r(),null===(t=l.onClick)||void 0===t||t.call(l,e)},type:n,className:\"excalidraw-button \".concat(a)},l),{},{children:o}))},je=s(3397),_e={};_e.styleTagTransform=m(),_e.setAttributes=d(),_e.insert=l().bind(null,\"head\"),_e.domAPI=i(),_e.insertStyleElement=p();r()(je.Z,_e),je.Z&&je.Z.locals&&je.Z.locals;var Oe=[\"isCollaborating\",\"onSelect\"];function Ce(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ie(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ce(Object(n),!0).forEach((function(t){(0,G.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ce(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Me=function(e){var t=e.isCollaborating,n=e.onSelect,r=(0,V.Z)(e,Oe),o=(0,P.gF)();return(0,M.jsxs)(Se,Ie(Ie({},r),{},{className:(0,B.Z)(\"collab-button\",{active:t}),type:\"button\",onSelect:n,style:{position:\"relative\"},title:(0,I.t)(\"labels.liveCollaboration\"),children:[J.jn,o.collaborators.size>0&&(0,M.jsx)(\"div\",{className:\"CollabButton-collaborators\",children:o.collaborators.size})]}))},Te=Me;Me.displayName=\"LiveCollaborationTrigger\";var Pe=s(1047),De=s(679),Ae=s(3024),Le=s(1974),Ze=s(1935),ze=s(7053),Re=s(9430),Ne=s(6794),Be=[\"initialData\",\"UIOptions\"],He=[\"initialData\",\"UIOptions\"];function We(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?We(Object(n),!0).forEach((function(t){w()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):We(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ue=function(t){var n,r,o,i=t.onChange,a=t.initialData,l=t.excalidrawRef,s=t.isCollaborating,c=void 0!==s&&s,u=t.onPointerUpdate,d=t.renderTopRightUI,f=t.renderSidebar,p=t.langCode,h=void 0===p?I.Fp.code:p,m=t.viewModeEnabled,g=t.zenModeEnabled,v=t.gridModeEnabled,b=t.libraryReturnUrl,y=t.theme,x=t.name,w=t.renderCustomStats,E=t.onPaste,S=t.detectScroll,j=void 0===S||S,_=t.handleKeyboardGlobally,O=void 0!==_&&_,C=t.onLibraryChange,D=t.autoFocus,A=void 0!==D&&D,L=t.generateIdForFile,Z=t.onLinkOpen,z=t.onPointerDown,B=t.onScrollChange,H=t.children,W=null===(n=t.UIOptions)||void 0===n?void 0:n.canvasActions,F=Fe(Fe({},t.UIOptions),{},{canvasActions:Fe(Fe({},e.cW.canvasActions),W)});null!=W&&W.export&&(F.canvasActions.export.saveFileToDisk=null!==(r=null===(o=W.export)||void 0===o?void 0:o.saveFileToDisk)&&void 0!==r?r:e.cW.canvasActions.export.saveFileToDisk);return null===F.canvasActions.toggleTheme&&void 0===y&&(F.canvasActions.toggleTheme=!0),(0,k.useEffect)((function(){var e=function(e){\"number\"==typeof e.scale&&1!==e.scale&&e.preventDefault()};return document.addEventListener(\"touchmove\",e,{passive:!1}),function(){document.removeEventListener(\"touchmove\",e)}}),[]),(0,M.jsx)(R.zt,{unstable_createStore:function(){return N.e_},scope:N.yE,children:(0,M.jsx)(T,{langCode:h,theme:y,children:(0,M.jsx)(P.ZP,{onChange:i,initialData:a,excalidrawRef:l,isCollaborating:c,onPointerUpdate:u,renderTopRightUI:d,langCode:h,viewModeEnabled:m,zenModeEnabled:g,gridModeEnabled:v,libraryReturnUrl:b,theme:y,name:x,renderCustomStats:w,UIOptions:F,onPaste:E,detectScroll:j,handleKeyboardGlobally:O,onLibraryChange:C,autoFocus:A,generateIdForFile:L,onLinkOpen:Z,onPointerDown:z,onScrollChange:B,renderSidebar:f,children:H})})})},Ke=function(e,t){if(e.children!==t.children)return!1;e.initialData;var n=e.UIOptions,r=void 0===n?{}:n,o=y()(e,Be),i=(t.initialData,t.UIOptions),a=void 0===i?{}:i,l=y()(t,He),s=Object.keys(r),c=Object.keys(a);return s.length===c.length&&(s.every((function(e){return\"canvasActions\"===e?Object.keys(r.canvasActions).every((function(e){var t,n,o,i;return\"export\"===e&&null!=r&&null!==(t=r.canvasActions)&&void 0!==t&&t.export&&null!=a&&null!==(n=a.canvasActions)&&void 0!==n&&n.export?r.canvasActions.export.saveFileToDisk===a.canvasActions.export.saveFileToDisk:(null==r||null===(o=r.canvasActions)||void 0===o?void 0:o[e])===(null==a||null===(i=a.canvasActions)||void 0===i?void 0:i[e])})):r[e]===a[e]}))&&(0,D.w8)(o,l))},Ye=(0,k.forwardRef)((function(e,t){return(0,M.jsx)(Ue,Fe(Fe({},e),{},{excalidrawRef:t}))})),Ge=E().memo(Ye,Ke);Ge.displayName=\"Excalidraw\",t()}(),c}()}));\n};"],"names":["shadow$provide","global","require","module","exports","Buffer","e","t","define","amd","ExcalidrawLib","React","ReactDOM","self","s","l","n","id","a","5779","N","r","o","i","t.N","replace","String","fromCharCode","trim","indexOf","c","match","test","u","45","Array","isArray","length","arguments","d","Z","6233","version","Int32Array","table","bstr","e.bstr","charCodeAt","buf","e.buf","str","e.str","DO_NOT_EXPORT_CRC","4739","R","z","toString","read","init","r.read","write","r.write","j","useContext","useCallback","p","v","Error","useReducer","Object","is","useEffect","useDebugValue","B","w","H","console","warn","scope","Dv","KO","Vv","k","b9","cn","zt","Symbol","call","Promise","t.c","then","defineProperty","defineProperties","getOwnPropertyDescriptors","f","getOwnPropertySymbols","prototype","hasOwnProperty","h","propertyIsEnumerable","m","enumerable","configurable","writable","value","WeakMap","Map","Set","freeze","set","E","S","get","delete","_","has","O","forEach","size","C","from","keys","every","resolve","W","I","M","T","catch","D","add","L","unstable_promise","info","onMount","clear","A","F","U","K","values","asyncGet","sub","SECRET_INTERNAL_store","createContext","P","debugLabel","fromEntries","flatMap","error","promise","dependents","map","useState","current","useRef","s.current.w","createElement","Provider","200","g","y","apply","Date","now","setTimeout","TypeError","b","leading","maxWait","trailing","cancel","S.cancel","clearTimeout","flush","S.flush","NaN","valueOf","slice","parseInt","Function","Math","max","min","e.exports","2744","assign","4395","options","level","method","chunkSize","windowBits","memLevel","strategy","to","raw","gzip","err","msg","ended","chunks","strm","avail_out","deflateInit2","header","deflateSetHeader","dictionary","string2buf","Uint8Array","deflateSetDictionary","_dict_set","push","result","c.prototype.push","input","next_in","avail_in","output","Buf8","next_out","deflate","onEnd","onData","buf2binstring","shrinkBuf","deflateEnd","c.prototype.onData","c.prototype.onEnd","join","flattenChunks","Deflate","deflateRaw","t.deflateRaw","t.gzip","578","inflateInit2","Z_OK","inflateGetHeader","inflateSetDictionary","d.prototype.push","Z_FINISH","Z_NO_FLUSH","binstring2buf","inflate","Z_NEED_DICT","Z_BUF_ERROR","Z_STREAM_END","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","inflateEnd","d.prototype.onData","d.prototype.onEnd","Inflate","inflateRaw","t.inflateRaw","ungzip","9187","Uint16Array","t.assign","shift","t.shrinkBuf","subarray","concat","setTyped","t.setTyped","Buf16","Buf32","8592","t.string2buf","t.buf2binstring","t.binstring2buf","t.buf2string","t.utf8border","3693","2684","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_TREES","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","8464","7651","state","pending","pending_buf","pending_out","total_out","_tr_flush_block","block_start","strstart","x","max_chain_length","prev_length","nice_match","w_size","window","w_mask","prev","good_match","lookahead","match_start","window_size","hash_size","head","wrap","adler","total_in","insert","ins_h","hash_shift","hash_mask","match_length","_tr_tally","max_lazy_match","last_lit","prev_match","match_available","good_length","max_lazy","nice_length","max_chain","func","status","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","dyn_dtree","bl_tree","bl_desc","d_desc","l_desc","bl_count","heap","heap_max","heap_len","depth","bi_valid","bi_buf","matches","static_len","opt_len","d_buf","lit_bufsize","l_buf","data_type","_tr_init","deflateInit","t.deflateInit","deflateReset","deflateResetKeep","t.deflateSetHeader","t.deflate","text","hcrc","extra","name","comment","time","os","_tr_align","_tr_stored_block","t.deflateEnd","t.deflateSetDictionary","deflateInfo","9968","xflags","extra_len","done","9365","dmax","wsize","whave","wnext","hold","bits","lencode","distcode","lenbits","distbits","mode","sane","7823","last","havedict","total","check","flags","wbits","offset","have","ndist","nlen","ncode","next","lens","work","distdyn","lendyn","was","back","inflateReset","inflateReset2","inflateResetKeep","inflateInit","t.inflateInit","t.inflate","t.inflateEnd","t.inflateGetHeader","t.inflateSetDictionary","inflateInfo","6446","5604","8676","static_tree","extra_bits","extra_base","elems","max_length","has_stree","dyn_tree","max_code","stat_desc","t._tr_init","t._tr_flush_block","t._tr_tally","t._tr_align","249","9066","data","keyword","9686","1194","encode","decode","3434","buffer","Uint32Array","2983","1493","pow","sqrt","6094","key","ref","defaultProps","$$typeof","type","props","_owner","for","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","__self","__source","Fragment","jsx","jsxs","4512","8152","floor","random","constructor","seed","imul","8234","PI","cos","sin","hachureAngle","hachureGap","strokeWidth","ymin","ymax","islope","sort","abs","splice","edge","filter","round","RegExp","$1","parseFloat","substr","asin","toFixed","tan","ops","roughness","disableMultiStroke","randomizer","ceil","curveStepCount","curveFitting","increment","rx","ry","estimatedPoints","opset","op","maxRandomnessOffset","fillStyle","fillPolygons","disableMultiStrokeFill","bowing","preserveVertices","curveTightness","V","helper","_fillPolygons","renderLines","doubleLineOps","dotsOnLines","fillWeight","ellipse","dashedLine","dashOffset","dashGap","atan","zigzagOffset","zigzagLines","Q","q","randOffset","randOffsetWithRange","defaultOptions","stroke","config","_o","newSeed","_d","shape","sets","line","rectangle","fill","circle","linearPath","arc","curve","polygon","path","simplification","opsToPath","toPaths","fillSketch","canvas","ctx","getContext","gen","draw","getDefaultOptions","fixedDecimalPlaceDigits","save","strokeStyle","lineWidth","strokeLineDash","setLineDash","strokeLineDashOffset","lineDashOffset","_drawToContext","restore","fillLineDash","fillLineDashOffset","beginPath","moveTo","bezierCurveTo","lineTo","G","svg","ownerDocument","document","createElementNS","Y","setAttribute","appendChild","generator","5714","5422","styleTagTransform","setAttributes","bind","domAPI","insertStyleElement","locals","487","identifier","base","css","media","sourceMap","supports","layer","references","updater","byIndex","update","remove","2052","querySelector","HTMLIFrameElement","contentDocument","1469","attributes","4010","nc","631","btoa","unescape","encodeURIComponent","JSON","stringify","parentNode","removeChild","9329","styleSheet","cssText","firstChild","createTextNode","2173","getSnapshot","useLayoutEffect","inst","useSyncExternalStore","5917","useMemo","useSyncExternalStoreWithSelector","t.useSyncExternalStoreWithSelector","hasValue","1374","5668","940","code","all","o.keys","9713","6479","7316","4295","URL","6086","3729","3137","4241","6029","2345","9393","6578","9482","6148","7955","3195","2978","1587","9478","7369","1434","2316","8923","6440","2701","6843","8461","9935","532","7589","8208","5892","3874","2681","6759","9650","2044","9144","6626","6359","7399","8793","3397","4343","1569","9915","9310","6464","themeFilter","rightSidebarWidth","5260","3645","t.toString","t.i","1667","__esModule","default","hash","needQuotes","8081","202","iterator","return","getOwnPropertyDescriptor","JQ","vD","y7","contextItemLabel","trackEvent","category","predicate","eD","some","Xo","perform","Lm","WJ","X1","originalText","mO","lineHeight","width","height","baseline","eR","kT","FE","DR","containerId","boundElements","elements","appState","commitToHistory","iB","mG","verticalAlign","oX","MIDDLE","textAlign","I8","CENTER","oN","h_","selectedElementIds","findIndex","Up","backgroundColor","currentItemBackgroundColor","angle","currentItemFillStyle","strokeColor","currentItemStrokeColor","currentItemRoughness","currentItemStrokeWidth","currentItemStrokeStyle","roundness","currentItemRoundness","QI","a6","ADAPTIVE_RADIUS","PROPORTIONAL_RADIUS","opacity","locked","gK","NS","groupIds","includes","startBinding","endBinding","elementId","2416","CZ","Lo","Zp","eF","md","mo","UIOptions","canvasActions","changeViewBackgroundColor","viewModeEnabled","viewBackgroundColor","PanelComponent","updateData","style","position","children","label","color","onChange","isActive","openPopup","setActive","clearCanvas","imageCache","BE","isDeleted","im","files","theme","penMode","penDetected","exportBackground","exportEmbedScene","gridSize","showStats","pasteDialog","activeTool","viewMode","viewportX","offsetLeft","viewportY","offsetTop","nextZoom","zoom","V4","className","icon","Sd","title","uY","onClick","keyTest","aU","EQUAL","NUM_ADD","tW","CTRL_OR_CMD","shiftKey","xL","MINUS","NUM_SUBTRACT","ZERO","NUM_ZERO","Zj","KP","scenePoint","viewportDimensions","TWO","altKey","ONE","C6","LIGHT","DARK","toggleTheme","EN","Om","lastActiveTool","lastActiveToolBeforeEraser","selectedGroupIds","l$","KJ","oc","GRAB","4688","FA","ZM","jK","uN","yQ","zp","vQ","device","isMobile","navigator","clipboard","pasteFromClipboard","X","mark","abrupt","p1","t0","errorMessage","message","stop","wx","toast","exportSelection","exportColorScheme","exportWithDarkMode","vt","reduce","dd","533","editingGroupId","Fb","action","editingLinearElement","selectedPointsIndices","startBindingElement","endBindingElement","getElement","points","deletePoints","Xh","$q","multiElement","BACKSPACE","DELETE","XH","visible","8671","te","mM","ee","ns","J0","htmlFor","isNameEditable","onBlur","qz","target","onKeyDown","preventDefault","nativeEvent","isComposing","keyCode","currentTarget","blur","MOON","SUN","viewBox","fileHandle","Qk","DQ","appProps","exportScale","ZB","Cg","qy","checked","long","Vl","J","$","saveToActiveFile","g8","sent","Um","t1","po","showAriaLabel","Fy","hidden","kr","loadScene","n8","display","justifyContent","marginTop","marginBottom","6208","onClose","focus","role","find","keyBinding","toLowerCase","metaKey","ctrlKey","TAB","activeElement","Wl","G3","rtl","ARROW_LEFT","ARROW_RIGHT","ARROW_DOWN","ARROW_UP","ESCAPE","ENTER","stopImmediatePropagation","stopPropagation","active","toUpperCase","onFocus","group","Suspense","fallback","onCloseRequest","right","left","Tu","Zq","testId","xn","editingElement","PR","fontSize","tl","currentItemFontSize","PD","lF","a0","np","X7","ZA","m9","LU","bf","kM","W2","a5","aT","currentItemOpacity","step","q0","nq","OA","n5","CHEVRON_LEFT","COMMA","CHEVRON_RIGHT","PERIOD","fontFamily","PT","currentItemFontFamily","ut","Virgil","Pm","Helvetica","vo","Cascadia","z6","rk","currentItemTextAlign","rr","o3","oT","TOP","EO","P7","BOTTOM","aA","Zs","LEGACY","wr","DS","sh","bt","startArrowhead","endArrowhead","fr","il","flip","tn","j8","Un","currentItemStartArrowhead","currentItemEndArrowhead","4958","SLASH","6710","ne","re","le","se","fe","pe","he","me","ze","Re","Be","He","Ue","Ke","Xe","qe","st","ct","dt","ft","wt","kt","FL","We","mt","yA","BZ","lt","pw","ie","X9","xF","pL","jl","tt","nt","EQ","ve","nz","gt","W3","ae","Yy","zi","jY","ce","Pb","Qs","Et","iL","yt","u0","ht","JN","pt","be","getScene","reverse","qr","cx","ZP","keyPriority","BRACKET_LEFT","Gc","BRACKET_RIGHT","t5","IN","bO","selectedLinearElement","scene","I4","duplicateSelectedPoints","NA","Sy","yO","ek","focusContainer","Mn","HG","QD","cursorButton","pendingImageElementId","HTMLElement","lastPointerDownWith","lastCommittedPoint","g6","getPointAtIndexGlobalCoordinates","z8","draggingElement","startBoundElement","suggestedBindings","$c","oe","parse","r2","eK","UQ","Hg","openMenu","RY","selected","RT","DG","rB","wo","Pr","openDialog","QUESTION_MARK","ue","de","ge","Nd","iJ","kb","S_","lastIndexOf","F$","BF","h6","RJ","ye","xe","we","ke","Ee","Se","je","_e","Oe","Ce","Ie","Me","Te","Pe","De","Ae","Le","src","background","alt","referrerPolicy","onError","Ze","border","pointer","username","avatarUrl","Ne","library","getLatestLibrary","setLibrary","OL","created","Fe","Ye","axis","v2","Ge","Ve","AI","Ct","HL","xs","mh","ST","Je","$e","Qe","space","uD","W5","et","rt","ot","it","LW","PC","nw","Ut","qf","movePoints","index","point","normalizePoints","l2","Ww","gridModeEnabled","QUOTE","zenModeEnabled","xt","toLocaleLowerCase","7901","785","saveScene","imageExport","cut","copy","paste","copyStyles","pasteStyles","selectAll","deleteSelectedElements","duplicateSelection","sendBackward","bringForward","sendToBack","bringToFront","copyAsPng","copyAsSvg","ungroup","gridMode","zenMode","stats","addToLibrary","flipHorizontal","flipVertical","hyperlink","toggleLock","7047","REACT_APP_BACKEND_V2_GET_URL","REACT_APP_BACKEND_V2_POST_URL","REACT_APP_LIBRARY_URL","REACT_APP_LIBRARY_BACKEND","REACT_APP_PORTAL_URL","REACT_APP_WS_SERVER_URL","REACT_APP_FIREBASE_CONFIG","REACT_APP_GOOGLE_ANALYTICS_ID","REACT_APP_MATOMO_URL","REACT_APP_CDN_MATOMO_TRACKER_URL","REACT_APP_MATOMO_SITE_ID","REACT_APP_PLUS_APP","PKG_NAME","PKG_VERSION","IS_EXCALIDRAW_NPM_PACKAGE","JEST_WORKER_ID","gtag","event_category","event_label","_paq","8897","eS","devicePixelRatio","showWelcomeScreen","collaborators","currentChartType","HN","customType","isBindingEnabled","isSidebarDocked","isLoading","isResizing","isRotating","Fc","contextMenu","openSidebar","shown","previousSelectedElementIds","resizingElement","scrolledOutside","scrollX","scrollY","selectionElement","shouldCacheIgnoreZoom","white","showHyperlinkPopup","browser","export","server","5674","dz","i$","ps","exec","reason","spreadsheet","labels","split","elementBackground","elementStroke","chartWidth","chartHeight","VL","toLocaleString","y8","Vi","DEVELOPMENT","8982","6665","mQ","uR","HTMLCanvasElement","r8","excalidrawClipboard","wi","fileId","clipboardData","getData","readText","t2","oj","excalidraw","ClipboardItem","LO","png","t3","t4","t6","t7","t8","t9","writeText","documentElement","getAttribute","padding","margin","top","pageYOffset","scrollTop","body","select","setSelectionRange","execCommand","56","red","pink","grape","violet","indigo","blue","cyan","teal","green","lime","yellow","orange","canvasBackground","gray","black","6798","yE","eh","onConfirm","executeAction","onCancel","2134","It","Nt","Ht","Wt","Yt","finish","Bt","mn","gn","Rn","Gn","Vn","cr","ur","dr","Reflect","construct","sham","Proxy","Boolean","pr","Kr","_r","gF","Sr","bd","Er","n9","jr","syncHistory","actions","renderAction","this.renderAction","app","displayName","getElementsIncludingDeleted","getAppState","isActionEnabled","this.isActionEnabled","this.updater","registerAction","hypot","elementCache","recording","stateHistory","redoStack","lastEntry","generateEntry","this.generateEntry","dehydrateHistoryEntry","versionNonce","hydrateHistoryEntry","shouldCreateEntry","clearRedoStack","pop","pushEntry","zu","numericKey","fillable","OW","nb","e0","zb","XB","memo","actionManager","items","fitInViewport","viewportWidth","viewportHeight","onContextMenu","dangerous","checkmark","$b","Qm","Zd","M9","bZ","aV","flexBasis","flexWrap","gap","setAppState","onImageAction","Oo","keyBindingLabel","onPointerDown","pointerType","Uk","Col","Row","align","showExitZenModeBtn","container","small","whiteSpace","shade","exportPadding","onExportToPng","onExportToSvg","onExportToClipboard","offsetWidth","NL","maxWidthOrHeight","_c","replaceChildren","gridTemplateColumns","overflow","alignItems","marginLeft","userSelect","vU","BR","at","side","canDeviceFitSidebar","pC","CHECKED","FC","UNCHECKED","_C","heading","classList","Vq","tb","St","jt","_t","Tw","colSpan","renderCustomStats","Ot","Hk","toLocaleUpperCase","Mt","onLockToggle","onHandToolToggle","onPenModeToggle","renderTopRightUI","renderSidebars","renderWelcomeScreen","R6","welcomeScreenCenterTunnel","mainMenuTunnel","Out","insertOnCanvasDirectly","nn","WM","marginRight","Tt","Pt","Dt","At","Lt","chartType","$D","Zt","onInsertChart","autofocus","Rt","Ft","href","rel","h0","Kt","caption","Gt","isOr","shortcuts","endsWith","Vt","Xt","ED","qt","Jt","$t","Qt","en","exportOpts","onExportToBackend","saveFileToDisk","TP","xP","$h","renderCustomUI","rn","on","an","ln","sn","un","isPending","onToggle","onDrag","innerHTML","outerHTML","pO","onMouseEnter","onMouseLeave","draggable","onDragStart","dn","fn","pn","hn","libraryReturnUrl","location","origin","pathname","excalidrawLibrary","vn","libraryItems","onAddToLibrary","onInsertLibraryItems","pendingElements","selectedItems","onSelectItems","_N","item","dataTransfer","setData","excalidrawlib","NI","yo","flex","transform","flexDirection","bn","yn","wn","kn","forwardRef","En","rF","isInitialized","Sn","onInsertElements","Element","contains","addEventListener","removeEventListener","closest","Ks","KEYDOWN","resetLibrary","__isInternal","initialDockedState","onDock","Header","onRemoveFromLibrary","WV","jn","_n","On","Cn","In","by","Tn","footerCenterTunnel","welcomeScreenHelpHintTunnel","isTouchScreen","Dn","An","Ln","Zn","zn","Nn","__fallback","DefaultItems","LoadScene","SaveToActiveFile","Export","saveAsImage","SaveAsImage","Help","ClearCanvas","Separator","Group","Socials","ToggleTheme","ChangeCanvasBackground","Hn","Fn","Bn","renderCustomSidebar","ZC","FG","delay","renderJSONExportDialog","renderImageExportDialog","docked","EE","welcomeScreenMenuHintTunnel","$C","SHAPE_ACTIONS_MENU","maxHeight","welcomeScreenToolbarHintTunnel","jotaiScope","A3","Wn","w8","Kn","Yn","closable","duration","Xn","qn","Jn","$n","Qn","er","tr","nr","or","onSceneUpdated","onFontsLoaded","this.onFontsLoaded","family","weight","loadedFontFaces","mapElements","bI","JZ","loadFontsForElements","fonts","load","flat","ir","ar","lr","sr","fontWeight","hr","isSmScreen","mr","gr","vr","br","yr","xr","Or","Cr","Ir","Mr","Tr","Dr","Ar","horizontal","vertical","Lr","Zr","zr","Rr","Nr","Br","Hr","Fr","Ur","excalidrawRef","getCanvasOffsets","innerWidth","innerHeight","x0","readyPromise","ready","updateScene","updateLibrary","addFiles","resetScene","getSceneElementsIncludingDeleted","history","resetHistory","scrollToContent","getSceneElements","getFiles","refresh","setToast","setActiveTool","setCursor","resetCursor","toggleMenu","excalidrawContainerValue","excalidrawContainerRef","syncActionResult","registerAll","undoOnce","UE","redoOnce","zG","cursor","handleCanvasRef","handleCanvasContextMenu","onPointerMove","handleCanvasPointerMove","onPointerUp","handleCanvasPointerUp","onPointerCancel","removePointer","onTouchMove","handleTouchMove","handleCanvasPointerDown","onDoubleClick","handleCanvasDoubleClick","getNonDeletedElements","onDrop","handleAppOnDrop","tabIndex","handleKeyboardGlobally","togglePenMode","addElementsFromPasteOrLibrary","langCode","renderSidebar","nW","element","onLinkOpen","renderCanvas","unmounted","TEST","setState","addCallback","addEventListeners","refreshDeviceState","resizeObserver","ResizeObserver","updateDOMRect","observe","matchMedia","kV","Yx","sS","dockedSidebarBreakpoint","sk","getBoundingClientRect","v4","addListener","detachIsMobileMqHandler","this.detachIsMobileMqHandler","removeListener","URLSearchParams","search","restoreFileFromShare","initializeScene","jP","eB","disconnect","removeEventListeners","destroy","POINTER_UP","COPY","onCopy","PASTE","CUT","onCut","WHEEL","onWheel","nearestScrollableContainer","SCROLL","onScroll","MOUSE_MOVE","updateCurrentCursorPosition","KEYUP","onKeyUp","RESIZE","onResize","UNLOAD","onUnload","BLUR","DRAG_OVER","disableEvent","DROP","GESTURE_START","onGestureStart","GESTURE_CHANGE","onGestureChange","GESTURE_END","onGestureEnd","passive","fontfaces","detectScroll","Ip","onScrollChange","OF","updateLanguage","deselectElements","toggle","N1","AK","renderScene","record","dE","clientX","clientY","hs","Rg","replaceAllElements","shortcut","resumeRecording","isExistingElement","N_","b_","getViewportCoords","_i","sceneX","sceneY","tH","qP","onSubmit","viaKeyboard","excalidrawContainer","getElementAtPosition","includeBoundTextElement","getElementsAtPosition","includeLockedElements","preferSelected","wB","CJ","wX","Qu","getPointIndexUnderCursor","getSegmentMidpointHitCoords","POINTER","MOVE","oY","hoverPointIndex","arePointsEqual","segmentMidPointHoveredCoords","AUTO","pointers","pointerId","lastCenter","initialScale","initialDistance","withCmdOrCtrl","originInGrid","wC","scrollbars","_4","lastCoords","originalElements","resize","handleType","arrowDirection","center","hit","allHitElements","wasAddedToSelection","hasBeenDuplicated","hasHitCommonBoundingBoxOfSelectedElements","isHittingCommonBoundingBoxOfSelectedElements","drag","hasOccurred","eventListeners","onMove","onUp","boxSelection","elementIdsToErase","isOverEither","$9","handlePointerMoveOverScrollbars","savePointer","POINTER_MOVE","maybeHandleResize","maybeDragNewGenericElement","ALT","$V","handleEraser","shouldAddMidpoint","addMidpoint","flushSync","pointerDownState","segmentMidpoint","added","handlePointDragging","maybeSuggestBindingsForLinearElementAtCoords","isDragging","isASelectedElement","o8","maybeSuggestBindingForAll","simulatePressure","pressures","pressure","o4","handleBoxSelection","Yp","link","isOverHorizontal","translateCanvas","isOverVertical","handlePointerUp","initializeImageDimensions","Qp","lastPointerDown","lastPointerUp","erase","eraseElements","restoreReadyToEraseElements","zq","el","wZ","elementCenterX","elementCenterY","Mj","Fp","m0","Component","cW","rc","createRef","lastScenePointer","this.focusContainer","autoFocus","this.getSceneElementsIncludingDeleted","this.getSceneElements","replaceFiles","addNewImagesToImageCache","setCurrentState","this.onUnload","this.disableEvent","this.resetHistory","resetLoadingState","launchQueue","setConsumer","getFile","loadFileToCanvas","File","initialData","merge","nu","repairBindings","this.refreshDeviceState","this.renderScene","userState","button","getComputedStyle","getPropertyValue","Eu","scale","renderConfig","selectionColor","remotePointerViewportCoords","remotePointerButton","remoteSelectedElementIds","remotePointerUsernames","remotePointerUserStates","isExporting","renderScrollbars","callback","atLeastOneVisibleElement","scrollBars","scheduleImageRefresh","EXCALIDRAW_THROTTLE_RENDER","Ds","HM","cutAll","copyAll","this.cutAll","this.copyAll","onTapStart","this.onTapStart","resetTapTwice","Gj","touches","onTapEnd","this.onTapEnd","resetContextMenuTimer","elementFromPoint","startsWith","Pn","Wr","createImageElement","insertImageElement","onPaste","addTextFromPaste","this.addElementsFromPasteOrLibrary","ET","TE","this.setAppState","this.removePointer","this.toggleLock","this.togglePenMode","this.onHandToolToggle","zoomCanvas","this.zoomCanvas","cancelInProgresAnimation","this.scrollToContent","fitToContent","animate","B4","e.cancelInProgresAnimation","this.translateCanvas","this.setToast","caches","open","blob","replaceState","iC","informMutation","this.onSceneUpdated","this.toggleMenu","_Z","PAGE_UP","PAGE_DOWN","handleKeyDown","Iw","simultaneouslyUpdated","startTextEditing","SPACE","e_","this.setActiveTool","wO","this.setCursor","this.resetCursor","isTouchScreenMultiTouchGesture","this.isTouchScreenMultiTouchGesture","this.startTextEditing","insertAtParentCenter","getTextWysiwygSnappedToCenterPosition","getTextElementAtPosition","Yv","AT","w_","HE","getElementIndex","insertElementAtIndex","handleTextWysiwyg","this.handleCanvasDoubleClick","YS","getElementLinkAtPosition","this.getElementLinkAtPosition","wq","redirectToLink","this.redirectToLink","hitLinkElement","ag","EXCALIDRAW_LINK","defaultPrevented","opener","this.handleCanvasPointerMove","resetShouldCacheIgnoreZoomDebounced","handlePointerMove","lastUncommittedPoint","maybeSuggestBindingAtCursor","Lx","qx","buttons","n2","transformHandleType","Pp","lV","TEXT","CROSSHAIR","handleHoverSelectedLinearElement","this.handleEraser","xY","this.handleTouchMove","this.handleCanvasPointerDown","updateGestureOnPointerDown","getSelection","anchorNode","removeAllRanges","maybeOpenContextMenuAfterPointerDownOnTouchDevices","maybeCleanupAfterMissingPointerUp","handleCanvasPanUsingWheelOrSpaceDrag","Oh","MAIN","TOUCH","initialPointerDownState","handleDraggingScrollBar","clearSelectionIfNotUsingSelection","updateBindingEnabledOnPointerMove","handleSelectionOnPointerDown","handleLinearElementOnPointerDown","handleFreeDrawElementOnPointerDown","createGenericElementOnPointerDown","onPointerMoveFromPointerDownHandler","onPointerUpFromPointerDownHandler","onKeyDownFromPointerDownHandler","onKeyUpFromPointerDownHandler","handleTextOnPointerDown","this.handleCanvasPointerUp","this.maybeOpenContextMenuAfterPointerDownOnTouchDevices","nM","this.resetContextMenuTimer","this.handleCanvasPanUsingWheelOrSpaceDrag","platform","GRABBING","this.clearSelectionIfNotUsingSelection","this.handleSelectionOnPointerDown","xx","handlePointerDown","hitElement","linearElementEditor","didAddPoint","clearSelection","iE","this.handleTextOnPointerDown","this.handleFreeDrawElementOnPointerDown","KE","Y9","this.createImageElement","vw","this.handleLinearElementOnPointerDown","this.createGenericElementOnPointerDown","this.restoreReadyToEraseElements","this.eraseElements","initializeImage","imageFile","imageElement","showCursorImagePreview","bp","generateIdForFile","dataURL","maxSize","trunc","KG","setImagePreviewCursor","Sf","mimeType","lastRetrieved","updateImageCache","image","PK","drawImage","toDataURL","I$","description","extensions","this.initializeImageDimensions","naturalHeight","naturalWidth","Xx","fileIds","updatedFiles","erroredFiles","oA","LL","this.updateBindingEnabledOnPointerMove","cz","this.maybeSuggestBindingAtCursor","this.maybeSuggestBindingsForLinearElementAtCoords","DK","this.handleCanvasRef","handleWheel","TOUCH_START","TOUCH_END","bv","file","cT","wf","gY","ZY","openLibraryMenu","this.handleCanvasContextMenu","SECONDARY","getContextMenuItems","this.maybeDragNewGenericElement","EJ","E0","this.maybeHandleResize","vY","this.getContextMenuItems","deltaX","deltaY","sign","log10","this.savePointer","isNaN","onPointerUpdate","pointersMap","this.updateDOMRect","this.refresh","3807","eQ","4499","Option","colors","showInput","updated","useImperativeHandle","spellCheck","zIndex","7046","confirmText","cancelText","actionType","8396","closeOnClickOutside","createPortal","labelledBy","maxWidth","xp","6428","visibility","inset","1881","9206","fillRect","entries","strokeRect","outputType","jpg","libItem","onRemove","defaultValue","placeholder","onSuccess","updateItemsInStorage","authorName","githubHandle","twitterHandle","website","localStorage","getItem","source","pb","Blob","append","FormData","fetch","ok","json","url","removeItem","statusText","setItem","required","rows","pattern","count","Trigger","YA","Content","onClickOutside","onSelect","Item","Tl","Hy","Nw","alert","5440","2891","overflowX","overflowY","unstable_batchedUpdates","9430","qQ","__isFallback","dockable","rendered","D.current.onClose","D.current.onDock","Context","5644","circleWidth","cy","strokeMiterlimit","7239","justifyItems","1319","ToolIcon","disabled","requestAnimationFrame","1894","bK","Js","onPointerEnter","minWidth","textContent","onPointerLeave","6773","mobile","UserList_mobile","8888","getState","subscribe","getServerState","9127","querySelectorAll","N7","Children","toArray","isValidElement","ItemLink","ItemCustom","2739","qZ","4122","t.Z","4215","6772","CustomEvent","MENU_ITEM_SELECT","bubbles","cancelable","3646","D7","DJ","J8","Mw","NW","Zm","_U","a1","kL","oQ","mirror","focusable","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","maskType","maskUnits","mask","fillRule","clipRule","clipPath","4709","LiveCollaborationTrigger","QT","isCollaborating","2335","jo","_9","Rx","sA","zK","WR","ay","hR","ZF","ah","UO","_D","G6","userAgent","brave","isBrave","FOCUS","BEFORE_UNLOAD","STATE_CHANGE","HASHCHANGE","VISIBILITY_CHANGE","gif","webp","bmp","ico","binary","EXCALIDRAW_EXPORT_SOURCE","addLibrary","LEFT","RIGHT","434","vZ","decodePngMetadata","DOMException","FileReader","readAsText","onloadend","n.onloadend","readyState","DONE","decodeSvgMetadata","dS","_M","handle","refreshDimensions","HT","wJ","toBlob","crypto","subtle","digest","onload","r.onload","onerror","r.onerror","readAsDataURL","atob","ArrayBuffer","pica","features","_create_blob","u._create_blob","out_canvas","out_blob","TextEncoder","getAsFileSystemHandle","arrayBuffer","readAsArrayBuffer","1393","mimeTypes","multiple","legacySetup","setInterval","clearInterval","fileName","extension","673","encodePngMetadata","encodeSvgMetadata","getTEXtChunk","o.onload","readAsBinaryString","TextDecoder","compress","encoding","compressed","encoded","metadata","9485","I_","5523","BQ","7053","Di","xS","zh","lastLibraryItems","updateQueue","getLastUpdateTask","this.getLastUpdateTask","notifyListeners","this.notifyListeners","onLibraryChange","this.resetLibrary","this.getLatestLibrary","prompt","defaultStatus","confirm","numShapes","finally","this.setLibrary","minX","minY","libraryUrl","idToken","excalidrawAPI","getInitialLibraryItems","decodeURIComponent","once","oldURL","679","lY","selection","diamond","arrow","freedraw","eraser","custom","hand","strokeSharpness","boundElementIds","C3","customData","font","$2","R8","getNormalizedPoints","isLibraryOpen","isLibraryMenuDocked","6794","4929","rj","sw","U1","pX","8290","getNonDeletedElement","f0","QG","uu","T_","newSize","RB","j_","MZ","pointFromAbsoluteCoords","fb","8925","CM","IX","Pi","UC","Y5","F9","getElementAbsoluteCoords","getBoundTextElementPosition","maxX","maxY","bar","dot","triangle","getMinMaxXYWithBoundText","R2","midX","midY","2325","threshold","xj","c9","5637","Image","parseFromString","DOMParser","nodeName","hasAttribute","1047","ox","Uo","kK","n_","rotation","6938","mapElementToScene","pointerOffset","prevSelectedPointsIndices","lastClickedPoint","getPointsGlobalCoordinates","_getShiftLockedDelta","createPointAt","getPointGlobalCoordinates","eH","POINT_HANDLE_SIZE","H5","yB","lk","getEditorMidPoints","getSegmentMidPointIndex","Jj","addPoints","_updatePoints","j.getEditorMidPoints","updateEditorMidPointsCache","j.updateEditorMidPointsCache","isSegmentTooShort","getSegmentMidPoint","j.getSegmentMidpointHitCoords","j.getBoundTextElementPosition","j.getMinMaxXYWithBoundText","j.getElementAbsoluteCoords","1935","2791","bG","lD","jd","yq","Number","isFinite","create","getPrototypeOf","h2","Qy","8634","atan2","xB","N2","orig","latest","5710","H_","cw","mY","minHeight","wordBreak","innerText","offsetHeight","measureText","fromCodePoint","codePointAt","calculate","getCache","6906","$g","selectionStart","selectionEnd","dir","dataset","backfaceVisibility","outline","overflowWrap","boxSizing","onpaste","oninput","C.oninput","onkeydown","C.onkeydown","dispatchEvent","Event","repeat","onblur","HTMLInputElement","n.onblur","SVGElement","capture","267","mouse","pen","touch","Lu","1974","6797","242","8211","unshift","lang","9487","6066","NINE","6552","EK","yW","MAX_SAFE_INTEGER","3024","Fl","i1","getDimensions","quality","serializeAsJSON","5001","6954","3063","runningLength","taper","distance","vector","Path2D","thinning","smoothing","streamline","easing","lw","globalAlpha","lineJoin","lineCap","dZ","isConnected","fillText","zoomValue","boundTextElementVersion","translate","canvasOffsetX","canvasOffsetY","rotate","clearRect","REACT_APP_DEBUG_ENABLE_TEXT_CONTAINER_BOUNDING_BOX","imageSmoothingEnabled","prepend","3547","M_","ACTIVE","AWAY","IDLE","Q5","renderSelection","renderGrid","setTransform","elementX1","elementY1","elementX2","elementY2","selectionColors","dashed","getLineDash","closePath","actualBoundingBoxDescent","actualBoundingBoxAscent","roundRect","tJ","w1","quadraticCurveTo","offsetX","offsetY","1564","callbacks","nonDeletedElements","elementsMap","sceneMapById","sceneMapByElement","8120","4162","EXCALIDRAW_ASSET_PATH","75","2264","756","IH","bottom","1868","746","6340","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","charAt","HTMLBRElement","HTMLTextAreaElement","HTMLSelectElement","o.flush","o.cancel","l.flush","cancelAnimationFrame","l.cancel","easeFn","fullscreenElement","requestFullscreen","exitFullscreen","reject","textBaseline","getImageData","parentElement","scrollHeight","clientHeight","detail","checkForDefaultPrevented","9669","7984","1639","9729","1273","8303","9577","3147","3940","9787","5156","9649","arg","_invoke","__await","delegate","_sent","dispatchException","resultName","nextLoc","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","completion","reset","asyncIterator","toStringTag","isGeneratorFunction","t.isGeneratorFunction","t.mark","setPrototypeOf","__proto__","awrap","t.awrap","AsyncIterator","async","t.async","t.keys","rval","complete","delegateYield","8114","2975","regeneratorRuntime","globalThis","7017","3173","ReferenceError","8950","8821","5169","7169","2312","2248","2726","7245","5901","2577","1930","6655","9139","5605","getRandomValues","5284","1463","4451","s.n","s.t","getOwnPropertyNames","i.default","s.d","s.e","s.u","s.o","s.l","getElementsByTagName","charset","timeout","s.r","baseURI","s.f.j","request","webpackChunkExcalidrawLib","Button","Excalidraw","FONT_FAMILY","Footer","MIME_TYPES","MainMenu","Sidebar","THEME","WelcomeScreen","bumpVersion","defaultLang","exportToBlob","exportToCanvas","exportToClipboard","exportToSvg","getFreeDrawSvgPath","getSceneVersion","isInvisiblySmallElement","isLinearElement","languages","loadFromBlob","loadLibraryFromBlob","loadSceneOrLibraryFromBlob","mergeLibraryItems","mutateElement","newElementWith","normalizeLink","parseLibraryTokensFromUrl","restoreAppState","restoreElements","restoreLibraryItems","sceneCoordsToViewportCoords","serializeLibraryAsJSON","useDevice","useHandleLibrary","useI18n","viewportCoordsToSceneCoords","Logo","Heading","Menu","MenuItem","MenuItemLink","MenuItemHelp","MenuItemLoadScene","MenuItemLiveCollaborationTrigger","Center","Hints","MenuHint","ToolbarHint","HelpHint","unstable_createStore"]}},{"offset":{"line":1535,"column":0},"map":{"version":3,"file":"excalidraw.js","lineCount":135,"mappings":"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\/B9B;AA8B4CjB,GA9B5C,EA+BgDkB,UA\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\/B,CAAA,CAAA,EAe+BA,IAf\/B,CAAA,EAAA,+CAAA,CAAA9E;AAiCAqG,IAAAA,CAAAA,sCAAAA,GAAAjG,IAAAA,CAAAA,sBAAA,CAAUkG,IAAAA,CAAAA,sBAAV,EAAUA,QAAAA,CACP9F,mBADO8F,CACP9F;AADH,MAEQ+F,qBAAMrI,IAAAA,CAAAA,kCAAD,EAFb,EAGQsI,6BAAStF,IAAAA,CAAAA,qBAAA,CAAA,IAACiD,IAAAA,CAAAA,6BAAD,CAACA,IAAD,EAACA,CAAD,EAACA,CAAD,EAACA,IAAAA,CAAAA,wCAAD,EAACA,CAAAA,IAAAA,CAAAA,sDAAAA,EAA8BoC,kBAA9BpC,CAAD,EAA+BoC,IAA\/B,CAAA,CAHjB;AAAA,SAKcE,IAAAA,CAAAA,kCAAA,CAAAF,kBAAA,CALd,IAMoBtE,IAAAA,CAAAA,gBAAAA,CAAIuE,0BAAJvE,CANpB,IAOoBA,IAAAA,CAAAA,gBAAD,CAAMyE,GAAAA,IAAAA,CAAAA,gCAAAA,GAAN,CAPnB,IAQoBzE,IAAAA,CAAAA,gBAAAA,CAAK0E,IAAAA,CAAAA,8CAAD,EAAJ1E,CARpB,GAAA,IAAA,GASO2C,gDAAAA,CAAepE,mBAAfoE,CATP;AACGpE,CADH,EAAA,IAAA6B,IAAAA,CAAAA,6BAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAAC,IAAAA,CAAAA,wCAAA,EAAA,CAAA+B,IAAAA,CAAAA,oBAAA,CAAA,EAAA,IAAA,CAAA,EAAA,qCAAA,CAAAgC;ACjEEO,IAAAA,CAAAA,mCAAGC,CAAAA,WAAH,EAAA;;","sources":["frontend\/handler\/draw.cljs","frontend\/extensions\/excalidraw.cljs","shadow\/loader.js","shadow\/module\/excalidraw\/prepend.js","node_modules\/@excalidraw\/excalidraw\/dist\/excalidraw.production.min.js","frontend\/rum.cljs","cljs\/core.cljs","frontend\/db.cljs","frontend\/handler\/editor.cljs","frontend\/state.cljs","goog\/object\/object.js","rum\/core.cljs"],"sourcesContent":["(ns frontend.handler.draw\n  \"Provides util handler fns for drawing\"\n  (:refer-clojure :exclude [load-file])\n  (:require [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.handler.file :as file-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [logseq.graph-parser.config :as gp-config]\n            [promesa.core :as p]))\n\n(defn create-draws-directory!\n  [repo]\n  (when repo\n    (let [repo-dir (config\/get-repo-dir repo)]\n      (util\/p-handle\n       (fs\/mkdir! (str repo-dir (str \"\/\" gp-config\/default-draw-directory)))\n       (fn [_result] nil)\n       (fn [_error] nil)))))\n\n(defn save-excalidraw!\n  [file data]\n  (let [path file\n        repo (state\/get-current-repo)]\n    (when repo\n      (let [repo-dir (config\/get-repo-dir repo)]\n        (->\n         (p\/do!\n          (create-draws-directory! repo)\n          (fs\/write-file! repo repo-dir path data nil)\n          (db\/transact! repo\n                        [{:file\/path path\n                          :block\/name (util\/page-name-sanity-lc file)\n                          :block\/file {:file\/path path}\n                          :block\/journal? false}]))\n         (p\/catch (fn [error]\n                    (prn \"Write file failed, path: \" path \", data: \" data)\n                    (js\/console.dir error))))))))\n\n(defn load-excalidraw-file\n  [file ok-handler]\n  (when-let [repo (state\/get-current-repo)]\n    (util\/p-handle\n     (file-handler\/load-file repo file)\n     (fn [content]\n       (ok-handler content))\n     (fn [error]\n       (println \"Error loading \" file \": \"\n                error)))))\n\n(defonce default-content\n  (util\/format\n   \"{\\n  \\\"type\\\": \\\"excalidraw\\\",\\n  \\\"version\\\": 2,\\n  \\\"source\\\": \\\"%s\\\",\\n  \\\"elements\\\": [],\\n  \\\"appState\\\": {\\n    \\\"viewBackgroundColor\\\": \\\"#FFF\\\",\\n    \\\"gridSize\\\": null\\n  }\\n}\"\n   config\/website))\n\n(defn file-name\n  []\n  (str (date\/get-date-time-string-2) \".excalidraw\"))\n\n(defn create-draw-with-default-content\n  [current-file]\n  (when-let [repo (state\/get-current-repo)]\n    (p\/let [exists? (fs\/file-exists? (config\/get-repo-dir repo)\n                                     (str gp-config\/default-draw-directory current-file))]\n      (when-not exists?\n        (save-excalidraw! current-file default-content)))))\n","(ns frontend.extensions.excalidraw\n  (:require [clojure.string :as string]\n            ;; NOTE: Always use production build of excalidraw\n            ;; See-also: https:\/\/github.com\/excalidraw\/excalidraw\/pull\/3330\n            [\"@excalidraw\/excalidraw\/dist\/excalidraw.production.min\" :refer [Excalidraw serializeAsJSON]]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.draw :as draw]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.rum :as r]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [goog.functions :refer [debounce]]\n            [rum.core :as rum]\n            [frontend.mobile.util :as mobile-util]))\n\n(def excalidraw (r\/adapt-class Excalidraw))\n\n(defn from-json\n  [text]\n  (when-not (string\/blank? text)\n    (try\n      (js\/JSON.parse text)\n      (catch :default e\n        (println \"from json error:\")\n        (js\/console.dir e)\n        (notification\/show!\n         (util\/format \"Could not load this invalid excalidraw file\")\n         :error)))))\n\n(defn- update-draw-content-width\n  [state]\n  (when-let [el ^js (rum\/dom-node state)]\n    (loop [el (.querySelector el \".draw-wrap\")]\n      (cond\n        (or (nil? el) (undefined? el) (undefined? (.-classList el)))\n        nil\n\n        (..  el -classList (contains \"block-content\"))\n        (let [client-width (.-clientWidth el)\n              width (if (zero? client-width)\n                      (.-width (.-getBoundingClientRect el))\n                      client-width)]\n          (reset! (::draw-width state) width))\n\n        :else\n        (recur (.-parentNode el))))\n    state))\n\n(defn excalidraw-theme [ui-theme]\n  ;; One of these constants are meant to be used as a 'theme' argument for escalidraw:\n  ;; https:\/\/github.com\/excalidraw\/excalidraw\/blob\/master\/src\/constants.ts#L75\n  ;; But they are missing from the prod build of excalidraw we're using.\n  ;; They map to \"light\" and \"dark\", happens that :ui\/theme uses same values, so we are safe to pass it directly, for now.\n  ;; Escalidraw may migrate to different values for these constants in future versions,\n  ;; so, in order to not watch out for it every time we bump a new version we better migrate to constants as soon as they appear in a prod build.\n  ui-theme)\n\n(rum\/defcs draw-inner < rum\/reactive\n  (rum\/local 800 ::draw-width)\n  (rum\/local true ::zen-mode?)\n  (rum\/local false ::view-mode?)\n  (rum\/local false ::grid-mode?)\n  (rum\/local nil ::elements)\n  (rum\/local nil ::resize-observer)\n  {:did-mount (fn [state]\n                (reset! (::resize-observer state) (js\/ResizeObserver. (debounce #(reset! (::draw-width state) 0) 300)))\n                (.observe @(::resize-observer state) (ui\/main-node))\n                (update-draw-content-width state))\n   :did-update update-draw-content-width\n   :will-unmount (fn [state] (.disconnect @(::resize-observer state)))}\n  [state data option]\n  (let [ref (rum\/create-ref)\n        *draw-width (get state ::draw-width)\n        *zen-mode? (get state ::zen-mode?)\n        *view-mode? (get state ::view-mode?)\n        *grid-mode? (get state ::grid-mode?)\n        wide-mode? (state\/sub :ui\/wide-mode?)\n        *elements (get state ::elements)\n        {:keys [file block-uuid]} option]\n    (when data\n      [:div.overflow-hidden {:on-mouse-down (fn [e] (util\/stop e))}\n       [:div.my-1 {:style {:font-size 10}}\n        [:a.mr-2 {:on-click ui-handler\/toggle-wide-mode!}\n         (util\/format \"Wide Mode (%s)\" (if wide-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *zen-mode? not)}\n         (util\/format \"Zen Mode (%s)\" (if @*zen-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *view-mode? not)}\n         (util\/format \"View Mode (%s)\" (if @*view-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *grid-mode? not)}\n         (util\/format \"Grid Mode (%s)\" (if @*grid-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(when-let [block (db\/pull [:block\/uuid block-uuid])]\n                               (editor-handler\/edit-block! block :max block-uuid))}\n         \"Edit Block\"]]\n       [:div.draw-wrap\n        {:ref ref\n         :on-mouse-down (fn [e]\n                          (util\/stop e)\n                          (state\/set-block-component-editing-mode! true))\n         :on-blur #(state\/set-block-component-editing-mode! false)\n         :style {:width  @*draw-width\n                 :height (if wide-mode? 650 500)}}\n        (excalidraw\n         (merge\n          {:on-change (fn [elements app-state]\n                        (when-not (or (= \"down\" (gobj\/get app-state \"cursorButton\"))\n                                      (gobj\/get app-state \"draggingElement\")\n                                      (gobj\/get app-state \"editingElement\")\n                                      (gobj\/get app-state \"editingGroupId\")\n                                      (gobj\/get app-state \"editingLinearElement\"))\n                          (let [elements->clj (js->clj elements {:keywordize-keys true})]\n                            (when (and (seq elements->clj)\n                                       (not= elements->clj @*elements)) ;; not= requires clj collections\n                              (reset! *elements elements->clj)\n                              (draw\/save-excalidraw!\n                               file\n                               (serializeAsJSON elements app-state))))))\n\n           :zen-mode-enabled @*zen-mode?\n           :view-mode-enabled @*view-mode?\n           :grid-mode-enabled @*grid-mode?\n           :on-pointer-down #(.. (rum\/deref ref) -firstChild focus)\n           :initial-data data\n           :theme (excalidraw-theme (state\/sub :ui\/theme))}))]])))\n\n(rum\/defcs draw-container < rum\/reactive\n  {:init (fn [state]\n           (let [[option] (:rum\/args state)\n                 file (:file option)\n                 *data (atom nil)\n                 *loading? (atom true)]\n             (when file\n               (draw\/load-excalidraw-file\n                file\n                (fn [data]\n                  (let [data (from-json data)]\n                    (reset! *data data)\n                    (reset! *loading? false)))))\n             (assoc state\n                    ::data *data\n                    ::loading? *loading?)))}\n  [state option]\n  (let [*data (get state ::data)\n        *loading? (get state ::loading?)\n        loading? (rum\/react *loading?)\n        data (rum\/react *data)\n        db-restoring? (state\/sub :db\/restoring?)]\n    (when (:file option)\n      (cond\n        db-restoring?\n        [:div.ls-center (ui\/loading)]\n\n        (false? loading?)\n        (draw-inner data option)\n\n        :else\n        nil))))\n\n(rum\/defc draw < rum\/reactive\n  [option]\n  (let [repo (state\/get-current-repo)\n        granted? (state\/sub [:nfs\/user-granted? repo])]\n    ;; Web granted\n    (when-not (and (config\/local-db? repo)\n                   (not granted?)\n                   (not (util\/electron?))\n                   (not (mobile-util\/native-platform?)))\n      (draw-container option))))\n","goog.module(\"shadow.loader\");\ngoog.module.declareLegacyNamespace();\n\nconst GMM = goog.require(\"goog.module.ModuleManager\");\nconst GML = goog.require(\"goog.module.ModuleLoader\");\n\nconst GO = goog.require(\"goog.object\");\nconst GHUC = goog.require(\"goog.html.uncheckedconversions\");\nconst GSC = goog.require(\"goog.string.Const\");\n\n\/** @define {boolean} *\/\nconst TEST = goog.define(\"shadow.loader.TEST\", false);\n\n\/\/ this is written in JS so it doesn't depend on cljs.core\n\nconst ml = new GML();\nml.setSourceUrlInjection(true);\n\nconst mm = GMM.getInstance();\nmm.setLoader(ml);\n\nlet initCalled = false;\n\nfunction ensureInitWasCalled () {\n  if (!initCalled) {\n    throw new Error(\n      \"shadow.loader API was called before shadow.loader.init!\\n\" +\n        \"You are probably calling module loader too early before shadow-cljs got fully initialized.\"\n    );\n  }\n};\n\nfunction init (uriPrefix) {\n  if (TEST) return;\n\n  if (initCalled) {\n    throw new Error(\n      \"shadow.loader.init was already called! If you are calling it manually set :module-loader-init false in your config.\"\n    );\n  }\n\n  if (goog.global.shadow$modules) {\n    mm.setAllModuleInfo(goog.global.shadow$modules[\"infos\"]);\n\n    var uris = goog.global.shadow$modules[\"uris\"];\n\n    \/\/ this is absurd. the uris are generated by the compiler. should be trusted already.\n    \/\/ I would really like to know how Google integrates this data into their builds\n    var trustReason = GSC.from(\"generated by compiler\");\n\n    GO.getKeys(uris).forEach(function (key) {\n      var module_uris = uris[key];\n      if (module_uris.length == 0) {\n        \/\/ default module is added without uris since it will always be loaded\n        \/\/ when this is called\n        mm.getModuleInfo(key).setLoaded();\n      } else {\n        var trusted_uris = [];\n        module_uris.forEach(function (module_uri) {\n          var trusted =\n            GHUC.trustedResourceUrlFromStringKnownToSatisfyTypeContract(\n              trustReason,\n              uriPrefix + module_uri\n            );\n          trusted_uris.push(trusted);\n        });\n        mm.getModuleInfo(key).setTrustedUris(trusted_uris);\n      }\n    });\n\n    initCalled = true;\n  }\n};\n\nfunction getModuleManager() {\n  return mm;\n};\n\nfunction getModuleLoader() {\n  return ml;\n};\n\n\/\/ allow calling (shadow.loader\/load :with-a-keyword)\nfunction string_id(id) {\n  var result = id.toString();\n  if (result.charAt(0) == \":\") {\n    result = result.substring(1);\n  }\n  return result;\n};\n\nfunction set_load_start(id) {\n  mm.beforeLoadModuleCode(id);\n};\n\n\/\/ FIXME: id no longer required, just keeping it in case someone ends up using old closure lib\nfunction set_loaded (id) {\n  mm.setLoaded(id);\n};\n\n\/\/ ignored. only for cljs.loader compat\nfunction set_loaded_BANG_ () {};\n\nfunction loaded_QMARK_(id) {\n  if (TEST) {\n    return true;\n  }\n\n  return mm.getModuleInfo(string_id(id)).isLoaded();\n};\n\nfunction with_module(\n  moduleId,\n  fn,\n  opt_handler,\n  opt_noLoad,\n  opt_userInitiated,\n  opt_preferSynchronous\n) {\n  ensureInitWasCalled();\n  return mm.execOnLoad(\n    string_id(moduleId),\n    fn,\n    opt_handler,\n    opt_noLoad,\n    opt_userInitiated,\n    opt_preferSynchronous\n  );\n};\n\nfunction load (id, cb) {\n  if (TEST) {\n    var result = goog.async.Deferred.succeed();\n    if (cb) {\n      result = result.then(cb);\n    }\n    return result;\n  }\n\n  ensureInitWasCalled();\n  id = string_id(id);\n  if (cb) {\n    mm.execOnLoad(id, cb);\n  }\n  return mm.load(id);\n};\n\nfunction load_multiple(ids, opt_userInitiated) {\n  if (TEST) {\n    var result = {};\n    for (const id of ids) {\n      result[id] = goog.async.Deferred.succeed();\n    }\n    return result;\n  }\n  ensureInitWasCalled();\n  return mm.loadMultiple(ids, opt_userInitiated);\n};\n\nfunction prefetch (id) {\n  if (TEST) return;\n\n  ensureInitWasCalled();\n  mm.prefetchModule(string_id(id));\n};\n\nfunction preload (id) {\n  if (TEST) return;\n\n  ensureInitWasCalled();\n  return mm.preloadModule(string_id(id));\n};\n\nexports = {\n    preload,\n    prefetch,\n    load_multiple,\n    load,\n    with_module,\n    loaded_QMARK_,\n    set_loaded_BANG_,\n    set_loaded,\n    set_load_start,\n    getModuleLoader,\n    getModuleManager,\n    init\n};","\nshadow.loader.set_load_start('excalidraw');","shadow$provide[595] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\/*! For license information please see excalidraw.production.min.js.LICENSE.txt *\/\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\"),require(\"react-dom\")):\"function\"==typeof define&&define.amd?define([\"react\",\"react-dom\"],t):\"object\"==typeof exports?exports.ExcalidrawLib=t(require(\"react\"),require(\"react-dom\")):e.ExcalidrawLib=t(e.React,e.ReactDOM)}(self,(function(e,t){return function(){var n,r,o,i,a={5779:function(e,t){\"use strict\";t.N=void 0;var n=\/^([^\\w]*)(javascript|data|vbscript)\/im,r=\/&#(\\w+)(^\\w|;)?\/g,o=\/&(newline|tab);\/gi,i=\/[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]\/gim,a=\/^.+(:|&colon;)\/gim,l=[\".\",\"\/\"];t.N=function(e){var t,s=(t=e||\"\",t.replace(r,(function(e,t){return String.fromCharCode(t)}))).replace(o,\"\").replace(i,\"\").trim();if(!s)return\"about:blank\";if(function(e){return l.indexOf(e[0])>-1}(s))return s;var c=s.match(a);if(!c)return s;var u=c[0];return n.test(u)?\"about:blank\":s}},45:function(e,t,n){\"use strict\";function r(e){var t,n,o=\"\";if(\"string\"==typeof e||\"number\"==typeof e)o+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=\" \"),o+=n);else for(t in e)e[t]&&(o&&(o+=\" \"),o+=t);return o}function o(){for(var e,t,n=0,o=\"\";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=\" \"),o+=t);return o}n.d(t,{Z:function(){return o}})},6233:function(e,t){var n;n=function(e){e.version=\"0.3.0\";var t=function(){for(var e=0,t=new Array(256),n=0;256!=n;++n)e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=n)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1,t[n]=e;return\"undefined\"!=typeof Int32Array?new Int32Array(t):t}(),n=\"undefined\"!=typeof Buffer;function r(e){for(var n=-1,r=0,o=e.length-7;r<o;)n=(n=(n=(n=(n=(n=(n=(n=n>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])])>>>8^t[255&(n^e[r++])];for(;r<o+7;)n=n>>>8^t[255&(n^e[r++])];return-1^n}e.table=t,e.bstr=function(e){if(e.length>32768&&n)return r(new Buffer(e));for(var o=-1,i=e.length-1,a=0;a<i;)o=t[255&(o^e.charCodeAt(a++))]^o>>>8,o=t[255&(o^e.charCodeAt(a++))]^o>>>8;return a===i&&(o=o>>>8^t[255&(o^e.charCodeAt(a))]),-1^o},e.buf=function(e){if(e.length>1e4)return r(e);for(var n=-1,o=0,i=e.length-3;o<i;)n=(n=(n=(n=n>>>8^t[255&(n^e[o++])])>>>8^t[255&(n^e[o++])])>>>8^t[255&(n^e[o++])])>>>8^t[255&(n^e[o++])];for(;o<i+3;)n=n>>>8^t[255&(n^e[o++])];return-1^n},e.str=function(e){for(var n,r,o=-1,i=0,a=e.length;i<a;)(n=e.charCodeAt(i++))<128?o=o>>>8^t[255&(o^n)]:n<2048?o=(o=o>>>8^t[255&(o^(192|n>>6&31))])>>>8^t[255&(o^(128|63&n))]:n>=55296&&n<57344?(n=64+(1023&n),r=1023&e.charCodeAt(i++),o=(o=(o=(o=o>>>8^t[255&(o^(240|n>>8&7))])>>>8^t[255&(o^(128|n>>2&63))])>>>8^t[255&(o^(128|r>>6&15|3&n))])>>>8^t[255&(o^(128|63&r))]):o=(o=(o=o>>>8^t[255&(o^(224|n>>12&15))])>>>8^t[255&(o^(128|n>>6&63))])>>>8^t[255&(o^(128|63&n))];return-1^o}},\"undefined\"==typeof DO_NOT_EXPORT_CRC?n(t):n({})},4739:function(e,t,n){\"use strict\";n.d(t,{Dv:function(){return N},KO:function(){return H},Vv:function(){return k},b9:function(){return B},cn:function(){return R},zt:function(){return Z}});var r=n(9787);const o=Symbol(),i=e=>!!e[o],a=e=>{var t,n;null==(n=(t=e[o]).c)||n.call(t)},l=(e,t)=>{const n=e[o].o,r=t[o].o;return n===r||e===r||i(n)&&l(n,t)},s=e=>{const t={o:e,c:null},n=new Promise((n=>{t.c=()=>{t.c=null,n()},e.then(t.c,t.c)}));return n[o]=t,n};var c=Object.defineProperty,u=Object.defineProperties,d=Object.getOwnPropertyDescriptors,f=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;const g=e=>\"init\"in e,v=\"r\",b=\"w\",y=\"c\",x=\"s\",w=e=>{const t=new WeakMap,n=new WeakMap,r=new Map;let c,w;if(c=new Set,w=new Set,e)for(const[n,r]of e){const e={v:r,r:0,d:new Map};Object.freeze(e),g(n)||console.warn(\"Found initial value for derived atom which can cause unexpected behavior\",n),t.set(n,e)}const k=new WeakMap,E=new WeakMap,S=e=>{let t=E.get(e);return t||(t=new Map,E.set(e,t)),t},j=(e,n)=>{if(e){const t=S(e);let r=t.get(n);return r||(r=j(e.p,n),r&&(\"p\"in r&&r.p.then((()=>t.delete(n))),t.set(n,r))),r}return t.get(n)},_=(e,n,o)=>{if(Object.freeze(o),e){S(e).set(n,o)}else{const e=t.get(n);t.set(n,o),r.has(n)||r.set(n,e)}},O=(e,t=new Map,n)=>{if(!n)return t;const r=new Map;let o=!1;return n.forEach((n=>{var i;const a=(null==(i=j(e,n))?void 0:i.r)||0;r.set(n,a),t.get(n)!==a&&(o=!0)})),t.size!==r.size||o?r:t},C=(e,t,n,r,o)=>{const i=j(e,t);if(i){if(o&&(!(\"p\"in i)||!l(i.p,o)))return i;\"p\"in i&&a(i.p)}const s={v:n,r:(null==i?void 0:i.r)||0,d:O(e,null==i?void 0:i.d,r)};return i&&\"v\"in i&&Object.is(i.v,n)?s.d===i.d||s.d.size===i.d.size&&Array.from(s.d.keys()).every((e=>i.d.has(e)))||Promise.resolve().then((()=>{W(e)})):(++s.r,s.d.has(t)&&(s.d=new Map(s.d).set(t,s.r))),_(e,t,s),s},I=(e,t,n,r,o)=>{const i=j(e,t);if(i){if(o&&(!(\"p\"in i)||!l(i.p,o)))return i;\"p\"in i&&a(i.p)}const s={e:n,r:(null==i?void 0:i.r)||0,d:O(e,null==i?void 0:i.d,r)};return _(e,t,s),s},M=(e,t,n,r)=>{const o=j(e,t);if(o&&\"p\"in o){if(l(o.p,n))return o;a(o.p)}((e,t,n)=>{let r=k.get(t);r||(r=new Map,k.set(t,r)),n.then((()=>{r.get(e)===n&&(r.delete(e),r.size||k.delete(t))})),r.set(e,n)})(e,t,n);const i={p:n,r:(null==o?void 0:o.r)||0,d:O(e,null==o?void 0:o.d,r)};return _(e,t,i),i},T=(e,t,n,r)=>{if(n instanceof Promise){const o=s(n.then((n=>{C(e,t,n,r,o),W(e)})).catch((n=>{if(n instanceof Promise)return i(n)?n.then((()=>{D(e,t,!0)})):n;I(e,t,n,r,o),W(e)})));return M(e,t,o,r)}return C(e,t,n,r)},P=(e,t)=>{const n=j(e,t);if(n){\"p\"in n&&a(n.p);const i=(r=((e,t)=>{for(var n in t||(t={}))p.call(t,n)&&m(e,n,t[n]);if(f)for(var n of f(t))h.call(t,n)&&m(e,n,t[n]);return e})({},n),o={i:n.r},u(r,d(o)));_(e,t,i)}else console.warn(\"[Bug] could not invalidate non existing atom\",t);var r,o},D=(e,t,r)=>{if(!r){const r=j(e,t);if(r){if(r.r!==r.i&&\"p\"in r&&r.p[o].c)return r;if(r.d.forEach(((r,o)=>{if(o!==t)if(n.has(o)){const t=j(e,o);t&&t.r===t.i&&D(e,o)}else D(e,o)})),Array.from(r.d).every((([t,n])=>{const r=j(e,t);return r&&\"v\"in r&&r.r===n})))return r}}const i=new Set;try{const n=t.read((n=>{i.add(n);const r=n===t?j(e,n):D(e,n);if(r){if(\"e\"in r)throw r.e;if(\"p\"in r)throw r.p;return r.v}if(g(n))return n.init;throw new Error(\"no atom init\")}));return T(e,t,n,i)}catch(n){if(n instanceof Promise){const r=s(n);return M(e,t,r,i)}return I(e,t,n,i)}},A=(e,t)=>D(t,e),L=(e,t)=>!t.l.size&&(!t.t.size||1===t.t.size&&t.t.has(e)),Z=(e,t)=>{const r=n.get(t);null==r||r.t.forEach((n=>{n!==t&&(P(e,n),Z(e,n))}))},z=(e,t,n)=>{let r=!0;const o=(t,n)=>{const r=D(e,t);if(\"e\"in r)throw r.e;if(\"p\"in r){if(null==n?void 0:n.unstable_promise)return r.p.then((()=>o(t,n)));throw console.info(\"Reading pending atom state in write operation. We throw a promise for now.\",t),r.p}if(\"v\"in r)return r.v;throw console.warn(\"[Bug] no value found while reading atom in write operation. This is probably a bug.\",t),new Error(\"no value found\")},i=t.write(o,((n,o)=>{let i;if(n===t){if(!g(n))throw new Error(\"atom not writable\");const t=(e=>{const t=new Set,n=k.get(e);return n&&(k.delete(e),n.forEach(((e,n)=>{a(e),t.add(n)}))),t})(n);t.forEach((t=>{t!==e&&T(t,n,o)})),T(e,n,o),Z(e,n)}else i=z(e,n,o);return r||W(e),i}),n);return r=!1,e=void 0,i},R=(e,t,n)=>{const r=z(n,e,t);return W(n),r},N=(e,t)=>{const r={t:new Set(t&&[t]),l:new Set};n.set(e,r),w.add(e);if(D(void 0,e).d.forEach(((t,r)=>{const o=n.get(r);o?o.t.add(e):r!==e&&N(r,e)})),(e=>!!e.write)(e)&&e.onMount){const t=t=>R(e,t),n=e.onMount(t);n&&(r.u=n)}return r},B=e=>{var t;const r=null==(t=n.get(e))?void 0:t.u;r&&r(),n.delete(e),w.delete(e);const o=j(void 0,e);o?o.d.forEach(((t,r)=>{if(r!==e){const t=n.get(r);t&&(t.t.delete(e),L(r,t)&&B(r))}})):console.warn(\"[Bug] could not find atom state to unmount\",e)},H=(e,t,r)=>{const o=new Set(t.d.keys());null==r||r.forEach(((t,r)=>{if(o.has(r))return void o.delete(r);const i=n.get(r);i&&(i.t.delete(e),L(r,i)&&B(r))})),o.forEach((t=>{const r=n.get(t);r?r.t.add(e):n.has(e)&&N(t,e)}))},W=e=>{if(e){S(e).forEach(((r,o)=>{if(r!==t.get(o)){const t=n.get(o);null==t||t.l.forEach((t=>t(e)))}}))}else{for(;r.size;){const e=Array.from(r);r.clear(),e.forEach((([e,t])=>{const r=j(void 0,e);r&&r.d!==(null==t?void 0:t.d)&&H(e,r,null==t?void 0:t.d);const o=n.get(e);null==o||o.l.forEach((e=>e()))}))}c.forEach((e=>e()))}},F=(e,n)=>{n&&(e=>{S(e).forEach(((e,n)=>{const r=t.get(n);(e.r>((null==r?void 0:r.r)||0)||\"v\"in e&&e.r===(null==r?void 0:r.r)&&e.d!==(null==r?void 0:r.d))&&(t.set(n,e),e.d!==(null==r?void 0:r.d)&&H(n,e,null==r?void 0:r.d))}))})(n),W(void 0)},U=(e,t)=>{const r=(e=>{let t=n.get(e);return t||(t=N(e)),t})(e).l;return r.add(t),()=>{r.delete(t),(e=>{const t=n.get(e);t&&L(e,t)&&B(e)})(e)}},K=(e,t)=>{for(const[n,r]of e)g(n)&&(T(t,n,r),Z(t,n));W(t)};return{[v]:A,[b]:R,[y]:F,[x]:U,h:K,n:e=>(c.add(e),()=>{c.delete(e)}),l:()=>w.values(),a:e=>t.get(e),m:e=>n.get(e)}},k=e=>{const t=w(e),n=e=>new Promise(((r,o)=>{const i=t.r(e);\"e\"in i?o(i.e):r(\"p\"in i?i.p.then((()=>n(e))):i.v)}));return{get:e=>{const n=t.r(e);if(\"e\"in n)throw n.e;if(!(\"p\"in n))return n.v},asyncGet:n,set:(e,n)=>t.w(e,n),sub:(e,n)=>t.s(e,n),SECRET_INTERNAL_store:t}},E=(e,t)=>({s:t?t(e).SECRET_INTERNAL_store:w(e)}),S=new Map,j=e=>(S.has(e)||S.set(e,(0,r.createContext)(E())),S.get(e));var _=Object.defineProperty,O=Object.defineProperties,C=Object.getOwnPropertyDescriptors,I=Object.getOwnPropertySymbols,M=Object.prototype.hasOwnProperty,T=Object.prototype.propertyIsEnumerable,P=(e,t,n)=>t in e?_(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,D=(e,t)=>{for(var n in t||(t={}))M.call(t,n)&&P(e,n,t[n]);if(I)for(var n of I(t))T.call(t,n)&&P(e,n,t[n]);return e};const A=e=>e.debugLabel||e.toString(),L=([e,t])=>Object.fromEntries(t.flatMap((t=>{var n,r;const o=null==(n=e.m)?void 0:n.call(e,t);if(!o)return[];const i=o.t,a=(null==(r=e.a)?void 0:r.call(e,t))||{};return[[A(t),(l=D(D(D({},\"e\"in a&&{error:a.e}),\"p\"in a&&{promise:a.p}),\"v\"in a&&{value:a.v}),s={dependents:Array.from(i).map(A)},O(l,C(s)))]];var l,s}))),Z=({children:e,initialValues:t,scope:n,unstable_createStore:o,unstable_enableVersionedWrite:i})=>{const[a,l]=(0,r.useState)();(0,r.useEffect)((()=>{a&&(s.current.s.c(null,a),delete a.p)}),[a]);const s=(0,r.useRef)();s.current||(s.current=E(t,o),i&&(s.current.w=e=>{l((t=>{const n=t?{p:t}:{};return e(n),n}))})),i||(e=>{const{s:t}=e,[n,o]=(0,r.useState)([]);(0,r.useEffect)((()=>{var e;const n=()=>{var e;o(Array.from((null==(e=t.l)?void 0:e.call(t))||[]))},r=null==(e=t.n)?void 0:e.call(t,n);return n(),r}),[t]),(0,r.useDebugValue)([t,n],L)})(s.current);const c=j(n);return(0,r.createElement)(c.Provider,{value:s.current},e)};let z=0;function R(e,t){const n=\"atom\"+ ++z,r={toString:()=>n};return\"function\"==typeof e?r.read=e:(r.init=e,r.read=e=>e(r),r.write=(e,t,n)=>t(r,\"function\"==typeof n?n(e(r)):n)),t&&(r.write=t),r}function N(e,t){const n=j(t),{s:o}=(0,r.useContext)(n),i=(0,r.useCallback)((t=>{const n=o.r(e,t);if(\"e\"in n)throw n.e;if(\"p\"in n)throw n.p;if(\"v\"in n)return n.v;throw new Error(\"no atom value\")}),[o,e]),[[a,l,s],c]=(0,r.useReducer)((0,r.useCallback)(((t,n)=>{const r=i(n);return Object.is(t[1],r)&&t[2]===e?t:[n,r,e]}),[i,e]),void 0,(()=>{const t=void 0;return[t,i(t),e]}));return s!==e&&c(void 0),(0,r.useEffect)((()=>{const t=o.s(e,c);return c(void 0),t}),[o,e]),(0,r.useEffect)((()=>{o.c(e,a)})),(0,r.useDebugValue)(l),l}function B(e,t){const n=j(t),{s:o,w:i}=(0,r.useContext)(n);return(0,r.useCallback)((t=>{if(!(\"write\"in e))throw new Error(\"not writable atom\");const n=n=>o.w(e,t,n);return i?i(n):n()}),[o,i,e])}function H(e,t){return\"scope\"in e&&(console.warn(\"atom.scope is deprecated. Please do useAtom(atom, scope) instead.\"),t=e.scope),[N(e,t),B(e,t)]}},200:function(e,t,n){var r=\"Expected a function\",o=\/^\\s+|\\s+$\/g,i=\/^[-+]0x[0-9a-f]+$\/i,a=\/^0b[01]+$\/i,l=\/^0o[0-7]+$\/i,s=parseInt,c=\"object\"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u=\"object\"==typeof self&&self&&self.Object===Object&&self,d=c||u||Function(\"return this\")(),f=Object.prototype.toString,p=Math.max,h=Math.min,m=function(){return d.Date.now()};function g(e,t,n){var o,i,a,l,s,c,u=0,d=!1,f=!1,g=!0;if(\"function\"!=typeof e)throw new TypeError(r);function y(t){var n=o,r=i;return o=i=void 0,u=t,l=e.apply(r,n)}function x(e){return u=e,s=setTimeout(k,t),d?y(e):l}function w(e){var n=e-c;return void 0===c||n>=t||n<0||f&&e-u>=a}function k(){var e=m();if(w(e))return E(e);s=setTimeout(k,function(e){var n=t-(e-c);return f?h(n,a-(e-u)):n}(e))}function E(e){return s=void 0,g&&o?y(e):(o=i=void 0,l)}function S(){var e=m(),n=w(e);if(o=arguments,i=this,c=e,n){if(void 0===s)return x(c);if(f)return s=setTimeout(k,t),y(c)}return void 0===s&&(s=setTimeout(k,t)),l}return t=b(t)||0,v(n)&&(d=!!n.leading,a=(f=\"maxWait\"in n)?p(b(n.maxWait)||0,t):a,g=\"trailing\"in n?!!n.trailing:g),S.cancel=function(){void 0!==s&&clearTimeout(s),u=0,o=c=i=s=void 0},S.flush=function(){return void 0===s?l:E(m())},S}function v(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function b(e){if(\"number\"==typeof e)return e;if(function(e){return\"symbol\"==typeof e||function(e){return!!e&&\"object\"==typeof e}(e)&&\"[object Symbol]\"==f.call(e)}(e))return NaN;if(v(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=v(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(o,\"\");var n=a.test(e);return n||l.test(e)?s(e.slice(2),n?2:8):i.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,i=!0;if(\"function\"!=typeof e)throw new TypeError(r);return v(n)&&(o=\"leading\"in n?!!n.leading:o,i=\"trailing\"in n?!!n.trailing:i),g(e,t,{leading:o,maxWait:t,trailing:i})}},2744:function(e,t,n){\"use strict\";var r={};(0,n(9187).assign)(r,n(4395),n(578),n(2684)),e.exports=r},4395:function(e,t,n){\"use strict\";var r=n(7651),o=n(9187),i=n(8592),a=n(5604),l=n(249),s=Object.prototype.toString;function c(e){if(!(this instanceof c))return new c(e);this.options=o.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:\"\"},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==n)throw new Error(a[n]);if(t.header&&r.deflateSetHeader(this.strm,t.header),t.dictionary){var u;if(u=\"string\"==typeof t.dictionary?i.string2buf(t.dictionary):\"[object ArrayBuffer]\"===s.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(n=r.deflateSetDictionary(this.strm,u)))throw new Error(a[n]);this._dict_set=!0}}function u(e,t){var n=new c(t);if(n.push(e,!0),n.err)throw n.msg||a[n.err];return n.result}c.prototype.push=function(e,t){var n,a,l=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,\"string\"==typeof e?l.input=i.string2buf(e):\"[object ArrayBuffer]\"===s.call(e)?l.input=new Uint8Array(e):l.input=e,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new o.Buf8(c),l.next_out=0,l.avail_out=c),1!==(n=r.deflate(l,a))&&0!==n)return this.onEnd(n),this.ended=!0,!1;0!==l.avail_out&&(0!==l.avail_in||4!==a&&2!==a)||(\"string\"===this.options.to?this.onData(i.buf2binstring(o.shrinkBuf(l.output,l.next_out))):this.onData(o.shrinkBuf(l.output,l.next_out)))}while((l.avail_in>0||0===l.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==a||(this.onEnd(0),l.avail_out=0,!0)},c.prototype.onData=function(e){this.chunks.push(e)},c.prototype.onEnd=function(e){0===e&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Deflate=c,t.deflate=u,t.deflateRaw=function(e,t){return(t=t||{}).raw=!0,u(e,t)},t.gzip=function(e,t){return(t=t||{}).gzip=!0,u(e,t)}},578:function(e,t,n){\"use strict\";var r=n(7823),o=n(9187),i=n(8592),a=n(2684),l=n(5604),s=n(249),c=n(9968),u=Object.prototype.toString;function d(e){if(!(this instanceof d))return new d(e);this.options=o.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,t.windowBits);if(n!==a.Z_OK)throw new Error(l[n]);if(this.header=new c,r.inflateGetHeader(this.strm,this.header),t.dictionary&&(\"string\"==typeof t.dictionary?t.dictionary=i.string2buf(t.dictionary):\"[object ArrayBuffer]\"===u.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=r.inflateSetDictionary(this.strm,t.dictionary))!==a.Z_OK))throw new Error(l[n])}function f(e,t){var n=new d(t);if(n.push(e,!0),n.err)throw n.msg||l[n.err];return n.result}d.prototype.push=function(e,t){var n,l,s,c,d,f=this.strm,p=this.options.chunkSize,h=this.options.dictionary,m=!1;if(this.ended)return!1;l=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,\"string\"==typeof e?f.input=i.binstring2buf(e):\"[object ArrayBuffer]\"===u.call(e)?f.input=new Uint8Array(e):f.input=e,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new o.Buf8(p),f.next_out=0,f.avail_out=p),(n=r.inflate(f,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&h&&(n=r.inflateSetDictionary(this.strm,h)),n===a.Z_BUF_ERROR&&!0===m&&(n=a.Z_OK,m=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),this.ended=!0,!1;f.next_out&&(0!==f.avail_out&&n!==a.Z_STREAM_END&&(0!==f.avail_in||l!==a.Z_FINISH&&l!==a.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(s=i.utf8border(f.output,f.next_out),c=f.next_out-s,d=i.buf2string(f.output,s),f.next_out=c,f.avail_out=p-c,c&&o.arraySet(f.output,f.output,s,c,0),this.onData(d)):this.onData(o.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(m=!0)}while((f.avail_in>0||0===f.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(l=a.Z_FINISH),l===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):l!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),f.avail_out=0,!0)},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===a.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Inflate=d,t.inflate=f,t.inflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},t.ungzip=f},9187:function(e,t){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if(\"object\"!=typeof n)throw new TypeError(n+\"must be non-object\");for(var o in n)r(n,o)&&(e[o]=n[o])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var o={arraySet:function(e,t,n,r,o){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+r),o);else for(var i=0;i<r;i++)e[o+i]=t[n+i]},flattenChunks:function(e){var t,n,r,o,i,a;for(r=0,t=0,n=e.length;t<n;t++)r+=e[t].length;for(a=new Uint8Array(r),o=0,t=0,n=e.length;t<n;t++)i=e[t],a.set(i,o),o+=i.length;return a}},i={arraySet:function(e,t,n,r,o){for(var i=0;i<r;i++)e[o+i]=t[n+i]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,o)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,i))},t.setTyped(n)},8592:function(e,t,n){\"use strict\";var r=n(9187),o=!0,i=!0;try{String.fromCharCode.apply(null,[0])}catch(e){o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){i=!1}for(var a=new r.Buf8(256),l=0;l<256;l++)a[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;function s(e,t){if(t<65534&&(e.subarray&&i||!e.subarray&&o))return String.fromCharCode.apply(null,r.shrinkBuf(e,t));for(var n=\"\",a=0;a<t;a++)n+=String.fromCharCode(e[a]);return n}a[254]=a[254]=1,t.string2buf=function(e){var t,n,o,i,a,l=e.length,s=0;for(i=0;i<l;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<l&&56320==(64512&(o=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(o-56320),i++),s+=n<128?1:n<2048?2:n<65536?3:4;for(t=new r.Buf8(s),a=0,i=0;a<s;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<l&&56320==(64512&(o=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(o-56320),i++),n<128?t[a++]=n:n<2048?(t[a++]=192|n>>>6,t[a++]=128|63&n):n<65536?(t[a++]=224|n>>>12,t[a++]=128|n>>>6&63,t[a++]=128|63&n):(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63,t[a++]=128|n>>>6&63,t[a++]=128|63&n);return t},t.buf2binstring=function(e){return s(e,e.length)},t.binstring2buf=function(e){for(var t=new r.Buf8(e.length),n=0,o=t.length;n<o;n++)t[n]=e.charCodeAt(n);return t},t.buf2string=function(e,t){var n,r,o,i,l=t||e.length,c=new Array(2*l);for(r=0,n=0;n<l;)if((o=e[n++])<128)c[r++]=o;else if((i=a[o])>4)c[r++]=65533,n+=i-1;else{for(o&=2===i?31:3===i?15:7;i>1&&n<l;)o=o<<6|63&e[n++],i--;i>1?c[r++]=65533:o<65536?c[r++]=o:(o-=65536,c[r++]=55296|o>>10&1023,c[r++]=56320|1023&o)}return s(c,r)},t.utf8border=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+a[e[n]]>t?n:t}},3693:function(e){\"use strict\";e.exports=function(e,t,n,r){for(var o=65535&e|0,i=e>>>16&65535|0,a=0;0!==n;){n-=a=n>2e3?2e3:n;do{i=i+(o=o+t[r++]|0)|0}while(--a);o%=65521,i%=65521}return o|i<<16|0}},2684:function(e){\"use strict\";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},8464:function(e){\"use strict\";var t=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();e.exports=function(e,n,r,o){var i=t,a=o+r;e^=-1;for(var l=o;l<a;l++)e=e>>>8^i[255&(e^n[l])];return-1^e}},7651:function(e,t,n){\"use strict\";var r,o=n(9187),i=n(8676),a=n(3693),l=n(8464),s=n(5604),c=-2,u=258,d=262,f=103,p=113,h=666;function m(e,t){return e.msg=s[t],t}function g(e){return(e<<1)-(e>4?9:0)}function v(e){for(var t=e.length;--t>=0;)e[t]=0}function b(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(o.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function y(e,t){i._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,b(e.strm)}function x(e,t){e.pending_buf[e.pending++]=t}function w(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function k(e,t){var n,r,o=e.max_chain_length,i=e.strstart,a=e.prev_length,l=e.nice_match,s=e.strstart>e.w_size-d?e.strstart-(e.w_size-d):0,c=e.window,f=e.w_mask,p=e.prev,h=e.strstart+u,m=c[i+a-1],g=c[i+a];e.prev_length>=e.good_match&&(o>>=2),l>e.lookahead&&(l=e.lookahead);do{if(c[(n=t)+a]===g&&c[n+a-1]===m&&c[n]===c[i]&&c[++n]===c[i+1]){i+=2,n++;do{}while(c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&c[++i]===c[++n]&&i<h);if(r=u-(h-i),i=h-u,r>a){if(e.match_start=t,a=r,r>=l)break;m=c[i+a-1],g=c[i+a]}}}while((t=p[t&f])>s&&0!=--o);return a<=e.lookahead?a:e.lookahead}function E(e){var t,n,r,i,s,c,u,f,p,h,m=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=m+(m-d)){o.arraySet(e.window,e.window,m,m,0),e.match_start-=m,e.strstart-=m,e.block_start-=m,t=n=e.hash_size;do{r=e.head[--t],e.head[t]=r>=m?r-m:0}while(--n);t=n=m;do{r=e.prev[--t],e.prev[t]=r>=m?r-m:0}while(--n);i+=m}if(0===e.strm.avail_in)break;if(c=e.strm,u=e.window,f=e.strstart+e.lookahead,p=i,h=void 0,(h=c.avail_in)>p&&(h=p),n=0===h?0:(c.avail_in-=h,o.arraySet(u,c.input,c.next_in,h,f),1===c.state.wrap?c.adler=a(c.adler,u,h,f):2===c.state.wrap&&(c.adler=l(c.adler,u,h,f)),c.next_in+=h,c.total_in+=h,h),e.lookahead+=n,e.lookahead+e.insert>=3)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+3-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<d&&0!==e.strm.avail_in)}function S(e,t){for(var n,r;;){if(e.lookahead<d){if(E(e),e.lookahead<d&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-d&&(e.match_length=k(e,n)),e.match_length>=3)if(r=i._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else r=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(r&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}function j(e,t){for(var n,r,o;;){if(e.lookahead<d){if(E(e),e.lookahead<d&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-d&&(e.match_length=k(e,n),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){o=e.strstart+e.lookahead-3,r=i._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=o&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,r&&(y(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((r=i._tr_tally(e,0,e.window[e.strstart-1]))&&y(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(r=i._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}function _(e,t,n,r,o){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=o}function O(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(1146),this.dyn_dtree=new o.Buf16(122),this.bl_tree=new o.Buf16(78),v(this.dyn_ltree),v(this.dyn_dtree),v(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(16),this.heap=new o.Buf16(573),v(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(573),v(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function C(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:p,e.adler=2===t.wrap?0:1,t.last_flush=0,i._tr_init(t),0):m(e,c)}function I(e){var t,n=C(e);return 0===n&&((t=e.state).window_size=2*t.w_size,v(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0),n}function M(e,t,n,r,i,a){if(!e)return c;var l=1;if(-1===t&&(t=6),r<0?(l=0,r=-r):r>15&&(l=2,r-=16),i<1||i>9||8!==n||r<8||r>15||t<0||t>9||a<0||a>4)return m(e,c);8===r&&(r=9);var s=new O;return e.state=s,s.strm=e,s.wrap=l,s.gzhead=null,s.w_bits=r,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=i+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+3-1)\/3),s.window=new o.Buf8(2*s.w_size),s.head=new o.Buf16(s.hash_size),s.prev=new o.Buf16(s.w_size),s.lit_bufsize=1<<i+6,s.pending_buf_size=4*s.lit_bufsize,s.pending_buf=new o.Buf8(s.pending_buf_size),s.d_buf=1*s.lit_bufsize,s.l_buf=3*s.lit_bufsize,s.level=t,s.strategy=a,s.method=n,I(e)}r=[new _(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(E(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var r=e.block_start+n;if((0===e.strstart||e.strstart>=r)&&(e.lookahead=e.strstart-r,e.strstart=r,y(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-d&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(y(e,!1),e.strm.avail_out),1)})),new _(4,4,8,4,S),new _(4,5,16,8,S),new _(4,6,32,32,S),new _(4,4,16,16,j),new _(8,16,32,32,j),new _(8,16,128,128,j),new _(8,32,128,256,j),new _(32,128,258,1024,j),new _(32,258,258,4096,j)],t.deflateInit=function(e,t){return M(e,t,8,15,8,0)},t.deflateInit2=M,t.deflateReset=I,t.deflateResetKeep=C,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?c:(e.state.gzhead=t,0):c},t.deflate=function(e,t){var n,o,a,s;if(!e||!e.state||t>5||t<0)return e?m(e,c):c;if(o=e.state,!e.output||!e.input&&0!==e.avail_in||o.status===h&&4!==t)return m(e,0===e.avail_out?-5:c);if(o.strm=e,n=o.last_flush,o.last_flush=t,42===o.status)if(2===o.wrap)e.adler=0,x(o,31),x(o,139),x(o,8),o.gzhead?(x(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),x(o,255&o.gzhead.time),x(o,o.gzhead.time>>8&255),x(o,o.gzhead.time>>16&255),x(o,o.gzhead.time>>24&255),x(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),x(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(x(o,255&o.gzhead.extra.length),x(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(e.adler=l(e.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=69):(x(o,0),x(o,0),x(o,0),x(o,0),x(o,0),x(o,9===o.level?2:o.strategy>=2||o.level<2?4:0),x(o,3),o.status=p);else{var d=8+(o.w_bits-8<<4)<<8;d|=(o.strategy>=2||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(d|=32),d+=31-d%31,o.status=p,w(o,d),0!==o.strstart&&(w(o,e.adler>>>16),w(o,65535&e.adler)),e.adler=1}if(69===o.status)if(o.gzhead.extra){for(a=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),b(e),a=o.pending,o.pending!==o.pending_buf_size));)x(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=73)}else o.status=73;if(73===o.status)if(o.gzhead.name){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),b(e),a=o.pending,o.pending===o.pending_buf_size)){s=1;break}s=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,x(o,s)}while(0!==s);o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),0===s&&(o.gzindex=0,o.status=91)}else o.status=91;if(91===o.status)if(o.gzhead.comment){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),b(e),a=o.pending,o.pending===o.pending_buf_size)){s=1;break}s=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,x(o,s)}while(0!==s);o.gzhead.hcrc&&o.pending>a&&(e.adler=l(e.adler,o.pending_buf,o.pending-a,a)),0===s&&(o.status=f)}else o.status=f;if(o.status===f&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&b(e),o.pending+2<=o.pending_buf_size&&(x(o,255&e.adler),x(o,e.adler>>8&255),e.adler=0,o.status=p)):o.status=p),0!==o.pending){if(b(e),0===e.avail_out)return o.last_flush=-1,0}else if(0===e.avail_in&&g(t)<=g(n)&&4!==t)return m(e,-5);if(o.status===h&&0!==e.avail_in)return m(e,-5);if(0!==e.avail_in||0!==o.lookahead||0!==t&&o.status!==h){var k=2===o.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(E(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}(o,t):3===o.strategy?function(e,t){for(var n,r,o,a,l=e.window;;){if(e.lookahead<=u){if(E(e),e.lookahead<=u&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(r=l[o=e.strstart-1])===l[++o]&&r===l[++o]&&r===l[++o]){a=e.strstart+u;do{}while(r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&r===l[++o]&&o<a);e.match_length=u-(a-o),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=i._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}(o,t):r[o.level].func(o,t);if(3!==k&&4!==k||(o.status=h),1===k||3===k)return 0===e.avail_out&&(o.last_flush=-1),0;if(2===k&&(1===t?i._tr_align(o):5!==t&&(i._tr_stored_block(o,0,0,!1),3===t&&(v(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),b(e),0===e.avail_out))return o.last_flush=-1,0}return 4!==t?0:o.wrap<=0?1:(2===o.wrap?(x(o,255&e.adler),x(o,e.adler>>8&255),x(o,e.adler>>16&255),x(o,e.adler>>24&255),x(o,255&e.total_in),x(o,e.total_in>>8&255),x(o,e.total_in>>16&255),x(o,e.total_in>>24&255)):(w(o,e.adler>>>16),w(o,65535&e.adler)),b(e),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?0:1)},t.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&t!==f&&t!==p&&t!==h?m(e,c):(e.state=null,t===p?m(e,-3):0):c},t.deflateSetDictionary=function(e,t){var n,r,i,l,s,u,d,f,p=t.length;if(!e||!e.state)return c;if(2===(l=(n=e.state).wrap)||1===l&&42!==n.status||n.lookahead)return c;for(1===l&&(e.adler=a(e.adler,t,p,0)),n.wrap=0,p>=n.w_size&&(0===l&&(v(n.head),n.strstart=0,n.block_start=0,n.insert=0),f=new o.Buf8(n.w_size),o.arraySet(f,t,p-n.w_size,n.w_size,0),t=f,p=n.w_size),s=e.avail_in,u=e.next_in,d=e.input,e.avail_in=p,e.next_in=0,e.input=t,E(n);n.lookahead>=3;){r=n.strstart,i=n.lookahead-2;do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+3-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++}while(--i);n.strstart=r,n.lookahead=2,E(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=u,e.input=d,e.avail_in=s,n.wrap=l,0},t.deflateInfo=\"pako deflate (from Nodeca project)\"},9968:function(e){\"use strict\";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},9365:function(e){\"use strict\";e.exports=function(e,t){var n,r,o,i,a,l,s,c,u,d,f,p,h,m,g,v,b,y,x,w,k,E,S,j,_;n=e.state,r=e.next_in,j=e.input,o=r+(e.avail_in-5),i=e.next_out,_=e.output,a=i-(t-e.avail_out),l=i+(e.avail_out-257),s=n.dmax,c=n.wsize,u=n.whave,d=n.wnext,f=n.window,p=n.hold,h=n.bits,m=n.lencode,g=n.distcode,v=(1<<n.lenbits)-1,b=(1<<n.distbits)-1;e:do{h<15&&(p+=j[r++]<<h,h+=8,p+=j[r++]<<h,h+=8),y=m[p&v];t:for(;;){if(p>>>=x=y>>>24,h-=x,0===(x=y>>>16&255))_[i++]=65535&y;else{if(!(16&x)){if(0==(64&x)){y=m[(65535&y)+(p&(1<<x)-1)];continue t}if(32&x){n.mode=12;break e}e.msg=\"invalid literal\/length code\",n.mode=30;break e}w=65535&y,(x&=15)&&(h<x&&(p+=j[r++]<<h,h+=8),w+=p&(1<<x)-1,p>>>=x,h-=x),h<15&&(p+=j[r++]<<h,h+=8,p+=j[r++]<<h,h+=8),y=g[p&b];n:for(;;){if(p>>>=x=y>>>24,h-=x,!(16&(x=y>>>16&255))){if(0==(64&x)){y=g[(65535&y)+(p&(1<<x)-1)];continue n}e.msg=\"invalid distance code\",n.mode=30;break e}if(k=65535&y,h<(x&=15)&&(p+=j[r++]<<h,(h+=8)<x&&(p+=j[r++]<<h,h+=8)),(k+=p&(1<<x)-1)>s){e.msg=\"invalid distance too far back\",n.mode=30;break e}if(p>>>=x,h-=x,k>(x=i-a)){if((x=k-x)>u&&n.sane){e.msg=\"invalid distance too far back\",n.mode=30;break e}if(E=0,S=f,0===d){if(E+=c-x,x<w){w-=x;do{_[i++]=f[E++]}while(--x);E=i-k,S=_}}else if(d<x){if(E+=c+d-x,(x-=d)<w){w-=x;do{_[i++]=f[E++]}while(--x);if(E=0,d<w){w-=x=d;do{_[i++]=f[E++]}while(--x);E=i-k,S=_}}}else if(E+=d-x,x<w){w-=x;do{_[i++]=f[E++]}while(--x);E=i-k,S=_}for(;w>2;)_[i++]=S[E++],_[i++]=S[E++],_[i++]=S[E++],w-=3;w&&(_[i++]=S[E++],w>1&&(_[i++]=S[E++]))}else{E=i-k;do{_[i++]=_[E++],_[i++]=_[E++],_[i++]=_[E++],w-=3}while(w>2);w&&(_[i++]=_[E++],w>1&&(_[i++]=_[E++]))}break}}break}}while(r<o&&i<l);r-=w=h>>3,p&=(1<<(h-=w<<3))-1,e.next_in=r,e.next_out=i,e.avail_in=r<o?o-r+5:5-(r-o),e.avail_out=i<l?l-i+257:257-(i-l),n.hold=p,n.bits=h}},7823:function(e,t,n){\"use strict\";var r=n(9187),o=n(3693),i=n(8464),a=n(9365),l=n(6446),s=-2,c=12,u=30;function d(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function p(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new r.Buf32(852),t.distcode=t.distdyn=new r.Buf32(592),t.sane=1,t.back=-1,0):s}function h(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,p(e)):s}function m(e,t){var n,r;return e&&e.state?(r=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?s:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,h(e))):s}function g(e,t){var n,r;return e?(r=new f,e.state=r,r.window=null,0!==(n=m(e,t))&&(e.state=null),n):s}var v,b,y=!0;function x(e){if(y){var t;for(v=new r.Buf32(512),b=new r.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(l(1,e.lens,0,288,v,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;l(2,e.lens,0,32,b,0,e.work,{bits:5}),y=!1}e.lencode=v,e.lenbits=9,e.distcode=b,e.distbits=5}function w(e,t,n,o){var i,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),o>=a.wsize?(r.arraySet(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((i=a.wsize-a.wnext)>o&&(i=o),r.arraySet(a.window,t,n-o,i,a.wnext),(o-=i)?(r.arraySet(a.window,t,n-o,o,0),a.wnext=o,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}t.inflateReset=h,t.inflateReset2=m,t.inflateResetKeep=p,t.inflateInit=function(e){return g(e,15)},t.inflateInit2=g,t.inflate=function(e,t){var n,f,p,h,m,g,v,b,y,k,E,S,j,_,O,C,I,M,T,P,D,A,L,Z,z=0,R=new r.Buf8(4),N=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return s;(n=e.state).mode===c&&(n.mode=13),m=e.next_out,p=e.output,v=e.avail_out,h=e.next_in,f=e.input,g=e.avail_in,b=n.hold,y=n.bits,k=g,E=v,A=0;e:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(2&n.wrap&&35615===b){n.check=0,R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0),b=0,y=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&b)<<8)+(b>>8))%31){e.msg=\"incorrect header check\",n.mode=u;break}if(8!=(15&b)){e.msg=\"unknown compression method\",n.mode=u;break}if(y-=4,D=8+(15&(b>>>=4)),0===n.wbits)n.wbits=D;else if(D>n.wbits){e.msg=\"invalid window size\",n.mode=u;break}n.dmax=1<<D,e.adler=n.check=1,n.mode=512&b?10:c,b=0,y=0;break;case 2:for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(n.flags=b,8!=(255&n.flags)){e.msg=\"unknown compression method\",n.mode=u;break}if(57344&n.flags){e.msg=\"unknown header flags set\",n.mode=u;break}n.head&&(n.head.text=b>>8&1),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0)),b=0,y=0,n.mode=3;case 3:for(;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.head&&(n.head.time=b),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,R[2]=b>>>16&255,R[3]=b>>>24&255,n.check=i(n.check,R,4,0)),b=0,y=0,n.mode=4;case 4:for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.head&&(n.head.xflags=255&b,n.head.os=b>>8),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0)),b=0,y=0,n.mode=5;case 5:if(1024&n.flags){for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.length=b,n.head&&(n.head.extra_len=b),512&n.flags&&(R[0]=255&b,R[1]=b>>>8&255,n.check=i(n.check,R,2,0)),b=0,y=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&((S=n.length)>g&&(S=g),S&&(n.head&&(D=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,f,h,S,D)),512&n.flags&&(n.check=i(n.check,f,S,h)),g-=S,h+=S,n.length-=S),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===g)break e;S=0;do{D=f[h+S++],n.head&&D&&n.length<65536&&(n.head.name+=String.fromCharCode(D))}while(D&&S<g);if(512&n.flags&&(n.check=i(n.check,f,S,h)),g-=S,h+=S,D)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===g)break e;S=0;do{D=f[h+S++],n.head&&D&&n.length<65536&&(n.head.comment+=String.fromCharCode(D))}while(D&&S<g);if(512&n.flags&&(n.check=i(n.check,f,S,h)),g-=S,h+=S,D)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;y<16;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(b!==(65535&n.check)){e.msg=\"header crc mismatch\",n.mode=u;break}b=0,y=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=c;break;case 10:for(;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}e.adler=n.check=d(b),b=0,y=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=m,e.avail_out=v,e.next_in=h,e.avail_in=g,n.hold=b,n.bits=y,2;e.adler=n.check=1,n.mode=c;case c:if(5===t||6===t)break e;case 13:if(n.last){b>>>=7&y,y-=7&y,n.mode=27;break}for(;y<3;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}switch(n.last=1&b,y-=1,3&(b>>>=1)){case 0:n.mode=14;break;case 1:if(x(n),n.mode=20,6===t){b>>>=2,y-=2;break e}break;case 2:n.mode=17;break;case 3:e.msg=\"invalid block type\",n.mode=u}b>>>=2,y-=2;break;case 14:for(b>>>=7&y,y-=7&y;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if((65535&b)!=(b>>>16^65535)){e.msg=\"invalid stored block lengths\",n.mode=u;break}if(n.length=65535&b,b=0,y=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(S=n.length){if(S>g&&(S=g),S>v&&(S=v),0===S)break e;r.arraySet(p,f,h,S,m),g-=S,h+=S,v-=S,m+=S,n.length-=S;break}n.mode=c;break;case 17:for(;y<14;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(n.nlen=257+(31&b),b>>>=5,y-=5,n.ndist=1+(31&b),b>>>=5,y-=5,n.ncode=4+(15&b),b>>>=4,y-=4,n.nlen>286||n.ndist>30){e.msg=\"too many length or distance symbols\",n.mode=u;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;y<3;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.lens[N[n.have++]]=7&b,b>>>=3,y-=3}for(;n.have<19;)n.lens[N[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,L={bits:n.lenbits},A=l(0,n.lens,0,19,n.lencode,0,n.work,L),n.lenbits=L.bits,A){e.msg=\"invalid code lengths set\",n.mode=u;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;C=(z=n.lencode[b&(1<<n.lenbits)-1])>>>16&255,I=65535&z,!((O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(I<16)b>>>=O,y-=O,n.lens[n.have++]=I;else{if(16===I){for(Z=O+2;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(b>>>=O,y-=O,0===n.have){e.msg=\"invalid bit length repeat\",n.mode=u;break}D=n.lens[n.have-1],S=3+(3&b),b>>>=2,y-=2}else if(17===I){for(Z=O+3;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}y-=O,D=0,S=3+(7&(b>>>=O)),b>>>=3,y-=3}else{for(Z=O+7;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}y-=O,D=0,S=11+(127&(b>>>=O)),b>>>=7,y-=7}if(n.have+S>n.nlen+n.ndist){e.msg=\"invalid bit length repeat\",n.mode=u;break}for(;S--;)n.lens[n.have++]=D}}if(n.mode===u)break;if(0===n.lens[256]){e.msg=\"invalid code -- missing end-of-block\",n.mode=u;break}if(n.lenbits=9,L={bits:n.lenbits},A=l(1,n.lens,0,n.nlen,n.lencode,0,n.work,L),n.lenbits=L.bits,A){e.msg=\"invalid literal\/lengths set\",n.mode=u;break}if(n.distbits=6,n.distcode=n.distdyn,L={bits:n.distbits},A=l(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,L),n.distbits=L.bits,A){e.msg=\"invalid distances set\",n.mode=u;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(g>=6&&v>=258){e.next_out=m,e.avail_out=v,e.next_in=h,e.avail_in=g,n.hold=b,n.bits=y,a(e,E),m=e.next_out,p=e.output,v=e.avail_out,h=e.next_in,f=e.input,g=e.avail_in,b=n.hold,y=n.bits,n.mode===c&&(n.back=-1);break}for(n.back=0;C=(z=n.lencode[b&(1<<n.lenbits)-1])>>>16&255,I=65535&z,!((O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(C&&0==(240&C)){for(M=O,T=C,P=I;C=(z=n.lencode[P+((b&(1<<M+T)-1)>>M)])>>>16&255,I=65535&z,!(M+(O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}b>>>=M,y-=M,n.back+=M}if(b>>>=O,y-=O,n.back+=O,n.length=I,0===C){n.mode=26;break}if(32&C){n.back=-1,n.mode=c;break}if(64&C){e.msg=\"invalid literal\/length code\",n.mode=u;break}n.extra=15&C,n.mode=22;case 22:if(n.extra){for(Z=n.extra;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.length+=b&(1<<n.extra)-1,b>>>=n.extra,y-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;C=(z=n.distcode[b&(1<<n.distbits)-1])>>>16&255,I=65535&z,!((O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(0==(240&C)){for(M=O,T=C,P=I;C=(z=n.distcode[P+((b&(1<<M+T)-1)>>M)])>>>16&255,I=65535&z,!(M+(O=z>>>24)<=y);){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}b>>>=M,y-=M,n.back+=M}if(b>>>=O,y-=O,n.back+=O,64&C){e.msg=\"invalid distance code\",n.mode=u;break}n.offset=I,n.extra=15&C,n.mode=24;case 24:if(n.extra){for(Z=n.extra;y<Z;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}n.offset+=b&(1<<n.extra)-1,b>>>=n.extra,y-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg=\"invalid distance too far back\",n.mode=u;break}n.mode=25;case 25:if(0===v)break e;if(S=E-v,n.offset>S){if((S=n.offset-S)>n.whave&&n.sane){e.msg=\"invalid distance too far back\",n.mode=u;break}S>n.wnext?(S-=n.wnext,j=n.wsize-S):j=n.wnext-S,S>n.length&&(S=n.length),_=n.window}else _=p,j=m-n.offset,S=n.length;S>v&&(S=v),v-=S,n.length-=S;do{p[m++]=_[j++]}while(--S);0===n.length&&(n.mode=21);break;case 26:if(0===v)break e;p[m++]=n.length,v--,n.mode=21;break;case 27:if(n.wrap){for(;y<32;){if(0===g)break e;g--,b|=f[h++]<<y,y+=8}if(E-=v,e.total_out+=E,n.total+=E,E&&(e.adler=n.check=n.flags?i(n.check,p,E,m-E):o(n.check,p,E,m-E)),E=v,(n.flags?b:d(b))!==n.check){e.msg=\"incorrect data check\",n.mode=u;break}b=0,y=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;y<32;){if(0===g)break e;g--,b+=f[h++]<<y,y+=8}if(b!==(4294967295&n.total)){e.msg=\"incorrect length check\",n.mode=u;break}b=0,y=0}n.mode=29;case 29:A=1;break e;case u:A=-3;break e;case 31:return-4;default:return s}return e.next_out=m,e.avail_out=v,e.next_in=h,e.avail_in=g,n.hold=b,n.bits=y,(n.wsize||E!==e.avail_out&&n.mode<u&&(n.mode<27||4!==t))&&w(e,e.output,e.next_out,E-e.avail_out)?(n.mode=31,-4):(k-=e.avail_in,E-=e.avail_out,e.total_in+=k,e.total_out+=E,n.total+=E,n.wrap&&E&&(e.adler=n.check=n.flags?i(n.check,p,E,e.next_out-E):o(n.check,p,E,e.next_out-E)),e.data_type=n.bits+(n.last?64:0)+(n.mode===c?128:0)+(20===n.mode||15===n.mode?256:0),(0===k&&0===E||4===t)&&0===A&&(A=-5),A)},t.inflateEnd=function(e){if(!e||!e.state)return s;var t=e.state;return t.window&&(t.window=null),e.state=null,0},t.inflateGetHeader=function(e,t){var n;return e&&e.state?0==(2&(n=e.state).wrap)?s:(n.head=t,t.done=!1,0):s},t.inflateSetDictionary=function(e,t){var n,r=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?s:11===n.mode&&o(1,t,r,0)!==n.check?-3:w(e,t,r,r)?(n.mode=31,-4):(n.havedict=1,0):s},t.inflateInfo=\"pako inflate (from Nodeca project)\"},6446:function(e,t,n){\"use strict\";var r=n(9187),o=15,i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],l=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,n,c,u,d,f,p){var h,m,g,v,b,y,x,w,k,E=p.bits,S=0,j=0,_=0,O=0,C=0,I=0,M=0,T=0,P=0,D=0,A=null,L=0,Z=new r.Buf16(16),z=new r.Buf16(16),R=null,N=0;for(S=0;S<=o;S++)Z[S]=0;for(j=0;j<c;j++)Z[t[n+j]]++;for(C=E,O=o;O>=1&&0===Z[O];O--);if(C>O&&(C=O),0===O)return u[d++]=20971520,u[d++]=20971520,p.bits=1,0;for(_=1;_<O&&0===Z[_];_++);for(C<_&&(C=_),T=1,S=1;S<=o;S++)if(T<<=1,(T-=Z[S])<0)return-1;if(T>0&&(0===e||1!==O))return-1;for(z[1]=0,S=1;S<o;S++)z[S+1]=z[S]+Z[S];for(j=0;j<c;j++)0!==t[n+j]&&(f[z[t[n+j]]++]=j);if(0===e?(A=R=f,y=19):1===e?(A=i,L-=257,R=a,N-=257,y=256):(A=l,R=s,y=-1),D=0,j=0,S=_,b=d,I=C,M=0,g=-1,v=(P=1<<C)-1,1===e&&P>852||2===e&&P>592)return 1;for(;;){x=S-M,f[j]<y?(w=0,k=f[j]):f[j]>y?(w=R[N+f[j]],k=A[L+f[j]]):(w=96,k=0),h=1<<S-M,_=m=1<<I;do{u[b+(D>>M)+(m-=h)]=x<<24|w<<16|k|0}while(0!==m);for(h=1<<S-1;D&h;)h>>=1;if(0!==h?(D&=h-1,D+=h):D=0,j++,0==--Z[S]){if(S===O)break;S=t[n+f[j]]}if(S>C&&(D&v)!==g){for(0===M&&(M=C),b+=_,T=1<<(I=S-M);I+M<O&&!((T-=Z[I+M])<=0);)I++,T<<=1;if(P+=1<<I,1===e&&P>852||2===e&&P>592)return 1;u[g=D&v]=C<<24|I<<16|b-d|0}}return 0!==D&&(u[b+D]=S-M<<24|64<<16|0),p.bits=C,0}},5604:function(e){\"use strict\";e.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},8676:function(e,t,n){\"use strict\";var r=n(9187);function o(e){for(var t=e.length;--t>=0;)e[t]=0}var i=256,a=286,l=30,s=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],u=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],d=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],p=new Array(576);o(p);var h=new Array(60);o(h);var m=new Array(512);o(m);var g=new Array(256);o(g);var v=new Array(29);o(v);var b,y,x,w=new Array(l);function k(e,t,n,r,o){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=o,this.has_stree=e&&e.length}function E(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function S(e){return e<256?m[e]:m[256+(e>>>7)]}function j(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function _(e,t,n){e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,j(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function O(e,t,n){_(e,n[2*t],n[2*t+1])}function C(e,t){var n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}function I(e,t,n){var r,o,i=new Array(16),a=0;for(r=1;r<=s;r++)i[r]=a=a+n[r-1]<<1;for(o=0;o<=t;o++){var l=e[2*o+1];0!==l&&(e[2*o]=C(i[l]++,l))}}function M(e){var t;for(t=0;t<a;t++)e.dyn_ltree[2*t]=0;for(t=0;t<l;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function T(e){e.bi_valid>8?j(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function P(e,t,n,r){var o=2*t,i=2*n;return e[o]<e[i]||e[o]===e[i]&&r[t]<=r[n]}function D(e,t,n){for(var r=e.heap[n],o=n<<1;o<=e.heap_len&&(o<e.heap_len&&P(t,e.heap[o+1],e.heap[o],e.depth)&&o++,!P(t,r,e.heap[o],e.depth));)e.heap[n]=e.heap[o],n=o,o<<=1;e.heap[n]=r}function A(e,t,n){var r,o,a,l,s=0;if(0!==e.last_lit)do{r=e.pending_buf[e.d_buf+2*s]<<8|e.pending_buf[e.d_buf+2*s+1],o=e.pending_buf[e.l_buf+s],s++,0===r?O(e,o,t):(O(e,(a=g[o])+i+1,t),0!==(l=c[a])&&_(e,o-=v[a],l),O(e,a=S(--r),n),0!==(l=u[a])&&_(e,r-=w[a],l))}while(s<e.last_lit);O(e,256,t)}function L(e,t){var n,r,o,i=t.dyn_tree,a=t.stat_desc.static_tree,l=t.stat_desc.has_stree,c=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<c;n++)0!==i[2*n]?(e.heap[++e.heap_len]=u=n,e.depth[n]=0):i[2*n+1]=0;for(;e.heap_len<2;)i[2*(o=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[o]=0,e.opt_len--,l&&(e.static_len-=a[2*o+1]);for(t.max_code=u,n=e.heap_len>>1;n>=1;n--)D(e,i,n);o=c;do{n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],D(e,i,1),r=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=r,i[2*o]=i[2*n]+i[2*r],e.depth[o]=(e.depth[n]>=e.depth[r]?e.depth[n]:e.depth[r])+1,i[2*n+1]=i[2*r+1]=o,e.heap[1]=o++,D(e,i,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,r,o,i,a,l,c=t.dyn_tree,u=t.max_code,d=t.stat_desc.static_tree,f=t.stat_desc.has_stree,p=t.stat_desc.extra_bits,h=t.stat_desc.extra_base,m=t.stat_desc.max_length,g=0;for(i=0;i<=s;i++)e.bl_count[i]=0;for(c[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)(i=c[2*c[2*(r=e.heap[n])+1]+1]+1)>m&&(i=m,g++),c[2*r+1]=i,r>u||(e.bl_count[i]++,a=0,r>=h&&(a=p[r-h]),l=c[2*r],e.opt_len+=l*(i+a),f&&(e.static_len+=l*(d[2*r+1]+a)));if(0!==g){do{for(i=m-1;0===e.bl_count[i];)i--;e.bl_count[i]--,e.bl_count[i+1]+=2,e.bl_count[m]--,g-=2}while(g>0);for(i=m;0!==i;i--)for(r=e.bl_count[i];0!==r;)(o=e.heap[--n])>u||(c[2*o+1]!==i&&(e.opt_len+=(i-c[2*o+1])*c[2*o],c[2*o+1]=i),r--)}}(e,t),I(i,u,e.bl_count)}function Z(e,t,n){var r,o,i=-1,a=t[1],l=0,s=7,c=4;for(0===a&&(s=138,c=3),t[2*(n+1)+1]=65535,r=0;r<=n;r++)o=a,a=t[2*(r+1)+1],++l<s&&o===a||(l<c?e.bl_tree[2*o]+=l:0!==o?(o!==i&&e.bl_tree[2*o]++,e.bl_tree[32]++):l<=10?e.bl_tree[34]++:e.bl_tree[36]++,l=0,i=o,0===a?(s=138,c=3):o===a?(s=6,c=3):(s=7,c=4))}function z(e,t,n){var r,o,i=-1,a=t[1],l=0,s=7,c=4;for(0===a&&(s=138,c=3),r=0;r<=n;r++)if(o=a,a=t[2*(r+1)+1],!(++l<s&&o===a)){if(l<c)do{O(e,o,e.bl_tree)}while(0!=--l);else 0!==o?(o!==i&&(O(e,o,e.bl_tree),l--),O(e,16,e.bl_tree),_(e,l-3,2)):l<=10?(O(e,17,e.bl_tree),_(e,l-3,3)):(O(e,18,e.bl_tree),_(e,l-11,7));l=0,i=o,0===a?(s=138,c=3):o===a?(s=6,c=3):(s=7,c=4)}}o(w);var R=!1;function N(e,t,n,o){_(e,0+(o?1:0),3),function(e,t,n,o){T(e),o&&(j(e,n),j(e,~n)),r.arraySet(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n,!0)}t._tr_init=function(e){R||(!function(){var e,t,n,r,o,i=new Array(16);for(n=0,r=0;r<28;r++)for(v[r]=n,e=0;e<1<<c[r];e++)g[n++]=r;for(g[n-1]=r,o=0,r=0;r<16;r++)for(w[r]=o,e=0;e<1<<u[r];e++)m[o++]=r;for(o>>=7;r<l;r++)for(w[r]=o<<7,e=0;e<1<<u[r]-7;e++)m[256+o++]=r;for(t=0;t<=s;t++)i[t]=0;for(e=0;e<=143;)p[2*e+1]=8,e++,i[8]++;for(;e<=255;)p[2*e+1]=9,e++,i[9]++;for(;e<=279;)p[2*e+1]=7,e++,i[7]++;for(;e<=287;)p[2*e+1]=8,e++,i[8]++;for(I(p,287,i),e=0;e<l;e++)h[2*e+1]=5,h[2*e]=C(e,5);b=new k(p,c,257,a,s),y=new k(h,u,0,l,s),x=new k(new Array(0),d,0,19,7)}(),R=!0),e.l_desc=new E(e.dyn_ltree,b),e.d_desc=new E(e.dyn_dtree,y),e.bl_desc=new E(e.bl_tree,x),e.bi_buf=0,e.bi_valid=0,M(e)},t._tr_stored_block=N,t._tr_flush_block=function(e,t,n,r){var o,a,l=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<i;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),L(e,e.l_desc),L(e,e.d_desc),l=function(e){var t;for(Z(e,e.dyn_ltree,e.l_desc.max_code),Z(e,e.dyn_dtree,e.d_desc.max_code),L(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*f[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),o=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=o&&(o=a)):o=a=n+5,n+4<=o&&-1!==t?N(e,t,n,r):4===e.strategy||a===o?(_(e,2+(r?1:0),3),A(e,p,h)):(_(e,4+(r?1:0),3),function(e,t,n,r){var o;for(_(e,t-257,5),_(e,n-1,5),_(e,r-4,4),o=0;o<r;o++)_(e,e.bl_tree[2*f[o]+1],3);z(e,e.dyn_ltree,t-1),z(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,l+1),A(e,e.dyn_ltree,e.dyn_dtree)),M(e),r&&T(e)},t._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(g[n]+i+1)]++,e.dyn_dtree[2*S(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){_(e,2,3),O(e,256,p),function(e){16===e.bi_valid?(j(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},249:function(e){\"use strict\";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},9066:function(e){e.exports=function(e){e.data&&e.name&&(e=e.data);for(var t=!0,n=\"\",r=\"\",o=0;o<e.length;o++){var i=e[o];if(t)i?r+=String.fromCharCode(i):t=!1;else{if(!i)throw new Error(\"Invalid NULL character found. 0x00 character is not permitted in tEXt content\");n+=String.fromCharCode(i)}}return{keyword:r,text:n}}},9686:function(e){e.exports=function(e,t){if(e=String(e),t=String(t),!\/^[\\x00-\\xFF]+$\/.test(e)||!\/^[\\x00-\\xFF]+$\/.test(t))throw new Error(\"Only Latin-1 characters are permitted in PNG tEXt chunks. You might want to consider base64 encoding and\/or zEXt compression\");if(e.length>=80)throw new Error('Keyword \"'+e+'\" is longer than the 79-character limit imposed by the PNG specification');for(var n,r=e.length+t.length+1,o=new Uint8Array(r),i=0,a=0;a<e.length;a++){if(!(n=e.charCodeAt(a)))throw new Error(\"0x00 character is not permitted in tEXt keywords\");o[i++]=n}o[i++]=0;for(var l=0;l<t.length;l++){if(!(n=t.charCodeAt(l)))throw new Error(\"0x00 character is not permitted in tEXt content\");o[i++]=n}return{name:\"tEXt\",data:o}}},1194:function(e,t,n){t.encode=n(9686),t.decode=n(9066)},3434:function(e,t,n){var r=n(5714),o=n(6233);e.exports=function(e){var t,n=8,s=n;for(t=0;t<e.length;t++)n+=e[t].data.length,n+=12;var c=new Uint8Array(n);for(c[0]=137,c[1]=80,c[2]=78,c[3]=71,c[4]=13,c[5]=10,c[6]=26,c[7]=10,t=0;t<e.length;t++){var u=e[t],d=u.name,f=u.data,p=f.length,h=[d.charCodeAt(0),d.charCodeAt(1),d.charCodeAt(2),d.charCodeAt(3)];l[0]=p,c[s++]=i[3],c[s++]=i[2],c[s++]=i[1],c[s++]=i[0],c[s++]=h[0],c[s++]=h[1],c[s++]=h[2],c[s++]=h[3];for(var m=0;m<p;)c[s++]=f[m++];var g=h.concat(r(f)),v=o.buf(g);a[0]=v,c[s++]=i[3],c[s++]=i[2],c[s++]=i[1],c[s++]=i[0]}return c};var i=new Uint8Array(4),a=new Int32Array(i.buffer),l=new Uint32Array(i.buffer)},2983:function(e,t,n){var r=n(6233);e.exports=function(e){if(137!==e[0])throw new Error(\"Invalid .png file header\");if(80!==e[1])throw new Error(\"Invalid .png file header\");if(78!==e[2])throw new Error(\"Invalid .png file header\");if(71!==e[3])throw new Error(\"Invalid .png file header\");if(13!==e[4])throw new Error(\"Invalid .png file header: possibly caused by DOS-Unix line ending conversion?\");if(10!==e[5])throw new Error(\"Invalid .png file header: possibly caused by DOS-Unix line ending conversion?\");if(26!==e[6])throw new Error(\"Invalid .png file header\");if(10!==e[7])throw new Error(\"Invalid .png file header: possibly caused by DOS-Unix line ending conversion?\");var t=!1,n=[],l=8;for(;l<e.length;){o[3]=e[l++],o[2]=e[l++],o[1]=e[l++],o[0]=e[l++];var s=a[0]+4,c=new Uint8Array(s);c[0]=e[l++],c[1]=e[l++],c[2]=e[l++],c[3]=e[l++];var u=String.fromCharCode(c[0])+String.fromCharCode(c[1])+String.fromCharCode(c[2])+String.fromCharCode(c[3]);if(!n.length&&\"IHDR\"!==u)throw new Error(\"IHDR header missing\");if(\"IEND\"===u){t=!0,n.push({name:u,data:new Uint8Array(0)});break}for(var d=4;d<s;d++)c[d]=e[l++];o[3]=e[l++],o[2]=e[l++],o[1]=e[l++],o[0]=e[l++];var f=i[0];if(r.buf(c)!==f)throw new Error(\"CRC values for \"+u+\" header do not match, PNG file is likely corrupted\");var p=new Uint8Array(c.buffer.slice(4));n.push({name:u,data:p})}if(!t)throw new Error(\".png file ended prematurely: no IEND header was found\");return n};var o=new Uint8Array(4),i=new Int32Array(o.buffer),a=new Uint32Array(o.buffer)},1493:function(e,t,n){\"use strict\";function r(e,t){return Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)}function o(e,t,n){const o=r(t,n);if(0===o)return r(e,t);let a=((e[0]-t[0])*(n[0]-t[0])+(e[1]-t[1])*(n[1]-t[1]))\/o;return a=Math.max(0,Math.min(1,a)),r(e,i(t,n,a))}function i(e,t,n){return[e[0]+(t[0]-e[0])*n,e[1]+(t[1]-e[1])*n]}function a(e,t,n,o){const l=o||[];if(function(e,t){const n=e[t+0],r=e[t+1],o=e[t+2],i=e[t+3];let a=3*r[0]-2*n[0]-i[0];a*=a;let l=3*r[1]-2*n[1]-i[1];l*=l;let s=3*o[0]-2*i[0]-n[0];s*=s;let c=3*o[1]-2*i[1]-n[1];return c*=c,a<s&&(a=s),l<c&&(l=c),a+l}(e,t)<n){const n=e[t+0];if(l.length){(s=l[l.length-1],c=n,Math.sqrt(r(s,c)))>1&&l.push(n)}else l.push(n);l.push(e[t+3])}else{const r=.5,o=e[t+0],s=e[t+1],c=e[t+2],u=e[t+3],d=i(o,s,r),f=i(s,c,r),p=i(c,u,r),h=i(d,f,r),m=i(f,p,r),g=i(h,m,r);a([o,d,h,g],0,n,l),a([g,m,p,u],0,n,l)}var s,c;return l}function l(e,t){return s(e,0,e.length,t)}function s(e,t,n,r,i){const a=i||[],l=e[t],c=e[n-1];let u=0,d=1;for(let r=t+1;r<n-1;++r){const t=o(e[r],l,c);t>u&&(u=t,d=r)}return Math.sqrt(u)>r?(s(e,t,d+1,r,a),s(e,d,n,r,a)):(a.length||a.push(l),a.push(c)),a}function c(e,t=.15,n){const r=[],o=(e.length-1)\/3;for(let n=0;n<o;n++){a(e,3*n,t,r)}return n&&n>0?s(r,0,r.length,n):r}n.d(t,{o:function(){return l},s:function(){return c}})},6094:function(e,t,n){\"use strict\";var r=n(9787),o=Symbol.for(\"react.element\"),i=Symbol.for(\"react.fragment\"),a=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,i={},c=null,u=null;for(r in void 0!==n&&(c=\"\"+n),void 0!==t.key&&(c=\"\"+t.key),void 0!==t.ref&&(u=t.ref),t)a.call(t,r)&&!s.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:u,props:i,_owner:l.current}}t.Fragment=i,t.jsx=c,t.jsxs=c},4512:function(e,t,n){\"use strict\";e.exports=n(6094)},8152:function(e,t,n){\"use strict\";function r(){return Math.floor(Math.random()*2**31)}n.d(t,{W:function(){return r},k:function(){return o}});class o{constructor(e){this.seed=e}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))\/2**31:Math.random()}}},8234:function(e,t,n){\"use strict\";function r(e,t,n){if(e&&e.length){const[r,o]=t,i=Math.PI\/180*n,a=Math.cos(i),l=Math.sin(i);e.forEach((e=>{const[t,n]=e;e[0]=(t-r)*a-(n-o)*l+r,e[1]=(t-r)*l+(n-o)*a+o}))}}function o(e){const t=e[0],n=e[1];return Math.sqrt(Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2))}function i(e,t){const n=t.hachureAngle+90;let o=t.hachureGap;o<0&&(o=4*t.strokeWidth),o=Math.max(o,.1);const i=[0,0];if(n)for(const t of e)r(t,i,n);const a=function(e,t){const n=[];for(const t of e){const e=[...t];e[0].join(\",\")!==e[e.length-1].join(\",\")&&e.push([e[0][0],e[0][1]]),e.length>2&&n.push(e)}const r=[];t=Math.max(t,.1);const o=[];for(const e of n)for(let t=0;t<e.length-1;t++){const n=e[t],r=e[t+1];if(n[1]!==r[1]){const e=Math.min(n[1],r[1]);o.push({ymin:e,ymax:Math.max(n[1],r[1]),x:e===n[1]?n[0]:r[0],islope:(r[0]-n[0])\/(r[1]-n[1])})}}if(o.sort(((e,t)=>e.ymin<t.ymin?-1:e.ymin>t.ymin?1:e.x<t.x?-1:e.x>t.x?1:e.ymax===t.ymax?0:(e.ymax-t.ymax)\/Math.abs(e.ymax-t.ymax))),!o.length)return r;let i=[],a=o[0].ymin;for(;i.length||o.length;){if(o.length){let e=-1;for(let t=0;t<o.length&&!(o[t].ymin>a);t++)e=t;o.splice(0,e+1).forEach((e=>{i.push({s:a,edge:e})}))}if(i=i.filter((e=>!(e.edge.ymax<=a))),i.sort(((e,t)=>e.edge.x===t.edge.x?0:(e.edge.x-t.edge.x)\/Math.abs(e.edge.x-t.edge.x))),i.length>1)for(let e=0;e<i.length;e+=2){const t=e+1;if(t>=i.length)break;const n=i[e].edge,o=i[t].edge;r.push([[Math.round(n.x),a],[Math.round(o.x),a]])}a+=t,i.forEach((e=>{e.edge.x=e.edge.x+t*e.edge.islope}))}return r}(e,o);if(n){for(const t of e)r(t,i,-n);!function(e,t,n){const o=[];e.forEach((e=>o.push(...e))),r(o,t,n)}(a,i,-n)}return a}n.d(t,{Z:function(){return V}});class a{constructor(e){this.helper=e}fillPolygons(e,t){return this._fillPolygons(e,t)}_fillPolygons(e,t){const n=i(e,t);return{type:\"fillSketch\",ops:this.renderLines(n,t)}}renderLines(e,t){const n=[];for(const r of e)n.push(...this.helper.doubleLineOps(r[0][0],r[0][1],r[1][0],r[1][1],t));return n}}class l extends a{fillPolygons(e,t){let n=t.hachureGap;n<0&&(n=4*t.strokeWidth),n=Math.max(n,.1);const r=i(e,Object.assign({},t,{hachureGap:n})),a=Math.PI\/180*t.hachureAngle,l=[],s=.5*n*Math.cos(a),c=.5*n*Math.sin(a);for(const[e,t]of r)o([e,t])&&l.push([[e[0]-s,e[1]+c],[...t]],[[e[0]+s,e[1]-c],[...t]]);return{type:\"fillSketch\",ops:this.renderLines(l,t)}}}class s extends a{fillPolygons(e,t){const n=this._fillPolygons(e,t),r=Object.assign({},t,{hachureAngle:t.hachureAngle+90}),o=this._fillPolygons(e,r);return n.ops=n.ops.concat(o.ops),n}}class c{constructor(e){this.helper=e}fillPolygons(e,t){const n=i(e,t=Object.assign({},t,{hachureAngle:0}));return this.dotsOnLines(n,t)}dotsOnLines(e,t){const n=[];let r=t.hachureGap;r<0&&(r=4*t.strokeWidth),r=Math.max(r,.1);let i=t.fillWeight;i<0&&(i=t.strokeWidth\/2);const a=r\/4;for(const l of e){const e=o(l),s=e\/r,c=Math.ceil(s)-1,u=e-c*r,d=(l[0][0]+l[1][0])\/2-r\/4,f=Math.min(l[0][1],l[1][1]);for(let e=0;e<c;e++){const o=f+u+e*r,l=d-a+2*Math.random()*a,s=o-a+2*Math.random()*a,c=this.helper.ellipse(l,s,i,i,t);n.push(...c.ops)}}return{type:\"fillSketch\",ops:n}}}class u{constructor(e){this.helper=e}fillPolygons(e,t){const n=i(e,t);return{type:\"fillSketch\",ops:this.dashedLine(n,t)}}dashedLine(e,t){const n=t.dashOffset<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashOffset,r=t.dashGap<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashGap,i=[];return e.forEach((e=>{const a=o(e),l=Math.floor(a\/(n+r)),s=(a+r-l*(n+r))\/2;let c=e[0],u=e[1];c[0]>u[0]&&(c=e[1],u=e[0]);const d=Math.atan((u[1]-c[1])\/(u[0]-c[0]));for(let e=0;e<l;e++){const o=e*(n+r),a=o+n,l=[c[0]+o*Math.cos(d)+s*Math.cos(d),c[1]+o*Math.sin(d)+s*Math.sin(d)],u=[c[0]+a*Math.cos(d)+s*Math.cos(d),c[1]+a*Math.sin(d)+s*Math.sin(d)];i.push(...this.helper.doubleLineOps(l[0],l[1],u[0],u[1],t))}})),i}}class d{constructor(e){this.helper=e}fillPolygons(e,t){const n=t.hachureGap<0?4*t.strokeWidth:t.hachureGap,r=t.zigzagOffset<0?n:t.zigzagOffset,o=i(e,t=Object.assign({},t,{hachureGap:n+r}));return{type:\"fillSketch\",ops:this.zigzagLines(o,r,t)}}zigzagLines(e,t,n){const r=[];return e.forEach((e=>{const i=o(e),a=Math.round(i\/(2*t));let l=e[0],s=e[1];l[0]>s[0]&&(l=e[1],s=e[0]);const c=Math.atan((s[1]-l[1])\/(s[0]-l[0]));for(let e=0;e<a;e++){const o=2*e*t,i=2*(e+1)*t,a=Math.sqrt(2*Math.pow(t,2)),s=[l[0]+o*Math.cos(c),l[1]+o*Math.sin(c)],u=[l[0]+i*Math.cos(c),l[1]+i*Math.sin(c)],d=[s[0]+a*Math.cos(c+Math.PI\/4),s[1]+a*Math.sin(c+Math.PI\/4)];r.push(...this.helper.doubleLineOps(s[0],s[1],d[0],d[1],n),...this.helper.doubleLineOps(d[0],d[1],u[0],u[1],n))}})),r}}const f={};var p=n(8152);const h={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function m(e,t){return e.type===t}function g(e){const t=[],n=function(e){const t=new Array;for(;\"\"!==e;)if(e.match(\/^([ \\t\\r\\n,]+)\/))e=e.substr(RegExp.$1.length);else if(e.match(\/^([aAcChHlLmMqQsStTvVzZ])\/))t[t.length]={type:0,text:RegExp.$1},e=e.substr(RegExp.$1.length);else{if(!e.match(\/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)\/))return[];t[t.length]={type:1,text:`${parseFloat(RegExp.$1)}`},e=e.substr(RegExp.$1.length)}return t[t.length]={type:2,text:\"\"},t}(e);let r=\"BOD\",o=0,i=n[o];for(;!m(i,2);){let a=0;const l=[];if(\"BOD\"===r){if(\"M\"!==i.text&&\"m\"!==i.text)return g(\"M0,0\"+e);o++,a=h[i.text],r=i.text}else m(i,1)?a=h[r]:(o++,a=h[i.text],r=i.text);if(!(o+a<n.length))throw new Error(\"Path data ended short\");for(let e=o;e<o+a;e++){const t=n[e];if(!m(t,1))throw new Error(\"Param not a number: \"+r+\",\"+t.text);l[l.length]=+t.text}if(\"number\"!=typeof h[r])throw new Error(\"Bad segment: \"+r);{const e={key:r,data:l};t.push(e),o+=a,i=n[o],\"M\"===r&&(r=\"L\"),\"m\"===r&&(r=\"l\")}}return t}function v(e){let t=0,n=0,r=0,o=0;const i=[];for(const{key:a,data:l}of e)switch(a){case\"M\":i.push({key:\"M\",data:[...l]}),[t,n]=l,[r,o]=l;break;case\"m\":t+=l[0],n+=l[1],i.push({key:\"M\",data:[t,n]}),r=t,o=n;break;case\"L\":i.push({key:\"L\",data:[...l]}),[t,n]=l;break;case\"l\":t+=l[0],n+=l[1],i.push({key:\"L\",data:[t,n]});break;case\"C\":i.push({key:\"C\",data:[...l]}),t=l[4],n=l[5];break;case\"c\":{const e=l.map(((e,r)=>r%2?e+n:e+t));i.push({key:\"C\",data:e}),t=e[4],n=e[5];break}case\"Q\":i.push({key:\"Q\",data:[...l]}),t=l[2],n=l[3];break;case\"q\":{const e=l.map(((e,r)=>r%2?e+n:e+t));i.push({key:\"Q\",data:e}),t=e[2],n=e[3];break}case\"A\":i.push({key:\"A\",data:[...l]}),t=l[5],n=l[6];break;case\"a\":t+=l[5],n+=l[6],i.push({key:\"A\",data:[l[0],l[1],l[2],l[3],l[4],t,n]});break;case\"H\":i.push({key:\"H\",data:[...l]}),t=l[0];break;case\"h\":t+=l[0],i.push({key:\"H\",data:[t]});break;case\"V\":i.push({key:\"V\",data:[...l]}),n=l[0];break;case\"v\":n+=l[0],i.push({key:\"V\",data:[n]});break;case\"S\":i.push({key:\"S\",data:[...l]}),t=l[2],n=l[3];break;case\"s\":{const e=l.map(((e,r)=>r%2?e+n:e+t));i.push({key:\"S\",data:e}),t=e[2],n=e[3];break}case\"T\":i.push({key:\"T\",data:[...l]}),t=l[0],n=l[1];break;case\"t\":t+=l[0],n+=l[1],i.push({key:\"T\",data:[t,n]});break;case\"Z\":case\"z\":i.push({key:\"Z\",data:[]}),t=r,n=o}return i}function b(e){const t=[];let n=\"\",r=0,o=0,i=0,a=0,l=0,s=0;for(const{key:c,data:u}of e){switch(c){case\"M\":t.push({key:\"M\",data:[...u]}),[r,o]=u,[i,a]=u;break;case\"C\":t.push({key:\"C\",data:[...u]}),r=u[4],o=u[5],l=u[2],s=u[3];break;case\"L\":t.push({key:\"L\",data:[...u]}),[r,o]=u;break;case\"H\":r=u[0],t.push({key:\"L\",data:[r,o]});break;case\"V\":o=u[0],t.push({key:\"L\",data:[r,o]});break;case\"S\":{let e=0,i=0;\"C\"===n||\"S\"===n?(e=r+(r-l),i=o+(o-s)):(e=r,i=o),t.push({key:\"C\",data:[e,i,...u]}),l=u[0],s=u[1],r=u[2],o=u[3];break}case\"T\":{const[e,i]=u;let a=0,c=0;\"Q\"===n||\"T\"===n?(a=r+(r-l),c=o+(o-s)):(a=r,c=o);const d=r+2*(a-r)\/3,f=o+2*(c-o)\/3,p=e+2*(a-e)\/3,h=i+2*(c-i)\/3;t.push({key:\"C\",data:[d,f,p,h,e,i]}),l=a,s=c,r=e,o=i;break}case\"Q\":{const[e,n,i,a]=u,c=r+2*(e-r)\/3,d=o+2*(n-o)\/3,f=i+2*(e-i)\/3,p=a+2*(n-a)\/3;t.push({key:\"C\",data:[c,d,f,p,i,a]}),l=e,s=n,r=i,o=a;break}case\"A\":{const e=Math.abs(u[0]),n=Math.abs(u[1]),i=u[2],a=u[3],l=u[4],s=u[5],c=u[6];if(0===e||0===n)t.push({key:\"C\",data:[r,o,s,c,s,c]}),r=s,o=c;else if(r!==s||o!==c){x(r,o,s,c,e,n,i,a,l).forEach((function(e){t.push({key:\"C\",data:e})})),r=s,o=c}break}case\"Z\":t.push({key:\"Z\",data:[]}),r=i,o=a}n=c}return t}function y(e,t,n){return[e*Math.cos(n)-t*Math.sin(n),e*Math.sin(n)+t*Math.cos(n)]}function x(e,t,n,r,o,i,a,l,s,c){const u=(d=a,Math.PI*d\/180);var d;let f=[],p=0,h=0,m=0,g=0;if(c)[p,h,m,g]=c;else{[e,t]=y(e,t,-u),[n,r]=y(n,r,-u);const a=(e-n)\/2,c=(t-r)\/2;let d=a*a\/(o*o)+c*c\/(i*i);d>1&&(d=Math.sqrt(d),o*=d,i*=d);const f=o*o,v=i*i,b=f*v-f*c*c-v*a*a,x=f*c*c+v*a*a,w=(l===s?-1:1)*Math.sqrt(Math.abs(b\/x));m=w*o*c\/i+(e+n)\/2,g=w*-i*a\/o+(t+r)\/2,p=Math.asin(parseFloat(((t-g)\/i).toFixed(9))),h=Math.asin(parseFloat(((r-g)\/i).toFixed(9))),e<m&&(p=Math.PI-p),n<m&&(h=Math.PI-h),p<0&&(p=2*Math.PI+p),h<0&&(h=2*Math.PI+h),s&&p>h&&(p-=2*Math.PI),!s&&h>p&&(h-=2*Math.PI)}let v=h-p;if(Math.abs(v)>120*Math.PI\/180){const e=h,t=n,l=r;h=s&&h>p?p+120*Math.PI\/180*1:p+120*Math.PI\/180*-1,f=x(n=m+o*Math.cos(h),r=g+i*Math.sin(h),t,l,o,i,a,0,s,[h,e,m,g])}v=h-p;const b=Math.cos(p),w=Math.sin(p),k=Math.cos(h),E=Math.sin(h),S=Math.tan(v\/4),j=4\/3*o*S,_=4\/3*i*S,O=[e,t],C=[e+j*w,t-_*b],I=[n+j*E,r-_*k],M=[n,r];if(C[0]=2*O[0]-C[0],C[1]=2*O[1]-C[1],c)return[C,I,M].concat(f);{f=[C,I,M].concat(f);const e=[];for(let t=0;t<f.length;t+=3){const n=y(f[t][0],f[t][1],u),r=y(f[t+1][0],f[t+1][1],u),o=y(f[t+2][0],f[t+2][1],u);e.push([n[0],n[1],r[0],r[1],o[0],o[1]])}return e}}const w={randOffset:function(e,t){return D(e,t)},randOffsetWithRange:function(e,t,n){return P(e,t,n)},ellipse:function(e,t,n,r,o){const i=_(n,r,o);return O(e,t,o,i).opset},doubleLineOps:function(e,t,n,r,o){return A(e,t,n,r,o,!0)}};function k(e,t,n,r,o){return{type:\"path\",ops:A(e,t,n,r,o)}}function E(e,t,n){const r=(e||[]).length;if(r>2){const o=[];for(let t=0;t<r-1;t++)o.push(...A(e[t][0],e[t][1],e[t+1][0],e[t+1][1],n));return t&&o.push(...A(e[r-1][0],e[r-1][1],e[0][0],e[0][1],n)),{type:\"path\",ops:o}}return 2===r?k(e[0][0],e[0][1],e[1][0],e[1][1],n):{type:\"path\",ops:[]}}function S(e,t,n,r,o){return function(e,t){return E(e,!0,t)}([[e,t],[e+n,t],[e+n,t+r],[e,t+r]],o)}function j(e,t){let n=Z(e,1*(1+.2*t.roughness),t);if(!t.disableMultiStroke){const r=Z(e,1.5*(1+.22*t.roughness),function(e){const t=Object.assign({},e);t.randomizer=void 0,e.seed&&(t.seed=e.seed+1);return t}(t));n=n.concat(r)}return{type:\"path\",ops:n}}function _(e,t,n){const r=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(e\/2,2)+Math.pow(t\/2,2))\/2)),o=Math.ceil(Math.max(n.curveStepCount,n.curveStepCount\/Math.sqrt(200)*r)),i=2*Math.PI\/o;let a=Math.abs(e\/2),l=Math.abs(t\/2);const s=1-n.curveFitting;return a+=D(a*s,n),l+=D(l*s,n),{increment:i,rx:a,ry:l}}function O(e,t,n,r){const[o,i]=R(r.increment,e,t,r.rx,r.ry,1,r.increment*P(.1,P(.4,1,n),n),n);let a=z(o,null,n);if(!n.disableMultiStroke&&0!==n.roughness){const[o]=R(r.increment,e,t,r.rx,r.ry,1.5,0,n),i=z(o,null,n);a=a.concat(i)}return{estimatedPoints:i,opset:{type:\"path\",ops:a}}}function C(e,t,n,r,o,i,a,l,s){const c=e,u=t;let d=Math.abs(n\/2),f=Math.abs(r\/2);d+=D(.01*d,s),f+=D(.01*f,s);let p=o,h=i;for(;p<0;)p+=2*Math.PI,h+=2*Math.PI;h-p>2*Math.PI&&(p=0,h=2*Math.PI);const m=2*Math.PI\/s.curveStepCount,g=Math.min(m\/2,(h-p)\/2),v=N(g,c,u,d,f,p,h,1,s);if(!s.disableMultiStroke){const e=N(g,c,u,d,f,p,h,1.5,s);v.push(...e)}return a&&(l?v.push(...A(c,u,c+d*Math.cos(p),u+f*Math.sin(p),s),...A(c,u,c+d*Math.cos(h),u+f*Math.sin(h),s)):v.push({op:\"lineTo\",data:[c,u]},{op:\"lineTo\",data:[c+d*Math.cos(p),u+f*Math.sin(p)]})),{type:\"path\",ops:v}}function I(e,t){const n=[];for(const r of e)if(r.length){const e=t.maxRandomnessOffset||0,o=r.length;if(o>2){n.push({op:\"move\",data:[r[0][0]+D(e,t),r[0][1]+D(e,t)]});for(let i=1;i<o;i++)n.push({op:\"lineTo\",data:[r[i][0]+D(e,t),r[i][1]+D(e,t)]})}}return{type:\"fillPath\",ops:n}}function M(e,t){return function(e,t){let n=e.fillStyle||\"hachure\";if(!f[n])switch(n){case\"zigzag\":f[n]||(f[n]=new l(t));break;case\"cross-hatch\":f[n]||(f[n]=new s(t));break;case\"dots\":f[n]||(f[n]=new c(t));break;case\"dashed\":f[n]||(f[n]=new u(t));break;case\"zigzag-line\":f[n]||(f[n]=new d(t));break;default:n=\"hachure\",f[n]||(f[n]=new a(t))}return f[n]}(t,w).fillPolygons(e,t)}function T(e){return e.randomizer||(e.randomizer=new p.k(e.seed||0)),e.randomizer.next()}function P(e,t,n,r=1){return n.roughness*r*(T(n)*(t-e)+e)}function D(e,t,n=1){return P(-e,e,t,n)}function A(e,t,n,r,o,i=!1){const a=i?o.disableMultiStrokeFill:o.disableMultiStroke,l=L(e,t,n,r,o,!0,!1);if(a)return l;const s=L(e,t,n,r,o,!0,!0);return l.concat(s)}function L(e,t,n,r,o,i,a){const l=Math.pow(e-n,2)+Math.pow(t-r,2),s=Math.sqrt(l);let c=1;c=s<200?1:s>500?.4:-.0016668*s+1.233334;let u=o.maxRandomnessOffset||0;u*u*100>l&&(u=s\/10);const d=u\/2,f=.2+.2*T(o);let p=o.bowing*o.maxRandomnessOffset*(r-t)\/200,h=o.bowing*o.maxRandomnessOffset*(e-n)\/200;p=D(p,o,c),h=D(h,o,c);const m=[],g=()=>D(d,o,c),v=()=>D(u,o,c),b=o.preserveVertices;return i&&(a?m.push({op:\"move\",data:[e+(b?0:g()),t+(b?0:g())]}):m.push({op:\"move\",data:[e+(b?0:D(u,o,c)),t+(b?0:D(u,o,c))]})),a?m.push({op:\"bcurveTo\",data:[p+e+(n-e)*f+g(),h+t+(r-t)*f+g(),p+e+2*(n-e)*f+g(),h+t+2*(r-t)*f+g(),n+(b?0:g()),r+(b?0:g())]}):m.push({op:\"bcurveTo\",data:[p+e+(n-e)*f+v(),h+t+(r-t)*f+v(),p+e+2*(n-e)*f+v(),h+t+2*(r-t)*f+v(),n+(b?0:v()),r+(b?0:v())]}),m}function Z(e,t,n){const r=[];r.push([e[0][0]+D(t,n),e[0][1]+D(t,n)]),r.push([e[0][0]+D(t,n),e[0][1]+D(t,n)]);for(let o=1;o<e.length;o++)r.push([e[o][0]+D(t,n),e[o][1]+D(t,n)]),o===e.length-1&&r.push([e[o][0]+D(t,n),e[o][1]+D(t,n)]);return z(r,null,n)}function z(e,t,n){const r=e.length,o=[];if(r>3){const i=[],a=1-n.curveTightness;o.push({op:\"move\",data:[e[1][0],e[1][1]]});for(let t=1;t+2<r;t++){const n=e[t];i[0]=[n[0],n[1]],i[1]=[n[0]+(a*e[t+1][0]-a*e[t-1][0])\/6,n[1]+(a*e[t+1][1]-a*e[t-1][1])\/6],i[2]=[e[t+1][0]+(a*e[t][0]-a*e[t+2][0])\/6,e[t+1][1]+(a*e[t][1]-a*e[t+2][1])\/6],i[3]=[e[t+1][0],e[t+1][1]],o.push({op:\"bcurveTo\",data:[i[1][0],i[1][1],i[2][0],i[2][1],i[3][0],i[3][1]]})}if(t&&2===t.length){const e=n.maxRandomnessOffset;o.push({op:\"lineTo\",data:[t[0]+D(e,n),t[1]+D(e,n)]})}}else 3===r?(o.push({op:\"move\",data:[e[1][0],e[1][1]]}),o.push({op:\"bcurveTo\",data:[e[1][0],e[1][1],e[2][0],e[2][1],e[2][0],e[2][1]]})):2===r&&o.push(...A(e[0][0],e[0][1],e[1][0],e[1][1],n));return o}function R(e,t,n,r,o,i,a,l){const s=[],c=[];if(0===l.roughness){e\/=4,c.push([t+r*Math.cos(-e),n+o*Math.sin(-e)]);for(let i=0;i<=2*Math.PI;i+=e){const e=[t+r*Math.cos(i),n+o*Math.sin(i)];s.push(e),c.push(e)}c.push([t+r*Math.cos(0),n+o*Math.sin(0)]),c.push([t+r*Math.cos(e),n+o*Math.sin(e)])}else{const u=D(.5,l)-Math.PI\/2;c.push([D(i,l)+t+.9*r*Math.cos(u-e),D(i,l)+n+.9*o*Math.sin(u-e)]);const d=2*Math.PI+u-.01;for(let a=u;a<d;a+=e){const e=[D(i,l)+t+r*Math.cos(a),D(i,l)+n+o*Math.sin(a)];s.push(e),c.push(e)}c.push([D(i,l)+t+r*Math.cos(u+2*Math.PI+.5*a),D(i,l)+n+o*Math.sin(u+2*Math.PI+.5*a)]),c.push([D(i,l)+t+.98*r*Math.cos(u+a),D(i,l)+n+.98*o*Math.sin(u+a)]),c.push([D(i,l)+t+.9*r*Math.cos(u+.5*a),D(i,l)+n+.9*o*Math.sin(u+.5*a)])}return[c,s]}function N(e,t,n,r,o,i,a,l,s){const c=i+D(.1,s),u=[];u.push([D(l,s)+t+.9*r*Math.cos(c-e),D(l,s)+n+.9*o*Math.sin(c-e)]);for(let i=c;i<=a;i+=e)u.push([D(l,s)+t+r*Math.cos(i),D(l,s)+n+o*Math.sin(i)]);return u.push([t+r*Math.cos(a),n+o*Math.sin(a)]),u.push([t+r*Math.cos(a),n+o*Math.sin(a)]),z(u,null,s)}function B(e,t,n,r,o,i,a,l){const s=[],c=[l.maxRandomnessOffset||1,(l.maxRandomnessOffset||1)+.3];let u=[0,0];const d=l.disableMultiStroke?1:2,f=l.preserveVertices;for(let p=0;p<d;p++)0===p?s.push({op:\"move\",data:[a[0],a[1]]}):s.push({op:\"move\",data:[a[0]+(f?0:D(c[0],l)),a[1]+(f?0:D(c[0],l))]}),u=f?[o,i]:[o+D(c[p],l),i+D(c[p],l)],s.push({op:\"bcurveTo\",data:[e+D(c[p],l),t+D(c[p],l),n+D(c[p],l),r+D(c[p],l),u[0],u[1]]});return s}function H(e){return[...e]}var W=n(1493);const F=\"none\";class U{constructor(e){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:\"#000\",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:\"hachure\",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,disableMultiStroke:!1,disableMultiStrokeFill:!1,preserveVertices:!1},this.config=e||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return(0,p.W)()}_o(e){return e?Object.assign({},this.defaultOptions,e):this.defaultOptions}_d(e,t,n){return{shape:e,sets:t||[],options:n||this.defaultOptions}}line(e,t,n,r,o){const i=this._o(o);return this._d(\"line\",[k(e,t,n,r,i)],i)}rectangle(e,t,n,r,o){const i=this._o(o),a=[],l=S(e,t,n,r,i);if(i.fill){const o=[[e,t],[e+n,t],[e+n,t+r],[e,t+r]];\"solid\"===i.fillStyle?a.push(I([o],i)):a.push(M([o],i))}return i.stroke!==F&&a.push(l),this._d(\"rectangle\",a,i)}ellipse(e,t,n,r,o){const i=this._o(o),a=[],l=_(n,r,i),s=O(e,t,i,l);if(i.fill)if(\"solid\"===i.fillStyle){const n=O(e,t,i,l).opset;n.type=\"fillPath\",a.push(n)}else a.push(M([s.estimatedPoints],i));return i.stroke!==F&&a.push(s.opset),this._d(\"ellipse\",a,i)}circle(e,t,n,r){const o=this.ellipse(e,t,n,n,r);return o.shape=\"circle\",o}linearPath(e,t){const n=this._o(t);return this._d(\"linearPath\",[E(e,!1,n)],n)}arc(e,t,n,r,o,i,a=!1,l){const s=this._o(l),c=[],u=C(e,t,n,r,o,i,a,!0,s);if(a&&s.fill)if(\"solid\"===s.fillStyle){const a=Object.assign({},s);a.disableMultiStroke=!0;const l=C(e,t,n,r,o,i,!0,!1,a);l.type=\"fillPath\",c.push(l)}else c.push(function(e,t,n,r,o,i,a){const l=e,s=t;let c=Math.abs(n\/2),u=Math.abs(r\/2);c+=D(.01*c,a),u+=D(.01*u,a);let d=o,f=i;for(;d<0;)d+=2*Math.PI,f+=2*Math.PI;f-d>2*Math.PI&&(d=0,f=2*Math.PI);const p=(f-d)\/a.curveStepCount,h=[];for(let e=d;e<=f;e+=p)h.push([l+c*Math.cos(e),s+u*Math.sin(e)]);return h.push([l+c*Math.cos(f),s+u*Math.sin(f)]),h.push([l,s]),M([h],a)}(e,t,n,r,o,i,s));return s.stroke!==F&&c.push(u),this._d(\"arc\",c,s)}curve(e,t){const n=this._o(t),r=[],o=j(e,n);if(n.fill&&n.fill!==F&&e.length>=3){const t=function(e,t=0){const n=e.length;if(n<3)throw new Error(\"A curve must have at least three points.\");const r=[];if(3===n)r.push(H(e[0]),H(e[1]),H(e[2]),H(e[2]));else{const n=[];n.push(e[0],e[0]);for(let t=1;t<e.length;t++)n.push(e[t]),t===e.length-1&&n.push(e[t]);const o=[],i=1-t;r.push(H(n[0]));for(let e=1;e+2<n.length;e++){const t=n[e];o[0]=[t[0],t[1]],o[1]=[t[0]+(i*n[e+1][0]-i*n[e-1][0])\/6,t[1]+(i*n[e+1][1]-i*n[e-1][1])\/6],o[2]=[n[e+1][0]+(i*n[e][0]-i*n[e+2][0])\/6,n[e+1][1]+(i*n[e][1]-i*n[e+2][1])\/6],o[3]=[n[e+1][0],n[e+1][1]],r.push(o[1],o[2],o[3])}}return r}(e),o=(0,W.s)(t,10,(1+n.roughness)\/2);\"solid\"===n.fillStyle?r.push(I([o],n)):r.push(M([o],n))}return n.stroke!==F&&r.push(o),this._d(\"curve\",r,n)}polygon(e,t){const n=this._o(t),r=[],o=E(e,!0,n);return n.fill&&(\"solid\"===n.fillStyle?r.push(I([e],n)):r.push(M([e],n))),n.stroke!==F&&r.push(o),this._d(\"polygon\",r,n)}path(e,t){const n=this._o(t),r=[];if(!e)return this._d(\"path\",r,n);e=(e||\"\").replace(\/\\n\/g,\" \").replace(\/(-\\s)\/g,\"-\").replace(\"\/(ss)\/g\",\" \");const o=n.fill&&\"transparent\"!==n.fill&&n.fill!==F,i=n.stroke!==F,a=!!(n.simplification&&n.simplification<1),l=function(e,t,n){const r=b(v(g(e))),o=[];let i=[],a=[0,0],l=[];const s=()=>{l.length>=4&&i.push(...(0,W.s)(l,t)),l=[]},c=()=>{s(),i.length&&(o.push(i),i=[])};for(const{key:e,data:t}of r)switch(e){case\"M\":c(),a=[t[0],t[1]],i.push(a);break;case\"L\":s(),i.push([t[0],t[1]]);break;case\"C\":if(!l.length){const e=i.length?i[i.length-1]:a;l.push([e[0],e[1]])}l.push([t[0],t[1]]),l.push([t[2],t[3]]),l.push([t[4],t[5]]);break;case\"Z\":s(),i.push([a[0],a[1]])}if(c(),!n)return o;const u=[];for(const e of o){const t=(0,W.o)(e,n);t.length&&u.push(t)}return u}(e,1,a?4-4*n.simplification:(1+n.roughness)\/2);return o&&(\"solid\"===n.fillStyle?r.push(I(l,n)):r.push(M(l,n))),i&&(a?l.forEach((e=>{r.push(E(e,!1,n))})):r.push(function(e,t){const n=b(v(g(e))),r=[];let o=[0,0],i=[0,0];for(const{key:e,data:a}of n)switch(e){case\"M\":{const e=1*(t.maxRandomnessOffset||0),n=t.preserveVertices;r.push({op:\"move\",data:a.map((r=>r+(n?0:D(e,t))))}),i=[a[0],a[1]],o=[a[0],a[1]];break}case\"L\":r.push(...A(i[0],i[1],a[0],a[1],t)),i=[a[0],a[1]];break;case\"C\":{const[e,n,o,l,s,c]=a;r.push(...B(e,n,o,l,s,c,i,t)),i=[s,c];break}case\"Z\":r.push(...A(i[0],i[1],o[0],o[1],t)),i=[o[0],o[1]]}return{type:\"path\",ops:r}}(e,n))),this._d(\"path\",r,n)}opsToPath(e,t){let n=\"\";for(const r of e.ops){const e=\"number\"==typeof t&&t>=0?r.data.map((e=>+e.toFixed(t))):r.data;switch(r.op){case\"move\":n+=`M${e[0]} ${e[1]} `;break;case\"bcurveTo\":n+=`C${e[0]} ${e[1]}, ${e[2]} ${e[3]}, ${e[4]} ${e[5]} `;break;case\"lineTo\":n+=`L${e[0]} ${e[1]} `}}return n.trim()}toPaths(e){const t=e.sets||[],n=e.options||this.defaultOptions,r=[];for(const e of t){let t=null;switch(e.type){case\"path\":t={d:this.opsToPath(e),stroke:n.stroke,strokeWidth:n.strokeWidth,fill:F};break;case\"fillPath\":t={d:this.opsToPath(e),stroke:F,strokeWidth:0,fill:n.fill||F};break;case\"fillSketch\":t=this.fillSketch(e,n)}t&&r.push(t)}return r}fillSketch(e,t){let n=t.fillWeight;return n<0&&(n=t.strokeWidth\/2),{d:this.opsToPath(e),stroke:t.fill||F,strokeWidth:n,fill:F}}}class K{constructor(e,t){this.canvas=e,this.ctx=this.canvas.getContext(\"2d\"),this.gen=new U(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.ctx,o=e.options.fixedDecimalPlaceDigits;for(const i of t)switch(i.type){case\"path\":r.save(),r.strokeStyle=\"none\"===n.stroke?\"transparent\":n.stroke,r.lineWidth=n.strokeWidth,n.strokeLineDash&&r.setLineDash(n.strokeLineDash),n.strokeLineDashOffset&&(r.lineDashOffset=n.strokeLineDashOffset),this._drawToContext(r,i,o),r.restore();break;case\"fillPath\":{r.save(),r.fillStyle=n.fill||\"\";const t=\"curve\"===e.shape||\"polygon\"===e.shape||\"path\"===e.shape?\"evenodd\":\"nonzero\";this._drawToContext(r,i,o,t),r.restore();break}case\"fillSketch\":this.fillSketch(r,i,n)}}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2),e.save(),n.fillLineDash&&e.setLineDash(n.fillLineDash),n.fillLineDashOffset&&(e.lineDashOffset=n.fillLineDashOffset),e.strokeStyle=n.fill||\"\",e.lineWidth=r,this._drawToContext(e,t,n.fixedDecimalPlaceDigits),e.restore()}_drawToContext(e,t,n,r=\"nonzero\"){e.beginPath();for(const r of t.ops){const t=\"number\"==typeof n&&n>=0?r.data.map((e=>+e.toFixed(n))):r.data;switch(r.op){case\"move\":e.moveTo(t[0],t[1]);break;case\"bcurveTo\":e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5]);break;case\"lineTo\":e.lineTo(t[0],t[1])}}\"fillPath\"===t.type?e.fill(r):e.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(e,t,n,r,o){const i=this.gen.line(e,t,n,r,o);return this.draw(i),i}rectangle(e,t,n,r,o){const i=this.gen.rectangle(e,t,n,r,o);return this.draw(i),i}ellipse(e,t,n,r,o){const i=this.gen.ellipse(e,t,n,r,o);return this.draw(i),i}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o),o}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n),n}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n),n}arc(e,t,n,r,o,i,a=!1,l){const s=this.gen.arc(e,t,n,r,o,i,a,l);return this.draw(s),s}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n),n}path(e,t){const n=this.gen.path(e,t);return this.draw(n),n}}const Y=\"http:\/\/www.w3.org\/2000\/svg\";class G{constructor(e,t){this.svg=e,this.gen=new U(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.svg.ownerDocument||window.document,o=r.createElementNS(Y,\"g\"),i=e.options.fixedDecimalPlaceDigits;for(const a of t){let t=null;switch(a.type){case\"path\":t=r.createElementNS(Y,\"path\"),t.setAttribute(\"d\",this.opsToPath(a,i)),t.setAttribute(\"stroke\",n.stroke),t.setAttribute(\"stroke-width\",n.strokeWidth+\"\"),t.setAttribute(\"fill\",\"none\"),n.strokeLineDash&&t.setAttribute(\"stroke-dasharray\",n.strokeLineDash.join(\" \").trim()),n.strokeLineDashOffset&&t.setAttribute(\"stroke-dashoffset\",`${n.strokeLineDashOffset}`);break;case\"fillPath\":t=r.createElementNS(Y,\"path\"),t.setAttribute(\"d\",this.opsToPath(a,i)),t.setAttribute(\"stroke\",\"none\"),t.setAttribute(\"stroke-width\",\"0\"),t.setAttribute(\"fill\",n.fill||\"\"),\"curve\"!==e.shape&&\"polygon\"!==e.shape||t.setAttribute(\"fill-rule\",\"evenodd\");break;case\"fillSketch\":t=this.fillSketch(r,a,n)}t&&o.appendChild(t)}return o}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2);const o=e.createElementNS(Y,\"path\");return o.setAttribute(\"d\",this.opsToPath(t,n.fixedDecimalPlaceDigits)),o.setAttribute(\"stroke\",n.fill||\"\"),o.setAttribute(\"stroke-width\",r+\"\"),o.setAttribute(\"fill\",\"none\"),n.fillLineDash&&o.setAttribute(\"stroke-dasharray\",n.fillLineDash.join(\" \").trim()),n.fillLineDashOffset&&o.setAttribute(\"stroke-dashoffset\",`${n.fillLineDashOffset}`),o}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(e,t){return this.gen.opsToPath(e,t)}line(e,t,n,r,o){const i=this.gen.line(e,t,n,r,o);return this.draw(i)}rectangle(e,t,n,r,o){const i=this.gen.rectangle(e,t,n,r,o);return this.draw(i)}ellipse(e,t,n,r,o){const i=this.gen.ellipse(e,t,n,r,o);return this.draw(i)}circle(e,t,n,r){const o=this.gen.circle(e,t,n,r);return this.draw(o)}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n)}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n)}arc(e,t,n,r,o,i,a=!1,l){const s=this.gen.arc(e,t,n,r,o,i,a,l);return this.draw(s)}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n)}path(e,t){const n=this.gen.path(e,t);return this.draw(n)}}var V={canvas:(e,t)=>new K(e,t),svg:(e,t)=>new G(e,t),generator:e=>new U(e),newSeed:()=>U.newSeed()}},5714:function(e){e.exports=function(e,t,n){var r=[],o=e.length;if(0===o)return r;var i=t<0?Math.max(0,t+o):t||0;for(void 0!==n&&(o=n<0?n+o:n);o-- >i;)r[o-i]=e[o];return r}},5422:function(e,t,n){\"use strict\";var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(2044),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals},487:function(e){\"use strict\";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var s=e[l],c=r.base?s[0]+r.base:s[0],u=i[c]||0,d=\"\".concat(c,\" \").concat(u);i[c]=u+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var s=r(e,o),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},2052:function(e){\"use strict\";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");r.appendChild(n)}},1469:function(e){\"use strict\";e.exports=function(e){var t=document.createElement(\"style\");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},4010:function(e,t,n){\"use strict\";e.exports=function(e){var t=n.nc;t&&e.setAttribute(\"nonce\",t)}},631:function(e){\"use strict\";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=\"\";n.supports&&(r+=\"@supports (\".concat(n.supports,\") {\")),n.media&&(r+=\"@media \".concat(n.media,\" {\"));var o=void 0!==n.layer;o&&(r+=\"@layer\".concat(n.layer.length>0?\" \".concat(n.layer):\"\",\" {\")),r+=n.css,o&&(r+=\"}\"),n.media&&(r+=\"}\"),n.supports&&(r+=\"}\");var i=n.sourceMap;i&&\"undefined\"!=typeof btoa&&(r+=\"\\n\/*# sourceMappingURL=data:application\/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i)))),\" *\/\")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},9329:function(e){\"use strict\";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2173:function(e,t,n){\"use strict\";var r=n(9787);var o=\"function\"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1\/e==1\/t)||e!=e&&t!=t},i=r.useState,a=r.useEffect,l=r.useLayoutEffect,s=r.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var u=\"undefined\"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),o=r[0].inst,u=r[1];return l((function(){o.value=n,o.getSnapshot=t,c(o)&&u({inst:o})}),[e,n,t]),a((function(){return c(o)&&u({inst:o}),e((function(){c(o)&&u({inst:o})}))}),[e]),s(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:u},5917:function(e,t,n){\"use strict\";var r=n(9787),o=n(1374);var i=\"function\"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1\/e==1\/t)||e!=e&&t!=t},a=o.useSyncExternalStore,l=r.useRef,s=r.useEffect,c=r.useMemo,u=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var d=l(null);if(null===d.current){var f={hasValue:!1,value:null};d.current=f}else f=d.current;d=c((function(){function e(e){if(!s){if(s=!0,a=e,e=r(e),void 0!==o&&f.hasValue){var t=f.value;if(o(t,e))return l=t}return l=e}if(t=l,i(a,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(a=e,l=n)}var a,l,s=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,r,o]);var p=a(e,d[0],d[1]);return s((function(){f.hasValue=!0,f.value=p}),[p]),u(p),p}},1374:function(e,t,n){\"use strict\";e.exports=n(2173)},5668:function(e,t,n){\"use strict\";e.exports=n(5917)},940:function(e,t,n){var r={\".\/ar-SA.json\":[7822,2091],\".\/bg-BG.json\":[1203,1628],\".\/bn-BD.json\":[8525,7429],\".\/ca-ES.json\":[510,5130],\".\/cs-CZ.json\":[7605,6265],\".\/da-DK.json\":[2392,1790],\".\/de-DE.json\":[2853,3082],\".\/el-GR.json\":[9876,1513],\".\/en.json\":[1463],\".\/es-ES.json\":[9952,8759],\".\/eu-ES.json\":[5658,8081],\".\/fa-IR.json\":[3747,5330],\".\/fi-FI.json\":[9490,3512],\".\/fr-FR.json\":[7830,3682],\".\/gl-ES.json\":[5199,2943],\".\/he-IL.json\":[1994,2312],\".\/hi-IN.json\":[4646,9828],\".\/hu-HU.json\":[6373,7368],\".\/id-ID.json\":[3247,3808],\".\/it-IT.json\":[3257,6239],\".\/ja-JP.json\":[198,1204],\".\/kab-KAB.json\":[228,9551],\".\/kk-KZ.json\":[8972,22],\".\/ko-KR.json\":[7596,6844],\".\/ku-TR.json\":[2508,3031],\".\/lt-LT.json\":[3755,8340],\".\/lv-LV.json\":[2327,6768],\".\/mr-IN.json\":[5297,3397],\".\/my-MM.json\":[7704,1477],\".\/nb-NO.json\":[1167,2359],\".\/nl-NL.json\":[290,3024],\".\/nn-NO.json\":[4481,3885],\".\/oc-FR.json\":[2284,1690],\".\/pa-IN.json\":[5383,3162],\".\/percentages.json\":[4451],\".\/pl-PL.json\":[3661,3674],\".\/pt-BR.json\":[8881,3721],\".\/pt-PT.json\":[5622,5395],\".\/ro-RO.json\":[2013,5089],\".\/ru-RU.json\":[2253,8124],\".\/si-LK.json\":[5497,1302],\".\/sk-SK.json\":[4570,8750],\".\/sl-SI.json\":[1984,6071],\".\/sv-SE.json\":[6006,8534],\".\/ta-IN.json\":[3952,2404],\".\/th-TH.json\":[2596,537],\".\/tr-TR.json\":[7315,4977],\".\/uk-UA.json\":[334,7759],\".\/vi-VN.json\":[456,4e3],\".\/zh-CN.json\":[1037,4680],\".\/zh-HK.json\":[5334,7920],\".\/zh-TW.json\":[931,3421]};function o(e){if(!n.o(r,e))return Promise.resolve().then((function(){var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}));var t=r[e],o=t[0];return Promise.all(t.slice(1).map(n.e)).then((function(){return n.t(o,19)}))}o.keys=function(){return Object.keys(r)},o.id=940,e.exports=o},9713:function(e){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6479:function(e,t,n){var r=n(7316);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},7316:function(e){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},4295:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(3940),n.b),u=new URL(n(3147),n.b),d=new URL(n(8303),n.b),f=new URL(n(1273),n.b),p=new URL(n(9577),n.b),h=new URL(n(9729),n.b),m=a()(o()),g=s()(c),v=s()(u),b=s()(d),y=s()(f),x=s()(p),w=s()(h);m.push([e.id,'@font-face{font-family:\"Virgil\";src:url('+g+');font-display:swap}@font-face{font-family:\"Cascadia\";src:url('+v+');font-display:swap}@font-face{font-family:\"Assistant\";src:url('+b+');font-display:swap;font-weight:400}@font-face{font-family:\"Assistant\";src:url('+y+');font-display:swap;font-weight:500}@font-face{font-family:\"Assistant\";src:url('+x+');font-display:swap;font-weight:600}@font-face{font-family:\"Assistant\";src:url('+w+\");font-display:swap;font-weight:700}\",\"\"]),t.Z=m},6086:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".zoom-actions,.undo-redo-buttons{background-color:var(--island-bg-color);border-radius:var(--border-radius-lg)}.zoom-button,.undo-redo-buttons button{border:1px solid var(--default-border-color) !important;border-radius:0 !important;background-color:rgba(0,0,0,0) !important;font-size:.875rem !important;width:var(--lg-button-size);height:var(--lg-button-size)}.zoom-button svg,.undo-redo-buttons button svg{width:var(--lg-icon-size) !important;height:var(--lg-icon-size) !important}.zoom-button .ToolIcon__icon,.undo-redo-buttons button .ToolIcon__icon{width:100%;height:100%}.reset-zoom-button{border-left:0 !important;border-right:0 !important;padding:0 .625rem !important;width:3.75rem !important;justify-content:center;color:var(--text-primary-color)}.zoom-out-button{border-top-left-radius:var(--border-radius-lg) !important;border-bottom-left-radius:var(--border-radius-lg) !important}:root[dir=rtl] .zoom-out-button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.zoom-out-button .ToolIcon__icon{border-top-right-radius:0 !important;border-bottom-right-radius:0 !important}.zoom-in-button{border-top-right-radius:var(--border-radius-lg) !important;border-bottom-right-radius:var(--border-radius-lg) !important}:root[dir=rtl] .zoom-in-button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.zoom-in-button .ToolIcon__icon{border-top-left-radius:0 !important;border-bottom-left-radius:0 !important}.undo-redo-buttons .undo-button-container button{border-top-left-radius:var(--border-radius-lg) !important;border-bottom-left-radius:var(--border-radius-lg) !important;border-right:0 !important}:root[dir=rtl] .undo-redo-buttons .undo-button-container button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.undo-redo-buttons .undo-button-container button .ToolIcon__icon{border-top-right-radius:0 !important;border-bottom-right-radius:0 !important}.undo-redo-buttons .redo-button-container button{border-top-right-radius:var(--border-radius-lg) !important;border-bottom-right-radius:var(--border-radius-lg) !important}:root[dir=rtl] .undo-redo-buttons .redo-button-container button{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.undo-redo-buttons .redo-button-container button .ToolIcon__icon{border-top-left-radius:0 !important;border-bottom-left-radius:0 !important}\",\"\"]),t.Z=a},3729:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Avatar{width:1.25rem;height:1.25rem;position:relative;border-radius:100%;outline-offset:2px;display:flex;justify-content:center;align-items:center;color:#fff;cursor:pointer;font-size:.625rem;font-weight:500;line-height:1}.excalidraw .Avatar-img{width:100%;height:100%;border-radius:100%}.excalidraw .Avatar::before{content:\"\";position:absolute;top:-3px;right:-3px;bottom:-3px;left:-3px;border:1px solid var(--avatar-border-color);border-radius:100%}',\"\"]),t.Z=a},3137:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(7984),n.b),u=new URL(n(1639),n.b),d=a()(o()),f=s()(c),p=s()(u);d.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw{--theme-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: var(--color-gray-20);--dropdown-icon: url(\"+f+\");--focus-highlight-color: #a5d8ff;--icon-fill-color: var(--color-gray-80);--icon-green-fill-color: #2b8a3e;--default-bg-color: #ffffff;--input-bg-color: #ffffff;--input-border-color: #ced4da;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.96);--keybinding-color: var(--color-gray-40);--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0px 7px 14px rgba(0, 0, 0, 0.05), 0px 0px 3.12708px rgba(0, 0, 0, 0.0798), 0px 0px 0.931014px rgba(0, 0, 0, 0.1702);--button-hover-bg: var(--color-gray-10);--default-border-color: var(--color-gray-30);--default-button-size: 2rem;--default-icon-size: 1rem;--lg-button-size: 2.25rem;--lg-icon-size: 1rem;--editor-container-padding: 1rem;--scrollbar-thumb: var(--button-gray-2);--scrollbar-thumb-hover: var(--button-gray-3);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-20);--sidebar-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--sidebar-border-color: var(--color-gray-20);--sidebar-bg-color: #fff;--library-dropdown-shadow: 0px 15px 6px rgba(0, 0, 0, 0.01), 0px 8px 5px rgba(0, 0, 0, 0.05), 0px 4px 4px rgba(0, 0, 0, 0.09), 0px 1px 2px rgba(0, 0, 0, 0.1), 0px 0px 0px rgba(0, 0, 0, 0.1);--space-factor: 0.25rem;--text-primary-color: var(--color-gray-80);--color-selection: #6965db;--color-primary: #6965db;--color-primary-darker: #5b57d1;--color-primary-darkest: #4a47b1;--color-primary-light: #e3e2fe;--color-gray-10: #f5f5f5;--color-gray-20: #ebebeb;--color-gray-30: #d6d6d6;--color-gray-40: #b8b8b8;--color-gray-50: #999999;--color-gray-60: #7a7a7a;--color-gray-70: #5c5c5c;--color-gray-80: #3d3d3d;--color-gray-85: #242424;--color-gray-90: #1e1e1e;--color-gray-100: #121212;--color-warning: #fceeca;--color-text-warning: var(--text-primary-color);--color-danger: #db6965;--color-promo: #e70078;--border-radius-md: 0.375rem;--border-radius-lg: 0.5rem}@media screen and (min-device-width: 1921px){.excalidraw{--lg-button-size: 2.5rem;--lg-icon-size: 1.25rem;--default-button-size: 2.25rem;--default-icon-size: 1.25rem}}.excalidraw.theme--dark.theme--dark-background-none{background:none}.excalidraw.theme--dark{--theme-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: var(--color-gray-80);--dropdown-icon: url(\"+p+\");--focus-highlight-color: #228be6;--icon-fill-color: var(--color-gray-40);--icon-green-fill-color: #69db7c;--default-bg-color: #121212;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: #262627;--keybinding-color: var(--color-gray-60);--link-color: #4dabf7;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--text-primary-color: var(--color-gray-40);--button-hover-bg: var(--color-gray-80);--default-border-color: var(--color-gray-80);--shadow-island: 0px 13px 33px rgba(0, 0, 0, 0.07), 0px 4.13px 9.94853px rgba(0, 0, 0, 0.0456112), 0px 1.13px 4.13211px rgba(0, 0, 0, 0.035), 0px 0.769896px 1.4945px rgba(0, 0, 0, 0.0243888);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-85);--sidebar-border-color: var(--color-gray-85);--sidebar-bg-color: #191919;--scrollbar-thumb: #343a40;--scrollbar-thumb-hover: #495057;--color-selection: #3530c4;--color-primary: #a8a5ff;--color-primary-darker: #b2aeff;--color-primary-darkest: #beb9ff;--color-primary-light: #4f4d6f;--color-text-warning: var(--color-gray-80);--color-danger: #ffa8a5;--color-promo: #d297ff}.excalidraw .excalidraw-button{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color))}.excalidraw .excalidraw-button svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .excalidraw-button:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .excalidraw-button:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .excalidraw-button.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .excalidraw-button.active:hover{background-color:var(--color-primary-light)}.excalidraw .excalidraw-button.active svg{color:var(--button-color, var(--color-primary-darker))}\",\"\"]),t.Z=d},4241:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Card{display:flex;flex-direction:column;align-items:center;max-width:290px;margin:1em;text-align:center}.excalidraw .Card .Card-icon{font-size:2.6em;display:flex;flex:0 0 auto;padding:1.4rem;border-radius:50%;background:var(--card-color);color:#fff}.excalidraw .Card .Card-icon svg{width:2.8rem;height:2.8rem}.excalidraw .Card .Card-details{font-size:.96em;min-height:90px;padding:0 1em;margin-bottom:auto}.excalidraw .Card .Card-button.ToolIcon_type_button{height:2.5rem;margin-top:1em;margin-bottom:.3em;background-color:var(--card-color)}.excalidraw .Card .Card-button.ToolIcon_type_button:hover{background-color:var(--card-color-darker)}.excalidraw .Card .Card-button.ToolIcon_type_button:active{background-color:var(--card-color-darkest)}.excalidraw .Card .Card-button.ToolIcon_type_button .ToolIcon__label{color:#fff}.excalidraw .Card .Card-button.ToolIcon_type_button .Spinner{--spinner-color: #fff}\",\"\"]),t.Z=a},6029:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Checkbox{margin:4px .3em;display:flex;align-items:center;cursor:pointer;-webkit-user-select:none;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus){box-shadow:0 0 0 2px #4dabf7}.excalidraw .Checkbox:hover:not(.is-checked) .Checkbox-box:not(:focus) svg{display:block;opacity:.3}.excalidraw .Checkbox:active .Checkbox-box{box-shadow:0 0 2px 1px inset #1c7ed6 !important}.excalidraw .Checkbox:hover .Checkbox-box{background-color:rgba(208,235,255,.2)}.excalidraw .Checkbox.is-checked .Checkbox-box{background-color:#d0ebff}.excalidraw .Checkbox.is-checked .Checkbox-box svg{display:block}.excalidraw .Checkbox.is-checked:hover .Checkbox-box{background-color:#a5d8ff}.excalidraw .Checkbox .Checkbox-box{width:22px;height:22px;padding:0;flex:0 0 auto;margin:0 1em;display:flex;align-items:center;justify-content:center;box-shadow:0 0 0 2px #1c7ed6;background-color:rgba(0,0,0,0);border-radius:4px;color:#1c7ed6;border:0}.excalidraw .Checkbox .Checkbox-box:focus{box-shadow:0 0 0 3px #1c7ed6}.excalidraw .Checkbox .Checkbox-box svg{display:none;width:16px;height:16px;stroke-width:3px}.excalidraw .Checkbox .Checkbox-label{display:flex;align-items:center}.excalidraw .Checkbox .excalidraw-tooltip-icon{width:1em;height:1em}\",\"\"]),t.Z=a},2345:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(9669),n.b),u=a()(o()),d=s()(c);u.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .color-picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}:root[dir=ltr] .excalidraw .color-picker{left:-5.5px}:root[dir=rtl] .excalidraw .color-picker{right:-5.5px}.excalidraw .color-picker-control-container{display:grid;grid-template-columns:auto 1fr;align-items:center;-webkit-column-gap:.5rem;column-gap:.5rem}.excalidraw .color-picker-control-container+.popover{position:static}.excalidraw .color-picker-popover-container{margin-top:-0.25rem}:root[dir=ltr] .excalidraw .color-picker-popover-container{margin-left:.5rem}:root[dir=rtl] .excalidraw .color-picker-popover-container{margin-left:-3rem}.excalidraw .color-picker-triangle{width:0;height:0;border-style:solid;border-width:0 9px 10px;border-color:rgba(0,0,0,0) rgba(0,0,0,0) var(--popup-bg-color);position:absolute;top:10px}:root[dir=ltr] .excalidraw .color-picker-triangle{-webkit-transform:rotate(270deg);transform:rotate(270deg);left:-14px}:root[dir=rtl] .excalidraw .color-picker-triangle{-webkit-transform:rotate(90deg);transform:rotate(90deg);right:-14px}.excalidraw .color-picker-triangle-shadow{border-color:rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,.1)}:root[dir=ltr] .excalidraw .color-picker-triangle-shadow{left:-14px}:root[dir=rtl] .excalidraw .color-picker-triangle-shadow{right:-16px}.excalidraw .color-picker-content--default{padding:.5rem;display:grid;grid-template-columns:repeat(5, auto);grid-gap:.5rem;border-radius:4px}.excalidraw .color-picker-content--default:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-picker-content--canvas{display:flex;flex-direction:column;padding:.25rem}.excalidraw .color-picker-content--canvas-title{color:#868e96;font-size:12px;padding:0 .25rem}.excalidraw .color-picker-content--canvas-colors{padding:.5rem 0}.excalidraw .color-picker-content--canvas-colors .color-picker-swatch{margin:0 .25rem}.excalidraw .color-picker-content .color-input-container{grid-column:1\/span 5}.excalidraw .color-picker-swatch{position:relative;height:1.875rem;width:1.875rem;cursor:pointer;border-radius:4px;margin:0;box-sizing:border-box;border:1px solid #ddd;background-color:currentColor !important;-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .color-picker-swatch:focus{box-shadow:0 0 4px 1px currentColor;border-color:var(--select-highlight-color)}.excalidraw .color-picker-transparent{border-radius:4px;box-shadow:rgba(0,0,0,.1) 0 0 0 1px inset;position:absolute;top:0;right:0;bottom:0;left:0}.excalidraw .color-picker-transparent,.excalidraw .color-picker-label-swatch{background:url(\"+d+') left center}.excalidraw .color-picker-hash{height:var(--default-button-size);flex-shrink:0;padding:.5rem .5rem .5rem .75rem;border:1px solid var(--default-border-color);border-right:0;box-sizing:border-box;color:var(--input-label-color);display:flex;align-items:center;justify-content:center;position:relative}:root[dir=ltr] .excalidraw .color-picker-hash{border-radius:var(--border-radius-lg) 0 0 var(--border-radius-lg)}:root[dir=rtl] .excalidraw .color-picker-hash{border-radius:0 var(--border-radius-lg) var(--border-radius-lg) 0;border-right:1px solid var(--default-border-color);border-left:0}.excalidraw .color-input-container{display:flex}.excalidraw .color-input-container:focus-within{box-shadow:0 0 0 1px var(--color-primary-darkest);border-radius:var(--border-radius-lg)}.excalidraw .color-picker-input{box-sizing:border-box;width:100%;margin:0;font-size:.875rem;background-color:rgba(0,0,0,0);color:var(--text-primary-color);border:0;outline:none;height:var(--default-button-size);border:1px solid var(--default-border-color);border-left:0;letter-spacing:.4px;padding:.5rem;padding-left:.25rem;-webkit-appearance:none;appearance:none}:root[dir=ltr] .excalidraw .color-picker-input{border-radius:0 var(--border-radius-lg) var(--border-radius-lg) 0}:root[dir=rtl] .excalidraw .color-picker-input{border-radius:var(--border-radius-lg) 0 0 var(--border-radius-lg);border-left:1px solid var(--default-border-color);border-right:0}.excalidraw .color-picker-input:focus-visible{box-shadow:none}.excalidraw .color-picker-label-swatch-container{border:1px solid var(--default-border-color);border-radius:var(--border-radius-lg);width:var(--default-button-size);height:var(--default-button-size);box-sizing:border-box;overflow:hidden}.excalidraw .color-picker-label-swatch{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--swatch-color) !important;overflow:hidden;position:relative;-webkit-filter:var(--theme-filter);filter:var(--theme-filter);border:0 !important}.excalidraw .color-picker-label-swatch svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .color-picker-label-swatch:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .color-picker-label-swatch:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .color-picker-label-swatch.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .color-picker-label-swatch.active:hover{background-color:var(--color-primary-light)}.excalidraw .color-picker-label-swatch.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .color-picker-label-swatch:after{content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;background:var(--swatch-color)}.excalidraw .color-picker-keybinding{position:absolute;bottom:2px;font-size:.7em}:root[dir=ltr] .excalidraw .color-picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .color-picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .color-picker-keybinding{display:none}.excalidraw .color-picker-type-canvasBackground .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementBackground .color-picker-keybinding{color:#fff}.excalidraw .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementStroke .color-picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .color-picker-type-elementBackground .color-picker-keybinding{color:#000}.excalidraw.theme--dark .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#000}',\"\"]),t.Z=u},9393:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .confirm-dialog-buttons{display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;justify-content:flex-end}\",\"\"]),t.Z=a},6578:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .context-menu{position:relative;border-radius:4px;box-shadow:0 3px 10px rgba(0,0,0,.2);padding:0;list-style:none;-webkit-user-select:none;user-select:none;margin:-0.25rem 0 0 .125rem;padding:.5rem 0;background-color:var(--popup-secondary-bg-color);border:1px solid var(--button-gray-3);cursor:default}.excalidraw .context-menu button{color:var(--popup-text-color)}.excalidraw .context-menu-item{position:relative;width:100%;min-width:9.5rem;margin:0;padding:.25rem 1rem .25rem 1.25rem;text-align:start;border-radius:0;background-color:rgba(0,0,0,0);border:none;white-space:nowrap;display:grid;grid-template-columns:1fr .2fr;align-items:center}.excalidraw .context-menu-item.checkmark::before{position:absolute;left:6px;margin-bottom:1px;content:\"\u2713\"}.excalidraw .context-menu-item.dangerous .context-menu-item__label{color:#f03e3e}.excalidraw .context-menu-item .context-menu-item__label{justify-self:start;-webkit-margin-end:20px;margin-inline-end:20px}.excalidraw .context-menu-item .context-menu-item__shortcut{justify-self:end;opacity:.6;font-family:inherit;font-size:.7rem}.excalidraw .context-menu-item:hover{color:var(--popup-bg-color);background-color:var(--select-highlight-color)}.excalidraw .context-menu-item:hover.dangerous{background-color:#fa5252}.excalidraw .context-menu-item:hover.dangerous .context-menu-item__label{color:var(--popup-bg-color)}.excalidraw .context-menu-item:focus{z-index:1}.excalidraw--mobile.excalidraw .context-menu-item{display:block}.excalidraw--mobile.excalidraw .context-menu-item .context-menu-item__label{-webkit-margin-end:0;margin-inline-end:0}.excalidraw--mobile.excalidraw .context-menu-item .context-menu-item__shortcut{display:none}.excalidraw .context-menu-item-separator{border:none;border-top:1px solid #adb5bd}',\"\"]),t.Z=a},9482:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Dialog{-webkit-user-select:text;user-select:text;cursor:auto}.excalidraw .Dialog__title{margin:0;text-align:left;font-size:1.25rem;border-bottom:1px solid var(--dialog-border-color);padding:0 0 .75rem;margin-bottom:1.5rem}\",\"\"]),t.Z=a},6148:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Dialog__action-button{position:relative;display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;align-items:center;padding:.5rem 1.5rem;border:1px solid var(--default-border-color);background-color:rgba(0,0,0,0);height:3rem;border-radius:var(--border-radius-lg);letter-spacing:.4px;color:inherit;font-family:inherit;font-size:.875rem;font-weight:600;-webkit-user-select:none;user-select:none}.excalidraw .Dialog__action-button svg{display:block;width:1rem;height:1rem}.excalidraw .Dialog__action-button--danger{background-color:var(--color-danger);border-color:var(--color-danger);color:#fff}.excalidraw .Dialog__action-button--primary{background-color:var(--color-primary);border-color:var(--color-primary);color:#fff}.excalidraw.theme--dark .Dialog__action-button--danger{color:var(--color-gray-100)}.excalidraw.theme--dark .Dialog__action-button--primary{color:var(--color-gray-100)}\",\"\"]),t.Z=a},7955:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(9669),n.b),u=a()(o()),d=s()(c);u.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .ExportDialog__preview{--preview-padding: calc(var(--space-factor) * 4);background:url(\"+d+\") left center;text-align:center;padding:var(--preview-padding);margin-bottom:calc(var(--space-factor)*3);display:flex;justify-content:center;align-items:center}.excalidraw .ExportDialog__preview canvas{max-width:calc(100% - var(--preview-padding)*2);max-height:25rem}.excalidraw.theme--dark .ExportDialog__preview canvas{-webkit-filter:none;filter:none}.excalidraw .ExportDialog__actions{width:100%;display:flex;grid-gap:calc(var(--space-factor)*2);align-items:top;justify-content:space-between}.excalidraw--mobile.excalidraw .ExportDialog{display:flex;flex-direction:column}.excalidraw--mobile.excalidraw .ExportDialog__actions{flex-direction:column;align-items:center}.excalidraw--mobile.excalidraw .ExportDialog__actions>*{margin-bottom:calc(var(--space-factor)*3)}.excalidraw--mobile.excalidraw .ExportDialog__preview canvas{max-height:30vh}.excalidraw--mobile.excalidraw .ExportDialog__dialog,.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{height:100%;box-sizing:border-box}.excalidraw--mobile.excalidraw .ExportDialog__dialog .Island{overflow-y:auto}.excalidraw .ExportDialog--json .ExportDialog-cards{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));justify-items:center;row-gap:2em}@media(max-width: 460px){.excalidraw .ExportDialog--json .ExportDialog-cards{grid-template-columns:repeat(auto-fit, minmax(240px, 1fr))}.excalidraw .ExportDialog--json .ExportDialog-cards .Card-details{min-height:40px}}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;margin:1em auto;align-items:flex-start;flex-direction:column}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName .TextInput{width:auto}.excalidraw .ExportDialog--json .ExportDialog-cards .ProjectName-label{margin:.625em 0;font-weight:bold}.excalidraw button.ExportDialog-imageExportButton{border:0;width:5rem;height:5rem;margin:0 .2em;padding:0;display:flex;align-items:center;justify-content:center;border-radius:1rem;background-color:var(--button-color);box-shadow:0 3px 5px -1px rgba(0,0,0,.28),0 6px 10px 0 rgba(0,0,0,.14);font-family:Cascadia;font-size:1.8em;color:#fff}.excalidraw button.ExportDialog-imageExportButton:hover{background-color:var(--button-color-darker)}.excalidraw button.ExportDialog-imageExportButton:active{background-color:var(--button-color-darkest);box-shadow:none}.excalidraw button.ExportDialog-imageExportButton svg{width:.9em}\",\"\"]),t.Z=u},3195:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .FixedSideContainer{position:absolute;pointer-events:none}.excalidraw .FixedSideContainer>*{pointer-events:all}.excalidraw .FixedSideContainer_side_top{left:var(--editor-container-padding);top:var(--editor-container-padding);right:var(--editor-container-padding);bottom:var(--editor-container-padding);z-index:2}.excalidraw .FixedSideContainer_side_top.zen-mode{right:42px}\",\"\"]),t.Z=a},2978:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .HelpDialog .Modal__content{max-width:960px}.excalidraw .HelpDialog h3{margin:1.5rem 0;font-weight:bold;font-size:1.125rem}.excalidraw .HelpDialog__header{display:flex;flex-wrap:wrap;gap:.75rem}.excalidraw .HelpDialog__btn{display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;align-items:center;border:1px solid var(--default-border-color);padding:.625rem 1rem;border-radius:var(--border-radius-lg);color:var(--text-primary-color);font-weight:600;font-size:.75rem;letter-spacing:.4px}.excalidraw .HelpDialog__btn:hover{text-decoration:none}.excalidraw .HelpDialog__link-icon{line-height:0}.excalidraw .HelpDialog__link-icon svg{width:1rem;height:1rem}.excalidraw .HelpDialog__islands-container{display:grid;grid-column-gap:1.5rem;grid-row-gap:2rem}@media screen and (min-width: 1024px){.excalidraw .HelpDialog__islands-container{grid-template-columns:1fr 1fr}}@media screen and (min-width: 1024px){.excalidraw .HelpDialog__island--tools{grid-area:1\/1\/2\/2}.excalidraw .HelpDialog__island--view{grid-area:2\/1\/3\/2}.excalidraw .HelpDialog__island--editor{grid-area:1\/2\/3\/3}}.excalidraw .HelpDialog__island h4{font-size:1rem;font-weight:bold;margin:0;margin-bottom:.625rem}.excalidraw .HelpDialog__island-content{border:1px solid var(--dialog-border-color);border-radius:var(--border-radius-lg)}.excalidraw .HelpDialog__shortcut{border-bottom:1px solid var(--dialog-border-color);padding:.375rem .75rem;display:flex;justify-content:space-between;align-items:center;font-size:.875rem;-webkit-column-gap:.5rem;column-gap:.5rem}.excalidraw .HelpDialog__shortcut:last-child{border-bottom:none}.excalidraw .HelpDialog__key-container{display:flex;align-items:center;-webkit-column-gap:.25rem;column-gap:.25rem;flex-shrink:0}.excalidraw .HelpDialog__key{display:flex;box-sizing:border-box;font-size:.625rem;background-color:var(--color-primary-light);border-radius:var(--border-radius-md);padding:.5rem;word-break:keep-all;align-items:center;font-family:inherit;line-height:1}\",\"\"]),t.Z=a},1587:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .HintViewer{pointer-events:none;box-sizing:border-box;position:absolute;display:flex;justify-content:center;left:0;top:100%;max-width:100%;width:100%;margin-top:.5rem;text-align:center;color:var(--color-gray-40);font-size:.75rem}.excalidraw--mobile.excalidraw .HintViewer{position:static;padding-right:2rem}.excalidraw .HintViewer>span{padding:.25rem}.excalidraw.theme--dark .HintViewer{color:var(--color-gray-60)}\",\"\"]),t.Z=a},9478:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .picker-container{display:inline-block;box-sizing:border-box;margin-right:.25rem}.excalidraw .picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 2px 2px 4px 2px;border-radius:4px;position:absolute}.excalidraw .picker-container button,.excalidraw .picker button{position:relative;display:flex;align-items:center;justify-content:center}.excalidraw .picker-container button:focus-visible,.excalidraw .picker button:focus-visible{outline:rgba(0,0,0,0);background-color:var(--button-gray-2)}.excalidraw .picker-container button:focus-visible svg,.excalidraw .picker button:focus-visible svg{opacity:1}.excalidraw .picker-container button:hover,.excalidraw .picker button:hover{background-color:var(--button-gray-2)}.excalidraw .picker-container button:active,.excalidraw .picker button:active{background-color:var(--button-gray-3)}.excalidraw .picker-container button:disabled,.excalidraw .picker button:disabled{cursor:not-allowed}.excalidraw .picker-container button svg,.excalidraw .picker button svg{margin:0;width:36px;height:18px;pointer-events:none}.excalidraw .picker button{padding:.25rem .28rem .35rem .25rem}.excalidraw .picker-triangle{width:0;height:0;position:relative;top:-10px;z-index:10}:root[dir=ltr] .excalidraw .picker-triangle{left:12px}:root[dir=rtl] .excalidraw .picker-triangle{right:12px}.excalidraw .picker-triangle:before{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,.1);top:-1px}.excalidraw .picker-triangle:after{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:rgba(0,0,0,0) rgba(0,0,0,0) var(--popup-bg-color)}.excalidraw .picker-content{padding:.5rem;display:grid;grid-template-columns:repeat(3, auto);grid-gap:.5rem;border-radius:4px}:root[dir=rtl] .excalidraw .picker-content{padding:.4rem}.excalidraw .picker-keybinding{position:absolute;bottom:2px;font-size:.7em;color:var(--keybinding-color)}:root[dir=ltr] .excalidraw .picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .picker-keybinding{left:2px}.excalidraw--mobile.excalidraw .picker-keybinding{display:none}.excalidraw .picker-type-canvasBackground .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementBackground .picker-keybinding{color:#fff}.excalidraw .picker-swatch[aria-label=transparent] .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementStroke .picker-keybinding{color:#d4d4d4}.excalidraw.theme--dark .picker-type-elementBackground .picker-keybinding{color:#000}.excalidraw.theme--dark .picker-swatch[aria-label=transparent] .picker-keybinding{color:#000}',\"\"]),t.Z=a},7369:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Island{--padding: 0;box-sizing:border-box;background-color:var(--island-bg-color);box-shadow:var(--shadow-island);border-radius:var(--border-radius-lg);padding:calc(var(--padding)*var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .Island.zen-mode{box-shadow:none}\",\"\"]),t.Z=a},1434:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .layer-ui__wrapper.animate{transition:width .1s ease-in-out}.excalidraw .layer-ui__wrapper{position:absolute;width:100%;height:100%;pointer-events:none;z-index:var(--zIndex-layerUI)}.excalidraw .layer-ui__wrapper__top-right{display:flex;gap:.75rem}.excalidraw .layer-ui__wrapper__footer{width:100%}.excalidraw .layer-ui__wrapper__footer-right{z-index:100;display:flex}.excalidraw .layer-ui__wrapper .zen-mode-transition{transition:-webkit-transform .5s ease-in-out;transition:transform .5s ease-in-out;transition:transform .5s ease-in-out, -webkit-transform .5s ease-in-out}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{-webkit-transform:translate(999px, 0);transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{-webkit-transform:translate(-999px, 0);transform:translate(-999px, 0)}.excalidraw .layer-ui__wrapper .zen-mode-transition.layer-ui__wrapper__footer-left--transition-bottom{-webkit-transform:translate(0, 92px);transform:translate(0, 92px)}.excalidraw .layer-ui__wrapper .disable-zen-mode{height:30px;position:absolute;bottom:10px;font-size:10px;padding:10px;font-weight:500;opacity:0;visibility:hidden;transition:visibility 0s linear 0s,opacity .5s}[dir=ltr] .excalidraw .layer-ui__wrapper .disable-zen-mode{right:15px}[dir=rtl] .excalidraw .layer-ui__wrapper .disable-zen-mode{left:15px}.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{opacity:1;visibility:visible;transition:visibility 0s linear 300ms,opacity .5s;transition-delay:.8s}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-left,.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right,.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{pointer-events:all}.excalidraw .layer-ui__wrapper .layer-ui__wrapper__footer-right{margin-top:auto;margin-bottom:auto}\",\"\"]),t.Z=a},2316:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.library-button{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--island-bg-color);width:auto;height:var(--lg-button-size);display:flex;align-items:center;gap:.5rem;line-height:0;font-size:.75rem;letter-spacing:.4px}.library-button svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.library-button:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.library-button:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.library-button.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.library-button.active:hover{background-color:var(--color-primary-light)}.library-button.active svg{color:var(--button-color, var(--color-primary-darker))}.library-button svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.library-button__label{display:none}@media screen and (min-width: 1024px){.library-button__label{display:block}}\",\"\"]),t.Z=a},8923:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .layer-ui__library-sidebar{display:flex;flex-direction:column}.excalidraw .layer-ui__library{display:flex;flex-direction:column;flex:1 1 auto}.excalidraw .layer-ui__library .layer-ui__library-header{display:flex;align-items:center;width:100%;margin:2px 0 15px 0}.excalidraw .layer-ui__library .layer-ui__library-header .Spinner{margin-right:1rem}.excalidraw .layer-ui__library .layer-ui__library-header button{margin:0 2px}.excalidraw .layer-ui__sidebar .library-menu-items-container{height:100%;width:100%}.excalidraw .library-actions-counter{background-color:var(--color-primary);color:var(--color-primary-light);font-weight:bold;display:flex;align-items:center;justify-content:center;border-radius:50%;width:1rem;height:1rem;position:absolute;bottom:-0.25rem;right:-0.25rem;font-size:.625rem;pointer-events:none}.excalidraw .layer-ui__library-message{padding:2rem;min-width:200px;display:flex;flex-direction:column;align-items:center;flex-grow:1;justify-content:center}.excalidraw .layer-ui__library-message span{font-size:.8em}.excalidraw .publish-library-success .Dialog__content{display:flex;flex-direction:column}.excalidraw .publish-library-success-close.ToolIcon_type_button{background-color:#228be6;align-self:flex-end}.excalidraw .publish-library-success-close.ToolIcon_type_button:hover{background-color:#1971c2}.excalidraw .publish-library-success-close.ToolIcon_type_button .ToolIcon__icon{width:auto;font-size:1rem;color:#fff;padding:0 .5rem}.excalidraw .library-menu-browse-button{margin:1rem auto;padding:.875rem 1rem;display:flex;align-items:center;justify-content:center;overflow:hidden;position:relative;border-radius:var(--border-radius-lg);background-color:var(--color-primary);color:#fff;text-align:center;white-space:nowrap;text-decoration:none !important;font-weight:600;font-size:.75rem}.excalidraw .library-menu-browse-button:hover{background-color:var(--color-primary-darker)}.excalidraw .library-menu-browse-button:active{background-color:var(--color-primary-darkest)}.excalidraw.theme--dark .library-menu-browse-button{color:var(--color-gray-100)}.excalidraw .library-menu-browse-button--mobile{min-height:22px;margin-left:auto}.excalidraw .library-menu-browse-button--mobile a{padding-right:0}.excalidraw .layer-ui__sidebar__header .dropdown-menu.dropdown-menu--mobile{top:100%}.excalidraw .layer-ui__sidebar__header .dropdown-menu .dropdown-menu-container{--gap: 0;z-index:1;position:absolute;top:100%;left:0;width:196px;box-shadow:var(--library-dropdown-shadow);border-radius:var(--border-radius-lg);padding:.25rem .5rem}:root[dir=rtl] .excalidraw .layer-ui__sidebar__header .dropdown-menu .dropdown-menu-container{right:0;left:auto}\",\"\"]),t.Z=a},6440:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw{--container-padding-y: 1.5rem;--container-padding-x: 0.75rem}.excalidraw .library-menu-items__no-items{text-align:center;color:var(--color-gray-70);line-height:1.5;font-size:.875rem;width:100%}.excalidraw .library-menu-items__no-items__label{color:var(--color-primary);font-weight:bold;font-size:1.125rem;margin-bottom:.75rem}.excalidraw.theme--dark .library-menu-items__no-items{color:var(--color-gray-40)}.excalidraw .library-menu-items-container{display:flex;flex-grow:1;flex-shrink:1;flex-basis:0;overflow-y:auto;flex-direction:column;height:100%;justify-content:center;margin:0;border-bottom:1px solid var(--sidebar-border-color);position:relative}.excalidraw .library-menu-items-container__row{display:grid;grid-template-columns:repeat(4, 1fr);gap:1rem}.excalidraw .library-menu-items-container__items{row-gap:.5rem;padding:var(--container-padding-y) var(--container-padding-x);flex:1;overflow-y:auto;overflow-x:hidden;margin-bottom:1rem}.excalidraw .library-menu-items-container__header{color:var(--color-primary);font-size:1.125rem;font-weight:bold;margin-bottom:.75rem}.excalidraw .library-menu-items-container__header--excal{margin-top:2.5rem}.excalidraw .library-menu-items-container .separator{width:100%;display:flex;align-items:center;font-weight:500;font-size:.9rem;margin:.6em .2em;color:var(--text-primary-color)}\",\"\"]),t.Z=a},2701:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .library-unit{align-items:center;border:1px solid rgba(0,0,0,0);display:flex;justify-content:center;position:relative;width:55px;height:55px;box-sizing:border-box;border-radius:var(--border-radius-lg)}.excalidraw .library-unit--hover{border-color:var(--color-primary)}.excalidraw .library-unit--selected{border-color:var(--color-primary);border-width:1px}.excalidraw .library-unit__dragger{display:flex;align-items:center;justify-content:center;height:100%;width:100%}.excalidraw .library-unit__dragger>svg{-webkit-filter:var(--theme-filter);filter:var(--theme-filter);flex-grow:1;max-height:100%;max-width:100%}.excalidraw .library-unit__checkbox-container,.excalidraw .library-unit__checkbox-container:hover,.excalidraw .library-unit__checkbox-container:active{align-items:center;background:none;border:none;color:var(--icon-fill-color);display:flex;justify-content:center;margin:0;padding:.5rem;position:absolute;left:2rem;bottom:2rem;cursor:pointer}.excalidraw .library-unit__checkbox-container input,.excalidraw .library-unit__checkbox-container:hover input,.excalidraw .library-unit__checkbox-container:active input{cursor:pointer}.excalidraw .library-unit__checkbox{position:absolute;top:.125rem;right:.125rem;margin:0}.excalidraw .library-unit__checkbox .Checkbox-box{margin:0;width:1rem;height:1rem;border-radius:4px;background-color:var(--color-primary-light);border:1px solid var(--color-primary);box-shadow:none !important;padding:2px}.excalidraw .library-unit__checkbox.Checkbox:hover .Checkbox-box{background-color:var(--color-primary-light)}.excalidraw .library-unit__checkbox.is-checked .Checkbox-box{background-color:var(--color-primary) !important}.excalidraw .library-unit__checkbox.is-checked .Checkbox-box svg{color:var(--color-primary-light)}.excalidraw .library-unit__removeFromLibrary>svg{height:16px;width:16px}.excalidraw .library-unit__adder{-webkit-transform:scale(1);transform:scale(1);-webkit-animation:library-unit__adder-animation 1s ease-in infinite;animation:library-unit__adder-animation 1s ease-in infinite;position:absolute;width:1.5rem;height:1.5rem;background-color:var(--color-primary);border-radius:var(--border-radius-md);display:flex;justify-content:center;align-items:center;pointer-events:none}.excalidraw .library-unit__adder svg{color:var(--color-primary-light);width:1rem;height:1rem}.excalidraw .library-unit:active .library-unit__adder{-webkit-animation:none;animation:none;-webkit-transform:scale(0.8);transform:scale(0.8)}.excalidraw .library-unit__active{cursor:pointer}@-webkit-keyframes library-unit__adder-animation{0%{-webkit-transform:scale(0.85);transform:scale(0.85)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.85);transform:scale(0.85)}}@keyframes library-unit__adder-animation{0%{-webkit-transform:scale(0.85);transform:scale(0.85)}50%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0.85);transform:scale(0.85)}}\",\"\"]),t.Z=a},6843:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw.excalidraw-modal-container{position:absolute;z-index:10}.excalidraw .Modal{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;overflow:auto;padding:calc(var(--space-factor)*10)}.excalidraw .Modal .Island{padding:2.5rem !important}.excalidraw .Modal__background{position:absolute;top:0;left:0;right:0;bottom:0;z-index:1;background-color:rgba(18,18,18,.2)}.excalidraw .Modal__content{position:relative;z-index:2;width:100%;max-width:var(--max-width);max-height:100%;opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px);-webkit-animation:Modal__content_fade-in .1s ease-out .05s forwards;animation:Modal__content_fade-in .1s ease-out .05s forwards;position:relative;overflow-y:auto;background:var(--island-bg-color);border:1px solid var(--dialog-border-color);box-shadow:var(--modal-shadow);border-radius:6px;box-sizing:border-box}.excalidraw .Modal__content:focus{outline:none}.excalidraw--mobile.excalidraw .Modal__content{max-width:100%;border:0;border-radius:0}@-webkit-keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes Modal__content_fade-in{from{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.excalidraw .Modal__close{color:var(--icon-fill-color);margin:0;padding:.375rem;position:absolute;top:1rem;right:1rem;border:0;background-color:rgba(0,0,0,0);line-height:0;cursor:pointer}.excalidraw .Modal__close svg{width:1.5rem;height:1.5rem}.excalidraw--mobile.excalidraw .Modal{padding:0}.excalidraw--mobile.excalidraw .Modal__content{position:absolute;top:0;left:0;right:0;bottom:0}\",\"\"]),t.Z=a},8461:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw--mobile.excalidraw .PasteChartDialog .Island{display:flex;flex-direction:column}.excalidraw .PasteChartDialog .container{display:flex;align-items:center;justify-content:space-around;flex-wrap:wrap}.excalidraw--mobile.excalidraw .PasteChartDialog .container{flex-direction:column;justify-content:center}.excalidraw .PasteChartDialog .ChartPreview{margin:8px;text-align:center;width:192px;height:128px;border-radius:2px;padding:1px;border:1px solid #ced4da;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,0)}.excalidraw .PasteChartDialog .ChartPreview div{display:inline-block}.excalidraw .PasteChartDialog .ChartPreview svg{max-height:120px;max-width:186px}.excalidraw .PasteChartDialog .ChartPreview:hover{padding:0;border:2px solid #339af0}\",\"\"]),t.Z=a},9935:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .popover{position:absolute;z-index:10;padding:5px 0 5px;outline:none}\",\"\"]),t.Z=a},532:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".ProjectName{margin:auto;display:flex;align-items:center}.ProjectName .TextInput{height:calc(1rem - 3px);width:200px;overflow:hidden;text-align:center;margin-left:8px;text-overflow:ellipsis}.ProjectName .TextInput--readonly{background:none;border:none;width:auto;max-width:200px;padding-left:2px}.ProjectName .TextInput--readonly:hover{background:none}\",\"\"]),t.Z=a},7589:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .publish-library__fields{display:flex;flex-direction:column}.excalidraw .publish-library__fields label{padding:1em 0;display:flex;justify-content:space-between;align-items:center}.excalidraw .publish-library__fields label span{font-weight:500;font-size:1rem;color:#868e96}.excalidraw .publish-library__fields label input,.excalidraw .publish-library__fields label textarea{width:70%;padding:.6em;font-family:var(--ui-font)}.excalidraw .publish-library__fields label .required{color:#e03131;margin:.2rem}.excalidraw .publish-library__buttons{display:flex;padding:.2rem 0;justify-content:flex-end;gap:.5rem}.excalidraw .publish-library__buttons .ToolIcon__icon{min-width:2.5rem;width:auto;font-size:1rem}.excalidraw .publish-library__buttons .ToolIcon_type_button{margin-left:1rem;padding:0 .5rem}.excalidraw .publish-library__buttons--confirm.ToolIcon_type_button{background-color:#228be6}.excalidraw .publish-library__buttons--confirm.ToolIcon_type_button:hover{background-color:#1971c2}.excalidraw .publish-library__buttons--cancel.ToolIcon_type_button{background-color:#adb5bd}.excalidraw .publish-library__buttons--cancel.ToolIcon_type_button:hover{background-color:#868e96}.excalidraw .publish-library__buttons .ToolIcon__icon{color:#fff}.excalidraw .publish-library__buttons .ToolIcon__icon .Spinner{--spinner-color: #fff}.excalidraw .publish-library__buttons .ToolIcon__icon .Spinner svg{padding:.5rem}.excalidraw .publish-library .selected-library-items{display:flex;flex-wrap:wrap}.excalidraw .publish-library .selected-library-items .single-library-item-wrapper{width:9rem}.excalidraw .publish-library-warning{color:#fa5252}.excalidraw .publish-library-note{padding:1em 0;font-style:italic;font-size:14px;display:block}.excalidraw .single-library-item{position:relative}.excalidraw .single-library-item-status{position:absolute;top:.3rem;left:.3rem;font-size:.7rem;color:#f03e3e;background:rgba(255,255,255,.9);padding:.1rem .2rem;border-radius:.2rem}.excalidraw .single-library-item__svg{background-color:#fff;padding:.3rem;width:7.5rem;height:7.5rem;border:1px solid var(--button-gray-2)}.excalidraw .single-library-item__svg svg{width:100%;height:100%}.excalidraw .single-library-item .ToolIcon__icon{background-color:#fff;width:auto;height:auto;margin:0 .5rem}.excalidraw .single-library-item .ToolIcon,.excalidraw .single-library-item .ToolIcon_type_button:hover{background-color:#fff}.excalidraw .single-library-item .required,.excalidraw .single-library-item .error{color:#e03131;font-weight:bold;font-size:1rem;margin:.2rem}.excalidraw .single-library-item .error{font-weight:500;margin:0;padding:.3em 0}.excalidraw .single-library-item--remove{position:absolute;top:.2rem;right:1rem}.excalidraw .single-library-item--remove .ToolIcon__icon{margin:0}.excalidraw .single-library-item--remove .ToolIcon__icon{background-color:#fa5252}.excalidraw .single-library-item--remove .ToolIcon__icon:hover{background-color:#f03e3e}.excalidraw .single-library-item--remove .ToolIcon__icon:active{background-color:#e03131}.excalidraw .single-library-item--remove svg{color:#fff;padding:.26rem;border-radius:.3em;width:1rem;height:1rem}\",\"\"]),t.Z=a},8208:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Sidebar__close-btn,.excalidraw .Sidebar__pin-btn,.excalidraw .Sidebar__dropdown-btn{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));width:var(--lg-button-size);height:var(--lg-button-size);padding:0}.excalidraw .Sidebar__close-btn svg,.excalidraw .Sidebar__pin-btn svg,.excalidraw .Sidebar__dropdown-btn svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .Sidebar__close-btn:hover,.excalidraw .Sidebar__pin-btn:hover,.excalidraw .Sidebar__dropdown-btn:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .Sidebar__close-btn:active,.excalidraw .Sidebar__pin-btn:active,.excalidraw .Sidebar__dropdown-btn:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .Sidebar__close-btn.active,.excalidraw .Sidebar__pin-btn.active,.excalidraw .Sidebar__dropdown-btn.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .Sidebar__close-btn.active:hover,.excalidraw .Sidebar__pin-btn.active:hover,.excalidraw .Sidebar__dropdown-btn.active:hover{background-color:var(--color-primary-light)}.excalidraw .Sidebar__close-btn.active svg,.excalidraw .Sidebar__pin-btn.active svg,.excalidraw .Sidebar__dropdown-btn.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .Sidebar__close-btn svg,.excalidraw .Sidebar__pin-btn svg,.excalidraw .Sidebar__dropdown-btn svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.excalidraw .Sidebar__pin-btn--pinned{background-color:var(--color-primary);border-color:var(--color-primary)}.excalidraw .Sidebar__pin-btn--pinned svg{color:#fff}.excalidraw .Sidebar__pin-btn--pinned:hover,.excalidraw .Sidebar__pin-btn--pinned:active{background-color:var(--color-primary-darker)}.excalidraw.theme--dark .Sidebar__pin-btn--pinned svg{color:var(--color-gray-90)}.excalidraw .layer-ui__sidebar{position:absolute;top:0;bottom:0;right:0;z-index:5;margin:0;background-color:var(--sidebar-bg-color);box-shadow:var(--sidebar-shadow);overflow:hidden;border-radius:0;width:calc(302px - var(--space-factor) * 2);border-left:1px solid var(--sidebar-border-color);padding:0;box-sizing:border-box}:root[dir=rtl] .excalidraw .layer-ui__sidebar{left:0;right:auto}.excalidraw .layer-ui__sidebar--docked{box-shadow:none}:root[dir=rtl] .excalidraw .layer-ui__sidebar{border-right:1px solid var(--sidebar-border-color);border-left:0}.excalidraw .layer-ui__sidebar .Island{box-shadow:none}.excalidraw .layer-ui__sidebar .ToolIcon__icon{border-radius:var(--border-radius-md)}.excalidraw .layer-ui__sidebar .ToolIcon__icon__close .Modal__close{width:calc(var(--space-factor)*7);height:calc(var(--space-factor)*7);display:flex;justify-content:center;align-items:center;color:var(--color-text)}.excalidraw .layer-ui__sidebar .Island{--padding: 0;background-color:var(--island-bg-color);border-radius:var(--border-radius-lg);padding:calc(var(--padding)*var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .layer-ui__sidebar__header{box-sizing:border-box;display:flex;justify-content:space-between;align-items:center;width:100%;padding:1rem;border-bottom:1px solid var(--sidebar-border-color)}.excalidraw .layer-ui__sidebar__header__buttons{display:flex;align-items:center;gap:.625rem}\",\"\"]),t.Z=a},5892:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Spinner{display:flex;align-items:center;justify-content:center;height:100%;margin-left:auto;margin-right:auto;--spinner-color: var(--icon-fill-color)}.excalidraw .Spinner svg{-webkit-animation:rotate 1.6s linear infinite;animation:rotate 1.6s linear infinite;-webkit-transform-origin:center center;transform-origin:center center}.excalidraw .Spinner circle{stroke:var(--spinner-color);-webkit-animation:dash 1.6s linear 0s infinite;animation:dash 1.6s linear 0s infinite;stroke-linecap:round}@-webkit-keyframes rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes rotate{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes dash{0%{stroke-dasharray:1,300;stroke-dashoffset:0}50%{stroke-dasharray:150,300;stroke-dashoffset:-200}100%{stroke-dasharray:1,300;stroke-dashoffset:-280}}@keyframes dash{0%{stroke-dasharray:1,300;stroke-dashoffset:0}50%{stroke-dasharray:150,300;stroke-dashoffset:-200}100%{stroke-dasharray:1,300;stroke-dashoffset:-280}}\",\"\"]),t.Z=a},3874:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .Stack{--gap: 0;display:grid;gap:calc(var(--space-factor)*var(--gap))}.excalidraw .Stack_vertical{grid-template-columns:auto;grid-auto-flow:row;grid-auto-rows:-webkit-min-content;grid-auto-rows:min-content}.excalidraw .Stack_horizontal{grid-template-rows:auto;grid-auto-flow:column;grid-auto-columns:-webkit-min-content;grid-auto-columns:min-content}\",\"\"]),t.Z=a},2681:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Stats{position:absolute;top:64px;right:12px;font-size:12px;z-index:10;pointer-events:all}.excalidraw .Stats h3{margin:0 24px 8px 0;white-space:nowrap}.excalidraw .Stats .close{float:right;height:16px;width:16px;cursor:pointer}.excalidraw .Stats .close svg{width:100%;height:100%}.excalidraw .Stats table{width:100%}.excalidraw .Stats table th{border-bottom:1px solid var(--input-border-color);padding:4px}.excalidraw .Stats table tr td:nth-child(2){min-width:24px;text-align:right}:root[dir=rtl] .excalidraw .Stats{left:12px;right:initial}:root[dir=rtl] .excalidraw .Stats h3{margin:0 0 8px 24px}:root[dir=rtl] .excalidraw .Stats .close{float:left}\",\"\"]),t.Z=a},6759:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .TextInput{display:inline-block}\",\"\"]),t.Z=a},9650:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .Toast{-webkit-animation:fade-in .5s;animation:fade-in .5s;background-color:var(--button-gray-1);border-radius:4px;bottom:10px;box-sizing:border-box;cursor:default;left:50%;margin-left:-150px;padding:4px 0;position:absolute;text-align:center;width:300px;z-index:999999}.excalidraw .Toast .Toast__message{padding:0 1.6rem;color:var(--popup-text-color);white-space:pre-wrap}.excalidraw .Toast .close{position:absolute;top:0;right:0;padding:.4rem}.excalidraw .Toast .close .ToolIcon__icon{width:1.2rem;height:1.2rem}@-webkit-keyframes fade-in{from{opacity:0}to{opacity:1}}@keyframes fade-in{from{opacity:0}to{opacity:1}}\",\"\"]),t.Z=a},2044:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .ToolIcon{border-radius:var(--border-radius-lg);display:inline-flex;align-items:center;position:relative;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;user-select:none}.excalidraw .ToolIcon__hidden{display:none !important}.excalidraw .ToolIcon.fillable .ToolIcon_type_radio:checked+.ToolIcon__icon,.excalidraw .ToolIcon.fillable .ToolIcon_type_checkbox:checked+.ToolIcon__icon{--icon-fill-color: var(--color-primary-darker)}.excalidraw .ToolIcon.fillable .ToolIcon_type_radio:checked+.ToolIcon__icon svg,.excalidraw .ToolIcon.fillable .ToolIcon_type_checkbox:checked+.ToolIcon__icon svg{fill:var(--icon-fill-color)}.excalidraw .ToolIcon .ToolIcon_type_radio:checked+.ToolIcon__icon,.excalidraw .ToolIcon .ToolIcon_type_checkbox:checked+.ToolIcon__icon{background:var(--color-primary-light);--keybinding-color: var(--color-gray-60)}.excalidraw .ToolIcon .ToolIcon_type_radio:checked+.ToolIcon__icon svg,.excalidraw .ToolIcon .ToolIcon_type_checkbox:checked+.ToolIcon__icon svg{color:var(--color-primary-darker)}.excalidraw .ToolIcon .ToolIcon__keybinding{bottom:4px;right:4px}.excalidraw .ToolIcon .ToolIcon__icon:hover{background:var(--button-hover-bg)}.excalidraw .ToolIcon .ToolIcon__icon:active{background:var(--button-hover-bg);border:1px solid var(--color-primary-darkest)}.excalidraw .ToolIcon--plain{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon--plain .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .ToolIcon_type_radio,.excalidraw .ToolIcon_type_checkbox{position:absolute;opacity:0;pointer-events:none}.excalidraw .ToolIcon__icon{box-sizing:border-box;width:var(--default-button-size);height:var(--default-button-size);color:var(--icon-fill-color);display:flex;justify-content:center;align-items:center;border-radius:var(--border-radius-lg)}.excalidraw .ToolIcon__icon+.ToolIcon__label{-webkit-margin-start:0;margin-inline-start:0}.excalidraw .ToolIcon__icon svg{position:relative;width:var(--default-icon-size);height:var(--default-icon-size);color:var(--icon-fill-color)}.excalidraw .ToolIcon__label{display:flex;align-items:center;color:var(--icon-fill-color);font-family:var(--ui-font);margin:0 .8em;text-overflow:ellipsis}.excalidraw .ToolIcon__label .Spinner{margin-left:.6em}.excalidraw .ToolIcon_size_small .ToolIcon__icon{width:2rem;height:2rem;font-size:.8em}.excalidraw .ToolIcon_type_button,.excalidraw .Modal .ToolIcon_type_button,.excalidraw .ToolIcon_type_button{padding:0;border:none;margin:0;font-size:inherit;background-color:initial}.excalidraw .ToolIcon_type_button:focus-visible,.excalidraw .Modal .ToolIcon_type_button:focus-visible,.excalidraw .ToolIcon_type_button:focus-visible{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .ToolIcon_type_button.ToolIcon--selected,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected,.excalidraw .ToolIcon_type_button.ToolIcon--selected{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .ToolIcon_type_button.ToolIcon--selected:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_button:active,.excalidraw .Modal .ToolIcon_type_button:active,.excalidraw .ToolIcon_type_button:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_button--show,.excalidraw .Modal .ToolIcon_type_button--show,.excalidraw .ToolIcon_type_button--show{visibility:visible}.excalidraw .ToolIcon_type_button--hide,.excalidraw .Modal .ToolIcon_type_button--hide,.excalidraw .ToolIcon_type_button--hide{display:none !important}.excalidraw .ToolIcon_type_floating{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon_type_floating:hover{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon_type_floating:active{background-color:rgba(0,0,0,0)}.excalidraw .ToolIcon_type_floating .ToolIcon__icon{background-color:var(--button-gray-1);width:2rem;height:2rem}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:hover{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_floating .ToolIcon__icon:active{background-color:var(--button-gray-3)}.excalidraw .ToolIcon__keybinding{position:absolute;bottom:2px;right:3px;font-size:.625rem;color:var(--keybinding-color);font-family:var(--ui-font);-webkit-user-select:none;user-select:none}:root[dir=ltr] .excalidraw .unlocked-icon{left:2px}:root[dir=rtl] .excalidraw .unlocked-icon{right:2px}.excalidraw .App-toolbar-container .ToolIcon__icon{width:var(--lg-button-size);height:var(--lg-button-size)}.excalidraw .App-toolbar-container .ToolIcon__icon svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}\",\"\"]),t.Z=a},9144:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .App-toolbar.zen-mode .ToolIcon__keybinding,.excalidraw .App-toolbar.zen-mode .HintViewer{display:none}.excalidraw .App-toolbar__divider{width:1px;height:1.5rem;align-self:center;background-color:var(--default-border-color);margin:0 .5rem}\",\"\"]),t.Z=a},6626:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw-tooltip{position:fixed;z-index:1000;padding:8px;border-radius:6px;box-sizing:border-box;pointer-events:none;word-wrap:break-word;background:#000;line-height:1.5;text-align:center;font-size:13px;font-weight:500;color:#fff;display:none}.excalidraw-tooltip.excalidraw-tooltip--visible{display:block}.excalidraw-tooltip-wrapper{display:flex}.excalidraw-tooltip-icon{width:.9em;height:.9em;margin-left:5px;margin-top:1px;display:flex}.excalidraw--mobile.excalidraw-tooltip-icon{display:none}\",\"\"]),t.Z=a},6359:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .UserList{pointer-events:none;padding:var(--space-factor) var(--space-factor) var(--space-factor) var(--space-factor);display:flex;flex-wrap:wrap;justify-content:flex-end;align-items:center;gap:.625rem;max-height:140px;max-width:290px;overflow:hidden}.excalidraw .UserList:empty{display:none}.excalidraw .UserList>*{pointer-events:all}.excalidraw .UserList_mobile{padding:0;justify-content:normal;margin:.5rem 0}\",\"\"]),t.Z=a},7399:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .dropdown-menu{position:absolute;top:100%;margin-top:.25rem}.excalidraw .dropdown-menu--mobile{bottom:55px;top:auto;left:0;width:100%;display:flex;flex-direction:column;row-gap:.75rem}.excalidraw .dropdown-menu--mobile .dropdown-menu-container{padding:8px 8px;box-sizing:border-box;background-color:var(--island-bg-color);box-shadow:var(--shadow-island);border-radius:var(--border-radius-lg);position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .dropdown-menu--mobile .dropdown-menu-container.zen-mode{box-shadow:none}.excalidraw .dropdown-menu .dropdown-menu-container{background-color:#fff !important;max-height:calc(100vh - 150px);overflow-y:auto;--gap: 2}.excalidraw .dropdown-menu .dropdown-menu-item-base{display:flex;padding:0 .625rem;-webkit-column-gap:.625rem;column-gap:.625rem;font-size:.875rem;color:var(--color-gray-100);width:100%;box-sizing:border-box;font-weight:normal;font-family:inherit}.excalidraw .dropdown-menu .dropdown-menu-item{background-color:rgba(0,0,0,0);border:0;align-items:center;height:2rem;cursor:pointer;border-radius:var(--border-radius-md)}@media screen and (min-width: 1921px){.excalidraw .dropdown-menu .dropdown-menu-item{height:2.25rem}}.excalidraw .dropdown-menu .dropdown-menu-item__text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.excalidraw .dropdown-menu .dropdown-menu-item__shortcut{-webkit-margin-start:auto;margin-inline-start:auto;opacity:.5}.excalidraw .dropdown-menu .dropdown-menu-item:hover{background-color:var(--button-hover-bg);text-decoration:none}.excalidraw .dropdown-menu .dropdown-menu-item svg{width:1rem;height:1rem;display:block}.excalidraw .dropdown-menu .dropdown-menu-item-custom{margin-top:.5rem}.excalidraw .dropdown-menu .dropdown-menu-group-title{font-size:14px;text-align:left;margin:10px 0;font-weight:500}.excalidraw.theme--dark .dropdown-menu-item{color:var(--color-gray-40)}.excalidraw.theme--dark .dropdown-menu-container{background-color:var(--color-gray-90) !important}.excalidraw .dropdown-menu-button{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--island-bg-color);width:var(--lg-button-size);height:var(--lg-button-size)}.excalidraw .dropdown-menu-button svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .dropdown-menu-button:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .dropdown-menu-button:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .dropdown-menu-button.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .dropdown-menu-button.active:hover{background-color:var(--color-primary-light)}.excalidraw .dropdown-menu-button.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .dropdown-menu-button svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.excalidraw .dropdown-menu-button--mobile{border:none;margin:0;padding:0;width:var(--default-button-size);height:var(--default-button-size)}\",\"\"]),t.Z=a},8793:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".footer-center{pointer-events:none;display:flex;width:100%;justify-content:flex-start}.footer-center>*{pointer-events:all}\",\"\"]),t.Z=a},3397:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw .collab-button{--button-bg: var(--color-primary);--button-color: white;--button-border: var(--color-primary);--button-width: var(--lg-button-size);--button-height: var(--lg-button-size);--button-hover-bg: var(--color-primary-darker);--button-hover-border: var(--color-primary-darker);--button-active-bg: var(--color-primary-darker);flex-shrink:0}.excalidraw .collab-button.active.active{background-color:#0fb884;border-color:#0fb884}.excalidraw .collab-button.active.active svg{color:#fff}.excalidraw .collab-button.active.active:hover,.excalidraw .collab-button.active.active:active{background-color:#0fb884;border-color:#0fb884}.excalidraw.theme--dark .collab-button{color:var(--color-gray-90)}.excalidraw .CollabButton.is-collaborating{background-color:var(--button-special-active-bg-color)}.excalidraw .CollabButton.is-collaborating .ToolIcon__icon svg,.excalidraw .CollabButton.is-collaborating .ToolIcon__label{color:var(--icon-green-fill-color)}.excalidraw .CollabButton-collaborators{min-width:1em;min-height:1em;line-height:1;position:absolute;bottom:-5px;padding:3px;border-radius:50%;background-color:#b2f2bb;color:#2b8a3e;font-size:.6rem;font-family:\"Cascadia\"}:root[dir=ltr] .excalidraw .CollabButton-collaborators{right:-5px}:root[dir=rtl] .excalidraw .CollabButton-collaborators{left:-5px}',\"\"]),t.Z=a},4343:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".excalidraw .ActiveFile .ActiveFile__fileName{display:flex;align-items:center}.excalidraw .ActiveFile .ActiveFile__fileName span{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:9.3em}.excalidraw .ActiveFile .ActiveFile__fileName svg{width:1.15em;-webkit-margin-end:.3em;margin-inline-end:.3em;-webkit-transform:scaleY(0.9);transform:scaleY(0.9)}\",\"\"]),t.Z=a},1569:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.excalidraw .virgil{font-family:\"Virgil\"}.excalidraw .welcome-screen-decor{pointer-events:none;color:var(--color-gray-40)}.excalidraw.theme--dark .welcome-screen-decor{color:var(--color-gray-60)}@media(max-height: 599px){.excalidraw .welcome-screen-decor-hint{display:none !important}}@media(max-width: 1024px),(max-width: 800px){.excalidraw .welcome-screen-decor-hint .welcome-screen-decor--help,.excalidraw .welcome-screen-decor-hint .welcome-screen-decor--menu{display:none}}.excalidraw .welcome-screen-decor-hint--help{display:flex;position:absolute;right:0;bottom:100%}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--help{left:0;right:auto}.excalidraw .welcome-screen-decor-hint--help svg{margin-top:.5rem;width:85px;height:71px;-webkit-transform:scaleX(-1) rotate(80deg);transform:scaleX(-1) rotate(80deg)}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--help svg{-webkit-transform:rotate(80deg);transform:rotate(80deg)}.excalidraw .welcome-screen-decor-hint--toolbar{position:absolute;top:100%;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);margin-top:2.5rem;display:flex;align-items:baseline}.excalidraw .welcome-screen-decor-hint--toolbar .welcome-screen-decor-hint__label{width:120px;position:relative;top:-0.5rem}.excalidraw .welcome-screen-decor-hint--toolbar svg{width:38px;height:78px}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--toolbar svg{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.excalidraw .welcome-screen-decor-hint--menu{position:absolute;width:320px;font-size:1rem;top:100%;margin-top:.25rem;-webkit-margin-start:.6rem;margin-inline-start:.6rem;display:flex;align-items:flex-end;gap:.5rem}.excalidraw .welcome-screen-decor-hint--menu svg{width:41px;height:94px}:root[dir=rtl] .excalidraw .welcome-screen-decor-hint--menu svg{-webkit-transform:scaleX(-1);transform:scaleX(-1)}@media(max-width: 860px){.excalidraw .welcome-screen-decor-hint--menu .welcome-screen-decor-hint__label{max-width:160px}}.excalidraw .welcome-screen-center{display:flex;flex-direction:column;gap:2rem;justify-content:center;align-items:center;position:absolute;pointer-events:none;left:1rem;top:1rem;right:1rem;bottom:1rem}.excalidraw .welcome-screen-center__logo{display:flex;align-items:center;-webkit-column-gap:.75rem;column-gap:.75rem;font-size:2.25rem}.excalidraw .welcome-screen-center__logo svg{width:1.625rem;height:auto}.excalidraw .welcome-screen-center__heading{font-size:1.125rem;text-align:center}.excalidraw .welcome-screen-menu{display:flex;flex-direction:column;gap:2px;justify-content:center;align-items:center}.excalidraw .welcome-screen-menu-item{box-sizing:border-box;pointer-events:all;color:var(--color-gray-50);font-size:.875rem;width:100%;min-width:300px;max-width:400px;display:grid;align-items:center;justify-content:space-between;background:none;border:none;padding:.75rem;border-radius:var(--border-radius-md);grid-template-columns:calc(var(--default-icon-size) + .5rem) 1fr 3rem}.excalidraw .welcome-screen-menu-item__text{display:flex;align-items:center;margin-right:auto;text-align:left;-webkit-column-gap:.5rem;column-gap:.5rem}.excalidraw .welcome-screen-menu-item__icon{width:var(--default-icon-size);height:var(--default-icon-size)}.excalidraw .welcome-screen-menu-item__shortcut{margin-left:auto;color:var(--color-gray-40);font-size:.75rem}.excalidraw:not(:active) .welcome-screen-menu-item:hover{text-decoration:none;background:var(--color-gray-10)}.excalidraw:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__shortcut{color:var(--color-gray-50)}.excalidraw:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__text{color:var(--color-gray-100)}.excalidraw .welcome-screen-menu-item:active{background:var(--color-gray-20)}.excalidraw .welcome-screen-menu-item:active .welcome-screen-menu-item__shortcut{color:var(--color-gray-50)}.excalidraw .welcome-screen-menu-item:active .welcome-screen-menu-item__text{color:var(--color-gray-100)}.excalidraw .welcome-screen-menu-item:active--promo{color:var(--color-promo) !important}.excalidraw .welcome-screen-menu-item:active--promo:hover .welcome-screen-menu-item__text{color:var(--color-promo) !important}.excalidraw.theme--dark .welcome-screen-menu-item{color:var(--color-gray-60)}.excalidraw.theme--dark .welcome-screen-menu-item__shortcut{color:var(--color-gray-60)}.excalidraw.theme--dark:not(:active) .welcome-screen-menu-item:hover{background:var(--color-gray-85)}.excalidraw.theme--dark:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__shortcut{color:var(--color-gray-50)}.excalidraw.theme--dark:not(:active) .welcome-screen-menu-item:hover .welcome-screen-menu-item__text{color:var(--color-gray-10)}.excalidraw.theme--dark .welcome-screen-menu-item:active{background-color:var(--color-gray-90)}.excalidraw.theme--dark .welcome-screen-menu-item:active .welcome-screen-menu-item__text{color:var(--color-gray-10)}@media(max-height: 599px){.excalidraw .welcome-screen-center{margin-top:4rem}}@media(min-height: 600px)and (max-height: 900px){.excalidraw .welcome-screen-center{margin-top:8rem}}@media(max-height: 500px),(max-width: 320px){.excalidraw .welcome-screen-center{display:none}}',\"\"]),t.Z=a},9915:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\".visually-hidden{position:absolute !important;height:1px;width:1px;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);white-space:nowrap;-webkit-user-select:none;user-select:none}.LoadingMessage{position:absolute;top:0;right:0;bottom:0;left:0;z-index:999;display:flex;flex-direction:column;align-items:center;justify-content:center;pointer-events:none}.LoadingMessage .Spinner{font-size:2.8em}.LoadingMessage .LoadingMessage-text{margin-top:1em;font-size:.8em}.LoadingMessage--dark{background-color:#121212;color:#ced4da}\",\"\"]),t.Z=a},9310:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),s=n.n(l),c=new URL(n(7984),n.b),u=new URL(n(1639),n.b),d=a()(o()),f=s()(c),p=s()(u);d.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}:export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw{--theme-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: var(--color-gray-20);--dropdown-icon: url(\"+f+\");--focus-highlight-color: #a5d8ff;--icon-fill-color: var(--color-gray-80);--icon-green-fill-color: #2b8a3e;--default-bg-color: #ffffff;--input-bg-color: #ffffff;--input-border-color: #ced4da;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.96);--keybinding-color: var(--color-gray-40);--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0px 7px 14px rgba(0, 0, 0, 0.05), 0px 0px 3.12708px rgba(0, 0, 0, 0.0798), 0px 0px 0.931014px rgba(0, 0, 0, 0.1702);--button-hover-bg: var(--color-gray-10);--default-border-color: var(--color-gray-30);--default-button-size: 2rem;--default-icon-size: 1rem;--lg-button-size: 2.25rem;--lg-icon-size: 1rem;--editor-container-padding: 1rem;--scrollbar-thumb: var(--button-gray-2);--scrollbar-thumb-hover: var(--button-gray-3);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-20);--sidebar-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--sidebar-border-color: var(--color-gray-20);--sidebar-bg-color: #fff;--library-dropdown-shadow: 0px 15px 6px rgba(0, 0, 0, 0.01), 0px 8px 5px rgba(0, 0, 0, 0.05), 0px 4px 4px rgba(0, 0, 0, 0.09), 0px 1px 2px rgba(0, 0, 0, 0.1), 0px 0px 0px rgba(0, 0, 0, 0.1);--space-factor: 0.25rem;--text-primary-color: var(--color-gray-80);--color-selection: #6965db;--color-primary: #6965db;--color-primary-darker: #5b57d1;--color-primary-darkest: #4a47b1;--color-primary-light: #e3e2fe;--color-gray-10: #f5f5f5;--color-gray-20: #ebebeb;--color-gray-30: #d6d6d6;--color-gray-40: #b8b8b8;--color-gray-50: #999999;--color-gray-60: #7a7a7a;--color-gray-70: #5c5c5c;--color-gray-80: #3d3d3d;--color-gray-85: #242424;--color-gray-90: #1e1e1e;--color-gray-100: #121212;--color-warning: #fceeca;--color-text-warning: var(--text-primary-color);--color-danger: #db6965;--color-promo: #e70078;--border-radius-md: 0.375rem;--border-radius-lg: 0.5rem}@media screen and (min-device-width: 1921px){.excalidraw{--lg-button-size: 2.5rem;--lg-icon-size: 1.25rem;--default-button-size: 2.25rem;--default-icon-size: 1.25rem}}.excalidraw.theme--dark.theme--dark-background-none{background:none}.excalidraw.theme--dark{--theme-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: var(--color-gray-80);--dropdown-icon: url(\"+p+');--focus-highlight-color: #228be6;--icon-fill-color: var(--color-gray-40);--icon-green-fill-color: #69db7c;--default-bg-color: #121212;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: #262627;--keybinding-color: var(--color-gray-60);--link-color: #4dabf7;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--text-primary-color: var(--color-gray-40);--button-hover-bg: var(--color-gray-80);--default-border-color: var(--color-gray-80);--shadow-island: 0px 13px 33px rgba(0, 0, 0, 0.07), 0px 4.13px 9.94853px rgba(0, 0, 0, 0.0456112), 0px 1.13px 4.13211px rgba(0, 0, 0, 0.035), 0px 0.769896px 1.4945px rgba(0, 0, 0, 0.0243888);--modal-shadow: 0px 100px 80px rgba(0, 0, 0, 0.07), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802);--avatar-border-color: var(--color-gray-85);--sidebar-border-color: var(--color-gray-85);--sidebar-bg-color: #191919;--scrollbar-thumb: #343a40;--scrollbar-thumb-hover: #495057;--color-selection: #3530c4;--color-primary: #a8a5ff;--color-primary-darker: #b2aeff;--color-primary-darkest: #beb9ff;--color-primary-light: #4f4d6f;--color-text-warning: var(--color-gray-80);--color-danger: #ffa8a5;--color-promo: #d297ff}:root{--zIndex-canvas: 1;--zIndex-wysiwyg: 2;--zIndex-layerUI: 3}.excalidraw{--ui-font: Assistant, system-ui, BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;font-family:var(--ui-font);position:relative;overflow:hidden;color:var(--text-primary-color);display:flex;top:0;bottom:0;left:0;right:0;height:100%;width:100%;-webkit-user-select:none;user-select:none}.excalidraw button{cursor:pointer}.excalidraw:focus{outline:none}.excalidraw a{font-weight:500;text-decoration:none;color:var(--link-color)}.excalidraw a:hover{text-decoration:underline}.excalidraw canvas{touch-action:none;image-rendering:pixelated;image-rendering:-moz-crisp-edges;z-index:var(--zIndex-canvas)}.excalidraw__canvas{position:absolute}.excalidraw.theme--dark canvas{-webkit-filter:var(--theme-filter);filter:var(--theme-filter)}.excalidraw .FixedSideContainer{padding-top:var(--sat, 0);padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0)}.excalidraw .panelRow{display:flex;justify-content:space-between}.excalidraw .panelColumn{display:flex;flex-direction:column;row-gap:.75rem}.excalidraw .panelColumn h3,.excalidraw .panelColumn legend,.excalidraw .panelColumn .control-label{margin:0;margin-bottom:.25rem;font-size:.75rem;color:var(--text-primary-color);font-weight:normal;display:block}.excalidraw .panelColumn .control-label input{display:block;width:100%}.excalidraw .panelColumn legend{padding:0}.excalidraw .panelColumn .iconSelectList{flex-wrap:wrap;position:relative}.excalidraw .panelColumn .buttonList{flex-wrap:wrap;display:flex;-webkit-column-gap:.5rem;column-gap:.5rem;row-gap:.5rem}.excalidraw .panelColumn .buttonList label{font-size:.75rem}.excalidraw .panelColumn .buttonList input[type=radio],.excalidraw .panelColumn .buttonList input[type=button]{opacity:0;position:absolute;pointer-events:none}.excalidraw .panelColumn .buttonList .iconRow{margin-top:8px}.excalidraw .panelColumn fieldset{margin:0;padding:0;border:none}.excalidraw .divider{width:1px;background-color:#e9ecef;margin:1px}.excalidraw .welcome-screen-menu-item:focus-visible,.excalidraw .dropdown-menu-item:focus-visible,.excalidraw button:focus-visible,.excalidraw .buttonList label:focus-within,.excalidraw input:focus-visible{outline:rgba(0,0,0,0);box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .buttonList .ToolIcon__icon{all:unset !important;display:flex !important}.excalidraw .buttonList button{background-color:rgba(0,0,0,0)}.excalidraw .buttonList label,.excalidraw .buttonList button,.excalidraw .buttonList .zIndexButton{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));padding:0}.excalidraw .buttonList label svg,.excalidraw .buttonList button svg,.excalidraw .buttonList .zIndexButton svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .buttonList label:hover,.excalidraw .buttonList button:hover,.excalidraw .buttonList .zIndexButton:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .buttonList label:active,.excalidraw .buttonList button:active,.excalidraw .buttonList .zIndexButton:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .buttonList label.active,.excalidraw .buttonList button.active,.excalidraw .buttonList .zIndexButton.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .buttonList label.active:hover,.excalidraw .buttonList button.active:hover,.excalidraw .buttonList .zIndexButton.active:hover{background-color:var(--color-primary-light)}.excalidraw .buttonList label.active svg,.excalidraw .buttonList button.active svg,.excalidraw .buttonList .zIndexButton.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .buttonList label svg,.excalidraw .buttonList button svg,.excalidraw .buttonList .zIndexButton svg{width:var(--default-icon-size);height:var(--default-icon-size)}.excalidraw .App-top-bar{z-index:var(--zIndex-layerUI);display:flex;flex-direction:column;align-items:center}.excalidraw .App-bottom-bar{position:absolute;top:0;bottom:0;left:0;right:0;--bar-padding: calc(4 * var(--space-factor));padding-top:max(var(--bar-padding), var(--sat,0));padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0);z-index:4;display:flex;align-items:flex-end;pointer-events:none}.excalidraw .App-bottom-bar>.Island{width:100%;max-width:100%;min-width:100%;box-sizing:border-box;max-height:100%;display:flex;flex-direction:column;pointer-events:initial}.excalidraw .App-bottom-bar>.Island .panelColumn{padding:8px 8px 0 8px}.excalidraw .App-toolbar{width:100%}.excalidraw .App-toolbar .eraser.ToolIcon:hover{--icon-fill-color: #fff;--keybinding-color: #fff}.excalidraw .App-toolbar .eraser.active{background-color:var(--color-primary)}.excalidraw .App-toolbar-content{display:flex;align-items:center;justify-content:space-between;padding:8px}.excalidraw .App-mobile-menu{width:100%;overflow-x:visible;overflow-y:auto;box-sizing:border-box;margin-bottom:var(--bar-padding)}.excalidraw .App-menu{display:grid;color:var(--icon-fill-color)}.excalidraw .shapes-section{display:flex;justify-content:center;pointer-events:none !important}.excalidraw .shapes-section>*{pointer-events:all}.excalidraw .App-menu_top{grid-template-columns:1fr 2fr 1fr;grid-gap:2rem;align-items:flex-start;cursor:default;pointer-events:none !important}@media(min-width: 1536px){.excalidraw .App-menu_top{grid-template-columns:1fr 1fr 1fr;grid-gap:3rem}}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_top>*{pointer-events:all}.excalidraw .App-menu_top>*:first-child{justify-self:flex-start}.excalidraw .App-menu_top>*:last-child{justify-self:flex-end}.excalidraw .App-menu_bottom{position:absolute;bottom:1rem;display:flex;justify-content:space-between;align-items:flex-start;cursor:default;pointer-events:none !important;box-sizing:border-box;padding:0 1rem}.excalidraw .App-menu_bottom--transition-left section{width:185px}.excalidraw .App-menu_bottom section{display:flex}.excalidraw .App-menu_bottom>*:first-child{justify-self:flex-start}.excalidraw .App-menu_bottom>*:last-child{justify-self:flex-end}.excalidraw .App-menu_left{grid-template-rows:1fr auto 1fr;height:100%}.excalidraw .App-menu_right{grid-template-rows:1fr;height:100%}.excalidraw .App-menu__left{overflow-y:auto;padding:.75rem;width:202px;box-sizing:border-box;position:absolute}.excalidraw .dropdown-select{height:1.5rem;padding:0;-webkit-padding-start:.5rem;padding-inline-start:.5rem;-webkit-padding-end:1.5rem;padding-inline-end:1.5rem;color:var(--icon-fill-color);background-color:var(--button-gray-1);border-radius:var(--space-factor);border:1px solid var(--button-gray-2);font-size:.8rem;outline:none;-webkit-appearance:none;appearance:none;background-image:var(--dropdown-icon);background-repeat:no-repeat;background-position:right .7rem top 50%,0 0;background-size:.65em auto,100%}:root[dir=rtl] .excalidraw .dropdown-select{background-position:left .7rem top 50%,0 0}.excalidraw .dropdown-select:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .dropdown-select:hover{background-color:var(--button-gray-2)}.excalidraw .dropdown-select:active{background-color:var(--button-gray-2)}.excalidraw .dropdown-select__language{height:2rem;background-color:var(--island-bg-color);border-color:var(--default-border-color) !important;cursor:pointer}.excalidraw .dropdown-select__language:hover{background-color:var(--island-bg-color)}.excalidraw .disable-zen-mode{border-radius:var(--border-radius-lg);background-color:var(--color-gray-20);border:1px solid var(--color-gray-30);padding:10px 20px}.excalidraw .disable-zen-mode:hover{background-color:var(--color-gray-30)}.excalidraw .scroll-back-to-content{border-radius:var(--border-radius-lg);background-color:var(--island-bg-color);color:var(--icon-fill-color);border:1px solid var(--default-border-color);padding:10px 20px;position:absolute;left:50%;bottom:30px;-webkit-transform:translateX(-50%);transform:translateX(-50%);pointer-events:all}.excalidraw .scroll-back-to-content:hover{background-color:var(--button-hover-bg)}.excalidraw .scroll-back-to-content:active{border:1px solid var(--color-primary-darkest)}.excalidraw .help-icon{display:flex;justify-content:center;align-items:center;padding:.625rem;width:var(--button-width, var(--default-button-size));height:var(--button-height, var(--default-button-size));box-sizing:border-box;border-width:1px;border-style:solid;border-color:var(--button-border, var(--default-border-color));border-radius:var(--border-radius-lg);cursor:pointer;background-color:var(--button-bg, var(--island-bg-color));color:var(--button-color, var(--text-primary-color));background-color:var(--island-bg-color);width:var(--lg-button-size);height:var(--lg-button-size)}.excalidraw .help-icon svg{width:var(--button-width, var(--lg-icon-size));height:var(--button-height, var(--lg-icon-size))}.excalidraw .help-icon:hover{background-color:var(--button-hover-bg, var(--island-bg-color));border-color:var(--button-hover-border, var(--default-border-color))}.excalidraw .help-icon:active{background-color:var(--button-active-bg, var(--island-bg-color));border-color:var(--button-active-border, var(--color-primary-darkest))}.excalidraw .help-icon.active{background-color:var(--color-primary-light);border-color:var(--color-primary-light)}.excalidraw .help-icon.active:hover{background-color:var(--color-primary-light)}.excalidraw .help-icon.active svg{color:var(--button-color, var(--color-primary-darker))}.excalidraw .help-icon svg{width:var(--lg-icon-size);height:var(--lg-icon-size)}.excalidraw .reset-zoom-button{font-family:var(--ui-font)}.excalidraw .finalize-button{display:grid;grid-auto-flow:column;gap:.4em;margin-top:auto;margin-bottom:auto;-webkit-margin-start:.6em;margin-inline-start:.6em}.excalidraw .undo-redo-buttons,.excalidraw .eraser-buttons{display:grid;grid-auto-flow:column;margin-top:auto;margin-bottom:auto;-webkit-margin-start:.6em;margin-inline-start:.6em}.excalidraw--mobile.excalidraw aside{display:none}.excalidraw--mobile.excalidraw .scroll-back-to-content{bottom:calc(80px + var(--sab, 0));z-index:-1}:root[dir=rtl] .excalidraw .rtl-mirror{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.excalidraw .zen-mode-visibility{visibility:visible;opacity:1;height:auto;width:auto;transition:opacity .5s}.excalidraw .zen-mode-visibility.zen-mode-visibility--hidden{visibility:hidden;opacity:0;height:0;width:0;transition:opacity .5s}.excalidraw .disable-pointerEvents{pointer-events:none !important}.excalidraw.excalidraw--view-mode .App-menu{display:flex;justify-content:space-between}.excalidraw input[type=text],.excalidraw textarea:not(.excalidraw-wysiwyg){color:var(--text-primary-color);border:1.5px solid var(--input-border-color);padding:.75rem;white-space:nowrap;border-radius:var(--space-factor);background-color:var(--input-bg-color)}.excalidraw input[type=text]:not(:focus):hover,.excalidraw textarea:not(.excalidraw-wysiwyg):not(:focus):hover{background-color:var(--input-hover-bg-color)}.excalidraw input[type=text]:focus,.excalidraw textarea:not(.excalidraw-wysiwyg):focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}@media print{.excalidraw .App-bottom-bar,.excalidraw .FixedSideContainer,.excalidraw .layer-ui__wrapper{display:none}}.excalidraw ::-webkit-scrollbar{width:3px;height:3px}.excalidraw ::-webkit-scrollbar-thumb{background:var(--scrollbar-thumb);border-radius:10px}.excalidraw ::-webkit-scrollbar-thumb:hover{background:var(--scrollbar-thumb-hover)}.excalidraw ::-webkit-scrollbar-thumb:active{background:var(--scrollbar-thumb)}.excalidraw .mobile-misc-tools-container{position:absolute;top:calc(5rem - var(--editor-container-padding));right:calc(var(--editor-container-padding)*-1);display:flex;flex-direction:column;border:1px solid var(--sidebar-border-color);border-top-left-radius:var(--border-radius-lg);border-bottom-left-radius:var(--border-radius-lg);border-right:0;overflow:hidden;background-color:var(--island-bg-color)}.excalidraw .mobile-misc-tools-container .ToolIcon__icon{border-radius:0}.excalidraw .mobile-misc-tools-container .library-button{border:0}.excalidraw .App-toolbar--mobile{overflow-x:auto;max-width:90vw}.excalidraw .App-toolbar--mobile .ToolIcon__keybinding{display:none}.excalidraw .UserList-Wrapper{margin:0;padding:0;border:none;text-align:left}.excalidraw .UserList-Wrapper legend{display:block;font-size:.75rem;font-weight:400;margin:0 0 .25rem;padding:0}.ErrorSplash.excalidraw{min-height:100vh;padding:20px 0;overflow:auto;display:flex;align-items:center;justify-content:center;-webkit-user-select:text;user-select:text}.ErrorSplash.excalidraw .ErrorSplash-messageContainer{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:40px;background-color:#ffe3e3;border:3px solid #c92a2a}.ErrorSplash.excalidraw .ErrorSplash-paragraph{margin:15px 0;max-width:600px}.ErrorSplash.excalidraw .ErrorSplash-paragraph.align-center{text-align:center}.ErrorSplash.excalidraw .bigger,.ErrorSplash.excalidraw .bigger button{font-size:1.1em}.ErrorSplash.excalidraw .smaller,.ErrorSplash.excalidraw .smaller button{font-size:.9em}.ErrorSplash.excalidraw .ErrorSplash-details{display:flex;flex-direction:column;align-items:flex-start}.ErrorSplash.excalidraw .ErrorSplash-details textarea{width:100%;margin:10px 0;font-family:\"Cascadia\";font-size:.8em}',\"\"]),t.Z=d},6464:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\"\",\"\"]),a.locals={themeFilter:\"invert(93%) hue-rotate(180deg)\",rightSidebarWidth:\"302px\"},t.Z=a},5260:function(e,t,n){\"use strict\";var r=n(8081),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,\":export{themeFilter:invert(93%) hue-rotate(180deg);rightSidebarWidth:302px}.excalidraw-hyperlinkContainer{display:flex;align-items:center;justify-content:space-between;position:absolute;box-shadow:0px 2px 4px 0 rgba(0,0,0,.3);z-index:100;background:var(--island-bg-color);border-radius:var(--border-radius-md);box-sizing:border-box;min-height:42px}.excalidraw-hyperlinkContainer-input,.excalidraw-hyperlinkContainer button{z-index:100}.excalidraw-hyperlinkContainer-input,.excalidraw-hyperlinkContainer-link{height:24px;padding:0 8px;line-height:24px;font-size:.9rem;font-weight:500;font-family:var(--ui-font)}.excalidraw-hyperlinkContainer-input{width:18rem;border:none;background-color:rgba(0,0,0,0);color:var(--text-primary-color);outline:none;border:none;box-shadow:none !important}.excalidraw-hyperlinkContainer-link{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:15rem}.excalidraw-hyperlinkContainer button{color:#228be6;background-color:rgba(0,0,0,0) !important;font-weight:500}.excalidraw-hyperlinkContainer button.excalidraw-hyperlinkContainer--remove{color:#c92a2a}.excalidraw-hyperlinkContainer .d-none{display:none}.excalidraw-hyperlinkContainer--remove .ToolIcon__icon svg{color:#fa5252}.excalidraw-hyperlinkContainer .ToolIcon__icon{width:2rem;height:2rem}.excalidraw-hyperlinkContainer__buttons{flex:0 0 auto}\",\"\"]),t.Z=a},3645:function(e){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=\"\",r=void 0!==t[5];return t[4]&&(n+=\"@supports (\".concat(t[4],\") {\")),t[2]&&(n+=\"@media \".concat(t[2],\" {\")),r&&(n+=\"@layer\".concat(t[5].length>0?\" \".concat(t[5]):\"\",\" {\")),n+=e(t),r&&(n+=\"}\"),t[2]&&(n+=\"}\"),t[4]&&(n+=\"}\"),n})).join(\"\")},t.i=function(e,n,r,o,i){\"string\"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]=\"@layer\".concat(u[5].length>0?\" \".concat(u[5]):\"\",\" {\").concat(u[1],\"}\")),u[5]=i),n&&(u[2]?(u[1]=\"@media \".concat(u[2],\" {\").concat(u[1],\"}\"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]=\"@supports (\".concat(u[4],\") {\").concat(u[1],\"}\"),u[4]=o):u[4]=\"\".concat(o)),t.push(u))}},t}},1667:function(e){\"use strict\";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),\/^['\"].*['\"]$\/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),\/[\"'() \\t\\n]|(%20)\/.test(e)||t.needQuotes?'\"'.concat(e.replace(\/\"\/g,'\\\\\"').replace(\/\\n\/g,\"\\\\n\"),'\"'):e):e}},8081:function(e){\"use strict\";e.exports=function(e){return e[1]}},202:function(e,t,n){\"use strict\";n.d(t,{JQ:function(){return w},vD:function(){return y},y7:function(){return b}});var r=n(1930),o=n(7169),i=n(2335),a=n(1047),l=n(1935),s=n(5710),c=n(6906),u=n(1974),d=n(75),f=n(6340),p=n(7901);function h(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return m(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var b=(0,p.z)({name:\"unbindText\",contextItemLabel:\"labels.unbindText\",trackEvent:{category:\"element\"},predicate:function(e,t){return(0,d.eD)(e,t).some((function(e){return(0,u.Xo)(e)}))},perform:function(e,t){return(0,d.eD)((0,a.Lm)(e),t).forEach((function(e){var t=(0,s.WJ)(e);if(t){var n,r=(0,s.X1)(t.originalText,(0,f.mO)(t),t.lineHeight),o=r.width,i=r.height,a=r.baseline,u=(0,c.eR)(e.id);(0,c.kT)(e.id);var d=(0,s.FE)(e,t),p=d.x,h=d.y;(0,l.DR)(t,{containerId:null,width:o,height:i,baseline:a,text:t.originalText,x:p,y:h}),(0,l.DR)(e,{boundElements:null===(n=e.boundElements)||void 0===n?void 0:n.filter((function(e){return e.id!==t.id})),height:u||e.height})}})),{elements:e,appState:t,commitToHistory:!0}}}),y=(0,p.z)({name:\"bindText\",contextItemLabel:\"labels.bindText\",trackEvent:{category:\"element\"},predicate:function(e,t){var n=(0,d.eD)(e,t);if(2===n.length){var r,o=(0,a.iB)(n[0])||(0,a.iB)(n[1]);if((0,u.mG)(n[0])?r=n[0]:(0,u.mG)(n[1])&&(r=n[1]),o&&r&&null===(0,s.WJ)(r))return!0}return!1},perform:function(e,t){var n,r,f=(0,d.eD)((0,a.Lm)(e),t);(0,a.iB)(f[0])&&(0,u.mG)(f[1])?(n=f[0],r=f[1]):(n=f[1],r=f[0]),(0,l.DR)(n,{containerId:r.id,verticalAlign:i.oX.MIDDLE,textAlign:i.I8.CENTER}),(0,l.DR)(r,{boundElements:(r.boundElements||[]).concat({type:\"text\",id:n.id})});var p=r.height;return(0,s.oN)(n,r),(0,c.h_)(r.id,p),{elements:x(e,r,n),appState:v(v({},t),{},{selectedElementIds:(0,o.Z)({},r.id,!0)}),commitToHistory:!0}}}),x=function(e,t,n){var r=e.slice(),o=r.findIndex((function(e){return e.id===n.id}));r.splice(o,1);var i=r.findIndex((function(e){return e.id===t.id}));return r.splice(i+1,0,n),r},w=(0,p.z)({name:\"wrapTextInContainer\",contextItemLabel:\"labels.createContainerFromText\",trackEvent:{category:\"element\"},predicate:function(e,t){var n=(0,d.eD)(e,t),r=n.every((function(e){return(0,a.iB)(e)}));return n.length>0&&r},perform:function(e,t){var n,o=(0,d.eD)((0,a.Lm)(e),t),c=e.slice(),f={},p=h(o);try{var m=function(){var e=n.value;if((0,a.iB)(e)){var o,d=(0,a.Up)({type:\"rectangle\",backgroundColor:t.currentItemBackgroundColor,boundElements:[].concat((0,r.Z)(e.boundElements||[]),[{id:e.id,type:\"text\"}]),angle:e.angle,fillStyle:t.currentItemFillStyle,strokeColor:t.currentItemStrokeColor,roughness:t.currentItemRoughness,strokeWidth:t.currentItemStrokeWidth,strokeStyle:t.currentItemStrokeStyle,roundness:\"round\"===t.currentItemRoundness?{type:(0,u.QI)(\"rectangle\")?i.a6.ADAPTIVE_RADIUS:i.a6.PROPORTIONAL_RADIUS}:null,opacity:100,locked:!1,x:e.x-i.gK,y:e.y-i.gK,width:(0,s.NS)(e.width,\"rectangle\"),height:(0,s.NS)(e.height,\"rectangle\"),groupIds:e.groupIds});if(null!==(o=e.boundElements)&&void 0!==o&&o.length){var p=e.boundElements.filter((function(e){return\"arrow\"===e.type})).map((function(e){return e.id}));c.filter((function(e){return p.includes(e.id)})).forEach((function(t){var n,r,o=t.startBinding,i=t.endBinding;(null===(n=o)||void 0===n?void 0:n.elementId)===e.id&&(o=v(v({},o),{},{elementId:d.id})),(null===(r=i)||void 0===r?void 0:r.elementId)===e.id&&(i=v(v({},i),{},{elementId:d.id})),(o||i)&&(0,l.DR)(t,{startBinding:o,endBinding:i},!1)}))}(0,l.DR)(e,{containerId:d.id,verticalAlign:i.oX.MIDDLE,boundElements:null,textAlign:i.I8.CENTER},!1),(0,s.oN)(e,d),c=function(e,t,n){var r=e.slice(),o=r.findIndex((function(e){return e.id===t.id}));r.splice(o,1);var i=r.findIndex((function(e){return e.id===n.id}));return r.splice(i,0,t),r}([].concat((0,r.Z)(c),[d]),d,e),f[d.id]=!0}};for(p.s();!(n=p.n()).done;)m()}catch(e){p.e(e)}finally{p.f()}return{elements:c,appState:v(v({},t),{},{selectedElementIds:f}),commitToHistory:!0}}})},2416:function(e,t,n){\"use strict\";n.d(t,{CZ:function(){return j},Lo:function(){return S},Zp:function(){return C},eF:function(){return I},md:function(){return O},mo:function(){return E}});var r=n(2577),o=n(7169),i=n(4499),a=n(3646),l=n(1319),s=n(2335),c=n(1047),u=n(8211),d=n(6066),f=n(75),p=n(2264),h=n(746),m=n(6340),g=n(7901),v=n(1894),b=n(1935),y=n(8897),x=n(4512);function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,g.z)({name:\"changeViewBackgroundColor\",trackEvent:!1,predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.changeViewBackgroundColor&&!t.viewModeEnabled},perform:function(e,t,n){return{appState:k(k({},t),n),commitToHistory:!!n.viewBackgroundColor}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,x.jsx)(\"div\",{style:{position:\"relative\"},children:(0,x.jsx)(i.z,{label:(0,u.t)(\"labels.canvasBackground\"),type:\"canvasBackground\",color:n.viewBackgroundColor,onChange:function(e){return r({viewBackgroundColor:e})},isActive:\"canvasColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"canvasColorPicker\":null})},\"data-testid\":\"canvas-background-picker\",elements:t,appState:n})})}});var E=(0,g.z)({name:\"clearCanvas\",trackEvent:{category:\"canvas\"},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.clearCanvas&&!t.viewModeEnabled},perform:function(e,t,n,r){return r.imageCache.clear(),{elements:e.map((function(e){return(0,b.BE)(e,{isDeleted:!0})})),appState:k(k({},(0,y.im)()),{},{files:{},theme:t.theme,penMode:t.penMode,penDetected:t.penDetected,exportBackground:t.exportBackground,exportEmbedScene:t.exportEmbedScene,gridSize:t.gridSize,showStats:t.showStats,pasteDialog:t.pasteDialog,activeTool:\"image\"===t.activeTool.type?k(k({},t.activeTool),{},{type:\"selection\"}):t.activeTool}),commitToHistory:!0}}}),S=(0,g.z)({name:\"zoomIn\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){return{appState:k(k({},t),(0,h.E)({viewportX:t.width\/2+t.offsetLeft,viewportY:t.height\/2+t.offsetTop,nextZoom:(0,f.j)(t.zoom.value+s.V4)},t)),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,x.jsx)(l.V,{type:\"button\",className:\"zoom-in-button zoom-button\",icon:a.Sd,title:\"\".concat((0,u.t)(\"buttons.zoomIn\"),\" \u2014 \").concat((0,m.uY)(\"CtrlOrCmd++\")),\"aria-label\":(0,u.t)(\"buttons.zoomIn\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===d.aU.EQUAL||e.code===d.aU.NUM_ADD)&&(e[d.tW.CTRL_OR_CMD]||e.shiftKey)}}),j=(0,g.z)({name:\"zoomOut\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){return{appState:k(k({},t),(0,h.E)({viewportX:t.width\/2+t.offsetLeft,viewportY:t.height\/2+t.offsetTop,nextZoom:(0,f.j)(t.zoom.value-s.V4)},t)),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return(0,x.jsx)(l.V,{type:\"button\",className:\"zoom-out-button zoom-button\",icon:a.xL,title:\"\".concat((0,u.t)(\"buttons.zoomOut\"),\" \u2014 \").concat((0,m.uY)(\"CtrlOrCmd+-\")),\"aria-label\":(0,u.t)(\"buttons.zoomOut\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===d.aU.MINUS||e.code===d.aU.NUM_SUBTRACT)&&(e[d.tW.CTRL_OR_CMD]||e.shiftKey)}}),_=((0,g.z)({name:\"resetZoom\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){return{appState:k(k({},t),(0,h.E)({viewportX:t.width\/2+t.offsetLeft,viewportY:t.height\/2+t.offsetTop,nextZoom:(0,f.j)(1)},t)),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData,n=e.appState;return(0,x.jsx)(v.u,{label:(0,u.t)(\"buttons.resetZoom\"),style:{height:\"100%\"},children:(0,x.jsxs)(l.V,{type:\"button\",className:\"reset-zoom-button zoom-button\",title:(0,u.t)(\"buttons.resetZoom\"),\"aria-label\":(0,u.t)(\"buttons.resetZoom\"),onClick:function(){t(null)},children:[(100*n.zoom.value).toFixed(0),\"%\"]})})},keyTest:function(e){return(e.code===d.aU.ZERO||e.code===d.aU.NUM_ZERO)&&(e[d.tW.CTRL_OR_CMD]||e.shiftKey)}}),function(e,t){var n=(0,r.Z)(e,4),o=n[0],i=n[1],a=n[2],l=n[3],c=a-o,u=t.width\/c,d=l-i,f=t.height\/d,p=Math.min(u,f),h=Math.floor(p\/s.V4)*s.V4;return Math.min(Math.max(h,s.Zj),1)}),O=function(e,t,n){var o=(0,c.Lm)(e),i=(0,f.eD)(o,t),a=n&&i.length>0?(0,c.KP)(i):(0,c.KP)(o),l={value:_(a,{width:t.width,height:t.height})},s=(0,r.Z)(a,4),u=s[0],d=s[1],h=(u+s[2])\/2,m=(d+s[3])\/2;return{appState:k(k(k({},t),(0,p.s)({scenePoint:{x:h,y:m},viewportDimensions:{width:t.width,height:t.height},zoom:l})),{},{zoom:l}),commitToHistory:!1}},C=((0,g.z)({name:\"zoomToSelection\",trackEvent:{category:\"canvas\"},perform:function(e,t){return O(e,t,!0)},keyTest:function(e){return e.code===d.aU.TWO&&e.shiftKey&&!e.altKey&&!e[d.tW.CTRL_OR_CMD]}}),(0,g.z)({name:\"zoomToFit\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t){return O(e,t,!1)},keyTest:function(e){return e.code===d.aU.ONE&&e.shiftKey&&!e.altKey&&!e[d.tW.CTRL_OR_CMD]}}),(0,g.z)({name:\"toggleTheme\",viewMode:!0,trackEvent:{category:\"canvas\"},perform:function(e,t,n){return{appState:k(k({},t),{},{theme:n||(t.theme===s.C6.LIGHT?s.C6.DARK:s.C6.LIGHT)}),commitToHistory:!1}},keyTest:function(e){return e.altKey&&e.shiftKey&&e.code===d.aU.D},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.toggleTheme}})),I=((0,g.z)({name:\"toggleEraserTool\",trackEvent:{category:\"toolbar\"},perform:function(e,t){var n;return n=(0,y.EN)(t)?(0,m.Om)(t,k(k({},t.activeTool.lastActiveTool||{type:\"selection\"}),{},{lastActiveToolBeforeEraser:null})):(0,m.Om)(t,{type:\"eraser\",lastActiveToolBeforeEraser:t.activeTool}),{appState:k(k({},t),{},{selectedElementIds:{},selectedGroupIds:{},activeTool:n}),commitToHistory:!0}},keyTest:function(e){return e.key===d.tW.E}}),(0,g.z)({name:\"toggleHandTool\",trackEvent:{category:\"toolbar\"},perform:function(e,t,n,r){var o;return(0,y.l$)(t)?o=(0,m.Om)(t,k(k({},t.activeTool.lastActiveTool||{type:\"selection\"}),{},{lastActiveToolBeforeEraser:null})):(o=(0,m.Om)(t,{type:\"hand\",lastActiveToolBeforeEraser:t.activeTool}),(0,m.KJ)(r.canvas,s.oc.GRAB)),{appState:k(k({},t),{},{selectedElementIds:{},selectedGroupIds:{},activeTool:o}),commitToHistory:!0}},keyTest:function(e){return e.key===d.tW.H}}))},4688:function(e,t,n){\"use strict\";n.d(t,{FA:function(){return k},ZM:function(){return w},jK:function(){return E},uN:function(){return y},yQ:function(){return x},zp:function(){return S}});var r=n(7169),o=n(8950),i=n(2975),a=n.n(i),l=n(6066),s=n(7901),c=n(6665),u=n(533),d=n(1868),f=n(9485),p=n(1047),h=n(8211);function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var v,b,y=(0,s.z)({name:\"copy\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){var o=(0,d.eD)(e,t,!0);return(0,c.vQ)(o,t,r.files),{commitToHistory:!1}},predicate:function(e,t,n,r){return r.device.isMobile&&!!navigator.clipboard},contextItemLabel:\"labels.copy\",keyTest:void 0}),x=(0,s.z)({name:\"paste\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){return r.pasteFromClipboard(null),{commitToHistory:!1}},predicate:function(e,t,n,r){return r.device.isMobile&&!!navigator.clipboard},contextItemLabel:\"labels.paste\",keyTest:void 0}),w=(0,s.z)({name:\"cut\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){return y.perform(e,t,n,r),u.X.perform(e,t)},predicate:function(e,t,n,r){return r.device.isMobile&&!!navigator.clipboard},contextItemLabel:\"labels.cut\",keyTest:function(e){return e[l.tW.CTRL_OR_CMD]&&e.key===l.tW.X}}),k=(0,s.z)({name:\"copyAsSvg\",trackEvent:{category:\"element\"},perform:(v=(0,o.Z)(a().mark((function e(t,n,r,o){var i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return i=(0,d.eD)((0,p.Lm)(t),n,!0),e.prev=3,e.next=6,(0,f.p1)(\"clipboard-svg\",i.length?i:(0,p.Lm)(t),n,o.files,n);case 6:return e.abrupt(\"return\",{commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:g(g({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])}))),function(e,t,n,r){return v.apply(this,arguments)}),predicate:function(e){return c.wx&&e.length>0},contextItemLabel:\"labels.copyAsSvg\"}),E=(0,s.z)({name:\"copyAsPng\",trackEvent:{category:\"element\"},perform:(b=(0,o.Z)(a().mark((function e(t,n,r,o){var i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o.canvas){e.next=2;break}return e.abrupt(\"return\",{commitToHistory:!1});case 2:return i=(0,d.eD)((0,p.Lm)(t),n,!0),e.prev=3,e.next=6,(0,f.p1)(\"clipboard\",i.length?i:(0,p.Lm)(t),n,o.files,n);case 6:return e.abrupt(\"return\",{appState:g(g({},n),{},{toast:{message:(0,h.t)(\"toast.copyToClipboardAsPng\",{exportSelection:i.length?(0,h.t)(\"toast.selection\"):(0,h.t)(\"toast.canvas\"),exportColorScheme:n.exportWithDarkMode?(0,h.t)(\"buttons.darkMode\"):(0,h.t)(\"buttons.lightMode\")})}}),commitToHistory:!1});case 9:return e.prev=9,e.t0=e.catch(3),console.error(e.t0),e.abrupt(\"return\",{appState:g(g({},n),{},{errorMessage:e.t0.message}),commitToHistory:!1});case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])}))),function(e,t,n,r){return b.apply(this,arguments)}),predicate:function(e){return c.vt&&e.length>0},contextItemLabel:\"labels.copyAsPng\",keyTest:function(e){return e.code===l.aU.C&&e.altKey&&e.shiftKey}}),S=(0,s.z)({name:\"copyText\",trackEvent:{category:\"element\"},perform:function(e,t){var n=(0,d.eD)((0,p.Lm)(e),t,!0).reduce((function(e,t){return(0,p.iB)(t)&&e.push(t.text),e}),[]).join(\"\\n\\n\");return(0,c.dd)(n),{commitToHistory:!1}},predicate:function(e,t){return c.wx&&(0,d.eD)(e,t,!0).some(p.iB)},contextItemLabel:\"labels.copyText\"})},533:function(e,t,n){\"use strict\";n.d(t,{X:function(){return w}});var r=n(7169),o=n(75),i=n(6066),a=n(1319),l=n(8211),s=n(7901),c=n(1047),u=n(1935),d=n(242),f=n(6938),p=n(8290),h=n(1974),m=n(6340),g=n(3646),v=n(4512);function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var x=function(e,t){if(e.editingGroupId){var n=(0,d.Fb)((0,c.Lm)(t),e.editingGroupId);if(n.length)return y(y({},e),{},{selectedElementIds:(0,r.Z)({},n[0].id,!0)})}return e},w=(0,s.z)({name:\"deleteSelectedElements\",trackEvent:{category:\"element\",action:\"delete\"},perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.elementId,i=n.selectedPointsIndices,a=n.startBindingElement,l=n.endBindingElement,s=f._.getElement(r);if(!s)return!1;if(null==i)return!1;if(s.points.length<2){var d=e.map((function(e){return e.id===s.id?(0,u.BE)(e,{isDeleted:!0}):e}));return{elements:d,appState:y(y({},x(t,d)),{},{editingLinearElement:null}),commitToHistory:!1}}var g={startBindingElement:null!=i&&i.includes(0)?null:a,endBindingElement:null!=i&&i.includes(s.points.length-1)?null:l};return f._.deletePoints(s,i),{elements:e,appState:y(y({},t),{},{editingLinearElement:y(y(y({},t.editingLinearElement),g),{},{selectedPointsIndices:(null==i?void 0:i[0])>0?[i[0]-1]:[0]})}),commitToHistory:!0}}var v=function(e,t){return{elements:e.map((function(e){return t.selectedElementIds[e.id]||(0,h.Xh)(e)&&t.selectedElementIds[e.containerId]?(0,u.BE)(e,{isDeleted:!0}):e})),appState:y(y({},t),{},{selectedElementIds:{}})}}(e,t),b=v.elements,w=v.appState;return(0,p.$q)(b,e.filter((function(e){var n=e.id;return t.selectedElementIds[n]}))),{elements:b,appState:y(y({},w=x(w,b)),{},{activeTool:(0,m.Om)(t,{type:\"selection\"}),multiElement:null}),commitToHistory:(0,o.N)((0,c.Lm)(e),t)}},contextItemLabel:\"labels.delete\",keyTest:function(e,t,n){return(e.key===i.tW.BACKSPACE||e.key===i.tW.DELETE)&&!e[i.tW.CTRL_OR_CMD]},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,v.jsx)(a.V,{type:\"button\",icon:g.XH,title:(0,l.t)(\"labels.delete\"),\"aria-label\":(0,l.t)(\"labels.delete\"),onClick:function(){return r(null)},visible:(0,o.N)((0,c.Lm)(t),n)})}})},8671:function(e,t,n){\"use strict\";n.d(t,{_d:function(){return te},mM:function(){return ee},ns:function(){return Q}});var r=n(8950),o=n(2577),i=n(7169),a=n(2975),l=n.n(a),s=n(3646),c=n(487),u=n.n(c),d=n(631),f=n.n(d),p=n(2052),h=n.n(p),m=n(4010),g=n.n(m),v=n(1469),b=n.n(v),y=n(9329),x=n.n(y),w=n(6759),k={};k.styleTagTransform=x(),k.setAttributes=g(),k.insert=h().bind(null,\"head\"),k.domAPI=f(),k.insertStyleElement=b();u()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals;var E=n(9787),S=n(6340),j=n(532),_={};_.styleTagTransform=x(),_.setAttributes=g(),_.insert=h().bind(null,\"head\"),_.domAPI=f(),_.insertStyleElement=b();u()(j.Z,_),j.Z&&j.Z.locals&&j.Z.locals;var O=n(2134),C=n(4512),I=function(e){var t=(0,O.J0)().id,n=(0,E.useState)(e.value),r=(0,o.Z)(n,2),i=r[0],a=r[1];return(0,C.jsxs)(\"div\",{className:\"ProjectName\",children:[(0,C.jsx)(\"label\",{className:\"ProjectName-label\",htmlFor:\"filename\",children:\"\".concat(e.label).concat(e.isNameEditable?\"\":\":\")}),e.isNameEditable?(0,C.jsx)(\"input\",{type:\"text\",className:\"TextInput\",onBlur:function(t){(0,S.qz)(t.target);var n=t.target.value;n!==e.value&&e.onChange(n)},onKeyDown:function(e){if(\"Enter\"===e.key){if(e.preventDefault(),e.nativeEvent.isComposing||229===e.keyCode)return;e.currentTarget.blur()}},id:\"\".concat(t,\"-filename\"),value:i,onChange:function(e){return a(e.target.value)}}):(0,C.jsx)(\"span\",{className:\"TextInput TextInput--readonly\",id:\"\".concat(t,\"-filename\"),children:e.value})]})},M=n(1319),T=n(1894),P=(n(5422),n(8211)),D=n(2335),A=function(e){var t=e.title||(\"dark\"===e.value?(0,P.t)(\"buttons.lightMode\"):(0,P.t)(\"buttons.darkMode\"));return(0,C.jsx)(M.V,{type:\"icon\",icon:e.value===D.C6.LIGHT?L.MOON:L.SUN,title:t,\"aria-label\":t,onClick:function(){return e.onChange(e.value===D.C6.DARK?D.C6.LIGHT:D.C6.DARK)},\"data-testid\":\"toggle-dark-mode\"})},L={SUN:(0,C.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,C.jsx)(\"path\",{fill:\"currentColor\",d:\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"})}),MOON:(0,C.jsx)(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\",children:(0,C.jsx)(\"path\",{fill:\"currentColor\",d:\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"})})},Z=n(9485),z=n(1047),R=n(434);function N(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?N(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):N(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var H=function(){var e=(0,r.Z)(l().mark((function e(t,n,r){var o,i,a,s,c,u;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=(o=n).exportBackground,a=o.viewBackgroundColor,s=o.name,c=o.fileHandle,u=(0,R.Qk)(c),c&&(0,R.DQ)(u)){e.next=4;break}throw new Error(\"fileHandle should exist and should be of type svg or png when resaving\");case 4:return n=B(B({},n),{},{exportEmbedScene:!0}),e.next=7,(0,Z.p1)(u,(0,z.Lm)(t),n,r,{exportBackground:i,viewBackgroundColor:a,name:s,fileHandle:c});case 7:return e.abrupt(\"return\",{fileHandle:c});case 8:case\"end\":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),W=n(6066),F=n(7901),U=n(3807),K=n(4162),Y=n(75),G=n(1393);function V(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function X(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?V(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):V(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,F.z)({name:\"changeProjectName\",trackEvent:!1,perform:function(e,t,n){return{appState:X(X({},t),{},{name:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.appProps;return(0,C.jsx)(I,{label:(0,P.t)(\"labels.fileTitle\"),value:t.name||\"Unnamed\",onChange:function(e){return n(e)},isNameEditable:void 0===r.name&&!t.viewModeEnabled})}}),(0,F.z)({name:\"changeExportScale\",trackEvent:{category:\"export\",action:\"scale\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportScale:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,i=(0,z.Lm)(t),a=(0,Y.N)(i,n)?(0,Y.eD)(i,n):i;return(0,C.jsx)(C.Fragment,{children:D.ZB.map((function(e){var t=(0,K.Cg)(a,D.qy,e),i=(0,o.Z)(t,2),l=i[0],s=i[1],c=\"\".concat((0,P.t)(\"buttons.scale\"),\" \").concat(e,\"x (\").concat(l,\"x\").concat(s,\")\");return(0,C.jsx)(M.V,{size:\"small\",type:\"radio\",icon:\"\".concat(e,\"x\"),name:\"export-canvas-scale\",title:c,\"aria-label\":c,id:\"export-canvas-scale\",checked:e===n.exportScale,onChange:function(){return r(e)}},e)}))})}}),(0,F.z)({name:\"changeExportBackground\",trackEvent:{category:\"export\",action:\"toggleBackground\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportBackground:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,C.jsx)(U.o,{checked:t.exportBackground,onChange:function(e){return n(e)},children:(0,P.t)(\"labels.withBackground\")})}}),(0,F.z)({name:\"changeExportEmbedScene\",trackEvent:{category:\"export\",action:\"embedScene\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportEmbedScene:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,C.jsxs)(U.o,{checked:t.exportEmbedScene,onChange:function(e){return n(e)},children:[(0,P.t)(\"labels.exportEmbedScene\"),(0,C.jsx)(T.u,{label:(0,P.t)(\"labels.exportEmbedScene_details\"),long:!0,children:(0,C.jsx)(\"div\",{className:\"excalidraw-tooltip-icon\",children:s.Vl})})]})}});var q,J,$,Q=(0,F.z)({name:\"saveToActiveFile\",trackEvent:{category:\"export\"},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.saveToActiveFile&&!!t.fileHandle&&!t.viewModeEnabled},perform:(q=(0,r.Z)(l().mark((function e(t,n,r,o){var i,a,s;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=!!n.fileHandle,e.prev=1,!(0,R.g8)(n.fileHandle)){e.next=8;break}return e.next=5,H(t,n,o.files);case 5:e.t0=e.sent,e.next=11;break;case 8:return e.next=10,(0,Z.Um)(t,n,o.files);case 10:e.t0=e.sent;case 11:return a=e.t0,s=a.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:X(X({},n),{},{fileHandle:s,toast:i?{message:null!=s&&s.name?(0,P.t)(\"toast.fileSavedToFilename\").replace(\"{filename}\",'\"'.concat(s.name,'\"')):(0,P.t)(\"toast.fileSaved\")}:null})});case 16:return e.prev=16,e.t1=e.catch(1),\"AbortError\"!==(null===e.t1||void 0===e.t1?void 0:e.t1.name)?console.error(e.t1):console.warn(e.t1),e.abrupt(\"return\",{commitToHistory:!1});case 20:case\"end\":return e.stop()}}),e,null,[[1,16]])}))),function(e,t,n,r){return q.apply(this,arguments)}),keyTest:function(e){return e.key===W.tW.S&&e[W.tW.CTRL_OR_CMD]&&!e.shiftKey}}),ee=(0,F.z)({name:\"saveFileToDisk\",viewMode:!0,trackEvent:{category:\"export\"},perform:(J=(0,r.Z)(l().mark((function e(t,n,r,o){var i,a;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,(0,Z.Um)(t,X(X({},n),{},{fileHandle:null}),o.files);case 3:return i=e.sent,a=i.fileHandle,e.abrupt(\"return\",{commitToHistory:!1,appState:X(X({},n),{},{fileHandle:a})});case 8:return e.prev=8,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)?console.error(e.t0):console.warn(e.t0),e.abrupt(\"return\",{commitToHistory:!1});case 12:case\"end\":return e.stop()}}),e,null,[[0,8]])}))),function(e,t,n,r){return J.apply(this,arguments)}),keyTest:function(e){return e.key===W.tW.S&&e.shiftKey&&e[W.tW.CTRL_OR_CMD]},PanelComponent:function(e){var t=e.updateData;return(0,C.jsx)(M.V,{type:\"button\",icon:s.po,title:(0,P.t)(\"buttons.saveAs\"),\"aria-label\":(0,P.t)(\"buttons.saveAs\"),showAriaLabel:(0,O.Fy)().isMobile,hidden:!G.kr,onClick:function(){return t(null)},\"data-testid\":\"save-as-button\"})}}),te=(0,F.z)({name:\"loadScene\",trackEvent:{category:\"export\"},predicate:function(e,t,n,r){return!!r.props.UIOptions.canvasActions.loadScene&&!t.viewModeEnabled},perform:($=(0,r.Z)(l().mark((function e(t,n,r,o){var i,a,s,c;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,(0,Z.n8)(n,t);case 3:return i=e.sent,a=i.elements,s=i.appState,c=i.files,e.abrupt(\"return\",{elements:a,appState:s,files:c,commitToHistory:!0});case 10:if(e.prev=10,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)){e.next=15;break}return console.warn(e.t0),e.abrupt(\"return\",!1);case 15:return e.abrupt(\"return\",{elements:t,appState:X(X({},n),{},{errorMessage:e.t0.message}),files:o.files,commitToHistory:!1});case 16:case\"end\":return e.stop()}}),e,null,[[0,10]])}))),function(e,t,n,r){return $.apply(this,arguments)}),keyTest:function(e){return e[W.tW.CTRL_OR_CMD]&&e.key===W.tW.O}});(0,F.z)({name:\"exportWithDarkMode\",trackEvent:{category:\"export\",action:\"toggleTheme\"},perform:function(e,t,n){return{appState:X(X({},t),{},{exportWithDarkMode:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,C.jsx)(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginTop:\"-45px\",marginBottom:\"10px\"},children:(0,C.jsx)(A,{value:t.exportWithDarkMode?D.C6.DARK:D.C6.LIGHT,onChange:function(e){n(e===D.C6.DARK)},title:(0,P.t)(\"labels.toggleExportColorScheme\")})})}})},6208:function(e,t,n){\"use strict\";n.d(t,{Tu:function(){return q},Zq:function(){return J}});var r=n(1930),o=n(7169),i=n(7047),a=n(45),l=n(4512),s=function(e){return(0,l.jsx)(\"div\",{className:\"buttonList buttonListIcon\",children:e.options.map((function(t){var n;return\"button\"===e.type?(0,l.jsx)(\"button\",{onClick:function(n){return e.onClick(t.value,n)},className:(0,a.Z)({active:null!==(n=t.active)&&void 0!==n?n:e.value===t.value}),\"data-testid\":t.testId,title:t.text,children:t.icon},t.text):(0,l.jsxs)(\"label\",{className:(0,a.Z)({active:e.value===t.value}),title:t.text,children:[(0,l.jsx)(\"input\",{type:\"radio\",name:e.group,onChange:function(){return e.onChange(t.value)},checked:e.value===t.value,\"data-testid\":t.testId}),t.icon]},t.text)}))})},c=n(4499),u=n(2577),d=n(9787),f=n.n(d),p=n(2891),h=n(487),m=n.n(h),g=n(631),v=n.n(g),b=n(2052),y=n.n(b),x=n(4010),w=n.n(x),k=n(1469),E=n.n(k),S=n(9329),j=n.n(S),_=n(9478),O={};O.styleTagTransform=j(),O.setAttributes=w(),O.insert=y().bind(null,\"head\"),O.domAPI=v(),O.insertStyleElement=E();m()(_.Z,O),_.Z&&_.Z.locals&&_.Z.locals;var C=n(6066),I=n(8211);function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function P(e){var t=e.options,n=e.value,r=e.label,o=e.onChange,i=e.onClose,s=f().useRef(),c=f().useRef(),u=f().useRef(null);f().useEffect((function(){c.current?c.current.focus():u.current&&u.current.focus()}),[]);return(0,l.jsx)(\"div\",{className:\"picker\",role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":r,onKeyDown:function(e){var n=t.find((function(t){return t.keyBinding===e.key.toLowerCase()}));if(e.metaKey||e.altKey||e.ctrlKey||!n)if(e.key===C.tW.TAB)setTimeout((function(){c.current!==document.activeElement&&i()}),0);else if((0,C.Wl)(e.key)){var r=document.activeElement,o=(0,I.G3)().rtl,a=Array.prototype.indexOf.call(u.current.children,r);if(-1!==a){var l=t.length,s=a;switch(e.key){case o?C.tW.ARROW_LEFT:C.tW.ARROW_RIGHT:case C.tW.ARROW_DOWN:s=(a+1)%l;break;case o?C.tW.ARROW_RIGHT:C.tW.ARROW_LEFT:case C.tW.ARROW_UP:s=(l+a-1)%l}u.current.children[s].focus()}e.preventDefault()}else e.key!==C.tW.ESCAPE&&e.key!==C.tW.ENTER||(e.preventDefault(),i());else{var d=t.indexOf(n);u.current.children[d].focus(),e.preventDefault()}e.nativeEvent.stopImmediatePropagation(),e.stopPropagation()},children:(0,l.jsx)(\"div\",{className:\"picker-content\",ref:u,children:t.map((function(e,t){return(0,l.jsxs)(\"button\",{className:(0,a.Z)(\"picker-option\",{active:n===e.value}),onClick:function(t){t.currentTarget.focus(),o(e.value)},title:\"\".concat(e.text,\" \u2014 \").concat(e.keyBinding.toUpperCase()),\"aria-label\":e.text||\"none\",\"aria-keyshortcuts\":e.keyBinding,ref:function(r){r&&0===t&&(s.current=r),r&&e.value===n&&(c.current=r)},onFocus:function(){o(e.value)},children:[e.icon,(0,l.jsx)(\"span\",{className:\"picker-keybinding\",children:e.keyBinding})]},e.text)}))})})}function D(e){var t,n=e.value,r=e.label,o=e.options,i=e.onChange,a=e.group,s=void 0===a?\"\":a,c=f().useState(!1),d=(0,u.Z)(c,2),h=d[0],m=d[1],g=f().useRef(null),v=(0,I.G3)().rtl;return(0,l.jsxs)(\"div\",{children:[(0,l.jsx)(\"button\",{name:s,className:h?\"active\":\"\",\"aria-label\":r,onClick:function(){return m(!h)},ref:g,children:null===(t=o.find((function(e){return e.value===n})))||void 0===t?void 0:t.icon}),(0,l.jsx)(f().Suspense,{fallback:\"\",children:h?(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(p.J,T(T({onCloseRequest:function(e){return e.target!==g.current&&m(!1)}},v?{right:5.5}:{left:-5.5}),{},{children:(0,l.jsx)(P,{options:o,value:n,label:r,onChange:i,onClose:function(){var e;m(!1),null===(e=g.current)||void 0===e||e.focus()}})})),(0,l.jsx)(\"div\",{className:\"picker-triangle\"})]}):null})]})}var A=n(3646),L=n(2335),Z=n(1047),z=n(1935),R=n(5710),N=n(1974),B=n(6954),H=n(75),W=n(8120),F=n(6340),U=n(7901);function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var G=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=(0,F.xn)((0,H.eD)(e,t,r));return e.map((function(e){var r;return o.get(e.id)||e.id===(null===(r=t.editingElement)||void 0===r?void 0:r.id)?n(e):e}))},V=function(e,t,n,r){var o,i,a=t.editingElement,l=(0,Z.Lm)(e);return null!==(o=null!==(i=a&&n(a))&&void 0!==i?i:(0,H.N)(l,t)?(0,H.PR)(l,t,n):r)&&void 0!==o?o:null},X=function(e,t,n,o){var i=new Set;return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=n(e);i.add(t);var r=(0,z.BE)(e,{fontSize:t});return(0,Z.oN)(r,(0,R.tl)(e)),o=e,a=r,r=(0,N.Xh)(a)?a:(0,z.DR)(a,{x:\"left\"===o.textAlign?o.x:o.x+(o.width-a.width)\/(\"center\"===o.textAlign?2:1),y:o.y+(o.height-a.height)\/2},!1)}var o,a;return e}),!0),appState:Y(Y({},t),{},{currentItemFontSize:1===i.size?(0,r.Z)(i)[0]:null!=o?o:t.currentItemFontSize}),commitToHistory:!0}},q=((0,U.z)({name:\"changeStrokeColor\",trackEvent:!1,perform:function(e,t,n){return Y(Y({},n.currentItemStrokeColor&&{elements:G(e,t,(function(e){return(0,W.PD)(e.type)?(0,z.BE)(e,{strokeColor:n.currentItemStrokeColor}):e}),!0)}),{},{appState:Y(Y({},t),n),commitToHistory:!!n.currentItemStrokeColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:(0,I.t)(\"labels.stroke\")}),(0,l.jsx)(c.z,{type:\"elementStroke\",label:(0,I.t)(\"labels.stroke\"),color:V(t,n,(function(e){return e.strokeColor}),n.currentItemStrokeColor),onChange:function(e){return r({currentItemStrokeColor:e})},isActive:\"strokeColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"strokeColorPicker\":null})},elements:t,appState:n})]})}}),(0,U.z)({name:\"changeBackgroundColor\",trackEvent:!1,perform:function(e,t,n){return Y(Y({},n.currentItemBackgroundColor&&{elements:G(e,t,(function(e){return(0,z.BE)(e,{backgroundColor:n.currentItemBackgroundColor})}))}),{},{appState:Y(Y({},t),n),commitToHistory:!!n.currentItemBackgroundColor})},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(\"h3\",{\"aria-hidden\":\"true\",children:(0,I.t)(\"labels.background\")}),(0,l.jsx)(c.z,{type:\"elementBackground\",label:(0,I.t)(\"labels.background\"),color:V(t,n,(function(e){return e.backgroundColor}),n.currentItemBackgroundColor),onChange:function(e){return r({currentItemBackgroundColor:e})},isActive:\"backgroundColorPicker\"===n.openPopup,setActive:function(e){return r({openPopup:e?\"backgroundColorPicker\":null})},elements:t,appState:n})]})}}),(0,U.z)({name:\"changeFillStyle\",trackEvent:!1,perform:function(e,t,n,r){return(0,i.L)(\"element\",\"changeFillStyle\",\"\".concat(n,\" (\").concat(r.device.isMobile?\"mobile\":\"desktop\",\")\")),{elements:G(e,t,(function(e){return(0,z.BE)(e,{fillStyle:n})})),appState:Y(Y({},t),{},{currentItemFillStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,H.eD)(t,n),i=o.length>0&&o.every((function(e){return\"zigzag\"===e.fillStyle}));return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.fill\")}),(0,l.jsx)(s,{type:\"button\",options:[{value:\"hachure\",text:\"\".concat(i?(0,I.t)(\"labels.zigzag\"):(0,I.t)(\"labels.hachure\"),\" (\").concat((0,F.uY)(\"Alt-Click\"),\")\"),icon:i?A.lF:A.a0,active:!!i||void 0},{value:\"cross-hatch\",text:(0,I.t)(\"labels.crossHatch\"),icon:A.np},{value:\"solid\",text:(0,I.t)(\"labels.solid\"),icon:A.X7}],value:V(t,n,(function(e){return e.fillStyle}),n.currentItemFillStyle),onClick:function(e,t){var n=t.altKey&&\"hachure\"===e&&o.every((function(e){return\"hachure\"===e.fillStyle}))?\"zigzag\":e;r(n)}})]})}}),(0,U.z)({name:\"changeStrokeWidth\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{strokeWidth:n})})),appState:Y(Y({},t),{},{currentItemStrokeWidth:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.strokeWidth\")}),(0,l.jsx)(s,{group:\"stroke-width\",options:[{value:1,text:(0,I.t)(\"labels.thin\"),icon:A.ZA},{value:2,text:(0,I.t)(\"labels.bold\"),icon:A.Wl},{value:4,text:(0,I.t)(\"labels.extraBold\"),icon:A.m9}],value:V(t,n,(function(e){return e.strokeWidth}),n.currentItemStrokeWidth),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeSloppiness\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{seed:(0,B.LU)(),roughness:n})})),appState:Y(Y({},t),{},{currentItemRoughness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.sloppiness\")}),(0,l.jsx)(s,{group:\"sloppiness\",options:[{value:0,text:(0,I.t)(\"labels.architect\"),icon:A.bf},{value:1,text:(0,I.t)(\"labels.artist\"),icon:A.kM},{value:2,text:(0,I.t)(\"labels.cartoonist\"),icon:A.W2}],value:V(t,n,(function(e){return e.roughness}),n.currentItemRoughness),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeStrokeStyle\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{strokeStyle:n})})),appState:Y(Y({},t),{},{currentItemStrokeStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.strokeStyle\")}),(0,l.jsx)(s,{group:\"strokeStyle\",options:[{value:\"solid\",text:(0,I.t)(\"labels.strokeStyle_solid\"),icon:A.ZA},{value:\"dashed\",text:(0,I.t)(\"labels.strokeStyle_dashed\"),icon:A.a5},{value:\"dotted\",text:(0,I.t)(\"labels.strokeStyle_dotted\"),icon:A.aT}],value:V(t,n,(function(e){return e.strokeStyle}),n.currentItemStrokeStyle),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeOpacity\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{opacity:n})}),!0),appState:Y(Y({},t),{},{currentItemOpacity:n}),commitToHistory:!0}},PanelComponent:function(e){var t,n=e.elements,r=e.appState,o=e.updateData;return(0,l.jsxs)(\"label\",{className:\"control-label\",children:[(0,I.t)(\"labels.opacity\"),(0,l.jsx)(\"input\",{type:\"range\",min:\"0\",max:\"100\",step:\"10\",onChange:function(e){return o(+e.target.value)},value:null!==(t=V(n,r,(function(e){return e.opacity}),r.currentItemOpacity))&&void 0!==t?t:void 0})]})}}),(0,U.z)({name:\"changeFontSize\",trackEvent:!1,perform:function(e,t,n){return X(e,t,(function(){return n}),n)},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.fontSize\")}),(0,l.jsx)(s,{group:\"font-size\",options:[{value:16,text:(0,I.t)(\"labels.small\"),icon:A.q0,testId:\"fontSize-small\"},{value:20,text:(0,I.t)(\"labels.medium\"),icon:A.nq,testId:\"fontSize-medium\"},{value:28,text:(0,I.t)(\"labels.large\"),icon:A.tW,testId:\"fontSize-large\"},{value:36,text:(0,I.t)(\"labels.veryLarge\"),icon:A.OA,testId:\"fontSize-veryLarge\"}],value:V(t,n,(function(e){if((0,Z.iB)(e))return e.fontSize;var t=(0,R.WJ)(e);return t?t.fontSize:null}),n.currentItemFontSize||L.n5),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"decreaseFontSize\",trackEvent:!1,perform:function(e,t,n){return X(e,t,(function(e){return Math.round(1\/1.1*e.fontSize)}))},keyTest:function(e){return e[C.tW.CTRL_OR_CMD]&&e.shiftKey&&(e.key===C.tW.CHEVRON_LEFT||e.key===C.tW.COMMA)}})),J=(0,U.z)({name:\"increaseFontSize\",trackEvent:!1,perform:function(e,t,n){return X(e,t,(function(e){return Math.round(1.1*e.fontSize)}))},keyTest:function(e){return e[C.tW.CTRL_OR_CMD]&&e.shiftKey&&(e.key===C.tW.CHEVRON_RIGHT||e.key===C.tW.PERIOD)}});(0,U.z)({name:\"changeFontFamily\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=(0,z.BE)(e,{fontFamily:n,lineHeight:(0,R.PT)(n)});return(0,Z.oN)(t,(0,R.tl)(e)),t}return e}),!0),appState:Y(Y({},t),{},{currentItemFontFamily:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=[{value:L.ut.Virgil,text:(0,I.t)(\"labels.handDrawn\"),icon:A.Pm},{value:L.ut.Helvetica,text:(0,I.t)(\"labels.normal\"),icon:A.vo},{value:L.ut.Cascadia,text:(0,I.t)(\"labels.code\"),icon:A.z6}];return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.fontFamily\")}),(0,l.jsx)(s,{group:\"font-family\",options:o,value:V(t,n,(function(e){if((0,Z.iB)(e))return e.fontFamily;var t=(0,R.WJ)(e);return t?t.fontFamily:null}),n.currentItemFontFamily||L.rk),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeTextAlign\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=(0,z.BE)(e,{textAlign:n});return(0,Z.oN)(t,(0,R.tl)(e)),t}return e}),!0),appState:Y(Y({},t),{},{currentItemTextAlign:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.textAlign\")}),(0,l.jsx)(s,{group:\"text-align\",options:[{value:\"left\",text:(0,I.t)(\"labels.left\"),icon:A.rr,testId:\"align-left\"},{value:\"center\",text:(0,I.t)(\"labels.center\"),icon:A.o3,testId:\"align-horizontal-center\"},{value:\"right\",text:(0,I.t)(\"labels.right\"),icon:A.oT,testId:\"align-right\"}],value:V(t,n,(function(e){if((0,Z.iB)(e))return e.textAlign;var t=(0,R.WJ)(e);return t?t.textAlign:null}),n.currentItemTextAlign),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeVerticalAlign\",trackEvent:{category:\"element\"},perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,Z.iB)(e)){var t=(0,z.BE)(e,{verticalAlign:n});return(0,Z.oN)(t,(0,R.tl)(e)),t}return e}),!0),appState:Y({},t),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,l.jsx)(\"fieldset\",{children:(0,l.jsx)(s,{group:\"text-align\",options:[{value:L.oX.TOP,text:(0,I.t)(\"labels.alignTop\"),icon:(0,l.jsx)(A.EO,{theme:n.theme}),testId:\"align-top\"},{value:L.oX.MIDDLE,text:(0,I.t)(\"labels.centerVertically\"),icon:(0,l.jsx)(A.P7,{theme:n.theme}),testId:\"align-middle\"},{value:L.oX.BOTTOM,text:(0,I.t)(\"labels.alignBottom\"),icon:(0,l.jsx)(A.aA,{theme:n.theme}),testId:\"align-bottom\"}],value:V(t,n,(function(e){if((0,Z.iB)(e)&&e.containerId)return e.verticalAlign;var t=(0,R.WJ)(e);return t?t.verticalAlign:null})),onChange:function(e){return r(e)}})})}}),(0,U.z)({name:\"changeRoundness\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){return(0,z.BE)(e,{roundness:\"round\"===n?{type:(0,N.QI)(e.type)?L.a6.ADAPTIVE_RADIUS:L.a6.PROPORTIONAL_RADIUS}:null})})),appState:Y(Y({},t),{},{currentItemRoundness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,H.Zs)((0,Z.Lm)(t),n).some((function(e){var t;return(null===(t=e.roundness)||void 0===t?void 0:t.type)===L.a6.LEGACY}));return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.edges\")}),(0,l.jsx)(s,{group:\"edges\",options:[{value:\"sharp\",text:(0,I.t)(\"labels.sharp\"),icon:A.wr},{value:\"round\",text:(0,I.t)(\"labels.round\"),icon:A.DS}],value:V(t,n,(function(e){return o?null:e.roundness?\"round\":\"sharp\"}),(0,H.sh)(n.activeTool.type)&&n.currentItemRoundness||null),onChange:function(e){return r(e)}})]})}}),(0,U.z)({name:\"changeArrowhead\",trackEvent:!1,perform:function(e,t,n){return{elements:G(e,t,(function(e){if((0,N.bt)(e)){var t=n.position,r=n.type;if(\"start\"===t)return(0,z.BE)(e,{startArrowhead:r});if(\"end\"===t)return(0,z.BE)(e,{endArrowhead:r})}return e})),appState:Y(Y({},t),{},(0,o.Z)({},\"start\"===n.position?\"currentItemStartArrowhead\":\"currentItemEndArrowhead\",n.type)),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,I.G3)().rtl;return(0,l.jsxs)(\"fieldset\",{children:[(0,l.jsx)(\"legend\",{children:(0,I.t)(\"labels.arrowheads\")}),(0,l.jsxs)(\"div\",{className:\"iconSelectList buttonList\",children:[(0,l.jsx)(D,{label:\"arrowhead_start\",options:[{value:null,text:(0,I.t)(\"labels.arrowhead_none\"),icon:A.fr,keyBinding:\"q\"},{value:\"arrow\",text:(0,I.t)(\"labels.arrowhead_arrow\"),icon:(0,l.jsx)(A.il,{flip:!o}),keyBinding:\"w\"},{value:\"bar\",text:(0,I.t)(\"labels.arrowhead_bar\"),icon:(0,l.jsx)(A.m,{flip:!o}),keyBinding:\"e\"},{value:\"dot\",text:(0,I.t)(\"labels.arrowhead_dot\"),icon:(0,l.jsx)(A.tn,{flip:!o}),keyBinding:\"r\"},{value:\"triangle\",text:(0,I.t)(\"labels.arrowhead_triangle\"),icon:(0,l.jsx)(A.j8,{flip:!o}),keyBinding:\"t\"}],value:V(t,n,(function(e){return(0,N.bt)(e)&&(0,H.Un)(e.type)?e.startArrowhead:n.currentItemStartArrowhead}),n.currentItemStartArrowhead),onChange:function(e){return r({position:\"start\",type:e})}}),(0,l.jsx)(D,{label:\"arrowhead_end\",group:\"arrowheads\",options:[{value:null,text:(0,I.t)(\"labels.arrowhead_none\"),keyBinding:\"q\",icon:A.fr},{value:\"arrow\",text:(0,I.t)(\"labels.arrowhead_arrow\"),keyBinding:\"w\",icon:(0,l.jsx)(A.il,{flip:o})},{value:\"bar\",text:(0,I.t)(\"labels.arrowhead_bar\"),keyBinding:\"e\",icon:(0,l.jsx)(A.m,{flip:o})},{value:\"dot\",text:(0,I.t)(\"labels.arrowhead_dot\"),keyBinding:\"r\",icon:(0,l.jsx)(A.tn,{flip:o})},{value:\"triangle\",text:(0,I.t)(\"labels.arrowhead_triangle\"),icon:(0,l.jsx)(A.j8,{flip:o}),keyBinding:\"t\"}],value:V(t,n,(function(e){return(0,N.bt)(e)&&(0,H.Un)(e.type)?e.endArrowhead:n.currentItemEndArrowhead}),n.currentItemEndArrowhead),onChange:function(e){return r({position:\"end\",type:e})}})]})]})}})},4958:function(e,t,n){\"use strict\";n.d(t,{u:function(){return s}});var r=n(7169),o=n(7901),i=n(6066);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s=(0,o.z)({name:\"stats\",viewMode:!0,trackEvent:{category:\"menu\"},perform:function(e,t){return{appState:l(l({},t),{},{showStats:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.showStats},contextItemLabel:\"stats.title\",keyTest:function(e){return!e[i.tW.CTRL_OR_CMD]&&e.altKey&&e.code===i.aU.SLASH}})},6710:function(e,t,n){\"use strict\";n.d(t,{FL:function(){return We},vD:function(){return mt.vD},yA:function(){return _},BZ:function(){return C},mo:function(){return X.mo},uN:function(){return lt.uN},jK:function(){return lt.jK},FA:function(){return lt.FA},pw:function(){return ie},ZM:function(){return lt.ZM},X9:function(){return r.X},xF:function(){return G},pL:function(){return ee},jl:function(){return tt},kt:function(){return nt},EQ:function(){return ve},nz:function(){return gt.nz},_d:function(){return te._d},W3:function(){return ae},ns:function(){return te.ns},Yy:function(){return L},V:function(){return j},zi:function(){return O},jY:function(){return ce},Pb:function(){return ut},Qs:function(){return Et},iL:function(){return yt},u0:function(){return ht.u},Zp:function(){return X.Zp},JN:function(){return pt},y7:function(){return mt.y7},s:function(){return be},zp:function(){return lt.zp}});var r=n(533),o=n(1930),i=n(1935),a=n(242),l=n(75),s=n(1564),c=n(6340),u=function(e,t){for(var n=[],r=[],o=null,i=-1,a=(0,c.xn)((0,l.eD)(e,t,!0));++i<e.length;)a.get(e[i].id)?(r.length&&(n=n.concat(r),r=[]),n.push(i),o=i+1):e[i].isDeleted&&o===i?(o=i+1,r.push(i)):r=[];return n},d=function(e,t,n){if(\"containerId\"in e&&e.containerId){if(\"left\"!==n)return t.indexOf(e);var r=s.Z.getScene(e).getElement(e.containerId);if(r)return t.indexOf(r)}else{var o,i,a=null===(o=e.boundElements)||void 0===o||null===(i=o.find((function(e){return\"arrow\"!==e.type})))||void 0===i?void 0:i.id;if(a){if(\"left\"===n)return t.indexOf(e);var l=s.Z.getScene(e).getElement(a);if(l)return t.indexOf(l)}}},f=function(e,t){return t.reduce((function(t,n){var r=e[n];return t[r.id]=r,t}),{})},p=function(e,t,n){var r,l,s=u(t,e),p=f(t,s),h=(l=0,(r=s).reduce((function(e,t,n){return n>0&&r[n-1]!==t-1&&(l=++l),(e[l]||(e[l]=[])).push(t),e}),[]));return\"right\"===n&&(h=h.reverse()),h.forEach((function(r,i){var l=r[0],s=r[r.length-1],u=\"left\"===n?l:s,f=function(e,t,n,r){var o,i=t[n],l=function(t){return!t.isDeleted&&(!e.editingGroupId||t.groupIds.includes(e.editingGroupId))},s=\"left\"===r?(0,c.qr)(t,l,Math.max(0,n-1)):(0,c.cx)(t,l,n+1),u=t[s];if(!u)return-1;if(e.editingGroupId){var f;if((null==i?void 0:i.groupIds.join(\"\"))===(null==u?void 0:u.groupIds.join(\"\")))return null!==(f=d(u,t,r))&&void 0!==f?f:s;if(null==u||!u.groupIds.includes(e.editingGroupId))return-1}if(!u.groupIds.length)return null!==(o=d(u,t,r))&&void 0!==o?o:s;var p=e.editingGroupId?u.groupIds[u.groupIds.indexOf(e.editingGroupId)-1]:u.groupIds[u.groupIds.length-1],h=(0,a.Fb)(t,p);return h.length?\"left\"===r?t.indexOf(h[0]):t.indexOf(h[h.length-1]):s}(e,t,u,n);if(-1!==f&&u!==f){var p=\"left\"===n?t.slice(0,f):t.slice(0,l),h=t.slice(l,s+1),m=\"left\"===n?t.slice(f,l):t.slice(s+1,f+1),g=\"left\"===n?t.slice(s+1):t.slice(f+1);t=\"left\"===n?[].concat((0,o.Z)(p),(0,o.Z)(h),(0,o.Z)(m),(0,o.Z)(g)):[].concat((0,o.Z)(p),(0,o.Z)(m),(0,o.Z)(h),(0,o.Z)(g))}})),t.map((function(e){return p[e.id]?(0,i.ZP)(e):e}))},h=function(e,t,n){var r,l,s=u(e,t),c=f(e,s),d=[];if(\"left\"===n){if(t.editingGroupId){var p=(0,a.Fb)(e,t.editingGroupId);if(!p.length)return e;r=e.indexOf(p[0])}else r=0;l=s[s.length-1]}else{if(t.editingGroupId){var h=(0,a.Fb)(e,t.editingGroupId);if(!h.length)return e;l=e.indexOf(h[h.length-1])}else l=e.length-1;r=s[0]}for(var m=r;m<l+1;m++)s.includes(m)||d.push(e[m]);var g=Object.values(c).map((function(e){return(0,i.ZP)(e)})),v=e.slice(0,r),b=e.slice(l+1);return\"left\"===n?[].concat((0,o.Z)(v),(0,o.Z)(g),d,(0,o.Z)(b)):[].concat((0,o.Z)(v),d,(0,o.Z)(g),(0,o.Z)(b))},m=function(e,t){return p(t,e,\"left\")},g=function(e,t){return p(t,e,\"right\")},v=function(e,t){return h(e,t,\"left\")},b=function(e,t){return h(e,t,\"right\")},y=n(6066),x=n(8211),w=n(7901),k=n(3646),E=n(2335),S=n(4512),j=(0,w.z)({name:\"sendBackward\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:m(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendBackward\",keyPriority:40,keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&!e.shiftKey&&e.code===y.aU.BRACKET_LEFT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat((0,x.t)(\"labels.sendBackward\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+[\")),children:k.Gc})}}),_=(0,w.z)({name:\"bringForward\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:g(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringForward\",keyPriority:40,keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&!e.shiftKey&&e.code===y.aU.BRACKET_RIGHT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat((0,x.t)(\"labels.bringForward\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+]\")),children:k.t5})}}),O=(0,w.z)({name:\"sendToBack\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:v(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendToBack\",keyTest:function(e){return E.Um?e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.BRACKET_LEFT:e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.code===y.aU.BRACKET_LEFT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat((0,x.t)(\"labels.sendToBack\"),\" \u2014 \").concat(E.Um?(0,c.uY)(\"CtrlOrCmd+Alt+[\"):(0,c.uY)(\"CtrlOrCmd+Shift+[\")),children:k.pw})}}),C=(0,w.z)({name:\"bringToFront\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:b(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringToFront\",keyTest:function(e){return E.Um?e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.BRACKET_RIGHT:e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.code===y.aU.BRACKET_RIGHT},PanelComponent:function(e){var t=e.updateData;e.appState;return(0,S.jsx)(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(e){return t(null)},title:\"\".concat((0,x.t)(\"labels.bringToFront\"),\" \u2014 \").concat(E.Um?(0,c.uY)(\"CtrlOrCmd+Alt+]\"):(0,c.uY)(\"CtrlOrCmd+Shift+]\")),children:k.IN})}}),I=n(7169),M=n(1047),T=n(1974),P=n(6938);function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var L=(0,w.z)({name:\"selectAll\",trackEvent:{category:\"canvas\"},perform:function(e,t,n,r){if(t.editingLinearElement)return!1;var o=e.reduce((function(e,t){return t.isDeleted||(0,M.iB)(t)&&t.containerId||t.locked||(e[t.id]=!0),e}),{});return{appState:(0,a.bO)(A(A({},t),{},{selectedLinearElement:1===Object.keys(o).length&&(0,T.bt)(e[0])?new P._(e[0],r.scene):null,editingGroupId:null,selectedElementIds:o}),(0,M.Lm)(e)),commitToHistory:!0}},contextItemLabel:\"labels.selectAll\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.A}}),Z=n(1319),z=n(8290),R=n(5710);function N(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return B(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var H=function(e){var t=e.slice(),n=new Set,r=function e(t){var n,r,i,a=null===(n=t[0])||void 0===n||null===(r=n.groupIds)||void 0===r?void 0:r.join(\"\"),l=[t[0]],s=[],c=N(t.slice(1));try{for(c.s();!(i=c.n()).done;){var u,d=i.value;(null===(u=d.groupIds)||void 0===u?void 0:u.join(\"\"))===a?l.push(d):s.push(d)}}catch(e){c.e(e)}finally{c.f()}return s.length?[].concat(l,(0,o.Z)(e(s))):l},i=new Map;return t.forEach((function(e,o){var a;if(!i.has(e.id))if(null!==(a=e.groupIds)&&void 0!==a&&a.length){var l,s=e.groupIds[e.groupIds.length-1],c=t.slice(o).filter((function(e){var t,n=null==e||null===(t=e.groupIds)||void 0===t?void 0:t.some((function(e){return e===s}));return n&&i.set(e.id,!0),n})),u=N(r(c));try{for(u.s();!(l=u.n()).done;){var d=l.value;n.add(d)}}catch(e){u.e(e)}finally{u.f()}}else n.add(e)})),n.size!==e.length?(console.error(\"normalizeGroupElementOrder: lost some elements... bailing!\"),e):(0,o.Z)(n)},W=function(e){var t=function(e){var t=(0,c.I4)(e),n=e.slice(),r=new Set;return n.forEach((function(e,o){var i;if(e)if(null!==(i=e.boundElements)&&void 0!==i&&i.length)r.add(e),n[o]=null,e.boundElements.forEach((function(e){var o=t.get(e.id);o&&\"text\"===e.type&&(r.add(o[0]),n[o[1]]=null)}));else if(\"text\"===e.type&&e.containerId){var a,l=t.get(e.containerId);null!=l&&null!==(a=l[0].boundElements)&&void 0!==a&&a.find((function(t){return t.id===e.id}))||(r.add(e),n[o]=null)}else r.add(e),n[o]=null})),r.size!==e.length?(console.error(\"normalizeBoundElementsOrder: lost some elements... bailing!\"),e):(0,o.Z)(r)}(H(e));return t};function F(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return U(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return U(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function U(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var G=(0,w.z)({name:\"duplicateSelection\",trackEvent:{category:\"element\"},perform:function(e,t){if(t.editingLinearElement){var n=P._.duplicateSelectedPoints(t);return!!n&&{elements:e,appState:n.appState,commitToHistory:!0}}return Y(Y({},V(e,t)),{},{commitToHistory:!0})},contextItemLabel:\"labels.duplicateSelection\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.D},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{type:\"button\",icon:k.NA,title:\"\".concat((0,x.t)(\"labels.duplicateSelection\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+D\")),\"aria-label\":(0,x.t)(\"labels.duplicateSelection\"),onClick:function(){return r(null)},visible:(0,l.N)((0,M.Lm)(t),n)})}}),V=function(e,t){for(var n=W(e),r=new Map,i=[],s=[],u=new Map,d=function(e){var n=(0,M.Sy)(t.editingGroupId,r,e,{x:e.x+E.k\/2,y:e.y+E.k\/2});return u.set(e.id,n.id),s.push(e),i.push(n),n},f=(0,c.xn)((0,l.eD)(n,t,!0)),p=new Map,h=function(e){var t,n=F(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;p.set(r.id,!0)}}catch(e){n.e(e)}finally{n.f()}return e},m=[],g=-1;++g<n.length;){var v=n[g];if(!p.get(v.id)){var b=(0,R.WJ)(v);if(f.get(v.id)){if(v.groupIds.length||b){var y=(0,a.yO)(t,v);if(y){var x=(0,a.Fb)(n,y);m.push.apply(m,(0,o.Z)(h([].concat((0,o.Z)(x),(0,o.Z)(x.map((function(e){return d(e)})))))));continue}if(b){m.push.apply(m,(0,o.Z)(h([v,b,d(v),d(b)])));continue}}m.push.apply(m,(0,o.Z)(h([v,d(v)])))}else m.push.apply(m,(0,o.Z)(h([v])))}}var w=[],k=new Map;for(g=m.length;--g>=0;){var S=m[g];k.get(S.id)||(k.set(S.id,!0),w.push(S))}var j=w.reverse();return(0,R.P7)(m,s,u),(0,z.ek)(m,s,u),{elements:j,appState:(0,a.bO)(Y(Y({},t),{},{selectedGroupIds:{},selectedElementIds:i.reduce((function(e,t){return(0,T.Xh)(t)||(e[t.id]=!0),e}),{})}),(0,M.Lm)(j))}},X=(n(6208),n(2416)),q=n(2577),J=n(6552);function $(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ee=(0,w.z)({name:\"finalize\",trackEvent:!1,perform:function(e,t,n,r){var o,a=r.canvas,l=r.focusContainer,u=r.scene;if(t.editingLinearElement){var d=t.editingLinearElement,f=d.elementId,p=d.startBindingElement,h=d.endBindingElement,m=P._.getElement(f);if(m)return(0,T.Mn)(m)&&(0,z.HG)(m,p,h),{elements:m.points.length<2||(0,M.QD)(m)?e.filter((function(e){return e.id!==m.id})):void 0,appState:Q(Q({},t),{},{cursorButton:\"up\",editingLinearElement:null}),commitToHistory:!0}}var g=e,v=t.pendingImageElementId&&u.getElement(t.pendingImageElementId);v&&(0,i.DR)(v,{isDeleted:!0},!1),window.document.activeElement instanceof HTMLElement&&l();var b,y=t.multiElement?t.multiElement:\"freedraw\"===(null===(o=t.editingElement)||void 0===o?void 0:o.type)?t.editingElement:null;if(y){if(\"freedraw\"!==y.type&&\"touch\"!==t.lastPointerDownWith){var x=y.points,w=y.lastCommittedPoint;w&&x[x.length-1]===w||(0,i.DR)(y,{points:y.points.slice(0,-1)})}(0,M.QD)(y)&&(g=g.slice(0,-1));var k=(0,J.g6)(y.points,t.zoom.value);if((\"line\"===y.type||\"freedraw\"===y.type)&&k){var E=y.points,S=E[0];(0,i.DR)(y,{points:E.map((function(e,t){return t===E.length-1?[S[0],S[1]]:e}))})}if((0,T.Mn)(y)&&!k&&y.points.length>1){var j=P._.getPointAtIndexGlobalCoordinates(y,-1),_=(0,q.Z)(j,2),O=_[0],C=_[1];(0,z.R)(y,t,s.Z.getScene(y),{x:O,y:C})}t.activeTool.locked||\"freedraw\"===t.activeTool.type||(t.selectedElementIds[y.id]=!0)}return(t.activeTool.locked||\"freedraw\"===t.activeTool.type)&&y||(0,c.z8)(a),b=\"eraser\"===t.activeTool.type?(0,c.Om)(t,Q(Q({},t.activeTool.lastActiveTool||{type:\"selection\"}),{},{lastActiveToolBeforeEraser:null})):(0,c.Om)(t,{type:\"selection\"}),{elements:g,appState:Q(Q({},t),{},{cursorButton:\"up\",activeTool:(t.activeTool.locked||\"freedraw\"===t.activeTool.type)&&y?t.activeTool:b,draggingElement:null,multiElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:y&&!t.activeTool.locked&&\"freedraw\"!==t.activeTool.type?Q(Q({},t.selectedElementIds),{},(0,I.Z)({},y.id,!0)):t.selectedElementIds,selectedLinearElement:y&&(0,T.bt)(y)?new P._(y,u):t.selectedLinearElement,pendingImageElementId:null}),commitToHistory:\"freedraw\"===t.activeTool.type}},keyTest:function(e,t){return e.key===y.tW.ESCAPE&&(null!==t.editingLinearElement||!t.draggingElement&&null===t.multiElement)||(e.key===y.tW.ESCAPE||e.key===y.tW.ENTER)&&null!==t.multiElement},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.data;return(0,S.jsx)(Z.V,{type:\"button\",icon:k.$c,title:(0,x.t)(\"buttons.done\"),\"aria-label\":(0,x.t)(\"buttons.done\"),onClick:n,visible:null!=t.multiElement,size:(null==r?void 0:r.size)||\"medium\"})}}),te=n(8671);function ne(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ne(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ne(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var oe=\"{}\",ie=(0,w.z)({name:\"copyStyles\",trackEvent:{category:\"element\"},perform:function(e,t){var n=[],r=e.find((function(e){return t.selectedElementIds[e.id]}));if(n.push(r),r&&(0,T.Xo)(r)){var o=(0,R.WJ)(r);n.push(o)}return r&&(oe=JSON.stringify(n)),{appState:re(re({},t),{},{toast:{message:(0,x.t)(\"toast.copyStyles\")}}),commitToHistory:!1}},contextItemLabel:\"labels.copyStyles\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.C}}),ae=(0,w.z)({name:\"pasteStyles\",trackEvent:{category:\"element\"},perform:function(e,t){var n=JSON.parse(oe),r=n[0],o=n[1];if(!(0,M.r2)(r))return{elements:e,commitToHistory:!1};var a=(0,l.eD)(e,t,!0),s=a.map((function(e){return e.id}));return{elements:e.map((function(e){if(s.includes(e.id)){var t,n,l,c,u,d,f,p=r;if((0,M.iB)(e)&&e.containerId&&(p=o),!p)return e;var h=(0,i.BE)(e,{backgroundColor:null===(t=p)||void 0===t?void 0:t.backgroundColor,strokeWidth:null===(n=p)||void 0===n?void 0:n.strokeWidth,strokeColor:null===(l=p)||void 0===l?void 0:l.strokeColor,strokeStyle:null===(c=p)||void 0===c?void 0:c.strokeStyle,fillStyle:null===(u=p)||void 0===u?void 0:u.fillStyle,opacity:null===(d=p)||void 0===d?void 0:d.opacity,roughness:null===(f=p)||void 0===f?void 0:f.roughness,roundness:p.roundness?(0,T.eK)(p.roundness.type,e)?p.roundness:(0,T.UQ)(e):null});if((0,M.iB)(h)){var m,g,v,b=(null===(m=p)||void 0===m?void 0:m.fontSize)||E.n5,y=(null===(g=p)||void 0===g?void 0:g.fontFamily)||E.rk,x=null;(h=(0,i.BE)(h,{fontSize:b,fontFamily:y,textAlign:(null===(v=p)||void 0===v?void 0:v.textAlign)||E.Hg,lineHeight:p.lineHeight||(0,R.PT)(y)})).containerId&&(x=a.find((function(e){return(0,M.iB)(h)&&e.id===h.containerId}))||null),(0,M.oN)(h,x)}return\"arrow\"===h.type&&(h=(0,i.BE)(h,{startArrowhead:p.startArrowhead,endArrowhead:p.endArrowhead})),h}return e})),commitToHistory:!0}},contextItemLabel:\"labels.pasteStyles\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.V}});function le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?le(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,w.z)({name:\"toggleCanvasMenu\",trackEvent:{category:\"menu\"},perform:function(e,t){return{appState:se(se({},t),{},{openMenu:\"canvas\"===t.openMenu?null:\"canvas\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return(0,S.jsx)(Z.V,{type:\"button\",icon:k.RY,\"aria-label\":(0,x.t)(\"buttons.menu\"),onClick:n,selected:\"canvas\"===t.openMenu})}}),(0,w.z)({name:\"toggleEditMenu\",trackEvent:{category:\"menu\"},perform:function(e,t){return{appState:se(se({},t),{},{openMenu:\"shape\"===t.openMenu?null:\"shape\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{visible:(0,M.RT)(n,(0,M.Lm)(t)),type:\"button\",icon:k.DG,\"aria-label\":(0,x.t)(\"buttons.edit\"),onClick:r,selected:\"shape\"===n.openMenu})}}),(0,w.z)({name:\"toggleFullScreen\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!(0,c.rB)()}},perform:function(){return(0,c.rB)()||(0,c.wo)(),(0,c.rB)()&&(0,c.Pr)(),{commitToHistory:!1}},keyTest:function(e){return e.key===y.tW.F&&!e[y.tW.CTRL_OR_CMD]}});var ce=(0,w.z)({name:\"toggleShortcuts\",viewMode:!0,trackEvent:{category:\"menu\",action:\"toggleHelpDialog\"},perform:function(e,t,n,r){var o=r.focusContainer;return\"help\"===t.openDialog&&o(),{appState:se(se({},t),{},{openDialog:\"help\"===t.openDialog?null:\"help\"}),commitToHistory:!1}},keyTest:function(e){return e.key===y.tW.QUESTION_MARK}}),ue=n(6655),de=n(6954);function fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fe(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function he(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return me(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return me(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function me(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ge=function(e,t){var n=(0,l.eD)((0,M.Lm)(e),t,!0);return n.length>=2&&!function(e){if(e.length>=2){var t,n=he(e[0].groupIds);try{var r=function(){var n=t.value;if(e.reduce((function(e,t){return e&&(0,a.Nd)(t,n)}),!0))return{v:!0}};for(n.s();!(t=n.n()).done;){var o=r();if(\"object\"===(0,ue.Z)(o))return o.v}}catch(e){n.e(e)}finally{n.f()}}return!1}(n)},ve=(0,w.z)({name:\"group\",trackEvent:{category:\"element\"},perform:function(e,t){var n=(0,l.eD)((0,M.Lm)(e),t,!0);if(n.length<2)return{appState:t,elements:e,commitToHistory:!1};var r=(0,a.iJ)(t);if(1===r.length){var s=r[0],u=new Set((0,a.Fb)(e,s).map((function(e){return e.id}))),d=new Set(n.map((function(e){return e.id})));if(new Set([].concat((0,o.Z)(Array.from(u)),(0,o.Z)(Array.from(d)))).size===u.size)return{appState:t,elements:e,commitToHistory:!1}}var f=(0,de.kb)(),p=(0,c.xn)(n),h=e.map((function(e){return p.get(e.id)?(0,i.BE)(e,{groupIds:(0,a.S_)(e.groupIds,f,t.editingGroupId)}):e})),m=(0,a.Fb)(h,f),g=m[m.length-1],v=h.lastIndexOf(g),b=h.slice(v+1),y=h.slice(0,v).filter((function(e){return!(0,a.Nd)(e,f)})),x=[].concat((0,o.Z)(y),(0,o.Z)(m),(0,o.Z)(b));return{appState:(0,a.F$)(f,pe(pe({},t),{},{selectedGroupIds:{}}),(0,M.Lm)(x)),elements:x,commitToHistory:!0}},contextItemLabel:\"labels.group\",predicate:function(e,t){return ge(e,t)},keyTest:function(e){return!e.shiftKey&&e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.G},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!ge(t,n),type:\"button\",icon:(0,S.jsx)(k.BF,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.group\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+G\")),\"aria-label\":(0,x.t)(\"labels.group\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),be=(0,w.z)({name:\"ungroup\",trackEvent:{category:\"element\"},perform:function(e,t){if(0===(0,a.iJ)(t).length)return{appState:t,elements:e,commitToHistory:!1};var n=[],r=e.map((function(e){(0,T.Xh)(e)&&n.push(e.id);var r=(0,a.h6)(e.groupIds,t.selectedGroupIds);return r.length===e.groupIds.length?e:(0,i.BE)(e,{groupIds:r})})),o=(0,a.bO)(pe(pe({},t),{},{selectedGroupIds:{}}),(0,M.Lm)(r));return n.forEach((function(e){return o.selectedElementIds[e]=!1})),{appState:o,elements:r,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&e[y.tW.CTRL_OR_CMD]&&e.key===y.tW.G.toUpperCase()},contextItemLabel:\"labels.ungroup\",predicate:function(e,t){return(0,a.iJ)(t).length>0},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{type:\"button\",hidden:0===(0,a.iJ)(n).length,icon:(0,S.jsx)(k.RJ,{theme:n.theme}),onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.ungroup\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+G\")),\"aria-label\":(0,x.t)(\"labels.ungroup\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),ye=n(8982),xe=n(487),we=n.n(xe),ke=n(631),Ee=n.n(ke),Se=n(2052),je=n.n(Se),_e=n(4010),Oe=n.n(_e),Ce=n(1469),Ie=n.n(Ce),Me=n(9329),Te=n.n(Me),Pe=n(3729),De={};De.styleTagTransform=Te(),De.setAttributes=Oe(),De.insert=je().bind(null,\"head\"),De.domAPI=Ee(),De.insertStyleElement=Ie();we()(Pe.Z,De),Pe.Z&&Pe.Z.locals&&Pe.Z.locals;var Ae=n(9787),Le=function(e){var t=e.color,n=e.onClick,r=e.name,o=e.src,i=(0,ye.f)(r),a=(0,Ae.useState)(!1),l=(0,q.Z)(a,2),s=l[0],c=l[1],u=!s&&o,d=u?void 0:{background:t};return(0,S.jsx)(\"div\",{className:\"Avatar\",style:d,onClick:n,children:u?(0,S.jsx)(\"img\",{className:\"Avatar-img\",src:o,alt:i,referrerPolicy:\"no-referrer\",onError:function(){return c(!0)}}):i})},Ze=n(2264);function ze(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ze(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ze(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,w.z)({name:\"goToCollaborator\",viewMode:!0,trackEvent:{category:\"collab\"},perform:function(e,t,n){var r=n;return r?{appState:Re(Re(Re({},t),(0,Ze.s)({scenePoint:r,viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})),{},{openMenu:\"canvas\"===t.openMenu?null:t.openMenu}),commitToHistory:!1}:{appState:t,commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.data,o=(0,q.Z)(r,2),i=o[0],a=o[1],l=(0,ye.X)(i,t),s=l.background,c=l.stroke;return(0,S.jsx)(Le,{color:s,border:c,onClick:function(){return n(a.pointer)},name:a.username||\"\",src:a.avatarUrl})}});var Ne=n(2791);function Be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function He(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Be(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var We=(0,w.z)({name:\"addToLibrary\",trackEvent:{category:\"element\"},perform:function(e,t,n,r){var i=(0,l.eD)((0,M.Lm)(e),t,!0);return i.some((function(e){return\"image\"===e.type}))?{commitToHistory:!1,appState:He(He({},t),{},{errorMessage:\"Support for adding images to the library coming soon!\"})}:r.library.getLatestLibrary().then((function(e){return r.library.setLibrary([{id:(0,de.kb)(),status:\"unpublished\",elements:i.map(Ne.OL),created:Date.now()}].concat((0,o.Z)(e)))})).then((function(){return{commitToHistory:!1,appState:He(He({},t),{},{toast:{message:(0,x.t)(\"toast.addedToLibrary\")}})}})).catch((function(e){return{commitToHistory:!1,appState:He(He({},t),{},{errorMessage:e.message})}}))},contextItemLabel:\"labels.addToLibrary\"}),Fe=n(8925);function Ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ke(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ue(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ue(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ye=function(e,t,n){var r=n.axis,o=n.position,i=(0,Fe.v2)(e),a=\"x\"===r?[\"minX\",\"maxX\"]:[\"minY\",\"maxY\"],l=(0,q.Z)(a,2),s=l[0],c=l[1],u={x:0,y:0};return Ke(Ke({},u),{},\"start\"===o?(0,I.Z)({},r,t[s]-i[s]):\"end\"===o?(0,I.Z)({},r,t[c]-i[c]):(0,I.Z)({},r,(t[s]+t[c])\/2-(i[s]+i[c])\/2))},Ge=function(e,t){return(0,l.eD)((0,M.Lm)(e),t).length>1},Ve=function(e,t,n){var r=function(e,t){var n=(0,a.AI)(e),r=(0,Fe.v2)(e);return n.flatMap((function(e){var n=Ye(e,r,t);return e.map((function(e){return(0,i.BE)(e,{x:e.x+n.x,y:e.y+n.y})}))}))}((0,l.eD)((0,M.Lm)(e),t),n),o=(0,c.xn)(r);return e.map((function(e){return o.get(e.id)||e}))};(0,w.z)({name:\"alignTop\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"start\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_UP},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.Ct,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignTop\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Up\")),\"aria-label\":(0,x.t)(\"labels.alignTop\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignBottom\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"end\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_DOWN},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.HL,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignBottom\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Down\")),\"aria-label\":(0,x.t)(\"labels.alignBottom\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignLeft\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"start\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_LEFT},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.xs,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignLeft\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Left\")),\"aria-label\":(0,x.t)(\"labels.alignLeft\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignRight\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"end\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key===y.tW.ARROW_RIGHT},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.mh,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.alignRight\"),\" \u2014 \").concat((0,c.uY)(\"CtrlOrCmd+Shift+Right\")),\"aria-label\":(0,x.t)(\"labels.alignRight\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignVerticallyCentered\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"center\",axis:\"y\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.ST,onClick:function(){return r(null)},title:(0,x.t)(\"labels.centerVertically\"),\"aria-label\":(0,x.t)(\"labels.centerVertically\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"alignHorizontallyCentered\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:Ve(e,t,{position:\"center\",axis:\"x\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Ge(t,n),type:\"button\",icon:k.gK,onClick:function(){return r(null)},title:(0,x.t)(\"labels.centerHorizontally\"),\"aria-label\":(0,x.t)(\"labels.centerHorizontally\"),visible:(0,l.N)((0,M.Lm)(t),n)})}});function Xe(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return qe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return qe(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function qe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Je=function(e,t){return(0,l.eD)((0,M.Lm)(e),t).length>1},$e=function(e,t,n){var r=function(e,t){var n,r=\"x\"===t.axis?[\"minX\",\"midX\",\"maxX\",\"width\"]:[\"minY\",\"midY\",\"maxY\",\"height\"],o=(0,q.Z)(r,4),l=o[0],s=o[1],c=o[2],u=o[3],d=(0,Fe.v2)(e),f=(0,a.AI)(e).map((function(e){return[e,(0,Fe.v2)(e)]})).sort((function(e,t){return e[1][s]-t[1][s]})),p=0,h=Xe(f);try{for(h.s();!(n=h.n()).done;)p+=n.value[1][u]}catch(e){h.e(e)}finally{h.f()}var m=(d[u]-p)\/(f.length-1);if(m<0){var g=f.findIndex((function(e){return e[1][l]===d[l]})),v=f.findIndex((function(e){return e[1][c]===d[c]})),b=(f[v][1][s]-f[g][1][s])\/(f.length-1),y=f[g][1][s];return f.flatMap((function(e,n){var r=(0,q.Z)(e,2),o=r[0],a=r[1],l={x:0,y:0};return n!==g&&n!==v&&(y+=b,l[t.axis]=y-a[s]),o.map((function(e){return(0,i.BE)(e,{x:e.x+l.x,y:e.y+l.y})}))}))}var x=d[l];return f.flatMap((function(e){var n=(0,q.Z)(e,2),r=n[0],o=n[1],a={x:0,y:0};return a[t.axis]=x-o[l],x+=m,x+=o[u],r.map((function(e){return(0,i.BE)(e,{x:e.x+a.x,y:e.y+a.y})}))}))}((0,l.eD)((0,M.Lm)(e),t),n),o=(0,c.xn)(r);return e.map((function(e){return o.get(e.id)||e}))},Qe=((0,w.z)({name:\"distributeHorizontally\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:$e(e,t,{space:\"between\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return!e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.H},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Je(t,n),type:\"button\",icon:k.uD,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.distributeHorizontally\"),\" \u2014 \").concat((0,c.uY)(\"Alt+H\")),\"aria-label\":(0,x.t)(\"labels.distributeHorizontally\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),(0,w.z)({name:\"distributeVertically\",trackEvent:{category:\"element\"},perform:function(e,t){return{appState:t,elements:$e(e,t,{space:\"between\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return!e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.V},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return(0,S.jsx)(Z.V,{hidden:!Je(t,n),type:\"button\",icon:k.W5,onClick:function(){return r(null)},title:\"\".concat((0,x.t)(\"labels.distributeVertically\"),\" \u2014 \").concat((0,c.uY)(\"Alt+V\")),\"aria-label\":(0,x.t)(\"labels.distributeVertically\"),visible:(0,l.N)((0,M.Lm)(t),n)})}}),n(8634)),et=n(267),tt=(0,w.z)({name:\"flipHorizontal\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:rt(e,t,\"horizontal\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyH\"===e.code},contextItemLabel:\"labels.flipHorizontal\",predicate:function(e,t){return function(e,t){var n=(0,l.eD)((0,M.Lm)(e),t);return 1===n.length&&\"text\"!==n[0].type}(e,t)}}),nt=(0,w.z)({name:\"flipVertical\",trackEvent:{category:\"element\"},perform:function(e,t){return{elements:rt(e,t,\"vertical\"),appState:t,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&\"KeyV\"===e.code&&!e[y.tW.CTRL_OR_CMD]},contextItemLabel:\"labels.flipVertical\",predicate:function(e,t){return function(e,t){return 1===(0,l.eD)((0,M.Lm)(e),t).length}(e,t)}}),rt=function(e,t,n){var r=(0,l.eD)((0,M.Lm)(e),t);if(r.length>1)return e;var o=ot(r,t,n),i=(0,c.xn)(o);return e.map((function(e){return i.get(e.id)||e}))},ot=function(e,t,n){return e.forEach((function(e){it(e,t),\"vertical\"===n&&at(e,Math.PI)})),e},it=function(e,t){var n=e.x,r=e.y,o=e.width,a=e.height,l=(0,Qe.LW)(e.angle);(0,i.DR)(e,{angle:(0,Qe.LW)(0)});var s=(0,et.PC)(e,t.zoom),c=!0,u=s.nw;if(u||(c=!1,u=s.ne)){var d,f=0;(0,T.bt)(e)&&e.points.length<3&&(f=2*e.points.reduce((function(e,t){return Math.max(e,t[0])}),0)-e.width),(0,T.bt)(e)&&(d=(0,Fe.Ut)(e,e.points));var p=(0,Fe.qf)(e);if((0,T.bt)(e)&&e.points.length<3){for(var h=1;h<e.points.length;h++)P._.movePoints(e,[{index:h,point:[-e.points[h][0],e.points[h][1]]}]);P._.normalizePoints(e)}else{var m=d?d[2]-d[0]:p[2]-p[0],g=d?[d[0],d[1]]:[p[0],p[1]];(0,Qe.l2)((new Map).set(e.id,e),!1,e,c?\"nw\":\"ne\",!0,c?g[0]+m:g[0]-m,g[1])}var v=(0,Qe.LW)(2*Math.PI-l);if(v<0&&(v=(0,Qe.LW)(v+2*Math.PI)),(0,i.DR)(e,{angle:v}),(0,i.DR)(e,{x:n+f,y:r,width:o,height:a}),(0,z.Ww)(e),d&&(0,T.bt)(e)){var b=(0,Fe.Ut)(e,e.points),y=d[0]-b[0]+(d[2]-b[2]);(0,i.DR)(e,{x:e.x+.5*y,y:e.y,width:o,height:a})}}else(0,i.DR)(e,{angle:l})},at=function(e,t){var n=e.x,r=e.y,o=(0,Qe.LW)(e.angle+t);o<0&&(o=(0,Qe.LW)(2*Math.PI+o)),(0,i.DR)(e,{angle:o}),(0,i.DR)(e,{x:n,y:r})},lt=n(4688);function st(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ct(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?st(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):st(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ut=(0,w.z)({name:\"gridMode\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!e.gridSize}},perform:function(e,t){return{appState:ct(ct({},t),{},{gridSize:this.checked(t)?null:E.k}),commitToHistory:!1}},checked:function(e){return null!==e.gridSize},predicate:function(e,t,n){return void 0===n.gridModeEnabled},contextItemLabel:\"labels.showGrid\",keyTest:function(e){return e[y.tW.CTRL_OR_CMD]&&e.code===y.aU.QUOTE}});function dt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ft(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dt(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var pt=(0,w.z)({name:\"zenMode\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!e.zenModeEnabled}},perform:function(e,t){return{appState:ft(ft({},t),{},{zenModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.zenModeEnabled},predicate:function(e,t,n){return void 0===n.zenModeEnabled},contextItemLabel:\"buttons.zenMode\",keyTest:function(e){return!e[y.tW.CTRL_OR_CMD]&&e.altKey&&e.code===y.aU.Z}}),ht=n(4958),mt=n(202),gt=n(4929);function vt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function bt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?vt(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):vt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var yt=(0,w.z)({name:\"toggleLock\",trackEvent:{category:\"element\"},perform:function(e,t){var n=(0,l.eD)(e,t,!0);if(!n.length)return!1;var r=xt(n),o=(0,c.xn)(n),a=\"lock\"===r;return{elements:e.map((function(e){return o.has(e.id)?(0,i.BE)(e,{locked:a}):e})),appState:bt(bt({},t),{},{selectedLinearElement:a?null:t.selectedLinearElement}),commitToHistory:!0}},contextItemLabel:function(e,t){var n=(0,l.eD)(e,t,!1);return 1===n.length?n[0].locked?\"labels.elementLock.unlock\":\"labels.elementLock.lock\":\"lock\"===xt(n)?\"labels.elementLock.lockAll\":\"labels.elementLock.unlockAll\"},keyTest:function(e,t,n){return e.key.toLocaleLowerCase()===y.tW.L&&e[y.tW.CTRL_OR_CMD]&&e.shiftKey&&(0,l.eD)(n,t,!1).length>0}}),xt=function(e){return e.some((function(e){return!e.locked}))?\"lock\":\"unlock\"};function wt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function kt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wt(Object(n),!0).forEach((function(t){(0,I.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Et=(0,w.z)({name:\"toggleLinearEditor\",trackEvent:{category:\"element\"},predicate:function(e,t){var n=(0,l.eD)(e,t);return!(1!==n.length||!(0,T.bt)(n[0]))},perform:function(e,t,n,r){var o,i=(0,l.eD)((0,M.Lm)(e),t,!0)[0],a=(null===(o=t.editingLinearElement)||void 0===o?void 0:o.elementId)===i.id?null:new P._(i,r.scene);return{appState:kt(kt({},t),{},{editingLinearElement:a}),commitToHistory:!1}},contextItemLabel:function(e,t){var n,r=(0,l.eD)((0,M.Lm)(e),t,!0)[0];return(null===(n=t.editingLinearElement)||void 0===n?void 0:n.elementId)===r.id?\"labels.lineEditor.exit\":\"labels.lineEditor.edit\"}})},7901:function(e,t,n){\"use strict\";n.d(t,{N:function(){return r},z:function(){return o}});var r=[],o=function(e){return r=r.concat(e),e}},785:function(e,t,n){\"use strict\";n.d(t,{C:function(){return l}});var r=n(2335),o=n(8211),i=n(6340),a={toggleTheme:[(0,i.uY)(\"Shift+Alt+D\")],saveScene:[(0,i.uY)(\"CtrlOrCmd+S\")],loadScene:[(0,i.uY)(\"CtrlOrCmd+O\")],clearCanvas:[(0,i.uY)(\"CtrlOrCmd+Delete\")],imageExport:[(0,i.uY)(\"CtrlOrCmd+Shift+E\")],cut:[(0,i.uY)(\"CtrlOrCmd+X\")],copy:[(0,i.uY)(\"CtrlOrCmd+C\")],paste:[(0,i.uY)(\"CtrlOrCmd+V\")],copyStyles:[(0,i.uY)(\"CtrlOrCmd+Alt+C\")],pasteStyles:[(0,i.uY)(\"CtrlOrCmd+Alt+V\")],selectAll:[(0,i.uY)(\"CtrlOrCmd+A\")],deleteSelectedElements:[(0,i.uY)(\"Delete\")],duplicateSelection:[(0,i.uY)(\"CtrlOrCmd+D\"),(0,i.uY)(\"Alt+\".concat((0,o.t)(\"helpDialog.drag\")))],sendBackward:[(0,i.uY)(\"CtrlOrCmd+[\")],bringForward:[(0,i.uY)(\"CtrlOrCmd+]\")],sendToBack:[r.Um?(0,i.uY)(\"CtrlOrCmd+Alt+[\"):(0,i.uY)(\"CtrlOrCmd+Shift+[\")],bringToFront:[r.Um?(0,i.uY)(\"CtrlOrCmd+Alt+]\"):(0,i.uY)(\"CtrlOrCmd+Shift+]\")],copyAsPng:[(0,i.uY)(\"Shift+Alt+C\")],copyAsSvg:[],group:[(0,i.uY)(\"CtrlOrCmd+G\")],ungroup:[(0,i.uY)(\"CtrlOrCmd+Shift+G\")],gridMode:[(0,i.uY)(\"CtrlOrCmd+'\")],zenMode:[(0,i.uY)(\"Alt+Z\")],stats:[(0,i.uY)(\"Alt+\/\")],addToLibrary:[],flipHorizontal:[(0,i.uY)(\"Shift+H\")],flipVertical:[(0,i.uY)(\"Shift+V\")],viewMode:[(0,i.uY)(\"Alt+R\")],hyperlink:[(0,i.uY)(\"CtrlOrCmd+K\")],toggleLock:[(0,i.uY)(\"CtrlOrCmd+Shift+L\")]},l=function(e){var t=a[e];return t&&t.length>0?t[0]:\"\"}},7047:function(e,t,n){\"use strict\";n.d(t,{L:function(){return r}});var r=function(e,t,n,r){try{if(\"undefined\"==typeof window||{REACT_APP_BACKEND_V2_GET_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/\",REACT_APP_BACKEND_V2_POST_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/post\/\",REACT_APP_LIBRARY_URL:\"https:\/\/libraries.excalidraw.com\",REACT_APP_LIBRARY_BACKEND:\"https:\/\/us-central1-excalidraw-room-persistence.cloudfunctions.net\/libraries\",REACT_APP_PORTAL_URL:\"https:\/\/portal.excalidraw.com\",REACT_APP_WS_SERVER_URL:\"\",REACT_APP_FIREBASE_CONFIG:'{\"apiKey\":\"AIzaSyAd15pYlMci_xIp9ko6wkEsDzAAA0Dn0RU\",\"authDomain\":\"excalidraw-room-persistence.firebaseapp.com\",\"databaseURL\":\"https:\/\/excalidraw-room-persistence.firebaseio.com\",\"projectId\":\"excalidraw-room-persistence\",\"storageBucket\":\"excalidraw-room-persistence.appspot.com\",\"messagingSenderId\":\"654800341332\",\"appId\":\"1:654800341332:web:4a692de832b55bd57ce0c1\"}',REACT_APP_GOOGLE_ANALYTICS_ID:\"UA-387204-13\",REACT_APP_MATOMO_URL:\"https:\/\/excalidraw.matomo.cloud\/\",REACT_APP_CDN_MATOMO_TRACKER_URL:\"\/\/cdn.matomo.cloud\/excalidraw.matomo.cloud\/matomo.js\",REACT_APP_MATOMO_SITE_ID:\"1\",REACT_APP_PLUS_APP:\"https:\/\/app.excalidraw.com\",PKG_NAME:\"@excalidraw\/excalidraw\",PKG_VERSION:\"0.15.3\",IS_EXCALIDRAW_NPM_PACKAGE:!0}.JEST_WORKER_ID)return;window.gtag&&window.gtag(\"event\",t,{event_category:e,event_label:n,value:r}),window._paq&&window._paq.push([\"trackEvent\",e,t,n,r])}catch(e){console.error(\"error during analytics\",e)}}},8897:function(e,t,n){\"use strict\";n.d(t,{EN:function(){return p},eS:function(){return f},im:function(){return s},l$:function(){return h},s:function(){return d}});var r=n(5284),o=n(2335),i=n(8211),a=n(6340),l=o.ZB.includes(devicePixelRatio)?devicePixelRatio:1,s=function(){return{showWelcomeScreen:!1,theme:o.C6.LIGHT,collaborators:new Map,currentChartType:\"bar\",currentItemBackgroundColor:o.HN.backgroundColor,currentItemEndArrowhead:\"arrow\",currentItemFillStyle:o.HN.fillStyle,currentItemFontFamily:o.rk,currentItemFontSize:o.n5,currentItemOpacity:o.HN.opacity,currentItemRoughness:o.HN.roughness,currentItemStartArrowhead:null,currentItemStrokeColor:o.HN.strokeColor,currentItemRoundness:\"round\",currentItemStrokeStyle:o.HN.strokeStyle,currentItemStrokeWidth:o.HN.strokeWidth,currentItemTextAlign:o.Hg,cursorButton:\"up\",draggingElement:null,editingElement:null,editingGroupId:null,editingLinearElement:null,activeTool:{type:\"selection\",customType:null,locked:o.HN.locked,lastActiveTool:null},penMode:!1,penDetected:!1,errorMessage:null,exportBackground:!0,exportScale:l,exportEmbedScene:!1,exportWithDarkMode:!1,fileHandle:null,gridSize:null,isBindingEnabled:!0,isSidebarDocked:!1,isLoading:!1,isResizing:!1,isRotating:!1,lastPointerDownWith:\"mouse\",multiElement:null,name:\"\".concat((0,i.t)(\"labels.untitled\"),\"-\").concat((0,a.Fc)()),contextMenu:null,openMenu:null,openPopup:null,openSidebar:null,openDialog:null,pasteDialog:{shown:!1,data:null},previousSelectedElementIds:{},resizingElement:null,scrolledOutside:!1,scrollX:0,scrollY:0,selectedElementIds:{},selectedGroupIds:{},selectionElement:null,shouldCacheIgnoreZoom:!1,showStats:!1,startBoundElement:null,suggestedBindings:[],toast:null,viewBackgroundColor:r.white,zenModeEnabled:!1,zoom:{value:1},viewModeEnabled:!1,pendingImageElementId:null,showHyperlinkPopup:!1,selectedLinearElement:null}},c={showWelcomeScreen:{browser:!0,export:!1,server:!1},theme:{browser:!0,export:!1,server:!1},collaborators:{browser:!1,export:!1,server:!1},currentChartType:{browser:!0,export:!1,server:!1},currentItemBackgroundColor:{browser:!0,export:!1,server:!1},currentItemEndArrowhead:{browser:!0,export:!1,server:!1},currentItemFillStyle:{browser:!0,export:!1,server:!1},currentItemFontFamily:{browser:!0,export:!1,server:!1},currentItemFontSize:{browser:!0,export:!1,server:!1},currentItemRoundness:{browser:!0,export:!1,server:!1},currentItemOpacity:{browser:!0,export:!1,server:!1},currentItemRoughness:{browser:!0,export:!1,server:!1},currentItemStartArrowhead:{browser:!0,export:!1,server:!1},currentItemStrokeColor:{browser:!0,export:!1,server:!1},currentItemStrokeStyle:{browser:!0,export:!1,server:!1},currentItemStrokeWidth:{browser:!0,export:!1,server:!1},currentItemTextAlign:{browser:!0,export:!1,server:!1},cursorButton:{browser:!0,export:!1,server:!1},draggingElement:{browser:!1,export:!1,server:!1},editingElement:{browser:!1,export:!1,server:!1},editingGroupId:{browser:!0,export:!1,server:!1},editingLinearElement:{browser:!1,export:!1,server:!1},activeTool:{browser:!0,export:!1,server:!1},penMode:{browser:!0,export:!1,server:!1},penDetected:{browser:!0,export:!1,server:!1},errorMessage:{browser:!1,export:!1,server:!1},exportBackground:{browser:!0,export:!1,server:!1},exportEmbedScene:{browser:!0,export:!1,server:!1},exportScale:{browser:!0,export:!1,server:!1},exportWithDarkMode:{browser:!0,export:!1,server:!1},fileHandle:{browser:!1,export:!1,server:!1},gridSize:{browser:!0,export:!0,server:!0},height:{browser:!1,export:!1,server:!1},isBindingEnabled:{browser:!1,export:!1,server:!1},isSidebarDocked:{browser:!0,export:!1,server:!1},isLoading:{browser:!1,export:!1,server:!1},isResizing:{browser:!1,export:!1,server:!1},isRotating:{browser:!1,export:!1,server:!1},lastPointerDownWith:{browser:!0,export:!1,server:!1},multiElement:{browser:!1,export:!1,server:!1},name:{browser:!0,export:!1,server:!1},offsetLeft:{browser:!1,export:!1,server:!1},offsetTop:{browser:!1,export:!1,server:!1},contextMenu:{browser:!1,export:!1,server:!1},openMenu:{browser:!0,export:!1,server:!1},openPopup:{browser:!1,export:!1,server:!1},openSidebar:{browser:!0,export:!1,server:!1},openDialog:{browser:!1,export:!1,server:!1},pasteDialog:{browser:!1,export:!1,server:!1},previousSelectedElementIds:{browser:!0,export:!1,server:!1},resizingElement:{browser:!1,export:!1,server:!1},scrolledOutside:{browser:!0,export:!1,server:!1},scrollX:{browser:!0,export:!1,server:!1},scrollY:{browser:!0,export:!1,server:!1},selectedElementIds:{browser:!0,export:!1,server:!1},selectedGroupIds:{browser:!0,export:!1,server:!1},selectionElement:{browser:!1,export:!1,server:!1},shouldCacheIgnoreZoom:{browser:!0,export:!1,server:!1},showStats:{browser:!0,export:!1,server:!1},startBoundElement:{browser:!1,export:!1,server:!1},suggestedBindings:{browser:!1,export:!1,server:!1},toast:{browser:!1,export:!1,server:!1},viewBackgroundColor:{browser:!0,export:!0,server:!0},width:{browser:!1,export:!1,server:!1},zenModeEnabled:{browser:!0,export:!1,server:!1},zoom:{browser:!0,export:!1,server:!1},viewModeEnabled:{browser:!1,export:!1,server:!1},pendingImageElementId:{browser:!1,export:!1,server:!1},showHyperlinkPopup:{browser:!1,export:!1,server:!1},selectedLinearElement:{browser:!0,export:!1,server:!1}},u=function(e,t){for(var n={},r=0,o=Object.keys(e);r<o.length;r++){var i=o[r],a=c[i];if(null!=a&&a[t]){var l=e[i];n[i]=l}}return n},d=function(e){return u(e,\"export\")},f=function(e){return u(e,\"server\")},p=function(e){return\"eraser\"===e.activeTool.type},h=function(e){return\"hand\"===e.activeTool.type}},5674:function(e,t,n){\"use strict\";n.d(t,{dz:function(){return k},i$:function(){return b},ps:function(){return O}});var r=n(1930),o=n(7169),i=n(2577),a=n(56),l=n(2335),s=n(1047),c=n(6954);function u(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return d(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=32,m=12,g=256,v=\"NOT_SPREADSHEET\",b=\"VALID_SPREADSHEET\",y=function(e){var t=\/^([-+]?)[$\u20ac\u00a3\u00a5\u20a9]?([-+]?)([\\d.,]+)[%]?$\/.exec(e);return t?parseFloat(\"\".concat((t[1]||t[2])+t[3]).replace(\/,\/g,\"\")):null},x=function(e,t){return e.slice(1).every((function(e){return null!==y(e[t])}))},w=function(e){var t=e[0].length;if(t>2)return{type:v,reason:\"More than 2 columns\"};if(1===t){if(!x(e,0))return{type:v,reason:\"Value is not numeric\"};var n=null===y(e[0][0]),r=(n?e.slice(1):e).map((function(e){return y(e[0])}));return r.length<2?{type:v,reason:\"Less than two rows\"}:{type:b,spreadsheet:{title:n?e[0][0]:null,labels:null,values:r}}}var o=x(e,0),a=x(e,1);if(!o&&!a)return{type:v,reason:\"Value is not numeric\"};var l=a?[0,1]:[1,0],s=(0,i.Z)(l,2),c=s[0],u=s[1],d=null===y(e[0][u]),f=d?e.slice(1):e;return f.length<2?{type:v,reason:\"Less than 2 rows\"}:{type:b,spreadsheet:{title:d?e[0][u]:null,labels:f.map((function(e){return e[c]})),values:f.map((function(e){return y(e[u])}))}}},k=function(e){var t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\"\\t\")}));if(t.length&&2!==t[0].length&&(t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\",\")}))),0===t.length)return{type:v,reason:\"No values\"};var n=t[0].length;if(!t.every((function(e){return e.length===n})))return{type:v,reason:\"All rows don't have same number of columns\"};var r=w(t);if(r.type!==b){var o=w(function(e){for(var t=[],n=0;n<e[0].length;n++){for(var r=[],o=0;o<e.length;o++)r.push(e[o][n]);t.push(r)}return t}(t));if(o.type===b)return o}return r},E=a.Z.elementBackground.slice(2,a.Z.elementBackground.length),S={strokeColor:a.Z.elementStroke[0]},j=function(e){return{chartWidth:44*e.values.length+m,chartHeight:280}},_=function(e,t,n,o,i,c){var u=j(e),d=u.chartWidth,f=u.chartHeight,v=e.title?(0,s.VL)(p(p({backgroundColor:i,groupIds:[o]},S),{},{text:e.title,x:t+d\/2,y:n-g-24-l.n5,roundness:null,textAlign:\"center\"})):null,b=c?(0,s.Up)(p(p({backgroundColor:i,groupIds:[o]},S),{},{type:\"rectangle\",x:t,y:n-f,width:d,height:f,strokeColor:a.Z.elementStroke[0],fillStyle:\"solid\",opacity:6})):null;return[].concat((0,r.Z)(b?[b]:[]),(0,r.Z)(v?[v]:[]),(0,r.Z)(function(e,t,n,r,o){var i;return(null===(i=e.labels)||void 0===i?void 0:i.map((function(e,i){return(0,s.VL)(p(p({groupIds:[r],backgroundColor:o},S),{},{text:e.length>8?\"\".concat(e.slice(0,5),\"...\"):e,x:t+44*i+24,y:n+6,width:h,angle:5.87,fontSize:16,textAlign:\"center\",verticalAlign:\"top\"}))})))||[]}(e,t,n,o,i)),(0,r.Z)(function(e,t,n,o,i){var a=(0,s.VL)(p(p({groupIds:[o],backgroundColor:i},S),{},{x:t-m,y:n-m,text:\"0\",textAlign:\"right\"}));return[a,(0,s.VL)(p(p({groupIds:[o],backgroundColor:i},S),{},{x:t-m,y:n-g-a.height\/2,text:Math.max.apply(Math,(0,r.Z)(e.values)).toLocaleString(),textAlign:\"right\"}))]}(e,t,n,o,i)),(0,r.Z)(function(e,t,n,r,o){var i=j(e),a=i.chartWidth,l=i.chartHeight;return[(0,s.y8)(p(p({backgroundColor:o,groupIds:[r]},S),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,width:a,points:[[0,0],[a,0]]})),(0,s.y8)(p(p({backgroundColor:o,groupIds:[r]},S),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,height:l,points:[[0,0],[0,-l]]})),(0,s.y8)(p(p({backgroundColor:o,groupIds:[r]},S),{},{type:\"line\",x:t,y:n-g-m,startArrowhead:null,endArrowhead:null,strokeStyle:\"dotted\",width:a,opacity:50,points:[[0,0],[a,0]]}))]}(e,t,n,o,i)))},O=function(e,t,n,o){return\"line\"===e?function(e,t,n){var o,i=Math.max.apply(Math,(0,r.Z)(e.values)),a=(0,c.kb)(),d=E[Math.floor(Math.random()*E.length)],f=0,h=[],v=u(e.values);try{for(v.s();!(o=v.n()).done;){var b=o.value,y=44*f,x=-b\/i*g;h.push([y,x]),f++}}catch(e){v.e(e)}finally{v.f()}var w=Math.max.apply(Math,(0,r.Z)(h.map((function(e){return e[0]})))),k=Math.max.apply(Math,(0,r.Z)(h.map((function(e){return e[1]})))),j=Math.min.apply(Math,(0,r.Z)(h.map((function(e){return e[0]})))),O=Math.min.apply(Math,(0,r.Z)(h.map((function(e){return e[1]})))),C=(0,s.y8)(p(p({backgroundColor:d,groupIds:[a]},S),{},{type:\"line\",x:t+m+16,y:n-m,startArrowhead:null,endArrowhead:null,height:k-O,width:w-j,strokeWidth:2,points:h})),I=e.values.map((function(e,r){var o=44*r+6,l=-e\/i*g+6;return(0,s.Up)(p(p({backgroundColor:d,groupIds:[a]},S),{},{fillStyle:\"solid\",strokeWidth:2,type:\"ellipse\",x:t+o+16,y:n+l-24,width:m,height:m}))})),M=e.values.map((function(e,r){var o=44*r+6,l=e\/i*g+6+m;return(0,s.y8)(p(p({backgroundColor:d,groupIds:[a]},S),{},{type:\"line\",x:t+o+16+6,y:n-l,startArrowhead:null,endArrowhead:null,height:l,strokeStyle:\"dotted\",opacity:50,points:[[0,0],[0,l]]}))}));return[].concat((0,r.Z)(_(e,t,n,a,d,\"production\"===l.Vi.DEVELOPMENT)),[C],(0,r.Z)(M),(0,r.Z)(I))}(t,n,o):function(e,t,n){var o=Math.max.apply(Math,(0,r.Z)(e.values)),i=(0,c.kb)(),a=E[Math.floor(Math.random()*E.length)],u=e.values.map((function(e,r){var l=e\/o*g;return(0,s.Up)(p(p({backgroundColor:a,groupIds:[i]},S),{},{type:\"rectangle\",x:t+44*r+m,y:n-l-m,width:h,height:l}))}));return[].concat((0,r.Z)(u),(0,r.Z)(_(e,t,n,i,a,\"production\"===l.Vi.DEVELOPMENT)))}(t,n,o)}},8982:function(e,t,n){\"use strict\";n.d(t,{X:function(){return o},f:function(){return i}});var r=n(56),o=function(e,t){if(null!=t&&t.collaborators){var n=t.collaborators.get(e);if(null!=n&&n.color)return n.color}var o=e.split(\"\").reduce((function(e,t){return e+t.charCodeAt(0)}),0),i=r.Z.elementBackground.slice(3),a=r.Z.elementStroke.slice(3);return{background:i[o%i.length],stroke:a[o%a.length]}},i=function(e){return null!=e&&e.trim()?e.trim()[0].toUpperCase():\"?\"}},6665:function(e,t,n){\"use strict\";n.d(t,{dd:function(){return _},mQ:function(){return S},uR:function(){return j},vQ:function(){return x},vt:function(){return b},wx:function(){return v}});var r=n(7169),o=n(8950),i=n(2975),a=n.n(i),l=n(4162),s=n(5674),c=n(2335),u=n(1974),d=n(6340);function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=\"\",m=!1,g=\"clipboard\"in navigator&&\"readText\"in navigator.clipboard,v=\"clipboard\"in navigator&&\"writeText\"in navigator.clipboard,b=\"clipboard\"in navigator&&\"write\"in navigator.clipboard&&\"ClipboardItem\"in window&&\"toBlob\"in HTMLCanvasElement.prototype,y=function(e){return!(![c.r8.excalidraw,c.r8.excalidrawClipboard].includes(null==e?void 0:e.type)||!Array.isArray(e.elements))},x=function(){var e=(0,o.Z)(a().mark((function e(t,n,r){var o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o={type:c.r8.excalidrawClipboard,elements:t,files:r?t.reduce((function(e,t){return(0,u.wi)(t)&&r[t.fileId]&&(e[t.fileId]=r[t.fileId]),e}),{}):void 0},i=JSON.stringify(o),h=i,e.prev=3,m=!1,e.next=7,_(i);case 7:e.next=13;break;case 9:e.prev=9,e.t0=e.catch(3),m=!0,console.error(e.t0);case 13:case\"end\":return e.stop()}}),e,null,[[3,9]])})));return function(t,n,r){return e.apply(this,arguments)}}(),w=function(){if(!h)return{};try{return JSON.parse(h)}catch(e){return console.error(e),{}}},k=function(e){var t=(0,s.dz)(e);return t.type===s.i$?{spreadsheet:t.spreadsheet}:null},E=function(){var e=(0,o.Z)(a().mark((function e(t){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!t){e.next=5;break}e.t0=null===(n=t.clipboardData)||void 0===n?void 0:n.getData(\"text\/plain\"),e.next=11;break;case 5:if(e.t1=g,!e.t1){e.next=10;break}return e.next=9,navigator.clipboard.readText();case 9:e.t1=e.sent;case 10:e.t0=e.t1;case 11:return r=e.t0,e.abrupt(\"return\",(r||\"\").trim());case 15:return e.prev=15,e.t2=e.catch(0),e.abrupt(\"return\",\"\");case 18:case\"end\":return e.stop()}}),e,null,[[0,15]])})));return function(t){return e.apply(this,arguments)}}(),S=function(){var e=(0,o.Z)(a().mark((function e(t){var n,r,o,i,s,c=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=c.length>1&&void 0!==c[1]&&c[1],e.next=3,E(t);case 3:if((r=e.sent)&&(n||!r.includes(l.oj))){e.next=6;break}return e.abrupt(\"return\",w());case 6:if(!(o=!n&&k(r))){e.next=9;break}return e.abrupt(\"return\",o);case 9:if(i=w(),e.prev=10,s=JSON.parse(r),!y(s)){e.next=14;break}return e.abrupt(\"return\",{elements:s.elements,files:s.files,text:n?JSON.stringify(s.elements,null,2):void 0});case 14:e.next=18;break;case 16:e.prev=16,e.t0=e.catch(10);case 18:return e.abrupt(\"return\",m&&i.elements?p(p({},i),{},{text:n?JSON.stringify(i.elements,null,2):void 0}):{text:r});case 19:case\"end\":return e.stop()}}),e,null,[[10,16]])})));return function(t){return e.apply(this,arguments)}}(),j=function(){var e=(0,o.Z)(a().mark((function e(t){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,navigator.clipboard.write([new window.ClipboardItem((0,r.Z)({},c.LO.png,t))]);case 3:case 21:e.next=24;break;case 5:if(e.prev=5,e.t0=e.catch(0),!(0,d.y8)(t)){e.next=23;break}return e.t1=navigator.clipboard,e.t2=window.ClipboardItem,e.t3=r.Z,e.t4={},e.t5=c.LO.png,e.next=15,t;case 15:return e.t6=e.sent,e.t7=(0,e.t3)(e.t4,e.t5,e.t6),e.t8=new e.t2(e.t7),e.t9=[e.t8],e.next=21,e.t1.write.call(e.t1,e.t9);case 23:throw e.t0;case 24:case\"end\":return e.stop()}}),e,null,[[0,5]])})));return function(t){return e.apply(this,arguments)}}(),_=function(){var e=(0,o.Z)(a().mark((function e(t){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!1,!v){e.next=11;break}return e.prev=2,e.next=5,navigator.clipboard.writeText(t||\"\");case 5:n=!0,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(e.t0);case 11:if(n||O(t||\" \")){e.next=13;break}throw new Error(\"couldn't copy\");case 13:case\"end\":return e.stop()}}),e,null,[[2,8]])})));return function(t){return e.apply(this,arguments)}}(),O=function(e){var t=\"rtl\"===document.documentElement.getAttribute(\"dir\"),n=document.createElement(\"textarea\");n.style.border=\"0\",n.style.padding=\"0\",n.style.margin=\"0\",n.style.position=\"absolute\",n.style[t?\"right\":\"left\"]=\"-9999px\";var r=window.pageYOffset||document.documentElement.scrollTop;n.style.top=\"\".concat(r,\"px\"),n.style.fontSize=\"12pt\",n.setAttribute(\"readonly\",\"\"),n.value=e,document.body.appendChild(n);var o=!1;try{n.select(),n.setSelectionRange(0,n.value.length),o=document.execCommand(\"copy\")}catch(e){console.error(e)}return n.remove(),o}},56:function(e,t,n){\"use strict\";var r=n(1930),o=n(5284),i=function(e){return[o.red[e],o.pink[e],o.grape[e],o.violet[e],o.indigo[e],o.blue[e],o.cyan[e],o.teal[e],o.green[e],o.lime[e],o.yellow[e],o.orange[e]]};t.Z={canvasBackground:[o.white,o.gray[0],o.gray[1]].concat((0,r.Z)(i(0))),elementBackground:[\"transparent\",o.gray[4],o.gray[6]].concat((0,r.Z)(i(6))),elementStroke:[o.black,o.gray[8],o.gray[7]].concat((0,r.Z)(i(9)))}},6798:function(e,t,n){\"use strict\";n.d(t,{o:function(){return f},w:function(){return d}});var r=n(2577),o=n(4739),i=n(6710),a=n(8211),l=n(9487),s=n(2134),c=n(7046),u=n(4512),d=(0,o.cn)(null),f=function(){var e=(0,o.KO)(d,l.yE),t=(0,r.Z)(e,2),n=t[0],f=t[1],p=(0,s.eh)();return n&&\"clearCanvas\"===n?(0,u.jsx)(c.Z,{onConfirm:function(){p.executeAction(i.mo),f(null)},onCancel:function(){return f(null)},title:(0,a.t)(\"clearCanvasDialog.title\"),children:(0,u.jsxs)(\"p\",{className:\"clear-canvas__content\",children:[\" \",(0,a.t)(\"alerts.clearReset\")]})}):null}},2134:function(e,t,n){\"use strict\";n.d(t,{ZP:function(){return Kr},Fy:function(){return wr},eh:function(){return _r},gF:function(){return Sr},J0:function(){return kr},bd:function(){return Er},n9:function(){return jr}});var r=n(6655),o=n(2577),i=n(1930),a=n(8950),l=n(8821),s=n(5169),c=n(3173),u=n(2248),d=n(7245),f=n(2312),p=n(7169),h=n(2975),m=n.n(h),g=n(9787),v=n.n(g),b=n(5156),y=n(8234),x=n(45),w=n(5605),k=n(6710),E=n(3646),S=n(1319),j=n(8211),_=n(6066),O=n(1935),C=n(8290),I=n(6340),M=n(2335),T=n(4512);function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function D(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var A=function(e,t,n){var r=!1;if(!(t.multiElement||t.resizingElement||t.editingElement||t.draggingElement)){var o=n();if(null===o)return{commitToHistory:r};var i=(0,I.xn)(e),a=o.elements,l=(0,I.xn)(a),s=e.filter((function(e){return!l.has(e.id)})),c=a.map((function(e){return(0,O.BE)(i.get(e.id)||e,e)})).concat(s.map((function(e){return(0,O.BE)(e,{isDeleted:!0})})));return(0,C.$q)(c,s),{elements:c,appState:D(D({},t),o.appState),commitToHistory:r,syncHistory:!0}}return{commitToHistory:r}},L=n(7047),Z=function(e,t,n,o,i,a){if(e.trackEvent)try{if(\"object\"===(0,r.Z)(e.trackEvent))(!e.trackEvent.predicate||e.trackEvent.predicate(n,o,a))&&(0,L.L)(e.trackEvent.category,e.trackEvent.action||e.name,\"\".concat(t,\" (\").concat(i.device.isMobile?\"mobile\":\"desktop\",\")\"))}catch(e){console.error(\"error while logging action:\",e)}},z=function(){function e(t,n,r,o){var i=this;(0,l.Z)(this,e),this.actions={},this.renderAction=function(e,t){var n=i.app.props.UIOptions.canvasActions;if(i.actions[e]&&\"PanelComponent\"in i.actions[e]&&(!(e in n)||n[e])){var r=i.actions[e],o=r.PanelComponent;o.displayName=\"PanelComponent\";var a=i.getElementsIncludingDeleted(),l=i.getAppState();return(0,T.jsx)(o,{elements:i.getElementsIncludingDeleted(),appState:i.getAppState(),updateData:function(e){Z(r,\"ui\",l,a,i.app,e),i.updater(r.perform(i.getElementsIncludingDeleted(),i.getAppState(),e,i.app))},appProps:i.app.props,data:t})}return null},this.isActionEnabled=function(e){var t=i.getElementsIncludingDeleted(),n=i.getAppState();return!e.predicate||e.predicate(t,n,i.app.props,i.app)},this.updater=function(e){if(!e||!(\"then\"in e))return t(e);e.then((function(e){return t(e)}))},this.getAppState=n,this.getElementsIncludingDeleted=r,this.app=o}return(0,s.Z)(e,[{key:\"registerAction\",value:function(e){this.actions[e.name]=e}},{key:\"registerAll\",value:function(e){var t=this;e.forEach((function(e){return t.registerAction(e)}))}},{key:\"handleKeyDown\",value:function(e){var t=this,n=this.app.props.UIOptions.canvasActions,r=Object.values(this.actions).sort((function(e,t){return(t.keyPriority||0)-(e.keyPriority||0)})).filter((function(r){return(!(r.name in n)||n[r.name])&&r.keyTest&&r.keyTest(e,t.getAppState(),t.getElementsIncludingDeleted())}));if(1!==r.length)return r.length>1&&console.warn(\"Canceling as multiple actions match this shortcut\",r),!1;var o=r[0];if(this.getAppState().viewModeEnabled&&!0!==o.viewMode)return!1;var i=this.getElementsIncludingDeleted(),a=this.getAppState();return Z(o,\"keyboard\",a,i,this.app,null),e.preventDefault(),e.stopPropagation(),this.updater(r[0].perform(i,a,null,this.app)),!0}},{key:\"executeAction\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"api\",n=this.getElementsIncludingDeleted(),r=this.getAppState(),o=null;Z(e,t,r,n,this.app,o),this.updater(e.perform(n,r,o,this.app))}}]),e}(),R=n(7901),N=n(8897),B=n(6665),H=n(9485),W=n(7053),F=n(679),U=n(1047),K=n(6938),Y=n(2791),G=n(1974),V=function(e){var t=Array.from(e.values());return{x:q(t,(function(e){return e.x}))\/t.length,y:q(t,(function(e){return e.y}))\/t.length}},X=function(e){var t=(0,o.Z)(e,2),n=t[0],r=t[1];return Math.hypot(n.x-r.x,n.y-r.y)},q=function(e,t){return e.reduce((function(e,n){return e+t(n)}),0)},J=n(242);function $(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ee=function(e){return{selectedElementIds:e.selectedElementIds,selectedGroupIds:e.selectedGroupIds,viewBackgroundColor:e.viewBackgroundColor,editingLinearElement:e.editingLinearElement,editingGroupId:e.editingGroupId,name:e.name}},te=function(){function e(){var t=this;(0,l.Z)(this,e),this.elementCache=new Map,this.recording=!0,this.stateHistory=[],this.redoStack=[],this.lastEntry=null,this.generateEntry=function(e,n){return t.dehydrateHistoryEntry({appState:ee(e),elements:n.reduce((function(t,n){if((0,G.bt)(n)&&e.multiElement&&e.multiElement.id===n.id){if(e.multiElement&&e.multiElement.id===n.id&&n.points.length<2)return t;t.push(Q(Q({},n),{},{points:n.lastCommittedPoint!==n.points[n.points.length-1]?n.points.slice(0,-1):n.points}))}else t.push(n);return t}),[])})}}return(0,s.Z)(e,[{key:\"hydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.parse(n),elements:r.map((function(e){var n,r=null===(n=t.elementCache.get(e.id))||void 0===n?void 0:n.get(e.versionNonce);if(!r)throw new Error(\"Element not found: \".concat(e.id,\":\").concat(e.versionNonce));return r}))}}},{key:\"dehydrateHistoryEntry\",value:function(e){var t=this,n=e.appState,r=e.elements;return{appState:JSON.stringify(n),elements:r.map((function(e){t.elementCache.has(e.id)||t.elementCache.set(e.id,new Map);var n=t.elementCache.get(e.id);return n.has(e.versionNonce)||n.set(e.versionNonce,(0,Y.OL)(e)),{id:e.id,versionNonce:e.versionNonce}}))}}},{key:\"getSnapshotForTest\",value:function(){var e=this;return{recording:this.recording,stateHistory:this.stateHistory.map((function(t){return e.hydrateHistoryEntry(t)})),redoStack:this.redoStack.map((function(t){return e.hydrateHistoryEntry(t)}))}}},{key:\"clear\",value:function(){this.stateHistory.length=0,this.redoStack.length=0,this.lastEntry=null,this.elementCache.clear()}},{key:\"shouldCreateEntry\",value:function(e){var t,n=this.lastEntry;if(!n)return!0;if(e.elements.length!==n.elements.length)return!0;for(var r=e.elements.length-1;r>-1;r--){var o=e.elements[r],i=n.elements[r];if(!o||!i||o.id!==i.id||o.versionNonce!==i.versionNonce)return!0}for(t in e.appState){var a,l;if(\"editingLinearElement\"===t)if((null===(a=e.appState[t])||void 0===a?void 0:a.elementId)===(null===(l=n.appState[t])||void 0===l?void 0:l.elementId))continue;if(\"selectedElementIds\"!==t&&\"selectedGroupIds\"!==t&&e.appState[t]!==n.appState[t])return!0}return!1}},{key:\"pushEntry\",value:function(e,t){var n=this.generateEntry(e,t),r=this.hydrateHistoryEntry(n);if(r){if(!this.shouldCreateEntry(r))return;this.stateHistory.push(n),this.lastEntry=r,this.clearRedoStack()}}},{key:\"clearRedoStack\",value:function(){this.redoStack.splice(0,this.redoStack.length)}},{key:\"redoOnce\",value:function(){if(0===this.redoStack.length)return null;var e=this.redoStack.pop();return void 0!==e?(this.stateHistory.push(e),this.hydrateHistoryEntry(e)):null}},{key:\"undoOnce\",value:function(){if(1===this.stateHistory.length)return null;var e=this.stateHistory.pop(),t=this.stateHistory[this.stateHistory.length-1];return void 0!==e?(this.redoStack.push(e),this.hydrateHistoryEntry(t)):null}},{key:\"setCurrentState\",value:function(e,t){this.lastEntry=this.hydrateHistoryEntry(this.generateEntry(e,t))}},{key:\"resumeRecording\",value:function(){this.recording=!0}},{key:\"record\",value:function(e,t){this.recording&&(this.pushEntry(e,t),this.recording=!1)}}]),e}(),ne=n(6552),re=n(3547),oe=n(3063),ie=n(75),ae=n(1564),le=n(746),se=[{icon:E.zu,value:\"selection\",key:_.tW.V,numericKey:_.tW[1],fillable:!0},{icon:E.OW,value:\"rectangle\",key:_.tW.R,numericKey:_.tW[2],fillable:!0},{icon:E.nb,value:\"diamond\",key:_.tW.D,numericKey:_.tW[3],fillable:!0},{icon:E.Re,value:\"ellipse\",key:_.tW.O,numericKey:_.tW[4],fillable:!0},{icon:E.e0,value:\"arrow\",key:_.tW.A,numericKey:_.tW[5],fillable:!0},{icon:E.zb,value:\"line\",key:_.tW.L,numericKey:_.tW[6],fillable:!0},{icon:E.Pm,value:\"freedraw\",key:[_.tW.P,_.tW.X],numericKey:_.tW[7],fillable:!1},{icon:E.VL,value:\"text\",key:_.tW.T,numericKey:_.tW[8],fillable:!1},{icon:E.XB,value:\"image\",key:null,numericKey:_.tW[9],fillable:!1},{icon:E.$q,value:\"eraser\",key:_.tW.E,numericKey:_.tW[0],fillable:!1}],ce=n(2891),ue=n(487),de=n.n(ue),fe=n(631),pe=n.n(fe),he=n(2052),me=n.n(he),ge=n(4010),ve=n.n(ge),be=n(1469),ye=n.n(be),xe=n(9329),we=n.n(xe),ke=n(6578),Ee={};Ee.styleTagTransform=we(),Ee.setAttributes=ve(),Ee.insert=me().bind(null,\"head\"),Ee.domAPI=pe(),Ee.insertStyleElement=ye();de()(ke.Z,Ee),ke.Z&&ke.Z.locals&&ke.Z.locals;var Se=n(785),je=\"separator\",_e=v().memo((function(e){var t=e.actionManager,n=e.items,r=e.top,o=e.left,i=Sr(),a=jr(),l=Er(),s=n.reduce((function(e,n){return!n||n!==je&&n.predicate&&!n.predicate(l,i,t.app.props,t.app)||e.push(n),e}),[]);return(0,T.jsx)(ce.J,{onCloseRequest:function(){return a({contextMenu:null})},top:r,left:o,fitInViewport:!0,offsetLeft:i.offsetLeft,offsetTop:i.offsetTop,viewportWidth:i.width,viewportHeight:i.height,children:(0,T.jsx)(\"ul\",{className:\"context-menu\",onContextMenu:function(e){return e.preventDefault()},children:s.map((function(e,n){var r;if(e===je)return s[n-1]&&s[n-1]!==je?(0,T.jsx)(\"hr\",{className:\"context-menu-item-separator\"},n):null;var o=e.name,c=\"\";return e.contextItemLabel&&(c=\"function\"==typeof e.contextItemLabel?(0,j.t)(e.contextItemLabel(l,i)):(0,j.t)(e.contextItemLabel)),(0,T.jsx)(\"li\",{\"data-testid\":o,onClick:function(){a({contextMenu:null},(function(){t.executeAction(e,\"contextMenu\")}))},children:(0,T.jsxs)(\"button\",{className:(0,x.Z)(\"context-menu-item\",{dangerous:\"deleteSelectedElements\"===o,checkmark:null===(r=e.checked)||void 0===r?void 0:r.call(e,i)}),children:[(0,T.jsx)(\"div\",{className:\"context-menu-item__label\",children:c}),(0,T.jsx)(\"kbd\",{className:\"context-menu-item__shortcut\",children:o?(0,Se.C)(o):\"\"})]})},n)}))})})})),Oe=n(2726),Ce=n(7239),Ie=n(8120),Me=n(6086),Te={};Te.styleTagTransform=we(),Te.setAttributes=ve(),Te.insert=me().bind(null,\"head\"),Te.domAPI=pe(),Te.insertStyleElement=ye();de()(Me.Z,Te),Me.Z&&Me.Z.locals&&Me.Z.locals;var Pe=n(1894),De=n(5710);function Ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ae(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ae(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ze(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ze(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ze(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function ze(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Re=function(e){var t,n=e.appState,r=e.elements,o=e.renderAction,i=(0,ie.Zs)((0,U.Lm)(r),n),a=!1;2===i.length&&((0,G.Xo)(i[0])||(0,G.Xo)(i[1]))&&(a=!0);var l,s=Boolean(n.editingElement),c=wr(),u=\"rtl\"===document.documentElement.getAttribute(\"dir\"),d=(0,ie.$b)(n.activeTool.type)||i.some((function(e){return(0,ie.$b)(e.type)&&!(0,I.Qm)(e.backgroundColor)})),f=(0,ie.$b)(n.activeTool.type)||i.some((function(e){return(0,ie.$b)(e.type)})),p=1===i.length||a,h=(null===(t=i[0])||void 0===t?void 0:t.type)||null,m=Ze(i);try{for(m.s();!(l=m.n()).done;){if(l.value.type!==h){h=null;break}}}catch(e){m.e(e)}finally{m.f()}return(0,T.jsxs)(\"div\",{className:\"panelColumn\",children:[(0,T.jsx)(\"div\",{children:((0,Ie.PD)(n.activeTool.type)&&\"image\"!==n.activeTool.type&&\"image\"!==h||i.some((function(e){return(0,Ie.PD)(e.type)})))&&o(\"changeStrokeColor\")}),f&&(0,T.jsx)(\"div\",{children:o(\"changeBackgroundColor\")}),d&&o(\"changeFillStyle\"),((0,ie.Zd)(n.activeTool.type)||i.some((function(e){return(0,ie.Zd)(e.type)})))&&o(\"changeStrokeWidth\"),(\"freedraw\"===n.activeTool.type||i.some((function(e){return\"freedraw\"===e.type})))&&o(\"changeStrokeShape\"),((0,ie.M9)(n.activeTool.type)||i.some((function(e){return(0,ie.M9)(e.type)})))&&(0,T.jsxs)(T.Fragment,{children:[o(\"changeStrokeStyle\"),o(\"changeSloppiness\")]}),((0,ie.sh)(n.activeTool.type)||i.some((function(e){return(0,ie.sh)(e.type)})))&&(0,T.jsx)(T.Fragment,{children:o(\"changeRoundness\")}),((0,ie.bZ)(n.activeTool.type)||i.some((function(e){return(0,ie.bZ)(e.type)})))&&(0,T.jsxs)(T.Fragment,{children:[o(\"changeFontSize\"),o(\"changeFontFamily\"),(0,De.aV)(i)&&o(\"changeTextAlign\")]}),(0,De.cn)(i)&&o(\"changeVerticalAlign\"),((0,ie.Un)(n.activeTool.type)||i.some((function(e){return(0,ie.Un)(e.type)})))&&(0,T.jsx)(T.Fragment,{children:o(\"changeArrowhead\")}),o(\"changeOpacity\"),(0,T.jsxs)(\"fieldset\",{children:[(0,T.jsx)(\"legend\",{children:(0,j.t)(\"labels.layers\")}),(0,T.jsxs)(\"div\",{className:\"buttonList\",children:[o(\"sendToBack\"),o(\"sendBackward\"),o(\"bringToFront\"),o(\"bringForward\")]})]}),i.length>1&&!a&&(0,T.jsxs)(\"fieldset\",{children:[(0,T.jsx)(\"legend\",{children:(0,j.t)(\"labels.align\")}),(0,T.jsxs)(\"div\",{className:\"buttonList\",children:[u?(0,T.jsxs)(T.Fragment,{children:[o(\"alignRight\"),o(\"alignHorizontallyCentered\"),o(\"alignLeft\")]}):(0,T.jsxs)(T.Fragment,{children:[o(\"alignLeft\"),o(\"alignHorizontallyCentered\"),o(\"alignRight\")]}),i.length>2&&o(\"distributeHorizontally\"),(0,T.jsx)(\"div\",{style:{flexBasis:\"100%\",height:0}}),(0,T.jsxs)(\"div\",{style:{display:\"flex\",flexWrap:\"wrap\",gap:\".5rem\",marginTop:\"-0.5rem\"},children:[o(\"alignTop\"),o(\"alignVerticallyCentered\"),o(\"alignBottom\"),i.length>2&&o(\"distributeVertically\")]})]})]}),!s&&i.length>0&&(0,T.jsxs)(\"fieldset\",{children:[(0,T.jsx)(\"legend\",{children:(0,j.t)(\"labels.actions\")}),(0,T.jsxs)(\"div\",{className:\"buttonList\",children:[!c.isMobile&&o(\"duplicateSelection\"),!c.isMobile&&o(\"deleteSelectedElements\"),o(\"group\"),o(\"ungroup\"),p&&o(\"hyperlink\")]})]})]})},Ne=function(e){var t=e.canvas,n=e.activeTool,r=e.setAppState,o=e.onImageAction,i=e.appState;return(0,T.jsx)(T.Fragment,{children:se.map((function(e,a){var l=e.value,s=e.icon,c=e.key,u=e.numericKey,d=e.fillable,f=(0,j.t)(\"toolBar.\".concat(l)),p=c&&(0,I.Oo)(\"string\"==typeof c?c:c[0]),h=p?\"\".concat(p,\" \").concat((0,j.t)(\"helpDialog.or\"),\" \").concat(u):\"\".concat(u);return(0,T.jsx)(S.V,{className:(0,x.Z)(\"Shape\",{fillable:d}),type:\"radio\",icon:s,checked:n.type===l,name:\"editor-current-shape\",title:\"\".concat((0,I.Oo)(f),\" \u2014 \").concat(h),keyBindingLabel:u||p,\"aria-label\":(0,I.Oo)(f),\"aria-keyshortcuts\":h,\"data-testid\":\"toolbar-\".concat(l),onPointerDown:function(e){var t=e.pointerType;i.penDetected||\"pen\"!==t||r({penDetected:!0,penMode:!0})},onChange:function(e){var n=e.pointerType;i.activeTool.type!==l&&(0,L.L)(\"toolbar\",l,\"ui\");var a=(0,I.Om)(i,{type:l});r({activeTool:a,multiElement:null,selectedElementIds:{}}),(0,I.Uk)(t,Le(Le({},i),{},{activeTool:a})),\"image\"===l&&o({pointerType:n})}},l)}))})},Be=function(e){var t=e.renderAction;e.zoom;return(0,T.jsx)(Ce.Z.Col,{gap:1,className:\"zoom-actions\",children:(0,T.jsxs)(Ce.Z.Row,{align:\"center\",children:[t(\"zoomOut\"),t(\"resetZoom\"),t(\"zoomIn\")]})})},He=function(e){var t=e.renderAction,n=e.className;return(0,T.jsxs)(\"div\",{className:\"undo-redo-buttons \".concat(n),children:[(0,T.jsx)(\"div\",{className:\"undo-button-container\",children:(0,T.jsx)(Pe.u,{label:(0,j.t)(\"buttons.undo\"),children:t(\"undo\")})}),(0,T.jsx)(\"div\",{className:\"redo-button-container\",children:(0,T.jsxs)(Pe.u,{label:(0,j.t)(\"buttons.redo\"),children:[\" \",t(\"redo\")]})})]})},We=function(e){var t=e.actionManager,n=e.showExitZenModeBtn;return(0,T.jsx)(\"button\",{className:(0,x.Z)(\"disable-zen-mode\",{\"disable-zen-mode--visible\":n}),onClick:function(){return t.executeAction(k.JN)},children:(0,j.t)(\"buttons.exitZenMode\")})},Fe=function(e){var t=e.renderAction,n=e.className;return(0,T.jsx)(\"div\",{className:\"finalize-button \".concat(n),children:t(\"finalize\",{size:\"small\"})})},Ue=n(8396),Ke=function(e){var t=e.children,n=e.onClose,r=(0,g.useState)(!!t),i=(0,o.Z)(r,2),a=i[0],l=i[1],s=kr().container,c=v().useCallback((function(){l(!1),n&&n(),null==s||s.focus()}),[n,s]);return(0,T.jsx)(T.Fragment,{children:a&&(0,T.jsx)(Ue.V,{small:!0,onCloseRequest:c,title:(0,j.t)(\"errorDialog.title\"),children:(0,T.jsx)(\"div\",{style:{whiteSpace:\"pre-wrap\"},children:t})})})},Ye=n(434),Ge=n(7955),Ve={};Ve.styleTagTransform=we(),Ve.setAttributes=ve(),Ve.insert=me().bind(null,\"head\"),Ve.domAPI=pe(),Ve.insertStyleElement=ye();de()(Ge.Z,Ve),Ge.Z&&Ge.Z.locals&&Ge.Z.locals;var Xe=n(5284),qe=n(3807),Je=n(1393),$e=n(3024),Qe=\"filter\"in document.createElement(\"canvas\").getContext(\"2d\"),et=function(){return(0,T.jsxs)(\"div\",{children:[(0,T.jsx)(\"h3\",{children:(0,j.t)(\"canvasError.cannotShowPreview\")}),(0,T.jsx)(\"p\",{children:(0,T.jsx)(\"span\",{children:(0,j.t)(\"canvasError.canvasTooBig\")})}),(0,T.jsxs)(\"em\",{children:[\"(\",(0,j.t)(\"canvasError.canvasTooBigTip\"),\")\"]})]})},tt=function(e){var t,n=e.children,r=e.title,o=e.onClick,i=e.color,a=e.shade,l=void 0===a?6:a;return(0,T.jsx)(\"button\",{className:\"ExportDialog-imageExportButton\",style:(t={},(0,p.Z)(t,\"--button-color\",Xe[i][l]),(0,p.Z)(t,\"--button-color-darker\",Xe[i][l+1]),(0,p.Z)(t,\"--button-color-darkest\",Xe[i][l+2]),t),title:r,\"aria-label\":r,onClick:o,children:n})},nt=function(e){var t=e.elements,n=e.appState,r=e.files,i=e.exportPadding,a=void 0===i?M.qy:i,l=e.actionManager,s=e.onExportToPng,c=e.onExportToSvg,u=e.onExportToClipboard,d=(0,ie.N)(t,n),f=(0,g.useState)(d),p=(0,o.Z)(f,2),h=p[0],m=p[1],v=(0,g.useRef)(null),b=(0,g.useState)(null),y=(0,o.Z)(b,2),x=y[0],w=y[1],k=h?(0,ie.eD)(t,n,!0):t;return(0,g.useEffect)((function(){m(d)}),[d]),(0,g.useEffect)((function(){var e=v.current;if(e){var t=e.offsetWidth;t&&(0,$e.NL)({elements:k,appState:n,files:r,exportPadding:a,maxWidthOrHeight:t}).then((function(t){return w(null),(0,Ye._c)(t).then((function(){e.replaceChildren(t)}))})).catch((function(e){console.error(e),w(e)}))}}),[n,r,k,a]),(0,T.jsxs)(\"div\",{className:\"ExportDialog\",children:[(0,T.jsx)(\"div\",{className:\"ExportDialog__preview\",ref:v,children:x&&(0,T.jsx)(et,{})}),Qe&&l.renderAction(\"exportWithDarkMode\"),(0,T.jsx)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"1fr\"},children:(0,T.jsxs)(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"repeat(auto-fit, minmax(190px, 1fr))\",overflow:\"hidden\"},children:[l.renderAction(\"changeExportBackground\"),d&&(0,T.jsx)(qe.o,{checked:h,onChange:function(e){return m(e)},children:(0,j.t)(\"labels.onlySelected\")}),l.renderAction(\"changeExportEmbedScene\")]})}),(0,T.jsxs)(\"div\",{style:{display:\"flex\",alignItems:\"center\",marginTop:\".6em\"},children:[(0,T.jsx)(Ce.Z.Row,{gap:2,children:l.renderAction(\"changeExportScale\")}),(0,T.jsx)(\"p\",{style:{marginLeft:\"1em\",userSelect:\"none\"},children:(0,j.t)(\"buttons.scale\")})]}),(0,T.jsx)(\"div\",{style:{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",margin:\".6em 0\"},children:!Je.kr&&l.renderAction(\"changeProjectName\")}),(0,T.jsxs)(Ce.Z.Row,{gap:2,justifyContent:\"center\",style:{margin:\"2em 0\"},children:[(0,T.jsx)(tt,{color:\"indigo\",title:(0,j.t)(\"buttons.exportToPng\"),\"aria-label\":(0,j.t)(\"buttons.exportToPng\"),onClick:function(){return s(k)},children:\"PNG\"}),(0,T.jsx)(tt,{color:\"red\",title:(0,j.t)(\"buttons.exportToSvg\"),\"aria-label\":(0,j.t)(\"buttons.exportToSvg\"),onClick:function(){return c(k)},children:\"SVG\"}),(B.vt||M.vU)&&(0,T.jsx)(tt,{title:(0,j.t)(\"buttons.copyPngToClipboard\"),onClick:function(){return u(k)},color:\"gray\",shade:7,children:E.BR})]})]})},rt=function(e){var t=e.elements,n=e.appState,r=e.setAppState,o=e.files,i=e.exportPadding,a=void 0===i?M.qy:i,l=e.actionManager,s=e.onExportToPng,c=e.onExportToSvg,u=e.onExportToClipboard,d=v().useCallback((function(){r({openDialog:null})}),[r]);return(0,T.jsx)(T.Fragment,{children:\"imageExport\"===n.openDialog&&(0,T.jsx)(Ue.V,{onCloseRequest:d,title:(0,j.t)(\"buttons.exportImage\"),children:(0,T.jsx)(nt,{elements:t,appState:n,files:o,exportPadding:a,actionManager:l,onExportToPng:s,onExportToSvg:c,onExportToClipboard:u,onCloseRequest:d})})})},ot=n(3195),it={};it.styleTagTransform=we(),it.setAttributes=ve(),it.insert=me().bind(null,\"head\"),it.domAPI=pe(),it.insertStyleElement=ye();de()(ot.Z,it),ot.Z&&ot.Z.locals&&ot.Z.locals;var at=function(e){var t=e.children,n=e.side,r=e.className;return(0,T.jsx)(\"div\",{className:(0,x.Z)(\"FixedSideContainer\",\"FixedSideContainer_side_\".concat(n),r),children:t})},lt=n(1587),st={};st.styleTagTransform=we(),st.setAttributes=ve(),st.insert=me().bind(null,\"head\"),st.domAPI=pe(),st.insertStyleElement=ye();de()(lt.Z,st),lt.Z&&lt.Z.locals&&lt.Z.locals;var ct=function(e){var t=function(e){var t=e.appState,n=e.elements,r=e.isMobile,o=e.device,i=t.activeTool,a=t.isResizing,l=t.isRotating,s=t.lastPointerDownWith,c=null!==t.multiElement;if(\"library\"===t.openSidebar&&!o.canDeviceFitSidebar)return null;if((0,N.EN)(t))return(0,j.t)(\"hints.eraserRevert\");if(\"arrow\"===i.type||\"line\"===i.type)return c?(0,j.t)(\"hints.linearElementMulti\"):(0,j.t)(\"hints.linearElement\");if(\"freedraw\"===i.type)return(0,j.t)(\"hints.freeDraw\");if(\"text\"===i.type)return(0,j.t)(\"hints.text\");if(\"image\"===t.activeTool.type&&t.pendingImageElementId)return(0,j.t)(\"hints.placeImage\");var u=(0,ie.eD)(n,t);if(a&&\"mouse\"===s&&1===u.length){var d=u[0];return(0,G.bt)(d)&&2===d.points.length?(0,j.t)(\"hints.lockAngle\"):(0,G.pC)(d)?(0,j.t)(\"hints.resizeImage\"):(0,j.t)(\"hints.resize\")}if(l&&\"mouse\"===s)return(0,j.t)(\"hints.rotate\");if(1===u.length&&(0,G.iB)(u[0]))return(0,j.t)(\"hints.text_selected\");if(t.editingElement&&(0,G.iB)(t.editingElement))return(0,j.t)(\"hints.text_editing\");if(\"selection\"===i.type){var f;if(\"selection\"===(null===(f=t.draggingElement)||void 0===f?void 0:f.type)&&!t.editingElement&&!t.editingLinearElement)return(0,j.t)(\"hints.deepBoxSelect\");if(!u.length&&!r)return(0,j.t)(\"hints.canvasPanning\")}if(1===u.length){if((0,G.bt)(u[0]))return t.editingLinearElement?t.editingLinearElement.selectedPointsIndices?(0,j.t)(\"hints.lineEditor_pointSelected\"):(0,j.t)(\"hints.lineEditor_nothingSelected\"):(0,j.t)(\"hints.lineEditor_info\");if((0,G.mG)(u[0]))return(0,j.t)(\"hints.bindTextToElement\")}return null}({appState:e.appState,elements:e.elements,isMobile:e.isMobile,device:e.device});return t?(t=(0,I.uY)(t),(0,T.jsx)(\"div\",{className:\"HintViewer\",children:(0,T.jsx)(\"span\",{children:t})})):null},ut=n(1881),dt=n(5440),ft=(n(5422),{CHECKED:E.FC,UNCHECKED:E._C}),pt=function(e){return(0,T.jsxs)(\"label\",{className:(0,x.Z)(\"ToolIcon ToolIcon__lock\",\"ToolIcon_size_\".concat(\"medium\"),{\"is-mobile\":e.isMobile}),title:\"\".concat(e.title,\" \u2014 Q\"),children:[(0,T.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title,\"data-testid\":\"toolbar-lock\"}),(0,T.jsx)(\"div\",{className:\"ToolIcon__icon\",children:e.checked?ft.CHECKED:ft.UNCHECKED})]})},ht=[\"heading\",\"children\"];function mt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mt(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vt=function(e){var t=e.heading,n=e.children,r=(0,Oe.Z)(e,ht),o=kr().id,i=(0,T.jsx)(\"h2\",{className:\"visually-hidden\",id:\"\".concat(o,\"-\").concat(t,\"-title\"),children:(0,j.t)(\"headings.\".concat(t))});return(0,T.jsx)(\"section\",gt(gt({},r),{},{\"aria-labelledby\":\"\".concat(o,\"-\").concat(t,\"-title\"),children:\"function\"==typeof n?n(i):(0,T.jsxs)(T.Fragment,{children:[i,n]})}))},bt=n(756),yt=n(2316),xt={};xt.styleTagTransform=we(),xt.setAttributes=ve(),xt.insert=me().bind(null,\"head\"),xt.domAPI=pe(),xt.insertStyleElement=ye();de()(yt.Z,xt),yt.Z&&yt.Z.locals&&yt.Z.locals;var wt=function(e){var t=e.appState,n=e.setAppState,r=e.isMobile,o=wr(),i=!r;return t.isSidebarDocked&&\"library\"===t.openSidebar?null:(0,T.jsxs)(\"label\",{title:\"\".concat((0,I.Oo)((0,j.t)(\"toolBar.library\"))),children:[(0,T.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:\"editor-library\",onChange:function(e){var t;null===(t=document.querySelector(\".layer-ui__wrapper\"))||void 0===t||t.classList.remove(\"animate\");var r=e.target.checked;n({openSidebar:r?\"library\":null}),r&&(0,L.L)(\"library\",\"toggleLibrary (open)\",\"toolbar (\".concat(o.isMobile?\"mobile\":\"desktop\",\")\"))},checked:\"library\"===t.openSidebar,\"aria-label\":(0,I.Oo)((0,j.t)(\"toolBar.library\")),\"aria-keyshortcuts\":\"0\"}),(0,T.jsxs)(\"div\",{className:\"library-button\",children:[(0,T.jsx)(\"div\",{children:E.Vq}),i&&(0,T.jsx)(\"div\",{className:\"library-button__label\",children:(0,j.t)(\"toolBar.library\")})]})]})},kt=function(e){return e.penDetected?(0,T.jsxs)(\"label\",{className:(0,x.Z)(\"ToolIcon ToolIcon__penMode\",\"ToolIcon_size_\".concat(\"medium\"),{\"is-mobile\":e.isMobile}),title:\"\".concat(e.title),children:[(0,T.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title}),(0,T.jsx)(\"div\",{className:\"ToolIcon__icon\",children:E.tb})]}):null},Et=n(8925),St=n(2681),jt={};jt.styleTagTransform=we(),jt.setAttributes=ve(),jt.insert=me().bind(null,\"head\"),jt.domAPI=pe(),jt.insertStyleElement=ye();de()(St.Z,jt),St.Z&&St.Z.locals&&St.Z.locals;var _t=function(e){var t,n=(0,Et.KP)(e.elements),r=(0,ie.Zs)(e.elements,e.appState),o=(0,Et.KP)(r);return(0,T.jsx)(\"div\",{className:\"Stats\",children:(0,T.jsxs)(ut.W,{padding:2,children:[(0,T.jsx)(\"div\",{className:\"close\",onClick:e.onClose,children:E.Tw}),(0,T.jsx)(\"h3\",{children:(0,j.t)(\"stats.title\")}),(0,T.jsx)(\"table\",{children:(0,T.jsxs)(\"tbody\",{children:[(0,T.jsx)(\"tr\",{children:(0,T.jsx)(\"th\",{colSpan:2,children:(0,j.t)(\"stats.scene\")})}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.elements\")}),(0,T.jsx)(\"td\",{children:e.elements.length})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.width\")}),(0,T.jsx)(\"td\",{children:Math.round(n[2])-Math.round(n[0])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.height\")}),(0,T.jsx)(\"td\",{children:Math.round(n[3])-Math.round(n[1])})]}),1===r.length&&(0,T.jsx)(\"tr\",{children:(0,T.jsx)(\"th\",{colSpan:2,children:(0,j.t)(\"stats.element\")})}),r.length>1&&(0,T.jsxs)(T.Fragment,{children:[(0,T.jsx)(\"tr\",{children:(0,T.jsx)(\"th\",{colSpan:2,children:(0,j.t)(\"stats.selected\")})}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.elements\")}),(0,T.jsx)(\"td\",{children:r.length})]})]}),r.length>0&&(0,T.jsxs)(T.Fragment,{children:[(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:\"x\"}),(0,T.jsx)(\"td\",{children:Math.round(o[0])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:\"y\"}),(0,T.jsx)(\"td\",{children:Math.round(o[1])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.width\")}),(0,T.jsx)(\"td\",{children:Math.round(o[2]-o[0])})]}),(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.height\")}),(0,T.jsx)(\"td\",{children:Math.round(o[3]-o[1])})]})]}),1===r.length&&(0,T.jsxs)(\"tr\",{children:[(0,T.jsx)(\"td\",{children:(0,j.t)(\"stats.angle\")}),(0,T.jsx)(\"td\",{children:\"\".concat(Math.round(180*r[0].angle\/Math.PI),\"\u00b0\")})]}),null===(t=e.renderCustomStats)||void 0===t?void 0:t.call(e,e.elements,e.appState)]})})]})})},Ot=function(e){return(0,T.jsx)(S.V,{className:(0,x.Z)(\"Shape\",{fillable:!1}),type:\"radio\",icon:E.Hk,name:\"editor-current-shape\",checked:e.checked,title:\"\".concat(e.title,\" \u2014 H\"),keyBindingLabel:e.isMobile?void 0:_.tW.H.toLocaleUpperCase(),\"aria-label\":\"\".concat(e.title,\" \u2014 H\"),\"aria-keyshortcuts\":_.tW.H,\"data-testid\":\"toolbar-hand\",onChange:function(){var t;return null===(t=e.onChange)||void 0===t?void 0:t.call(e)}})},Ct=n(8888);function It(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Mt=function(e){var t=e.appState,n=e.elements,r=e.actionManager,o=e.setAppState,i=e.onLockToggle,a=e.onHandToolToggle,l=e.onPenModeToggle,s=e.canvas,c=e.onImageAction,u=e.renderTopRightUI,d=e.renderCustomStats,f=e.renderSidebars,h=e.device,m=e.renderWelcomeScreen,g=(0,Ct.R6)(),v=g.welcomeScreenCenterTunnel,b=g.mainMenuTunnel;return(0,T.jsxs)(T.Fragment,{children:[f(),!t.viewModeEnabled&&(0,T.jsxs)(at,{side:\"top\",className:\"App-top-bar\",children:[m&&(0,T.jsx)(v.Out,{}),(0,T.jsx)(vt,{heading:\"shapes\",children:function(e){return(0,T.jsx)(Ce.Z.Col,{gap:4,align:\"center\",children:(0,T.jsxs)(Ce.Z.Row,{gap:1,className:\"App-toolbar-container\",children:[(0,T.jsxs)(ut.W,{padding:1,className:\"App-toolbar App-toolbar--mobile\",children:[e,(0,T.jsx)(Ce.Z.Row,{gap:1,children:(0,T.jsx)(Ne,{appState:t,canvas:s,activeTool:t.activeTool,setAppState:o,onImageAction:function(e){var t=e.pointerType;c({insertOnCanvasDirectly:\"mouse\"!==t})}})})]}),u&&u(!0,t),(0,T.jsxs)(\"div\",{className:\"mobile-misc-tools-container\",children:[!t.viewModeEnabled&&(0,T.jsx)(wt,{appState:t,setAppState:o,isMobile:!0}),(0,T.jsx)(kt,{checked:t.penMode,onChange:l,title:(0,j.t)(\"toolBar.penMode\"),isMobile:!0,penDetected:t.penDetected}),(0,T.jsx)(pt,{checked:t.activeTool.locked,onChange:i,title:(0,j.t)(\"toolBar.lock\"),isMobile:!0}),(0,T.jsx)(Ot,{checked:(0,N.l$)(t),onChange:function(){return a()},title:(0,j.t)(\"toolBar.hand\"),isMobile:!0})]})]})})}}),(0,T.jsx)(ct,{appState:t,elements:n,isMobile:!0,device:h})]}),!t.openMenu&&t.showStats&&(0,T.jsx)(_t,{appState:t,setAppState:o,elements:n,onClose:function(){r.executeAction(k.u0)},renderCustomStats:d}),(0,T.jsx)(\"div\",{className:\"App-bottom-bar\",style:{marginBottom:bt.nn+2*bt.WM,marginLeft:bt.nn+2*bt.WM,marginRight:bt.nn+2*bt.WM},children:(0,T.jsxs)(ut.W,{padding:0,children:[\"shape\"===t.openMenu&&!t.viewModeEnabled&&(0,U.RT)(t,n)?(0,T.jsx)(vt,{className:\"App-mobile-menu\",heading:\"selectedShapeActions\",children:(0,T.jsx)(Re,{appState:t,elements:n,renderAction:r.renderAction})}):null,(0,T.jsxs)(\"footer\",{className:\"App-toolbar\",children:[t.viewModeEnabled?(0,T.jsx)(\"div\",{className:\"App-toolbar-content\",children:(0,T.jsx)(b.Out,{})}):(0,T.jsxs)(\"div\",{className:\"App-toolbar-content\",children:[(0,T.jsx)(b.Out,{}),r.renderAction(\"toggleEditMenu\"),r.renderAction(\"undo\"),r.renderAction(\"redo\"),r.renderAction(t.multiElement?\"finalize\":\"duplicateSelection\"),r.renderAction(\"deleteSelectedElements\")]}),t.scrolledOutside&&!t.openMenu&&\"library\"!==t.openSidebar&&(0,T.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?It(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):It(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,ie.W)(n,t,s)))},children:(0,j.t)(\"buttons.scrollBackToContent\")})]})]})})]})},Tt=n(5674),Pt=n(4162),Dt=n(8461),At={};At.styleTagTransform=we(),At.setAttributes=ve(),At.insert=me().bind(null,\"head\"),At.domAPI=pe(),At.insertStyleElement=ye();de()(Dt.Z,At),Dt.Z&&Dt.Z.locals&&Dt.Z.locals;var Lt=function(e){var t=(0,g.useRef)(null),n=(0,g.useState)(null),r=(0,o.Z)(n,2),i=r[0],l=r[1];return(0,g.useLayoutEffect)((function(){if(e.spreadsheet){var n,r=(0,Tt.ps)(e.chartType,e.spreadsheet,0,0);l(r);var o=t.current;return(0,a.Z)(m().mark((function t(){var i;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,Pt.$D)(r,{exportBackground:!1,viewBackgroundColor:Xe.white},null);case 2:n=t.sent,null===(i=n.querySelector(\".style-fonts\"))||void 0===i||i.remove(),o.replaceChildren(),o.appendChild(n),e.selected&&o.parentNode.focus();case 7:case\"end\":return t.stop()}}),t)})))(),function(){o.replaceChildren()}}}),[e.spreadsheet,e.chartType,e.selected]),(0,T.jsx)(\"button\",{className:\"ChartPreview\",onClick:function(){i&&e.onClick(e.chartType,i)},children:(0,T.jsx)(\"div\",{ref:t})})},Zt=function(e){var t=e.setAppState,n=e.appState,r=e.onClose,o=e.onInsertChart,i=v().useCallback((function(){r&&r()}),[r]),a=function(e,n){o(n),(0,L.L)(\"magic\",\"chart\",e),t({currentChartType:e,pasteDialog:{shown:!1,data:null}})};return(0,T.jsx)(Ue.V,{small:!0,onCloseRequest:i,title:(0,j.t)(\"labels.pasteCharts\"),className:\"PasteChartDialog\",autofocus:!1,children:(0,T.jsxs)(\"div\",{className:\"container\",children:[(0,T.jsx)(Lt,{chartType:\"bar\",spreadsheet:n.pasteDialog.data,selected:\"bar\"===n.currentChartType,onClick:a}),(0,T.jsx)(Lt,{chartType:\"line\",spreadsheet:n.pasteDialog.data,selected:\"line\"===n.currentChartType,onClick:a})]})})},zt=n(2978),Rt={};Rt.styleTagTransform=we(),Rt.setAttributes=ve(),Rt.insert=me().bind(null,\"head\"),Rt.domAPI=pe(),Rt.insertStyleElement=ye();de()(zt.Z,Rt),zt.Z&&zt.Z.locals&&zt.Z.locals;function Nt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Bt=m().mark(Yt);function Ht(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return Wt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return Wt(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function Wt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ft=function(){return(0,T.jsxs)(\"div\",{className:\"HelpDialog__header\",children:[(0,T.jsxs)(\"a\",{className:\"HelpDialog__btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw#documentation\",target:\"_blank\",rel:\"noopener noreferrer\",children:[(0,j.t)(\"helpDialog.documentation\"),(0,T.jsx)(\"div\",{className:\"HelpDialog__link-icon\",children:E.h0})]}),(0,T.jsxs)(\"a\",{className:\"HelpDialog__btn\",href:\"https:\/\/blog.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\",children:[(0,j.t)(\"helpDialog.blog\"),(0,T.jsx)(\"div\",{className:\"HelpDialog__link-icon\",children:E.h0})]}),(0,T.jsxs)(\"a\",{className:\"HelpDialog__btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\",target:\"_blank\",rel:\"noopener noreferrer\",children:[(0,j.t)(\"helpDialog.github\"),(0,T.jsx)(\"div\",{className:\"HelpDialog__link-icon\",children:E.h0})]})]})},Ut=function(e){return(0,T.jsxs)(T.Fragment,{children:[(0,T.jsx)(\"h3\",{children:e.title}),(0,T.jsx)(\"div\",{className:\"HelpDialog__islands-container\",children:e.children})]})},Kt=function(e){return(0,T.jsxs)(\"div\",{className:\"HelpDialog__island \".concat(e.className),children:[(0,T.jsx)(\"h4\",{className:\"HelpDialog__island-title\",children:e.caption}),(0,T.jsx)(\"div\",{className:\"HelpDialog__island-content\",children:e.children})]})};function Yt(e,t){var n,r,o,i;return m().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:n=!0,r=Ht(e),a.prev=2,r.s();case 4:if((o=r.n()).done){a.next=14;break}if(i=o.value,n){a.next=9;break}return a.next=9,t;case 9:return n=!1,a.next=12,i;case 12:a.next=4;break;case 14:a.next=19;break;case 16:a.prev=16,a.t0=a.catch(2),r.e(a.t0);case 19:return a.prev=19,r.f(),a.finish(19);case 22:case\"end\":return a.stop()}}),Bt,null,[[2,16,19,22]])}var Gt=function(e){var t=e.label,n=e.shortcuts,r=e.isOr,o=void 0===r||r,a=n.map((function(e){return(e.endsWith(\"++\")?[].concat((0,i.Z)(e.slice(0,-2).split(\"+\")),[\"+\"]):e.split(\"+\")).map((function(e){return(0,T.jsx)(Vt,{children:(t=e,t.replace(\/\\b[a-z]\\b\/,(function(e){return e.toUpperCase()})))},e);var t}))}));return(0,T.jsxs)(\"div\",{className:\"HelpDialog__shortcut\",children:[(0,T.jsx)(\"div\",{children:t}),(0,T.jsx)(\"div\",{className:\"HelpDialog__key-container\",children:(0,i.Z)(Yt(a,o?(0,j.t)(\"helpDialog.or\"):null))})]})},Vt=function(e){return(0,T.jsx)(\"kbd\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Nt(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Nt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:\"HelpDialog__key\"},e))},Xt=function(e){var t=e.onClose,n=v().useCallback((function(){t&&t()}),[t]);return(0,T.jsx)(T.Fragment,{children:(0,T.jsxs)(Ue.V,{onCloseRequest:n,title:(0,j.t)(\"helpDialog.title\"),className:\"HelpDialog\",children:[(0,T.jsx)(Ft,{}),(0,T.jsxs)(Ut,{title:(0,j.t)(\"helpDialog.shortcuts\"),children:[(0,T.jsxs)(Kt,{className:\"HelpDialog__island--tools\",caption:(0,j.t)(\"helpDialog.tools\"),children:[(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.hand\"),shortcuts:[_.tW.H]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.selection\"),shortcuts:[_.tW.V,_.tW[1]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.rectangle\"),shortcuts:[_.tW.R,_.tW[2]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.diamond\"),shortcuts:[_.tW.D,_.tW[3]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.ellipse\"),shortcuts:[_.tW.O,_.tW[4]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.arrow\"),shortcuts:[_.tW.A,_.tW[5]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.line\"),shortcuts:[_.tW.L,_.tW[6]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.freedraw\"),shortcuts:[_.tW.P,_.tW[7]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.text\"),shortcuts:[_.tW.T,_.tW[8]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.image\"),shortcuts:[_.tW[9]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.eraser\"),shortcuts:[_.tW.E,_.tW[0]]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.editLineArrowPoints\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.editText\"),shortcuts:[(0,I.uY)(\"Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.textNewLine\"),shortcuts:[(0,I.uY)(\"Enter\"),(0,I.uY)(\"Shift+Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.textFinish\"),shortcuts:[(0,I.uY)(\"Esc\"),(0,I.uY)(\"CtrlOrCmd+Enter\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.curvedArrow\"),shortcuts:[\"A\",(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\")],isOr:!1}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.curvedLine\"),shortcuts:[\"L\",(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\"),(0,j.t)(\"helpDialog.click\")],isOr:!1}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.lock\"),shortcuts:[_.tW.Q]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.preventBinding\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"toolBar.link\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+K\")]})]}),(0,T.jsxs)(Kt,{className:\"HelpDialog__island--view\",caption:(0,j.t)(\"helpDialog.view\"),children:[(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.zoomIn\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd++\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.zoomOut\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+-\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.resetZoom\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+0\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.zoomToFit\"),shortcuts:[\"Shift+1\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.zoomToSelection\"),shortcuts:[\"Shift+2\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.movePageUpDown\"),shortcuts:[\"PgUp\/PgDn\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.movePageLeftRight\"),shortcuts:[\"Shift+PgUp\/PgDn\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.fullScreen\"),shortcuts:[\"F\"]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.zenMode\"),shortcuts:[(0,I.uY)(\"Alt+Z\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.showGrid\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+'\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.viewMode\"),shortcuts:[(0,I.uY)(\"Alt+R\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.toggleTheme\"),shortcuts:[(0,I.uY)(\"Alt+Shift+D\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"stats.title\"),shortcuts:[(0,I.uY)(\"Alt+\/\")]})]}),(0,T.jsxs)(Kt,{className:\"HelpDialog__island--editor\",caption:(0,j.t)(\"helpDialog.editor\"),children:[(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.moveCanvas\"),shortcuts:[(0,I.uY)(\"Space+\".concat((0,j.t)(\"helpDialog.drag\"))),(0,I.uY)(\"Wheel+\".concat((0,j.t)(\"helpDialog.drag\")))],isOr:!0}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.clearReset\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Delete\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.delete\"),shortcuts:[(0,I.uY)(\"Delete\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.cut\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+X\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.copy\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+C\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.paste\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.pasteAsPlaintext\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.selectAll\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+A\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.multiSelect\"),shortcuts:[(0,I.uY)(\"Shift+\".concat((0,j.t)(\"helpDialog.click\")))]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.deepSelect\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+\".concat((0,j.t)(\"helpDialog.click\")))]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.deepBoxSelect\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+\".concat((0,j.t)(\"helpDialog.drag\")))]}),(B.vt||M.vU)&&(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.copyAsPng\"),shortcuts:[(0,I.uY)(\"Shift+Alt+C\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.copyStyles\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Alt+C\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.pasteStyles\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Alt+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.sendToBack\"),shortcuts:[M.Um?(0,I.uY)(\"CtrlOrCmd+Alt+[\"):(0,I.uY)(\"CtrlOrCmd+Shift+[\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.bringToFront\"),shortcuts:[M.Um?(0,I.uY)(\"CtrlOrCmd+Alt+]\"):(0,I.uY)(\"CtrlOrCmd+Shift+]\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.sendBackward\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+[\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.bringForward\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+]\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignTop\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Up\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignBottom\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Down\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignLeft\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Left\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.alignRight\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+Right\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.duplicateSelection\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+D\"),(0,I.uY)(\"Alt+\".concat((0,j.t)(\"helpDialog.drag\")))]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"helpDialog.toggleElementLock\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+L\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.undo\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Z\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"buttons.redo\"),shortcuts:M.ED?[(0,I.uY)(\"CtrlOrCmd+Y\"),(0,I.uY)(\"CtrlOrCmd+Shift+Z\")]:[(0,I.uY)(\"CtrlOrCmd+Shift+Z\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.group\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+G\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.ungroup\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+G\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.flipHorizontal\"),shortcuts:[(0,I.uY)(\"Shift+H\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.flipVertical\"),shortcuts:[(0,I.uY)(\"Shift+V\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.showStroke\"),shortcuts:[(0,I.uY)(\"S\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.showBackground\"),shortcuts:[(0,I.uY)(\"G\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.decreaseFontSize\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+<\")]}),(0,T.jsx)(Gt,{label:(0,j.t)(\"labels.increaseFontSize\"),shortcuts:[(0,I.uY)(\"CtrlOrCmd+Shift+>\")]})]})]})]})})},qt=n(6773),Jt=n(8671),$t=n(4241),Qt={};Qt.styleTagTransform=we(),Qt.setAttributes=ve(),Qt.insert=me().bind(null,\"head\"),Qt.domAPI=pe(),Qt.insertStyleElement=ye();de()($t.Z,Qt),$t.Z&&$t.Z.locals&&$t.Z.locals;var en=function(e){var t,n=e.children,r=e.color;return(0,T.jsx)(\"div\",{className:\"Card\",style:(t={},(0,p.Z)(t,\"--card-color\",\"primary\"===r?\"var(--color-primary)\":Xe[r][7]),(0,p.Z)(t,\"--card-color-darker\",\"primary\"===r?\"var(--color-primary-darker)\":Xe[r][8]),(0,p.Z)(t,\"--card-color-darkest\",\"primary\"===r?\"var(--color-primary-darkest)\":Xe[r][9]),t),children:n})},tn=function(e){var t=e.elements,n=e.appState,r=e.files,o=e.actionManager,i=e.exportOpts,a=e.canvas,l=i.onExportToBackend;return(0,T.jsx)(\"div\",{className:\"ExportDialog ExportDialog--json\",children:(0,T.jsxs)(\"div\",{className:\"ExportDialog-cards\",children:[i.saveFileToDisk&&(0,T.jsxs)(en,{color:\"lime\",children:[(0,T.jsx)(\"div\",{className:\"Card-icon\",children:E.TP}),(0,T.jsx)(\"h2\",{children:(0,j.t)(\"exportDialog.disk_title\")}),(0,T.jsxs)(\"div\",{className:\"Card-details\",children:[(0,j.t)(\"exportDialog.disk_details\"),!Je.kr&&o.renderAction(\"changeProjectName\")]}),(0,T.jsx)(S.V,{className:\"Card-button\",type:\"button\",title:(0,j.t)(\"exportDialog.disk_button\"),\"aria-label\":(0,j.t)(\"exportDialog.disk_button\"),showAriaLabel:!0,onClick:function(){o.executeAction(Jt.mM,\"ui\")}})]}),l&&(0,T.jsxs)(en,{color:\"pink\",children:[(0,T.jsx)(\"div\",{className:\"Card-icon\",children:E.xP}),(0,T.jsx)(\"h2\",{children:(0,j.t)(\"exportDialog.link_title\")}),(0,T.jsx)(\"div\",{className:\"Card-details\",children:(0,j.t)(\"exportDialog.link_details\")}),(0,T.jsx)(S.V,{className:\"Card-button\",type:\"button\",title:(0,j.t)(\"exportDialog.link_button\"),\"aria-label\":(0,j.t)(\"exportDialog.link_button\"),showAriaLabel:!0,onClick:function(){l(t,n,r,a),(0,L.L)(\"export\",\"link\",\"ui (\".concat((0,I.$h)(),\")\"))}})]}),i.renderCustomUI&&i.renderCustomUI(t,n,r,a)]})})},nn=function(e){var t=e.elements,n=e.appState,r=e.files,o=e.actionManager,i=e.exportOpts,a=e.canvas,l=e.setAppState,s=v().useCallback((function(){l({openDialog:null})}),[l]);return(0,T.jsx)(T.Fragment,{children:\"jsonExport\"===n.openDialog&&(0,T.jsx)(Ue.V,{onCloseRequest:s,title:(0,j.t)(\"buttons.export\"),children:(0,T.jsx)(tn,{elements:t,appState:n,files:r,actionManager:o,onCloseRequest:s,exportOpts:i,canvas:a})})})},rn=n(6954),on=n(8923),an={};an.styleTagTransform=we(),an.setAttributes=ve(),an.insert=me().bind(null,\"head\"),an.domAPI=pe(),an.insertStyleElement=ye();de()(on.Z,an),on.Z&&on.Z.locals&&on.Z.locals;var ln=n(5523),sn=n(2701),cn={};cn.styleTagTransform=we(),cn.setAttributes=ve(),cn.insert=me().bind(null,\"head\"),cn.domAPI=pe(),cn.insertStyleElement=ye();de()(sn.Z,cn),sn.Z&&sn.Z.locals&&sn.Z.locals;var un=function(e){var t=e.id,n=e.elements,r=e.isPending,i=e.onClick,l=e.selected,s=e.onToggle,c=e.onDrag,u=(0,g.useRef)(null);(0,g.useEffect)((function(){var e=u.current;if(e)return(0,a.Z)(m().mark((function t(){var r,o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt(\"return\");case 2:return t.next=4,(0,$e.$D)({elements:n,appState:{exportBackground:!1,viewBackgroundColor:Xe.white},files:null});case 4:o=t.sent,null===(r=o.querySelector(\".style-fonts\"))||void 0===r||r.remove(),e.innerHTML=o.outerHTML;case 7:case\"end\":return t.stop()}}),t)})))(),function(){e.innerHTML=\"\"}}),[n]);var d=(0,g.useState)(!1),f=(0,o.Z)(d,2),p=f[0],h=f[1],v=wr().isMobile,b=r&&(0,T.jsx)(\"div\",{className:\"library-unit__adder\",children:E.pO});return(0,T.jsxs)(\"div\",{className:(0,x.Z)(\"library-unit\",{\"library-unit__active\":n,\"library-unit--hover\":n&&p,\"library-unit--selected\":l}),onMouseEnter:function(){return h(!0)},onMouseLeave:function(){return h(!1)},children:[(0,T.jsx)(\"div\",{className:(0,x.Z)(\"library-unit__dragger\",{\"library-unit__pulse\":!!r}),ref:u,draggable:!!n,onClick:n||r?function(e){t&&e.shiftKey?s(t,e):i()}:void 0,onDragStart:function(e){t?(h(!1),c(t,e)):e.preventDefault()}}),b,t&&n&&(p||v||l)&&(0,T.jsx)(qe.o,{checked:l,onChange:function(e,n){return s(t,n)},className:\"library-unit__checkbox\"})]})},dn=n(6440),fn={};fn.styleTagTransform=we(),fn.setAttributes=ve(),fn.insert=me().bind(null,\"head\"),fn.domAPI=pe(),fn.insertStyleElement=ye();de()(dn.Z,fn),dn.Z&&dn.Z.locals&&dn.Z.locals;var pn=n(5644),hn=function(e){var t=e.theme,n=e.id,r=e.libraryReturnUrl||window.location.origin+window.location.pathname;return(0,T.jsx)(\"a\",{className:\"library-menu-browse-button\",href:\"\".concat(\"https:\/\/libraries.excalidraw.com\",\"?target=\").concat(window.name||\"_blank\",\"&referrer=\").concat(r,\"&useHash=true&token=\").concat(n,\"&theme=\").concat(t,\"&version=\").concat(M.Kr.excalidrawLibrary),target:\"_excalidraw_libraries\",children:(0,j.t)(\"labels.libraries\")})};function mn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mn(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vn=function(e){var t=e.isLoading,n=e.libraryItems,r=e.onAddToLibrary,a=e.onInsertLibraryItems,l=e.pendingElements,s=e.selectedItems,c=e.onSelectItems,u=e.theme,d=e.id,f=e.libraryReturnUrl,p=(0,g.useState)(null),h=(0,o.Z)(p,2),m=h[0],v=h[1],b=function(e,t){var n=!s.includes(e),r=[].concat((0,i.Z)(E),(0,i.Z)(S));if(n){if(t.shiftKey&&m){var o=r.findIndex((function(e){return e.id===m})),a=r.findIndex((function(t){return t.id===e}));if(-1===o||-1===a)return void c([].concat((0,i.Z)(s),[e]));var l=(0,I.xn)(s),u=r.reduce((function(e,t,n){return(n>=o&&n<=a||l.has(t.id))&&e.push(t.id),e}),[]);c(u)}else c([].concat((0,i.Z)(s),[e]));v(e)}else v(null),c(s.filter((function(t){return t!==e})))},y=function(e){return(s.includes(e)?n.filter((function(e){return s.includes(e.id)})):n.filter((function(t){return t.id===e}))).map((function(e){return gn(gn({},e),{},{elements:(0,Y._N)(e.elements)})}))},w=function(e){var t,n,r,o,i;return(0,T.jsx)(Ce.Z.Col,{children:(0,T.jsx)(un,{elements:null===(t=e.item)||void 0===t?void 0:t.elements,isPending:!(null!==(n=e.item)&&void 0!==n&&n.id||null===(r=e.item)||void 0===r||!r.elements),onClick:e.onClick||function(){},id:(null===(o=e.item)||void 0===o?void 0:o.id)||null,selected:!(null===(i=e.item)||void 0===i||!i.id)&&s.includes(e.item.id),onToggle:b,onDrag:function(e,t){t.dataTransfer.setData(M.LO.excalidrawlib,(0,ln.NI)(y(e)))}})},e.key)},k=function(e){var t=e.map((function(e){return e.id?w({item:e,onClick:function(){return a(y(e.id))},key:e.id}):w({key:\"__pending__item__\",item:e,onClick:function(){return r(l)}})})),n=(0,I.yo)(t,4);return n.length||(n=[[]]),n.map((function(e,t,n){return t===n.length-1&&(e=e.concat(new Array(4-e.length).fill(null).map((function(e,t){return w({key:\"empty_\".concat(t),item:null})})))),(0,T.jsx)(Ce.Z.Row,{align:\"center\",className:\"library-menu-items-container__row\",children:e},t)}))},E=n.filter((function(e){return\"published\"!==e.status})),S=n.filter((function(e){return\"published\"===e.status})),_=!(n.length||E.length||S.length||l.length);return(0,T.jsx)(\"div\",{className:\"library-menu-items-container\",style:l.length||E.length||S.length?{justifyContent:\"flex-start\"}:{},children:(0,T.jsxs)(Ce.Z.Col,{className:\"library-menu-items-container__items\",align:\"start\",gap:1,style:{flex:S.length>0?1:\"0 1 auto\",marginBottom:0},children:[(0,T.jsxs)(T.Fragment,{children:[(0,T.jsxs)(\"div\",{children:[(l.length>0||E.length>0||S.length>0)&&(0,T.jsx)(\"div\",{className:\"library-menu-items-container__header\",children:(0,j.t)(\"labels.personalLib\")}),t&&(0,T.jsx)(\"div\",{style:{position:\"absolute\",top:\"var(--container-padding-y)\",right:\"var(--container-padding-x)\",transform:\"translateY(50%)\"},children:(0,T.jsx)(pn.Z,{})})]}),l.length||E.length?k([].concat((0,i.Z)(l.length?[{id:null,elements:l}]:[]),(0,i.Z)(E))):(0,T.jsxs)(\"div\",{className:\"library-menu-items__no-items\",children:[(0,T.jsx)(\"div\",{className:(0,x.Z)({\"library-menu-items__no-items__label\":_}),children:(0,j.t)(\"library.noItems\")}),(0,T.jsx)(\"div\",{className:\"library-menu-items__no-items__hint\",children:S.length>0?(0,j.t)(\"library.hint_emptyPrivateLibrary\"):(0,j.t)(\"library.hint_emptyLibrary\")})]})]}),(0,T.jsxs)(T.Fragment,{children:[(S.length>0||l.length>0||E.length>0)&&(0,T.jsx)(\"div\",{className:\"library-menu-items-container__header library-menu-items-container__header--excal\",children:(0,j.t)(\"labels.excalidrawLib\")}),S.length>0?k(S):E.length>0?(0,T.jsx)(\"div\",{style:{margin:\"1rem 0\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\",width:\"100%\",fontSize:\".9rem\"},children:(0,j.t)(\"library.noItems\")}):null]}),_&&(0,T.jsx)(hn,{id:d,libraryReturnUrl:f,theme:u})]})})},bn=n(4739),yn=n(9487),xn=n(9430),wn=n(9206),kn=(0,g.forwardRef)((function(e,t){var n=e.children;return(0,T.jsx)(\"div\",{ref:t,className:\"layer-ui__library\",children:n})})),En=function(e){var t=e.onInsertLibraryItems,n=e.pendingElements,r=e.onAddToLibrary,l=e.setAppState,s=e.libraryReturnUrl,c=e.library,u=e.id,d=e.appState,f=e.selectedItems,p=e.onSelectItems,h=(0,bn.KO)(W.rF,yn.yE),v=(0,o.Z)(h,1)[0],b=(0,g.useCallback)(function(){var e=(0,a.Z)(m().mark((function e(t,n){var o;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((0,L.L)(\"element\",\"addToLibrary\",\"ui\"),!t.some((function(e){return\"image\"===e.type}))){e.next=3;break}return e.abrupt(\"return\",l({errorMessage:\"Support for adding images to the library coming soon!\"}));case 3:o=[{status:\"unpublished\",elements:t,id:(0,rn.kb)(),created:Date.now()}].concat((0,i.Z)(n)),r(),c.setLibrary(o).catch((function(){l({errorMessage:(0,j.t)(\"alerts.errorAddingToLibrary\")})}));case 6:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),[r,c,l]);if(\"loading\"===v.status&&!v.isInitialized)return(0,T.jsx)(kn,{children:(0,T.jsx)(\"div\",{className:\"layer-ui__library-message\",children:(0,T.jsxs)(\"div\",{children:[(0,T.jsx)(pn.Z,{size:\"2em\"}),(0,T.jsx)(\"span\",{children:(0,j.t)(\"labels.libraryLoadingMessage\")})]})})});var y=v.libraryItems.length>0||n.length>0;return(0,T.jsxs)(kn,{children:[(0,T.jsx)(vn,{isLoading:\"loading\"===v.status,libraryItems:v.libraryItems,onAddToLibrary:function(e){return b(e,v.libraryItems)},onInsertLibraryItems:t,pendingElements:n,selectedItems:f,onSelectItems:p,id:u,libraryReturnUrl:s,theme:d.theme}),y&&(0,T.jsx)(hn,{id:u,libraryReturnUrl:s,theme:d.theme})]})},Sn=function(e){var t=e.appState,n=e.onInsertElements,r=e.libraryReturnUrl,i=e.focusContainer,l=e.library,s=e.id,c=jr(),u=Er(),d=wr(),f=(0,g.useState)([]),p=(0,o.Z)(f,2),h=p[0],v=p[1],b=(0,bn.KO)(W.rF,yn.yE),y=(0,o.Z)(b,1)[0],x=(0,g.useRef)(null),w=(0,g.useCallback)((function(){!!document.querySelector(\".Dialog\")||c({openSidebar:null})}),[c]);!function(e,t){(0,g.useEffect)((function(){var n=function(n){e.current&&(n.target instanceof Element&&(e.current.contains(n.target)||!document.body.contains(n.target))||t(n))};return document.addEventListener(\"pointerdown\",n,!1),function(){document.removeEventListener(\"pointerdown\",n)}}),[e,t])}(x,(0,g.useCallback)((function(e){e.target.closest(\".ToolIcon__library\")||t.isSidebarDocked&&d.canDeviceFitSidebar||w()}),[w,t.isSidebarDocked,d.canDeviceFitSidebar])),(0,g.useEffect)((function(){var e=function(e){e.key!==_.tW.ESCAPE||t.isSidebarDocked&&d.canDeviceFitSidebar||w()};return document.addEventListener(M.Ks.KEYDOWN,e),function(){document.removeEventListener(M.Ks.KEYDOWN,e)}}),[w,t.isSidebarDocked,d.canDeviceFitSidebar]);var k=(0,g.useCallback)((function(){c({selectedElementIds:{},selectedGroupIds:{}})}),[c]),E=(0,g.useCallback)(function(){var e=(0,a.Z)(m().mark((function e(t){var n;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.filter((function(e){return!h.includes(e.id)})),l.setLibrary(n).catch((function(){c({errorMessage:(0,j.t)(\"alerts.errorRemovingFromLibrary\")})})),v([]);case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[l,c,h,v]),S=(0,g.useCallback)((function(){l.resetLibrary(),i()}),[l,i]);return(0,T.jsxs)(xn.Y,{__isInternal:!0,className:\"layer-ui__library-sidebar\",initialDockedState:t.isSidebarDocked,onDock:function(e){(0,L.L)(\"library\",\"toggleLibraryDock (\".concat(e?\"dock\":\"undock\",\")\"),\"sidebar (\".concat(d.isMobile?\"mobile\":\"desktop\",\")\"))},ref:x,children:[(0,T.jsx)(xn.Y.Header,{className:\"layer-ui__library-header\",children:(0,T.jsx)(wn.W,{appState:t,setAppState:c,selectedItems:h,onSelectItems:v,library:l,onRemoveFromLibrary:function(){return E(y.libraryItems)},resetLibrary:S})}),(0,T.jsx)(En,{pendingElements:(0,ie.eD)(u,t,!0),onInsertLibraryItems:function(e){n((0,W.WV)(e))},onAddToLibrary:k,setAppState:c,libraryReturnUrl:r,library:l,id:s,appState:t,selectedItems:h,onSelectItems:v})]},\"library\")},jn=n(1434),_n={};_n.styleTagTransform=we(),_n.setAttributes=ve(),_n.insert=me().bind(null,\"head\"),_n.domAPI=pe(),_n.insertStyleElement=ye();de()(jn.Z,_n),jn.Z&&jn.Z.locals&&jn.Z.locals;var On=n(9144),Cn={};Cn.styleTagTransform=we(),Cn.setAttributes=ve(),Cn.insert=me().bind(null,\"head\"),Cn.domAPI=pe(),Cn.insertStyleElement=ye();de()(On.Z,Cn),On.Z&&On.Z.locals&&On.Z.locals;var In=n(4958),Mn=function(e){return(0,T.jsx)(\"button\",{className:\"help-icon\",onClick:e.onClick,type:\"button\",title:\"\".concat((0,j.t)(\"helpDialog.title\"),\" \u2014 ?\"),\"aria-label\":(0,j.t)(\"helpDialog.title\"),children:E.by})},Tn=function(e){var t=e.appState,n=e.actionManager,r=e.showExitZenModeBtn,o=e.renderWelcomeScreen,i=(0,Ct.R6)(),a=i.footerCenterTunnel,l=i.welcomeScreenHelpHintTunnel,s=wr(),c=!t.viewModeEnabled&&t.multiElement&&s.isTouchScreen;return(0,T.jsxs)(\"footer\",{role:\"contentinfo\",className:\"layer-ui__wrapper__footer App-menu App-menu_bottom\",children:[(0,T.jsx)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper__footer-left zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-left\":t.zenModeEnabled}),children:(0,T.jsx)(Ce.Z.Col,{gap:2,children:(0,T.jsxs)(vt,{heading:\"canvasActions\",children:[(0,T.jsx)(Be,{renderAction:n.renderAction,zoom:t.zoom}),!t.viewModeEnabled&&(0,T.jsx)(He,{renderAction:n.renderAction,className:(0,x.Z)(\"zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":t.zenModeEnabled})}),c&&(0,T.jsx)(Fe,{renderAction:n.renderAction,className:(0,x.Z)(\"zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-left\":t.zenModeEnabled})})]})})}),(0,T.jsx)(a.Out,{}),(0,T.jsx)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper__footer-right zen-mode-transition\",{\"transition-right disable-pointerEvents\":t.zenModeEnabled}),children:(0,T.jsxs)(\"div\",{style:{position:\"relative\"},children:[o&&(0,T.jsx)(l.Out,{}),(0,T.jsx)(Mn,{onClick:function(){return n.executeAction(k.jY)}})]})}),(0,T.jsx)(We,{actionManager:n,showExitZenModeBtn:r})]})},Pn=Tn;Tn.displayName=\"Footer\";var Dn=n(4709),An=n(6798),Ln=[\"suggestedBindings\",\"startBoundElement\",\"cursorButton\"],Zn=[\"canvas\",\"onInsertElements\",\"appState\"],zn=[\"canvas\",\"onInsertElements\",\"appState\"];function Rn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Nn=function(e){var t=e.UIOptions;return(0,T.jsxs)(Dn.Z,{__fallback:!0,children:[(0,T.jsx)(Dn.Z.DefaultItems.LoadScene,{}),(0,T.jsx)(Dn.Z.DefaultItems.SaveToActiveFile,{}),t.canvasActions.export&&(0,T.jsx)(Dn.Z.DefaultItems.Export,{}),t.canvasActions.saveAsImage&&(0,T.jsx)(Dn.Z.DefaultItems.SaveAsImage,{}),(0,T.jsx)(Dn.Z.DefaultItems.Help,{}),(0,T.jsx)(Dn.Z.DefaultItems.ClearCanvas,{}),(0,T.jsx)(Dn.Z.Separator,{}),(0,T.jsx)(Dn.Z.Group,{title:\"Excalidraw links\",children:(0,T.jsx)(Dn.Z.DefaultItems.Socials,{})}),(0,T.jsx)(Dn.Z.Separator,{}),(0,T.jsx)(Dn.Z.DefaultItems.ToggleTheme,{}),(0,T.jsx)(Dn.Z.DefaultItems.ChangeCanvasBackground,{})]})},Bn=function(e){var t,n=e.actionManager,r=e.appState,i=e.files,l=e.setAppState,s=e.elements,c=e.canvas,u=e.onLockToggle,d=e.onHandToolToggle,f=e.onPenModeToggle,h=e.onInsertElements,g=e.showExitZenModeBtn,v=e.renderTopRightUI,b=e.renderCustomStats,y=e.renderCustomSidebar,w=e.libraryReturnUrl,k=e.UIOptions,E=e.focusContainer,S=e.library,_=e.id,O=e.onImageAction,C=e.renderWelcomeScreen,P=e.children,D=wr(),A=(0,Ct.ZC)(),Z=function(){return k.canvasActions.export?(0,T.jsx)(nn,{elements:s,appState:r,files:i,actionManager:n,exportOpts:k.canvasActions.export,canvas:c,setAppState:l}):null},z=function(){if(!k.canvasActions.saveAsImage)return null;var e=function(e){return function(){var t=(0,a.Z)(m().mark((function t(n){var o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(0,L.L)(\"export\",e,\"ui\"),t.next=3,(0,H.p1)(e,n,r,i,{exportBackground:r.exportBackground,name:r.name,viewBackgroundColor:r.viewBackgroundColor}).catch(I.FG).catch((function(e){console.error(e),l({errorMessage:e.message})}));case 3:o=t.sent,r.exportEmbedScene&&o&&(0,Ye.g8)(o)&&l({fileHandle:o});case 5:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()};return(0,T.jsx)(rt,{elements:s,appState:r,setAppState:l,files:i,actionManager:n,onExportToPng:e(\"png\"),onExportToSvg:e(\"svg\"),onExportToClipboard:e(\"clipboard\")})},R=function(){return\"customSidebar\"===r.openSidebar?(null==y?void 0:y())||null:\"library\"===r.openSidebar?(0,T.jsx)(Sn,{appState:r,onInsertElements:h,libraryReturnUrl:w,focusContainer:E,library:S,id:_}):null},B=(0,bn.KO)(xn.b,yn.yE),W=(0,o.Z)(B,1)[0],F=(0,T.jsxs)(T.Fragment,{children:[P,(0,T.jsx)(Nn,{UIOptions:k}),r.isLoading&&(0,T.jsx)(dt.z,{delay:250}),r.errorMessage&&(0,T.jsx)(Ke,{onClose:function(){return l({errorMessage:null})},children:r.errorMessage}),\"help\"===r.openDialog&&(0,T.jsx)(Xt,{onClose:function(){l({openDialog:null})}}),(0,T.jsx)(An.o,{}),z(),Z(),r.pasteDialog.shown&&(0,T.jsx)(Zt,{setAppState:l,appState:r,onInsertChart:h,onClose:function(){return l({pasteDialog:{shown:!1,data:null}})}}),D.isMobile&&(0,T.jsx)(Mt,{appState:r,elements:s,actionManager:n,renderJSONExportDialog:Z,renderImageExportDialog:z,setAppState:l,onLockToggle:u,onHandToolToggle:d,onPenModeToggle:f,canvas:c,onImageAction:O,renderTopRightUI:v,renderCustomStats:b,renderSidebars:R,device:D,renderWelcomeScreen:C}),!D.isMobile&&(0,T.jsxs)(T.Fragment,{children:[(0,T.jsxs)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper\",{\"disable-pointerEvents\":r.draggingElement||r.resizingElement||r.editingElement&&!(0,U.iB)(r.editingElement)}),style:(\"library\"===r.openSidebar&&r.isSidebarDocked||W.docked)&&D.canDeviceFitSidebar?{width:\"calc(100% - \".concat(M.EE,\"px)\")}:{},children:[C&&(0,T.jsx)(A.welcomeScreenCenterTunnel.Out,{}),(t=(0,U.RT)(r,s),(0,T.jsx)(at,{side:\"top\",children:(0,T.jsxs)(\"div\",{className:\"App-menu App-menu_top\",children:[(0,T.jsxs)(Ce.Z.Col,{gap:6,className:(0,x.Z)(\"App-menu_top__left\",{\"disable-pointerEvents\":r.zenModeEnabled}),children:[(0,T.jsxs)(\"div\",{style:{position:\"relative\"},children:[(0,T.jsx)(A.mainMenuTunnel.Out,{}),C&&(0,T.jsx)(A.welcomeScreenMenuHintTunnel.Out,{})]}),t&&(0,T.jsx)(vt,{heading:\"selectedShapeActions\",className:(0,x.Z)(\"selected-shape-actions zen-mode-transition\",{\"transition-left\":r.zenModeEnabled}),children:(0,T.jsx)(ut.W,{className:M.$C.SHAPE_ACTIONS_MENU,padding:2,style:{maxHeight:\"\".concat(r.height-166,\"px\")},children:(0,T.jsx)(Re,{appState:r,elements:s,renderAction:n.renderAction})})})]}),!r.viewModeEnabled&&(0,T.jsx)(vt,{heading:\"shapes\",className:\"shapes-section\",children:function(e){return(0,T.jsxs)(\"div\",{style:{position:\"relative\"},children:[C&&(0,T.jsx)(A.welcomeScreenToolbarHintTunnel.Out,{}),(0,T.jsx)(Ce.Z.Col,{gap:4,align:\"start\",children:(0,T.jsx)(Ce.Z.Row,{gap:1,className:(0,x.Z)(\"App-toolbar-container\",{\"zen-mode\":r.zenModeEnabled}),children:(0,T.jsxs)(ut.W,{padding:1,className:(0,x.Z)(\"App-toolbar\",{\"zen-mode\":r.zenModeEnabled}),children:[(0,T.jsx)(ct,{appState:r,elements:s,isMobile:D.isMobile,device:D}),e,(0,T.jsxs)(Ce.Z.Row,{gap:1,children:[(0,T.jsx)(kt,{zenModeEnabled:r.zenModeEnabled,checked:r.penMode,onChange:f,title:(0,j.t)(\"toolBar.penMode\"),penDetected:r.penDetected}),(0,T.jsx)(pt,{checked:r.activeTool.locked,onChange:u,title:(0,j.t)(\"toolBar.lock\")}),(0,T.jsx)(\"div\",{className:\"App-toolbar__divider\"}),(0,T.jsx)(Ot,{checked:(0,N.l$)(r),onChange:function(){return d()},title:(0,j.t)(\"toolBar.hand\"),isMobile:!0}),(0,T.jsx)(Ne,{appState:r,canvas:c,activeTool:r.activeTool,setAppState:l,onImageAction:function(e){var t=e.pointerType;O({insertOnCanvasDirectly:\"mouse\"!==t})}})]})]})})})]})}}),(0,T.jsxs)(\"div\",{className:(0,x.Z)(\"layer-ui__wrapper__top-right zen-mode-transition\",{\"transition-right\":r.zenModeEnabled}),children:[(0,T.jsx)(qt.Z,{collaborators:r.collaborators}),null==v?void 0:v(D.isMobile,r),!r.viewModeEnabled&&(0,T.jsx)(wt,{appState:r,setAppState:l})]})]})})),(0,T.jsx)(Pn,{appState:r,actionManager:n,showExitZenModeBtn:g,renderWelcomeScreen:C}),r.showStats&&(0,T.jsx)(_t,{appState:r,setAppState:l,elements:s,onClose:function(){n.executeAction(In.u)},renderCustomStats:b}),r.scrolledOutside&&(0,T.jsx)(\"button\",{className:\"scroll-back-to-content\",onClick:function(){l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rn(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,ie.W)(s,r,c)))},children:(0,j.t)(\"buttons.scrollBackToContent\")})]}),R()]})]});return(0,T.jsx)(bn.zt,{scope:A.jotaiScope,children:(0,T.jsx)(Ct.A3.Provider,{value:A,children:F})})},Hn=function(e){e.suggestedBindings,e.startBoundElement,e.cursorButton;return(0,Oe.Z)(e,Ln)},Wn=function(e,t){if(e.children!==t.children)return!1;e.canvas,e.onInsertElements;var n=e.appState,r=(0,Oe.Z)(e,Zn),o=(t.canvas,t.onInsertElements,t.appState),i=(0,Oe.Z)(t,zn);return(0,I.w8)(Hn(n),Hn(o))&&(0,I.w8)(r,i)},Fn=v().memo(Bn,Wn),Un=n(9650),Kn={};Kn.styleTagTransform=we(),Kn.setAttributes=ve(),Kn.insert=me().bind(null,\"head\"),Kn.domAPI=pe(),Kn.insertStyleElement=ye();de()(Un.Z,Kn),Un.Z&&Un.Z.locals&&Un.Z.locals;var Yn=function(e){var t=e.message,n=e.onClose,r=e.closable,o=void 0!==r&&r,i=e.duration,a=void 0===i?5e3:i,l=(0,g.useRef)(0),s=a!==1\/0,c=(0,g.useCallback)((function(){s&&(l.current=window.setTimeout((function(){return n()}),a))}),[n,a,s]);(0,g.useEffect)((function(){if(s)return c(),function(){return clearTimeout(l.current)}}),[c,t,a,s]);var u=s?function(){return clearTimeout(null==l?void 0:l.current)}:void 0,d=s?c:void 0;return(0,T.jsxs)(\"div\",{className:\"Toast\",onMouseEnter:u,onMouseLeave:d,children:[(0,T.jsx)(\"p\",{className:\"Toast__message\",children:t}),o&&(0,T.jsx)(S.V,{icon:E.Tw,\"aria-label\":\"close\",type:\"icon\",onClick:n,className:\"close\"})]})};function Gn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gn(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Xn=(0,R.z)({name:\"viewMode\",viewMode:!0,trackEvent:{category:\"canvas\",predicate:function(e){return!e.viewModeEnabled}},perform:function(e,t){return{appState:Vn(Vn({},t),{},{viewModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.viewModeEnabled},predicate:function(e,t,n){return void 0===n.viewModeEnabled},contextItemLabel:\"labels.viewMode\",keyTest:function(e){return!e[_.tW.CTRL_OR_CMD]&&e.altKey&&e.code===_.aU.R}}),qn=n(5637),Jn=n(200),$n=n.n(Jn),Qn=n(2325),er=n(4929),tr=n(6794),nr=n(267);function rr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var or=(0,s.Z)((function e(t){var n=this,r=t.scene,o=t.onSceneUpdated;(0,l.Z)(this,e),this.onFontsLoaded=function(t){if(t.every((function(t){var n=\"\".concat(t.family,\"-\").concat(t.style,\"-\").concat(t.weight);return!!e.loadedFontFaces.has(n)||(e.loadedFontFaces.add(n),!1)})))return!1;var r=!1;n.scene.mapElements((function(e){return(0,U.iB)(e)?((0,oe.bI)(e),r=!0,(0,O.BE)(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?rr(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):rr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,U.JZ)(e)))):e})),r&&n.onSceneUpdated()},this.loadFontsForElements=function(){var e=(0,a.Z)(m().mark((function e(t){var r;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all((0,i.Z)(new Set(t.filter((function(e){return(0,U.iB)(e)})).map((function(e){return e.fontFamily})))).map((function(e){var t,n,r,o,i=(0,I.mO)({fontFamily:e,fontSize:16});if(null===(t=document.fonts)||void 0===t||null===(n=t.check)||void 0===n||!n.call(t,i))return null===(r=document.fonts)||void 0===r||null===(o=r.load)||void 0===o?void 0:o.call(r,i)})));case 2:r=e.sent,n.onFontsLoaded(r.flat().filter(Boolean));case 4:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.scene=r,this.onSceneUpdated=o}));or.loadedFontFaces=new Set;var ir=n(4688),ar=n(2416),lr=n(202),sr=function(){return(0,T.jsxs)(\"div\",{\"data-testid\":\"brave-measure-text-error\",children:[(0,T.jsxs)(\"p\",{children:[(0,j.t)(\"errors.brave_measure_text_error.start\"),\" \u00a0\",(0,T.jsx)(\"span\",{style:{fontWeight:600},children:(0,j.t)(\"errors.brave_measure_text_error.aggressive_block_fingerprint\")}),\" \",(0,j.t)(\"errors.brave_measure_text_error.setting_enabled\"),\".\",(0,T.jsx)(\"br\",{}),(0,T.jsx)(\"br\",{}),(0,j.t)(\"errors.brave_measure_text_error.break\"),\" \",(0,T.jsx)(\"span\",{style:{fontWeight:600},children:(0,j.t)(\"errors.brave_measure_text_error.text_elements\")}),\" \",(0,j.t)(\"errors.brave_measure_text_error.in_your_drawings\"),\".\"]}),(0,T.jsxs)(\"p\",{children:[(0,j.t)(\"errors.brave_measure_text_error.strongly_recommend\"),\" \",(0,T.jsxs)(\"a\",{href:\"http:\/\/docs.excalidraw.com\/docs\/@excalidraw\/excalidraw\/faq#turning-off-aggresive-block-fingerprinting-in-brave-browser\",children:[\" \",(0,j.t)(\"errors.brave_measure_text_error.steps\")]}),\" \",(0,j.t)(\"errors.brave_measure_text_error.how\"),\".\"]}),(0,T.jsxs)(\"p\",{children:[(0,j.t)(\"errors.brave_measure_text_error.disable_setting\"),\" \",(0,T.jsx)(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\/new\",children:(0,j.t)(\"errors.brave_measure_text_error.issue\")}),\" \",(0,j.t)(\"errors.brave_measure_text_error.write\"),\" \",(0,T.jsx)(\"a\",{href:\"https:\/\/discord.gg\/UexuTaE\",children:(0,j.t)(\"errors.brave_measure_text_error.discord\")}),\".\"]})]})};function cr(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ur(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return ur(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function ur(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function dr(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,f.Z)(e);if(t){var o=(0,f.Z)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,d.Z)(this,n)}}function fr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fr(Object(n),!0).forEach((function(t){(0,p.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var hr={isSmScreen:!1,isMobile:!1,isTouchScreen:!1,canDeviceFitSidebar:!1},mr=v().createContext(hr);mr.displayName=\"DeviceContext\";var gr=v().createContext({container:null,id:null});gr.displayName=\"ExcalidrawContainerContext\";var vr=v().createContext([]);vr.displayName=\"ExcalidrawElementsContext\";var br=v().createContext(pr(pr({},(0,N.im)()),{},{width:0,height:0,offsetLeft:0,offsetTop:0}));br.displayName=\"ExcalidrawAppStateContext\";var yr=v().createContext((function(){console.warn(\"unitialized ExcalidrawSetAppStateContext context!\")}));yr.displayName=\"ExcalidrawSetAppStateContext\";var xr=v().createContext(null);xr.displayName=\"ExcalidrawActionManagerContext\";var wr=function(){return(0,g.useContext)(mr)},kr=function(){return(0,g.useContext)(gr)},Er=function(){return(0,g.useContext)(vr)},Sr=function(){return(0,g.useContext)(br)},jr=function(){return(0,g.useContext)(yr)},_r=function(){return(0,g.useContext)(xr)},Or=!1,Cr=0,Ir=0,Mr=0,Tr=!1,Pr=!1,Dr=!1,Ar={horizontal:null,vertical:null},Lr=0,Zr=!1,zr=!0,Rr=!1,Nr=0,Br=!1,Hr=null,Wr={pointers:new Map,lastCenter:null,initialDistance:null,initialScale:null},Fr=function(e){(0,u.Z)(d,e);var t,n,r=dr(d);function d(e){var t;(0,l.Z)(this,d),t=r.call(this,e),Ur.call((0,c.Z)(t));var n,o=(0,N.im)(),i=e.excalidrawRef,a=e.viewModeEnabled,s=void 0!==a&&a,u=e.zenModeEnabled,f=void 0!==u&&u,p=e.gridModeEnabled,h=void 0!==p&&p,m=e.theme,g=void 0===m?o.theme:m,v=e.name,b=void 0===v?o.name:v;if(t.state=pr(pr(pr({},o),{},{theme:g,isLoading:!0},t.getCanvasOffsets()),{},{viewModeEnabled:s,zenModeEnabled:f,gridSize:h?M.k:null,name:b,width:window.innerWidth,height:window.innerHeight,showHyperlinkPopup:!1,isSidebarDocked:!1}),t.id=(0,w.x0)(),t.library=new W.ZP((0,c.Z)(t)),i){var y,x=\"current\"in i&&(null===(y=i.current)||void 0===y?void 0:y.readyPromise)||(0,I.PI)(),k={ready:!0,readyPromise:x,updateScene:t.updateScene,updateLibrary:t.library.updateLibrary,addFiles:t.addFiles,resetScene:t.resetScene,getSceneElementsIncludingDeleted:t.getSceneElementsIncludingDeleted,history:{clear:t.resetHistory},scrollToContent:t.scrollToContent,getSceneElements:t.getSceneElements,getAppState:function(){return t.state},getFiles:function(){return t.files},refresh:t.refresh,setToast:t.setToast,id:t.id,setActiveTool:t.setActiveTool,setCursor:t.setCursor,resetCursor:t.resetCursor,toggleMenu:t.toggleMenu};\"function\"==typeof i?i(k):i.current=k,x.resolve(k)}return t.excalidrawContainerValue={container:t.excalidrawContainerRef.current,id:t.id},t.scene=new ae.Z,t.fonts=new or({scene:t.scene,onSceneUpdated:t.onSceneUpdated}),t.history=new te,t.actionManager=new z(t.syncActionResult,(function(){return t.state}),(function(){return t.scene.getElementsIncludingDeleted()}),(0,c.Z)(t)),t.actionManager.registerAll(R.N),t.actionManager.registerAction((n=t.history,{name:\"undo\",trackEvent:{category:\"history\"},perform:function(e,t){return A(e,t,(function(){return n.undoOnce()}))},keyTest:function(e){return e[_.tW.CTRL_OR_CMD]&&e.key.toLowerCase()===_.tW.Z&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,T.jsx)(S.V,{type:\"button\",icon:E.UE,\"aria-label\":(0,j.t)(\"buttons.undo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}})),t.actionManager.registerAction(function(e){return{name:\"redo\",trackEvent:{category:\"history\"},perform:function(t,n){return A(t,n,(function(){return e.redoOnce()}))},keyTest:function(e){return e[_.tW.CTRL_OR_CMD]&&e.shiftKey&&e.key.toLowerCase()===_.tW.Z||M.ED&&e.ctrlKey&&!e.shiftKey&&e.key===_.tW.Y},PanelComponent:function(e){var t=e.updateData,n=e.data;return(0,T.jsx)(S.V,{type:\"button\",icon:E.zG,\"aria-label\":(0,j.t)(\"buttons.redo\"),onClick:t,size:(null==n?void 0:n.size)||\"medium\"})},commitToHistory:function(){return!1}}}(t.history)),t}return(0,s.Z)(d,[{key:\"renderCanvas\",value:function(){var e=window.devicePixelRatio,t=this.state,n=t.width,r=t.height,o=n*e,i=r*e;return t.viewModeEnabled?(0,T.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r,cursor:M.oc.GRAB},width:o,height:i,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.handleCanvasPointerUp,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onPointerDown:this.handleCanvasPointerDown,children:(0,j.t)(\"labels.drawingCanvas\")}):(0,T.jsx)(\"canvas\",{className:\"excalidraw__canvas\",style:{width:n,height:r},width:o,height:i,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerDown:this.handleCanvasPointerDown,onDoubleClick:this.handleCanvasDoubleClick,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.handleCanvasPointerUp,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,children:(0,j.t)(\"labels.drawingCanvas\")})}},{key:\"render\",value:function(){var e,t=this,n=(0,ie.eD)(this.scene.getNonDeletedElements(),this.state),r=this.props,o=r.renderTopRightUI,i=r.renderCustomStats;return(0,T.jsx)(\"div\",{className:(0,x.Z)(\"excalidraw excalidraw-container\",{\"excalidraw--view-mode\":this.state.viewModeEnabled,\"excalidraw--mobile\":this.device.isMobile}),ref:this.excalidrawContainerRef,onDrop:this.handleAppOnDrop,tabIndex:0,onKeyDown:this.props.handleKeyboardGlobally?void 0:this.onKeyDown,children:(0,T.jsx)(gr.Provider,{value:this.excalidrawContainerValue,children:(0,T.jsx)(mr.Provider,{value:this.device,children:(0,T.jsx)(yr.Provider,{value:this.setAppState,children:(0,T.jsxs)(br.Provider,{value:this.state,children:[(0,T.jsx)(vr.Provider,{value:this.scene.getNonDeletedElements(),children:(0,T.jsxs)(xr.Provider,{value:this.actionManager,children:[(0,T.jsx)(Fn,{canvas:this.canvas,appState:this.state,files:this.files,setAppState:this.setAppState,actionManager:this.actionManager,elements:this.scene.getNonDeletedElements(),onLockToggle:this.toggleLock,onPenModeToggle:this.togglePenMode,onHandToolToggle:this.onHandToolToggle,onInsertElements:function(e){return t.addElementsFromPasteOrLibrary({elements:e,position:\"center\",files:null})},langCode:(0,j.G3)().code,renderTopRightUI:o,renderCustomStats:i,renderCustomSidebar:this.props.renderSidebar,showExitZenModeBtn:void 0===(null===(e=this.props)||void 0===e?void 0:e.zenModeEnabled)&&this.state.zenModeEnabled,libraryReturnUrl:this.props.libraryReturnUrl,UIOptions:this.props.UIOptions,focusContainer:this.focusContainer,library:this.library,id:this.id,onImageAction:this.onImageAction,renderWelcomeScreen:!this.state.isLoading&&this.state.showWelcomeScreen&&\"selection\"===this.state.activeTool.type&&!this.scene.getElementsIncludingDeleted().length,children:this.props.children}),(0,T.jsx)(\"div\",{className:\"excalidraw-textEditorContainer\"}),(0,T.jsx)(\"div\",{className:\"excalidraw-contextMenuContainer\"}),1===n.length&&!this.state.contextMenu&&this.state.showHyperlinkPopup&&(0,T.jsx)(er.nW,{element:n[0],setAppState:this.setAppState,onLinkOpen:this.props.onLinkOpen},n[0].id),null!==this.state.toast&&(0,T.jsx)(Yn,{message:this.state.toast.message,onClose:function(){return t.setToast(null)},duration:this.state.toast.duration,closable:this.state.toast.closable}),this.state.contextMenu&&(0,T.jsx)(_e,{items:this.state.contextMenu.items,top:this.state.contextMenu.top,left:this.state.contextMenu.left,actionManager:this.actionManager}),(0,T.jsx)(\"main\",{children:this.renderCanvas()})]})}),\" \"]})})})})})}},{key:\"componentDidMount\",value:(n=(0,a.Z)(m().mark((function e(){var t,n,r,o,i,a,l=this;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.unmounted=!1,this.excalidrawContainerValue.container=this.excalidrawContainerRef.current,\"production\"!==M.Vi.TEST&&\"production\"!==M.Vi.DEVELOPMENT||(this.setState.bind(this),Object.defineProperties(window.h,{state:{configurable:!0,get:function(){return l.state}},setState:{configurable:!0,value:function(){return l.setState.apply(l,arguments)}},app:{configurable:!0,value:this},history:{configurable:!0,value:this.history}})),this.scene.addCallback(this.onSceneUpdated),this.addEventListeners(),this.excalidrawContainerRef.current&&this.focusContainer(),this.excalidrawContainerRef.current&&this.refreshDeviceState(this.excalidrawContainerRef.current),\"ResizeObserver\"in window&&null!==(t=this.excalidrawContainerRef)&&void 0!==t&&t.current?(this.resizeObserver=new ResizeObserver((function(){zr=!1,l.refreshDeviceState(l.excalidrawContainerRef.current),l.updateDOMRect()})),null===(n=this.resizeObserver)||void 0===n||n.observe(this.excalidrawContainerRef.current)):window.matchMedia&&(r=window.matchMedia(\"(max-width: \".concat(M.kV,\"px), (max-height: \").concat(M.Yx,\"px) and (max-width: \").concat(M.sS,\"px)\")),o=window.matchMedia(\"(max-width: \".concat(M.eF,\"px)\")),i=window.matchMedia(\"(min-width: \".concat(null!=this.props.UIOptions.dockedSidebarBreakpoint?this.props.UIOptions.dockedSidebarBreakpoint:M.sk,\"px)\")),a=function(){l.excalidrawContainerRef.current.getBoundingClientRect(),l.device=(0,I.v4)(l.device,{isSmScreen:o.matches,isMobile:r.matches,canDeviceFitSidebar:i.matches})},r.addListener(a),this.detachIsMobileMqHandler=function(){return r.removeListener(a)}),new URLSearchParams(window.location.search.slice(1)).has(\"web-share-target\")?this.restoreFileFromShare():this.updateDOMRect(this.initializeScene),(0,M.jP)()&&!(0,De.eB)()&&this.setState({errorMessage:(0,T.jsx)(sr,{})});case 11:case\"end\":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:\"componentWillUnmount\",value:function(){var e;this.files={},this.imageCache.clear(),null===(e=this.resizeObserver)||void 0===e||e.disconnect(),this.unmounted=!0,this.removeEventListeners(),this.scene.destroy(),clearTimeout(Lr),Lr=0}},{key:\"removeEventListeners\",value:function(){var e,t,n,r,o;document.removeEventListener(M.Ks.POINTER_UP,this.removePointer),document.removeEventListener(M.Ks.COPY,this.onCopy),document.removeEventListener(M.Ks.PASTE,this.pasteFromClipboard),document.removeEventListener(M.Ks.CUT,this.onCut),null===(e=this.excalidrawContainerRef.current)||void 0===e||e.removeEventListener(M.Ks.WHEEL,this.onWheel),null===(t=this.nearestScrollableContainer)||void 0===t||t.removeEventListener(M.Ks.SCROLL,this.onScroll),document.removeEventListener(M.Ks.KEYDOWN,this.onKeyDown,!1),document.removeEventListener(M.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition,!1),document.removeEventListener(M.Ks.KEYUP,this.onKeyUp),window.removeEventListener(M.Ks.RESIZE,this.onResize,!1),window.removeEventListener(M.Ks.UNLOAD,this.onUnload,!1),window.removeEventListener(M.Ks.BLUR,this.onBlur,!1),null===(n=this.excalidrawContainerRef.current)||void 0===n||n.removeEventListener(M.Ks.DRAG_OVER,this.disableEvent,!1),null===(r=this.excalidrawContainerRef.current)||void 0===r||r.removeEventListener(M.Ks.DROP,this.disableEvent,!1),document.removeEventListener(M.Ks.GESTURE_START,this.onGestureStart,!1),document.removeEventListener(M.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.removeEventListener(M.Ks.GESTURE_END,this.onGestureEnd,!1),null===(o=this.detachIsMobileMqHandler)||void 0===o||o.call(this)}},{key:\"addEventListeners\",value:function(){var e,t,n,r,o,i=this;this.removeEventListeners(),document.addEventListener(M.Ks.POINTER_UP,this.removePointer),document.addEventListener(M.Ks.COPY,this.onCopy),null===(e=this.excalidrawContainerRef.current)||void 0===e||e.addEventListener(M.Ks.WHEEL,this.onWheel,{passive:!1}),this.props.handleKeyboardGlobally&&document.addEventListener(M.Ks.KEYDOWN,this.onKeyDown,!1),document.addEventListener(M.Ks.KEYUP,this.onKeyUp,{passive:!0}),document.addEventListener(M.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition),null===(t=document.fonts)||void 0===t||null===(n=t.addEventListener)||void 0===n||n.call(t,\"loadingdone\",(function(e){var t=e.fontfaces;i.fonts.onFontsLoaded(t)})),document.addEventListener(M.Ks.GESTURE_START,this.onGestureStart,!1),document.addEventListener(M.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.addEventListener(M.Ks.GESTURE_END,this.onGestureEnd,!1),this.state.viewModeEnabled||(document.addEventListener(M.Ks.PASTE,this.pasteFromClipboard),document.addEventListener(M.Ks.CUT,this.onCut),this.props.detectScroll&&(this.nearestScrollableContainer=(0,I.Ip)(this.excalidrawContainerRef.current),this.nearestScrollableContainer.addEventListener(M.Ks.SCROLL,this.onScroll)),window.addEventListener(M.Ks.RESIZE,this.onResize,!1),window.addEventListener(M.Ks.UNLOAD,this.onUnload,!1),window.addEventListener(M.Ks.BLUR,this.onBlur,!1),null===(r=this.excalidrawContainerRef.current)||void 0===r||r.addEventListener(M.Ks.DRAG_OVER,this.disableEvent,!1),null===(o=this.excalidrawContainerRef.current)||void 0===o||o.addEventListener(M.Ks.DROP,this.disableEvent,!1))}},{key:\"componentDidUpdate\",value:function(e,t){var n,r,o,i=this;(this.state.showWelcomeScreen||this.scene.getElementsIncludingDeleted().length||this.setState({showWelcomeScreen:!0}),this.excalidrawContainerRef.current&&e.UIOptions.dockedSidebarBreakpoint!==this.props.UIOptions.dockedSidebarBreakpoint&&this.refreshDeviceState(this.excalidrawContainerRef.current),t.scrollX!==this.state.scrollX||t.scrollY!==this.state.scrollY)&&(null===(r=this.props)||void 0===r||null===(o=r.onScrollChange)||void 0===o||o.call(r,this.state.scrollX,this.state.scrollY));Object.keys(this.state.selectedElementIds).length&&(0,N.EN)(this.state)&&this.setState({activeTool:(0,I.Om)(this.state,{type:\"selection\"})}),\"eraser\"===this.state.activeTool.type&&t.theme!==this.state.theme&&(0,I.OF)(this.canvas,this.state.theme),\"selection\"===t.activeTool.type&&\"selection\"!==this.state.activeTool.type&&this.state.showHyperlinkPopup&&this.setState({showHyperlinkPopup:!1}),e.langCode!==this.props.langCode&&this.updateLanguage(),e.viewModeEnabled!==this.props.viewModeEnabled&&this.setState({viewModeEnabled:!!this.props.viewModeEnabled}),t.viewModeEnabled!==this.state.viewModeEnabled&&(this.addEventListeners(),this.deselectElements()),e.zenModeEnabled!==this.props.zenModeEnabled&&this.setState({zenModeEnabled:!!this.props.zenModeEnabled}),e.theme!==this.props.theme&&this.props.theme&&this.setState({theme:this.props.theme}),e.gridModeEnabled!==this.props.gridModeEnabled&&this.setState({gridSize:this.props.gridModeEnabled?M.k:null}),this.props.name&&e.name!==this.props.name&&this.setState({name:this.props.name}),null===(n=this.excalidrawContainerRef.current)||void 0===n||n.classList.toggle(\"theme--dark\",\"dark\"===this.state.theme),this.state.editingLinearElement&&!this.state.selectedElementIds[this.state.editingLinearElement.elementId]&&setTimeout((function(){i.state.editingLinearElement&&i.actionManager.executeAction(k.pL)})),this.state.selectedLinearElement&&!this.state.selectedElementIds[this.state.selectedLinearElement.elementId]&&this.setState({selectedLinearElement:null});var a,l,s=t.multiElement;(t.activeTool!==this.state.activeTool&&null!=s&&(0,C.N1)(this.state)&&(0,G.Mn)(s,!1)&&(0,C.R)(s,this.state,this.scene,(0,I.AK)(K._.getPointAtIndexGlobalCoordinates(s,-1))),this.renderScene(),this.history.record(this.state,this.scene.getElementsIncludingDeleted()),this.state.isLoading)||(null===(a=(l=this.props).onChange)||void 0===a||a.call(l,this.scene.getElementsIncludingDeleted(),this.state,this.files))}},{key:\"addTextFromPaste\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(0,I.dE)({clientX:Ir,clientY:Mr},this.state),r=n.x,o=n.y,a={x:r,y:o,strokeColor:this.state.currentItemStrokeColor,backgroundColor:this.state.currentItemBackgroundColor,fillStyle:this.state.currentItemFillStyle,strokeWidth:this.state.currentItemStrokeWidth,strokeStyle:this.state.currentItemStrokeStyle,roundness:null,roughness:this.state.currentItemRoughness,opacity:this.state.currentItemOpacity,text:e,fontSize:this.state.currentItemFontSize,fontFamily:this.state.currentItemFontFamily,textAlign:this.state.currentItemTextAlign,verticalAlign:M.hs,locked:!1},l=10,s=o,c=t?[e]:e.split(\"\\n\"),u=c.reduce((function(e,t,n){var o=t.trim(),i=(0,De.PT)(a.fontFamily);if(o.length){var u=(0,U.VL)(pr(pr({},a),{},{x:r,y:s,text:o,lineHeight:i}));e.push(u),s+=u.height+l}else{var d;(null===(d=c[n-1])||void 0===d?void 0:d.trim())&&(s+=(0,De.Rg)(a.fontSize,i)+l)}return e}),[]);0!==u.length&&(this.scene.replaceAllElements([].concat((0,i.Z)(this.scene.getElementsIncludingDeleted()),(0,i.Z)(u))),this.setState({selectedElementIds:Object.fromEntries(u.map((function(e){return[e.id,!0]})))}),!t&&u.length>1&&!1===Br&&!this.device.isMobile&&(this.setToast({message:(0,j.t)(\"toast.pasteAsSingleElement\",{shortcut:(0,I.uY)(\"CtrlOrCmd+Shift+V\")}),duration:5e3}),Br=!0),this.history.resumeRecording())}},{key:\"handleTextWysiwyg\",value:function(e,t){var n=this,r=t.isExistingElement,o=void 0!==r&&r,a=function(t,r,o){n.scene.replaceAllElements((0,i.Z)(n.scene.getElementsIncludingDeleted().map((function(n){return n.id===e.id&&(0,U.iB)(n)?(0,U.N_)(n,{text:t,isDeleted:o,originalText:r}):n}))))};(0,U.b_)({id:e.id,canvas:this.canvas,getViewportCoords:function(e,t){var r=(0,I._i)({sceneX:e,sceneY:t},n.state),o=r.x,i=r.y;return[o-n.state.offsetLeft,i-n.state.offsetTop]},onChange:(0,I.tH)((function(t){a(t,t,!1),(0,U.qP)(e)&&(0,C.Ww)(e)})),onSubmit:(0,I.tH)((function(t){var r=t.text,i=t.viaKeyboard,l=t.originalText,s=!r.trim();if(a(r,l,s),!s&&i){var c=e.containerId?e.containerId:e.id;n.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},c,!0))}}))}s&&(0,C.$q)(n.scene.getNonDeletedElements(),[e]),s&&!o||n.history.resumeRecording(),n.setState({draggingElement:null,editingElement:null}),n.state.activeTool.locked&&(0,I.Uk)(n.canvas,n.state),n.focusContainer()})),element:e,excalidrawContainer:this.excalidrawContainerRef.current,app:this}),this.deselectElements(),a(e.text,e.originalText,!1)}},{key:\"deselectElements\",value:function(){this.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}},{key:\"getTextElementAtPosition\",value:function(e,t){var n=this.getElementAtPosition(e,t,{includeBoundTextElement:!0});return n&&(0,U.iB)(n)&&!n.isDeleted?n:null}},{key:\"getElementAtPosition\",value:function(e,t,n){var r=this.getElementsAtPosition(e,t,null==n?void 0:n.includeBoundTextElement,null==n?void 0:n.includeLockedElements);if(r.length>1){if(null!=n&&n.preferSelected)for(var o=r.length-1;o>-1;o--)if(this.state.selectedElementIds[r[o].id])return r[o];var i=r[r.length-1];return(0,U.wB)(i,this.state,e,t)?r[r.length-2]:i}return 1===r.length?r[0]:null}},{key:\"getElementsAtPosition\",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=r&&o?this.scene.getNonDeletedElements():this.scene.getNonDeletedElements().filter((function(e){return(o||!e.locked)&&(r||!((0,U.iB)(e)&&e.containerId))}));return(0,ie.CJ)(i,(function(r){return(0,U.wX)(r,n.state,e,t)}))}},{key:\"handleHoverSelectedLinearElement\",value:function(e,t,n){var r=K._.getElement(e.elementId),o=(0,De.WJ)(r);if(r)if(this.state.selectedLinearElement){var i=-1,a=null;(0,Qn.Qu)(r,this.state,[t,n])?(i=K._.getPointIndexUnderCursor(r,this.state.zoom,t,n),a=K._.getSegmentMidpointHitCoords(e,{x:t,y:n},this.state),i>=0||a?(0,I.KJ)(this.canvas,M.oc.POINTER):(0,I.KJ)(this.canvas,M.oc.MOVE)):((0,nr.oY)([r],this.state)&&(0,U.wB)(r,this.state,t,n)||o&&(0,U.wX)(o,this.state,t,n))&&(0,I.KJ)(this.canvas,M.oc.MOVE),this.state.selectedLinearElement.hoverPointIndex!==i&&this.setState({selectedLinearElement:pr(pr({},this.state.selectedLinearElement),{},{hoverPointIndex:i})}),K._.arePointsEqual(this.state.selectedLinearElement.segmentMidPointHoveredCoords,a)||this.setState({selectedLinearElement:pr(pr({},this.state.selectedLinearElement),{},{segmentMidPointHoveredCoords:a})})}else(0,I.KJ)(this.canvas,M.oc.AUTO)}},{key:\"maybeCleanupAfterMissingPointerUp\",value:function(e){null!==Hr&&Hr(e)}},{key:\"updateGestureOnPointerDown\",value:function(e){Wr.pointers.set(e.pointerId,{x:e.clientX,y:e.clientY}),2===Wr.pointers.size&&(Wr.lastCenter=V(Wr.pointers),Wr.initialScale=this.state.zoom.value,Wr.initialDistance=X(Array.from(Wr.pointers.values())))}},{key:\"initialPointerDownState\",value:function(e){var t=(0,I.dE)(e,this.state),n=(0,ie.eD)(this.scene.getNonDeletedElements(),this.state),r=(0,U.KP)(n),i=(0,o.Z)(r,4),a=i[0],l=i[1],s=i[2],c=i[3];return{origin:t,withCmdOrCtrl:e[_.tW.CTRL_OR_CMD],originInGrid:(0,I.AK)((0,ne.wC)(t.x,t.y,this.state.gridSize)),scrollbars:(0,ie._4)(Ar,e.clientX-this.state.offsetLeft,e.clientY-this.state.offsetTop),lastCoords:pr({},t),originalElements:this.scene.getNonDeletedElements().reduce((function(e,t){return e.set(t.id,(0,Y.OL)(t)),e}),new Map),resize:{handleType:!1,isResizing:!1,offset:{x:0,y:0},arrowDirection:\"origin\",center:{x:(s+a)\/2,y:(c+l)\/2}},hit:{element:null,allHitElements:[],wasAddedToSelection:!1,hasBeenDuplicated:!1,hasHitCommonBoundingBoxOfSelectedElements:this.isHittingCommonBoundingBoxOfSelectedElements(t,n)},drag:{hasOccurred:!1,offset:null},eventListeners:{onMove:null,onUp:null,onKeyUp:null,onKeyDown:null},boxSelection:{hasOccurred:!1},elementIdsToErase:{}}}},{key:\"handleDraggingScrollBar\",value:function(e,t){var n=this;if(!t.scrollbars.isOverEither||this.state.multiElement)return!1;Dr=!0,t.lastCoords.x=e.clientX,t.lastCoords.y=e.clientY;var r=(0,I.$9)((function(e){e.target instanceof HTMLElement&&n.handlePointerMoveOverScrollbars(e,t)})),o=(0,I.tH)((function(){Dr=!1,(0,I.Uk)(n.canvas,n.state),Hr=null,n.setState({cursorButton:\"up\"}),n.savePointer(e.clientX,e.clientY,\"up\"),window.removeEventListener(M.Ks.POINTER_MOVE,r),window.removeEventListener(M.Ks.POINTER_UP,o),r.flush()}));return Hr=o,window.addEventListener(M.Ks.POINTER_MOVE,r),window.addEventListener(M.Ks.POINTER_UP,o),!0}},{key:\"isASelectedElement\",value:function(e){return null!=e&&this.state.selectedElementIds[e.id]}},{key:\"isHittingCommonBoundingBoxOfSelectedElements\",value:function(e,t){if(t.length<2)return!1;var n=10\/this.state.zoom.value,r=(0,U.KP)(t),i=(0,o.Z)(r,4),a=i[0],l=i[1],s=i[2],c=i[3];return e.x>a-n&&e.x<s+n&&e.y>l-n&&e.y<c+n}},{key:\"onKeyDownFromPointerDownHandler\",value:function(e){var t=this;return(0,I.tH)((function(n){t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onKeyUpFromPointerDownHandler\",value:function(e){var t=this;return(0,I.tH)((function(n){n.key===_.tW.ALT&&n.preventDefault(),t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))}},{key:\"onPointerMoveFromPointerDownHandler\",value:function(e){var t=this;return(0,I.$9)((function(n){var r;if(null===e.drag.offset&&(e.drag.offset=(0,I.AK)((0,U.$V)((0,ie.eD)(t.scene.getNonDeletedElements(),t.state),e.origin.x,e.origin.y))),n.target instanceof HTMLElement&&!t.handlePointerMoveOverScrollbars(n,e)){var a=(0,I.dE)(n,t.state);if((0,N.EN)(t.state))t.handleEraser(n,e,a);else{var l=(0,ne.wC)(a.x,a.y,t.state.gridSize),s=(0,o.Z)(l,2),c=s[0],u=s[1];if(e.drag.hasOccurred||\"arrow\"!==t.state.activeTool.type&&\"line\"!==t.state.activeTool.type||!((0,ne.LW)(a.x,a.y,e.origin.x,e.origin.y)<M.f)){if(e.resize.isResizing&&(e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeHandleResize(e,n)))return!0;if(t.state.selectedLinearElement){var d=t.state.editingLinearElement||t.state.selectedLinearElement;if(K._.shouldAddMidpoint(t.state.selectedLinearElement,a,t.state)){var f=K._.addMidpoint(t.state.selectedLinearElement,a,t.state);if(!f)return;return void(0,b.flushSync)((function(){t.state.selectedLinearElement&&t.setState({selectedLinearElement:pr(pr({},t.state.selectedLinearElement),{},{pointerDownState:f.pointerDownState,selectedPointsIndices:f.selectedPointsIndices})}),t.state.editingLinearElement&&t.setState({editingLinearElement:pr(pr({},t.state.editingLinearElement),{},{pointerDownState:f.pointerDownState,selectedPointsIndices:f.selectedPointsIndices})})}))}if(null!==d.pointerDownState.segmentMidpoint.value&&!d.pointerDownState.segmentMidpoint.added)return;var h=K._.handlePointDragging(n,t.state,a.x,a.y,(function(e,n){t.maybeSuggestBindingsForLinearElementAtCoords(e,n)}),d);if(h)return e.lastCoords.x=a.x,e.lastCoords.y=a.y,e.drag.hasOccurred=!0,t.state.editingLinearElement&&!t.state.editingLinearElement.isDragging&&t.setState({editingLinearElement:pr(pr({},t.state.editingLinearElement),{},{isDragging:!0})}),void(t.state.selectedLinearElement.isDragging||t.setState({selectedLinearElement:pr(pr({},t.state.selectedLinearElement),{},{isDragging:!0})}))}var m=e.hit.allHitElements.some((function(e){return t.isASelectedElement(e)})),g=t.state.editingLinearElement&&n.shiftKey&&t.state.editingLinearElement.elementId===(null===(r=e.hit.element)||void 0===r?void 0:r.id);if((m||e.hit.hasHitCommonBoundingBoxOfSelectedElements)&&!g){var v=(0,ie.eD)(t.scene.getNonDeletedElements(),t.state);if(v.every((function(e){return e.locked})))return;if(e.drag.hasOccurred=!0,v.length>0&&!e.withCmdOrCtrl){var y=(0,ne.wC)(a.x-e.drag.offset.x,a.y-e.drag.offset.y,t.state.gridSize),x=(0,o.Z)(y,2),w=x[0],k=x[1],E=[Math.abs(a.x-e.origin.x),Math.abs(a.y-e.origin.y)],S=E[0],j=E[1],T=n.shiftKey;if((0,U.o8)(e,v,w,k,T,S,j,t.state),t.maybeSuggestBindingForAll(v),n.altKey&&!e.hit.hasBeenDuplicated){e.hit.hasBeenDuplicated=!0;var P,D=[],A=[],L=new Map,Z=new Map,z=e.hit.element,R=t.scene.getElementsIncludingDeleted(),B=(0,ie.eD)(R,t.state,!0).map((function(e){return e.id})),H=cr(R);try{for(H.s();!(P=H.n()).done;){var W=P.value;if(B.includes(W.id)||W.id===(null==z?void 0:z.id)&&e.hit.wasAddedToSelection){var F=(0,U.Sy)(t.state.editingGroupId,L,W),Y=(0,ne.wC)(e.origin.x-e.drag.offset.x,e.origin.y-e.drag.offset.y,t.state.gridSize),V=(0,o.Z)(Y,2),X=V[0],q=V[1];(0,O.DR)(F,{x:F.x+(X-w),y:F.y+(q-k)}),D.push(F),A.push(W),Z.set(W.id,F.id)}else D.push(W)}}catch(e){H.e(e)}finally{H.f()}var $=[].concat(D,A);(0,De.P7)(D,A,Z),(0,C.ek)($,A,Z,\"duplicatesServeAsOld\"),t.scene.replaceAllElements($)}return}}var Q=t.state.draggingElement;if(Q){if(\"freedraw\"===Q.type){var ee=Q.points,te=a.x-Q.x,re=a.y-Q.y,oe=ee.length>0&&ee[ee.length-1];if(!(oe&&oe[0]===te&&oe[1]===re)){var ae=Q.simulatePressure?Q.pressures:[].concat((0,i.Z)(Q.pressures),[n.pressure]);(0,O.DR)(Q,{points:[].concat((0,i.Z)(ee),[[te,re]]),pressures:ae})}}else if((0,G.bt)(Q)){e.drag.hasOccurred=!0;var le=Q.points,se=c-Q.x,ce=u-Q.y;if((0,_.Ge)(n)&&2===le.length){var ue=(0,U.o4)(Q.x,Q.y,a.x,a.y);se=ue.width,ce=ue.height}1===le.length?(0,O.DR)(Q,{points:[].concat((0,i.Z)(le),[[se,ce]])}):2===le.length&&(0,O.DR)(Q,{points:[].concat((0,i.Z)(le.slice(0,-1)),[[se,ce]])}),(0,G.Mn)(Q,!1)&&t.maybeSuggestBindingsForLinearElementAtCoords(Q,[a],t.state.startBoundElement)}else e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeDragNewGenericElement(e,n);if(\"selection\"===t.state.activeTool.type){e.boxSelection.hasOccurred=!0;var de=t.scene.getNonDeletedElements();if(n.shiftKey||t.state.editingLinearElement||!(0,ie.N)(de,t.state)||(e.withCmdOrCtrl&&e.hit.element?t.setState((function(n){return(0,J.bO)(pr(pr({},n),{},{selectedElementIds:(0,p.Z)({},e.hit.element.id,!0)}),t.scene.getNonDeletedElements())})):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),t.state.editingLinearElement)K._.handleBoxSelection(n,t.state,t.setState.bind(t));else{var fe=(0,ie.Yp)(de,Q);t.setState((function(n){return(0,J.bO)(pr(pr({},n),{},{selectedElementIds:pr(pr(pr({},n.selectedElementIds),fe.reduce((function(e,t){return e[t.id]=!0,e}),{})),e.hit.element?(0,p.Z)({},e.hit.element.id,!fe.length):null),showHyperlinkPopup:!(1!==fe.length||!fe[0].link)&&\"info\",selectedLinearElement:1===fe.length&&(0,G.bt)(fe[0])?new K._(fe[0],t.scene):null}),t.scene.getNonDeletedElements())}))}}}}}}}))}},{key:\"handlePointerMoveOverScrollbars\",value:function(e,t){if(t.scrollbars.isOverHorizontal){var n=e.clientX,r=n-t.lastCoords.x;return this.translateCanvas({scrollX:this.state.scrollX-r\/this.state.zoom.value}),t.lastCoords.x=n,!0}if(t.scrollbars.isOverVertical){var o=e.clientY,i=o-t.lastCoords.y;return this.translateCanvas({scrollY:this.state.scrollY-i\/this.state.zoom.value}),t.lastCoords.y=o,!0}return!1}},{key:\"onPointerUpFromPointerDownHandler\",value:function(e){var t=this;return(0,I.tH)((function(n){var r,o,a,l=t.state,s=l.draggingElement,c=l.resizingElement,u=l.multiElement,d=l.activeTool,f=l.isResizing,h=l.isRotating;if(t.setState({isResizing:!1,isRotating:!1,resizingElement:null,selectionElement:null,cursorButton:\"up\",editingElement:u||(0,U.iB)(t.state.editingElement)?t.state.editingElement:null}),t.savePointer(n.clientX,n.clientY,\"up\"),t.state.editingLinearElement)if(e.boxSelection.hasOccurred||(null===(o=e.hit)||void 0===o||null===(a=o.element)||void 0===a?void 0:a.id)===t.state.editingLinearElement.elementId){var m=K._.handlePointerUp(n,t.state.editingLinearElement,t.state);m!==t.state.editingLinearElement&&t.setState({editingLinearElement:m,suggestedBindings:[]})}else t.actionManager.executeAction(k.pL);else if(t.state.selectedLinearElement){var g,v;if((null===(g=e.hit)||void 0===g||null===(v=g.element)||void 0===v?void 0:v.id)!==t.state.selectedLinearElement.elementId){(0,ie.eD)(t.scene.getNonDeletedElements(),t.state).length>1&&t.setState({selectedLinearElement:null})}else{var b=K._.handlePointerUp(n,t.state.selectedLinearElement,t.state),y=b.startBindingElement,x=b.endBindingElement,w=t.scene.getElement(b.elementId);(0,G.Mn)(w)&&(0,C.HG)(w,y,x),b!==t.state.selectedLinearElement&&t.setState({selectedLinearElement:pr(pr({},b),{},{selectedPointsIndices:null}),suggestedBindings:[]})}}if(Hr=null,e.eventListeners.onMove&&e.eventListeners.onMove.flush(),window.removeEventListener(M.Ks.POINTER_MOVE,e.eventListeners.onMove),window.removeEventListener(M.Ks.POINTER_UP,e.eventListeners.onUp),window.removeEventListener(M.Ks.KEYDOWN,e.eventListeners.onKeyDown),window.removeEventListener(M.Ks.KEYUP,e.eventListeners.onKeyUp),t.state.pendingImageElementId&&t.setState({pendingImageElementId:null}),\"freedraw\"===(null==s?void 0:s.type)){var E=(0,I.dE)(n,t.state),S=s.points,j=E.x-s.x,_=E.y-s.y;j===S[0][0]&&_===S[0][1]&&(_+=1e-4,j+=1e-4);var T=s.simulatePressure?[]:[].concat((0,i.Z)(s.pressures),[n.pressure]);return(0,O.DR)(s,{points:[].concat((0,i.Z)(S),[[j,_]]),pressures:T,lastCommittedPoint:[j,_]}),void t.actionManager.executeAction(k.pL)}if((0,G.pC)(s)){var P=s;try{t.initializeImageDimensions(P),t.setState({selectedElementIds:(0,p.Z)({},P.id,!0)},(function(){t.actionManager.executeAction(k.pL)}))}catch(e){console.error(e),t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==P.id}))),t.actionManager.executeAction(k.pL)}}else if((0,G.bt)(s)){s.points.length>1&&t.history.resumeRecording();var D=(0,I.dE)(n,t.state);e.drag.hasOccurred||!s||u?e.drag.hasOccurred&&!u&&((0,C.N1)(t.state)&&(0,G.Mn)(s,!1)&&(0,C.R)(s,t.state,t.scene,D),t.setState({suggestedBindings:[],startBoundElement:null}),d.locked?t.setState((function(e){return{draggingElement:null}})):((0,I.z8)(t.canvas),t.setState((function(e){return{draggingElement:null,activeTool:(0,I.Om)(t.state,{type:\"selection\"}),selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},s.id,!0)),selectedLinearElement:new K._(s,t.scene)}})))):((0,O.DR)(s,{points:[].concat((0,i.Z)(s.points),[[D.x-s.x,D.y-s.y]])}),t.setState({multiElement:s,editingElement:t.state.draggingElement}))}else{if(\"selection\"!==d.type&&s&&(0,U.QD)(s))return t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().slice(0,-1)),void t.setState({draggingElement:null});s&&(0,O.DR)(s,(0,U.Qp)(s)),c&&t.history.resumeRecording(),c&&(0,U.QD)(c)&&t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==c.id})));var A=e.hit.element;if((null===(r=t.state.selectedLinearElement)||void 0===r?void 0:r.elementId)!==(null==A?void 0:A.id)&&(0,G.bt)(A))1===(0,ie.eD)(t.scene.getNonDeletedElements(),t.state).length&&t.setState({selectedLinearElement:new K._(A,t.scene)});if((0,N.EN)(t.state)){if(0===(0,ne.LW)(t.lastPointerDown.clientX,t.lastPointerDown.clientY,t.lastPointerUp.clientX,t.lastPointerUp.clientY)){var L=(0,I.dE)({clientX:t.lastPointerUp.clientX,clientY:t.lastPointerUp.clientY},t.state);t.getElementsAtPosition(L.x,L.y).forEach((function(t){return e.elementIdsToErase[t.id]={erase:!0,opacity:t.opacity}}))}t.eraseElements(e)}else{var Z;if(Object.keys(e.elementIdsToErase).length&&t.restoreReadyToEraseElements(e),A&&!e.drag.hasOccurred&&!e.hit.wasAddedToSelection&&(!t.state.editingLinearElement||!e.boxSelection.hasOccurred))if(n.shiftKey&&!t.state.editingLinearElement)if(t.state.selectedElementIds[A.id])if((0,J.zq)(t.state,A)){var z=A.groupIds.flatMap((function(e){return(0,J.Fb)(t.scene.getNonDeletedElements(),e)})).map((function(e){return(0,p.Z)({},e.id,!1)})).reduce((function(e,t){return pr(pr({},e),t)}),{});t.setState((function(e){return{selectedGroupIds:pr(pr({},e.selectedElementIds),A.groupIds.map((function(e){return(0,p.Z)({},e,!1)})).reduce((function(e,t){return pr(pr({},e),t)}),{})),selectedElementIds:pr(pr({},e.selectedElementIds),z)}}))}else null!==(Z=t.state.selectedLinearElement)&&void 0!==Z&&Z.isDragging||t.setState((function(e){var n=pr(pr({},e.selectedElementIds),{},(0,p.Z)({},A.id,!1)),r=(0,ie.eD)(t.scene.getNonDeletedElements(),pr(pr({},e),{},{selectedElementIds:n}));return(0,J.bO)(pr(pr({},e),{},{selectedElementIds:n,selectedLinearElement:1===r.length&&(0,G.bt)(r[0])?new K._(r[0],t.scene):e.selectedLinearElement}),t.scene.getNonDeletedElements())}));else t.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},A.id,!0))}}));else t.setState((function(e){var n;return pr({},(0,J.bO)(pr(pr({},e),{},{selectedElementIds:(0,p.Z)({},A.id,!0),selectedLinearElement:(0,G.bt)(A)&&(null===(n=e.selectedLinearElement)||void 0===n?void 0:n.elementId)!==A.id?new K._(A,t.scene):e.selectedLinearElement}),t.scene.getNonDeletedElements()))}));e.drag.hasOccurred||t.state.isResizing||!(A&&(0,U.wB)(A,t.state,e.origin.x,e.origin.y)||!A&&e.hit.hasHitCommonBoundingBoxOfSelectedElements)?(!d.locked&&\"freedraw\"!==d.type&&s&&t.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},s.id,!0))}})),(\"selection\"!==d.type||(0,ie.N)(t.scene.getNonDeletedElements(),t.state))&&t.history.resumeRecording(),(e.drag.hasOccurred||f||h)&&((0,C.N1)(t.state)?C.el:C.H)((0,ie.eD)(t.scene.getNonDeletedElements(),t.state)),d.locked||\"freedraw\"===d.type?t.setState({draggingElement:null,suggestedBindings:[]}):((0,I.z8)(t.canvas),t.setState({draggingElement:null,suggestedBindings:[],activeTool:(0,I.Om)(t.state,{type:\"selection\"})}))):t.state.editingLinearElement?t.setState({editingLinearElement:null}):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}}}))}},{key:\"maybeSuggestBindingForAll\",value:function(e){var t=(0,C.ZB)(e);this.setState({suggestedBindings:t})}},{key:\"clearSelection\",value:function(e){this.setState((function(t){return{selectedElementIds:{},selectedGroupIds:{},editingGroupId:t.editingGroupId&&null!=e&&(0,J.Nd)(e,t.editingGroupId)?t.editingGroupId:null}})),this.setState({selectedElementIds:{},previousSelectedElementIds:this.state.selectedElementIds})}},{key:\"getTextWysiwygSnappedToCenterPosition\",value:function(e,t,n,r){if(r){var o=r.x+r.width\/2,i=r.y+r.height\/2,a=(0,De.TP)(r,n);if(a&&(o=a.x,i=a.y),Math.hypot(e-o,t-i)<M.wZ){var l=(0,I._i)({sceneX:o,sceneY:i},n);return{viewportX:l.x,viewportY:l.y,elementCenterX:o,elementCenterY:i}}}}},{key:\"getCanvasOffsets\",value:function(){var e;if(null!==(e=this.excalidrawContainerRef)&&void 0!==e&&e.current){var t=this.excalidrawContainerRef.current.getBoundingClientRect();return{offsetLeft:t.left,offsetTop:t.top}}return{offsetLeft:0,offsetTop:0}}},{key:\"updateLanguage\",value:(t=(0,a.Z)(m().mark((function e(){var t,n=this;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=j.Mj.find((function(e){return e.code===n.props.langCode}))||j.Fp,e.next=3,(0,j.m0)(t);case 3:this.setAppState({});case 4:case\"end\":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}],[{key:\"resetTapTwice\",value:function(){Or=!1}}]),d}(v().Component);Fr.defaultProps={UIOptions:M.cW};var Ur=function(){var e=this;this.canvas=null,this.rc=null,this.unmounted=!1,this.device=hr,this.excalidrawContainerRef=v().createRef(),this.files={},this.imageCache=new Map,this.lastPointerDown=null,this.lastPointerUp=null,this.lastScenePointer=null,this.focusContainer=function(){var t;e.props.autoFocus&&(null===(t=e.excalidrawContainerRef.current)||void 0===t||t.focus())},this.getSceneElementsIncludingDeleted=function(){return e.scene.getElementsIncludingDeleted()},this.getSceneElements=function(){return e.scene.getNonDeletedElements()},this.syncActionResult=(0,I.tH)((function(t){if(!e.unmounted&&!1!==t){var n=null;if(t.elements&&(t.elements.forEach((function(t){var r;(null===(r=e.state.editingElement)||void 0===r?void 0:r.id)===t.id&&e.state.editingElement!==t&&(0,U.qP)(t)&&(n=t)})),e.scene.replaceAllElements(t.elements),t.commitToHistory&&e.history.resumeRecording()),t.files&&(e.files=t.replaceFiles?t.files:pr(pr({},e.files),t.files),e.addNewImagesToImageCache()),t.appState||n||e.state.contextMenu){var r,o,i,a,l,s,c,u;t.commitToHistory&&e.history.resumeRecording();var d=(null==t||null===(r=t.appState)||void 0===r?void 0:r.viewModeEnabled)||!1,f=(null==t||null===(o=t.appState)||void 0===o?void 0:o.zenModeEnabled)||!1,p=(null==t||null===(i=t.appState)||void 0===i?void 0:i.gridSize)||null,h=(null==t||null===(a=t.appState)||void 0===a?void 0:a.theme)||e.props.theme||M.C6.LIGHT,m=null!==(l=null==t||null===(s=t.appState)||void 0===s?void 0:s.name)&&void 0!==l?l:e.state.name,g=null!==(c=null==t||null===(u=t.appState)||void 0===u?void 0:u.errorMessage)&&void 0!==c?c:e.state.errorMessage;void 0!==e.props.viewModeEnabled&&(d=e.props.viewModeEnabled),void 0!==e.props.zenModeEnabled&&(f=e.props.zenModeEnabled),void 0!==e.props.gridModeEnabled&&(p=e.props.gridModeEnabled?M.k:null),void 0!==e.props.name&&(m=e.props.name),e.setState((function(e){var r;return Object.assign(t.appState||{},{contextMenu:null,editingElement:n||(null===(r=t.appState)||void 0===r?void 0:r.editingElement)||null,viewModeEnabled:d,zenModeEnabled:f,gridSize:p,theme:h,name:m,errorMessage:g})}),(function(){t.syncHistory&&e.history.setCurrentState(e.state,e.scene.getElementsIncludingDeleted())}))}}})),this.onBlur=(0,I.tH)((function(){Tr=!1,e.setState({isBindingEnabled:!0})})),this.onUnload=function(){e.onBlur()},this.disableEvent=function(e){e.preventDefault()},this.resetHistory=function(){e.history.clear()},this.resetScene=(0,I.tH)((function(t){e.scene.replaceAllElements([]),e.setState((function(n){return pr(pr({},(0,N.im)()),{},{isLoading:(null==t||!t.resetLoadingState)&&n.isLoading,theme:e.state.theme})})),e.resetHistory()})),this.initializeScene=(0,a.Z)(m().mark((function t(){var n,r,o,i,l;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return\"launchQueue\"in window&&\"LaunchParams\"in window&&window.launchQueue.setConsumer(function(){var t=(0,a.Z)(m().mark((function t(n){var r,o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n.files.length){t.next=2;break}return t.abrupt(\"return\");case 2:return r=n.files[0],t.next=5,r.getFile();case 5:o=t.sent,e.loadFileToCanvas(new File([o],o.name||\"\",{type:o.type}),r);case 7:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),e.props.theme&&e.setState({theme:e.props.theme}),e.state.isLoading||e.setState({isLoading:!0}),o=null,t.prev=4,t.next=7,e.props.initialData;case 7:if(t.t0=t.sent,t.t0){t.next=10;break}t.t0=null;case 10:o=t.t0,null!==(i=o)&&void 0!==i&&i.libraryItems&&e.library.updateLibrary({libraryItems:o.libraryItems,merge:!0}).catch((function(e){console.error(e)})),t.next=18;break;case 14:t.prev=14,t.t1=t.catch(4),console.error(t.t1),o={appState:{errorMessage:t.t1.message||\"Encountered an error during importing or restoring scene data\"}};case 18:(l=(0,F.nu)(o,null,null,{repairBindings:!0})).appState=pr(pr({},l.appState),{},{theme:e.props.theme||l.appState.theme,openSidebar:(null===(n=l.appState)||void 0===n?void 0:n.openSidebar)||e.state.openSidebar,activeTool:\"image\"===l.appState.activeTool.type?pr(pr({},l.appState.activeTool),{},{type:\"selection\"}):l.appState.activeTool,isLoading:!1,toast:e.state.toast}),null!==(r=o)&&void 0!==r&&r.scrollToContent&&(l.appState=pr(pr({},l.appState),(0,ie.W)(l.elements,pr(pr({},l.appState),{},{width:e.state.width,height:e.state.height,offsetTop:e.state.offsetTop,offsetLeft:e.state.offsetLeft}),null))),e.fonts.loadFontsForElements(l.elements),e.resetHistory(),e.syncActionResult(pr(pr({},l),{},{commitToHistory:!0}));case 24:case\"end\":return t.stop()}}),t,null,[[4,14]])}))),this.refreshDeviceState=function(t){var n=t.getBoundingClientRect(),r=n.width,o=n.height,i=null!=e.props.UIOptions.dockedSidebarBreakpoint?e.props.UIOptions.dockedSidebarBreakpoint:M.sk;e.device=(0,I.v4)(e.device,{isSmScreen:r<M.eF,isMobile:r<M.kV||o<M.Yx&&r<M.sS,canDeviceFitSidebar:r>i})},this.onResize=(0,I.tH)((function(){e.scene.getElementsIncludingDeleted().forEach((function(e){return(0,oe.bI)(e)})),e.setState({})})),this.renderScene=function(){var t={},n={},r={},o={},i={};e.state.collaborators.forEach((function(a,l){if(a.selectedElementIds)for(var s=0,c=Object.keys(a.selectedElementIds);s<c.length;s++){var u=c[s];u in r||(r[u]=[]),r[u].push(l)}a.pointer&&(a.username&&(o[l]=a.username),a.userState&&(i[l]=a.userState),n[l]=(0,I._i)({sceneX:a.pointer.x,sceneY:a.pointer.y},e.state),t[l]=a.button)}));var a=e.scene.getNonDeletedElements().filter((function(t){return(!(0,G.pC)(t)||e.state.pendingImageElementId!==t.id)&&(!e.state.editingElement||\"text\"!==e.state.editingElement.type||t.id!==e.state.editingElement.id)})),l=getComputedStyle(document.querySelector(\".excalidraw\")).getPropertyValue(\"--color-selection\");(0,re.Eu)({elements:a,appState:e.state,scale:window.devicePixelRatio,rc:e.rc,canvas:e.canvas,renderConfig:{selectionColor:l,scrollX:e.state.scrollX,scrollY:e.state.scrollY,viewBackgroundColor:e.state.viewBackgroundColor,zoom:e.state.zoom,remotePointerViewportCoords:n,remotePointerButton:t,remoteSelectedElementIds:r,remotePointerUsernames:o,remotePointerUserStates:i,shouldCacheIgnoreZoom:e.state.shouldCacheIgnoreZoom,theme:e.state.theme,imageCache:e.imageCache,isExporting:!1,renderScrollbars:!e.device.isMobile},callback:function(t){var n=t.atLeastOneVisibleElement,r=t.scrollBars;r&&(Ar=r);var o=!(0,U.iB)(e.state.editingElement)&&(!n&&a.length>0);e.state.scrolledOutside!==o&&e.setState({scrolledOutside:o}),e.scheduleImageRefresh()}},zr&&!0===window.EXCALIDRAW_THROTTLE_RENDER),zr||(zr=!0)},this.onScroll=(0,I.Ds)((function(){var t=e.getCanvasOffsets(),n=t.offsetTop,r=t.offsetLeft;e.setState((function(e){return e.offsetLeft===r&&e.offsetTop===n?null:{offsetTop:n,offsetLeft:r}}))}),M.HM),this.onCut=(0,I.tH)((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!(0,I.s)(t.target)&&(e.cutAll(),t.preventDefault(),t.stopPropagation())})),this.onCopy=(0,I.tH)((function(t){var n;(null===(n=e.excalidrawContainerRef.current)||void 0===n?void 0:n.contains(document.activeElement))&&!(0,I.s)(t.target)&&(e.copyAll(),t.preventDefault(),t.stopPropagation())})),this.cutAll=function(){e.actionManager.executeAction(k.ZM,\"keyboard\")},this.copyAll=function(){e.actionManager.executeAction(k.uN,\"keyboard\")},this.onTapStart=function(t){if(M.Dt||t.preventDefault(),!Or)return Or=!0,clearTimeout(Cr),void(Cr=window.setTimeout(Fr.resetTapTwice,M.Gj));if(Or&&1===t.touches.length){var n=(0,o.Z)(t.touches,1)[0];e.handleCanvasDoubleClick({clientX:n.clientX,clientY:n.clientY}),Or=!1,clearTimeout(Cr)}M.Dt&&t.preventDefault(),2===t.touches.length&&e.setState({selectedElementIds:{}})},this.onTapEnd=function(t){e.resetContextMenuTimer(),t.touches.length>0?e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}):Wr.pointers.clear()},this.pasteFromClipboard=(0,I.tH)(function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c,u,d,f,h,g,v;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=!(!Rr||!n),a=document.activeElement,l=null===(r=e.excalidrawContainerRef.current)||void 0===r?void 0:r.contains(a),!n||l){t.next=5;break}return t.abrupt(\"return\");case 5:if(s=document.elementFromPoint(Ir,Mr),!n||s instanceof HTMLCanvasElement&&!(0,I.s)(a)){t.next=8;break}return t.abrupt(\"return\");case 8:return c=null==n||null===(o=n.clipboardData)||void 0===o?void 0:o.files[0],t.next=11,(0,B.mQ)(n,i);case 11:if(u=t.sent,c||!u.text||i||(d=u.text.trim()).startsWith(\"<svg\")&&d.endsWith(\"<\/svg>\")&&(c=(0,Ye.Pn)(d)),!(0,Ye.Wr)(c)||u.spreadsheet){t.next=20;break}return f=(0,I.dE)({clientX:Ir,clientY:Mr},e.state),h=f.x,g=f.y,v=e.createImageElement({sceneX:h,sceneY:g}),e.insertImageElement(v,c),e.initializeImageDimensions(v),e.setState({selectedElementIds:(0,p.Z)({},v.id,!0)}),t.abrupt(\"return\");case 20:if(!e.props.onPaste){t.next=32;break}return t.prev=21,t.next=24,e.props.onPaste(u,n);case 24:if(t.t0=t.sent,!1!==t.t0){t.next=27;break}return t.abrupt(\"return\");case 27:t.next=32;break;case 29:t.prev=29,t.t1=t.catch(21),console.error(t.t1);case 32:u.errorMessage?e.setState({errorMessage:u.errorMessage}):u.spreadsheet&&!i?e.setState({pasteDialog:{data:u.spreadsheet,shown:!0}}):u.elements?e.addElementsFromPasteOrLibrary({elements:u.elements,files:u.files||null,position:\"cursor\"}):u.text&&e.addTextFromPaste(u.text,i),e.setActiveTool({type:\"selection\"}),null==n||n.preventDefault();case 35:case\"end\":return t.stop()}}),t,null,[[21,29]])})));return function(e){return t.apply(this,arguments)}}()),this.addElementsFromPasteOrLibrary=function(t){var n=(0,F.ET)(t.elements,null),a=(0,U.KP)(n),l=(0,o.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3],f=(0,I.TE)(s,u)\/2,p=(0,I.TE)(c,d)\/2,h=\"object\"===(0,r.Z)(t.position)?t.position.clientX:\"cursor\"===t.position?Ir:e.state.width\/2+e.state.offsetLeft,m=\"object\"===(0,r.Z)(t.position)?t.position.clientY:\"cursor\"===t.position?Mr:e.state.height\/2+e.state.offsetTop,g=(0,I.dE)({clientX:h,clientY:m},e.state),v=g.x-f,b=g.y-p,y=(0,ne.wC)(v,b,e.state.gridSize),x=(0,o.Z)(y,2),w=x[0],k=x[1],E=(0,Y._N)(n.map((function(e){return(0,O.BE)(e,{x:e.x+w-s,y:e.y+k-c})}))),S=[].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),(0,i.Z)(E));e.scene.replaceAllElements(S),E.forEach((function(e){if((0,U.iB)(e)&&(0,G.Xh)(e)){var t=(0,De.tl)(e);(0,U.oN)(e,t)}})),t.files&&(e.files=pr(pr({},e.files),t.files)),e.history.resumeRecording(),e.setState((0,J.bO)(pr(pr({},e.state),{},{openSidebar:e.state.openSidebar&&e.device.canDeviceFitSidebar&&e.state.isSidebarDocked?e.state.openSidebar:null,selectedElementIds:E.reduce((function(e,t){return(0,G.Xh)(t)||(e[t.id]=!0),e}),{}),selectedGroupIds:{}}),e.scene.getNonDeletedElements()),(function(){t.files&&e.addNewImagesToImageCache()})),e.setActiveTool({type:\"selection\"})},this.setAppState=function(t,n){e.setState(t,n)},this.removePointer=function(t){Lr&&e.resetContextMenuTimer(),Wr.pointers.delete(t.pointerId)},this.toggleLock=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"ui\";e.state.activeTool.locked||(0,L.L)(\"toolbar\",\"toggleLock\",\"\".concat(t,\" (\").concat(e.device.isMobile?\"mobile\":\"desktop\",\")\")),e.setState((function(t){return{activeTool:pr(pr(pr({},t.activeTool),(0,I.Om)(e.state,t.activeTool.locked?{type:\"selection\"}:t.activeTool)),{},{locked:!t.activeTool.locked})}}))},this.togglePenMode=function(){e.setState((function(e){return{penMode:!e.penMode}}))},this.onHandToolToggle=function(){e.actionManager.executeAction(ar.eF)},this.zoomCanvas=function(t){e.setState(pr({},(0,le.E)({viewportX:e.state.width\/2+e.state.offsetLeft,viewportY:e.state.height\/2+e.state.offsetTop,nextZoom:(0,ie.j)(t)},e.state)))},this.cancelInProgresAnimation=null,this.scrollToContent=function(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.scene.getNonDeletedElements(),r=arguments.length>1?arguments[1]:void 0;null===(t=e.cancelInProgresAnimation)||void 0===t||t.call(e);var o=Array.isArray(n)?n:[n],i=e.state.zoom,a=e.state.scrollX,l=e.state.scrollY;if(null!=r&&r.fitToContent){var s=(0,ar.md)(o,e.state,!1),c=s.appState;i=c.zoom,a=c.scrollX,l=c.scrollY}else{var u=(0,ie.W)(o,e.state,e.canvas);a=u.scrollX,l=u.scrollY}if(null!=r&&r.animate){var d,f=e.state.scrollX,p=e.state.scrollY;e.zoomCanvas(i.value);var h=(0,I.B4)([f,p],[a,l],(function(t,n){return e.setState({scrollX:t,scrollY:n})}),{duration:null!==(d=null==r?void 0:r.duration)&&void 0!==d?d:500});e.cancelInProgresAnimation=function(){h(),e.cancelInProgresAnimation=null}}else e.setState({scrollX:a,scrollY:l,zoom:i})},this.translateCanvas=function(t){var n;null===(n=e.cancelInProgresAnimation)||void 0===n||n.call(e),e.setState(t)},this.setToast=function(t){e.setState({toast:t})},this.restoreFileFromShare=(0,a.Z)(m().mark((function t(){var n,r,o,i;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,caches.open(\"web-share-target\");case 3:return n=t.sent,t.next=6,n.match(\"shared-file\");case 6:if(!(r=t.sent)){t.next=16;break}return t.next=10,r.blob();case 10:return o=t.sent,i=new File([o],o.name||\"\",{type:o.type}),e.loadFileToCanvas(i,null),t.next=15,n.delete(\"shared-file\");case 15:window.history.replaceState(null,M.iC,window.location.pathname);case 16:t.next=21;break;case 18:t.prev=18,t.t0=t.catch(0),e.setState({errorMessage:t.t0.message});case 21:case\"end\":return t.stop()}}),t,null,[[0,18]])}))),this.addFiles=(0,I.tH)((function(t){var n=t.reduce((function(e,t){return e.set(t.id,t),e}),new Map);e.files=pr(pr({},e.files),Object.fromEntries(n)),e.scene.getNonDeletedElements().forEach((function(t){(0,G.wi)(t)&&n.has(t.fileId)&&(e.imageCache.delete(t.fileId),(0,oe.bI)(t))})),e.scene.informMutation(),e.addNewImagesToImageCache()})),this.updateScene=(0,I.tH)((function(t){t.commitToHistory&&e.history.resumeRecording(),t.appState&&e.setState(t.appState),t.elements&&e.scene.replaceAllElements(t.elements),t.collaborators&&e.setState({collaborators:t.collaborators})})),this.onSceneUpdated=function(){e.setState({})},this.toggleMenu=function(t,n){return\"customSidebar\"!==t||e.props.renderSidebar?(\"library\"===t||\"customSidebar\"===t)&&(r=void 0===n?e.state.openSidebar===t?null:t:n?t:null,e.setState({openSidebar:r}),!!r):(console.warn('attempting to toggle \"customSidebar\", but no \"props.renderSidebar\" is defined'),!1);var r},this.updateCurrentCursorPosition=(0,I.tH)((function(e){Ir=e.clientX,Mr=e.clientY})),this.onKeyDown=(0,I.tH)((function(t){if(\"Proxy\"in window&&(!t.shiftKey&&\/^[A-Z]$\/.test(t.key)||t.shiftKey&&\/^[a-z]$\/.test(t.key))&&(t=new Proxy(t,{get:function(e,n){var r=e[n];return\"function\"==typeof r?r.bind(e):\"key\"===n?t.shiftKey?e.key.toUpperCase():e.key.toLowerCase():r}})),t[_.tW.CTRL_OR_CMD]&&t.key.toLowerCase()===_.tW.V&&(Rr=t.shiftKey,clearTimeout(Nr),Nr=window.setTimeout((function(){Rr=!1}),100)),!t[_.tW.CTRL_OR_CMD]||!(0,I.s)(t.target)||t.code!==_.aU.MINUS&&t.code!==_.aU.EQUAL){if(!((0,I.s)(t.target)&&t.key!==_.tW.ESCAPE||(0,_.Wl)(t.key)&&(0,I._Z)(t.target)))if(t.key!==_.tW.QUESTION_MARK)if(t.key.toLowerCase()===_.tW.E&&t.shiftKey&&t[_.tW.CTRL_OR_CMD])e.setState({openDialog:\"imageExport\"});else{if(t.key===_.tW.PAGE_UP||t.key===_.tW.PAGE_DOWN){var n=(t.shiftKey?e.state.width:e.state.height)\/e.state.zoom.value;t.key===_.tW.PAGE_DOWN&&(n=-n),t.shiftKey?e.translateCanvas((function(e){return{scrollX:e.scrollX+n}})):e.translateCanvas((function(e){return{scrollY:e.scrollY+n}}))}if(!e.actionManager.handleKeyDown(t)&&!e.state.viewModeEnabled){if(t[_.tW.CTRL_OR_CMD]&&e.state.isBindingEnabled&&e.setState({isBindingEnabled:!1}),(0,_.Wl)(t.key)){var r=e.state.gridSize&&(t.shiftKey?M.$e:e.state.gridSize)||(t.shiftKey?M.Iw:M.$e),o=0,i=0;t.key===_.tW.ARROW_LEFT?o=-r:t.key===_.tW.ARROW_RIGHT?o=r:t.key===_.tW.ARROW_UP?i=-r:t.key===_.tW.ARROW_DOWN&&(i=r);var a=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state,!0);a.forEach((function(e){(0,O.DR)(e,{x:e.x+o,y:e.y+i}),(0,C.Ww)(e,{simultaneouslyUpdated:a})})),e.maybeSuggestBindingForAll(a),t.preventDefault()}else if(t.key===_.tW.ENTER){var l=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);if(1===l.length){var s=l[0];if(t[_.tW.CTRL_OR_CMD])(0,G.bt)(s)&&(e.state.editingLinearElement&&e.state.editingLinearElement.elementId===l[0].id||(e.history.resumeRecording(),e.setState({editingLinearElement:new K._(s,e.scene)})));else if((0,U.iB)(s)||(0,De.Zr)(s)){var c;(0,U.iB)(s)||(c=s);var u=(0,De.TP)(s,e.state),d=u.x,f=u.y;return e.startTextEditing({sceneX:d,sceneY:f,container:c}),void t.preventDefault()}}}else if(!t.ctrlKey&&!t.altKey&&!t.metaKey&&null===e.state.draggingElement){var p=function(e){var t=se.find((function(t,n){return null!=t.numericKey&&e===t.numericKey.toString()||t.key&&(\"string\"==typeof t.key?t.key===e:t.key.includes(e))}));return(null==t?void 0:t.value)||null}(t.key);p?(e.state.activeTool.type!==p&&(0,L.L)(\"toolbar\",p,\"keyboard (\".concat(e.device.isMobile?\"mobile\":\"desktop\",\")\")),e.setActiveTool({type:p}),t.stopPropagation()):t.key===_.tW.Q&&(e.toggleLock(\"keyboard\"),t.stopPropagation())}if(t.key===_.tW.SPACE&&0===Wr.pointers.size&&(Tr=!0,(0,I.KJ)(e.canvas,M.oc.GRAB),t.preventDefault()),!(t.key!==_.tW.G&&t.key!==_.tW.S||t.altKey||t[_.tW.CTRL_OR_CMD])){var h=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);if(\"selection\"===e.state.activeTool.type&&!h.length)return;t.key===_.tW.G&&((0,ie.$b)(e.state.activeTool.type)||h.some((function(e){return(0,ie.$b)(e.type)})))&&(e.setState({openPopup:\"backgroundColorPicker\"}),t.stopPropagation()),t.key===_.tW.S&&(e.setState({openPopup:\"strokeColorPicker\"}),t.stopPropagation())}!t[_.tW.CTRL_OR_CMD]||t.key!==_.tW.BACKSPACE&&t.key!==_.tW.DELETE||yn.e_.set(An.w,\"clearCanvas\")}}else e.setState({openDialog:\"help\"})}else t.preventDefault()})),this.onWheel=(0,I.tH)((function(e){e.target instanceof HTMLCanvasElement||!e.ctrlKey||e.preventDefault()})),this.onKeyUp=(0,I.tH)((function(t){if(t.key===_.tW.SPACE&&(e.state.viewModeEnabled?(0,I.KJ)(e.canvas,M.oc.GRAB):\"selection\"===e.state.activeTool.type?(0,I.z8)(e.canvas):((0,I.Uk)(e.canvas,e.state),e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),Tr=!1),t[_.tW.CTRL_OR_CMD]||e.state.isBindingEnabled||e.setState({isBindingEnabled:!0}),(0,_.Wl)(t.key)){var n=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);(0,C.N1)(e.state)?(0,C.el)(n):(0,C.H)(n),e.setState({suggestedBindings:[]})}})),this.setActiveTool=function(t){var n=(0,I.Om)(e.state,t);\"hand\"===n.type?(0,I.KJ)(e.canvas,M.oc.GRAB):Tr||(0,I.Uk)(e.canvas,e.state),(0,I.wO)(document.activeElement)&&e.focusContainer(),(0,G.dt)(n.type)||e.setState({suggestedBindings:[]}),\"image\"===n.type&&e.onImageAction(),\"selection\"!==n.type?e.setState({activeTool:n,selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}):e.setState({activeTool:n})},this.setCursor=function(t){(0,I.KJ)(e.canvas,t)},this.resetCursor=function(){(0,I.z8)(e.canvas)},this.isTouchScreenMultiTouchGesture=function(){return Wr.pointers.size>=2},this.onGestureStart=(0,I.tH)((function(t){t.preventDefault(),e.isTouchScreenMultiTouchGesture()&&e.setState({selectedElementIds:{}}),Wr.initialScale=e.state.zoom.value})),this.onGestureChange=(0,I.tH)((function(t){if(t.preventDefault(),!e.isTouchScreenMultiTouchGesture()){var n=Wr.initialScale;n&&e.setState((function(e){return pr({},(0,le.E)({viewportX:Ir,viewportY:Mr,nextZoom:(0,ie.j)(n*t.scale)},e))}))}})),this.onGestureEnd=(0,I.tH)((function(t){t.preventDefault(),e.isTouchScreenMultiTouchGesture()&&e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}),Wr.initialScale=null})),this.startTextEditing=function(t){var n,r,o,a,l=t.sceneX,s=t.sceneY,c=t.insertAtParentCenter,u=void 0===c||c,d=t.container,f=!1,p=u&&e.getTextWysiwygSnappedToCenterPosition(l,s,e.state,d);d&&p&&(f=!0);var h=null,m=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state),g=(null===(n=h=1===m.length?(0,U.iB)(m[0])?m[0]:d?(0,De.WJ)(m[0]):e.getTextElementAtPosition(l,s):e.getTextElementAtPosition(l,s))||void 0===n?void 0:n.fontFamily)||e.state.currentItemFontFamily,v=(null===(r=h)||void 0===r?void 0:r.lineHeight)||(0,De.PT)(g),b=e.state.currentItemFontSize;if(!h&&f&&d&&!(0,G.Yv)(d)){var y={fontSize:b,fontFamily:g},x=(0,De.AT)((0,I.mO)(y),v),w=(0,De.w_)(b,v),k=(0,De.HE)(d),E=Math.max(k.height,w),S=Math.max(k.width,x);(0,O.DR)(d,{height:E,width:S}),l=d.x+S\/2,s=d.y+E\/2,p&&(p=e.getTextWysiwygSnappedToCenterPosition(l,s,e.state,d))}var j=h||(0,U.VL)({x:p?p.elementCenterX:l,y:p?p.elementCenterY:s,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,text:\"\",fontSize:b,fontFamily:g,textAlign:p?\"center\":e.state.currentItemTextAlign,verticalAlign:p?M.oX.MIDDLE:M.hs,containerId:f?null==d?void 0:d.id:void 0,groupIds:null!==(o=null==d?void 0:d.groupIds)&&void 0!==o?o:[],lineHeight:v,angle:null!==(a=null==d?void 0:d.angle)&&void 0!==a?a:0});if(!h&&f&&d&&(0,O.DR)(d,{boundElements:(d.boundElements||[]).concat({type:\"text\",id:j.id})}),e.setState({editingElement:j}),!h)if(d&&f){var _=e.scene.getElementIndex(d.id);e.scene.insertElementAtIndex(j,_+1)}else e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[j]));e.setState({editingElement:j}),e.handleTextWysiwyg(j,{isExistingElement:!!h})},this.handleCanvasDoubleClick=function(t){if(!e.state.multiElement&&\"selection\"===e.state.activeTool.type){var n=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state);if(1===n.length&&(0,G.bt)(n[0])){if(t[_.tW.CTRL_OR_CMD]&&(!e.state.editingLinearElement||e.state.editingLinearElement.elementId!==n[0].id))return e.history.resumeRecording(),void e.setState({editingLinearElement:new K._(n[0],e.scene)});if(e.state.editingLinearElement&&e.state.editingLinearElement.elementId===n[0].id)return}(0,I.z8)(e.canvas);var r=(0,I.dE)(t,e.state),o=r.x,i=r.y;if((0,J.iJ)(e.state).length>0){var a=e.getElementAtPosition(o,i),l=a&&(0,J.YS)(a,e.state.selectedGroupIds);if(l)return void e.setState((function(t){return(0,J.bO)(pr(pr({},t),{},{editingGroupId:l,selectedElementIds:(0,p.Z)({},a.id,!0),selectedGroupIds:{}}),e.scene.getNonDeletedElements())}))}if((0,I.z8)(e.canvas),!t[_.tW.CTRL_OR_CMD]&&!e.state.viewModeEnabled){var s=(0,De.OW)(e.scene.getNonDeletedElements(),e.state,o,i);if(s&&((0,G.Xo)(s)||!(0,I.Qm)(s.backgroundColor)||(0,Qn.Qu)(s,e.state,[o,i]))){var c=(0,De.TP)(s,e.state);o=c.x,i=c.y}e.startTextEditing({sceneX:o,sceneY:i,insertAtParentCenter:!t.altKey,container:s})}}},this.getElementLinkAtPosition=function(t,n){var r=e.scene.getNonDeletedElements().slice().reverse(),o=1\/0;return r.find((function(r,i){return n&&r.id===n.id&&(o=i),r.link&&i<=o&&(0,er.wq)(r,e.state,[t.x,t.y],e.device.isMobile)}))},this.redirectToLink=function(t,n){var r=(0,ne.LW)(e.lastPointerDown.clientX,e.lastPointerDown.clientY,e.lastPointerUp.clientX,e.lastPointerUp.clientY);if(!(!e.hitLinkElement||n&&r>M.f||!n&&0!==r)){var o=(0,I.dE)(e.lastPointerDown,e.state),i=(0,er.wq)(e.hitLinkElement,e.state,[o.x,o.y],e.device.isMobile),a=(0,I.dE)(e.lastPointerUp,e.state),l=(0,er.wq)(e.hitLinkElement,e.state,[a.x,a.y],e.device.isMobile);if(i&&l){var s,c,u=e.hitLinkElement.link;if(u)if(u=(0,tr.$)(u),e.props.onLinkOpen&&(c=(0,I.ag)(M.Ks.EXCALIDRAW_LINK,t.nativeEvent),e.props.onLinkOpen(pr(pr({},e.hitLinkElement),{},{link:u}),c)),null===(s=c)||void 0===s||!s.defaultPrevented){var d=(0,tr.q)(u)?\"_self\":\"_blank\",f=window.open(void 0,d);f&&(f.opener=null,f.location=u)}}}},this.handleCanvasPointerMove=function(t){e.savePointer(t.clientX,t.clientY,e.state.cursorButton),Wr.pointers.has(t.pointerId)&&Wr.pointers.set(t.pointerId,{x:t.clientX,y:t.clientY});var n=Wr.initialScale;if(2===Wr.pointers.size&&Wr.lastCenter&&n&&Wr.initialDistance){var r=V(Wr.pointers),a=r.x-Wr.lastCenter.x,l=r.y-Wr.lastCenter.y;Wr.lastCenter=r;var s=X(Array.from(Wr.pointers.values())),c=\"freedraw\"===e.state.activeTool.type&&e.state.penMode?1:s\/Wr.initialDistance,u=c?(0,ie.j)(n*c):e.state.zoom.value;e.setState((function(t){var n=(0,le.E)({viewportX:r.x,viewportY:r.y,nextZoom:u},t);e.translateCanvas({zoom:n.zoom,scrollX:n.scrollX+a\/u,scrollY:n.scrollY+l\/u,shouldCacheIgnoreZoom:!0})})),e.resetShouldCacheIgnoreZoomDebounced()}else Wr.lastCenter=Wr.initialDistance=Wr.initialScale=null;if(!(Tr||Pr||Dr||(0,N.l$)(e.state))){var d=(0,ie._4)(Ar,t.clientX-e.state.offsetLeft,t.clientY-e.state.offsetTop).isOverEither;e.state.draggingElement||e.state.multiElement||(d?(0,I.z8)(e.canvas):(0,I.Uk)(e.canvas,e.state));var f=(0,I.dE)(t,e.state),p=f.x,h=f.y;if(e.state.editingLinearElement&&!e.state.editingLinearElement.isDragging){var m=K._.handlePointerMove(t,p,h,e.state);m&&m!==e.state.editingLinearElement&&(0,b.flushSync)((function(){e.setState({editingLinearElement:m})})),null!=(null==m?void 0:m.lastUncommittedPoint)?e.maybeSuggestBindingAtCursor(f):(0,b.flushSync)((function(){e.setState({suggestedBindings:[]})}))}if((0,G.Lx)(e.state.activeTool.type)){var g=e.state.draggingElement;(0,G.Mn)(g,!1)?e.maybeSuggestBindingsForLinearElementAtCoords(g,[f],e.state.startBoundElement):e.maybeSuggestBindingAtCursor(f)}if(e.state.multiElement){var v=e.state.multiElement,y=v.x,x=v.y,w=v.points,k=v.lastCommittedPoint,E=w[w.length-1];if((0,I.Uk)(e.canvas,e.state),E===k)(0,ne.LW)(p-y,h-x,E[0],E[1])>=M.qx?(0,O.DR)(v,{points:[].concat((0,i.Z)(w),[[p-y,h-x]])}):(0,I.KJ)(e.canvas,M.oc.POINTER);else if(w.length>2&&k&&(0,ne.LW)(p-y,h-x,k[0],k[1])<M.qx)(0,I.KJ)(e.canvas,M.oc.POINTER),(0,O.DR)(v,{points:w.slice(0,-1)});else{var S,j=(0,ne.wC)(p,h,e.state.gridSize),C=(0,o.Z)(j,2),T=C[0],P=C[1],D=null!==(S=null==v?void 0:v.lastCommittedPoint)&&void 0!==S?S:[0,0],A=(0,o.Z)(D,2),L=A[0],Z=A[1],z=T-y-L,R=P-x-Z;if((0,_.Ge)(t)){var B=(0,U.o4)(L+y,Z+x,T,P);z=B.width,R=B.height}(0,ne.g6)(w,e.state.zoom.value)&&(0,I.KJ)(e.canvas,M.oc.POINTER),(0,O.DR)(v,{points:[].concat((0,i.Z)(w.slice(0,-1)),[[L+z,Z+R]])})}}else{if(!(Boolean(t.buttons)||\"selection\"!==e.state.activeTool.type&&\"text\"!==e.state.activeTool.type&&\"eraser\"!==e.state.activeTool.type)){var H=e.scene.getNonDeletedElements(),W=(0,ie.eD)(H,e.state);if(1!==W.length||d||e.state.editingLinearElement){if(W.length>1&&!d){var F=(0,U.n2)((0,U.KP)(W),p,h,e.state.zoom,t.pointerType);if(F)return void(0,I.KJ)(e.canvas,(0,U.Un)({transformHandleType:F}))}}else{var Y=(0,U.jt)(H,e.state,p,h,e.state.zoom,t.pointerType);if(Y&&Y.transformHandleType)return void(0,I.KJ)(e.canvas,(0,U.Un)(Y))}var q=e.getElementAtPosition(f.x,f.y);e.hitLinkElement=e.getElementLinkAtPosition(f,q),(0,N.EN)(e.state)||(e.hitLinkElement&&!e.state.selectedElementIds[e.hitLinkElement.id]?((0,I.KJ)(e.canvas,M.oc.POINTER),(0,er.Pp)(e.hitLinkElement,e.state)):((0,er.lV)(),q&&q.link&&e.state.selectedElementIds[q.id]&&!e.state.contextMenu&&!e.state.showHyperlinkPopup?e.setState({showHyperlinkPopup:\"info\"}):\"text\"===e.state.activeTool.type?(0,I.KJ)(e.canvas,(0,U.iB)(q)?M.oc.TEXT:M.oc.CROSSHAIR):e.state.viewModeEnabled?(0,I.KJ)(e.canvas,M.oc.GRAB):d?(0,I.KJ)(e.canvas,M.oc.AUTO):e.state.selectedLinearElement?e.handleHoverSelectedLinearElement(e.state.selectedLinearElement,p,h):t[_.tW.CTRL_OR_CMD]?(0,I.KJ)(e.canvas,M.oc.AUTO):!q&&!e.isHittingCommonBoundingBoxOfSelectedElements(f,W)||null!=q&&q.locked||(0,I.KJ)(e.canvas,M.oc.MOVE)))}}}},this.handleEraser=function(t,n,r){for(var o=function(e){e.forEach((function(e){e.locked||(i.push(e.id),t.altKey?n.elementIdsToErase[e.id]&&n.elementIdsToErase[e.id].erase&&(n.elementIdsToErase[e.id].erase=!1):n.elementIdsToErase[e.id]||(n.elementIdsToErase[e.id]={erase:!0,opacity:e.opacity}))}))},i=[],a=(0,ne.LW)(n.lastCoords.x,n.lastCoords.y,r.x,r.y),l=10\/e.state.zoom.value,s=pr({},n.lastCoords),c=0;c<=a;){if(o(e.getElementsAtPosition(s.x,s.y)),c===a)break;var u=(c=Math.min(c+l,a))\/a,d=(1-u)*s.x+u*r.x,f=(1-u)*s.y+u*r.y;s.x=d,s.y=f}var p=e.scene.getElementsIncludingDeleted().map((function(e){var r=(0,G.Xh)(e)&&i.includes(e.containerId)?e.containerId:e.id;if(i.includes(r)){if(!t.altKey)return(0,O.BE)(e,{opacity:M.xY});if(n.elementIdsToErase[r]&&!1===n.elementIdsToErase[r].erase)return(0,O.BE)(e,{opacity:n.elementIdsToErase[r].opacity})}return e}));e.scene.replaceAllElements(p),n.lastCoords.x=r.x,n.lastCoords.y=r.y},this.handleTouchMove=function(e){Zr=!0},this.handleCanvasPointerDown=function(t){var n,r;if(e.state.contextMenu&&e.setState({contextMenu:null}),e.updateGestureOnPointerDown(t),\"touch\"===t.pointerType&&e.state.draggingElement&&\"freedraw\"===e.state.draggingElement.type){var o=e.state.draggingElement;e.updateScene(pr(pr({},o.points.length<10?{elements:e.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==o.id}))}:{}),{},{appState:{draggingElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:Object.keys(e.state.selectedElementIds).filter((function(e){return e!==o.id})).reduce((function(t,n){return t[n]=e.state.selectedElementIds[n],t}),{})}}))}else{var i=document.getSelection();if(null!=i&&i.anchorNode&&i.removeAllRanges(),e.maybeOpenContextMenuAfterPointerDownOnTouchDevices(t),e.maybeCleanupAfterMissingPointerUp(t),e.state.penDetected||\"pen\"!==t.pointerType||e.setState((function(e){return{penMode:!0,penDetected:!0}})),!e.device.isTouchScreen&&[\"pen\",\"touch\"].includes(t.pointerType)&&(e.device=(0,I.v4)(e.device,{isTouchScreen:!0})),!Pr&&(e.lastPointerDown=t,e.setState({lastPointerDownWith:t.pointerType,cursorButton:\"down\"}),e.savePointer(t.clientX,t.clientY,\"down\"),!e.handleCanvasPanUsingWheelOrSpaceDrag(t)&&!(t.button!==M.Oh.MAIN&&t.button!==M.Oh.TOUCH||Wr.pointers.size>1))){var a=e.initialPointerDownState(t);if(!e.handleDraggingScrollBar(t,a))if(e.clearSelectionIfNotUsingSelection(),e.updateBindingEnabledOnPointerMove(t),!e.handleSelectionOnPointerDown(t,a))if(!e.state.penMode||\"touch\"!==t.pointerType||\"selection\"===e.state.activeTool.type||\"text\"===e.state.activeTool.type||\"image\"===e.state.activeTool.type)if(\"text\"!==e.state.activeTool.type){if(\"arrow\"===e.state.activeTool.type||\"line\"===e.state.activeTool.type)e.handleLinearElementOnPointerDown(t,e.state.activeTool.type,a);else if(\"image\"===e.state.activeTool.type){(0,I.KJ)(e.canvas,M.oc.CROSSHAIR);var l=e.state.pendingImageElementId&&e.scene.getElement(e.state.pendingImageElementId);if(!l)return;e.setState({draggingElement:l,editingElement:l,pendingImageElementId:null,multiElement:null});var s=(0,I.dE)(t,e.state),c=s.x,u=s.y;(0,O.DR)(l,{x:c,y:u})}else\"freedraw\"===e.state.activeTool.type?e.handleFreeDrawElementOnPointerDown(t,e.state.activeTool.type,a):\"custom\"===e.state.activeTool.type?(0,I.KJ)(e.canvas,M.oc.AUTO):\"eraser\"!==e.state.activeTool.type&&\"hand\"!==e.state.activeTool.type&&e.createGenericElementOnPointerDown(e.state.activeTool.type,a);null===(n=e.props)||void 0===n||null===(r=n.onPointerDown)||void 0===r||r.call(n,e.state.activeTool,a);var d=e.onPointerMoveFromPointerDownHandler(a),f=e.onPointerUpFromPointerDownHandler(a),p=e.onKeyDownFromPointerDownHandler(a),h=e.onKeyUpFromPointerDownHandler(a);Hr=f,e.state.viewModeEnabled||(window.addEventListener(M.Ks.POINTER_MOVE,d),window.addEventListener(M.Ks.POINTER_UP,f),window.addEventListener(M.Ks.KEYDOWN,p),window.addEventListener(M.Ks.KEYUP,h),a.eventListeners.onMove=d,a.eventListeners.onUp=f,a.eventListeners.onKeyUp=h,a.eventListeners.onKeyDown=p)}else e.handleTextOnPointerDown(t,a)}}},this.handleCanvasPointerUp=function(t){if(e.lastPointerUp=t,e.device.isTouchScreen){var n=(0,I.dE)({clientX:t.clientX,clientY:t.clientY},e.state),r=e.getElementAtPosition(n.x,n.y);e.hitLinkElement=e.getElementLinkAtPosition(n,r)}e.hitLinkElement&&!e.state.selectedElementIds[e.hitLinkElement.id]&&e.redirectToLink(t,e.device.isTouchScreen),e.removePointer(t)},this.maybeOpenContextMenuAfterPointerDownOnTouchDevices=function(t){\"touch\"===t.pointerType&&(Zr=!1,Lr?Zr=!0:Lr=window.setTimeout((function(){Lr=0,Zr||e.handleCanvasContextMenu(t)}),M.nM))},this.resetContextMenuTimer=function(){clearTimeout(Lr),Lr=0,Zr=!1},this.handleCanvasPanUsingWheelOrSpaceDrag=function(t){if(!(Wr.pointers.size<=1&&(t.button===M.Oh.WHEEL||t.button===M.Oh.MAIN&&Tr||(0,N.l$)(e.state)||e.state.viewModeEnabled))||(0,U.iB)(e.state.editingElement))return!1;Pr=!0,t.preventDefault();var n=!1,r=\/Linux\/.test(window.navigator.platform);(0,I.KJ)(e.canvas,M.oc.GRABBING);var o=t.clientX,i=t.clientY,a=(0,I.$9)((function(t){var a=o-t.clientX,l=i-t.clientY;if(o=t.clientX,i=t.clientY,r&&!n&&(Math.abs(a)>1||Math.abs(l)>1)){n=!0;var s=function e(t){document.body.removeEventListener(M.Ks.PASTE,e),t.stopPropagation()};document.body.addEventListener(M.Ks.PASTE,s),window.addEventListener(M.Ks.POINTER_UP,(function e(){setTimeout((function(){document.body.removeEventListener(M.Ks.PASTE,s),window.removeEventListener(M.Ks.POINTER_UP,e)}),100)}))}e.translateCanvas({scrollX:e.state.scrollX-a\/e.state.zoom.value,scrollY:e.state.scrollY-l\/e.state.zoom.value})})),l=(0,I.tH)(Hr=function(){Hr=null,Pr=!1,Tr||(e.state.viewModeEnabled?(0,I.KJ)(e.canvas,M.oc.GRAB):(0,I.Uk)(e.canvas,e.state)),e.setState({cursorButton:\"up\"}),e.savePointer(t.clientX,t.clientY,\"up\"),window.removeEventListener(M.Ks.POINTER_MOVE,a),window.removeEventListener(M.Ks.POINTER_UP,l),window.removeEventListener(M.Ks.BLUR,l),a.flush()});return window.addEventListener(M.Ks.BLUR,l),window.addEventListener(M.Ks.POINTER_MOVE,a,{passive:!0}),window.addEventListener(M.Ks.POINTER_UP,l),!0},this.clearSelectionIfNotUsingSelection=function(){\"selection\"!==e.state.activeTool.type&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})},this.handleSelectionOnPointerDown=function(t,n){if(\"selection\"===e.state.activeTool.type){var r=e.scene.getNonDeletedElements(),o=(0,ie.eD)(r,e.state);if(1!==o.length||e.state.editingLinearElement)o.length>1&&(n.resize.handleType=(0,U.n2)((0,U.KP)(o),n.origin.x,n.origin.y,e.state.zoom,t.pointerType));else{var i=(0,U.jt)(r,e.state,n.origin.x,n.origin.y,e.state.zoom,t.pointerType);null!=i&&(e.setState({resizingElement:i.element}),n.resize.handleType=i.transformHandleType)}if(n.resize.handleType)(0,I.KJ)(e.canvas,(0,U.Un)({transformHandleType:n.resize.handleType})),n.resize.isResizing=!0,n.resize.offset=(0,I.AK)((0,U.xx)(n.resize.handleType,o,n.origin.x,n.origin.y)),1===o.length&&(0,G.bt)(o[0])&&2===o[0].points.length&&(n.resize.arrowDirection=(0,U.T)(n.resize.handleType,o[0]));else{var a;if(e.state.selectedLinearElement){var l=e.state.editingLinearElement||e.state.selectedLinearElement,s=K._.handlePointerDown(t,e.state,e.history,n.origin,l);if(s.hitElement&&(n.hit.element=s.hitElement),s.linearElementEditor&&(e.setState({selectedLinearElement:s.linearElementEditor}),e.state.editingLinearElement&&e.setState({editingLinearElement:s.linearElementEditor})),s.didAddPoint)return!0}if(n.hit.element=null!==(a=n.hit.element)&&void 0!==a?a:e.getElementAtPosition(n.origin.x,n.origin.y),n.hit.element)if(e.getElementLinkAtPosition({x:n.origin.x,y:n.origin.y},n.hit.element))return!1;n.hit.allHitElements=e.getElementsAtPosition(n.origin.x,n.origin.y);var c=n.hit.element,u=n.hit.allHitElements.some((function(t){return e.isASelectedElement(t)}));if(null!==c&&u||t.shiftKey||n.hit.hasHitCommonBoundingBoxOfSelectedElements||e.clearSelection(c),e.state.editingLinearElement)e.setState({selectedElementIds:(0,p.Z)({},e.state.editingLinearElement.elementId,!0)});else if(null!=c){if(t[_.tW.CTRL_OR_CMD])return e.state.selectedElementIds[c.id]||(n.hit.wasAddedToSelection=!0),e.setState((function(t){return pr(pr({},(0,J.iE)(t,c)),{},{previousSelectedElementIds:e.state.selectedElementIds})})),!1;e.state.selectedElementIds[c.id]||(e.state.editingGroupId&&!(0,J.Nd)(c,e.state.editingGroupId)&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),u||n.hit.hasHitCommonBoundingBoxOfSelectedElements||(e.setState((function(t){return(0,J.bO)(pr(pr({},t),{},{selectedElementIds:pr(pr({},t.selectedElementIds),{},(0,p.Z)({},c.id,!0)),showHyperlinkPopup:!!c.link&&\"info\"}),e.scene.getNonDeletedElements())})),n.hit.wasAddedToSelection=!0))}e.setState({previousSelectedElementIds:e.state.selectedElementIds})}}return!1},this.handleTextOnPointerDown=function(t,n){if(!(0,U.iB)(e.state.editingElement)){var r=n.origin.x,o=n.origin.y,i=e.getElementAtPosition(r,o,{includeBoundTextElement:!0}),a=(0,De.OW)(e.scene.getNonDeletedElements(),e.state,r,o);(0,G.Xo)(i)&&(a=i,r=i.x+i.width\/2,o=i.y+i.height\/2),e.startTextEditing({sceneX:r,sceneY:o,insertAtParentCenter:!t.altKey,container:a}),(0,I.z8)(e.canvas),e.state.activeTool.locked||e.setState({activeTool:(0,I.Om)(e.state,{type:\"selection\"})})}},this.handleFreeDrawElementOnPointerDown=function(t,n,r){var a=(0,ne.wC)(r.origin.x,r.origin.y,null),l=(0,o.Z)(a,2),s=l[0],c=l[1],u=(0,Y.KE)({type:n,x:s,y:c,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,roundness:null,simulatePressure:.5===t.pressure,locked:!1});e.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},u.id,!1))}}));var d=u.simulatePressure?u.pressures:[].concat((0,i.Z)(u.pressures),[t.pressure]);(0,O.DR)(u,{points:[[0,0]],pressures:d});var f=(0,C.Y9)(r.origin,e.scene);e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[u])),e.setState({draggingElement:u,editingElement:u,startBoundElement:f,suggestedBindings:[]})},this.createImageElement=function(t){var n=t.sceneX,r=t.sceneY,i=(0,ne.wC)(n,r,e.state.gridSize),a=(0,o.Z)(i,2),l=a[0],s=a[1];return(0,U.vw)({type:\"image\",x:l,y:s,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,roundness:null,opacity:e.state.currentItemOpacity,locked:!1})},this.handleLinearElementOnPointerDown=function(t,n,r){if(e.state.multiElement){var a=e.state.multiElement;if(\"line\"===a.type&&(0,ne.g6)(a.points,e.state.zoom.value))return(0,O.DR)(a,{lastCommittedPoint:a.points[a.points.length-1]}),void e.actionManager.executeAction(k.pL);var l=a.x,s=a.y,c=a.lastCommittedPoint;if(a.points.length>1&&c&&(0,ne.LW)(r.origin.x-l,r.origin.y-s,c[0],c[1])<M.qx)return void e.actionManager.executeAction(k.pL);e.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},a.id,!0))}})),(0,O.DR)(a,{lastCommittedPoint:a.points[a.points.length-1]}),(0,I.KJ)(e.canvas,M.oc.POINTER)}else{var u=(0,ne.wC)(r.origin.x,r.origin.y,e.state.gridSize),d=(0,o.Z)(u,2),f=d[0],h=d[1],m=e.state,g=m.currentItemStartArrowhead,v=m.currentItemEndArrowhead,b=\"arrow\"===n?[g,v]:[null,null],y=(0,o.Z)(b,2),x=y[0],w=y[1],E=(0,U.y8)({type:n,x:f,y:h,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,roundness:\"round\"===e.state.currentItemRoundness?{type:M.a6.PROPORTIONAL_RADIUS}:null,startArrowhead:x,endArrowhead:w,locked:!1});e.setState((function(e){return{selectedElementIds:pr(pr({},e.selectedElementIds),{},(0,p.Z)({},E.id,!1))}})),(0,O.DR)(E,{points:[].concat((0,i.Z)(E.points),[[0,0]])});var S=(0,C.Y9)(r.origin,e.scene);e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[E])),e.setState({draggingElement:E,editingElement:E,startBoundElement:S,suggestedBindings:[]})}},this.createGenericElementOnPointerDown=function(t,n){var r=(0,ne.wC)(n.origin.x,n.origin.y,e.state.gridSize),a=(0,o.Z)(r,2),l=a[0],s=a[1],c=(0,U.Up)({type:t,x:l,y:s,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,roundness:\"round\"===e.state.currentItemRoundness?{type:(0,G.QI)(t)?M.a6.ADAPTIVE_RADIUS:M.a6.PROPORTIONAL_RADIUS}:null,locked:!1});\"selection\"===c.type?e.setState({selectionElement:c,draggingElement:c}):(e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[c])),e.setState({multiElement:null,draggingElement:c,editingElement:c}))},this.restoreReadyToEraseElements=function(t){var n=e.scene.getElementsIncludingDeleted().map((function(e){return t.elementIdsToErase[e.id]&&t.elementIdsToErase[e.id].erase?(0,O.BE)(e,{opacity:t.elementIdsToErase[e.id].opacity}):(0,G.Xh)(e)&&t.elementIdsToErase[e.containerId]&&t.elementIdsToErase[e.containerId].erase?(0,O.BE)(e,{opacity:t.elementIdsToErase[e.containerId].opacity}):e}));e.scene.replaceAllElements(n)},this.eraseElements=function(t){var n=e.scene.getElementsIncludingDeleted().map((function(e){return t.elementIdsToErase[e.id]&&t.elementIdsToErase[e.id].erase||(0,G.Xh)(e)&&t.elementIdsToErase[e.containerId]&&t.elementIdsToErase[e.containerId].erase?(0,O.BE)(e,{isDeleted:!0}):e}));e.history.resumeRecording(),e.scene.replaceAllElements(n)},this.initializeImage=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,l,s,c,u,d,f,h,g,v,b,y,x;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(l=n.imageFile,s=n.imageElement,c=n.showCursorImagePreview,u=void 0!==c&&c,(0,Ye.Wr)(l)){t.next=3;break}throw new Error((0,j.t)(\"errors.unsupportedFileType\"));case 3:if(d=l.type,(0,I.KJ)(e.canvas,\"wait\"),d!==M.LO.svg){t.next=23;break}return t.prev=6,t.t0=Ye.Pn,t.t1=qn.bp,t.next=11,l.text();case 11:return t.t2=t.sent,t.next=14,(0,t.t1)(t.t2);case 14:t.t3=t.sent,t.t4=l.name,l=(0,t.t0)(t.t3,t.t4),t.next=23;break;case 19:throw t.prev=19,t.t5=t.catch(6),console.warn(t.t5),new Error((0,j.t)(\"errors.svgImageInsertError\"));case 23:return t.next=25,(null===(r=(o=e.props).generateIdForFile)||void 0===r?void 0:r.call(o,l))||(0,Ye.tW)(l);case 25:if(f=t.sent){t.next=29;break}throw console.warn(\"Couldn't generate file id or the supplied `generateIdForFile` didn't resolve to one.\"),new Error((0,j.t)(\"errors.imageInsertError\"));case 29:if(null!=(h=e.files[f])&&h.dataURL){t.next=42;break}return t.prev=31,t.next=34,(0,Ye.Tu)(l,{maxWidthOrHeight:M.h6});case 34:l=t.sent,t.next=40;break;case 37:t.prev=37,t.t6=t.catch(31),console.error(\"error trying to resing image file on insertion\",t.t6);case 40:if(!(l.size>M.$n)){t.next=42;break}throw new Error((0,j.t)(\"errors.fileTooBig\",{maxSize:\"\".concat(Math.trunc(M.$n\/1024\/1024),\"MB\")}));case 42:if(u&&(v=null===(g=e.files[f])||void 0===g?void 0:g.dataURL,b=v&&(0,Ye.KG)(v),e.setImagePreviewCursor(b||l)),t.t7=null===(i=e.files[f])||void 0===i?void 0:i.dataURL,t.t7){t.next=48;break}return t.next=47,(0,Ye.Sf)(l);case 47:t.t7=t.sent;case 48:return y=t.t7,x=(0,O.DR)(s,{fileId:f},!1),t.abrupt(\"return\",new Promise(function(){var t=(0,a.Z)(m().mark((function t(n,r){var o,i;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,e.files=pr(pr({},e.files),{},(0,p.Z)({},f,{mimeType:d,id:f,dataURL:y,created:Date.now(),lastRetrieved:Date.now()})),i=e.imageCache.get(f)){t.next=7;break}return e.addNewImagesToImageCache(),t.next=7,e.updateImageCache([x]);case 7:if(!((null==i?void 0:i.image)instanceof Promise)){t.next=10;break}return t.next=10,i.image;case 10:e.state.pendingImageElementId!==x.id&&(null===(o=e.state.draggingElement)||void 0===o?void 0:o.id)!==x.id&&e.initializeImageDimensions(x,!0),n(x),t.next=18;break;case 14:t.prev=14,t.t0=t.catch(0),console.error(t.t0),r(new Error((0,j.t)(\"errors.imageInsertError\")));case 18:return t.prev=18,u||(0,I.z8)(e.canvas),t.finish(18);case 21:case\"end\":return t.stop()}}),t,null,[[0,14,18,21]])})));return function(e,n){return t.apply(this,arguments)}}()));case 51:case\"end\":return t.stop()}}),t,null,[[6,19],[31,37]])})));return function(e){return t.apply(this,arguments)}}(),this.insertImageElement=function(){var t=(0,a.Z)(m().mark((function t(n,r,o){return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.scene.replaceAllElements([].concat((0,i.Z)(e.scene.getElementsIncludingDeleted()),[n])),t.prev=1,t.next=4,e.initializeImage({imageFile:r,imageElement:n,showCursorImagePreview:o});case 4:t.next=11;break;case 6:t.prev=6,t.t0=t.catch(1),(0,O.DR)(n,{isDeleted:!0}),e.actionManager.executeAction(k.pL),e.setState({errorMessage:t.t0.message||(0,j.t)(\"errors.imageInsertError\")});case 11:case\"end\":return t.stop()}}),t,null,[[1,6]])})));return function(e,n,r){return t.apply(this,arguments)}}(),this.setImagePreviewCursor=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=96,t.next=3,(0,Ye.Tu)(n,{maxWidthOrHeight:r});case 3:return o=t.sent,t.next=6,(0,Ye.Sf)(o);case 6:if(i=t.sent,n.type!==M.LO.svg){t.next=20;break}return t.next=10,(0,qn.PK)(i);case 10:a=t.sent,l=Math.min(a.height,r),(s=l*(a.width\/a.height))>r&&(l=(s=r)*(a.height\/a.width)),(c=document.createElement(\"canvas\")).height=l,c.width=s,c.getContext(\"2d\").drawImage(a,0,0,s,l),i=c.toDataURL(M.LO.svg);case 20:e.state.pendingImageElementId&&(0,I.KJ)(e.canvas,\"url(\".concat(i,\") 4 4, auto\"));case 21:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),this.onImageAction=(0,a.Z)(m().mark((function t(){var n,r,o,i,a,l,s,c,u,d=arguments;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=d.length>0&&void 0!==d[0]?d[0]:{insertOnCanvasDirectly:!1},r=n.insertOnCanvasDirectly,t.prev=1,o=e.state.width\/2+e.state.offsetLeft,i=e.state.height\/2+e.state.offsetTop,a=(0,I.dE)({clientX:o,clientY:i},e.state),l=a.x,s=a.y,t.next=7,(0,Je.I$)({description:\"Image\",extensions:[\"jpg\",\"png\",\"svg\",\"gif\"]});case 7:c=t.sent,u=e.createImageElement({sceneX:l,sceneY:s}),r?(e.insertImageElement(u,c),e.initializeImageDimensions(u),e.setState({selectedElementIds:(0,p.Z)({},u.id,!0)},(function(){e.actionManager.executeAction(k.pL)}))):e.setState({pendingImageElementId:u.id},(function(){e.insertImageElement(u,c,!0)})),t.next=16;break;case 12:t.prev=12,t.t0=t.catch(1),\"AbortError\"!==t.t0.name?console.error(t.t0):console.warn(t.t0),e.setState({pendingImageElementId:null,editingElement:null,activeTool:(0,I.Om)(e.state,{type:\"selection\"})},(function(){e.actionManager.executeAction(k.pL)}));case 16:case\"end\":return t.stop()}}),t,null,[[1,12]])}))),this.initializeImageDimensions=function(t){var n,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=(0,G.wi)(t)&&(null===(n=e.imageCache.get(t.fileId))||void 0===n?void 0:n.image);if(!o||o instanceof Promise){if(t.width<M.f\/e.state.zoom.value&&t.height<M.f\/e.state.zoom.value){var i=100\/e.state.zoom.value;(0,O.DR)(t,{x:t.x-i\/2,y:t.y-i\/2,width:i,height:i})}}else if(r||t.width<M.f\/e.state.zoom.value&&t.height<M.f\/e.state.zoom.value){var a=Math.max(e.state.height-120,160),l=Math.min(a,Math.floor(.5*e.state.height)\/e.state.zoom.value),s=Math.min(o.naturalHeight,l),c=s*(o.naturalWidth\/o.naturalHeight),u=t.x+t.width\/2-c\/2,d=t.y+t.height\/2-s\/2;(0,O.DR)(t,{x:u,y:d,width:c,height:s})}},this.updateImageCache=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c,u=arguments;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=u.length>1&&void 0!==u[1]?u[1]:e.files,t.next=3,(0,qn.Xx)({imageCache:e.imageCache,fileIds:n.map((function(e){return e.fileId})),files:r});case 3:if(o=t.sent,i=o.updatedFiles,a=o.erroredFiles,i.size||a.size){l=cr(n);try{for(l.s();!(s=l.n()).done;)c=s.value,i.has(c.fileId)&&(0,oe.bI)(c)}catch(e){l.e(e)}finally{l.f()}}return a.size&&e.scene.replaceAllElements(e.scene.getElementsIncludingDeleted().map((function(e){return(0,G.wi)(e)&&a.has(e.fileId)?(0,O.BE)(e,{status:\"error\"}):e}))),t.abrupt(\"return\",{updatedFiles:i,erroredFiles:a});case 9:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),this.addNewImagesToImageCache=(0,a.Z)(m().mark((function t(){var n,r,o,i,a=arguments;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=a.length>0&&void 0!==a[0]?a[0]:(0,qn.oA)(e.scene.getNonDeletedElements()),r=a.length>1&&void 0!==a[1]?a[1]:e.files,!(o=n.filter((function(t){return!t.isDeleted&&!e.imageCache.has(t.fileId)}))).length){t.next=9;break}return t.next=6,e.updateImageCache(o,r);case 6:i=t.sent,i.updatedFiles.size&&e.scene.informMutation();case 9:case\"end\":return t.stop()}}),t)}))),this.scheduleImageRefresh=$n()((function(){e.addNewImagesToImageCache()}),M.LL),this.updateBindingEnabledOnPointerMove=function(t){var n=(0,C.cz)(t);e.state.isBindingEnabled!==n&&e.setState({isBindingEnabled:n})},this.maybeSuggestBindingAtCursor=function(t){var n=(0,C.Y9)(t,e.scene);e.setState({suggestedBindings:null!=n?[n]:[]})},this.maybeSuggestBindingsForLinearElementAtCoords=function(t,n,r){if(n.length){var o=n.reduce((function(n,o){var i=(0,C.Y9)(o,e.scene);return null==i||(0,C.DK)(t,null==r?void 0:r.id,i)||n.push(i),n}),[]);e.setState({suggestedBindings:o})}},this.handleCanvasRef=function(t){var n,r,o;null!==t?(e.canvas=t,e.rc=y.Z.canvas(e.canvas),e.canvas.addEventListener(M.Ks.WHEEL,e.handleWheel,{passive:!1}),e.canvas.addEventListener(M.Ks.TOUCH_START,e.onTapStart),e.canvas.addEventListener(M.Ks.TOUCH_END,e.onTapEnd)):(null===(n=e.canvas)||void 0===n||n.removeEventListener(M.Ks.WHEEL,e.handleWheel),null===(r=e.canvas)||void 0===r||r.removeEventListener(M.Ks.TOUCH_START,e.onTapStart),null===(o=e.canvas)||void 0===o||o.removeEventListener(M.Ks.TOUCH_END,e.onTapEnd))},this.handleAppOnDrop=function(){var t=(0,a.Z)(m().mark((function t(n){var r,o,i,a,l,s,c,u,d,f;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,Ye.bv)(n);case 2:if(r=t.sent,o=r.file,i=r.fileHandle,t.prev=5,!(0,Ye.Wr)(o)){t.next=26;break}if((null==o?void 0:o.type)!==M.LO.png&&(null==o?void 0:o.type)!==M.LO.svg){t.next=20;break}return t.prev=8,t.next=11,(0,H.cT)(o,e.state,e.scene.getElementsIncludingDeleted(),i);case 11:return a=t.sent,e.syncActionResult(pr(pr({},a),{},{appState:pr(pr({},a.appState||e.state),{},{isLoading:!1}),replaceFiles:!0,commitToHistory:!0})),t.abrupt(\"return\");case 16:if(t.prev=16,t.t0=t.catch(8),\"EncodingError\"===t.t0.name){t.next=20;break}throw t.t0;case 20:return l=(0,I.dE)(n,e.state),s=l.x,c=l.y,u=e.createImageElement({sceneX:s,sceneY:c}),e.insertImageElement(u,o),e.initializeImageDimensions(u),e.setState({selectedElementIds:(0,p.Z)({},u.id,!0)}),t.abrupt(\"return\");case 26:t.next=31;break;case 28:return t.prev=28,t.t1=t.catch(5),t.abrupt(\"return\",e.setState({isLoading:!1,errorMessage:t.t1.message}));case 31:if(!(d=n.dataTransfer.getData(M.LO.excalidrawlib))||\"string\"!=typeof d){t.next=35;break}try{f=(0,Ye.wf)(d),e.addElementsFromPasteOrLibrary({elements:(0,W.WV)(f),position:n,files:null})}catch(t){e.setState({errorMessage:t.message})}return t.abrupt(\"return\");case 35:if(!o){t.next=38;break}return t.next=38,e.loadFileToCanvas(o,i);case 38:case\"end\":return t.stop()}}),t,null,[[5,28],[8,16]])})));return function(e){return t.apply(this,arguments)}}(),this.loadFileToCanvas=function(){var t=(0,a.Z)(m().mark((function t(n,r){var o;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,Ye.gY)(n);case 2:return n=t.sent,t.prev=3,t.next=6,(0,Ye.ZY)(n,e.state,e.scene.getElementsIncludingDeleted(),r);case 6:if((o=t.sent).type!==M.LO.excalidraw){t.next=12;break}e.setState({isLoading:!0}),e.syncActionResult(pr(pr({},o.data),{},{appState:pr(pr({},o.data.appState||e.state),{},{isLoading:!1}),replaceFiles:!0,commitToHistory:!0})),t.next=15;break;case 12:if(o.type!==M.LO.excalidrawlib){t.next=15;break}return t.next=15,e.library.updateLibrary({libraryItems:n,merge:!0,openLibraryMenu:!0}).catch((function(t){console.error(t),e.setState({errorMessage:(0,j.t)(\"errors.importLibraryError\")})}));case 15:t.next=20;break;case 17:t.prev=17,t.t0=t.catch(3),e.setState({isLoading:!1,errorMessage:t.t0.message});case 20:case\"end\":return t.stop()}}),t,null,[[3,17]])})));return function(e,n){return t.apply(this,arguments)}}(),this.handleCanvasContextMenu=function(t){if(t.preventDefault(),\"touch\"!==t.nativeEvent.pointerType&&(\"pen\"!==t.nativeEvent.pointerType||t.button===M.Oh.SECONDARY)||\"selection\"===e.state.activeTool.type){var n=(0,I.dE)(t,e.state),r=n.x,o=n.y,i=e.getElementAtPosition(r,o,{preferSelected:!0,includeLockedElements:!0}),a=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state),l=e.isHittingCommonBoundingBoxOfSelectedElements({x:r,y:o},a),s=i||l?\"element\":\"canvas\",c=e.excalidrawContainerRef.current.getBoundingClientRect(),u=c.top,d=c.left,f=t.clientX-d,h=t.clientY-u;(0,L.L)(\"contextMenu\",\"openContextMenu\",s),e.setState(pr(pr({},i&&!e.state.selectedElementIds[i.id]?(0,J.bO)(pr(pr({},e.state),{},{selectedElementIds:(0,p.Z)({},i.id,!0),selectedLinearElement:(0,G.bt)(i)?new K._(i,e.scene):null}),e.scene.getNonDeletedElements()):e.state),{},{showHyperlinkPopup:!1}),(function(){e.setState({contextMenu:{top:h,left:f,items:e.getContextMenuItems(s)}})}))}},this.maybeDragNewGenericElement=function(t,n){var r=e.state.draggingElement,i=t.lastCoords;if(r)if(\"selection\"===r.type&&\"eraser\"!==e.state.activeTool.type)(0,U.EJ)(r,e.state.activeTool.type,t.origin.x,t.origin.y,i.x,i.y,(0,I.TE)(t.origin.x,i.x),(0,I.TE)(t.origin.y,i.y),(0,_.E0)(n),(0,_.OA)(n));else{var a,l=(0,ne.wC)(i.x,i.y,e.state.gridSize),s=(0,o.Z)(l,2),c=s[0],u=s[1],d=(0,G.wi)(r)&&(null===(a=e.imageCache.get(r.fileId))||void 0===a?void 0:a.image),f=!d||d instanceof Promise?null:d.width\/d.height;(0,U.EJ)(r,e.state.activeTool.type,t.originInGrid.x,t.originInGrid.y,c,u,(0,I.TE)(t.originInGrid.x,c),(0,I.TE)(t.originInGrid.y,u),(0,G.pC)(r)?!(0,_.E0)(n):(0,_.E0)(n),(0,_.OA)(n),f),e.maybeSuggestBindingForAll([r])}},this.maybeHandleResize=function(t,n){var r=(0,ie.eD)(e.scene.getNonDeletedElements(),e.state),i=t.resize.handleType;e.setState({isResizing:i&&\"rotation\"!==i,isRotating:\"rotation\"===i});var a=t.lastCoords,l=(0,ne.wC)(a.x-t.resize.offset.x,a.y-t.resize.offset.y,e.state.gridSize),s=(0,o.Z)(l,2),c=s[0],u=s[1];return!!(0,U.vY)(t,i,r,t.resize.arrowDirection,(0,_.Ge)(n),(0,_.OA)(n),1===r.length&&(0,G.pC)(r[0])?!(0,_.E0)(n):(0,_.E0)(n),c,u,t.resize.center.x,t.resize.center.y)&&(e.maybeSuggestBindingForAll(r),!0)},this.getContextMenuItems=function(t){var n=[];return n.push(k.jK,k.FA),\"canvas\"===t?e.state.viewModeEnabled?[].concat(n,[k.Pb,k.JN,Xn,k.u0]):[ir.yQ,je,k.jK,k.FA,k.zp,je,k.Yy,je,k.Pb,k.JN,Xn,k.u0]:(n.push(k.zp),e.state.viewModeEnabled?[k.uN].concat(n):[k.ZM,k.uN,ir.yQ,je].concat(n,[je,k.pw,k.W3,je,k.EQ,k.y7,k.vD,lr.JQ,k.s,je,k.FL,je,k.V,k.yA,k.zi,k.BZ,je,k.jl,k.kt,je,k.Qs,k.nz,k.xF,k.iL,je,k.X9]))},this.handleWheel=(0,I.tH)((function(t){if(t.preventDefault(),!Pr){var n=t.deltaX,r=t.deltaY;if(t.metaKey||t.ctrlKey){var o=Math.sign(r),i=100*M.V4,a=Math.abs(r),l=r;a>i&&(l=i*o);var s=e.state.zoom.value-l\/100;return s+=Math.log10(Math.max(1,e.state.zoom.value))*-o*Math.min(1,a\/20),e.translateCanvas((function(e){return pr(pr({},(0,le.E)({viewportX:Ir,viewportY:Mr,nextZoom:(0,ie.j)(s)},e)),{},{shouldCacheIgnoreZoom:!0})})),void e.resetShouldCacheIgnoreZoomDebounced()}t.shiftKey?e.translateCanvas((function(e){var t=e.zoom;return{scrollX:e.scrollX-(r||n)\/t.value}})):e.translateCanvas((function(e){var t=e.zoom,o=e.scrollX,i=e.scrollY;return{scrollX:o-n\/t.value,scrollY:i-r\/t.value}}))}})),this.savePointer=function(t,n,r){var o,i;if(t&&n){var a=(0,I.dE)({clientX:t,clientY:n},e.state);isNaN(a.x)||isNaN(a.y),null===(o=(i=e.props).onPointerUpdate)||void 0===o||o.call(i,{pointer:a,button:r,pointersMap:Wr.pointers})}},this.resetShouldCacheIgnoreZoomDebounced=(0,I.Ds)((function(){e.unmounted||e.setState({shouldCacheIgnoreZoom:!1})}),300),this.updateDOMRect=function(t){var n;if(null!==(n=e.excalidrawContainerRef)&&void 0!==n&&n.current){var r=e.excalidrawContainerRef.current.getBoundingClientRect(),o=r.width,i=r.height,a=r.left,l=r.top,s=e.state,c=s.width,u=s.height,d=s.offsetTop,f=s.offsetLeft;if(o===c&&i===u&&a===f&&l===d)return void(t&&t());e.setState({width:o,height:i,offsetLeft:a,offsetTop:l},(function(){t&&t()}))}},this.refresh=function(){e.setState(pr({},e.getCanvasOffsets()))}};\"production\"!==M.Vi.TEST&&\"production\"!==M.Vi.DEVELOPMENT||(window.h=window.h||{},Object.defineProperties(window.h,{elements:{configurable:!0,get:function(){var e;return null===(e=this.app)||void 0===e?void 0:e.scene.getElementsIncludingDeleted()},set:function(e){var t;return null===(t=this.app)||void 0===t?void 0:t.scene.replaceAllElements(e)}}}));var Kr=Fr},3807:function(e,t,n){\"use strict\";n.d(t,{o:function(){return x}});var r=n(45),o=n(3646),i=n(487),a=n.n(i),l=n(631),s=n.n(l),c=n(2052),u=n.n(c),d=n(4010),f=n.n(d),p=n(1469),h=n.n(p),m=n(9329),g=n.n(m),v=n(6029),b={};b.styleTagTransform=g(),b.setAttributes=f(),b.insert=u().bind(null,\"head\"),b.domAPI=s(),b.insertStyleElement=h();a()(v.Z,b),v.Z&&v.Z.locals&&v.Z.locals;var y=n(4512),x=function(e){var t=e.children,n=e.checked,i=e.onChange,a=e.className;return(0,y.jsxs)(\"div\",{className:(0,r.Z)(\"Checkbox\",a,{\"is-checked\":n}),onClick:function(e){i(!n,e),e.currentTarget.querySelector(\".Checkbox-box\").focus()},children:[(0,y.jsx)(\"button\",{className:\"Checkbox-box\",role:\"checkbox\",\"aria-checked\":n,children:o.eQ}),(0,y.jsx)(\"div\",{className:\"Checkbox-label\",children:t})]})}},4499:function(e,t,n){\"use strict\";n.d(t,{z:function(){return T}});var r=n(2577),o=n(9787),i=n.n(o),a=n(2891),l=n(6340),s=n(487),c=n.n(s),u=n(631),d=n.n(u),f=n(2052),p=n.n(f),h=n(4010),m=n.n(h),g=n(1469),v=n.n(g),b=n(9329),y=n.n(b),x=n(2345),w={};w.styleTagTransform=y(),w.setAttributes=m(),w.insert=p().bind(null,\"head\"),w.domAPI=d(),w.insertStyleElement=v();c()(x.Z,w),x.Z&&x.Z.locals&&x.Z.locals;var k=n(6066),E=n(8211),S=n(56),j=n(4512),_=function(e,t){return!S.Z[t].includes(e)},O=function(e){var t=(new Option).style;return t.color=e,!!t.color},C=[[\"1\",\"2\",\"3\",\"4\",\"5\"],[\"q\",\"w\",\"e\",\"r\",\"t\"],[\"a\",\"s\",\"d\",\"f\",\"g\"],[\"z\",\"x\",\"c\",\"v\",\"b\"]].flat(),I=function(e){var t=e.colors,n=e.color,o=e.onChange,a=e.onClose,s=e.label,c=e.showInput,u=void 0===c||c,d=e.type,f=e.elements,p=i().useRef(),h=i().useRef(),m=i().useRef(),g=i().useRef(),v=i().useState((function(){return\"canvasBackground\"===d?[]:function(e,t){for(var n=[],r=e.filter((function(e){return!e.isDeleted})).sort((function(e,t){return t.updated-e.updated})),o=0,i={elementBackground:\"backgroundColor\",elementStroke:\"strokeColor\"}[t];o<r.length&&n.length<5;){var a=r[o];n.length<5&&_(a[i],t)&&!n.includes(a[i])&&n.push(a[i]),o++}return n}(f,d)})),b=(0,r.Z)(v,1)[0];i().useEffect((function(){h.current?h.current.focus():g.current?g.current.focus():m.current&&m.current.focus()}),[]);var y=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.map((function(e,r){var i=e.replace(\"#\",\"\"),a=t?C[r+15]:C[r],s=t?i:(0,E.t)(\"colors.\".concat(i));return(0,j.jsxs)(\"button\",{className:\"color-picker-swatch\",onClick:function(t){t.currentTarget.focus(),o(e)},title:\"\".concat(s).concat((0,l.Qm)(e)?\"\":\" (\".concat(e,\")\"),\" \u2014 \").concat(a.toUpperCase()),\"aria-label\":s,\"aria-keyshortcuts\":C[r],style:{color:e},ref:function(o){!t&&o&&0===r&&(p.current=o),o&&e===n&&(h.current=o)},onFocus:function(){o(e)},children:[(0,l.Qm)(e)?(0,j.jsx)(\"div\",{className:\"color-picker-transparent\"}):void 0,(0,j.jsx)(\"span\",{className:\"color-picker-keybinding\",children:a})]},e)}))};return(0,j.jsxs)(\"div\",{className:\"color-picker color-picker-type-\".concat(d),role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":(0,E.t)(\"labels.colorPicker\"),onKeyDown:function(e){var t=!1;if((0,k.Wl)(e.key)){var n,r,o;t=!0;var i,s=document.activeElement,c=(0,E.G3)().rtl,d=!1,f=Array.prototype.indexOf.call(null===(n=m.current.querySelector(\".color-picker-content--default\"))||void 0===n?void 0:n.children,s);if(-1===f)-1!==(f=Array.prototype.indexOf.call(null===(i=m.current.querySelector(\".color-picker-content--canvas-colors\"))||void 0===i?void 0:i.children,s))&&(d=!0);var p=d?null===(r=m.current)||void 0===r?void 0:r.querySelector(\".color-picker-content--canvas-colors\"):null===(o=m.current)||void 0===o?void 0:o.querySelector(\".color-picker-content--default\");if(p&&-1!==f){var h,g=p.children.length-(u?1:0),v=e.key===(c?k.tW.ARROW_LEFT:k.tW.ARROW_RIGHT)?(f+1)%g:e.key===(c?k.tW.ARROW_RIGHT:k.tW.ARROW_LEFT)?(g+f-1)%g:d||e.key!==k.tW.ARROW_DOWN?d||e.key!==k.tW.ARROW_UP?f:(g+f-5)%g:(f+5)%g;null===(h=p.children[v])||void 0===h||h.focus()}e.preventDefault()}else if(!C.includes(e.key.toLowerCase())||e[k.tW.CTRL_OR_CMD]||e.altKey||(0,l.s)(e.target))e.key!==k.tW.ESCAPE&&e.key!==k.tW.ENTER||(t=!0,e.preventDefault(),a());else{var b,y,x;t=!0;var w=C.indexOf(e.key.toLowerCase()),S=w>=15,j=S?null==m||null===(b=m.current)||void 0===b?void 0:b.querySelector(\".color-picker-content--canvas-colors\"):null==m||null===(y=m.current)||void 0===y?void 0:y.querySelector(\".color-picker-content--default\"),_=S?w-15:w;null==j||null===(x=j.children[_])||void 0===x||x.focus(),e.preventDefault()}t&&(e.nativeEvent.stopImmediatePropagation(),e.stopPropagation())},children:[(0,j.jsx)(\"div\",{className:\"color-picker-triangle color-picker-triangle-shadow\"}),(0,j.jsx)(\"div\",{className:\"color-picker-triangle\"}),(0,j.jsxs)(\"div\",{className:\"color-picker-content\",ref:function(e){e&&(m.current=e)},tabIndex:-1,children:[(0,j.jsx)(\"div\",{className:\"color-picker-content--default\",children:y(t)}),!!b.length&&(0,j.jsxs)(\"div\",{className:\"color-picker-content--canvas\",children:[(0,j.jsx)(\"span\",{className:\"color-picker-content--canvas-title\",children:(0,E.t)(\"labels.canvasColors\")}),(0,j.jsx)(\"div\",{className:\"color-picker-content--canvas-colors\",children:y(b,!0)})]}),u&&(0,j.jsx)(M,{color:n,label:s,onChange:function(e){o(e)},ref:g})]})]})},M=i().forwardRef((function(e,t){var n=e.color,o=e.onChange,a=e.label,s=i().useState(n),c=(0,r.Z)(s,2),u=c[0],d=c[1],f=i().useRef(null);i().useEffect((function(){d(n)}),[n]),i().useImperativeHandle(t,(function(){return f.current}));var p=i().useCallback((function(e){var t=e.toLowerCase(),n=function(e){return(0,l.Qm)(e)?e:O(\"#\".concat(e))?\"#\".concat(e):O(e)?e:null}(t);n&&o(n),d(t)}),[o]);return(0,j.jsxs)(\"label\",{className:\"color-input-container\",children:[(0,j.jsx)(\"div\",{className:\"color-picker-hash\",children:\"#\"}),(0,j.jsx)(\"input\",{spellCheck:!1,className:\"color-picker-input\",\"aria-label\":a,onChange:function(e){return p(e.target.value)},value:(u||\"\").replace(\/^#\/,\"\"),onBlur:function(){return d(n)},ref:f})]})}));M.displayName=\"ColorInput\";var T=function(e){var t,n=e.type,r=e.color,o=e.onChange,l=e.label,s=e.isActive,c=e.setActive,u=e.elements,d=(e.appState,i().useRef(null)),f=null===(t=d.current)||void 0===t?void 0:t.getBoundingClientRect();return(0,j.jsxs)(\"div\",{children:[(0,j.jsxs)(\"div\",{className:\"color-picker-control-container\",children:[(0,j.jsx)(\"div\",{className:\"color-picker-label-swatch-container\",children:(0,j.jsx)(\"button\",{className:\"color-picker-label-swatch\",\"aria-label\":l,style:r?{\"--swatch-color\":r}:void 0,onClick:function(){return c(!s)},ref:d})}),(0,j.jsx)(M,{color:r,label:l,onChange:function(e){o(e)}})]}),(0,j.jsx)(i().Suspense,{fallback:\"\",children:s?(0,j.jsx)(\"div\",{className:\"color-picker-popover-container\",style:{position:\"fixed\",top:null==f?void 0:f.top,left:null==f?void 0:f.right,zIndex:1},children:(0,j.jsx)(a.J,{onCloseRequest:function(e){return e.target!==d.current&&c(!1)},children:(0,j.jsx)(I,{colors:S.Z[n],color:r||null,onChange:function(e){o(e)},onClose:function(){var e;c(!1),null===(e=d.current)||void 0===e||e.focus()},label:l,showInput:!1,type:n,elements:u})})}):null})]})}},7046:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return M}});var r=n(7169),o=n(2726),i=n(8211),a=n(8396),l=n(487),s=n.n(l),c=n(631),u=n.n(c),d=n(2052),f=n.n(d),p=n(4010),h=n.n(p),m=n(1469),g=n.n(m),v=n(9329),b=n.n(v),y=n(9393),x={};x.styleTagTransform=b(),x.setAttributes=h(),x.insert=f().bind(null,\"head\"),x.domAPI=u(),x.insertStyleElement=g();s()(y.Z,x),y.Z&&y.Z.locals&&y.Z.locals;var w=n(6428),k=n(4739),E=n(9206),S=n(2134),j=n(9487),_=n(4512),O=[\"onConfirm\",\"onCancel\",\"children\",\"confirmText\",\"cancelText\",\"className\"];function C(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var M=function(e){var t=e.onConfirm,n=e.onCancel,r=e.children,l=e.confirmText,s=void 0===l?(0,i.t)(\"buttons.confirm\"):l,c=e.cancelText,u=void 0===c?(0,i.t)(\"buttons.cancel\"):c,d=e.className,f=void 0===d?\"\":d,p=(0,o.Z)(e,O),h=(0,S.n9)(),m=(0,k.b9)(E.u,j.yE);return(0,_.jsxs)(a.V,I(I({onCloseRequest:n,small:!0},p),{},{className:\"confirm-dialog \".concat(f),children:[r,(0,_.jsxs)(\"div\",{className:\"confirm-dialog-buttons\",children:[(0,_.jsx)(w.Z,{label:u,onClick:function(){h({openMenu:null}),m(!1),n()}}),(0,_.jsx)(w.Z,{label:s,onClick:function(){h({openMenu:null}),m(!1),t()},actionType:\"danger\"})]})]}))}},8396:function(e,t,n){\"use strict\";n.d(t,{V:function(){return Z}});var r=n(2577),o=n(45),i=n(9787),a=n(8211),l=n(2134),s=n(6066),c=n(487),u=n.n(c),d=n(631),f=n.n(d),p=n(2052),h=n.n(p),m=n(4010),g=n.n(m),v=n(1469),b=n.n(v),y=n(9329),x=n.n(y),w=n(9482),k={};k.styleTagTransform=x(),k.setAttributes=g(),k.insert=h().bind(null,\"head\"),k.domAPI=f(),k.insertStyleElement=b();u()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals;var E=n(3646),S=n(1881),j=n(6843),_={};_.styleTagTransform=x(),_.setAttributes=g(),_.insert=h().bind(null,\"head\"),_.domAPI=f(),_.insertStyleElement=b();u()(j.Z,_),j.Z&&j.Z.locals&&j.Z.locals;var O=n(5156),C=n(2335),I=n(4512),M=function(e){var t=e.theme,n=void 0===t?C.C6.LIGHT:t,r=e.closeOnClickOutside,i=void 0===r||r,a=T(n);if(!a)return null;return(0,O.createPortal)((0,I.jsxs)(\"div\",{className:(0,o.Z)(\"Modal\",e.className),role:\"dialog\",\"aria-modal\":\"true\",onKeyDown:function(t){t.key===s.tW.ESCAPE&&(t.nativeEvent.stopImmediatePropagation(),t.stopPropagation(),e.onCloseRequest())},\"aria-labelledby\":e.labelledBy,\"data-prevent-outside-click\":!0,children:[(0,I.jsx)(\"div\",{className:\"Modal__background\",onClick:i?e.onCloseRequest:void 0}),(0,I.jsx)(\"div\",{className:\"Modal__content\",style:{\"--max-width\":\"\".concat(e.maxWidth,\"px\")},tabIndex:0,children:e.children})]}),a)},T=function(e){var t=(0,i.useState)(null),n=(0,r.Z)(t,2),o=n[0],a=n[1],s=(0,l.Fy)(),c=(0,i.useRef)(s.isMobile);c.current=s.isMobile;var u=(0,l.J0)().container;return(0,i.useLayoutEffect)((function(){o&&o.classList.toggle(\"excalidraw--mobile\",s.isMobile)}),[o,s.isMobile]),(0,i.useLayoutEffect)((function(){var t=!(null==u||!u.classList.contains(\"theme--dark\"))||\"dark\"===e,n=document.createElement(\"div\");return n.classList.add(\"excalidraw\",\"excalidraw-modal-container\"),n.classList.toggle(\"excalidraw--mobile\",c.current),t&&(n.classList.add(\"theme--dark\"),n.classList.add(\"theme--dark-background-none\")),document.body.appendChild(n),a(n),function(){document.body.removeChild(n)}}),[u,e]),o},P=n(6340),D=n(4739),A=n(9206),L=n(9487),Z=function(e){var t=function(){var e=(0,i.useState)(null),t=(0,r.Z)(e,2),n=t[0],o=t[1];return[n,(0,i.useCallback)((function(e){return o(e)}),[])]}(),n=(0,r.Z)(t,2),c=n[0],u=n[1],d=(0,i.useState)(document.activeElement),f=(0,r.Z)(d,1)[0],p=(0,l.J0)().id;(0,i.useEffect)((function(){if(c){var t=(0,P.xp)(c);t.length>0&&!1!==e.autofocus&&(t[1]||t[0]).focus();var n=function(e){if(e.key===s.tW.TAB){var t=(0,P.xp)(c),n=document.activeElement,r=t.findIndex((function(e){return e===n}));0===r&&e.shiftKey?(t[t.length-1].focus(),e.preventDefault()):r!==t.length-1||e.shiftKey||(t[0].focus(),e.preventDefault())}};return c.addEventListener(\"keydown\",n),function(){return c.removeEventListener(\"keydown\",n)}}}),[c,e.autofocus]);var h=(0,l.n9)(),m=(0,D.b9)(A.u,L.yE),g=function(){h({openMenu:null}),m(!1),f.focus(),e.onCloseRequest()};return(0,I.jsx)(M,{className:(0,o.Z)(\"Dialog\",e.className),labelledBy:\"dialog-title\",maxWidth:e.small?550:800,onCloseRequest:g,theme:e.theme,closeOnClickOutside:e.closeOnClickOutside,children:(0,I.jsxs)(S.W,{ref:u,children:[(0,I.jsxs)(\"h2\",{id:\"\".concat(p,\"-dialog-title\"),className:\"Dialog__title\",children:[(0,I.jsx)(\"span\",{className:\"Dialog__titleContent\",children:e.title}),(0,I.jsx)(\"button\",{className:\"Modal__close\",onClick:g,title:(0,a.t)(\"buttons.close\"),\"aria-label\":(0,a.t)(\"buttons.close\"),children:(0,l.Fy)().isMobile?E.op:E.Tw})]}),(0,I.jsx)(\"div\",{className:\"Dialog__content\",children:e.children})]})})}},6428:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return j}});var r=n(7169),o=n(2726),i=n(45),a=n(487),l=n.n(a),s=n(631),c=n.n(s),u=n(2052),d=n.n(u),f=n(4010),p=n.n(f),h=n(1469),m=n.n(h),g=n(9329),v=n.n(g),b=n(6148),y={};y.styleTagTransform=v(),y.setAttributes=p(),y.insert=d().bind(null,\"head\"),y.domAPI=c(),y.insertStyleElement=m();l()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;var x=n(5644),w=n(4512),k=[\"label\",\"onClick\",\"className\",\"children\",\"actionType\",\"type\",\"isLoading\"];function E(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var j=function(e){var t=e.label,n=e.onClick,r=e.className,a=e.children,l=e.actionType,s=e.type,c=void 0===s?\"button\":s,u=e.isLoading,d=(0,o.Z)(e,k),f=l?\"Dialog__action-button--\".concat(l):\"\";return(0,w.jsxs)(\"button\",S(S({className:(0,i.Z)(\"Dialog__action-button\",f,r),type:c,\"aria-label\":t,onClick:n},d),{},{children:[a&&(0,w.jsx)(\"div\",{style:u?{visibility:\"hidden\"}:{},children:a}),(0,w.jsx)(\"div\",{style:u?{visibility:\"hidden\"}:{},children:t}),u&&(0,w.jsx)(\"div\",{style:{position:\"absolute\",inset:0},children:(0,w.jsx)(x.Z,{})})]}))}},1881:function(e,t,n){\"use strict\";n.d(t,{W:function(){return S}});var r=n(7169),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(7369),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(9787),y=n.n(b),x=n(45),w=n(4512);function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var S=y().forwardRef((function(e,t){var n=e.children,r=e.padding,o=e.className,i=e.style;return(0,w.jsx)(\"div\",{className:(0,x.Z)(\"Island\",o),style:E({\"--padding\":r},i),ref:t,children:n})}))},9206:function(e,t,n){\"use strict\";n.d(t,{W:function(){return J},u:function(){return X}});var r=n(8950),o=n(2577),i=n(2975),a=n.n(i),l=n(9787),s=n(5523),c=n(7053),u=n(8211),d=n(3646),f=n(1319),p=n(1393),h=n(6340),m=n(4739),g=n(9487),v=n(7046),b=n(7169),y=n(5284),x=n(8396),w=n(3024),k=n(2335),E=n(434),S=n(6428),j=n(487),_=n.n(j),O=n(631),C=n.n(O),I=n(2052),M=n.n(I),T=n(4010),P=n.n(T),D=n(1469),A=n.n(D),L=n(9329),Z=n.n(L),z=n(7589),R={};R.styleTagTransform=Z(),R.setAttributes=P(),R.insert=M().bind(null,\"head\"),R.domAPI=C(),R.insertStyleElement=A();_()(z.Z,R),z.Z&&z.Z.locals&&z.Z.locals;var N=n(4512);function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function H(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){(0,b.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function W(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return F(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var U=\"publish-library-data\",K=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r,i,l,s,c,u,d,f,p,m,g,v,b,x,S,j;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=6,r=128,i=Math.round(r\/16),l=Math.max(Math.round(r\/64),2),s=(0,h.yo)(t,n),(c=document.createElement(\"canvas\")).width=s[0].length*r+(s[0].length+1)*(2*i)-2*i,c.height=s.length*r+(s.length+1)*(2*i)-2*i,(u=c.getContext(\"2d\")).fillStyle=y.white,u.fillRect(0,0,c.width,c.height),d=W(t.entries()),e.prev=12,d.s();case 14:if((f=d.n()).done){e.next=28;break}return p=(0,o.Z)(f.value,2),m=p[0],g=p[1],e.next=18,(0,w.NL)({elements:g.elements,files:null,maxWidthOrHeight:r});case 18:v=e.sent,b=v.width,x=v.height,S=Math.floor(m\/n)*(r+2*i),j=m%n*(r+2*i),u.drawImage(v,j+(r-b)\/2+i,S+(r-x)\/2+i),u.lineWidth=l,u.strokeStyle=y.gray[4],u.strokeRect(j+i\/2,S+i\/2,r+i,r+i);case 26:e.next=14;break;case 28:e.next=33;break;case 30:e.prev=30,e.t0=e.catch(12),d.e(e.t0);case 33:return e.prev=33,d.f(),e.finish(33);case 36:return e.t1=E.Tu,e.t2=File,e.next=40,(0,E._c)(c);case 40:return e.t3=e.sent,e.t4=[e.t3],e.t5={type:k.LO.png},e.t6=new e.t2(e.t4,\"preview\",e.t5),e.t7={outputType:k.LO.jpg,maxWidthOrHeight:5e3},e.next=47,(0,e.t1)(e.t6,e.t7);case 47:return e.abrupt(\"return\",e.sent);case 48:case\"end\":return e.stop()}}),e,null,[[12,30,33,36]])})));return function(t){return e.apply(this,arguments)}}(),Y=function(e){var t=e.libItem,n=e.appState,o=e.index,i=e.onChange,s=e.onRemove,c=(0,l.useRef)(null),p=(0,l.useRef)(null);return(0,l.useEffect)((function(){var e=c.current;e&&(0,r.Z)(a().mark((function r(){var o;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,(0,w.$D)({elements:t.elements,appState:H(H({},n),{},{viewBackgroundColor:y.white,exportBackground:!0}),files:null});case 2:o=r.sent,e.innerHTML=o.outerHTML;case 4:case\"end\":return r.stop()}}),r)})))()}),[t.elements,n]),(0,N.jsxs)(\"div\",{className:\"single-library-item\",children:[\"published\"===t.status&&(0,N.jsx)(\"span\",{className:\"single-library-item-status\",children:(0,u.t)(\"labels.statusPublished\")}),(0,N.jsx)(\"div\",{ref:c,className:\"single-library-item__svg\"}),(0,N.jsx)(f.V,{\"aria-label\":(0,u.t)(\"buttons.remove\"),type:\"button\",icon:d.Tw,className:\"single-library-item--remove\",onClick:s.bind(null,t.id),title:(0,u.t)(\"buttons.remove\")}),(0,N.jsxs)(\"div\",{style:{display:\"flex\",margin:\"0.8rem 0\",width:\"100%\",fontSize:\"14px\",fontWeight:500,flexDirection:\"column\"},children:[(0,N.jsxs)(\"label\",{style:{display:\"flex\",justifyContent:\"space-between\",flexDirection:\"column\"},children:[(0,N.jsxs)(\"div\",{style:{padding:\"0.5em 0\"},children:[(0,N.jsx)(\"span\",{style:{fontWeight:500,color:y.gray[6]},children:(0,u.t)(\"publishDialog.itemName\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"input\",{type:\"text\",ref:p,style:{width:\"80%\",padding:\"0.2rem\"},defaultValue:t.name,placeholder:\"Item name\",onChange:function(e){i(e.target.value,o)}})]}),(0,N.jsx)(\"span\",{className:\"error\",children:t.error})]})]})},G=function(e){var t=e.onClose,n=e.libraryItems,i=e.appState,s=e.onSuccess,c=e.onError,d=e.updateItemsInStorage,f=e.onRemove,p=(0,l.useState)({authorName:\"\",githubHandle:\"\",name:\"\",description:\"\",twitterHandle:\"\",website:\"\"}),h=(0,o.Z)(p,2),m=h[0],g=h[1],v=(0,l.useState)(!1),y=(0,o.Z)(v,2),w=y[0],E=y[1];(0,l.useEffect)((function(){var e=function(){try{var e=localStorage.getItem(U);if(e)return JSON.parse(e)}catch(e){console.error(e)}return null}();e&&g(e)}),[]);var j=(0,l.useState)(n.slice()),_=(0,o.Z)(j,2),O=_[0],C=_[1];(0,l.useEffect)((function(){C(n.slice())}),[n]);var I,M=function(e){g(H(H({},m),{},(0,b.Z)({},e.target.name,e.target.value)))},T=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r,o,i,l,d,f;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),E(!0),n=[],r=!1,O.forEach((function(e){var t=\"\";e.name||(t=(0,u.t)(\"publishDialog.errors.required\"),r=!0),n.push(H(H({},e),{},{error:t}))})),!r){e.next=9;break}return C(n),E(!1),e.abrupt(\"return\");case 9:return e.next=11,K(O);case 11:o=e.sent,i={type:k.r8.excalidrawLibrary,version:k.Kr.excalidrawLibrary,source:k.pb,libraryItems:O},l=JSON.stringify(i,null,2),d=new Blob([l],{type:\"application\/json\"}),(f=new FormData).append(\"excalidrawLib\",d),f.append(\"previewImage\",o),f.append(\"previewImageType\",o.type),f.append(\"title\",m.name),f.append(\"authorName\",m.authorName),f.append(\"githubHandle\",m.githubHandle),f.append(\"name\",m.name),f.append(\"description\",m.description),f.append(\"twitterHandle\",m.twitterHandle),f.append(\"website\",m.website),fetch(\"\".concat(\"https:\/\/us-central1-excalidraw-room-persistence.cloudfunctions.net\/libraries\",\"\/submit\"),{method:\"post\",body:f}).then((function(e){return e.ok?e.json().then((function(e){var t=e.url;localStorage.removeItem(U),s({url:t,authorName:m.authorName,items:O})})):e.json().catch((function(){throw new Error(e.statusText||\"something went wrong\")})).then((function(t){throw new Error(t.message||e.statusText||\"something went wrong\")}))}),(function(e){console.error(e),c(e),E(!1)})).catch((function(e){console.error(e),c(e),E(!1)}));case 27:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),P=(0,l.useCallback)((function(){d(O),function(e){try{localStorage.setItem(U,JSON.stringify(e))}catch(e){console.error(e)}}(m),t()}),[O,t,d,m]),D=!!n.length,A=n.some((function(e){return\"published\"===e.status}));return(0,N.jsx)(x.V,{onCloseRequest:P,title:(0,u.t)(\"publishDialog.title\"),className:\"publish-library\",children:D?(0,N.jsxs)(\"form\",{onSubmit:T,children:[(0,N.jsxs)(\"div\",{className:\"publish-library-note\",children:[(0,u.t)(\"publishDialog.noteDescription.pre\"),(0,N.jsx)(\"a\",{href:\"https:\/\/libraries.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishDialog.noteDescription.link\")}),\" \",(0,u.t)(\"publishDialog.noteDescription.post\")]}),(0,N.jsxs)(\"span\",{className:\"publish-library-note\",children:[(0,u.t)(\"publishDialog.noteGuidelines.pre\"),(0,N.jsx)(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw-libraries#guidelines\",target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishDialog.noteGuidelines.link\")}),(0,u.t)(\"publishDialog.noteGuidelines.post\")]}),(0,N.jsx)(\"div\",{className:\"publish-library-note\",children:(0,u.t)(\"publishDialog.noteItems\")}),A&&(0,N.jsx)(\"span\",{className:\"publish-library-note publish-library-warning\",children:(0,u.t)(\"publishDialog.republishWarning\")}),(I=[],O.forEach((function(e,t){I.push((0,N.jsx)(\"div\",{className:\"single-library-item-wrapper\",children:(0,N.jsx)(Y,{libItem:e,appState:i,index:t,onChange:function(e,t){var n=O.slice();n[t].name=e,C(n)},onRemove:f})},t))})),(0,N.jsx)(\"div\",{className:\"selected-library-items\",children:I})),(0,N.jsxs)(\"div\",{className:\"publish-library__fields\",children:[(0,N.jsxs)(\"label\",{children:[(0,N.jsxs)(\"div\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.libraryName\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"input\",{type:\"text\",name:\"name\",required:!0,value:m.name,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.libraryName\")})]}),(0,N.jsxs)(\"label\",{style:{alignItems:\"flex-start\"},children:[(0,N.jsxs)(\"div\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.libraryDesc\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"textarea\",{name:\"description\",rows:4,required:!0,value:m.description,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.libraryDesc\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsxs)(\"div\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.authorName\")}),(0,N.jsx)(\"span\",{\"aria-hidden\":\"true\",className:\"required\",children:\"*\"})]}),(0,N.jsx)(\"input\",{type:\"text\",name:\"authorName\",required:!0,value:m.authorName,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.authorName\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.githubUsername\")}),(0,N.jsx)(\"input\",{type:\"text\",name:\"githubHandle\",value:m.githubHandle,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.githubHandle\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.twitterUsername\")}),(0,N.jsx)(\"input\",{type:\"text\",name:\"twitterHandle\",value:m.twitterHandle,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.twitterHandle\")})]}),(0,N.jsxs)(\"label\",{children:[(0,N.jsx)(\"span\",{children:(0,u.t)(\"publishDialog.website\")}),(0,N.jsx)(\"input\",{type:\"text\",name:\"website\",pattern:\"https?:\/\/.+\",title:(0,u.t)(\"publishDialog.errors.website\"),value:m.website,onChange:M,placeholder:(0,u.t)(\"publishDialog.placeholder.website\")})]}),(0,N.jsxs)(\"span\",{className:\"publish-library-note\",children:[(0,u.t)(\"publishDialog.noteLicense.pre\"),(0,N.jsx)(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw-libraries\/blob\/main\/LICENSE\",target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishDialog.noteLicense.link\")}),(0,u.t)(\"publishDialog.noteLicense.post\")]})]}),(0,N.jsxs)(\"div\",{className:\"publish-library__buttons\",children:[(0,N.jsx)(S.Z,{label:(0,u.t)(\"buttons.cancel\"),onClick:P,\"data-testid\":\"cancel-clear-canvas-button\"}),(0,N.jsx)(S.Z,{type:\"submit\",label:(0,u.t)(\"buttons.submit\"),actionType:\"primary\",isLoading:w})]})]}):(0,N.jsx)(\"p\",{style:{padding:\"1em\",textAlign:\"center\",fontWeight:500},children:(0,u.t)(\"publishDialog.atleastOneLibItem\")})})},V=n(9127),X=(0,m.cn)(!1),q=function(e,t){return e.filter((function(e){return t.includes(e.id)}))},J=function(e){var t=e.setAppState,n=e.selectedItems,i=e.library,b=e.onRemoveFromLibrary,y=e.resetLibrary,w=e.onSelectItems,k=e.appState,E=(0,m.KO)(c.rF,g.yE),S=(0,o.Z)(E,1)[0],j=(0,m.KO)(X,g.yE),_=(0,o.Z)(j,2),O=_[0],C=_[1],I=(0,l.useCallback)((function(){var e=n.length?(0,u.t)(\"alerts.removeItemsFromsLibrary\",{count:n.length}):(0,u.t)(\"alerts.resetLibrary\"),t=n.length?(0,u.t)(\"confirmDialog.removeItemsFromLib\"):(0,u.t)(\"confirmDialog.resetLibrary\");return(0,N.jsx)(v.Z,{onConfirm:function(){n.length?b():y(),D(!1)},onCancel:function(){D(!1)},title:t,children:(0,N.jsx)(\"p\",{children:e})})}),[n,b,y]),M=(0,l.useState)(!1),T=(0,o.Z)(M,2),P=T[0],D=T[1],A=!!n.length,L=A?S.libraryItems.filter((function(e){return n.includes(e.id)})):S.libraryItems,Z=A?(0,u.t)(\"buttons.remove\"):(0,u.t)(\"buttons.resetLibrary\"),z=(0,l.useState)(!1),R=(0,o.Z)(z,2),B=R[0],H=R[1],W=(0,l.useState)(null),F=(0,o.Z)(W,2),U=F[0],K=F[1],Y=(0,l.useCallback)((function(){return(0,N.jsxs)(x.V,{onCloseRequest:function(){return K(null)},title:(0,u.t)(\"publishSuccessDialog.title\"),className:\"publish-library-success\",small:!0,children:[(0,N.jsxs)(\"p\",{children:[(0,u.t)(\"publishSuccessDialog.content\",{authorName:U.authorName}),\" \",(0,N.jsx)(\"a\",{href:null==U?void 0:U.url,target:\"_blank\",rel:\"noopener noreferrer\",children:(0,u.t)(\"publishSuccessDialog.link\")})]}),(0,N.jsx)(f.V,{type:\"button\",title:(0,u.t)(\"buttons.close\"),\"aria-label\":(0,u.t)(\"buttons.close\"),label:(0,u.t)(\"buttons.close\"),onClick:function(){return K(null)},\"data-testid\":\"publish-library-success-close\",className:\"publish-library-success-close\"})]})}),[K,U]),J=(0,l.useCallback)((function(e,t){H(!1),K({url:e.url,authorName:e.authorName});var r=t.slice();r.forEach((function(e){n.includes(e.id)&&(e.status=\"published\")})),i.setLibrary(r)}),[H,K,n,i]),$=function(){var e=(0,r.Z)(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,i.updateLibrary({libraryItems:(0,p.I$)({description:\"Excalidraw library files\"}),merge:!0,openLibraryMenu:!0});case 3:e.next=11;break;case 5:if(e.prev=5,e.t0=e.catch(0),\"AbortError\"!==(null===e.t0||void 0===e.t0?void 0:e.t0.name)){e.next=10;break}return console.warn(e.t0),e.abrupt(\"return\");case 10:t({errorMessage:(0,u.t)(\"errors.importLibraryError\")});case 11:case\"end\":return e.stop()}}),e,null,[[0,5]])})));return function(){return e.apply(this,arguments)}}(),Q=function(){var e=(0,r.Z)(a().mark((function e(){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!A){e.next=4;break}e.t0=L,e.next=7;break;case 4:return e.next=6,i.getLatestLibrary();case 6:e.t0=e.sent;case 7:n=e.t0,(0,s.t1)(n).catch(h.FG).catch((function(e){t({errorMessage:e.message})}));case 9:case\"end\":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return(0,N.jsxs)(\"div\",{style:{position:\"relative\"},children:[(0,N.jsxs)(V.Z,{open:O,children:[(0,N.jsx)(V.Z.Trigger,{className:\"Sidebar__dropdown-btn\",onToggle:function(){return C(!O)},children:d.YA}),(0,N.jsxs)(V.Z.Content,{onClickOutside:function(){return C(!1)},onSelect:function(){return C(!1)},className:\"library-menu\",children:[!A&&(0,N.jsx)(V.Z.Item,{onSelect:$,icon:d.Tl,\"data-testid\":\"lib-dropdown--load\",children:(0,u.t)(\"buttons.load\")}),!!L.length&&(0,N.jsx)(V.Z.Item,{onSelect:Q,icon:d.Hy,\"data-testid\":\"lib-dropdown--export\",children:(0,u.t)(\"buttons.export\")}),!!L.length&&(0,N.jsx)(V.Z.Item,{onSelect:function(){return D(!0)},icon:d.XH,children:Z}),A&&(0,N.jsx)(V.Z.Item,{icon:d.Nw,onSelect:function(){return H(!0)},\"data-testid\":\"lib-dropdown--remove\",children:(0,u.t)(\"buttons.publishLibrary\")})]})]}),n.length>0&&(0,N.jsx)(\"div\",{className:\"library-actions-counter\",children:n.length}),P&&I(),B&&(0,N.jsx)(G,{onClose:function(){return H(!1)},libraryItems:q(S.libraryItems,n),appState:k,onSuccess:function(e){return J(e,S.libraryItems)},onError:function(e){return window.alert(e)},updateItemsInStorage:function(){return i.setLibrary(S.libraryItems)},onRemove:function(e){return w(n.filter((function(t){return t!==e})))}}),U&&Y()]})}},5440:function(e,t,n){\"use strict\";n.d(t,{z:function(){return u}});var r=n(2577),o=n(8211),i=n(9787),a=n(5644),l=n(45),s=n(2335),c=n(4512),u=function(e){var t=e.delay,n=e.theme,u=(0,i.useState)(!!t),d=(0,r.Z)(u,2),f=d[0],p=d[1];return(0,i.useEffect)((function(){if(t){var e=setTimeout((function(){p(!1)}),t);return function(){return clearTimeout(e)}}}),[t]),f?null:(0,c.jsxs)(\"div\",{className:(0,l.Z)(\"LoadingMessage\",{\"LoadingMessage--dark\":n===s.C6.DARK}),children:[(0,c.jsx)(\"div\",{children:(0,c.jsx)(a.Z,{})}),(0,c.jsx)(\"div\",{className:\"LoadingMessage-text\",children:(0,o.t)(\"labels.loadingScene\")})]})}},2891:function(e,t,n){\"use strict\";n.d(t,{J:function(){return k}});var r=n(9787),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(9935),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(5156),y=n(6340),x=n(6066),w=n(4512),k=function(e){var t=e.children,n=e.left,o=e.top,i=e.onCloseRequest,a=e.fitInViewport,l=void 0!==a&&a,s=e.offsetLeft,c=void 0===s?0:s,u=e.offsetTop,d=void 0===u?0:u,f=e.viewportWidth,p=void 0===f?window.innerWidth:f,h=e.viewportHeight,m=void 0===h?window.innerHeight:h,g=(0,r.useRef)(null);(0,r.useEffect)((function(){var e=g.current;if(e){e.contains(document.activeElement)||e.focus();var t=function(t){if(t.key===x.tW.TAB){var n=(0,y.xp)(e),r=document.activeElement,o=n.findIndex((function(e){return e===r}));if(r===e){var i;if(t.shiftKey)null===(i=n[n.length-1])||void 0===i||i.focus();else n[0].focus();t.preventDefault(),t.stopImmediatePropagation()}else if(0===o&&t.shiftKey){var a;null===(a=n[n.length-1])||void 0===a||a.focus(),t.preventDefault(),t.stopImmediatePropagation()}else if(o===n.length-1&&!t.shiftKey){var l;null===(l=n[0])||void 0===l||l.focus(),t.preventDefault(),t.stopImmediatePropagation()}}};return e.addEventListener(\"keydown\",t),function(){return e.removeEventListener(\"keydown\",t)}}}),[]);var v=(0,r.useRef)(null);return(0,r.useLayoutEffect)((function(){if(l&&g.current&&null!=o&&null!=n){var e,t,r=g.current,i=r.getBoundingClientRect(),a=i.width,s=i.height;if((null===(e=v.current)||void 0===e?void 0:e.top)===o&&(null===(t=v.current)||void 0===t?void 0:t.left)===n)return;v.current={top:o,left:n},a>=p?(r.style.width=\"\".concat(p,\"px\"),r.style.left=\"0px\",r.style.overflowX=\"scroll\"):r.style.left=\"\".concat(n+a-c>p?p-a-10:n,\"px\"),s>=m?(r.style.height=\"\".concat(m-20,\"px\"),r.style.top=\"10px\",r.style.overflowY=\"scroll\"):r.style.top=\"\".concat(o+s-d>m?m-s:o,\"px\")}}),[o,n,l,p,m,c,d]),(0,r.useEffect)((function(){if(i){var e=function(e){var t;null!==(t=g.current)&&void 0!==t&&t.contains(e.target)||(0,b.unstable_batchedUpdates)((function(){return i(e)}))};return document.addEventListener(\"pointerdown\",e,!1),function(){return document.removeEventListener(\"pointerdown\",e,!1)}}}),[i]),(0,w.jsx)(\"div\",{className:\"popover\",ref:g,tabIndex:-1,children:t})}},9430:function(e,t,n){\"use strict\";n.d(t,{Y:function(){return R},b:function(){return z}});var r=n(2577),o=n(9787),i=n.n(o),a=n(1881),l=n(4739),s=n(9487),c=i().createContext({}),u=n(45),d=n(8211),f=n(2134),p=n(3646),h=n(7169),m=n(4512);function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var v=n(1894),b=function(e){return(0,m.jsx)(\"div\",{className:\"layer-ui__sidebar-dock-button\",\"data-testid\":\"sidebar-dock\",children:(0,m.jsxs)(v.u,{label:(0,d.t)(\"labels.sidebarLock\"),children:[(0,m.jsxs)(\"label\",{className:(0,u.Z)(\"ToolIcon ToolIcon__lock ToolIcon_type_floating\",\"ToolIcon_size_medium\"),children:[(0,m.jsx)(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",onChange:e.onChange,checked:e.checked,\"aria-label\":(0,d.t)(\"labels.sidebarLock\")}),\" \",(0,m.jsx)(\"div\",{className:(0,u.Z)(\"Sidebar__pin-btn\",{\"Sidebar__pin-btn--pinned\":e.checked}),tabIndex:0,children:p.qQ}),\" \"]}),\" \"]})})},y=function(e){var t=(0,o.createContext)([!1,function(){}]),n=function(e){var n=e.children,i=(0,o.useState)(!1),a=(0,r.Z)(i,2),l=a[0],s=a[1],c=(0,o.useMemo)((function(){return[l,s]}),[l]);return(0,m.jsx)(t.Provider,{value:c,children:n})},i=function(n){var i=(0,o.useContext)(t),a=(0,r.Z)(i,2),l=a[0],s=a[1];return(0,o.useLayoutEffect)((function(){if(!n.__isFallback)return s(!0),function(){return s(!1)}}),[n.__isFallback,s]),n.__isFallback&&l?null:(0,m.jsx)(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){(0,h.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n))};return e.name&&(i.displayName=\"\".concat(e.name,\"_upstreamOverrideWrapper\"),n.displayName=\"\".concat(e.name,\"_upstreamOverrideContextWrapper\")),[n,i]}((function(e){var t=e.children,n=e.className,r=(0,f.Fy)(),i=(0,o.useContext)(c),a=!(!r.canDeviceFitSidebar||!i.dockable),l=!!i.onClose;return(0,m.jsxs)(\"div\",{className:(0,u.Z)(\"layer-ui__sidebar__header\",n),\"data-testid\":\"sidebar-header\",children:[t,(a||l)&&(0,m.jsxs)(\"div\",{className:\"layer-ui__sidebar__header__buttons\",children:[a&&(0,m.jsx)(b,{checked:!!i.docked,onChange:function(){var e;null===(e=i.onDock)||void 0===e||e.call(i,!i.docked)}}),l&&(0,m.jsx)(\"button\",{\"data-testid\":\"sidebar-close\",className:\"Sidebar__close-btn\",onClick:i.onClose,\"aria-label\":(0,d.t)(\"buttons.close\"),children:p.Tw})]})]})})),x=(0,r.Z)(y,2),w={Context:x[0],Component:x[1]},k=n(487),E=n.n(k),S=n(631),j=n.n(S),_=n(2052),O=n.n(_),C=n(4010),I=n.n(C),M=n(1469),T=n.n(M),P=n(9329),D=n.n(P),A=n(8208),L={};L.styleTagTransform=D(),L.setAttributes=I(),L.insert=O().bind(null,\"head\"),L.domAPI=j(),L.insertStyleElement=T();E()(A.Z,L),A.Z&&A.Z.locals&&A.Z.locals;var Z=n(6340),z=(0,l.cn)({rendered:0,docked:0}),R=Object.assign((0,o.forwardRef)((function(e,t){var n,i=e.children,d=e.onClose,p=e.onDock,h=e.docked,g=e.initialDockedState,v=void 0===g?h:g,b=e.dockable,y=void 0===b||b,x=e.className,k=e.__isInternal,E=(0,l.KO)(z,s.yE),S=(0,r.Z)(E,2),j=S[0],_=S[1],O=(0,f.n9)(),C=(0,o.useState)(null!==(n=null!=h?h:v)&&void 0!==n&&n),I=(0,r.Z)(C,2),M=I[0],T=I[1];(0,o.useLayoutEffect)((function(){void 0===h&&O((function(e){return T(e.isSidebarDocked),null}))}),[O,h]),(0,o.useLayoutEffect)((function(){if(!k)return _((function(e){return{rendered:e.rendered+1,docked:M?e.docked+1:e.docked}})),function(){_((function(e){return{rendered:e.rendered-1,docked:M?e.docked-1:e.docked}}))}}),[k,_,M]);var P=(0,o.useRef)(d);P.current=d,(0,o.useEffect)((function(){return function(){var e;null===(e=P.current)||void 0===e||e.call(P)}}),[]);var D=(0,o.useRef)({});return D.current.onClose=function(){O({openSidebar:null})},D.current.onDock=function(e){void 0===h&&(O({isSidebarDocked:e}),T(e)),null==p||p(e)},D.current=(0,Z.v4)(D.current,{docked:null!=h?h:M,dockable:y}),j.rendered>0&&k?null:(0,m.jsx)(a.W,{className:(0,u.Z)(\"layer-ui__sidebar\",{\"layer-ui__sidebar--docked\":M},x),ref:t,children:(0,m.jsx)(c.Provider,{value:D.current,children:(0,m.jsxs)(w.Context,{children:[(0,m.jsx)(w.Component,{__isFallback:!0}),i]})})})})),{Header:w.Component})},5644:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return b}});var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(5892),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var v=n(4512),b=function(e){var t=e.size,n=void 0===t?\"1em\":t,r=e.circleWidth,o=void 0===r?8:r;return(0,v.jsx)(\"div\",{className:\"Spinner\",children:(0,v.jsx)(\"svg\",{viewBox:\"0 0 100 100\",style:{width:n,height:n},children:(0,v.jsx)(\"circle\",{cx:\"50\",cy:\"50\",r:50-o\/2,strokeWidth:o,fill:\"none\",strokeMiterlimit:\"10\"})})})}},7239:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return k}});var r=n(7169),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(3874),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(45),y=n(4512);function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var k={Row:function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,i=e.className,a=e.style;return(0,y.jsx)(\"div\",{className:(0,b.Z)(\"Stack Stack_horizontal\",i),style:w({\"--gap\":n,alignItems:r,justifyContent:o},a),children:t})},Col:function(e){var t=e.children,n=e.gap,r=e.align,o=e.justifyContent,i=e.className,a=e.style;return(0,y.jsx)(\"div\",{className:(0,b.Z)(\"Stack Stack_vertical\",i),style:w({\"--gap\":n,justifyItems:r,justifyContent:o},a),children:t})}}},1319:function(e,t,n){\"use strict\";n.d(t,{V:function(){return h}});var r=n(8950),o=n(2577),i=n(2975),a=n.n(i),l=(n(5422),n(9787)),s=n.n(l),c=n(45),u=n(2134),d=n(6797),f=n(5644),p=n(4512),h=s().forwardRef((function(e,t){var n=(0,u.J0)().id,i=s().useRef(null);s().useImperativeHandle(t,(function(){return i.current}));var h=\"ToolIcon_size_\".concat(e.size),m=(0,l.useState)(!1),g=(0,o.Z)(m,2),v=g[0],b=g[1],y=(0,l.useRef)(!0),x=function(){var t=(0,r.Z)(a().mark((function t(n){var r,o;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(o=\"onClick\"in e&&(null===(r=e.onClick)||void 0===r?void 0:r.call(e,n)))||!(\"then\"in o)){t.next=18;break}return t.prev=2,b(!0),t.next=6,o;case 6:t.next=15;break;case 8:if(t.prev=8,t.t0=t.catch(2),t.t0 instanceof d._){t.next=14;break}throw t.t0;case 14:console.warn(t.t0);case 15:return t.prev=15,y.current&&b(!1),t.finish(15);case 18:case\"end\":return t.stop()}}),t,null,[[2,8,15,18]])})));return function(e){return t.apply(this,arguments)}}();(0,l.useEffect)((function(){return function(){y.current=!1}}),[]);var w=(0,l.useRef)(null);if(\"button\"===e.type||\"icon\"===e.type||\"submit\"===e.type){var k=\"icon\"===e.type?\"button\":e.type;return(0,p.jsxs)(\"button\",{className:(0,c.Z)(\"ToolIcon_type_button\",h,e.className,e.visible&&!e.hidden?\"ToolIcon_type_button--show\":\"ToolIcon_type_button--hide\",{ToolIcon:!e.hidden,\"ToolIcon--selected\":e.selected,\"ToolIcon--plain\":\"icon\"===e.type}),\"data-testid\":e[\"data-testid\"],hidden:e.hidden,title:e.title,\"aria-label\":e[\"aria-label\"],type:k,onClick:x,ref:i,disabled:v||e.isLoading,children:[(e.icon||e.label)&&(0,p.jsxs)(\"div\",{className:\"ToolIcon__icon\",\"aria-hidden\":\"true\",children:[e.icon||e.label,e.keyBindingLabel&&(0,p.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel}),e.isLoading&&(0,p.jsx)(f.Z,{})]}),e.showAriaLabel&&(0,p.jsxs)(\"div\",{className:\"ToolIcon__label\",children:[e[\"aria-label\"],\" \",v&&(0,p.jsx)(f.Z,{})]}),e.children]})}return(0,p.jsxs)(\"label\",{className:(0,c.Z)(\"ToolIcon\",e.className),title:e.title,onPointerDown:function(t){var n;w.current=t.pointerType||null,null===(n=e.onPointerDown)||void 0===n||n.call(e,{pointerType:t.pointerType||null})},onPointerUp:function(){requestAnimationFrame((function(){w.current=null}))},children:[(0,p.jsx)(\"input\",{className:\"ToolIcon_type_radio \".concat(h),type:\"radio\",name:e.name,\"aria-label\":e[\"aria-label\"],\"aria-keyshortcuts\":e[\"aria-keyshortcuts\"],\"data-testid\":e[\"data-testid\"],id:\"\".concat(n,\"-\").concat(e.id),onChange:function(){var t;null===(t=e.onChange)||void 0===t||t.call(e,{pointerType:w.current})},checked:e.checked,ref:i}),(0,p.jsxs)(\"div\",{className:\"ToolIcon__icon\",children:[e.icon,e.keyBindingLabel&&(0,p.jsx)(\"span\",{className:\"ToolIcon__keybinding\",children:e.keyBindingLabel})]})]})}));h.defaultProps={visible:!0,className:\"\",size:\"medium\"},h.displayName=\"ToolButton\"},1894:function(e,t,n){\"use strict\";n.d(t,{u:function(){return w},bK:function(){return y},Js:function(){return x}});var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(6626),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var v=n(9787),b=n(4512),y=function(){var e=document.querySelector(\".excalidraw-tooltip\");if(e)return e;var t=document.createElement(\"div\");return document.body.appendChild(t),t.classList.add(\"excalidraw-tooltip\"),t},x=function(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"bottom\",o=e.getBoundingClientRect(),i=window.innerWidth,a=window.innerHeight,l=5,s=t.left+t.width\/2-o.width\/2;s<0?s=l:s+o.width>=i&&(s=i-o.width-l),\"bottom\"===r?(n=t.top+t.height+l)+o.height>=a&&(n=t.top-o.height-l):(n=t.top-o.height-l)<0&&(n=t.top+t.height+l),Object.assign(e.style,{top:\"\".concat(n,\"px\"),left:\"\".concat(s,\"px\")})},w=function(e){var t=e.children,n=e.label,r=e.long,o=void 0!==r&&r,i=e.style;return(0,v.useEffect)((function(){return function(){return y().classList.remove(\"excalidraw-tooltip--visible\")}}),[]),(0,b.jsx)(\"div\",{className:\"excalidraw-tooltip-wrapper\",onPointerEnter:function(e){return function(e,t,n,r){t.classList.add(\"excalidraw-tooltip--visible\"),t.style.minWidth=r?\"50ch\":\"10ch\",t.style.maxWidth=r?\"50ch\":\"15ch\",t.textContent=n;var o=e.getBoundingClientRect();x(t,o)}(e.currentTarget,y(),n,o)},onPointerLeave:function(){return y().classList.remove(\"excalidraw-tooltip--visible\")},style:i,children:t})}},6773:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return S}});var r=n(2577),o=n(487),i=n.n(o),a=n(631),l=n.n(a),s=n(2052),c=n.n(s),u=n(4010),d=n.n(u),f=n(1469),p=n.n(f),h=n(9329),m=n.n(h),g=n(6359),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,\"head\"),v.domAPI=l(),v.insertStyleElement=p();i()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=n(9787),y=n.n(b),x=n(45),w=n(1894),k=n(2134),E=n(4512),S=function(e){var t=e.className,n=e.mobile,o=e.collaborators,i=(0,k.eh)(),a=new Map;o.forEach((function(e,t){a.set(e.id||t,e)}));var l=a.size>0&&Array.from(a).filter((function(e){var t=(0,r.Z)(e,2),n=(t[0],t[1]);return 0!==Object.keys(n).length})).map((function(e){var t=(0,r.Z)(e,2),o=t[0],a=t[1],l=i.renderAction(\"goToCollaborator\",[o,a]);return n?(0,E.jsx)(w.u,{label:a.username||\"Unknown user\",children:l},o):(0,E.jsx)(y().Fragment,{children:l},o)}));return(0,E.jsx)(\"div\",{className:(0,x.Z)(\"UserList\",t,{UserList_mobile:n}),children:l})}},8888:function(e,t,n){\"use strict\";n.d(t,{A3:function(){return f},ZC:function(){return h},R6:function(){return p}});var r=n(9787),o=n.n(r);const i=e=>{let t;const n=new Set,r=(e,r)=>{const o=\"function\"==typeof e?e(t):e;if(!Object.is(o,t)){const e=t;t=(null!=r?r:\"object\"!=typeof o)?o:Object.assign({},t,o),n.forEach((n=>n(t,e)))}},o=()=>t,i={setState:r,getState:o,subscribe:e=>(n.add(e),()=>n.delete(e)),destroy:()=>{console.warn(\"[DEPRECATED] The destroy method will be unsupported in the future version. You should use unsubscribe function returned by subscribe. Everything will be garbage collected if store is garbage collected.\"),n.clear()}};return t=e(r,o,i),i},a=e=>e?i(e):i;var l=n(5668);const{useSyncExternalStoreWithSelector:s}=l;const c=e=>{\"function\"!=typeof e&&console.warn('[DEPRECATED] Passing a vanilla store will be unsupported in the future version. Please use `import { useStore } from \"zustand\"` to use the vanilla store in React.');const t=\"function\"==typeof e?a(e):e,n=(e,n)=>function(e,t=e.getState,n){const o=s(e.subscribe,e.getState,e.getServerState||e.getState,t,n);return(0,r.useDebugValue)(o),o}(t,e,n);return Object.assign(n,t),n},u=e=>e?c(e):c;function d(){const e=u((e=>({current:new Array,version:0,set:e})));return{In:({children:t})=>{const n=e((e=>e.set)),o=e((e=>e.version));return(0,r.useLayoutEffect)((()=>{n((e=>({version:e.version+1})))}),[]),(0,r.useLayoutEffect)((()=>(n((({current:e})=>({current:[...e,t]}))),()=>n((({current:e})=>({current:e.filter((e=>e!==t))}))))),[t,o]),null},Out:()=>{const t=e((e=>e.current));return o().createElement(o().Fragment,null,t)}}}var f=o().createContext(null),p=function(){return o().useContext(f)},h=function(){return o().useMemo((function(){return{mainMenuTunnel:d(),welcomeScreenMenuHintTunnel:d(),welcomeScreenToolbarHintTunnel:d(),welcomeScreenHelpHintTunnel:d(),welcomeScreenCenterTunnel:d(),footerCenterTunnel:d(),jotaiScope:Symbol()}}),[])}},9127:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return F}});var r=n(45),o=n(2134),i=n(4512),a=function(e){var t=e.className,n=void 0===t?\"\":t,a=e.children,l=e.onToggle,s=(0,o.gF)(),c=(0,o.Fy)(),u=(0,r.Z)(\"dropdown-menu-button \".concat(n),\"zen-mode-transition\",{\"transition-left\":s.zenModeEnabled,\"dropdown-menu-button--mobile\":c.isMobile}).trim();return(0,i.jsx)(\"button\",{\"data-prevent-outside-click\":!0,className:u,onClick:l,type:\"button\",\"data-testid\":\"dropdown-menu-button\",children:a})},l=a;a.displayName=\"DropdownMenuTrigger\";var s=n(2739),c=function(){return(0,i.jsx)(\"div\",{style:{height:\"1px\",backgroundColor:\"var(--default-border-color)\",margin:\".5rem 0\"}})},u=c;c.displayName=\"DropdownMenuSeparator\";var d=function(e){var t=e.children,n=e.className,r=void 0===n?\"\":n,o=e.style,a=e.title;return(0,i.jsxs)(\"div\",{className:\"dropdown-menu-group \".concat(r),style:o,children:[a&&(0,i.jsx)(\"p\",{className:\"dropdown-menu-group-title\",children:a}),t]})},f=d;d.displayName=\"DropdownMenuGroup\";var p=n(1930),h=n(9787),m=n.n(h),g=n(1881),v=n(7239),b=n(6772),y=function(e){var t,n,a=e.children,l=e.onClickOutside,s=e.className,c=void 0===s?\"\":s,u=e.onSelect,d=e.style,f=(0,o.Fy)(),m=(t=function(){null==l||l()},n=(0,h.useRef)(null),(0,h.useEffect)((function(){var e=function(e){var r=n.current;!r||r.contains(e.target)||(0,p.Z)(document.querySelectorAll(\"[data-prevent-outside-click]\")).some((function(t){return t.contains(e.target)}))||t(e)};return document.addEventListener(\"pointerdown\",e),document.addEventListener(\"touchstart\",e),function(){document.removeEventListener(\"pointerdown\",e),document.removeEventListener(\"touchstart\",e)}}),[n,t]),n),y=(0,r.Z)(\"dropdown-menu \".concat(c),{\"dropdown-menu--mobile\":f.isMobile}).trim();return(0,i.jsx)(b.N7.Provider,{value:{onSelect:u},children:(0,i.jsx)(\"div\",{ref:m,className:y,style:d,\"data-testid\":\"dropdown-menu\",children:f.isMobile?(0,i.jsx)(v.Z.Col,{className:\"dropdown-menu-container\",children:a}):(0,i.jsx)(g.W,{className:\"dropdown-menu-container\",padding:2,style:{zIndex:1},children:a})})})};y.displayName=\"DropdownMenuContent\";var x=y,w=n(4215),k=n(7169),E=n(2726),S=[\"children\",\"className\"];function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){(0,k.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var O=function(e){var t=e.children,n=e.className,r=void 0===n?\"\":n,o=(0,E.Z)(e,S);return(0,i.jsx)(\"div\",_(_({},o),{},{className:\"dropdown-menu-item-base dropdown-menu-item-custom \".concat(r).trim(),children:t}))},C=n(487),I=n.n(C),M=n(631),T=n.n(M),P=n(2052),D=n.n(P),A=n(4010),L=n.n(A),Z=n(1469),z=n.n(Z),R=n(9329),N=n.n(R),B=n(7399),H={};H.styleTagTransform=N(),H.setAttributes=L(),H.insert=D().bind(null,\"head\"),H.domAPI=T(),H.insertStyleElement=z();I()(B.Z,H),B.Z&&B.Z.locals&&B.Z.locals;var W=function(e){var t=e.children,n=e.open,r=function(e){return m().Children.toArray(e).find((function(e){return m().isValidElement(e)&&\"string\"!=typeof e.type&&(null==e?void 0:e.type.displayName)&&\"DropdownMenuTrigger\"===e.type.displayName}))||null}(t),o=function(e){return m().Children.toArray(e).find((function(e){return m().isValidElement(e)&&\"string\"!=typeof e.type&&(null==e?void 0:e.type.displayName)&&\"DropdownMenuContent\"===e.type.displayName}))||null}(t);return(0,i.jsxs)(i.Fragment,{children:[r,n&&o]})};W.Trigger=l,W.Content=x,W.Item=s.Z,W.ItemLink=w.Z,W.ItemCustom=O,W.Group=f,W.Separator=u;var F=W;W.displayName=\"DropdownMenu\"},2739:function(e,t,n){\"use strict\";var r=n(7169),o=n(2726),i=n(6772),a=n(4122),l=n(4512),s=[\"icon\",\"onSelect\",\"children\",\"shortcut\",\"className\"];function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var d=function(e){var t,n=e.icon,r=e.onSelect,c=e.children,d=e.shortcut,f=e.className,p=(0,o.Z)(e,s),h=(0,i.qZ)(p.onClick,r);return(0,l.jsx)(\"button\",u(u({},p),{},{onClick:h,type:\"button\",className:(0,i.n)(f),title:null!==(t=p.title)&&void 0!==t?t:p[\"aria-label\"],children:(0,l.jsx)(a.Z,{icon:n,shortcut:d,children:c})}))};t.Z=d,d.displayName=\"DropdownMenuItem\"},4122:function(e,t,n){\"use strict\";var r=n(2134),o=n(4512);t.Z=function(e){var t=e.icon,n=e.shortcut,i=e.children,a=(0,r.Fy)();return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(\"div\",{className:\"dropdown-menu-item__icon\",children:t}),(0,o.jsx)(\"div\",{className:\"dropdown-menu-item__text\",children:i}),n&&!a.isMobile&&(0,o.jsx)(\"div\",{className:\"dropdown-menu-item__shortcut\",children:n})]})}},4215:function(e,t,n){\"use strict\";var r=n(7169),o=n(2726),i=n(4122),a=n(6772),l=n(4512),s=[\"icon\",\"shortcut\",\"href\",\"children\",\"onSelect\",\"className\"];function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var d=function(e){var t,n=e.icon,r=e.shortcut,c=e.href,d=e.children,f=e.onSelect,p=e.className,h=void 0===p?\"\":p,m=(0,o.Z)(e,s),g=(0,a.qZ)(m.onClick,f);return(0,l.jsx)(\"a\",u(u({},m),{},{href:c,target:\"_blank\",rel:\"noreferrer\",className:(0,a.n)(h),title:null!==(t=m.title)&&void 0!==t?t:m[\"aria-label\"],onClick:g,children:(0,l.jsx)(i.Z,{icon:n,shortcut:r,children:d})}))};t.Z=d,d.displayName=\"DropdownMenuItemLink\"},6772:function(e,t,n){\"use strict\";n.d(t,{N7:function(){return l},n:function(){return s},qZ:function(){return c}});var r=n(9787),o=n.n(r),i=n(2335),a=n(6340),l=o().createContext({}),s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\";return\"dropdown-menu-item dropdown-menu-item-base \".concat(e).trim()},c=function(e,t){var n=(0,r.useContext)(l);return(0,a.Mj)(e,(function(e){var r,o=new CustomEvent(i.Ks.MENU_ITEM_SELECT,{bubbles:!0,cancelable:!0});(null==t||t(o),o.defaultPrevented)||(null===(r=n.onSelect)||void 0===r||r.call(n,o))}))}},3646:function(e,t,n){\"use strict\";n.d(t,{$c:function(){return le},$q:function(){return R},BF:function(){return _e},BR:function(){return re},Ct:function(){return me},D7:function(){return q},DG:function(){return oe},DJ:function(){return _},DS:function(){return He},EO:function(){return nt},ET:function(){return X},FC:function(){return E},Gc:function(){return fe},HL:function(){return ge},Hk:function(){return at},Hy:function(){return Y},IN:function(){return pe},J8:function(){return ie},Mw:function(){return O},NA:function(){return W},NW:function(){return U},Nw:function(){return it},OA:function(){return qe},OW:function(){return I},P7:function(){return ot},Pm:function(){return L},RJ:function(){return Oe},RY:function(){return K},Re:function(){return T},ST:function(){return we},Sd:function(){return N},TP:function(){return ae},Tl:function(){return ne},Tw:function(){return Se},UE:function(){return se},VL:function(){return Z},Vl:function(){return ue},Vq:function(){return b},W2:function(){return Ne},W5:function(){return xe},Wl:function(){return De},X7:function(){return Te},XB:function(){return z},XH:function(){return H},YA:function(){return x},ZA:function(){return Pe},Zm:function(){return J},_C:function(){return k},_U:function(){return j},a0:function(){return Ie},a1:function(){return ee},a5:function(){return Le},aA:function(){return rt},aT:function(){return Ze},bf:function(){return ze},by:function(){return G},e0:function(){return P},eQ:function(){return $},fr:function(){return We},gK:function(){return ke},h0:function(){return V},il:function(){return Fe},j8:function(){return Ye},jn:function(){return Ee},kL:function(){return F},kM:function(){return Re},lF:function(){return Ce},m:function(){return Ke},m9:function(){return Ae},mh:function(){return be},nb:function(){return M},np:function(){return Me},nq:function(){return Ve},o3:function(){return et},oQ:function(){return S},oT:function(){return tt},op:function(){return je},pO:function(){return y},po:function(){return te},pw:function(){return he},q0:function(){return Ge},qQ:function(){return w},rr:function(){return Qe},t5:function(){return de},tW:function(){return Xe},tb:function(){return A},tn:function(){return Ue},uD:function(){return ye},vo:function(){return Je},wr:function(){return Be},xL:function(){return B},xP:function(){return Q},xs:function(){return ve},z6:function(){return $e},zG:function(){return ce},zb:function(){return D},zu:function(){return C}});var r=n(7169),o=n(2726),i=n(9787),a=n.n(i),l=n(5284),s=n(45),c=n(2335),u=n(4512),d=[\"width\",\"height\",\"mirror\",\"style\"];function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=function(e){return e===c.C6.LIGHT?l.white:\"#1e1e1e\"},m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,n=\"number\"==typeof t?{width:t}:t,r=n.width,i=void 0===r?512:r,a=n.height,l=void 0===a?i:a,c=n.mirror,f=n.style,h=(0,o.Z)(n,d);return(0,u.jsx)(\"svg\",p(p({\"aria-hidden\":\"true\",focusable:\"false\",role:\"img\",viewBox:\"0 0 \".concat(i,\" \").concat(l),className:(0,s.Z)({\"rtl-mirror\":c}),style:f},h),{},{children:\"string\"==typeof e?(0,u.jsx)(\"path\",{fill:\"currentColor\",d:e}):e}))},g={width:24,height:24,fill:\"none\",strokeWidth:2,stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\"},v={width:20,height:20,fill:\"none\",stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\"},b=(m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"rect\",{x:3,y:8,width:18,height:4,rx:1}),(0,u.jsx)(\"line\",{x1:12,y1:8,x2:12,y2:21}),(0,u.jsx)(\"path\",{d:\"M19 12v7a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2v-7\"}),(0,u.jsx)(\"path\",{d:\"M7.5 8a2.5 2.5 0 0 1 0 -5a4.8 8 0 0 1 4.5 5a4.8 8 0 0 1 4.5 -5a2.5 2.5 0 0 1 0 5\"})]}),g),m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0\"}),(0,u.jsx)(\"path\",{d:\"M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0\"}),(0,u.jsx)(\"line\",{x1:\"3\",y1:\"6\",x2:\"3\",y2:\"19\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"6\",x2:\"12\",y2:\"19\"}),(0,u.jsx)(\"line\",{x1:\"21\",y1:\"6\",x2:\"21\",y2:\"19\"})]}),g)),y=m((0,u.jsxs)(\"svg\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"5\",x2:\"12\",y2:\"19\"}),(0,u.jsx)(\"line\",{x1:\"5\",y1:\"12\",x2:\"19\",y2:\"12\"})]}),g),x=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"12\",r:\"1\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"19\",r:\"1\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"5\",r:\"1\"})]}),g),w=m((0,u.jsxs)(\"svg\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M9 4v6l-2 4v2h10v-2l-2 -4v-6\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"16\",x2:\"12\",y2:\"21\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"4\",x2:\"16\",y2:\"4\"})]}),g),k=m((0,u.jsxs)(\"g\",{children:[(0,u.jsx)(\"path\",{d:\"M13.542 8.542H6.458a2.5 2.5 0 0 0-2.5 2.5v3.75a2.5 2.5 0 0 0 2.5 2.5h7.084a2.5 2.5 0 0 0 2.5-2.5v-3.75a2.5 2.5 0 0 0-2.5-2.5Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"path\",{d:\"M10 13.958a1.042 1.042 0 1 0 0-2.083 1.042 1.042 0 0 0 0 2.083Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"UnlockedIcon\",style:{maskType:\"alpha\"},maskUnits:\"userSpaceOnUse\",x:6,y:1,width:9,height:9,children:(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M6.399 9.561V5.175c0-.93.401-1.823 1.116-2.48a3.981 3.981 0 0 1 2.693-1.028c1.01 0 1.98.37 2.694 1.027.715.658 1.116 1.55 1.116 2.481\",fill:\"#fff\"})}),(0,u.jsx)(\"g\",{mask:\"url(#UnlockedIcon)\",children:(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M5.149 9.561v1.25h2.5v-1.25h-2.5Zm5.06-7.894V.417v1.25Zm2.559 3.508v1.25h2.5v-1.25h-2.5ZM7.648 8.51V5.175h-2.5V8.51h2.5Zm0-3.334c0-.564.243-1.128.713-1.561L6.668 1.775c-.959.883-1.52 2.104-1.52 3.4h2.5Zm.713-1.561a2.732 2.732 0 0 1 1.847-.697v-2.5c-1.31 0-2.585.478-3.54 1.358L8.36 3.614Zm1.847-.697c.71 0 1.374.26 1.847.697l1.694-1.839a5.231 5.231 0 0 0-3.54-1.358v2.5Zm1.847.697c.47.433.713.997.713 1.561h2.5c0-1.296-.56-2.517-1.52-3.4l-1.693 1.839Z\",fill:\"currentColor\"})})]}),v),E=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M13.542 8.542H6.458a2.5 2.5 0 0 0-2.5 2.5v3.75a2.5 2.5 0 0 0 2.5 2.5h7.084a2.5 2.5 0 0 0 2.5-2.5v-3.75a2.5 2.5 0 0 0-2.5-2.5Z\"}),(0,u.jsx)(\"path\",{d:\"M10 13.958a1.042 1.042 0 1 0 0-2.083 1.042 1.042 0 0 0 0 2.083Z\"}),(0,u.jsx)(\"path\",{d:\"M6.667 8.333V5.417C6.667 3.806 8.159 2.5 10 2.5c1.841 0 3.333 1.306 3.333 2.917v2.916\"})]}),v),S=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M38.5 83.5c-14-2-17.833-10.473-21-22.5C14.333 48.984 12 22 12 12.5\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"m12.005 10.478 7.905 14.423L6 25.75l6.005-15.273Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M12.005 10.478c1.92 3.495 3.838 7 7.905 14.423m-7.905-14.423c3.11 5.683 6.23 11.368 7.905 14.423m0 0c-3.68.226-7.35.455-13.91.85m13.91-.85c-5.279.33-10.566.647-13.91.85m0 0c1.936-4.931 3.882-9.86 6.005-15.273M6 25.75c2.069-5.257 4.135-10.505 6.005-15.272\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"})]}),{width:41,height:94,fill:\"none\"}),j=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M18.026 1.232c-5.268 13.125-5.548 33.555 3.285 42.311 8.823 8.75 33.31 12.304 42.422 13.523\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"m72.181 59.247-13.058-10-2.948 13.62 16.006-3.62Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M72.181 59.247c-3.163-2.429-6.337-4.856-13.058-10m13.058 10c-5.145-3.936-10.292-7.882-13.058-10m0 0c-.78 3.603-1.563 7.196-2.948 13.62m2.948-13.62c-1.126 5.168-2.24 10.346-2.948 13.62m0 0c5.168-1.166 10.334-2.343 16.006-3.62m-16.006 3.62c5.51-1.248 11.01-2.495 16.006-3.62\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"})]}),{width:85,height:71,fill:\"none\"}),_=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M1 77c14-2 31.833-11.973 35-24 3.167-12.016-6-35-9.5-43.5\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"m24.165 1.093-2.132 16.309 13.27-4.258-11.138-12.05Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M24.165 1.093c-.522 3.953-1.037 7.916-2.132 16.309m2.131-16.309c-.835 6.424-1.68 12.854-2.13 16.308m0 0c3.51-1.125 7.013-2.243 13.27-4.257m-13.27 4.257c5.038-1.608 10.08-3.232 13.27-4.257m0 0c-3.595-3.892-7.197-7.777-11.14-12.05m11.14 12.05c-3.837-4.148-7.667-8.287-11.14-12.05\",stroke:\"currentColor\",strokeWidth:2,strokeLinecap:\"round\"})]}),{width:38,height:78,fill:\"none\"}),O=m((0,u.jsxs)(\"g\",{fill:\"currentColor\",children:[(0,u.jsx)(\"path\",{d:\"M24.296 12.214c0 .112-.134.224-.291.224-.135 0-.516.629-.808 1.392-.897 2.335-9.867 20.096-9.89 19.534 0-.292-.134-.494-.359-.494-.313 0-.358.18-.224 1.055.135 1.01.045 1.236-3.14 7.432-1.793 3.525-3.722 7.208-4.282 8.196-.584 1.032-1.032 2.155-1.077 2.626-.067.809.022.92 1.973 2.605 1.122.988 2.557 2.223 3.185 2.784 2.826 2.582 4.149 3.615 4.508 3.547.538-.09 8.858-8.823 8.88-9.317 0-.225-.403-3.638-.897-7.59-.852-6.735-1.66-14.616-1.57-15.38.068-.47-.269-2.85-.516-3.884-.201-.808-.112-1.145 1.503-4.827.942-2.178 2.176-4.85 2.714-5.928.515-1.077.964-2.02.964-2.088 0-.067-.157-.112-.336-.112-.18 0-.337.09-.337.225Zm-5.158 16.772c.247 1.572.74 5.344 1.099 8.375.695 5.568 1.503 11.742 1.727 13.314.135.786.045.943-1.413 2.56-2.534 2.851-5.225 5.658-6.145 6.376l-.852.674-4.373-4.086c-4.037-3.728-4.373-4.11-4.127-4.558a5154.2 5154.2 0 0 1 2.535-4.626 727.864 727.864 0 0 0 3.678-6.78c.784-1.46 1.502-2.717 1.637-2.785.156-.09.201 2.178.156 7.006-.09 7.207-.067 7.23.651 7.072.09 0 .157-3.637.157-8.06V35.43l2.355-4.715c1.3-2.605 2.377-4.693 2.422-4.67.045.022.27 1.347.493 2.94ZM9.562 1.818C7.903 3.143 5.346 5.388 3.328 7.32L1.735 8.823l.292 1.976c.157 1.078.449 3.188.628 4.67.202 1.482.404 2.874.47 3.077.09.269 0 .404-.246.404-.426 0-.449-.113.718 3.592.286.952.577 1.903.875 2.851.044.158.224.225.425.158.202-.09.314-.27.247-.427-.067-.18.045-.36.224-.427.247-.09.225-.269-.157-.92-.605-1.01-2.152-9.633-2.242-12.416-.067-1.976-.067-1.999.762-3.121.808-1.1 2.67-2.762 5.54-4.873.807-.605 1.614-1.28 1.839-1.504.336-.404.493-.292 3.319 2.717 1.637 1.729 3.453 3.502 4.037 3.952l1.076.808-.83 1.75c-.448.944-2.265 4.581-4.059 8.04-3.745 7.274-2.983 6.578-7.333 6.645l-2.826.023-.942 1.077c-.987 1.146-1.121 1.572-.65 2.29.18.248.313.652.313.898 0 .405.157.472 1.055.517.56.023 1.076.09 1.144.157.067.068.156 1.46.224 3.098l.09 2.965-1.503 3.232C1.735 45.422.749 47.891.749 48.7c0 .427.09.786.18.786.224 0 .224-.022 9.35-19.085a4398.495 4398.495 0 0 1 8.927-18.546c.672-1.369 1.278-2.626 1.323-2.806.045-.202-1.503-1.751-3.97-3.93-2.22-1.975-4.171-3.772-4.35-3.974-.516-.628-1.279-.426-2.647.674ZM8.441 31.231c-.18.472-.65 1.46-1.031 2.2-.629 1.258-.696 1.303-.853.786-.09-.314-.157-1.235-.18-2.066-.022-1.639-.067-1.616 1.817-1.728L8.8 30.4l-.358.831Zm1.884-3.592c-1.032 1.998-1.077 2.02-3.903 2.155-2.489.135-2.533.112-2.533-.36 0-.269-.09-.628-.203-.808-.134-.202-.044-.56.27-1.055l.493-.763H6.69c1.234-.023 2.647-.113 3.14-.202.494-.09.92-.135.965-.113.045.023-.18.54-.471 1.146Zm-.09-20.477c-.404.292-.516.584-.516 1.325 0 .875.067 1.01.673 1.257.605.247.763.224 1.458-.247.92-.629.941-.786.269-1.796-.583-.876-1.166-1.033-1.884-.54Z\"}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M23.703 11.793c.166-.291.501-.514.93-.514.38 0 .698.161.82.283.161.162.225.35.225.54a.822.822 0 0 1-.056.289c-.08.218-.5 1.106-.983 2.116-.535 1.071-1.76 3.727-2.699 5.895-.79 1.802-1.209 2.784-1.404 3.416-.142.461-.132.665-.058.961.264 1.103.6 3.647.53 4.132-.088.756.727 8.547 1.57 15.21.5 3.997.903 7.45.903 7.676l-.001.033c-.004.087-.041.288-.211.54-.24.354-.914 1.143-1.8 2.119-2.004 2.21-5.107 5.423-6.463 6.653-.322.292-.566.485-.696.56a.884.884 0 0 1-.289.111c-.194.037-.579-.007-1.11-.349-.707-.453-1.981-1.522-4-3.366-.627-.561-2.061-1.794-3.176-2.776-.81-.699-1.308-1.138-1.612-1.466-.32-.343-.47-.61-.549-.87-.078-.257-.085-.515-.055-.874.05-.52.521-1.769 1.166-2.91.559-.985 2.48-4.654 4.269-8.17 1.579-3.071 2.392-4.663 2.792-5.612.32-.759.329-1 .277-1.387-.085-.553-.092-.891-.052-1.092a.942.942 0 0 1 .274-.52c.164-.157.384-.261.704-.261.094 0 .184.011.27.033 1.924-3.44 8.554-16.632 9.316-18.616.276-.724.64-1.336.848-1.556a.965.965 0 0 1 .32-.228Zm-5.399 16.402c-.49.942-.971 1.888-1.446 2.837l-2.28 4.565v7.871c0 4.023-.06 7.404-.136 8.04-.067.552-.474.691-.654.722l.075-.008c-.317.07-.574.063-.778-.023-.234-.098-.5-.297-.63-.857-.156-.681-.158-2.462-.103-6.893.019-2.022.022-3.592.008-4.725-.156.276-.315.562-.467.843a737.624 737.624 0 0 1-3.682 6.79 3618.972 3618.972 0 0 0-2.462 4.493c.062.088.169.231.289.364.55.61 1.631 1.623 3.624 3.462l3.931 3.674.377-.298c.907-.709 3.554-3.479 6.055-6.293.425-.47.73-.814.946-1.084.175-.22.28-.36.319-.501.031-.117.002-.227-.024-.379l-.004-.02c-.224-1.572-1.032-7.753-1.728-13.33-.358-3.022-.85-6.782-1.096-8.349l-.002-.01c-.042-.301-.087-.603-.132-.891ZM9.118 1.264C9.91.628 10.537.27 11.028.144c.727-.186 1.27.003 1.713.53.186.209 2.107 1.972 4.287 3.912 2.02 1.783 3.434 3.16 3.897 3.743.326.41.322.756.296.873a1.046 1.046 0 0 1-.005.018c-.047.188-.669 1.512-1.374 2.947a4348.55 4348.55 0 0 0-8.923 18.54c-7.335 15.32-8.808 18.396-9.217 19.015-.235.355-.419.404-.525.437a.815.815 0 0 1-.249.036.745.745 0 0 1-.647-.363C.176 49.67.04 49.222.04 48.7c0-.286.09-.754.316-1.434.452-1.356 1.466-3.722 3.225-7.53l1.432-3.083-.084-2.787a72.902 72.902 0 0 0-.156-2.53 7.307 7.307 0 0 0-.539-.046c-.463-.024-.764-.062-.96-.124-.304-.096-.48-.252-.598-.438-.105-.165-.17-.374-.17-.663 0-.134-.081-.348-.178-.481l-.019-.028c-.293-.448-.406-.831-.373-1.234.04-.484.34-1.052 1.08-1.91l.759-.869c-.103-.325-.471-1.513-.854-2.787-.737-2.339-1.004-3.238-1.018-3.578-.016-.393.134-.59.27-.715a.721.721 0 0 1 .192-.125 89.87 89.87 0 0 1-.414-2.782 231.651 231.651 0 0 0-.625-4.652l-.292-1.976a.71.71 0 0 1 .215-.62l1.589-1.501C4.87 4.86 7.446 2.599 9.118 1.264Zm-1.833 33.75a.819.819 0 0 1-.406.208.73.73 0 0 1-.491-.063l.048 1.618v.009l.849-1.773Zm5.874.697c-.035.087-.07.175-.107.261a20.92 20.92 0 0 1-.36.798.688.688 0 0 1 .457.007l.01.004v-1.07Zm.72-1.892-.015.018a.745.745 0 0 1-.407.236c.02.195.027.378 0 .592l.422-.846ZM7.7 31.175c-.268.027-.489.055-.6.07-.006.056-.013.13-.016.194-.005.19 0 .42.004.694.003.111.006.225.011.338.232-.471.459-.956.6-1.296Zm2.12-1.456a2.04 2.04 0 0 1-.415.31c.064.104.099.222.104.341l.132-.277.18-.374Zm-.14-2.374c-.654.079-1.882.153-2.974.173h-1.87l-.281.435c-.09.141-.17.331-.203.414.102.21.189.508.226.788h.007c.364.006.928-.023 1.805-.07 1.243-.06 1.88-.052 2.315-.291.154-.086.266-.215.387-.393.176-.261.354-.605.587-1.056Zm2.136-1.784c-.157.16-.331.3-.52.422a.631.631 0 0 1 .182.281l.337-.703Zm7.205-1.478c-.222.442-.445.883-.667 1.32a.787.787 0 0 1 .61.007c.036.018.145.07.243.2-.032-.165-.067-.33-.105-.493-.088-.351-.137-.633-.08-1.034h-.001ZM11.415 2.546c-.358.319-1.039.879-1.725 1.394C6.903 5.989 5.087 7.59 4.301 8.662c-.28.38-.458.605-.556.852-.15.38-.103.798-.068 1.824.063 1.923.833 6.669 1.493 9.686.262 1.199.483 2.11.654 2.394.25.426.364.71.398.894a.923.923 0 0 1-.184.764l1.27-.01c.863-.014 1.523.003 2.056-.019.424-.017.75-.052 1.034-.187.336-.159.596-.458.921-.955.62-.948 1.373-2.515 2.705-5.103 1.789-3.448 3.6-7.076 4.047-8.015l.582-1.227-.62-.466c-.595-.458-2.45-2.263-4.12-4.027a59.654 59.654 0 0 0-2.498-2.52ZM5.81 24.876v-.001l-.013-.03.013.031Zm-.71-.835.027-.011a.55.55 0 0 0-.028.011Zm19.904-11.777v.01-.01Zm.002-.016v-.034.034ZM9.82 6.587c-.587.424-.81.823-.81 1.9 0 .787.12 1.157.344 1.42.158.186.388.339.77.494.352.144.603.207.838.209.347.002.688-.12 1.285-.525.707-.483.98-.864 1.036-1.238.052-.352-.09-.812-.574-1.54-.412-.619-.853-.95-1.29-1.072-.489-.139-1.016-.05-1.586.342l-.013.01Zm2.015 2.028a6.288 6.288 0 0 0-.306-.52c-.19-.284-.326-.488-.531-.5-.113-.007-.224.058-.352.146-.218.159-.218.34-.218.745 0 .198.02.419.028.504.047.025.133.068.204.097.133.054.222.102.312.103.04 0 .071-.027.12-.054a4.29 4.29 0 0 0 .358-.225c.147-.1.299-.223.385-.296ZM9.12 1.263l-.002.002.002-.002Z\"})]}),{width:26,height:62,fill:\"none\"}),C=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M6 6l4.153 11.793a0.365 .365 0 0 0 .331 .207a0.366 .366 0 0 0 .332 -.207l2.184 -4.793l4.787 -1.994a0.355 .355 0 0 0 .213 -.323a0.355 .355 0 0 0 -.213 -.323l-11.787 -4.36z\"}),(0,u.jsx)(\"path\",{d:\"M13.5 13.5l4.5 4.5\"})]}),{fill:\"none\",width:22,height:22,strokeWidth:1.25}),I=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"rect\",{x:\"4\",y:\"4\",width:\"16\",height:\"16\",rx:\"2\"})]}),g),M=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M10.5 20.4l-6.9 -6.9c-.781 -.781 -.781 -2.219 0 -3l6.9 -6.9c.781 -.781 2.219 -.781 3 0l6.9 6.9c.781 .781 .781 2.219 0 3l-6.9 6.9c-.781 .781 -2.219 .781 -3 0z\"})]}),g),T=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"12\",r:\"9\"})]}),g),P=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"5\",y1:\"12\",x2:\"19\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"15\",y1:\"16\",x2:\"19\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"15\",y1:\"8\",x2:\"19\",y2:\"12\"})]}),g),D=m((0,u.jsx)(\"path\",{d:\"M4.167 10h11.666\",strokeWidth:\"1.5\"}),v),A=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M20 17v-12c0 -1.121 -.879 -2 -2 -2s-2 .879 -2 2v12l2 2l2 -2z\"}),(0,u.jsx)(\"path\",{d:\"M16 7h4\"}),(0,u.jsx)(\"path\",{d:\"M18 19h-13a2 2 0 1 1 0 -4h4a2 2 0 1 0 0 -4h-3\"})]}),g),L=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{clipRule:\"evenodd\",d:\"m7.643 15.69 7.774-7.773a2.357 2.357 0 1 0-3.334-3.334L4.31 12.357a3.333 3.333 0 0 0-.977 2.357v1.953h1.953c.884 0 1.732-.352 2.357-.977Z\"}),(0,u.jsx)(\"path\",{d:\"m11.25 5.417 3.333 3.333\"})]}),v),Z=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"20\",x2:\"7\",y2:\"20\"}),(0,u.jsx)(\"line\",{x1:\"14\",y1:\"20\",x2:\"21\",y2:\"20\"}),(0,u.jsx)(\"line\",{x1:\"6.9\",y1:\"15\",x2:\"13.8\",y2:\"15\"}),(0,u.jsx)(\"line\",{x1:\"10.2\",y1:\"6.3\",x2:\"16\",y2:\"20\"}),(0,u.jsx)(\"polyline\",{points:\"5 20 11 4 13 4 20 20\"})]}),g),z=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M12.5 6.667h.01\"}),(0,u.jsx)(\"path\",{d:\"M4.91 2.625h10.18a2.284 2.284 0 0 1 2.285 2.284v10.182a2.284 2.284 0 0 1-2.284 2.284H4.909a2.284 2.284 0 0 1-2.284-2.284V4.909a2.284 2.284 0 0 1 2.284-2.284Z\"}),(0,u.jsx)(\"path\",{d:\"m3.333 12.5 3.334-3.333c.773-.745 1.726-.745 2.5 0l4.166 4.166\"}),(0,u.jsx)(\"path\",{d:\"m11.667 11.667.833-.834c.774-.744 1.726-.744 2.5 0l1.667 1.667\"})]}),v),R=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M19 20h-10.5l-4.21 -4.3a1 1 0 0 1 0 -1.41l10 -10a1 1 0 0 1 1.41 0l5 5a1 1 0 0 1 0 1.41l-9.2 9.3\"}),(0,u.jsx)(\"path\",{d:\"M18 13.3l-6.3 -6.3\"})]}),g),N=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M10 4.167v11.666M4.167 10h11.666\"}),v),B=m((0,u.jsx)(\"path\",{d:\"M5 10h10\",strokeWidth:\"1.25\"}),v),H=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M3.333 5.833h13.334M8.333 9.167v5M11.667 9.167v5M4.167 5.833l.833 10c0 .92.746 1.667 1.667 1.667h6.666c.92 0 1.667-.746 1.667-1.667l.833-10M7.5 5.833v-2.5c0-.46.373-.833.833-.833h3.334c.46 0 .833.373.833.833v2.5\"}),v),W=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M14.375 6.458H8.958a2.5 2.5 0 0 0-2.5 2.5v5.417a2.5 2.5 0 0 0 2.5 2.5h5.417a2.5 2.5 0 0 0 2.5-2.5V8.958a2.5 2.5 0 0 0-2.5-2.5Z\"}),(0,u.jsx)(\"path\",{clipRule:\"evenodd\",d:\"M11.667 3.125c.517 0 .986.21 1.325.55.34.338.55.807.55 1.325v1.458H8.333c-.485 0-.927.185-1.26.487-.343.312-.57.75-.609 1.24l-.005 5.357H5a1.87 1.87 0 0 1-1.326-.55 1.87 1.87 0 0 1-.549-1.325V5c0-.518.21-.987.55-1.326.338-.34.807-.549 1.325-.549h6.667Z\"})]}),v),F=m((0,u.jsx)(\"path\",{clipRule:\"evenodd\",d:\"M10 2.5h.328a6.25 6.25 0 0 0 6.6 10.372A7.5 7.5 0 1 1 10 2.493V2.5Z\",stroke:\"currentColor\"}),v),U=m((0,u.jsx)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M10 12.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM10 4.167V2.5M14.167 5.833l1.166-1.166M15.833 10H17.5M14.167 14.167l1.166 1.166M10 15.833V17.5M5.833 14.167l-1.166 1.166M5 10H3.333M5.833 5.833 4.667 4.667\"})}),v),K=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"6\",x2:\"20\",y2:\"6\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"12\",x2:\"20\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"18\",x2:\"20\",y2:\"18\"})]}),g),Y=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M3.333 14.167v1.666c0 .92.747 1.667 1.667 1.667h10c.92 0 1.667-.746 1.667-1.667v-1.666M5.833 9.167 10 13.333l4.167-4.166M10 3.333v10\"}),v),G=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"12\",cy:\"12\",r:\"9\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"17\",x2:\"12\",y2:\"17.01\"}),(0,u.jsx)(\"path\",{d:\"M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4\"})]}),g),V=m((0,u.jsx)(\"path\",{strokeWidth:\"1.25\",d:\"M9.167 5.833H5.833c-1.254 0-2.5 1.282-2.5 2.5v5.834c0 1.283 1.252 2.5 2.5 2.5h5.834c1.251 0 2.5-1.25 2.5-2.5v-3.334M8.333 11.667l8.334-8.334M12.5 3.333h4.167V7.5\"}),v),X=m((0,u.jsx)(\"path\",{d:\"M7.5 15.833c-3.583 1.167-3.583-2.083-5-2.5m10 4.167v-2.917c0-.833.083-1.166-.417-1.666 2.334-.25 4.584-1.167 4.584-5a3.833 3.833 0 0 0-1.084-2.667 3.5 3.5 0 0 0-.083-2.667s-.917-.25-2.917 1.084a10.25 10.25 0 0 0-5.166 0C5.417 2.333 4.5 2.583 4.5 2.583a3.5 3.5 0 0 0-.083 2.667 3.833 3.833 0 0 0-1.084 2.667c0 3.833 2.25 4.75 4.584 5-.5.5-.5 1-.417 1.666V17.5\",strokeWidth:\"1.25\"}),v),q=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M7.5 10.833a.833.833 0 1 0 0-1.666.833.833 0 0 0 0 1.666ZM12.5 10.833a.833.833 0 1 0 0-1.666.833.833 0 0 0 0 1.666ZM6.25 6.25c2.917-.833 4.583-.833 7.5 0M5.833 13.75c2.917.833 5.417.833 8.334 0\"}),(0,u.jsx)(\"path\",{d:\"M12.917 14.167c0 .833 1.25 2.5 1.666 2.5 1.25 0 2.361-1.39 2.917-2.5.556-1.39.417-4.861-1.25-9.584-1.214-.846-2.5-1.116-3.75-1.25l-.833 2.084M7.083 14.167c0 .833-1.13 2.5-1.526 2.5-1.191 0-2.249-1.39-2.778-2.5-.529-1.39-.397-4.861 1.19-9.584 1.157-.846 2.318-1.116 3.531-1.25l.833 2.084\"})]}),v),J=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z\"})]}),g),$=m((0,u.jsx)(\"polyline\",{fill:\"none\",stroke:\"currentColor\",points:\"20 6 9 17 4 12\"}),{width:24,height:24}),Q=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M8.333 11.667a2.917 2.917 0 0 0 4.167 0l3.333-3.334a2.946 2.946 0 1 0-4.166-4.166l-.417.416\"}),(0,u.jsx)(\"path\",{d:\"M11.667 8.333a2.917 2.917 0 0 0-4.167 0l-3.333 3.334a2.946 2.946 0 0 0 4.166 4.166l.417-.416\"})]}),v),ee=m(\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\",{width:448,height:512}),te=m(\"M252 54L203 8a28 27 0 00-20-8H28C12 0 0 12 0 27v195c0 15 12 26 28 26h204c15 0 28-11 28-26V73a28 27 0 00-8-19zM130 213c-21 0-37-16-37-36 0-19 16-35 37-35 20 0 37 16 37 35 0 20-17 36-37 36zm56-169v56c0 4-4 6-7 6H44c-4 0-7-2-7-6V42c0-4 3-7 7-7h133l4 2 3 2a7 7 0 012 5z M296 201l87 95-188 205-78 9c-10 1-19-8-18-20l9-84zm141-14l-41-44a31 31 0 00-46 0l-38 41 87 95 38-42c13-14 13-36 0-50z\",{width:448,height:512}),ne=m((0,u.jsx)(\"path\",{d:\"m9.257 6.351.183.183H15.819c.34 0 .727.182 1.051.506.323.323.505.708.505 1.05v5.819c0 .316-.183.7-.52 1.035-.337.338-.723.522-1.037.522H4.182c-.352 0-.74-.181-1.058-.5-.318-.318-.499-.705-.499-1.057V5.182c0-.351.181-.736.5-1.054.32-.321.71-.503 1.057-.503H6.53l2.726 2.726Z\",strokeWidth:\"1.25\"}),v),re=m(\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\",{width:384,height:512}),oe=m(\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"),ie=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M15 8h.01\"}),(0,u.jsx)(\"path\",{d:\"M12 20h-5a3 3 0 0 1 -3 -3v-10a3 3 0 0 1 3 -3h10a3 3 0 0 1 3 3v5\"}),(0,u.jsx)(\"path\",{d:\"M4 15l4 -4c.928 -.893 2.072 -.893 3 0l4 4\"}),(0,u.jsx)(\"path\",{d:\"M14 14l1 -1c.617 -.593 1.328 -.793 2.009 -.598\"}),(0,u.jsx)(\"path\",{d:\"M19 16v6\"}),(0,u.jsx)(\"path\",{d:\"M22 19l-3 3l-3 -3\"})]}),g),ae=m(\"M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z\",{width:512,height:512}),le=(m(\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),m(\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),m(\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\")),se=(m(\"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"),m((0,u.jsx)(\"path\",{d:\"M7.5 10.833 4.167 7.5 7.5 4.167M4.167 7.5h9.166a3.333 3.333 0 0 1 0 6.667H12.5\",strokeWidth:\"1.25\"}),v)),ce=m((0,u.jsx)(\"path\",{d:\"M12.5 10.833 15.833 7.5 12.5 4.167M15.833 7.5H6.667a3.333 3.333 0 1 0 0 6.667H7.5\",strokeWidth:\"1.25\"}),v),ue=m(\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z\",{mirror:!0}),de=(m((0,u.jsx)(\"path\",{d:\"M5 12.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM15 7.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM15 17.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM7.25 8.917l5.5-2.834M7.25 11.083l5.5 2.834\",strokeWidth:\"1.5\"}),v),m(\"M16 5l-1.42 1.42-1.59-1.59V16h-1.98V4.83L9.42 6.42 8 5l4-4 4 4zm4 5v11c0 1.1-.9 2-2 2H6c-1.11 0-2-.9-2-2V10c0-1.11.89-2 2-2h3v2H6v11h12V10h-3V8h3c1.1 0 2 .89 2 2z\",{width:24,height:24}),m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{fill:\"currentColor\",d:\"M40 5.6v6.1l-4.1.7c-8.9 1.4-16.5 6.9-20.6 15C13 32 10.9 43 12.4 43c.4 0 2.4-1.3 4.4-3 5-3.9 12.1-7 18.2-7.7l5-.6v12.8l11.2-11.3L62.5 22 51.2 10.8 40-.5v6.1zm10.2 22.6L44 34.5v-6.8l-6.9.6c-3.9.3-9.8 1.7-13.2 3.1-3.5 1.4-6.5 2.4-6.7 2.2-.9-1 3-7.5 6.4-10.8C28 18.6 34.4 16 40.1 16c3.7 0 3.9-.1 3.9-3.2V9.5l6.2 6.3 6.3 6.2-6.3 6.2z\"}),(0,u.jsx)(\"path\",{stroke:\"currentColor\",fill:\"currentColor\",d:\"M0 36v20h48v-6.2c0-6 0-6.1-2-4.3-1.1 1-2 2.9-2 4.2V52H4V34c0-17.3-.1-18-2-18s-2 .7-2 20z\"})]}),{width:64,height:64}),m((0,u.jsx)(\"path\",{stroke:\"currentColor\",strokeWidth:\"40\",fill:\"currentColor\",d:\"M148 560a318 318 0 0 0 522 110 316 316 0 0 0 0-450 316 316 0 0 0-450 0c-11 11-21 22-30 34v4h47c25 0 46 21 46 46s-21 45-46 45H90c-13 0-25-6-33-14-9-9-14-20-14-33V156c0-25 20-45 45-45s45 20 45 45v32l1 1a401 401 0 0 1 623 509l212 212a42 42 0 0 1-59 59L698 757A401 401 0 0 1 65 570a42 42 0 0 1 83-10z\"}),{width:1024}),m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{d:\"M13.889 4.167H8.333c-.767 0-1.389.622-1.389 1.389v5.555c0 .767.622 1.389 1.39 1.389h5.555c.767 0 1.389-.622 1.389-1.389V5.556c0-.767-.622-1.39-1.39-1.39Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M12.5 12.5v1.389a1.389 1.389 0 0 1-1.389 1.389H5.556a1.389 1.389 0 0 1-1.39-1.39V8.334a1.389 1.389 0 0 1 1.39-1.389h1.388\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v)),fe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M6.944 12.5H12.5v1.389a1.389 1.389 0 0 1-1.389 1.389H5.556a1.389 1.389 0 0 1-1.39-1.39V8.334a1.389 1.389 0 0 1 1.39-1.389h1.388\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M13.889 4.167H8.333c-.767 0-1.389.621-1.389 1.389v5.555c0 .767.622 1.389 1.39 1.389h5.555c.767 0 1.389-.622 1.389-1.389V5.556c0-.768-.622-1.39-1.39-1.39Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),pe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M8.775 6.458h2.45a2.316 2.316 0 0 1 2.317 2.316v2.452a2.316 2.316 0 0 1-2.316 2.316H8.774a2.316 2.316 0 0 1-2.317-2.316V8.774a2.316 2.316 0 0 1 2.317-2.316Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M5.441 9.792h2.451a2.316 2.316 0 0 1 2.316 2.316v2.45a2.316 2.316 0 0 1-2.316 2.317h-2.45a2.316 2.316 0 0 1-2.317-2.316v-2.451a2.316 2.316 0 0 1 2.316-2.316ZM12.108 3.125h2.45a2.316 2.316 0 0 1 2.317 2.316v2.451a2.316 2.316 0 0 1-2.316 2.316h-2.451a2.316 2.316 0 0 1-2.316-2.316v-2.45a2.316 2.316 0 0 1 2.316-2.317Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),he=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",children:[(0,u.jsx)(\"path\",{d:\"M5.441 9.792h2.451a2.316 2.316 0 0 1 2.316 2.316v2.45a2.316 2.316 0 0 1-2.316 2.317h-2.45a2.316 2.316 0 0 1-2.317-2.316v-2.451a2.316 2.316 0 0 1 2.316-2.316Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"path\",{d:\"M5.441 9.792h2.451a2.316 2.316 0 0 1 2.316 2.316v2.45a2.316 2.316 0 0 1-2.316 2.317h-2.45a2.316 2.316 0 0 1-2.317-2.316v-2.451a2.316 2.316 0 0 1 2.316-2.316Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"SendToBackIcon\",fill:\"#fff\",children:(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M9.167 5.833v2.06a2.941 2.941 0 0 0 2.94 2.94h2.06v.393a2.941 2.941 0 0 1-2.941 2.94h-.393v-2.058a2.941 2.941 0 0 0-2.94-2.941h-2.06v-.393a2.941 2.941 0 0 1 2.942-2.94h.392Z\"})}),(0,u.jsx)(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M9.167 5.833v2.06a2.941 2.941 0 0 0 2.94 2.94h2.06v.393a2.941 2.941 0 0 1-2.941 2.94h-.393v-2.058a2.941 2.941 0 0 0-2.94-2.941h-2.06v-.393a2.941 2.941 0 0 1 2.942-2.94h.392Z\",fill:\"currentColor\"}),(0,u.jsx)(\"path\",{d:\"M9.167 5.833h1.25v-1.25h-1.25v1.25Zm5 5h1.25v-1.25h-1.25v1.25Zm-3.334 3.334h-1.25v1.25h1.25v-1.25Zm-5-5h-1.25v1.25h1.25v-1.25Zm2.084-3.334v2.06h2.5v-2.06h-2.5Zm0 2.06a4.191 4.191 0 0 0 4.19 4.19v-2.5a1.691 1.691 0 0 1-1.69-1.69h-2.5Zm4.19 4.19h2.06v-2.5h-2.06v2.5Zm.81-1.25v.393h2.5v-.393h-2.5Zm0 .393c0 .933-.758 1.69-1.691 1.69v2.5a4.191 4.191 0 0 0 4.19-4.19h-2.5Zm-1.691 1.69h-.393v2.5h.393v-2.5Zm.857 1.25v-2.058h-2.5v2.059h2.5Zm0-2.058a4.191 4.191 0 0 0-4.19-4.191v2.5c.933 0 1.69.757 1.69 1.69h2.5Zm-4.19-4.191h-2.06v2.5h2.06v-2.5Zm-.81 1.25v-.393h-2.5v.393h2.5Zm0-.393c0-.934.758-1.69 1.692-1.69v-2.5a4.191 4.191 0 0 0-4.192 4.19h2.5Zm1.692-1.69h.392v-2.5h-.392v2.5Z\",fill:\"currentColor\",mask:\"url(#SendToBackIcon)\"}),(0,u.jsx)(\"path\",{d:\"M12.108 3.125h2.45a2.316 2.316 0 0 1 2.317 2.316v2.451a2.316 2.316 0 0 1-2.316 2.316h-2.451a2.316 2.316 0 0 1-2.316-2.316v-2.45a2.316 2.316 0 0 1 2.316-2.317Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),me=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 3.333h13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M13.542 6.458h-.417c-.92 0-1.667.747-1.667 1.667v7.083c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667V8.125c0-.92-.746-1.667-1.666-1.667ZM6.875 6.458h-.417c-.92 0-1.666.747-1.666 1.667v3.75c0 .92.746 1.667 1.666 1.667h.417c.92 0 1.667-.746 1.667-1.667v-3.75c0-.92-.747-1.667-1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),ge=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 16.667h13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M6.875 3.125h-.417c-.92 0-1.666.746-1.666 1.667v7.083c0 .92.746 1.667 1.666 1.667h.417c.92 0 1.667-.746 1.667-1.667V4.792c0-.92-.747-1.667-1.667-1.667ZM13.542 5.817h-.417c-.92 0-1.667.747-1.667 1.667v4.391c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667V7.484c0-.92-.746-1.667-1.666-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),ve=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 3.333v13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M15.208 4.792H8.125c-.92 0-1.667.746-1.667 1.666v.417c0 .92.747 1.667 1.667 1.667h7.083c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666ZM12.516 11.458H8.125c-.92 0-1.667.746-1.667 1.667v.417c0 .92.747 1.666 1.667 1.666h4.391c.92 0 1.667-.746 1.667-1.666v-.417c0-.92-.746-1.667-1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),be=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M16.667 3.333v13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M11.875 4.792H4.792c-.92 0-1.667.746-1.667 1.666v.417c0 .92.746 1.667 1.667 1.667h7.083c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666ZM11.683 11.458H7.292c-.92 0-1.667.746-1.667 1.667v.417c0 .92.746 1.666 1.667 1.666h4.39c.921 0 1.667-.746 1.667-1.666v-.417c0-.92-.746-1.667-1.666-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),ye=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M16.667 3.333v13.334M3.333 3.333v13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M14.375 10.208v-.416c0-.92-.746-1.667-1.667-1.667H7.292c-.92 0-1.667.746-1.667 1.667v.416c0 .92.746 1.667 1.667 1.667h5.416c.92 0 1.667-.746 1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),xe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M3.333 3.333h13.334M3.333 16.667h13.334\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M10.208 5.625h-.416c-.92 0-1.667.746-1.667 1.667v5.416c0 .92.746 1.667 1.667 1.667h.416c.92 0 1.667-.746 1.667-1.667V7.292c0-.92-.746-1.667-1.667-1.667Z\"})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),we=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M1.667 10h2.916\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M8.333 10h3.334\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M15.417 10h2.916\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M6.875 4.792h-.417c-.92 0-1.666.746-1.666 1.666v7.084c0 .92.746 1.666 1.666 1.666h.417c.92 0 1.667-.746 1.667-1.666V6.458c0-.92-.747-1.666-1.667-1.666ZM13.542 6.458h-.417c-.92 0-1.667.747-1.667 1.667v3.75c0 .92.746 1.667 1.667 1.667h.417c.92 0 1.666-.746 1.666-1.667v-3.75c0-.92-.746-1.667-1.666-1.667Z\"})]}),v),ke=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",children:[(0,u.jsx)(\"path\",{d:\"M10 18.333v-2.916\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M10 11.667V8.333\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M10 4.583V1.667\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),(0,u.jsx)(\"path\",{d:\"M4.792 13.125v.417c0 .92.746 1.666 1.666 1.666h7.084c.92 0 1.666-.746 1.666-1.666v-.417c0-.92-.746-1.667-1.666-1.667H6.458c-.92 0-1.666.746-1.666 1.667ZM6.458 6.458v.417c0 .92.747 1.667 1.667 1.667h3.75c.92 0 1.667-.747 1.667-1.667v-.417c0-.92-.746-1.666-1.667-1.666h-3.75c-.92 0-1.667.746-1.667 1.666Z\"})]}),v),Ee=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"circle\",{cx:\"9\",cy:\"7\",r:\"4\"}),(0,u.jsx)(\"path\",{d:\"M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2\"}),(0,u.jsx)(\"path\",{d:\"M16 3.13a4 4 0 0 1 0 7.75\"}),(0,u.jsx)(\"path\",{d:\"M21 21v-2a4 4 0 0 0 -3 -3.85\"})]}),g),Se=(m(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z\"),m(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z\"),m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M15 5 5 15M5 5l10 10\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v)),je=m(\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\",{width:320,height:512,style:{marginLeft:\"-0.2rem\"},mirror:!0}),_e=(m(\"M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z\",{mirror:!0}),m(\"M11.553 22.894a.998.998 0 00.894 0s3.037-1.516 5.465-4.097C19.616 16.987 21 14.663 21 12V5a1 1 0 00-.649-.936l-8-3a.998.998 0 00-.702 0l-8 3A1 1 0 003 5v7c0 2.663 1.384 4.987 3.088 6.797 2.428 2.581 5.465 4.097 5.465 4.097zm-1.303-8.481l6.644-6.644a.856.856 0 111.212 1.212l-7.25 7.25a.856.856 0 01-1.212 0l-3.75-3.75a.856.856 0 111.212-1.212l3.144 3.144z\",{width:24}),m(\"M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z\",{width:384,height:512}),a().memo((function(e){var t=e.theme;return m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsxs)(\"g\",{fill:h(t),stroke:\"var(--icon-fill-color)\",strokeWidth:\"6\",children:[(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"2.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})}))),Oe=a().memo((function(e){var t=e.theme;return m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M25 26H111V111H25\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsx)(\"path\",{d:\"M100 100H160V160H100\",fill:\"var(--icon-fill-color)\"}),(0,u.jsx)(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:\"var(--icon-fill-color)\",strokeWidth:\"2\"}),(0,u.jsxs)(\"g\",{fill:h(t),stroke:\"var(--icon-fill-color)\",strokeWidth:\"6\",children:[(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"78.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"147.5\",y:\"78.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"105.5\",y:\"2.5\",width:\"30\",height:\"30\"}),(0,u.jsx)(\"rect\",{x:\"2.5\",y:\"102.5\",width:\"30\",height:\"30\"})]})]}),{width:182,height:182,mirror:!0})})),Ce=m((0,u.jsx)(\"g\",{strokeWidth:1.25,children:(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.27 3.27 0 0 1 3.254 3.254v8.242a3.27 3.27 0 0 1-3.254 3.254H5.88a3.27 3.27 0 0 1-3.254-3.254V5.88A3.27 3.27 0 0 1 5.88 2.626l-.001-.001ZM4.518 16.118l7.608-12.83m.198 13.934 5.051-9.897M2.778 9.675l9.348-6.387m-7.608 12.83 12.857-8.793\"})}),v),Ie=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"FillHachureIcon\",style:{maskType:\"alpha\"},maskUnits:\"userSpaceOnUse\",x:2,y:2,width:16,height:16,children:(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z\",fill:\"currentColor\",stroke:\"currentColor\",strokeWidth:\"1.25\"})}),(0,u.jsx)(\"g\",{mask:\"url(#FillHachureIcon)\",children:(0,u.jsx)(\"path\",{d:\"M2.258 15.156 15.156 2.258M7.324 20.222 20.222 7.325m-20.444 5.35L12.675-.222m-8.157 18.34L17.416 5.22\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})})]}),v),Me=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsxs)(\"g\",{clipPath:\"url(#a)\",children:[(0,u.jsx)(\"path\",{d:\"M5.879 2.625h8.242a3.254 3.254 0 0 1 3.254 3.254v8.242a3.254 3.254 0 0 1-3.254 3.254H5.88a3.254 3.254 0 0 1-3.254-3.254V5.88a3.254 3.254 0 0 1 3.254-3.254Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"}),(0,u.jsx)(\"mask\",{id:\"FillCrossHatchIcon\",style:{maskType:\"alpha\"},maskUnits:\"userSpaceOnUse\",x:-1,y:-1,width:22,height:22,children:(0,u.jsx)(\"path\",{d:\"M2.426 15.044 15.044 2.426M7.383 20 20 7.383M0 12.617 12.617 0m-7.98 17.941L17.256 5.324m-2.211 12.25L2.426 4.956M20 12.617 7.383 0m5.234 20L0 7.383m17.941 7.98L5.324 2.745\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"g\",{mask:\"url(#FillCrossHatchIcon)\",children:(0,u.jsx)(\"path\",{d:\"M14.121 2H5.88A3.879 3.879 0 0 0 2 5.879v8.242A3.879 3.879 0 0 0 5.879 18h8.242A3.879 3.879 0 0 0 18 14.121V5.88A3.879 3.879 0 0 0 14.121 2Z\",fill:\"currentColor\"})})]}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Te=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M4.91 2.625h10.18a2.284 2.284 0 0 1 2.285 2.284v10.182a2.284 2.284 0 0 1-2.284 2.284H4.909a2.284 2.284 0 0 1-2.284-2.284V4.909a2.284 2.284 0 0 1 2.284-2.284Z\",stroke:\"currentColor\",strokeWidth:\"1.25\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),p(p({},v),{},{fill:\"currentColor\"})),Pe=m((0,u.jsx)(u.Fragment,{children:(0,u.jsx)(\"path\",{d:\"M4.167 10h11.666\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),v),De=m((0,u.jsx)(\"path\",{d:\"M5 10h10\",stroke:\"currentColor\",strokeWidth:\"2.5\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),v),Ae=m((0,u.jsx)(\"path\",{d:\"M5 10h10\",stroke:\"currentColor\",strokeWidth:\"3.75\",strokeLinecap:\"round\",strokeLinejoin:\"round\"}),v),Le=m((0,u.jsxs)(\"g\",{strokeWidth:\"2\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M5 12h2\"}),(0,u.jsx)(\"path\",{d:\"M17 12h2\"}),(0,u.jsx)(\"path\",{d:\"M11 12h2\"})]}),g),Ze=m((0,u.jsxs)(\"g\",{strokeWidth:\"2\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M4 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M8 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M12 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M16 12v.01\"}),(0,u.jsx)(\"path\",{d:\"M20 12v.01\"})]}),g),ze=m((0,u.jsx)(\"path\",{d:\"M2.5 12.038c1.655-.885 5.9-3.292 8.568-4.354 2.668-1.063.101 2.821 1.32 3.104 1.218.283 5.112-1.814 5.112-1.814\",strokeWidth:\"1.25\"}),v),Re=m((0,u.jsx)(\"path\",{d:\"M2.5 12.563c1.655-.886 5.9-3.293 8.568-4.355 2.668-1.062.101 2.822 1.32 3.105 1.218.283 5.112-1.814 5.112-1.814m-13.469 2.23c2.963-1.586 6.13-5.62 7.468-4.998 1.338.623-1.153 4.11-.132 5.595 1.02 1.487 6.133-1.43 6.133-1.43\",strokeWidth:\"1.25\"}),v),Ne=m((0,u.jsx)(\"path\",{d:\"M2.5 11.936c1.737-.879 8.627-5.346 10.42-5.268 1.795.078-.418 5.138.345 5.736.763.598 3.53-1.789 4.235-2.147M2.929 9.788c1.164-.519 5.47-3.28 6.987-3.114 1.519.165 1 3.827 2.121 4.109 1.122.281 3.839-2.016 4.606-2.42\",strokeWidth:\"1.25\"}),v),Be=m((0,u.jsxs)(\"svg\",{strokeWidth:\"1.5\",children:[(0,u.jsx)(\"path\",{d:\"M3.33334 9.99998V6.66665C3.33334 6.04326 3.33403 4.9332 3.33539 3.33646C4.95233 3.33436 6.06276 3.33331 6.66668 3.33331H10\"}),(0,u.jsx)(\"path\",{d:\"M13.3333 3.33331V3.34331\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 3.33331V3.34331\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 6.66669V6.67669\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 10V10.01\"}),(0,u.jsx)(\"path\",{d:\"M3.33334 13.3333V13.3433\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 13.3333V13.3433\"}),(0,u.jsx)(\"path\",{d:\"M3.33334 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M6.66666 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M10 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M13.3333 16.6667V16.6767\"}),(0,u.jsx)(\"path\",{d:\"M16.6667 16.6667V16.6767\"})]}),v),He=m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",stroke:\"currentColor\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M4 12v-4a4 4 0 0 1 4 -4h4\"}),(0,u.jsx)(\"line\",{x1:\"16\",y1:\"4\",x2:\"16\",y2:\"4.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"4\",x2:\"20\",y2:\"4.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"8\",x2:\"20\",y2:\"8.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"12\",x2:\"20\",y2:\"12.01\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"16\",x2:\"4\",y2:\"16.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"16\",x2:\"20\",y2:\"16.01\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"20\",x2:\"4\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"20\",x2:\"8\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"12\",y1:\"20\",x2:\"12\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"16\",y1:\"20\",x2:\"16\",y2:\"20.01\"}),(0,u.jsx)(\"line\",{x1:\"20\",y1:\"20\",x2:\"20\",y2:\"20.01\"})]}),g),We=m((0,u.jsx)(\"path\",{d:\"M6 10H34\",stroke:\"currentColor\",strokeWidth:2,fill:\"none\"}),{width:40,height:20}),Fe=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsxs)(\"g\",{transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",stroke:\"currentColor\",strokeWidth:2,fill:\"none\",children:[(0,u.jsx)(\"path\",{d:\"M34 10H6M34 10L27 5M34 10L27 15\"}),(0,u.jsx)(\"path\",{d:\"M27.5 5L34.5 10L27.5 15\"})]}),{width:40,height:20})})),Ue=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"currentColor\",transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",children:[(0,u.jsx)(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),(0,u.jsx)(\"circle\",{r:\"4\",transform:\"matrix(-1 0 0 1 30 10)\"})]}),{width:40,height:20})})),Ke=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsx)(\"g\",{transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",children:(0,u.jsx)(\"path\",{d:\"M34 10H5.99996M34 10L34 5M34 10L34 15\",stroke:\"currentColor\",strokeWidth:2,fill:\"none\"})}),{width:40,height:20})})),Ye=a().memo((function(e){var t=e.flip,n=void 0!==t&&t;return m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"currentColor\",transform:n?\"translate(40, 0) scale(-1, 1)\":\"\",children:[(0,u.jsx)(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),(0,u.jsx)(\"path\",{d:\"M27.5 5.5L34.5 10L27.5 14.5L27.5 5.5\"})]}),{width:40,height:20})})),Ge=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M14.167 6.667a3.333 3.333 0 0 0-3.334-3.334H9.167a3.333 3.333 0 0 0 0 6.667h1.666a3.333 3.333 0 0 1 0 6.667H9.167a3.333 3.333 0 0 1-3.334-3.334\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Ve=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M5 16.667V3.333L10 15l5-11.667v13.334\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Xe=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",children:(0,u.jsx)(\"path\",{d:\"M5.833 3.333v13.334h8.334\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),qe=m((0,u.jsx)(u.Fragment,{children:(0,u.jsx)(\"path\",{d:\"m1.667 3.333 6.666 13.334M8.333 3.333 1.667 16.667M11.667 3.333v13.334h6.666\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\"})}),v),Je=m((0,u.jsx)(u.Fragment,{children:(0,u.jsx)(\"g\",{stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M5.833 16.667v-10a3.333 3.333 0 0 1 3.334-3.334h1.666a3.333 3.333 0 0 1 3.334 3.334v10M5.833 10.833h8.334\"})})}),v),$e=m((0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(\"g\",{clipPath:\"url(#a)\",stroke:\"currentColor\",strokeWidth:\"1.25\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:(0,u.jsx)(\"path\",{d:\"M5.833 6.667 2.5 10l3.333 3.333M14.167 6.667 17.5 10l-3.333 3.333M11.667 3.333 8.333 16.667\"})}),(0,u.jsx)(\"defs\",{children:(0,u.jsx)(\"clipPath\",{id:\"a\",children:(0,u.jsx)(\"path\",{fill:\"#fff\",d:\"M0 0h20v20H0z\"})})})]}),v),Qe=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"8\",x2:\"20\",y2:\"8\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"12\",x2:\"12\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"16\",x2:\"16\",y2:\"16\"})]}),g),et=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"8\",x2:\"20\",y2:\"8\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"12\",x2:\"16\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"6\",y1:\"16\",x2:\"18\",y2:\"16\"})]}),g),tt=m((0,u.jsxs)(\"g\",{stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"8\",x2:\"20\",y2:\"8\"}),(0,u.jsx)(\"line\",{x1:\"10\",y1:\"12\",x2:\"20\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"8\",y1:\"16\",x2:\"20\",y2:\"16\"})]}),g),nt=a().memo((function(e){e.theme;return m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"4\",x2:\"20\",y2:\"4\"}),(0,u.jsx)(\"rect\",{x:\"9\",y:\"8\",width:\"6\",height:\"12\",rx:\"2\"})]}),g)})),rt=a().memo((function(e){e.theme;return m((0,u.jsxs)(\"g\",{strokeWidth:\"2\",stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"20\",x2:\"20\",y2:\"20\"}),(0,u.jsx)(\"rect\",{x:\"9\",y:\"4\",width:\"6\",height:\"12\",rx:\"2\"})]}),g)})),ot=a().memo((function(e){e.theme;return m((0,u.jsxs)(\"g\",{strokeWidth:\"1.5\",stroke:\"currentColor\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"line\",{x1:\"4\",y1:\"12\",x2:\"9\",y2:\"12\"}),(0,u.jsx)(\"line\",{x1:\"15\",y1:\"12\",x2:\"20\",y2:\"12\"}),(0,u.jsx)(\"rect\",{x:\"9\",y:\"6\",width:\"6\",height:\"12\",rx:\"2\"})]}),g)})),it=m((0,u.jsx)(\"path\",{d:\"M537.6 226.6c4.1-10.7 6.4-22.4 6.4-34.6 0-53-43-96-96-96-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32c-88.4 0-160 71.6-160 160 0 2.7.1 5.4.2 8.1C40.2 219.8 0 273.2 0 336c0 79.5 64.5 144 144 144h368c70.7 0 128-57.3 128-128 0-61.9-44-113.6-102.4-125.4zM393.4 288H328v112c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V288h-65.4c-14.3 0-21.4-17.2-11.3-27.3l105.4-105.4c6.2-6.2 16.4-6.2 22.6 0l105.4 105.4c10.1 10.1 2.9 27.3-11.3 27.3z\",fill:\"currentColor\"}),{width:640,height:512}),at=(m((0,u.jsx)(\"path\",{d:\"M480 416C497.7 416 512 430.3 512 448C512 465.7 497.7 480 480 480H150.6C133.7 480 117.4 473.3 105.4 461.3L25.37 381.3C.3786 356.3 .3786 315.7 25.37 290.7L258.7 57.37C283.7 32.38 324.3 32.38 349.3 57.37L486.6 194.7C511.6 219.7 511.6 260.3 486.6 285.3L355.9 416H480zM265.4 416L332.7 348.7L195.3 211.3L70.63 336L150.6 416L265.4 416z\"})),m((0,u.jsxs)(\"g\",{strokeWidth:1.25,children:[(0,u.jsx)(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),(0,u.jsx)(\"path\",{d:\"M8 13v-7.5a1.5 1.5 0 0 1 3 0v6.5\"}),(0,u.jsx)(\"path\",{d:\"M11 5.5v-2a1.5 1.5 0 1 1 3 0v8.5\"}),(0,u.jsx)(\"path\",{d:\"M14 5.5a1.5 1.5 0 0 1 3 0v6.5\"}),(0,u.jsx)(\"path\",{d:\"M17 7.5a1.5 1.5 0 0 1 3 0v8.5a6 6 0 0 1 -6 6h-2h.208a6 6 0 0 1 -5.012 -2.7a69.74 69.74 0 0 1 -.196 -.3c-.312 -.479 -1.407 -2.388 -3.286 -5.728a1.5 1.5 0 0 1 .536 -2.022a1.867 1.867 0 0 1 2.28 .28l1.47 1.47\"})]}),g))},4709:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return ee}});var r={};n.r(r),n.d(r,{ChangeCanvasBackground:function(){return z},ClearCanvas:function(){return L},Export:function(){return R},Help:function(){return A},LiveCollaborationTrigger:function(){return B},LoadScene:function(){return T},SaveAsImage:function(){return D},SaveToActiveFile:function(){return P},Socials:function(){return N},ToggleTheme:function(){return Z}});var o=n(2134),i=n(9127),a=n(785),l=n(8211),s=n(3646),c=n(2739),u=n(4215),d=n(6710),f=n(487),p=n.n(f),h=n(631),m=n.n(h),g=n(2052),v=n.n(g),b=n(4010),y=n.n(b),x=n(1469),w=n.n(x),k=n(9329),E=n.n(k),S=n(4343),j={};j.styleTagTransform=E(),j.setAttributes=y(),j.insert=v().bind(null,\"head\"),j.domAPI=m(),j.insertStyleElement=w();p()(S.Z,j),S.Z&&S.Z.locals&&S.Z.locals;var _=n(45),O=n(4739),C=n(6798),I=n(9487),M=n(4512),T=function(){var e=(0,l.QT)().t,t=(0,o.eh)();return t.isActionEnabled(d._d)?(0,M.jsx)(c.Z,{icon:s.Tl,onSelect:function(){return t.executeAction(d._d)},\"data-testid\":\"load-button\",shortcut:(0,a.C)(\"loadScene\"),\"aria-label\":e(\"buttons.load\"),children:e(\"buttons.load\")}):null};T.displayName=\"LoadScene\";var P=function(){var e=(0,l.QT)().t,t=(0,o.eh)();return t.isActionEnabled(d.ns)?(0,M.jsx)(c.Z,{shortcut:(0,a.C)(\"saveScene\"),\"data-testid\":\"save-button\",onSelect:function(){return t.executeAction(d.ns)},icon:s.a1,\"aria-label\":\"\".concat(e(\"buttons.save\")),children:\"\".concat(e(\"buttons.save\"))}):null};P.displayName=\"SaveToActiveFile\";var D=function(){var e=(0,o.n9)(),t=(0,l.QT)().t;return(0,M.jsx)(c.Z,{icon:s.J8,\"data-testid\":\"image-export-button\",onSelect:function(){return e({openDialog:\"imageExport\"})},shortcut:(0,a.C)(\"imageExport\"),\"aria-label\":t(\"buttons.exportImage\"),children:t(\"buttons.exportImage\")})};D.displayName=\"SaveAsImage\";var A=function(){var e=(0,l.QT)().t,t=(0,o.eh)();return(0,M.jsx)(c.Z,{\"data-testid\":\"help-menu-item\",icon:s.by,onSelect:function(){return t.executeAction(d.jY)},shortcut:\"?\",\"aria-label\":e(\"helpDialog.title\"),children:e(\"helpDialog.title\")})};A.displayName=\"Help\";var L=function(){var e=(0,l.QT)().t,t=(0,O.b9)(C.w,I.yE);return(0,o.eh)().isActionEnabled(d.mo)?(0,M.jsx)(c.Z,{icon:s.XH,onSelect:function(){return t(\"clearCanvas\")},\"data-testid\":\"clear-canvas-button\",\"aria-label\":e(\"buttons.clearReset\"),children:e(\"buttons.clearReset\")}):null};L.displayName=\"ClearCanvas\";var Z=function(){var e=(0,l.QT)().t,t=(0,o.gF)(),n=(0,o.eh)();return n.isActionEnabled(d.Zp)?(0,M.jsx)(c.Z,{onSelect:function(e){return e.preventDefault(),n.executeAction(d.Zp)},icon:\"dark\"===t.theme?s.NW:s.kL,\"data-testid\":\"toggle-dark-mode\",shortcut:(0,a.C)(\"toggleTheme\"),\"aria-label\":\"dark\"===t.theme?e(\"buttons.lightMode\"):e(\"buttons.darkMode\"),children:\"dark\"===t.theme?e(\"buttons.lightMode\"):e(\"buttons.darkMode\")}):null};Z.displayName=\"ToggleTheme\";var z=function(){var e=(0,l.QT)().t,t=(0,o.gF)(),n=(0,o.eh)();return t.viewModeEnabled?null:(0,M.jsxs)(\"div\",{style:{marginTop:\"0.5rem\"},children:[(0,M.jsx)(\"div\",{style:{fontSize:\".75rem\",marginBottom:\".5rem\"},children:e(\"labels.canvasBackground\")}),(0,M.jsx)(\"div\",{style:{padding:\"0 0.625rem\"},children:n.renderAction(\"changeViewBackgroundColor\")})]})};z.displayName=\"ChangeCanvasBackground\";var R=function(){var e=(0,l.QT)().t,t=(0,o.n9)();return(0,M.jsx)(c.Z,{icon:s.Hy,onSelect:function(){t({openDialog:\"jsonExport\"})},\"data-testid\":\"json-export-button\",\"aria-label\":e(\"buttons.export\"),children:e(\"buttons.export\")})};R.displayName=\"Export\";var N=function(){return(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(u.Z,{icon:s.ET,href:\"https:\/\/github.com\/excalidraw\/excalidraw\",\"aria-label\":\"GitHub\",children:\"GitHub\"}),(0,M.jsx)(u.Z,{icon:s.D7,href:\"https:\/\/discord.gg\/UexuTaE\",\"aria-label\":\"Discord\",children:\"Discord\"}),(0,M.jsx)(u.Z,{icon:s.Zm,href:\"https:\/\/twitter.com\/excalidraw\",\"aria-label\":\"Twitter\",children:\"Twitter\"})]})};N.displayName=\"Socials\";var B=function(e){var t=e.onSelect,n=e.isCollaborating,r=(0,l.QT)().t;return(0,M.jsx)(c.Z,{\"data-testid\":\"collab-button\",icon:s.jn,className:(0,_.Z)({\"active-collab\":n}),onSelect:t,children:r(\"labels.liveCollaboration\")})};B.displayName=\"LiveCollaborationTrigger\";var H=n(6773),W=n(7169),F=n(2577),U=n(9787),K=n(8888);function Y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var G,V,X,q,J,$=n(6340),Q=Object.assign((G=\"MainMenu\",V=function(e){var t=e.children,n=e.onSelect,r=(0,K.R6)().mainMenuTunnel,a=(0,o.Fy)(),c=(0,o.gF)(),u=(0,o.n9)(),d=a.isMobile?void 0:function(){return u({openMenu:null})};return(0,M.jsx)(r.In,{children:(0,M.jsxs)(i.Z,{open:\"canvas\"===c.openMenu,children:[(0,M.jsx)(i.Z.Trigger,{onToggle:function(){u({openMenu:\"canvas\"===c.openMenu?null:\"canvas\"})},children:s.RY}),(0,M.jsxs)(i.Z.Content,{onClickOutside:d,onSelect:(0,$.Mj)(n,(function(){u({openMenu:null})})),children:[t,a.isMobile&&c.collaborators.size>0&&(0,M.jsxs)(\"fieldset\",{className:\"UserList-Wrapper\",children:[(0,M.jsx)(\"legend\",{children:(0,l.t)(\"labels.collaborators\")}),(0,M.jsx)(H.Z,{mobile:!0,collaborators:c.collaborators})]})]})]})})},X=(0,O.cn)(0),q=!1,J=function(e){var t=(0,K.R6)().jotaiScope,n=(0,O.KO)(X,t),r=(0,F.Z)(n,2),o=r[0],i=r[1];return(0,U.useLayoutEffect)((function(){return i((function(e){return e+1})),function(){i((function(e){return e-1}))}}),[i]),e.__fallback||(q=!0),!o&&e.__fallback&&q||o>1&&e.__fallback?null:(0,M.jsx)(V,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Y(Object(n),!0).forEach((function(t){(0,W.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e))},J.displayName=G,J),{Trigger:i.Z.Trigger,Item:i.Z.Item,ItemLink:i.Z.ItemLink,ItemCustom:i.Z.ItemCustom,Group:i.Z.Group,Separator:i.Z.Separator,DefaultItems:r}),ee=Q},2335:function(e,t,n){\"use strict\";n.d(t,{jo:function(){return me},iC:function(){return _},gK:function(){return ye},$C:function(){return Z},oc:function(){return D},_9:function(){return Se},HN:function(){return Oe},qy:function(){return pe},rk:function(){return H},n5:function(){return B},h6:function(){return he},Rx:function(){return Ee},Hg:function(){return W},cW:function(){return oe},hs:function(){return F},f:function(){return O},xY:function(){return ke},Iw:function(){return I},$e:function(){return M},Vi:function(){return L},Ks:function(){return v},r8:function(){return Y},ZB:function(){return fe},pb:function(){return G},ut:function(){return z},k:function(){return U},sA:function(){return ee},LL:function(){return V},EE:function(){return ue},qx:function(){return C},$n:function(){return ge},zK:function(){return de},LO:function(){return K},Zj:function(){return Q},Yx:function(){return se},sS:function(){return le},kV:function(){return ae},sk:function(){return ce},eF:function(){return ie},Oh:function(){return A},WR:function(){return _e},a6:function(){return je},HM:function(){return J},ay:function(){return P},hR:function(){return ve},Gj:function(){return X},I8:function(){return we},wZ:function(){return T},C6:function(){return R},ZF:function(){return te},nM:function(){return q},ah:function(){return re},UO:function(){return ne},Kr:function(){return be},oX:function(){return xe},_D:function(){return N},V4:function(){return $},Dt:function(){return k},jP:function(){return j},Um:function(){return x},vU:function(){return E},G6:function(){return S},ED:function(){return w}});var r=n(487),o=n.n(r),i=n(631),a=n.n(i),l=n(2052),s=n.n(l),c=n(4010),u=n.n(c),d=n(1469),f=n.n(d),p=n(9329),h=n.n(p),m=n(6464),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=s().bind(null,\"head\"),g.domAPI=a(),g.insertStyleElement=f();o()(m.Z,g);var v,b=m.Z&&m.Z.locals?m.Z.locals:void 0,y=n(5284),x=\/Mac|iPod|iPhone|iPad\/.test(navigator.platform),w=\/^Win\/.test(navigator.platform),k=\/\\b(android)\\b\/i.test(navigator.userAgent),E=\"netscape\"in window&&navigator.userAgent.indexOf(\"rv:\")>1&&navigator.userAgent.indexOf(\"Gecko\")>1,S=!(-1!==navigator.userAgent.indexOf(\"Chrome\"))&&-1!==navigator.userAgent.indexOf(\"Safari\"),j=function(){var e,t;return\"isBrave\"===(null===(e=navigator.brave)||void 0===e||null===(t=e.isBrave)||void 0===t?void 0:t.name)},_=\"Excalidraw\",O=10,C=8,I=5,M=1,T=30,P=Math.PI\/12,D={TEXT:\"text\",CROSSHAIR:\"crosshair\",GRABBING:\"grabbing\",GRAB:\"grab\",POINTER:\"pointer\",MOVE:\"move\",AUTO:\"\"},A={MAIN:0,WHEEL:1,SECONDARY:2,TOUCH:-1};!function(e){e.COPY=\"copy\",e.PASTE=\"paste\",e.CUT=\"cut\",e.KEYDOWN=\"keydown\",e.KEYUP=\"keyup\",e.MOUSE_MOVE=\"mousemove\",e.RESIZE=\"resize\",e.UNLOAD=\"unload\",e.FOCUS=\"focus\",e.BLUR=\"blur\",e.DRAG_OVER=\"dragover\",e.DROP=\"drop\",e.GESTURE_END=\"gestureend\",e.BEFORE_UNLOAD=\"beforeunload\",e.GESTURE_START=\"gesturestart\",e.GESTURE_CHANGE=\"gesturechange\",e.POINTER_MOVE=\"pointermove\",e.POINTER_UP=\"pointerup\",e.STATE_CHANGE=\"statechange\",e.WHEEL=\"wheel\",e.TOUCH_START=\"touchstart\",e.TOUCH_END=\"touchend\",e.HASHCHANGE=\"hashchange\",e.VISIBILITY_CHANGE=\"visibilitychange\",e.SCROLL=\"scroll\",e.EXCALIDRAW_LINK=\"excalidraw-link\",e.MENU_ITEM_SELECT=\"menu.itemSelect\"}(v||(v={}));var L={TEST:\"test\",DEVELOPMENT:\"development\"},Z={SHAPE_ACTIONS_MENU:\"App-menu__left\"},z={Virgil:1,Helvetica:2,Cascadia:3},R={LIGHT:\"light\",DARK:\"dark\"},N=\"Segoe UI Emoji\",B=20,H=z.Virgil,W=\"left\",F=\"top\",U=20,K={excalidraw:\"application\/vnd.excalidraw+json\",excalidrawlib:\"application\/vnd.excalidrawlib+json\",json:\"application\/json\",svg:\"image\/svg+xml\",\"excalidraw.svg\":\"image\/svg+xml\",png:\"image\/png\",\"excalidraw.png\":\"image\/png\",jpg:\"image\/jpeg\",gif:\"image\/gif\",webp:\"image\/webp\",bmp:\"image\/bmp\",ico:\"image\/x-icon\",binary:\"application\/octet-stream\"},Y={excalidraw:\"excalidraw\",excalidrawClipboard:\"excalidraw\/clipboard\",excalidrawLibrary:\"excalidrawlib\"},G=window.EXCALIDRAW_EXPORT_SOURCE||window.location.origin,V=500,X=300,q=500,J=100,$=.1,Q=.1,ee=300,te=b.themeFilter,ne={addLibrary:\"addLibrary\"},re={addLibrary:\"addLibrary\"},oe={canvasActions:{changeViewBackgroundColor:!0,clearCanvas:!0,export:{saveFileToDisk:!0},loadScene:!0,saveToActiveFile:!0,toggleTheme:null,saveAsImage:!0}},ie=640,ae=730,le=1e3,se=500,ce=1229,ue=parseInt(b.rightSidebarWidth),de=2,fe=[1,2,3],pe=10,he=1440,me=[K.png,K.jpg,K.svg,K.gif,K.webp,K.bmp,K.ico],ge=2097152,ve=\"http:\/\/www.w3.org\/2000\/svg\",be={excalidraw:2,excalidrawLibrary:2},ye=5,xe={TOP:\"top\",MIDDLE:\"middle\",BOTTOM:\"bottom\"},we={LEFT:\"left\",CENTER:\"center\",RIGHT:\"right\"},ke=20,Ee=.25,Se=32,je={LEGACY:1,PROPORTIONAL_RADIUS:2,ADAPTIVE_RADIUS:3},_e=\"__precedingElement__\",Oe={strokeColor:y.black,backgroundColor:\"transparent\",fillStyle:\"hachure\",strokeWidth:1,strokeStyle:\"solid\",roughness:1,opacity:100,locked:!1}},434:function(e,t,n){\"use strict\";n.d(t,{DQ:function(){return S},KG:function(){return A},Pn:function(){return Z},Qk:function(){return E},Sf:function(){return D},Tu:function(){return L},Wr:function(){return _},ZY:function(){return O},_c:function(){return T},bv:function(){return z},cT:function(){return C},g8:function(){return j},gY:function(){return H},lV:function(){return M},tW:function(){return P},vZ:function(){return W},wf:function(){return I}});var r=n(1930),o=n(2577),i=n(7169),a=n(8950),l=n(2975),s=n.n(l),c=n(5605),u=n(8897),d=n(2335),f=n(1047),p=n(6797),h=n(8211),m=n(75),g=n(6340),v=n(1393),b=n(5523),y=n(679);function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var k=function(){var e=(0,a.Z)(s().mark((function e(t){var r;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.type!==d.LO.png){e.next=18;break}return e.prev=1,e.next=4,Promise.resolve().then(n.bind(n,673));case 4:return e.next=6,e.sent.decodePngMetadata(t);case 6:return e.abrupt(\"return\",e.sent);case 9:if(e.prev=9,e.t0=e.catch(1),\"INVALID\"!==e.t0.message){e.next=15;break}throw new DOMException((0,h.t)(\"alerts.imageDoesNotContainScene\"),\"EncodingError\");case 15:throw new DOMException((0,h.t)(\"alerts.cannotRestoreFromImage\"),\"EncodingError\");case 16:e.next=43;break;case 18:if(!(\"text\"in Blob)){e.next=24;break}return e.next=21,t.text();case 21:r=e.sent,e.next=27;break;case 24:return e.next=26,new Promise((function(e){var n=new FileReader;n.readAsText(t,\"utf8\"),n.onloadend=function(){n.readyState===FileReader.DONE&&e(n.result)}}));case 26:r=e.sent;case 27:if(t.type!==d.LO.svg){e.next=43;break}return e.prev=28,e.next=31,Promise.resolve().then(n.bind(n,673));case 31:return e.next=33,e.sent.decodeSvgMetadata({svg:r});case 33:return e.abrupt(\"return\",e.sent);case 36:if(e.prev=36,e.t1=e.catch(28),\"INVALID\"!==e.t1.message){e.next=42;break}throw new DOMException((0,h.t)(\"alerts.imageDoesNotContainScene\"),\"EncodingError\");case 42:throw new DOMException((0,h.t)(\"alerts.cannotRestoreFromImage\"),\"EncodingError\");case 43:return e.abrupt(\"return\",r);case 44:case\"end\":return e.stop()}}),e,null,[[1,9],[28,36]])})));return function(t){return e.apply(this,arguments)}}(),E=function(e){var t;return e&&(null===(t=e.name.match(\/\\.(json|excalidraw|png|svg)$\/))||void 0===t?void 0:t[1])||null},S=function(e){return\"png\"===e||\"svg\"===e},j=function(e){var t=E(e);return\"png\"===t||\"svg\"===t},_=function(e){var t=(e||{}).type;return!!t&&d.jo.includes(t)},O=function(){var e=(0,a.Z)(s().mark((function e(t,n,r,o){var i,a;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,k(t);case 2:if(i=e.sent,e.prev=3,a=JSON.parse(i),!(0,b.dS)(a)){e.next=9;break}return e.abrupt(\"return\",{type:d.LO.excalidraw,data:(0,y.nu)({elements:(0,f._M)(a.elements||[]),appState:w(w({theme:null==n?void 0:n.theme,fileHandle:o||t.handle||null},(0,u.s)(a.appState||{})),n?(0,m.W)(a.elements||[],n,null):{}),files:a.files},n,r,{repairBindings:!0,refreshDimensions:!0})});case 9:if(!(0,b.HT)(a)){e.next=11;break}return e.abrupt(\"return\",{type:d.LO.excalidrawlib,data:a});case 11:throw new Error((0,h.t)(\"alerts.couldNotLoadInvalidFile\"));case 14:throw e.prev=14,e.t0=e.catch(3),console.error(e.t0.message),new Error((0,h.t)(\"alerts.couldNotLoadInvalidFile\"));case 18:case\"end\":return e.stop()}}),e,null,[[3,14]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),C=function(){var e=(0,a.Z)(s().mark((function e(t,n,r,o){var i;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,O(t,n,r,o);case 2:if((i=e.sent).type===d.LO.excalidraw){e.next=5;break}throw new Error((0,h.t)(\"alerts.couldNotLoadInvalidFile\"));case 5:return e.abrupt(\"return\",i.data);case 6:case\"end\":return e.stop()}}),e)})));return function(t,n,r,o){return e.apply(this,arguments)}}(),I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"unpublished\",n=JSON.parse(e);if(!(0,b.HT)(n))throw new Error(\"Invalid library\");var r=n.libraryItems||n.library;return(0,y.wJ)(r,t)},M=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r=arguments;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.length>1&&void 0!==r[1]?r[1]:\"unpublished\",e.t0=I,e.next=4,k(t);case 4:return e.t1=e.sent,e.t2=n,e.abrupt(\"return\",(0,e.t0)(e.t1,e.t2));case 7:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),T=function(){var e=(0,a.Z)(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,n){try{t.toBlob((function(t){if(!t)return n(new p.l((0,h.t)(\"canvasError.canvasTooBig\"),\"CANVAS_POSSIBLY_TOO_BIG\"));e(t)}))}catch(e){n(e)}})));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),P=function(){var e=(0,a.Z)(s().mark((function e(t){var n;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.t0=window.crypto.subtle,e.next=4,W(t);case 4:return e.t1=e.sent,e.next=7,e.t0.digest.call(e.t0,\"SHA-1\",e.t1);case 7:return n=e.sent,e.abrupt(\"return\",(0,g.G3)(new Uint8Array(n)));case 11:return e.prev=11,e.t2=e.catch(0),console.error(e.t2),e.abrupt(\"return\",(0,c.x0)(40));case 15:case\"end\":return e.stop()}}),e,null,[[0,11]])})));return function(t){return e.apply(this,arguments)}}(),D=function(){var e=(0,a.Z)(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",new Promise((function(e,n){var r=new FileReader;r.onload=function(){var t=r.result;e(t)},r.onerror=function(e){return n(e)},r.readAsDataURL(t)})));case 1:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),A=function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\",n=e.indexOf(\",\"),r=atob(e.slice(n+1)),o=e.slice(0,n).split(\":\")[1].split(\";\")[0],i=new ArrayBuffer(r.length),a=new Uint8Array(i),l=0;l<r.length;l++)a[l]=r.charCodeAt(l);return new File([i],t,{type:o})},L=function(){var e=(0,a.Z)(s().mark((function e(t,r){var i,a,l,c,u,f;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.type!==d.LO.svg){e.next=2;break}return e.abrupt(\"return\",t);case 2:return e.next=4,Promise.all([n.e(4736).then(n.t.bind(n,4881,23)).then((function(e){return e.default})),n.e(4736).then(n.bind(n,100)).then((function(e){return e.default}))]);case 4:if(i=e.sent,a=(0,o.Z)(i,2),l=a[0],c=a[1],u=c({pica:l({features:[\"js\",\"wasm\"]})}),r.outputType&&(f=r.outputType,u._create_blob=function(e){return this.pica.toBlob(e.out_canvas,f,.8).then((function(t){return e.out_blob=t,e}))}),_(t)){e.next=12;break}throw new Error((0,h.t)(\"errors.unsupportedFileType\"));case 12:return e.t0=File,e.next=15,u.toBlob(t,{max:r.maxWidthOrHeight});case 15:return e.t1=e.sent,e.t2=[e.t1],e.t3=t.name,e.t4={type:r.outputType||t.type},e.abrupt(\"return\",new e.t0(e.t2,e.t3,e.t4));case 20:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\";return new File([(new TextEncoder).encode(e)],t,{type:d.LO.svg})},z=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.dataTransfer.files.item(0),e.next=3,R(t);case 3:if(r=e.sent,!n){e.next=10;break}return e.next=7,H(n);case 7:e.t0=e.sent,e.next=11;break;case 10:e.t0=null;case 11:return e.t1=e.t0,e.t2=r,e.abrupt(\"return\",{file:e.t1,fileHandle:e.t2});case 14:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),R=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!v.kr){e.next=16;break}return e.prev=1,n=t.dataTransfer.items[0],e.next=5,n.getAsFileSystemHandle();case 5:if(e.t0=e.sent,e.t0){e.next=8;break}e.t0=null;case 8:return r=e.t0,e.abrupt(\"return\",r);case 12:return e.prev=12,e.t1=e.catch(1),console.warn(e.t1.name,e.t1.message),e.abrupt(\"return\",null);case 16:return e.abrupt(\"return\",null);case 17:case\"end\":return e.stop()}}),e,null,[[1,12]])})));return function(t){return e.apply(this,arguments)}}(),N=function(e){var t=null,n=\"\".concat((0,r.Z)(new Uint8Array(e).slice(0,8)).join(\" \"),\" \"),o=\"255 216 255 \",i=\"71 73 70 56 57 97 \";return n===\"137 80 78 71 13 10 26 10 \"?t=d.LO.png:n.startsWith(o)?t=d.LO.jpg:n.startsWith(i)&&(t=d.LO.gif),t},B=function(e,t,n){return new File([e],n||\"\",{type:t})},H=function(){var e=(0,a.Z)(s().mark((function e(t){var n,r,o,i,a,l,c,u;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.type){e.next=28;break}if(null===(n=t)||void 0===n||null===(r=n.name)||void 0===r||!r.endsWith(\".excalidrawlib\")){e.next=11;break}return e.t0=B,e.next=5,W(t);case 5:e.t1=e.sent,e.t2=d.LO.excalidrawlib,e.t3=t.name,t=(0,e.t0)(e.t1,e.t2,e.t3),e.next=26;break;case 11:if(null===(o=t)||void 0===o||null===(i=o.name)||void 0===i||!i.endsWith(\".excalidraw\")){e.next=21;break}return e.t4=B,e.next=15,W(t);case 15:e.t5=e.sent,e.t6=d.LO.excalidraw,e.t7=t.name,t=(0,e.t4)(e.t5,e.t6,e.t7),e.next=26;break;case 21:return e.next=23,W(t);case 23:a=e.sent,(l=N(a))&&(t=B(a,l,t.name));case 26:e.next=34;break;case 28:if(!_(t)){e.next=34;break}return e.next=31,W(t);case 31:c=e.sent,(u=N(c))&&u!==t.type&&(t=B(c,u,t.name));case 34:return e.abrupt(\"return\",t);case 35:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),W=function(e){return\"arrayBuffer\"in e?e.arrayBuffer():new Promise((function(t,n){var r=new FileReader;r.onload=function(e){var r;if(null===(r=e.target)||void 0===r||!r.result)return n(new Error(\"Couldn't convert blob to ArrayBuffer\"));t(e.target.result)},r.readAsArrayBuffer(e)}))}},1393:function(e,t,n){\"use strict\";n.d(t,{I$:function(){return h},NL:function(){return m},kr:function(){return a}});var r=n(1930),o=n(8950),i=n(2975),a=function(){if(\"undefined\"==typeof self)return!1;if(\"top\"in self&&self!==top)try{top}catch(e){return!1}else if(\"showOpenFilePicker\"in self)return\"showOpenFilePicker\";return!1}(),l=a?n.e(4736).then(n.bind(n,2254)):n.e(4736).then(n.bind(n,3499));function s(){return s=(0,o.Z)(i.mark((function e(){var t,n=arguments;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,l;case 2:return e.abrupt(\"return\",(t=e.sent).default.apply(t,n));case 3:case\"end\":return e.stop()}}),e)}))),s.apply(this,arguments)}a?n.e(4736).then(n.bind(n,6474)):n.e(4736).then(n.bind(n,9521));var c=a?n.e(4736).then(n.bind(n,9475)):n.e(4736).then(n.bind(n,6281));function u(){return u=(0,o.Z)(i.mark((function e(){var t,n=arguments;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,c;case 2:return e.abrupt(\"return\",(t=e.sent).default.apply(t,n));case 3:case\"end\":return e.stop()}}),e)}))),u.apply(this,arguments)}var d=n(2335),f=n(6797),p=n(6340),h=function(e){var t,n,o,i=null===(t=e.extensions)||void 0===t?void 0:t.reduce((function(e,t){return e.push(d.LO[t]),e}),[]),a=null===(n=e.extensions)||void 0===n?void 0:n.reduce((function(e,t){return\"jpg\"===t?e.concat(\".jpg\",\".jpeg\"):e.concat(\".\".concat(t))}),[]);return function(){return s.apply(this,arguments)}({description:e.description,extensions:a,mimeTypes:i,multiple:null!==(o=e.multiple)&&void 0!==o&&o,legacySetup:function(t,n,o){var i=(0,p.Ds)(n,500),a=function(){l(),document.addEventListener(d.Ks.KEYUP,i),document.addEventListener(d.Ks.POINTER_UP,i),i()},l=function(){var n;if(null!==(n=o.files)&&void 0!==n&&n.length){var i=e.multiple?(0,r.Z)(o.files):o.files[0];t(i)}};requestAnimationFrame((function(){window.addEventListener(d.Ks.FOCUS,a)}));var s=window.setInterval((function(){l()}),500);return function(e){clearInterval(s),i.cancel(),window.removeEventListener(d.Ks.FOCUS,a),document.removeEventListener(d.Ks.KEYUP,i),document.removeEventListener(d.Ks.POINTER_UP,i),e&&(console.warn(\"Opening the file was canceled (legacy-fs).\"),e(new f._))}}})},m=function(e,t){return function(){return u.apply(this,arguments)}(e,{fileName:\"\".concat(t.name,\".\").concat(t.extension),description:t.description,extensions:[\".\".concat(t.extension)]},t.fileHandle)}},673:function(e,t,n){\"use strict\";n.r(t),n.d(t,{decodePngMetadata:function(){return E},decodeSvgMetadata:function(){return j},encodePngMetadata:function(){return k},encodeSvgMetadata:function(){return S},getTEXtChunk:function(){return w}});var r=n(8950),o=n(2975),i=n.n(o),a=n(2983),l=n.n(a),s=n(1194),c=n(3434),u=n.n(c),d=n(2744),f=n(2335),p=n(434),h=function(e){return new Promise((function(t,n){var r=\"string\"==typeof e?new Blob([(new TextEncoder).encode(e)]):new Blob([e instanceof Uint8Array?e:new Uint8Array(e)]),o=new FileReader;o.onload=function(e){if(!e.target||\"string\"!=typeof e.target.result)return n(new Error(\"couldn't convert to byte string\"));t(e.target.result)},o.readAsBinaryString(r)}))},m=function(e){for(var t=new ArrayBuffer(e.length),n=new Uint8Array(t),r=0,o=e.length;r<o;r++)n[r]=e.charCodeAt(r);return t},g=function(e){return new TextDecoder(\"utf-8\").decode(m(e))},v=function(){var e=(0,r.Z)(i().mark((function e(t){var n=arguments;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n.length>1&&void 0!==n[1]&&n[1])){e.next=5;break}e.t0=window.btoa(t),e.next=10;break;case 5:return e.t1=window,e.next=8,h(t);case 8:e.t2=e.sent,e.t0=e.t1.btoa.call(e.t1,e.t2);case 10:return e.abrupt(\"return\",e.t0);case 11:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),b=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r=arguments;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.length>1&&void 0!==r[1]&&r[1],e.abrupt(\"return\",n?window.atob(t):g(window.atob(t)));case 2:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),y=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.text,!1===t.compress){e.next=11;break}return e.prev=2,e.next=5,h((0,d.deflate)(n));case 5:r=e.sent,e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(\"encode: cannot deflate\",e.t0);case 11:if(e.t1=!!r,e.t2=r,e.t2){e.next=17;break}return e.next=16,h(n);case 16:e.t2=e.sent;case 17:return e.t3=e.t2,e.abrupt(\"return\",{version:\"1\",encoding:\"bstring\",compressed:e.t1,encoded:e.t3});case 19:case\"end\":return e.stop()}}),e,null,[[2,8]])})));return function(t){return e.apply(this,arguments)}}(),x=function(){var e=(0,r.Z)(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t.encoding,e.next=\"bstring\"===e.t0?3:12;break;case 3:if(!t.compressed){e.next=7;break}e.t1=t.encoded,e.next=10;break;case 7:return e.next=9,g(t.encoded);case 9:e.t1=e.sent;case 10:return n=e.t1,e.abrupt(\"break\",13);case 12:throw new Error('decode: unknown encoding \"'.concat(t.encoding,'\"'));case 13:if(!t.compressed){e.next=15;break}return e.abrupt(\"return\",(0,d.inflate)(new Uint8Array(m(n)),{to:\"string\"}));case 15:return e.abrupt(\"return\",n);case 16:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();var w=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=l(),e.t1=Uint8Array,e.next=4,(0,p.vZ)(t);case 4:if(e.t2=e.sent,e.t3=new e.t1(e.t2),n=(0,e.t0)(e.t3),!(r=n.find((function(e){return\"tEXt\"===e.name})))){e.next=10;break}return e.abrupt(\"return\",s.decode(r.data));case 10:return e.abrupt(\"return\",null);case 11:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),k=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r,o,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.blob,r=t.metadata,e.t0=l(),e.t1=Uint8Array,e.next=5,(0,p.vZ)(n);case 5:return e.t2=e.sent,e.t3=new e.t1(e.t2),o=(0,e.t0)(e.t3),e.t4=s,e.t5=f.LO.excalidraw,e.t6=JSON,e.next=13,y({text:r,compress:!0});case 13:return e.t7=e.sent,e.t8=e.t6.stringify.call(e.t6,e.t7),a=e.t4.encode.call(e.t4,e.t5,e.t8),o.splice(-1,0,a),e.abrupt(\"return\",new Blob([u()(o)],{type:f.LO.png}));case 18:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),E=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,w(t);case 2:if((null==(n=e.sent)?void 0:n.keyword)!==f.LO.excalidraw){e.next=19;break}if(e.prev=4,\"encoded\"in(r=JSON.parse(n.text))){e.next=10;break}if(!(\"type\"in r)||r.type!==f.r8.excalidraw){e.next=9;break}return e.abrupt(\"return\",n.text);case 9:throw new Error(\"FAILED\");case 10:return e.next=12,x(r);case 12:return e.abrupt(\"return\",e.sent);case 15:throw e.prev=15,e.t0=e.catch(4),console.error(e.t0),new Error(\"FAILED\");case 19:throw new Error(\"INVALID\");case 20:case\"end\":return e.stop()}}),e,null,[[4,15]])})));return function(t){return e.apply(this,arguments)}}(),S=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r,o;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.text,e.t0=v,e.t1=JSON,e.next=5,y({text:n});case 5:return e.t2=e.sent,e.t3=e.t1.stringify.call(e.t1,e.t2),e.next=9,(0,e.t0)(e.t3,!0);case 9:return r=e.sent,o=\"\",o+=\"\\x3c!-- payload-type:\".concat(f.LO.excalidraw,\" --\\x3e\"),o+=\"\\x3c!-- payload-version:2 --\\x3e\",o+=\"\\x3c!-- payload-start --\\x3e\",o+=r,o+=\"\\x3c!-- payload-end --\\x3e\",e.abrupt(\"return\",o);case 17:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),j=function(){var e=(0,r.Z)(i().mark((function e(t){var n,r,o,a,l,s,c;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n=t.svg).includes(\"payload-type:\".concat(f.LO.excalidraw))){e.next=26;break}if(r=n.match(\/<!-- payload-start -->\\s*(.+?)\\s*<!-- payload-end -->\/)){e.next=5;break}throw new Error(\"INVALID\");case 5:return o=n.match(\/<!-- payload-version:(\\d+) -->\/),a=(null==o?void 0:o[1])||\"1\",l=\"1\"!==a,e.prev=8,e.next=11,b(r[1],l);case 11:if(s=e.sent,\"encoded\"in(c=JSON.parse(s))){e.next=17;break}if(!(\"type\"in c)||c.type!==f.r8.excalidraw){e.next=16;break}return e.abrupt(\"return\",s);case 16:throw new Error(\"FAILED\");case 17:return e.next=19,x(c);case 19:return e.abrupt(\"return\",e.sent);case 22:throw e.prev=22,e.t0=e.catch(8),console.error(e.t0),new Error(\"FAILED\");case 26:throw new Error(\"INVALID\");case 27:case\"end\":return e.stop()}}),e,null,[[8,22]])})));return function(t){return e.apply(this,arguments)}}()},9485:function(e,t,n){\"use strict\";n.d(t,{Um:function(){return f.Um},cT:function(){return u.cT},n8:function(){return f.n8},p1:function(){return p}});var r=n(8950),o=n(2975),i=n.n(o),a=n(6665),l=n(2335),s=n(8211),c=n(4162),u=n(434),d=n(1393),f=n(5523),p=function(){var e=(0,r.Z)(i().mark((function e(t,r,o,p,h){var m,g,v,b,y,x,w,k,E,S,j;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(m=h.exportBackground,g=h.exportPadding,v=void 0===g?l.qy:g,b=h.viewBackgroundColor,y=h.name,x=h.fileHandle,w=void 0===x?null:x,0!==r.length){e.next=3;break}throw new Error((0,s.t)(\"alerts.cannotExportEmptyCanvas\"));case 3:if(\"svg\"!==t&&\"clipboard-svg\"!==t){e.next=17;break}return e.next=6,(0,c.$D)(r,{exportBackground:m,exportWithDarkMode:o.exportWithDarkMode,viewBackgroundColor:b,exportPadding:v,exportScale:o.exportScale,exportEmbedScene:o.exportEmbedScene&&\"svg\"===t},p);case 6:if(k=e.sent,\"svg\"!==t){e.next=13;break}return e.next=10,(0,d.NL)(new Blob([k.outerHTML],{type:l.LO.svg}),{description:\"Export to SVG\",name:y,extension:o.exportEmbedScene?\"excalidraw.svg\":\"svg\",fileHandle:w});case 10:return e.abrupt(\"return\",e.sent);case 13:if(\"clipboard-svg\"!==t){e.next=17;break}return e.next=16,(0,a.dd)(k.outerHTML);case 16:return e.abrupt(\"return\");case 17:return e.next=19,(0,c.NL)(r,o,p,{exportBackground:m,viewBackgroundColor:b,exportPadding:v});case 19:if((E=e.sent).style.display=\"none\",document.body.appendChild(E),\"png\"!==t){e.next=38;break}return e.next=25,(0,u._c)(E);case 25:if(S=e.sent,E.remove(),!o.exportEmbedScene){e.next=33;break}return e.next=30,Promise.resolve().then(n.bind(n,673));case 30:return e.next=32,e.sent.encodePngMetadata({blob:S,metadata:(0,f.I_)(r,o,p,\"local\")});case 32:S=e.sent;case 33:return e.next=35,(0,d.NL)(S,{description:\"Export to PNG\",name:y,extension:\"png\",fileHandle:w});case 35:return e.abrupt(\"return\",e.sent);case 38:if(\"clipboard\"!==t){e.next=60;break}return e.prev=39,j=(0,u._c)(E),e.next=43,(0,a.uR)(j);case 43:e.next=55;break;case 45:if(e.prev=45,e.t0=e.catch(39),console.warn(e.t0),\"CANVAS_POSSIBLY_TOO_BIG\"!==e.t0.name){e.next=50;break}throw e.t0;case 50:if(!l.vU||\"TypeError\"!==e.t0.name){e.next=54;break}throw new Error(\"\".concat((0,s.t)(\"alerts.couldNotCopyToClipboard\"),\"\\n\\n\").concat((0,s.t)(\"hints.firefox_clipboard_write\")));case 54:throw new Error((0,s.t)(\"alerts.couldNotCopyToClipboard\"));case 55:return e.prev=55,E.remove(),e.finish(55);case 58:e.next=62;break;case 60:throw E.remove(),new Error(\"Unsupported export type\");case 62:case\"end\":return e.stop()}}),e,null,[[39,45,55,58]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}()},5523:function(e,t,n){\"use strict\";n.d(t,{HT:function(){return y},I_:function(){return m},NI:function(){return x},Um:function(){return g},dS:function(){return b},n8:function(){return v},t1:function(){return w}});var r=n(6655),o=n(8950),i=n(2975),a=n.n(i),l=n(1393),s=n(8897),c=n(2335),u=n(1047),d=n(434);function f(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return p(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=function(e,t){var n,r={},o=f(e);try{for(o.s();!(n=o.n()).done;){var i=n.value;!i.isDeleted&&\"fileId\"in i&&i.fileId&&t[i.fileId]&&(r[i.fileId]=t[i.fileId])}}catch(e){o.e(e)}finally{o.f()}return r},m=function(e,t,n,r){var o={type:c.r8.excalidraw,version:c.Kr.excalidraw,source:c.pb,elements:\"local\"===r?(0,u._M)(e):(0,u.BQ)(e),appState:\"local\"===r?(0,s.s)(t):(0,s.eS)(t),files:\"local\"===r?h(e,n):void 0};return JSON.stringify(o,null,2)},g=function(){var e=(0,o.Z)(a().mark((function e(t,n,r){var o,i,s;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=m(t,n,r,\"local\"),i=new Blob([o],{type:c.LO.excalidraw}),e.next=4,(0,l.NL)(i,{name:n.name,extension:\"excalidraw\",description:\"Excalidraw file\",fileHandle:(0,d.g8)(n.fileHandle)?null:n.fileHandle});case 4:return s=e.sent,e.abrupt(\"return\",{fileHandle:s});case 6:case\"end\":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),v=function(){var e=(0,o.Z)(a().mark((function e(t,n){var r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,l.I$)({description:\"Excalidraw files\"});case 2:return r=e.sent,e.t0=d.cT,e.next=6,(0,d.gY)(r);case 6:return e.t1=e.sent,e.t2=t,e.t3=n,e.t4=r.handle,e.abrupt(\"return\",(0,e.t0)(e.t1,e.t2,e.t3,e.t4));case 11:case\"end\":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),b=function(e){return(null==e?void 0:e.type)===c.r8.excalidraw&&(!e.elements||Array.isArray(e.elements)&&(!e.appState||\"object\"===(0,r.Z)(e.appState)))},y=function(e){return\"object\"===(0,r.Z)(e)&&e&&e.type===c.r8.excalidrawLibrary&&(1===e.version||2===e.version)},x=function(e){var t={type:c.r8.excalidrawLibrary,version:c.Kr.excalidrawLibrary,source:c.pb,libraryItems:e};return JSON.stringify(t,null,2)},w=function(){var e=(0,o.Z)(a().mark((function e(t){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=x(t),e.next=3,(0,l.NL)(new Blob([n],{type:c.LO.excalidrawlib}),{name:\"library\",extension:\"excalidrawlib\",description:\"Excalidraw library file\"});case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},7053:function(e,t,n){\"use strict\";n.d(t,{Di:function(){return I},WV:function(){return C},rF:function(){return E},xS:function(){return M},zh:function(){return _}});var r=n(7169),o=n(8950),i=n(5169),a=n(8821),l=n(1930),s=n(2975),c=n.n(s),u=n(434),d=n(679),f=n(4739),p=n(9487),h=n(8925),m=n(6797),g=n(8211),v=n(9787),b=n(2335);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return k(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E=(0,f.cn)({status:\"loaded\",isInitialized:!0,libraryItems:[]}),S=function(e){return JSON.parse(JSON.stringify(e))},j=function(e,t){return!e.find((function(e){return e.elements.length===t.elements.length&&e.elements.every((function(e,n){return e.id===t.elements[n].id&&e.versionNonce===t.elements[n].versionNonce}))}))},_=function(e,t){var n,r=[],o=w(t);try{for(o.s();!(n=o.n()).done;){var i=n.value;j(e,i)&&r.push(i)}}catch(e){o.e(e)}finally{o.f()}return[].concat(r,(0,l.Z)(e))},O=(0,i.Z)((function e(t){var n=this;(0,a.Z)(this,e),this.lastLibraryItems=[],this.isInitialized=!1,this.updateQueue=[],this.getLastUpdateTask=function(){return n.updateQueue[n.updateQueue.length-1]},this.notifyListeners=function(){if(n.updateQueue.length>0)p.e_.set(E,{status:\"loading\",libraryItems:n.lastLibraryItems,isInitialized:n.isInitialized});else{n.isInitialized=!0,p.e_.set(E,{status:\"loaded\",libraryItems:n.lastLibraryItems,isInitialized:n.isInitialized});try{var e,t;null===(e=(t=n.app.props).onLibraryChange)||void 0===e||e.call(t,S(n.lastLibraryItems))}catch(e){console.error(e)}}},this.resetLibrary=function(){return n.setLibrary([])},this.getLatestLibrary=function(){return new Promise(function(){var e=(0,o.Z)(c().mark((function e(t){var r;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,n.getLastUpdateTask()||n.lastLibraryItems;case 3:r=e.sent,n.updateQueue.length>0?t(n.getLatestLibrary()):t(S(r)),e.next=10;break;case 7:return e.prev=7,e.t0=e.catch(0),e.abrupt(\"return\",t(n.lastLibraryItems));case 10:case\"end\":return e.stop()}}),e,null,[[0,7]])})));return function(t){return e.apply(this,arguments)}}())},this.updateLibrary=function(){var e=(0,o.Z)(c().mark((function e(t){var r,i,a,l,s,f,p,h,v;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.libraryItems,i=t.prompt,a=void 0!==i&&i,l=t.merge,s=void 0!==l&&l,f=t.openLibraryMenu,p=void 0!==f&&f,h=t.defaultStatus,v=void 0===h?\"unpublished\":h,p&&n.app.setState({openSidebar:\"library\"}),e.abrupt(\"return\",n.setLibrary((function(){return new Promise(function(){var e=(0,o.Z)(c().mark((function e(t,o){var i,l;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,\"function\"!=typeof r||r instanceof Blob?r:r(n.lastLibraryItems);case 3:if(!((i=e.sent)instanceof Blob)){e.next=10;break}return e.next=7,(0,u.lV)(i,v);case 7:l=e.sent,e.next=11;break;case 10:l=(0,d.wJ)(i,v);case 11:!a||window.confirm((0,g.t)(\"alerts.confirmAddLibrary\",{numShapes:l.length}))?t(s?_(n.lastLibraryItems,l):l):o(new m._),e.next=17;break;case 14:e.prev=14,e.t0=e.catch(0),o(e.t0);case 17:case\"end\":return e.stop()}}),e,null,[[0,14]])})));return function(t,n){return e.apply(this,arguments)}}())})).finally((function(){n.app.focusContainer()})));case 3:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.setLibrary=function(e){var t=new Promise(function(){var t=(0,o.Z)(c().mark((function t(r,o){return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,n.getLastUpdateTask();case 3:return\"function\"==typeof e&&(e=e(n.lastLibraryItems)),t.t0=S,t.next=7,e;case 7:t.t1=t.sent,n.lastLibraryItems=(0,t.t0)(t.t1),r(n.lastLibraryItems),t.next=15;break;case 12:t.prev=12,t.t2=t.catch(0),o(t.t2);case 15:case\"end\":return t.stop()}}),t,null,[[0,12]])})));return function(e,n){return t.apply(this,arguments)}}()).catch((function(e){if(\"AbortError\"===e.name)return console.warn(\"Library update aborted by user\"),n.lastLibraryItems;throw e})).finally((function(){n.updateQueue=n.updateQueue.filter((function(e){return e!==t})),n.notifyListeners()}));return n.updateQueue.push(t),n.notifyListeners(),t},this.app=t}));t.ZP=O;var C=function(e){var t,n=Math.ceil(Math.sqrt(e.length)),r=[],o=0,i=0,a=0,s=0,c=0,u=0,d=0,f=w(e);try{var p=function(){var f=t.value;c&&c%n==0&&(i+=a+50,o=0,u=0,d++),0===u&&(a=function(t){return e.slice(t*n,t*n+n).reduce((function(e,t){var n=(0,h.v2)(t.elements).height;return Math.max(e,n)}),0)}(d)),s=function(t){var r,o=0,i=0,a=0,l=w(e);try{for(l.s();!(r=l.n()).done;){var s=r.value;if(o%n==0&&(i=0),i===t){var c=(0,h.v2)(s.elements).width;a=Math.max(a,c)}o++,i++}}catch(e){l.e(e)}finally{l.f()}return a}(u);var p=(0,h.v2)(f.elements),m=p.minX,g=p.minY,v=p.width,b=p.height,y=(s-v)\/2,k=(a-b)\/2;r.push.apply(r,(0,l.Z)(f.elements.map((function(e){return x(x({},e),{},{x:e.x+o+y-m,y:e.y+i+k-g})})))),o+=s+50,c++,u++};for(f.s();!(t=f.n()).done;)p()}catch(e){f.e(e)}finally{f.f()}return r},I=function(){var e=new URLSearchParams(window.location.hash.slice(1)).get(b.ah.addLibrary)||new URLSearchParams(window.location.search).get(b.UO.addLibrary),t=e?new URLSearchParams(window.location.hash.slice(1)).get(\"token\"):null;return e?{libraryUrl:e,idToken:t}:null},M=function(e){var t=e.excalidrawAPI,n=e.getInitialLibraryItems,r=(0,v.useRef)(n);(0,v.useEffect)((function(){if(t){var e=function(){var e=(0,o.Z)(c().mark((function e(n){var r,i,a,l,s,u;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.libraryUrl,i=n.idToken,a=new Promise(function(){var e=(0,o.Z)(c().mark((function e(t,n){var o,i;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch(decodeURIComponent(r));case 3:return o=e.sent,e.next=6,o.blob();case 6:i=e.sent,t(i),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),n(e.t0);case 13:case\"end\":return e.stop()}}),e,null,[[0,10]])})));return function(t,n){return e.apply(this,arguments)}}()),l=i!==t.id,e.next=5,l&&document.hidden?new Promise((function(e){window.addEventListener(\"focus\",(function(){return e()}),{once:!0})})):null;case 5:return e.prev=5,e.next=8,t.updateLibrary({libraryItems:a,prompt:l,merge:!0,defaultStatus:\"published\",openLibraryMenu:!0});case 8:e.next=13;break;case 10:throw e.prev=10,e.t0=e.catch(5),e.t0;case 13:return e.prev=13,window.location.hash.includes(b.ah.addLibrary)?((s=new URLSearchParams(window.location.hash.slice(1))).delete(b.ah.addLibrary),window.history.replaceState({},b.iC,\"#\".concat(s.toString()))):window.location.search.includes(b.UO.addLibrary)&&((u=new URLSearchParams(window.location.search)).delete(b.UO.addLibrary),window.history.replaceState({},b.iC,\"?\".concat(u.toString()))),e.finish(13);case 16:case\"end\":return e.stop()}}),e,null,[[5,10,13,16]])})));return function(t){return e.apply(this,arguments)}}(),n=function(t){t.preventDefault();var n=I();n&&(t.stopImmediatePropagation(),window.history.replaceState({},\"\",t.oldURL),e(n))};r.current&&t.updateLibrary({libraryItems:r.current()});var i=I();return i&&e(i),window.addEventListener(b.Ks.HASHCHANGE,n),function(){window.removeEventListener(b.Ks.HASHCHANGE,n)}}}),[t])}},679:function(e,t,n){\"use strict\";n.d(t,{ET:function(){return j},lY:function(){return C},nu:function(){return I},wJ:function(){return T}});var r=n(2577),o=n(7169),i=n(1047),a=n(1974),l=n(6954),s=n(2335),c=n(8897),u=n(6938),d=n(1935),f=n(6340),p=n(5284),h=n(5710),m=n(6794);function g(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return v(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var x={selection:!0,text:!0,rectangle:!0,diamond:!0,ellipse:!0,line:!0,image:!0,arrow:!0,freedraw:!0,eraser:!1,custom:!0,hand:!0},w=function(e){return Object.keys(s.ut).includes(e)?s.ut[e]:s.rk},k=function(e,t){var n,r,o,c,u,d,h,g,v,b,x,w,k,E={type:t.type||e.type,version:e.version||1,versionNonce:null!==(n=e.versionNonce)&&void 0!==n?n:0,isDeleted:null!==(r=e.isDeleted)&&void 0!==r&&r,id:e.id||(0,l.kb)(),fillStyle:e.fillStyle||\"hachure\",strokeWidth:e.strokeWidth||1,strokeStyle:null!==(o=e.strokeStyle)&&void 0!==o?o:\"solid\",roughness:null!==(c=e.roughness)&&void 0!==c?c:1,opacity:null==e.opacity?100:e.opacity,angle:e.angle||0,x:null!==(u=null!==(d=t.x)&&void 0!==d?d:e.x)&&void 0!==u?u:0,y:null!==(h=null!==(g=t.y)&&void 0!==g?g:e.y)&&void 0!==h?h:0,strokeColor:e.strokeColor||p.black,backgroundColor:e.backgroundColor||\"transparent\",width:e.width||0,height:e.height||0,seed:null!==(v=e.seed)&&void 0!==v?v:1,groupIds:null!==(b=e.groupIds)&&void 0!==b?b:[],roundness:e.roundness?e.roundness:\"round\"===e.strokeSharpness?{type:(0,a.QI)(e.type)?s.a6.LEGACY:s.a6.PROPORTIONAL_RADIUS}:null,boundElements:e.boundElementIds?e.boundElementIds.map((function(e){return{type:\"arrow\",id:e}})):null!==(x=e.boundElements)&&void 0!==x?x:[],updated:null!==(w=e.updated)&&void 0!==w?w:(0,f.C3)(),link:e.link?(0,m.$)(e.link):null,locked:null!==(k=e.locked)&&void 0!==k&&k};return\"customData\"in e&&(E.customData=e.customData),s.WR in e&&(E[s.WR]=e[s.WR]),y(y(y({},E),(0,i.Qp)(E)),t)},E=function(e,t){if(e.boundElements){var n=e.boundElements.slice(),r=new Set;e.boundElements=n.reduce((function(n,o){var i=t.get(o.id);if(i&&!r.has(o.id)){if(r.add(o.id),i.isDeleted)return n;n.push(o),(0,a.iB)(i)&&!i.containerId&&(i.containerId=e.id)}return n}),[])}},S=function(e,t){var n=e.containerId?t.get(e.containerId):null;if(n){if(!e.isDeleted&&n.boundElements&&!n.boundElements.find((function(t){return t.id===e.id}))){var r=(n.boundElements||(n.boundElements=[])).slice();r.push({type:\"text\",id:e.id}),n.boundElements=r}}else e.containerId=null},j=function(e,t,n){var o=new Set,c=t?(0,f.xn)(t):null,p=(e||[]).reduce((function(e,t){if(\"selection\"!==t.type&&!(0,i.QD)(t)){var a=function(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]&&arguments[1];switch(e.type){case\"text\":var a=e.fontSize,l=e.fontFamily;if(\"font\"in e){var c=e.font.split(\" \"),d=(0,r.Z)(c,2),p=d[0],m=d[1];a=parseFloat(p),l=w(m)}var g=null!==(t=e.text)&&void 0!==t?t:\"\",v=e.lineHeight||(e.height?(0,h.$2)(e):(0,h.PT)(e.fontFamily)),b=(0,h.R8)(e.text,(0,f.mO)(e),v);return e=k(e,{fontSize:a,fontFamily:l,text:g,textAlign:e.textAlign||s.Hg,verticalAlign:e.verticalAlign||s.hs,containerId:null!==(n=e.containerId)&&void 0!==n?n:null,originalText:e.originalText||g,lineHeight:v,baseline:b}),o&&(e=y(y({},e),(0,i.JZ)(e))),e;case\"freedraw\":return k(e,{points:e.points,lastCommittedPoint:null,simulatePressure:e.simulatePressure,pressures:e.pressures});case\"image\":return k(e,{status:e.status||\"pending\",fileId:e.fileId,scale:e.scale||[1,1]});case\"line\":case\"draw\":case\"arrow\":var x=e,E=x.startArrowhead,S=void 0===E?null:E,j=x.endArrowhead,_=void 0===j?\"arrow\"===e.type?\"arrow\":null:j,O=e.x,C=e.y,I=!Array.isArray(e.points)||e.points.length<2?[[0,0],[e.width,e.height]]:e.points;if(0!==I[0][0]||0!==I[0][1]){var M=u._.getNormalizedPoints(e);I=M.points,O=M.x,C=M.y}return k(e,{type:\"draw\"===e.type?\"line\":e.type,startBinding:e.startBinding,endBinding:e.endBinding,lastCommittedPoint:null,startArrowhead:S,endArrowhead:_,points:I,x:O,y:C});case\"ellipse\":case\"rectangle\":case\"diamond\":return k(e,{})}}(t,null==n?void 0:n.refreshDimensions);if(a){var p=null==c?void 0:c.get(t.id);p&&p.version>a.version&&(a=(0,d.ZP)(a,p.version)),o.has(a.id)&&(a=y(y({},a),{},{id:(0,l.kb)()})),o.add(a.id),e.push(a)}}return e}),[]);if(null==n||!n.repairBindings)return p;var m,v=(0,f.xn)(p),b=g(p);try{for(b.s();!(m=b.n()).done;){var x=m.value;(0,a.iB)(x)&&x.containerId?S(x,v):x.boundElements&&E(x,v)}}catch(e){b.e(e)}finally{b.f()}return p},_=function(e,t,n){var r=t[e];return void 0!==r?r:n[e]},O={isLibraryOpen:function(e,t){return[\"openSidebar\",\"isLibraryOpen\"in e?e.isLibraryOpen?\"library\":null:_(\"openSidebar\",e,t)]},isLibraryMenuDocked:function(e,t){var n;return[\"isSidebarDocked\",null!==(n=e.isLibraryMenuDocked)&&void 0!==n?n:_(\"isSidebarDocked\",e,t)]}},C=function(e,t){var n,o,i,a;e=e||{};for(var l=(0,c.im)(),s={},u=0,d=Object.keys(O);u<d.length;u++){var p=d[u];if(p in e){var h=O[p](e,l),m=(0,r.Z)(h,2),g=m[0],v=m[1];s[g]=v}}for(var b=0,w=Object.entries(l);b<w.length;b++){var k=(0,r.Z)(w[b],2),E=k[0],S=k[1],j=e[E],_=t?t[E]:void 0;s[E]=void 0!==j?j:void 0!==_?_:S}return y(y({},s),{},{cursorButton:(null==t?void 0:t.cursorButton)||\"up\",penDetected:null!==(n=null==t?void 0:t.penDetected)&&void 0!==n?n:!!e.penMode&&(null!==(o=e.penDetected)&&void 0!==o&&o),activeTool:y(y({},(0,f.Om)(l,s.activeTool.type&&x[s.activeTool.type]?s.activeTool:{type:\"selection\"})),{},{lastActiveTool:null,locked:null!==(i=s.activeTool.locked)&&void 0!==i&&i}),zoom:\"number\"==typeof e.zoom?{value:e.zoom}:null!==(a=e.zoom)&&void 0!==a&&a.value?e.zoom:l.zoom,openSidebar:\"library\"===s.openSidebar?s.isSidebarDocked?\"library\":null:s.openSidebar})},I=function(e,t,n,r){return{elements:j(null==e?void 0:e.elements,n,r),appState:C(null==e?void 0:e.appState,t||null),files:(null==e?void 0:e.files)||{}}},M=function(e){var t=j((0,i.Lm)(e.elements),null);return t.length?y(y({},e),{},{elements:t}):null},T=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,r=[],o=g(t);try{for(o.s();!(e=o.n()).done;){var i=e.value;if(Array.isArray(i)){var a=M({status:n,elements:i,id:(0,l.kb)(),created:Date.now()});a&&r.push(a)}else{var s=i,c=M(y(y({},s),{},{id:s.id||(0,l.kb)(),status:s.status||n,created:s.created||Date.now()}));c&&r.push(c)}}}catch(e){o.e(e)}finally{o.f()}return r}},6794:function(e,t,n){\"use strict\";n.d(t,{$:function(){return o},q:function(){return i}});var r=n(5779),o=function(e){return(0,r.N)(e)},i=function(e){return!!(null!=e&&e.includes(location.origin)||null!=e&&e.startsWith(\"\/\"))}},4929:function(e,t,n){\"use strict\";n.d(t,{rj:function(){return H},nW:function(){return F},nz:function(){return K},sw:function(){return G},lV:function(){return $},wq:function(){return V},Pp:function(){return q}});var r=n(7169),o=n(2577),i=n(6340),a=n(1935),l=n(7901),s=n(1319),c=n(3646),u=n(8211),d=n(9787),f=n(45),p=n(6066),h=n(3063),m=n(6552),g=n(2335),v=n(1894),b=n(75),y=n(2325),x=n(1047),w=n(6794),k=n(487),E=n.n(k),S=n(631),j=n.n(S),_=n(2052),O=n.n(_),C=n(4010),I=n.n(C),M=n(1469),T=n.n(M),P=n(9329),D=n.n(P),A=n(5260),L={};L.styleTagTransform=D(),L.setAttributes=I(),L.insert=O().bind(null,\"head\"),L.domAPI=j(),L.insertStyleElement=T();E()(A.Z,L),A.Z&&A.Z.locals&&A.Z.locals;var Z=n(7047),z=n(2134),R=n(4512);function N(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?N(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):N(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var H=document.createElement(\"img\");H.src=\"data:\".concat(g.LO.svg,\", \").concat(encodeURIComponent('<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#1971c2\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-external-link\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"><\/path><polyline points=\"15 3 21 3 21 9\"><\/polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"><\/line><\/svg>'));var W=!1,F=function(e){var t=e.element,n=e.setAppState,r=e.onLinkOpen,l=(0,z.gF)(),h=t.link||\"\",m=(0,d.useState)(h),v=(0,o.Z)(m,2),b=v[0],y=v[1],x=(0,d.useRef)(null),k=\"editor\"===l.showHyperlinkPopup||!h,E=(0,d.useCallback)((function(){if(x.current){var e=(0,w.$)(x.current.value);!t.link&&e&&(0,Z.L)(\"hyperlink\",\"create\"),(0,a.DR)(t,{link:e}),n({showHyperlinkPopup:\"info\"})}}),[t,n]);(0,d.useLayoutEffect)((function(){return function(){E()}}),[E]),(0,d.useEffect)((function(){var e=null,r=function(r){k||(e&&clearTimeout(e),Q(t,l,[r.clientX,r.clientY])&&(e=window.setTimeout((function(){n({showHyperlinkPopup:!1})}),500)))};return window.addEventListener(g.Ks.POINTER_MOVE,r,!1),function(){window.removeEventListener(g.Ks.POINTER_MOVE,r,!1),e&&clearTimeout(e)}}),[l,t,k,n]);var S=(0,d.useCallback)((function(){(0,Z.L)(\"hyperlink\",\"delete\"),(0,a.DR)(t,{link:null}),k&&(x.current.value=\"\"),n({showHyperlinkPopup:!1})}),[n,t,k]),j=U(t,l),_=j.x,O=j.y;return l.draggingElement||l.resizingElement||l.isRotating||l.openMenu?null:(0,R.jsxs)(\"div\",{className:\"excalidraw-hyperlinkContainer\",style:{top:\"\".concat(O,\"px\"),left:\"\".concat(_,\"px\"),width:320,padding:5},children:[k?(0,R.jsx)(\"input\",{className:(0,f.Z)(\"excalidraw-hyperlinkContainer-input\"),placeholder:\"Type or paste your link here\",ref:x,value:b,onChange:function(e){return y(e.target.value)},autoFocus:!0,onKeyDown:function(e){e.stopPropagation(),e[p.tW.CTRL_OR_CMD]&&e.key===p.tW.K&&e.preventDefault(),e.key!==p.tW.ENTER&&e.key!==p.tW.ESCAPE||E()}}):(0,R.jsx)(\"a\",{href:(0,w.$)(t.link||\"\"),className:(0,f.Z)(\"excalidraw-hyperlinkContainer-link\",{\"d-none\":k}),target:(0,w.q)(t.link)?\"_self\":\"_blank\",onClick:function(e){if(t.link&&r){var n=(0,i.ag)(g.Ks.EXCALIDRAW_LINK,e.nativeEvent);r(B(B({},t),{},{link:(0,w.$)(t.link)}),n),n.defaultPrevented&&e.preventDefault()}},rel:\"noopener noreferrer\",children:t.link}),(0,R.jsxs)(\"div\",{className:\"excalidraw-hyperlinkContainer__buttons\",children:[!k&&(0,R.jsx)(s.V,{type:\"button\",title:(0,u.t)(\"buttons.edit\"),\"aria-label\":(0,u.t)(\"buttons.edit\"),label:(0,u.t)(\"buttons.edit\"),onClick:function(){(0,Z.L)(\"hyperlink\",\"edit\",\"popup-ui\"),n({showHyperlinkPopup:\"editor\"})},className:\"excalidraw-hyperlinkContainer--edit\",icon:c.Pm}),h&&(0,R.jsx)(s.V,{type:\"button\",title:(0,u.t)(\"buttons.remove\"),\"aria-label\":(0,u.t)(\"buttons.remove\"),label:(0,u.t)(\"buttons.remove\"),onClick:S,className:\"excalidraw-hyperlinkContainer--remove\",icon:c.XH})]})]})},U=function(e,t){var n=(0,x.qf)(e),r=(0,o.Z)(n,2),a=r[0],l=r[1],s=(0,i._i)({sceneX:a+e.width\/2,sceneY:l},t),c=s.x,u=s.y;return{x:c-t.offsetLeft-160,y:u-t.offsetTop-85}},K=(0,l.z)({name:\"hyperlink\",perform:function(e,t){return\"editor\"!==t.showHyperlinkPopup&&{elements:e,appState:B(B({},t),{},{showHyperlinkPopup:\"editor\",openMenu:null}),commitToHistory:!0}},trackEvent:{category:\"hyperlink\",action:\"click\"},keyTest:function(e){return e[p.tW.CTRL_OR_CMD]&&e.key===p.tW.K},contextItemLabel:function(e,t){return Y(e,t)},predicate:function(e,t){return 1===(0,b.eD)(e,t).length},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,o=(0,b.eD)(t,n);return(0,R.jsx)(s.V,{type:\"button\",icon:c.xP,\"aria-label\":(0,u.t)(Y(t,n)),title:\"\".concat((0,u.t)(\"labels.link.label\"),\" - \").concat((0,i.uY)(\"CtrlOrCmd+K\")),onClick:function(){return r(null)},selected:1===o.length&&!!o[0].link})}}),Y=function(e,t){return(0,b.eD)(e,t)[0].link?\"labels.link.edit\":\"labels.link.create\"},G=function(e,t,n){var r=(0,o.Z)(e,4),i=r[0],a=r[1],l=r[2],s=r[3],c=h.Dn,u=c\/n.zoom.value,d=c\/n.zoom.value,f=c\/n.zoom.value,p=(i+l)\/2,g=(a+s)\/2,v=(c-8)\/(2*n.zoom.value),b=4\/n.zoom.value,y=l+b-v,x=a-b-f+v,w=(0,m.U1)(y+u\/2,x+d\/2,p,g,t),k=(0,o.Z)(w,2);return[k[0]-u\/2,k[1]-d\/2,u,d]},V=function(e,t,n,r){var i=(0,o.Z)(n,2),a=i[0],l=i[1];if(!e.link||t.selectedElementIds[e.id])return!1;var s=4\/t.zoom.value;if(!r&&t.viewModeEnabled&&(0,y.pX)(e,[a,l],s))return!0;var c=(0,x.qf)(e),u=(0,o.Z)(c,4),d=u[0],f=u[1],p=u[2],h=u[3],m=G([d,f,p,h],e.angle,t),g=(0,o.Z)(m,4),v=g[0],b=g[1],w=g[2],k=g[3];return a>v-s&&a<v+s+w&&l>b-s&&l<b+k+s},X=null,q=function(e,t){X&&clearTimeout(X),X=window.setTimeout((function(){return J(e,t)}),g.sA)},J=function(e,t){if(e.link){var n=(0,v.bK)();n.classList.add(\"excalidraw-tooltip--visible\"),n.style.maxWidth=\"20rem\",n.textContent=e.link;var r=(0,x.qf)(e),a=(0,o.Z)(r,4),l=a[0],s=a[1],c=a[2],u=a[3],d=G([l,s,c,u],e.angle,t),f=(0,o.Z)(d,4),p=f[0],h=f[1],m=f[2],g=f[3],b=(0,i._i)({sceneX:p,sceneY:h},t);(0,v.Js)(n,{left:b.x,top:b.y,width:m,height:g},\"top\"),(0,Z.L)(\"hyperlink\",\"tooltip\",\"link-icon\"),W=!0}},$=function(){X&&clearTimeout(X),W&&(W=!1,(0,v.bK)().classList.remove(\"excalidraw-tooltip--visible\"))},Q=function(e,t,n){var r=(0,o.Z)(n,2),a=r[0],l=r[1],s=(0,i.dE)({clientX:a,clientY:l},t),c=s.x,u=s.y,d=15\/t.zoom.value;if((0,y.pX)(e,[c,u],d))return!1;var f=(0,x.qf)(e),p=(0,o.Z)(f,3),h=p[0],m=p[1],g=p[2];if(c>=h&&c<=g&&u>=m-85&&u<=m)return!1;var v=U(e,t),b=v.x,w=v.y;return!(a>=b-d&&a<=b+320+10+d&&l>=w-d&&l<=w+d+10+42)}},8290:function(e,t,n){\"use strict\";n.d(t,{$q:function(){return F},DK:function(){return j},H:function(){return _},HG:function(){return b},N1:function(){return g},R:function(){return k},Ww:function(){return M},Y9:function(){return C},ZB:function(){return L},cz:function(){return m},ek:function(){return H},el:function(){return x}});var r=n(7169),o=n(2577),i=n(75),a=n(1974),l=n(2325),s=n(1935),c=n(1564),u=n(6938),d=n(6340),f=n(6066),p=n(5710);function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var m=function(e){return!e[f.tW.CTRL_OR_CMD]},g=function(e){return e.isBindingEnabled},v=function(e,t){var n=[];return t.forEach((function(t){var r=e.getNonDeletedElement(t);null!=r&&n.push(r)})),n},b=function(e,t,n){var r=new Set,o=new Set;y(e,t,n,\"start\",r,o),y(e,n,t,\"end\",r,o);var i=Array.from(o).filter((function(e){return!r.has(e)}));v(c.Z.getScene(e),i).forEach((function(t){var n;(0,s.DR)(t,{boundElements:null===(n=t.boundElements)||void 0===n?void 0:n.filter((function(t){return\"arrow\"!==t.type||t.id!==e.id}))})}))},y=function(e,t,n,r,o,i){if(\"keep\"!==t)if(null!=t)null!=n&&(\"keep\"===n?S(e,t,r):\"start\"!==r&&n.id===t.id)||(E(e,t,r),o.add(t.id));else{var a=O(e,r);null!=a&&i.add(a)}},x=function(e){e.forEach((function(e){(0,a.Mn)(e)?b(e,z(e,\"start\"),z(e,\"end\")):(0,a.f0)(e)&&w(e)}))},w=function(e){N(e).forEach((function(t){var n=(0,o.Z)(t,2),r=n[0],i=n[1];return b(r,\"end\"===i?\"keep\":e,\"start\"===i?\"keep\":e)}))},k=function(e,t,n,r){null!=t.startBoundElement&&E(e,t.startBoundElement,\"start\");var o=C(r,n);null==o||S(e,o,\"end\")||E(e,o,\"end\")},E=function(e,t,n){(0,s.DR)(e,(0,r.Z)({},\"start\"===n?\"startBinding\":\"endBinding\",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({elementId:t.id},I(e,t,n)))),(0,d.xn)(t.boundElements||[]).has(e.id)||(0,s.DR)(t,{boundElements:(t.boundElements||[]).concat({id:e.id,type:\"arrow\"})})},S=function(e,t,n){var r=e[\"start\"===n?\"endBinding\":\"startBinding\"];return j(e,null==r?void 0:r.elementId,t)},j=function(e,t,n){return t===n.id&&e.points.length<3},_=function(e){e.forEach((function(e){(0,a.Mn)(e)&&b(e,null,null)}))},O=function(e,t){var n=\"start\"===t?\"startBinding\":\"endBinding\",o=e[n];return null==o?null:((0,s.DR)(e,(0,r.Z)({},n,null)),o.elementId)},C=function(e,t){return(0,i.QG)(t.getNonDeletedElements(),(function(t){return(0,a.f0)(t,!1)&&(0,l.uu)(t,e)}))},I=function(e,t,n){var r=\"start\"===n?-1:1,o=-1===r?0:e.points.length-1,i=o-r,a=u._.getPointAtIndexGlobalCoordinates(e,o),s=u._.getPointAtIndexGlobalCoordinates(e,i);return{focus:(0,l.T_)(t,s,a),gap:Math.max(1,(0,l.oT)(t,a))}},M=function(e,t){var n,r=(null!==(n=e.boundElements)&&void 0!==n?n:[]).filter((function(e){return\"arrow\"===e.type}));if(0!==r.length){var o=null!=t?t:{},i=o.newSize,l=o.simultaneouslyUpdated,u=P(l);v(c.Z.getScene(e),r.map((function(e){return e.id}))).forEach((function(t){if((0,a.bt)(t)){var n=e;if(T(t,n)){var r=A(n,t.startBinding,i),o=A(n,t.endBinding,i);if(u.has(t.id))(0,s.DR)(t,{startBinding:r,endBinding:o});else D(t,\"start\",r,e),D(t,\"end\",o,e),(0,p.WJ)(t)&&(0,p.RB)(t,!1)}}}))}},T=function(e,t){var n,r;return(null===(n=e.startBinding)||void 0===n?void 0:n.elementId)===t.id||(null===(r=e.endBinding)||void 0===r?void 0:r.elementId)===t.id},P=function(e){return new Set((e||[]).map((function(e){return e.id})))},D=function(e,t,n,o){if(!(null==n||n.elementId!==o.id&&e.points.length>2)){var i=c.Z.getScene(e).getElement(n.elementId);if(null!=i){var a,s=\"start\"===t?-1:1,d=-1===s?0:e.points.length-1,f=d-s,p=u._.getPointAtIndexGlobalCoordinates(e,f),h=(0,l.j_)(i,n.focus,p);if(0===n.gap)a=h;else{var m=(0,l.MZ)(i,p,h,n.gap);a=0===m.length?h:m[0]}u._.movePoints(e,[{index:d,point:u._.pointFromAbsoluteCoords(e,a)}],(0,r.Z)({},\"start\"===t?\"startBinding\":\"endBinding\",n))}}},A=function(e,t,n){if(null==t||null==n)return t;var r=t.gap,o=t.focus,i=t.elementId,a=n.width,s=n.height,c=e.width,u=e.height;return{elementId:i,gap:Math.max(1,Math.min((0,l.fb)(e,a,s),r*(a<s?a\/c:s\/u))),focus:o}},L=function(e){var t=new Set(e.map((function(e){return e.id})));return e.flatMap((function(e){return(0,a.Mn)(e,!1)?Z(e).filter((function(e){return!t.has(e.id)})):(0,a.f0)(e,!1)?N(e).filter((function(e){return!t.has(e[0].id)})):[]}))},Z=function(e){return[z(e,\"start\"),z(e,\"end\")].filter((function(e){return null!=e}))},z=function(e,t){return C(R(e,t),c.Z.getScene(e))},R=function(e,t){var n=\"start\"===t?0:-1;return(0,d.AK)(u._.getPointAtIndexGlobalCoordinates(e,n))},N=function(e){return c.Z.getScene(e).getNonDeletedElements().map((function(t){if(!(0,a.Mn)(t,!1))return null;var n=B(t,\"start\",e),r=B(t,\"end\",e);return n||r?[t,n&&r?\"both\":n?\"start\":\"end\",e]:null})).filter((function(e){return null!=e}))},B=function(e,t,n){return null==e[\"start\"===t?\"startBinding\":\"endBinding\"]&&!S(e,n,t)&&(0,l.uu)(n,R(e,t))},H=function(e,t,n,r){var o=new Set,i=new Set,l=\"duplicatesServeAsOld\"===r;t.forEach((function(e){var t=e.boundElements;if(null!=t&&t.length>0&&(t.forEach((function(e){l&&!n.has(e.id)&&o.add(e.id)})),i.add(n.get(e.id))),(0,a.Mn)(e)){if(null!=e.startBinding){var r=e.startBinding.elementId;l&&!n.has(r)&&i.add(r)}if(null!=e.endBinding){var s=e.endBinding.elementId;l&&!n.has(s)&&i.add(s)}null==e.startBinding&&null==e.endBinding||o.add(n.get(e.id))}})),e.filter((function(e){var t=e.id;return o.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;(0,s.DR)(e,{startBinding:W(t,n),endBinding:W(r,n)})})),e.filter((function(e){var t=e.id;return i.has(t)})).forEach((function(e){var t=e.boundElements;null!=t&&t.length>0&&(0,s.DR)(e,{boundElements:t.map((function(e){return n.has(e.id)?{id:n.get(e.id),type:e.type}:e}))})}))},W=function(e,t){var n;if(null==e)return null;var r=e.elementId;return{focus:e.focus,gap:e.gap,elementId:null!==(n=t.get(r))&&void 0!==n?n:r}},F=function(e,t){var n=new Set(t.map((function(e){return e.id}))),r=new Set;t.forEach((function(e){var t;(0,a.f0)(e)?null===(t=e.boundElements)||void 0===t||t.forEach((function(e){n.has(e.id)||r.add(e.id)})):(0,a.Mn)(e)&&(e.startBinding&&r.add(e.startBinding.elementId),e.endBinding&&r.add(e.endBinding.elementId))})),e.filter((function(e){var t=e.id;return r.has(t)})).forEach((function(e){(0,a.f0)(e)?(0,s.DR)(e,{boundElements:K(e.boundElements,n)}):(0,a.Mn)(e)&&(0,s.DR)(e,{startBinding:U(e.startBinding,n),endBinding:U(e.endBinding,n)})}))},U=function(e,t){return null==e||t.has(e.elementId)?null:e},K=function(e,t){return e?e.filter((function(e){return!t.has(e.id)})):null}},8925:function(e,t,n){\"use strict\";n.d(t,{CM:function(){return g},IX:function(){return y},KP:function(){return j},Pi:function(){return S},UC:function(){return m},Ut:function(){return O},Y5:function(){return k},os:function(){return C},qf:function(){return h},v2:function(){return I},wC:function(){return _}});var r=n(2577),o=n(1930),i=n(6552),a=n(8234),l=n(3063),s=n(1974),c=n(5001),u=n(5710),d=n(6938);function f(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return p(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if((0,s.F9)(e))return w(e);if((0,s.bt)(e))return d._.getElementAbsoluteCoords(e,t);if((0,s.iB)(e)){var n=(0,u.tl)(e);if((0,s.Yv)(n)){var r=d._.getBoundTextElementPosition(n,e);return[r.x,r.y,r.x+e.width,r.y+e.height,r.x+e.width\/2,r.y+e.height\/2]}}return[e.x,e.y,e.x+e.width,e.y+e.height,e.x+e.width\/2,e.y+e.height\/2]},m=function(e){var t=Math.floor(e.width\/2)+1,n=e.width,r=Math.floor(e.height\/2)+1;return[t,0,n,r,t,e.height,0,r]},g=function(e){var t,n=f(e.sets);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(\"path\"===r.type)return r.ops}}catch(e){n.e(e)}finally{n.f()}return e.sets[0].ops},v=function(e,t,n,r,o){var i=1-e;return Math.pow(i,3)*t+3*Math.pow(i,2)*e*n+3*i*Math.pow(e,2)*r+Math.pow(e,3)*o},b=function(e,t,n,r){var o=t-e,i=n-t,a=3*o-6*i+3*(r-n),l=6*i-6*o,s=3*o,c=l*l-4*a*s;if(!(c>=0))return!1;var u=null,d=null,f=1\/0,p=1\/0;return 0===a?f=p=-s\/l:(f=(-l+Math.sqrt(c))\/(2*a),p=(-l-Math.sqrt(c))\/(2*a)),f>=0&&f<=1&&(u=v(f,e,t,n,r)),p>=0&&p<=1&&(d=v(p,e,t,n,r)),[u,d]},y=function(e,t){var n=[0,0],i=e.reduce((function(e,i){var a=i.op,l=i.data;if(\"move\"===a)n=l;else if(\"bcurveTo\"===a){var s=[l[0],l[1]],c=[l[2],l[3]],u=[l[4],l[5]],d=t?t.apply(void 0,s):s,f=t?t.apply(void 0,c):c,p=t?t.apply(void 0,u):u,h=t?t.apply(void 0,(0,o.Z)(n)):n;n=u;var m=function(e,t,n,r){var i=b(e[0],t[0],n[0],r[0]),a=b(e[1],t[1],n[1],r[1]),l=Math.min(e[0],r[0]),s=Math.max(e[0],r[0]);if(i){var c=i.filter((function(e){return null!==e}));l=Math.min.apply(Math,[l].concat((0,o.Z)(c))),s=Math.max.apply(Math,[s].concat((0,o.Z)(c)))}var u=Math.min(e[1],r[1]),d=Math.max(e[1],r[1]);if(a){var f=a.filter((function(e){return null!==e}));u=Math.min.apply(Math,[u].concat((0,o.Z)(f))),d=Math.max.apply(Math,[d].concat((0,o.Z)(f)))}return[l,u,s,d]}(h,d,f,p),g=(0,r.Z)(m,4),v=g[0],y=g[1],x=g[2],w=g[3];e.minX=Math.min(e.minX,v),e.minY=Math.min(e.minY,y),e.maxX=Math.max(e.maxX,x),e.maxY=Math.max(e.maxY,w)}return e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[i.minX,i.minY,i.maxX,i.maxY]},x=function(e){var t,n=1\/0,o=1\/0,i=-1\/0,a=-1\/0,l=f(e);try{for(l.s();!(t=l.n()).done;){var s=(0,r.Z)(t.value,2),c=s[0],u=s[1];n=Math.min(n,c),o=Math.min(o,u),i=Math.max(i,c),a=Math.max(a,u)}}catch(e){l.e(e)}finally{l.f()}return[n,o,i,a]},w=function(e){var t=x(e.points),n=(0,r.Z)(t,4),o=n[0],i=n[1],a=n[2],l=n[3],s=o+e.x,c=i+e.y,u=a+e.x,d=l+e.y;return[s,c,u,d,(s+u)\/2,(c+d)\/2]},k=function(e,t,n,o){var a=g(t[0]);if(a.length<1)return null;var l=\"start\"===n?1:a.length-1,s=a[l].data,c=[s[4],s[5]],u=[s[2],s[3]],d=[s[0],s[1]],f=a[l-1],p=[0,0];\"move\"===f.op?p=f.data:\"bcurveTo\"===f.op&&(p=[f.data[4],f.data[5]]);var h=function(e,t){return Math.pow(1-e,3)*c[t]+3*e*Math.pow(1-e,2)*u[t]+3*Math.pow(e,2)*(1-e)*d[t]+p[t]*Math.pow(e,3)},m=\"start\"===n?p:c,v=(0,r.Z)(m,2),b=v[0],y=v[1],x=[h(.3,0),h(.3,1)],w=x[0],k=x[1],E=Math.hypot(b-w,y-k),S=(b-w)\/E,j=(y-k)\/E,_={arrow:30,bar:15,dot:15,triangle:15}[o],O=0;if(\"arrow\"===o){var C=(0,r.Z)(e.points[e.points.length-1],2),I=C[0],M=C[1],T=e.points.length>1?e.points[e.points.length-2]:[0,0],P=(0,r.Z)(T,2),D=P[0],A=P[1];O=Math.hypot(I-D,M-A)}else for(var L=0;L<e.points.length;L++){var Z=e.points[L-1]||[0,0],z=(0,r.Z)(Z,2),R=z[0],N=z[1],B=(0,r.Z)(e.points[L],2),H=B[0],W=B[1];O+=Math.hypot(H-R,W-N)}var F=Math.min(_,O\/2),U=b-S*F,K=y-j*F;if(\"dot\"===o)return[b,y,Math.hypot(K-y,U-b)+e.strokeWidth];var Y={arrow:20,bar:90,triangle:25}[o],G=(0,i.U1)(U,K,b,y,-Y*Math.PI\/180),V=(0,r.Z)(G,2),X=V[0],q=V[1],J=(0,i.U1)(U,K,b,y,Y*Math.PI\/180),$=(0,r.Z)(J,2);return[b,y,X,q,$[0],$[1]]},E=function(e,t,n){var o;if(e.points.length<2){var s=(0,r.Z)(e.points[0],2),c=s[0],f=s[1],p=(0,i.U1)(e.x+c,e.y+f,t,n,e.angle),h=(0,r.Z)(p,2),m=h[0],v=h[1],b=[m,v,m,v],x=(0,u.WJ)(e);if(x){var w=d._.getMinMaxXYWithBoundText(e,[m,v,m,v],x);b=[w[0],w[1],w[2],w[3]]}return b}var k=null===(o=(0,l.R2)(e))||void 0===o?void 0:o[0],E=null!=k?k:function(e){var t=a.Z.generator(),n=(0,l.i)(e);return t[e.roundness?\"curve\":n.fill?\"polygon\":\"linearPath\"](e.points,n)}(e),S=g(E),j=y(S,(function(r,o){return(0,i.U1)(e.x+r,e.y+o,t,n,e.angle)})),_=[j[0],j[1],j[2],j[3]],O=(0,u.WJ)(e);if(O){var C=d._.getMinMaxXYWithBoundText(e,_,O);_=[C[0],C[1],C[2],C[3]]}return _},S=function(e){var t,n=h(e),o=(0,r.Z)(n,6),a=o[0],l=o[1],c=o[2],u=o[3],d=o[4],f=o[5];if((0,s.F9)(e)){var p=x(e.points.map((function(t){var n=(0,r.Z)(t,2),o=n[0],a=n[1];return(0,i.U1)(o,a,d-e.x,f-e.y,e.angle)}))),m=(0,r.Z)(p,4),g=m[0],v=m[1],b=m[2],y=m[3];return[g+e.x,v+e.y,b+e.x,y+e.y]}if((0,s.bt)(e))t=E(e,d,f);else if(\"diamond\"===e.type){var w=(0,i.U1)(d,l,d,f,e.angle),k=(0,r.Z)(w,2),S=k[0],j=k[1],_=(0,i.U1)(d,u,d,f,e.angle),O=(0,r.Z)(_,2),C=O[0],I=O[1],M=(0,i.U1)(a,f,d,f,e.angle),T=(0,r.Z)(M,2),P=T[0],D=T[1],A=(0,i.U1)(c,f,d,f,e.angle),L=(0,r.Z)(A,2),Z=L[0],z=L[1];t=[Math.min(S,C,P,Z),Math.min(j,I,D,z),Math.max(S,C,P,Z),Math.max(j,I,D,z)]}else if(\"ellipse\"===e.type){var R=(c-a)\/2,N=(u-l)\/2,B=Math.cos(e.angle),H=Math.sin(e.angle),W=Math.hypot(R*B,N*H),F=Math.hypot(N*B,R*H);t=[d-W,f-F,d+W,f+F]}else{var U=(0,i.U1)(a,l,d,f,e.angle),K=(0,r.Z)(U,2),Y=K[0],G=K[1],V=(0,i.U1)(a,u,d,f,e.angle),X=(0,r.Z)(V,2),q=X[0],J=X[1],$=(0,i.U1)(c,u,d,f,e.angle),Q=(0,r.Z)($,2),ee=Q[0],te=Q[1],ne=(0,i.U1)(c,l,d,f,e.angle),re=(0,r.Z)(ne,2),oe=re[0],ie=re[1];t=[Math.min(Y,q,ee,oe),Math.min(G,J,te,ie),Math.max(Y,q,ee,oe),Math.max(G,J,te,ie)]}return t},j=function(e){if(!e.length)return[0,0,0,0];var t=1\/0,n=-1\/0,o=1\/0,i=-1\/0;return e.forEach((function(e){var a=S(e),l=(0,r.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3];t=Math.min(t,s),o=Math.min(o,c),n=Math.max(n,u),i=Math.max(i,d)})),[t,o,n,i]},_=function(e,t,n,o){if(!(0,s.bt)(e)&&!(0,s.F9)(e))return[e.x,e.y,e.x+t,e.y+n];var i,u=(0,c.z)(0,t,(0,c.z)(1,n,e.points,o),o);if((0,s.F9)(e))i=x(u);else{var d=a.Z.generator(),f=e.roundness?d.curve(u,(0,l.i)(e)):d.linearPath(u,(0,l.i)(e)),p=g(f);i=y(p)}var h=i,m=(0,r.Z)(h,4),v=m[0],b=m[1],w=m[2],k=m[3];return[v+e.x,b+e.y,w+e.x,k+e.y]},O=function(e,t){var n=a.Z.generator(),o=null==e.roundness?n.linearPath(t,(0,l.i)(e)):n.curve(t,(0,l.i)(e)),i=g(o),s=y(i),c=(0,r.Z)(s,4),u=c[0],d=c[1],f=c[2],p=c[3];return[u+e.x,d+e.y,f+e.x,p+e.y]},C=function(e,t){if(!e.length)return[0,0,0,0];var n=1\/0,o=e[0];return e.forEach((function(e){var a=S(e),l=(0,r.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3],f=(0,i.LW)((s+u)\/2,(c+d)\/2,t.x,t.y);f<n&&(n=f,o=e)})),S(o)},I=function(e){var t=j(e),n=(0,r.Z)(t,4),o=n[0],i=n[1],a=n[2],l=n[3];return{minX:o,minY:i,maxX:a,maxY:l,width:a-o,height:l-i,midX:(o+a)\/2,midY:(i+l)\/2}}},2325:function(e,t,n){\"use strict\";n.d(t,{uu:function(){return F},T_:function(){return ae},j_:function(){return le},oT:function(){return Y},wX:function(){return R},MZ:function(){return se},wB:function(){return N},Qu:function(){return B},pX:function(){return W},fb:function(){return U}});var r=n(2577),o=function(e,t){return[0,0,0,0,t,e,1,0]},i=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[0,0,0,0,0,0,0,0];if(t<0||t>7)throw new Error(\"Expected `index` between 0 and 7, got `\".concat(t,\"`\"));return 0!==e&&(n[t]=e),n},a=function(e){return[e[0],e[1],e[2],e[3],-e[4],-e[5],-e[6],-e[7]]},l=function(e,t){return m(t)?[e[0]-t,e[1],e[2],e[3],e[4],e[5],e[6],e[7]]:[e[0]-t[0],e[1]-t[1],e[2]-t[2],e[3]-t[3],e[4]-t[4],e[5]-t[5],e[6]-t[6],e[7]-t[7]]},s=function(e,t){return m(t)?[e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t]:[c(e,t),t[1]*e[0]+t[0]*e[1]-t[4]*e[2]+t[5]*e[3]+t[2]*e[4]-t[3]*e[5]-t[7]*e[6]-t[6]*e[7],t[2]*e[0]+t[0]*e[2]-t[6]*e[3]+t[3]*e[6],t[3]*e[0]+t[6]*e[2]+t[0]*e[3]-t[2]*e[6],t[4]*e[0]+t[2]*e[1]-t[1]*e[2]+t[7]*e[3]+t[0]*e[4]+t[6]*e[5]-t[5]*e[6]+t[3]*e[7],t[5]*e[0]-t[3]*e[1]+t[7]*e[2]+t[1]*e[3]-t[6]*e[4]+t[0]*e[5]+t[4]*e[6]+t[2]*e[7],t[6]*e[0]+t[3]*e[2]-t[2]*e[3]+t[0]*e[6],t[7]*e[0]+t[6]*e[1]+t[5]*e[2]+t[4]*e[3]+t[3]*e[4]+t[2]*e[5]+t[1]*e[6]+t[0]*e[7]]},c=function(e,t){return t[0]*e[0]+t[2]*e[2]+t[3]*e[3]-t[6]*e[6]},u=function(e,t){return[d(e,t),e[1]*t[7]+e[4]*t[5]-e[5]*t[4]+e[7]*t[1],e[2]*t[7]-e[4]*t[6]+e[6]*t[4]+e[7]*t[2],e[3]*t[7]+e[5]*t[6]-e[6]*t[5]+e[7]*t[3],e[4]*t[7]+e[7]*t[4],e[5]*t[7]+e[7]*t[5],e[6]*t[7]+e[7]*t[6],e[7]*t[7]]},d=function(e,t){return e[0]*t[7]+e[1]*t[6]+e[2]*t[5]+e[3]*t[4]+e[4]*t[3]+e[5]*t[2]+e[6]*t[1]+e[7]*t[0]},f=function(e){return Math.sqrt(Math.abs(e[0]*e[0]-e[2]*e[2]-e[3]*e[3]+e[6]*e[6]))},p=function(e){var t=f(e);if(0===t||1===t)return e;var n=e[6]<0?-1:1;return s(e,n\/t)},h=function(e){var t=function(e){return Math.sqrt(Math.abs(e[7]*e[7]-e[5]*e[5]-e[4]*e[4]+e[1]*e[1]))}(e);return 0===t||1===t?e:s(e,1\/t)},m=function(e){return\"number\"==typeof e},g=(i(1,1),i(1,2),i(1,3),i(1,4),i(1,5),i(1,6),i(1,7),function(e,t,n){return p([0,n,e,t,0,0,0,0])}),v=function(e,t){return p(u(t,e))},b=function(e,t){return n=e,[(r=t)[0]*n[0]+r[2]*n[2]+r[3]*n[3]-r[6]*n[6],r[1]*n[0]+r[0]*n[1]-r[4]*n[2]+r[5]*n[3]+r[2]*n[4]-r[3]*n[5]-r[7]*n[6]-r[6]*n[7],r[2]*n[0]+r[0]*n[2]-r[6]*n[3]+r[3]*n[6],r[3]*n[0]+r[6]*n[2]+r[0]*n[3]-r[2]*n[6],r[4]*n[0]+r[7]*n[3]+r[0]*n[4]+r[3]*n[7],r[5]*n[0]+r[7]*n[2]+r[0]*n[5]+r[2]*n[7],r[6]*n[0]+r[0]*n[6],r[7]*n[0]+r[0]*n[7]];var n,r},y=function(e){var t=(0,r.Z)(e,2),n=t[0];return[0,0,0,0,t[1],n,1,0]},x=function(e){return[e[5],e[4]]},w=function(e,t){return p((n=e,[(r=t)[0]*n[0],r[1]*n[0]+r[0]*n[1],r[2]*n[0]+r[0]*n[2],r[3]*n[0]+r[0]*n[3],r[4]*n[0]+r[2]*n[1]-r[1]*n[2]+r[0]*n[4],r[5]*n[0]-r[3]*n[1]+r[1]*n[3]+r[0]*n[5],r[6]*n[0]+r[3]*n[2]-r[2]*n[3]+r[0]*n[6],r[7]*n[0]+r[6]*n[1]+r[5]*n[2]+r[4]*n[3]+r[3]*n[4]+r[2]*n[5]+r[1]*n[6]]));var n,r},k=function(e,t){return f(u(e,t))},E=function(e,t){return d(e,t)},S=function(e){return[0,0,0,0,e[4],e[5],0,0]},j=function(e,t){return n=s(e,Math.sin(t\/2)),r=Math.cos(t\/2),m(r)?[n[0]+r,n[1],n[2],n[3],n[4],n[5],n[6],n[7]]:[n[0]+r[0],n[1]+r[1],n[2]+r[2],n[3]+r[3],n[4]+r[4],n[5]+r[5],n[6]+r[6],n[7]+r[7]];var n,r},_=function(e,t){return p(s(s(e,t),a(e)))},O=n(6552),C=n(1493),I=n(8925),M=n(3063),T=n(1974),P=n(1047),D=n(6340),A=n(267),L=n(5710);function Z(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return z(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var R=function e(t,n,r,o){var i=10\/n.zoom.value,a=[r,o];if(H(n,t)&&(0,A.oY)([t],n))return W(t,a,i);var l=(0,L.WJ)(t);if(l&&e(l,n,r,o))return!0;return B(t,n,a)},N=function(e,t,n,r){var o=10\/t.zoom.value,i=(0,L.WJ)(e);return(!i||!R(i,t,n,r))&&(!B(e,t,[n,r])&&W(e,[n,r],o))},B=function(e,t,n){var r=10\/t.zoom.value,o=(0,P.iB)(e)?G:function(e){if(\"arrow\"===e.type)return!1;if(\"freedraw\"===e.type)return!0;var t=!(0,D.Qm)(e.backgroundColor)||(0,T.Xo)(e);return\"line\"===e.type?t&&(0,O.g6)(e.points):t||(0,T.pC)(e)}(e)?V:X;return K({element:e,point:n,threshold:r,check:o})},H=function(e,t){return e.selectedElementIds[t.id]},W=function(e,t,n){var o=(0,r.Z)(t,2),i=o[0],a=o[1],l=(0,I.qf)(e),s=(0,r.Z)(l,4),c=s[0],u=s[1],d=s[2],f=s[3],p=(c+d)\/2,h=(u+f)\/2,m=(0,O.U1)(i,a,p,h,-e.angle),g=(0,r.Z)(m,2),v=g[0],b=g[1];return v>c-n&&v<d+n&&b>u-n&&b<f+n},F=function(e,t){var n=t.x,r=t.y,o=U(e,e.width,e.height);return K({element:e,point:[n,r],threshold:o,check:q})},U=function(e,t,n){var r=(\"diamond\"===e.type?1\/Math.sqrt(2):1)*Math.min(t,n);return Math.max(16,Math.min(.25*r,32))},K=function(e){switch(e.element.type){case\"rectangle\":case\"image\":case\"text\":case\"diamond\":case\"ellipse\":var t=Y(e.element,e.point);return e.check(t,e.threshold);case\"freedraw\":return!!e.check(J(e.element,e.point),e.threshold)&&te(e.element,e.point,e.threshold);case\"arrow\":case\"line\":return ne(e);case\"selection\":return console.warn(\"This should not happen, we need to investigate why it does.\"),!1}},Y=function(e,t){switch(e.type){case\"rectangle\":case\"image\":case\"text\":return J(e,t);case\"diamond\":return $(e,t);case\"ellipse\":return Q(e,t)}},G=function(e,t){return e<0},V=function(e,t){return e<t},X=function(e,t){return Math.abs(e)<t},q=function(e,t){return 0<=e&&e<t},J=function(e,t){var n=re(e,t),o=(0,r.Z)(n,4),i=o[1],a=o[2],l=o[3];return Math.max(E(i,g(0,1,-l)),E(i,g(1,0,-a)))},$=function(e,t){var n=re(e,t),o=(0,r.Z)(n,4),i=o[1],a=o[2],l=o[3],s=g(l,a,-l*a);return E(i,s)},Q=function(e,t){var n,o=ee(e,t),i=(0,r.Z)(o,2),a=i[0],l=i[1];return n=l,-Math.sign(n[1])*E(a,l)},ee=function(e,t){var n=re(e,t),i=(0,r.Z)(n,4),a=i[1],l=i[2],s=i[3],c=x(a),u=(0,r.Z)(c,2),d=u[0],f=u[1],p=.707,h=.707,m=l,g=s;[0,1,2,3].forEach((function(e){var t=m*p,n=g*h,r=(m*m-g*g)*Math.pow(p,3)\/m,o=(g*g-m*m)*Math.pow(h,3)\/g,i=t-r,a=n-o,l=d-r,s=f-o,c=Math.hypot(a,i),u=Math.hypot(s,l);p=Math.min(1,Math.max(0,(l*c\/u+r)\/m)),h=Math.min(1,Math.max(0,(s*c\/u+o)\/g));var v=Math.hypot(h,p);p\/=v,h\/=v}));var y,w=o(m*p,g*h);return[a,b(v(a,y=w),y)]},te=function(e,t,n){var o,i;if(0===e.angle)o=t[0]-e.x,i=t[1]-e.y;else{var a=(0,I.qf)(e),l=(0,r.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3],f=(0,O.xj)(t,[s+(u-s)\/2,c+(d-c)\/2],-e.angle);o=f[0]-e.x,i=f[1]-e.y}var p,h=(0,r.Z)(e.points,2),m=h[0],g=h[1];if((0,O.LW)(m[0],m[1],o,i)<n||(0,O.LW)(g[0],g[1],o,i)<n)return!0;for(var v=0;v<e.points.length;v++){var b=[g[0]-m[0],g[1]-m[1]],y=Math.hypot(b[1],b[0]),x=[b[0]\/y,b[1]\/y],w=[o-m[0],i-m[1]],k=(w[0]*x[0]+w[1]*x[1])\/Math.hypot(x[1],x[0]);p=[m[0]+x[0]*k,m[1]+x[1]*k];var E=(0,O.LW)(p[0],p[1],m[0],m[1]),S=(0,O.LW)(p[0],p[1],g[0],g[1]);if(p=S<E&&E>y?g:E<S&&S>y?m:p,Math.hypot(i-p[1],o-p[0])<n)return!0;m=g,g=e.points[v+1]}var j=(0,M.R2)(e);return!(!j||!j.sets.length)&&be(j,o,i,n)},ne=function(e){var t=e.element,n=e.threshold;if(!(0,M.R2)(t))return!1;var o=re(e.element,e.point),i=(0,r.Z)(o,4),a=i[0],l=i[1],s=i[2],c=i[3],u=g(0,1,-c),d=g(1,0,-s);if(!V(E(l,u),n)||!V(E(l,d),n))return!1;var f=x(a),p=(0,r.Z)(f,2),h=p[0],m=p[1],v=(0,M.R2)(t);if(!v)return!1;if(e.check===V&&v.some((function(e){return ve(e,h,m,t.roundness?\"round\":\"sharp\")})))return!0;return v.some((function(e){return be(e,h,m,n)}))},re=function(e,t){var n,o=y(t),i=(0,I.qf)(e),a=(0,r.Z)(i,4),s=a[0],c=a[1],u=a[2],d=a[3],f=(0,I.qf)(e),p=ie([s,c,u,d]),h=j(p,e.angle),m=_(h,o),g=function(e){return[0,0,0,0,Math.abs(e[4]),Math.abs(e[5]),1,0]}(l(m,S(p))),v=(n=e.x,[0,0,0,0,e.y,n,0,0]),b=l(m,v),x=(0,r.Z)(f,4),w=x[0],k=x[1];return[b,g,(x[2]-w)\/2,(x[3]-k)\/2]},oe=function(e){var t=(0,I.qf)(e),n=(0,r.Z)(t,4),o=n[0],i=n[1],l=n[2],c=n[3],u=ie([o,i,l,c]),d=j(u,e.angle),f=a(function(e){return[1,0,0,0,-.5*e[5],.5*e[4],0,0]}(S(u)));return s(f,d)},ie=function(e){var t=(0,r.Z)(e,4),n=t[0],i=t[1],a=t[2],l=t[3];return o((n+a)\/2,(i+l)\/2)},ae=function(e,t,n){var r=oe(e),o=_(r,y(t)),i=_(r,y(n)),a=v(o,i),l=e.height\/e.width,s=e.width\/2,c=e.height\/2,u=a[2],d=a[3],f=a[1],p=Math.abs(d),h=Math.abs(u);switch(e.type){case\"rectangle\":case\"image\":case\"text\":return f\/(s*(h+l*p));case\"diamond\":return p<h?f\/(h*s):f\/(p*c);case\"ellipse\":return f\/(s*Math.sqrt(Math.pow(u,2)+Math.pow(l,2)*Math.pow(d,2)))}},le=function(e,t,n){if(0===t){var o=(0,I.qf)(e),i=(0,r.Z)(o,4),l=i[0],s=i[1],c=i[2],u=i[3],d=ie([l,s,c,u]);return x(d)}var f,p=oe(e),h=_(p,y(n)),m=a(p);switch(e.type){case\"rectangle\":case\"image\":case\"text\":case\"diamond\":f=ge(e,t,h);break;case\"ellipse\":f=me(e,t,h)}return x(_(m,f))},se=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=oe(e),i=_(o,y(t)),l=_(o,y(n)),s=v(i,l),c=a(o),u=ce(e,s,i,r);return u.map((function(e){return x(_(c,e))}))},ce=function(e,t,n){var r,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;switch(e.type){case\"rectangle\":case\"image\":case\"text\":case\"diamond\":var i=ue(e);r=i.flatMap((function(e,n){var r=[e,i[(n+1)%4]];return de(t,fe(r,o))})).concat(i.flatMap((function(e){return he(e,o,t)})));break;case\"ellipse\":r=pe(e,o,t)}if(r.length<2)return[];var a=r.sort((function(e,t){return k(e,n)-k(t,n)}));return[a[0],a[a.length-1]]},ue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=t*e.width\/2,r=t*e.height\/2;switch(e.type){case\"rectangle\":case\"image\":case\"text\":return[o(n,r),o(n,-r),o(-n,-r),o(-n,r)];case\"diamond\":return[o(0,r),o(n,0),o(0,-r),o(-n,0)]}},de=function(e,t){var n=(0,r.Z)(t,2),o=n[0],i=n[1];return E(o,e)*E(i,e)>=0?[]:[w(e,v(o,i))]},fe=function(e,t){var n=(0,r.Z)(e,2),o=n[0],i=n[1],a=function(e,t){var n=.5*t;return[1,0,0,0,n*e[4],n*e[5],0,0]}(function(e,t){return h([0,0,0,0,t[4]-e[4],t[5]-e[5],0,0])}(o,i),t);return[_(a,o),_(a,i)]},pe=function(e,t,n){var r=e.width\/2+t,i=e.height\/2+t,a=n[2],l=n[3],s=n[1],c=r*r*a*a+i*i*l*l,u=c-s*s;if(0===c||u<=0)return[];var d=Math.sqrt(u),f=-r*r*a*s,p=-i*i*l*s;return[o((f+r*i*l*d)\/c,(p-r*i*a*d)\/c),o((f-r*i*l*d)\/c,(p+r*i*a*d)\/c)]},he=function(e,t,n){if(0===t)return 0===E(n,e)?[e]:[];var i=n[2],a=n[3],l=n[1],s=x(e),c=(0,r.Z)(s,2),u=c[0],d=c[1],f=i*i+a*a,p=t*t*f-Math.pow(i*u+a*d+l,2);if(0===f||p<=0)return[];var h=Math.sqrt(p),m=u*a*a-d*i*a-i*l,g=d*i*i-u*i*a-a*l;return[o((m+a*h)\/f,(g-i*h)\/f),o((m-a*h)\/f,(g+i*h)\/f)]},me=function(e,t,n){var i=Math.abs(t),a=e.width*i\/2,l=e.height*i\/2,s=Math.sign(t),c=x(n),u=(0,r.Z)(c,2),d=u[0],f=u[1],p=0===f?1e-4:f,h=Math.pow(d,2)*Math.pow(l,2)+Math.pow(p,2)*Math.pow(a,2),m=(-d*Math.pow(l,2)+s*p*Math.sqrt(Math.max(0,h-Math.pow(a,2)*Math.pow(l,2))))\/h,g=(-m*d-1)\/p;0===g&&(g=.01*(Object.is(g,-0)?-1:1));var v=-Math.pow(a,2)*m\/(Math.pow(g,2)*Math.pow(l,2)+Math.pow(m,2)*Math.pow(a,2));return o(v,(-m*v-1)\/g)},ge=function(e,t,n){var r=Math.abs(t),o=Math.sign(t),i=ue(e,r),a=0,l=null;return i.forEach((function(e){var t=o*v(n,e)[1];t>a&&(a=t,l=e)})),l},ve=function(e,t,n,r){var o,i=[],a=!1,l=Z((0,I.CM)(e));try{for(l.s();!(o=l.n()).done;){var s=o.value;\"move\"===s.op?(a=!a)&&i.push([s.data[0],s.data[1]]):\"bcurveTo\"===s.op?a&&(i.push([s.data[0],s.data[1]]),i.push([s.data[2],s.data[3]]),i.push([s.data[4],s.data[5]])):\"lineTo\"===s.op&&a&&i.push([s.data[0],s.data[1]])}}catch(e){l.e(e)}finally{l.f()}if(i.length>=4){if(\"sharp\"===r)return(0,O.c9)(i,t,n);var c=(0,C.s)(i,10,5);return(0,O.c9)(c,t,n)}return!1},be=function(e,t,n,o){var i=(0,I.CM)(e),a=[0,0];return i.some((function(i,l){var s=i.op,c=i.data;if(\"move\"===s)a=c;else{if(\"bcurveTo\"===s){var u=[c[0],c[1]],d=[c[2],c[3]],f=[c[4],c[5]],p=a;a=f;var h=function(e,t,n,o,i,a){for(var l=(0,r.Z)(i,2),s=l[0],c=l[1],u=function(r,i){return Math.pow(1-r,3)*o[i]+3*r*Math.pow(1-r,2)*n[i]+3*Math.pow(r,2)*(1-r)*t[i]+e[i]*Math.pow(r,3)},d=0;d<=1;){var f=u(d,0),p=u(d,1);if(Math.sqrt(Math.pow(f-s,2)+Math.pow(p-c,2))<a)return!0;d+=.01}return!1}(p,u,d,f,[t,n],o);return h}if(\"lineTo\"===s)return ve(e,t,n,\"sharp\");\"qcurveTo\"===s&&console.warn(\"qcurveTo is not implemented yet\")}return!1}))}},5637:function(e,t,n){\"use strict\";n.d(t,{PK:function(){return p},Xx:function(){return h},bp:function(){return g},oA:function(){return m}});var r=n(2577),o=n(7169),i=n(8950),a=n(2975),l=n.n(a),s=n(2335),c=n(8211),u=n(1974);function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p=function(e){return new Promise((function(t,n){var r=new Image;r.onload=function(){t(r)},r.onerror=function(e){n(e)},r.src=e}))},h=function(){var e=(0,i.Z)(l().mark((function e(t){var n,r,o,a,c;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.fileIds,r=t.files,o=t.imageCache,a=new Map,c=new Map,e.next=5,Promise.all(n.reduce((function(e,t){var n=r[t];return n&&!a.has(t)?(a.set(t,!0),e.concat((0,i.Z)(l().mark((function e(){var r,i,a;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,n.mimeType!==s.LO.binary){e.next=3;break}throw new Error(\"Only images can be added to ImageCache\");case 3:return r=p(n.dataURL),i={image:r,mimeType:n.mimeType},o.set(t,i),e.next=8,r;case 8:a=e.sent,o.set(t,f(f({},i),{},{image:a})),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(0),c.set(t,!0);case 15:case\"end\":return e.stop()}}),e,null,[[0,12]])})))())):e}),[]));case 5:return e.abrupt(\"return\",{imageCache:o,updatedFiles:a,erroredFiles:c});case 6:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),m=function(e){return e.filter((function(e){return(0,u.wi)(e)}))},g=function(){var e=(0,i.Z)(l().mark((function e(t){var n,o,i,a,u,d,f;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=(new DOMParser).parseFromString(t,s.LO.svg),o=n.querySelector(\"svg\"),!n.querySelector(\"parsererror\")&&\"svg\"===(null==(l=o)?void 0:l.nodeName.toLowerCase())){e.next=7;break}throw new Error((0,c.t)(\"errors.invalidSVGString\"));case 7:return o.hasAttribute(\"xmlns\")||o.setAttribute(\"xmlns\",s.hR),o.hasAttribute(\"width\")&&o.hasAttribute(\"height\")||(i=o.getAttribute(\"viewBox\"),a=o.getAttribute(\"width\")||\"50\",u=o.getAttribute(\"height\")||\"50\",i&&(d=i.match(\/\\d+ +\\d+ +(\\d+) +(\\d+)\/))&&(f=(0,r.Z)(d,3),a=f[1],u=f[2]),o.setAttribute(\"width\",a),o.setAttribute(\"height\",u)),e.abrupt(\"return\",o.outerHTML);case 10:case\"end\":return e.stop()}var l}),e)})));return function(t){return e.apply(this,arguments)}}()},1047:function(e,t,n){\"use strict\";n.d(t,{ox:function(){return p.ox},BQ:function(){return H},_M:function(){return W},EJ:function(){return M},o8:function(){return O},Sy:function(){return d.Sy},os:function(){return f.os},KP:function(){return f.KP},Un:function(){return k},$V:function(){return I},qf:function(){return f.qf},Pi:function(){return f.Pi},jt:function(){return y},o4:function(){return c},Lm:function(){return R},Qp:function(){return u},T:function(){return E.T},xx:function(){return E.xx},Uo:function(){return Z},n2:function(){return x},PC:function(){return p.PC},kK:function(){return p.kK},n_:function(){return z},wX:function(){return h.wX},r2:function(){return i.r2},wB:function(){return h.wB},QD:function(){return l},qP:function(){return N},iB:function(){return i.iB},Up:function(){return d.Up},vw:function(){return d.vw},y8:function(){return d.y8},VL:function(){return d.VL},oN:function(){return j.oN},JZ:function(){return d.JZ},RT:function(){return D},b_:function(){return T.b_},vY:function(){return E.vY},N_:function(){return d.N_}});var r=n(7169),o=n(1935),i=n(1974),a=n(2335),l=function(e){return(0,i.bt)(e)||(0,i.F9)(e)?e.points.length<2:0===e.width&&0===e.height},s=function(e,t,n){var r=Math.abs(t),o=Math.abs(n);if(\"line\"===e||\"arrow\"===e||\"freedraw\"===e){var i=Math.round(Math.atan(o\/r)\/a.ay)*a.ay;0===i?n=0:i===Math.PI\/2?t=0:n=r*Math.tan(i)*Math.sign(n)||n}else\"selection\"!==e&&(n=r*Math.sign(n));return{width:t,height:n}},c=function(e,t,n,r){var o=n-e,i=r-t,l=Math.round(Math.atan(i\/o)\/a.ay)*a.ay;if(0===l)i=0;else if(l===Math.PI\/2)o=0;else{var s=Math.tan(l),c=t-s*e,u=-1\/s,d=r-u*n;o=(-1*d- -1*c)\/(-1*s- -1*u)-e,i=(c*u-d*s)\/(-1*s- -1*u)-t}return{width:o,height:i}},u=function(e){var t={width:e.width,height:e.height,x:e.x,y:e.y};if(e.width<0){var n=Math.abs(e.width);t.width=n,t.x=e.x-n}if(e.height<0){var r=Math.abs(e.height);t.height=r,t.y=e.y-r}return t},d=n(2791),f=n(8925),p=n(267),h=n(2325),m=n(2577),g=n(2726),v=[\"rotation\"],b=function(e,t,n){return t>=e[0]&&t<=e[0]+e[2]&&n>=e[1]&&n<=e[1]+e[3]},y=function(e,t,n,r,o,i){return e.reduce((function(e,a){if(e)return e;var l=function(e,t,n,r,o,i){if(!t.selectedElementIds[e.id])return!1;var a=(0,p.PC)(e,o,i),l=a.rotation,s=(0,g.Z)(a,v);if(l&&b(l,n,r))return\"rotation\";var c=Object.keys(s).filter((function(e){var t=s[e];return!!t&&b(t,n,r)}));return c.length>0&&c[0]}(a,t,n,r,o,i);return l?{element:a,transformHandleType:l}:null}),null)},x=function(e,t,n,r,o){var i=(0,m.Z)(e,4),a=i[0],l=i[1],s=i[2],c=i[3],u=(0,p.kK)([a,l,s,c,(a+s)\/2,(l+c)\/2],0,r,o,p.ox);return Object.keys(u).find((function(e){var r=u[e];return r&&b(r,t,n)}))||!1},w=[\"ns\",\"nesw\",\"ew\",\"nwse\"],k=function(e){var t=e.element,n=e.transformHandleType,r=t&&Math.sign(t.height)*Math.sign(t.width)==-1,o=null;switch(n){case\"n\":case\"s\":o=\"ns\";break;case\"w\":case\"e\":o=\"ew\";break;case\"nw\":case\"se\":o=r?\"nesw\":\"nwse\";break;case\"ne\":case\"sw\":o=r?\"nwse\":\"nesw\";break;case\"rotation\":return\"grab\"}return o&&t&&(o=function(e,t){var n=w.indexOf(e);if(n>=0){var r=Math.round(t\/(Math.PI\/4));e=w[(n+r)%w.length]}return e}(o,t.angle)),o?\"\".concat(o,\"-resize\"):\"\"},E=n(8634),S=n(8290),j=n(5710),_=n(242),O=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,l=arguments.length>7?arguments[7]:void 0,s=(0,f.KP)(t),c=(0,m.Z)(s,2),u=c[0],d=c[1],p={x:n-u,y:r-d};t.forEach((function(n){if(C(o,i,a,e,n,p),!n.groupIds.length||l.editingGroupId&&!(0,_.zq)(l,n)){var r=(0,j.WJ)(n);r&&C(o,i,a,e,r,p)}(0,S.Ww)(n,{simultaneouslyUpdated:t})}))},C=function(e,t,n,r,i,a){var l,s;if(e){var c=e&&t<n,u=e&&t>n,d=r.originalElements.get(i.id);l=c&&d?d.x:i.x+a.x,s=u&&d?d.y:i.y+a.y}else l=i.x+a.x,s=i.y+a.y;(0,o.DR)(i,{x:l,y:s})},I=function(e,t,n){var r=(0,f.KP)(e),o=(0,m.Z)(r,2);return[t-o[0],n-o[1]]},M=function(e,t,n,r,i,a,l,c,u,d,f){if(u&&\"selection\"!==e.type)if(f)c=l\/f;else{if(Math.abs(a-r)>Math.abs(i-n)){var p=s(t,c,i<n?-l:l);l=p.width,c=p.height}else{var h=s(t,l,a<r?-c:c);l=h.width,c=h.height}c<0&&(c=-c)}var m=i<n?n-l:n,g=a<r?r-c:r;d&&(m=n-(l+=l)\/2,g=r-(c+=c)\/2),0!==l&&0!==c&&(0,o.DR)(e,{x:m,y:g,width:l,height:c})},T=n(6906),P=n(75),D=function(e,t){return Boolean(!e.viewModeEnabled&&\"custom\"!==e.activeTool.type&&(e.editingElement||\"selection\"!==e.activeTool.type&&\"eraser\"!==e.activeTool.type&&\"hand\"!==e.activeTool.type)||(0,P.eD)(t,e).length)};function A(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function L(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?A(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):A(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Z=function(e){return e.reduce((function(e,t){return e+t.version}),0)},z=function(e){return e.filter((function(e){return!e.isDeleted&&!l(e)}))},R=function(e){return e.filter((function(e){return!e.isDeleted}))},N=function(e){return!e.isDeleted},B=function(e){return R(e).map((function(e){return(0,i.dt)(e.type)?L(L({},e),{},{lastCommittedPoint:null}):e}))},H=function(e){return B(e)},W=function(e){return B(e)}},6938:function(e,t,n){\"use strict\";n.d(t,{_:function(){return j}});var r=n(1930),o=n(7169),i=n(2577),a=n(8821),l=n(5169),s=n(6552),c=n(1047),u=n(8925),d=n(1935),f=n(1564),p=n(8290),h=n(6340),m=n(1974),g=n(6066),v=n(5710),b=n(3063),y=n(2335);function x(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return w(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return w(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var S={version:null,points:[],zoom:null},j=function(){function e(t,n){(0,a.Z)(this,e),this.elementId=t.id,f.Z.mapElementToScene(this.elementId,n),e.normalizePoints(t),this.selectedPointsIndices=null,this.lastUncommittedPoint=null,this.isDragging=!1,this.pointerOffset={x:0,y:0},this.startBindingElement=\"keep\",this.endBindingElement=\"keep\",this.pointerDownState={prevSelectedPointsIndices:null,lastClickedPoint:-1,origin:null,segmentMidpoint:{value:null,index:null,added:!1}},this.hoverPointIndex=-1,this.segmentMidPointHoveredCoords=null}return(0,l.Z)(e,null,[{key:\"getElement\",value:function(e){var t,n=null===(t=f.Z.getScene(e))||void 0===t?void 0:t.getNonDeletedElement(e);return n||null}},{key:\"handleBoxSelection\",value:function(t,n,r){var o;if(!n.editingLinearElement||\"selection\"!==(null===(o=n.draggingElement)||void 0===o?void 0:o.type))return!1;var a=n.editingLinearElement,l=a.selectedPointsIndices,s=a.elementId,u=e.getElement(s);if(!u)return!1;var d=(0,c.qf)(n.draggingElement),f=(0,i.Z)(d,4),p=f[0],h=f[1],m=f[2],g=f[3],v=e.getPointsGlobalCoordinates(u).reduce((function(e,n,r){return(n[0]>=p&&n[0]<=m&&n[1]>=h&&n[1]<=g||t.shiftKey&&null!=l&&l.includes(r))&&e.push(r),e}),[]);r({editingLinearElement:E(E({},a),{},{selectedPointsIndices:v.length?v:null})})}},{key:\"handlePointDragging\",value:function(t,n,r,o,a,l){if(!l)return!1;var s=l.selectedPointsIndices,c=l.elementId,u=e.getElement(c);if(!u)return!1;var d=u.points[l.pointerDownState.lastClickedPoint];if(s&&d){if((0,g.Ge)(t)&&1===s.length&&u.points.length>1){var f=s[0],p=u.points[0===f?1:f-1],b=e._getShiftLockedDelta(u,p,[r,o],n.gridSize),y=(0,i.Z)(b,2),x=y[0],w=y[1];e.movePoints(u,[{index:f,point:[x+p[0],w+p[1]],isDragging:f===l.pointerDownState.lastClickedPoint}])}else{var k=e.createPointAt(u,r-l.pointerOffset.x,o-l.pointerOffset.y,n.gridSize),E=k[0]-d[0],S=k[1]-d[1];e.movePoints(u,s.map((function(t){return{index:t,point:t===l.pointerDownState.lastClickedPoint?e.createPointAt(u,r-l.pointerOffset.x,o-l.pointerOffset.y,n.gridSize):[u.points[t][0]+E,u.points[t][1]+S],isDragging:t===l.pointerDownState.lastClickedPoint}}))),(0,v.WJ)(u)&&(0,v.RB)(u,!1)}if((0,m.Mn)(u,!1)){var j=[];0===s[0]&&j.push((0,h.AK)(e.getPointGlobalCoordinates(u,u.points[0])));var _=s[s.length-1];_===u.points.length-1&&j.push((0,h.AK)(e.getPointGlobalCoordinates(u,u.points[_]))),j.length&&a(u,j)}return!0}return!1}},{key:\"handlePointerUp\",value:function(t,n,r){var o,i=n.elementId,a=n.selectedPointsIndices,l=n.isDragging,c=n.pointerDownState,u=e.getElement(i);if(!u)return n;var d={};if(l&&a){var m,g=x(a);try{for(g.s();!(m=g.n()).done;){var v=m.value;if(0===v||v===u.points.length-1){(0,s.g6)(u.points,r.zoom.value)&&e.movePoints(u,[{index:v,point:0===v?u.points[u.points.length-1]:u.points[0]}]);var b=(0,p.N1)(r)?(0,p.Y9)((0,h.AK)(e.getPointAtIndexGlobalCoordinates(u,v)),f.Z.getScene(u)):null;d[0===v?\"startBindingElement\":\"endBindingElement\"]=b}}}catch(e){g.e(e)}finally{g.f()}}return E(E(E({},n),d),{},{selectedPointsIndices:l||t.shiftKey?!l&&t.shiftKey&&null!==(o=c.prevSelectedPointsIndices)&&void 0!==o&&o.includes(c.lastClickedPoint)?a&&a.filter((function(e){return e!==c.lastClickedPoint})):a:null!=a&&a.includes(c.lastClickedPoint)?[c.lastClickedPoint]:a,isDragging:!1,pointerOffset:{x:0,y:0}})}},{key:\"isSegmentTooShort\",value:function(t,n,r,o){var i=(0,s.LW)(n[0],n[1],r[0],r[1]);return t.points.length>2&&t.roundness&&(i=(0,s.eH)(t,r)),i*o.value<4*e.POINT_HANDLE_SIZE}},{key:\"getSegmentMidPoint\",value:function(t,n,r,o){var a=(0,s.H5)(n,r);if(t.points.length>2&&t.roundness){var l=(0,s.yB)(t,t.points[o]);if(l){var c=(0,s.lk)(t,t.points[o],.5),u=(0,s.N_)(l[0],l[1],l[2],l[3],c),d=(0,i.Z)(u,2),f=d[0],p=d[1];a=e.getPointGlobalCoordinates(t,[f,p])}}return a}},{key:\"getSegmentMidPointIndex\",value:function(t,n,r){var o=e.getElement(t.elementId);if(!o)return-1;for(var i=e.getEditorMidPoints(o,n),a=0;a<i.length;){if(e.arePointsEqual(r,i[a]))return a+1;a++}return-1}},{key:\"handlePointerDown\",value:function(t,n,o,a,l){var u,h={didAddPoint:!1,hitElement:null,linearElementEditor:null};if(!l)return h;var g=l.elementId,v=e.getElement(g);if(!v)return h;var b=e.getSegmentMidpointHitCoords(l,a,n),y=null;if(b&&(y=e.getSegmentMidPointIndex(l,n,b)),t.altKey&&n.editingLinearElement)return null==l.lastUncommittedPoint&&((0,d.DR)(v,{points:[].concat((0,r.Z)(v.points),[e.createPointAt(v,a.x,a.y,n.gridSize)])}),h.didAddPoint=!0),o.resumeRecording(),h.linearElementEditor=E(E({},l),{},{pointerDownState:{prevSelectedPointsIndices:l.selectedPointsIndices,lastClickedPoint:-1,origin:{x:a.x,y:a.y},segmentMidpoint:{value:b,index:y,added:!1}},selectedPointsIndices:[v.points.length-1],lastUncommittedPoint:null,endBindingElement:(0,p.Y9)(a,f.Z.getScene(v))}),h.didAddPoint=!0,h;var x=e.getPointIndexUnderCursor(v,n.zoom,a.x,a.y);if(x>=0||b)h.hitElement=v;else{var w=l.startBindingElement,k=l.endBindingElement;(0,p.N1)(n)&&(0,m.Mn)(v)&&(0,p.HG)(v,w,k)}var S=(0,c.qf)(v),j=(0,i.Z)(S,4),O=j[0],C=j[1],I=(O+j[2])\/2,M=(C+j[3])\/2,T=x>-1&&(0,s.U1)(v.x+v.points[x][0],v.y+v.points[x][1],I,M,v.angle),P=x>-1||t.shiftKey?t.shiftKey||null!==(u=l.selectedPointsIndices)&&void 0!==u&&u.includes(x)?_([].concat((0,r.Z)(l.selectedPointsIndices||[]),[x])):[x]:null;return h.linearElementEditor=E(E({},l),{},{pointerDownState:{prevSelectedPointsIndices:l.selectedPointsIndices,lastClickedPoint:x,origin:{x:a.x,y:a.y},segmentMidpoint:{value:b,index:y,added:!1}},selectedPointsIndices:P,pointerOffset:T?{x:a.x-T[0],y:a.y-T[1]}:{x:0,y:0}}),h}},{key:\"arePointsEqual\",value:function(e,t){return!e&&!t||!(!e||!t)&&(0,s.Jj)(e,t)}},{key:\"handlePointerMove\",value:function(t,n,r,o){if(!o.editingLinearElement)return null;var a=o.editingLinearElement,l=a.elementId,s=a.lastUncommittedPoint,c=e.getElement(l);if(!c)return o.editingLinearElement;var u,d=c.points,f=d[d.length-1];if(!t.altKey)return f===s&&e.deletePoints(c,[d.length-1]),E(E({},o.editingLinearElement),{},{lastUncommittedPoint:null});if((0,g.Ge)(t)&&d.length>=2){var p=d[d.length-2],h=e._getShiftLockedDelta(c,p,[n,r],o.gridSize),m=(0,i.Z)(h,2),v=m[0],b=m[1];u=[v+p[0],b+p[1]]}else u=e.createPointAt(c,n-o.editingLinearElement.pointerOffset.x,r-o.editingLinearElement.pointerOffset.y,o.gridSize);return f===s?e.movePoints(c,[{index:c.points.length-1,point:u}]):e.addPoints(c,o,[{point:u}]),E(E({},o.editingLinearElement),{},{lastUncommittedPoint:c.points[c.points.length-1]})}},{key:\"getPointGlobalCoordinates\",value:function(e,t){var n=(0,c.qf)(e),r=(0,i.Z)(n,4),o=r[0],a=r[1],l=(o+r[2])\/2,u=(a+r[3])\/2,d=e.x,f=e.y,p=(0,s.U1)(d+t[0],f+t[1],l,u,e.angle),h=(0,i.Z)(p,2);return[d=h[0],f=h[1]]}},{key:\"getPointsGlobalCoordinates\",value:function(e){var t=(0,c.qf)(e),n=(0,i.Z)(t,4),r=n[0],o=n[1],a=n[2],l=n[3],u=(r+a)\/2,d=(o+l)\/2;return e.points.map((function(t){var n=e.x,r=e.y,o=(0,s.U1)(n+t[0],r+t[1],u,d,e.angle),a=(0,i.Z)(o,2);return[n=a[0],r=a[1]]}))}},{key:\"getPointAtIndexGlobalCoordinates\",value:function(e,t){var n=t<0?e.points.length+t:t,r=(0,c.qf)(e),o=(0,i.Z)(r,4),a=o[0],l=o[1],u=(a+o[2])\/2,d=(l+o[3])\/2,f=e.points[n],p=e.x,h=e.y;return f?(0,s.U1)(p+f[0],h+f[1],u,d,e.angle):(0,s.U1)(p,h,u,d,e.angle)}},{key:\"pointFromAbsoluteCoords\",value:function(e,t){var n=(0,c.qf)(e),r=(0,i.Z)(n,4),o=r[0],a=r[1],l=(o+r[2])\/2,u=(a+r[3])\/2,d=(0,s.U1)(t[0],t[1],l,u,-e.angle),f=(0,i.Z)(d,2),p=f[0],h=f[1];return[p-e.x,h-e.y]}},{key:\"getPointIndexUnderCursor\",value:function(t,n,r,o){for(var i=e.getPointsGlobalCoordinates(t),a=i.length;--a>-1;){var l=i[a];if((0,s.LW)(r,o,l[0],l[1])*n.value<e.POINT_HANDLE_SIZE+1)return a}return-1}},{key:\"createPointAt\",value:function(e,t,n,r){var o=(0,s.wC)(t,n,r),a=(0,c.qf)(e),l=(0,i.Z)(a,4),u=l[0],d=l[1],f=(u+l[2])\/2,p=(d+l[3])\/2,h=(0,s.U1)(o[0],o[1],f,p,-e.angle),m=(0,i.Z)(h,2),g=m[0],v=m[1];return[g-e.x,v-e.y]}},{key:\"getNormalizedPoints\",value:function(e){var t=e.points,n=t[0][0],r=t[0][1];return{points:t.map((function(e,t){return[e[0]-n,e[1]-r]})),x:e.x+n,y:e.y+r}}},{key:\"normalizePoints\",value:function(t){(0,d.DR)(t,e.getNormalizedPoints(t))}},{key:\"duplicateSelectedPoints\",value:function(t){if(!t.editingLinearElement)return!1;var n=t.editingLinearElement,r=n.selectedPointsIndices,o=n.elementId,i=e.getElement(o);if(!i||null===r)return!1;var a=i.points,l=[],s=!1,c=-1,u=a.reduce((function(e,t,n){if(++c,e.push(t),r.includes(n)){var o=a[n+1];o||(s=!0),e.push(o?[(t[0]+o[0])\/2,(t[1]+o[1])\/2]:[t[0],t[1]]),l.push(c+1),++c}return e}),[]);if((0,d.DR)(i,{points:u}),s){var f=i.points[i.points.length-1];e.movePoints(i,[{index:i.points.length-1,point:[f[0]+30,f[1]+30]}])}return{appState:E(E({},t),{},{editingLinearElement:E(E({},t.editingLinearElement),{},{selectedPointsIndices:l})})}}},{key:\"deletePoints\",value:function(t,n){var r=0,o=0;if(n.includes(0)){var i=t.points.find((function(e,t){return!n.includes(t)}));i&&(r=i[0],o=i[1])}var a=t.points.reduce((function(e,t,i){return n.includes(i)||e.push(e.length?[t[0]-r,t[1]-o]:[0,0]),e}),[]);e._updatePoints(t,a,r,o)}},{key:\"addPoints\",value:function(t,n,o){var i=[].concat((0,r.Z)(t.points),(0,r.Z)(o.map((function(e){return e.point}))));e._updatePoints(t,i,0,0)}},{key:\"movePoints\",value:function(t,n,r){var o=t.points,i=0,a=0,l=n.find((function(e){return 0===e.index}));l&&(i=l.point[0]+o[l.index][0],a=l.point[1]+o[l.index][1]);var s=o.map((function(e,t){var r=n.find((function(e){return e.index===t}));if(r){if(l)return e;var s=r.point[0]-o[r.index][0],c=r.point[1]-o[r.index][1];return[e[0]+s,e[1]+c]}return i||a?[e[0]-i,e[1]-a]:e}));e._updatePoints(t,s,i,a,r)}},{key:\"shouldAddMidpoint\",value:function(t,n,r){if(!e.getElement(t.elementId))return!1;var o=t.pointerDownState.segmentMidpoint;if(o.added||null===o.value||null===o.index||null===t.pointerDownState.origin)return!1;var i=t.pointerDownState.origin,a=(0,s.LW)(i.x,i.y,n.x,n.y);return!(!r.editingLinearElement&&a<y.f\/r.zoom.value)}},{key:\"addMidpoint\",value:function(t,n,o){var i=e.getElement(t.elementId);if(i){var a=t.pointerDownState.segmentMidpoint,l={pointerDownState:t.pointerDownState,selectedPointsIndices:t.selectedPointsIndices},s=e.createPointAt(i,n.x,n.y,o.gridSize),c=[].concat((0,r.Z)(i.points.slice(0,a.index)),[s],(0,r.Z)(i.points.slice(a.index)));return(0,d.DR)(i,{points:c}),l.pointerDownState=E(E({},t.pointerDownState),{},{segmentMidpoint:E(E({},t.pointerDownState.segmentMidpoint),{},{added:!0}),lastClickedPoint:a.index}),l.selectedPointsIndices=[a.index],l}}},{key:\"_updatePoints\",value:function(e,t,n,r,o){var i=(0,u.Ut)(e,t),a=(0,u.Ut)(e,e.points),l=(i[0]+i[2])\/2,c=(i[1]+i[3])\/2,f=(a[0]+a[2])\/2-l,p=(a[1]+a[3])\/2-c,h=(0,s.U1)(n,r,f,p,e.angle);(0,d.DR)(e,E(E({},o),{},{points:t,x:e.x+h[0],y:e.y+h[1]}))}},{key:\"_getShiftLockedDelta\",value:function(t,n,r,o){var a=e.getPointGlobalCoordinates(t,n),l=(0,s.wC)(r[0],r[1],o),u=(0,i.Z)(l,2),d=u[0],f=u[1],p=(0,c.o4)(a[0],a[1],d,f),h=p.width,m=p.height;return(0,s.xj)([h,m],[0,0],-t.angle)}}]),e}();j.POINT_HANDLE_SIZE=10,j.getEditorMidPoints=function(e,t){var n=(0,v.WJ)(e);return!t.editingLinearElement&&e.points.length>2&&!n?[]:(S.version===e.version&&S.zoom===t.zoom.value||j.updateEditorMidPointsCache(e,t),S.points)},j.updateEditorMidPointsCache=function(e,t){for(var n=j.getPointsGlobalCoordinates(e),r=0,o=[];r<n.length-1;)if(j.isSegmentTooShort(e,e.points[r],e.points[r+1],t.zoom))o.push(null),r++;else{var i=j.getSegmentMidPoint(e,n[r],n[r+1],r+1);o.push(i),r++}S.points=o,S.version=e.version,S.zoom=t.zoom.value},j.getSegmentMidpointHitCoords=function(e,t,n){var r=e.elementId,o=j.getElement(r);if(!o)return null;if(j.getPointIndexUnderCursor(o,n.zoom,t.x,t.y)>=0)return null;if(j.getPointsGlobalCoordinates(o).length>=3&&!n.editingLinearElement)return null;var i=j.POINT_HANDLE_SIZE\/n.zoom.value,a=e.segmentMidPointHoveredCoords;if(a&&(0,s.LW)(a[0],a[1],t.x,t.y)<=i)return a;for(var l=0,c=j.getEditorMidPoints(o,n);l<c.length;){if(null!==c[l])if((0,s.LW)(c[l][0],c[l][1],t.x,t.y)<=i)return c[l];l++}return null},j.getBoundTextElementPosition=function(e,t){var n=j.getPointsGlobalCoordinates(e);n.length<2&&(0,d.DR)(t,{isDeleted:!0});var r=0,o=0;if(e.points.length%2==1){var i=Math.floor(e.points.length\/2),a=j.getPointGlobalCoordinates(e,e.points[i]);r=a[0]-t.width\/2,o=a[1]-t.height\/2}else{var l=e.points.length\/2-1,c=S.points[l];2===e.points.length&&(c=(0,s.H5)(n[0],n[1])),c&&S.version===e.version||(c=j.getSegmentMidPoint(e,n[l],n[l+1],l+1)),r=c[0]-t.width\/2,o=c[1]-t.height\/2}return{x:r,y:o}},j.getMinMaxXYWithBoundText=function(e,t,n){var r=(0,i.Z)(t,4),o=r[0],a=r[1],l=r[2],c=r[3],u=(o+l)\/2,d=(a+c)\/2,f=j.getBoundTextElementPosition(e,n),p=f.x,h=f.y,m=p+n.width,g=h+n.height,v=(0,s.xj)([o,a],[u,d],e.angle),b=(0,s.xj)([l,a],[u,d],e.angle),y=(0,s.xj)([p,h],[u,d],-e.angle),x=(0,s.xj)([m,h],[u,d],-e.angle),w=(0,s.xj)([p,g],[u,d],-e.angle),k=(0,s.xj)([m,g],[u,d],-e.angle);return v[0]<b[0]&&v[1]>=b[1]?(o=Math.min(o,w[0]),l=Math.max(l,Math.max(x[0],k[0])),a=Math.min(a,y[1]),c=Math.max(c,k[1])):v[0]>=b[0]&&v[1]>b[1]?(o=Math.min(o,k[0]),l=Math.max(l,Math.max(y[0],x[0])),a=Math.min(a,w[1]),c=Math.max(c,x[1])):v[0]>=b[0]?(o=Math.min(o,x[0]),l=Math.max(l,w[0]),a=Math.min(a,k[1]),c=Math.max(c,y[1])):v[1]<=b[1]&&(o=Math.min(o,Math.min(x[0],y[0])),l=Math.max(l,k[0]),a=Math.min(a,x[1]),c=Math.max(c,w[1])),[o,a,l,c,u,d]},j.getElementAbsoluteCoords=function(e){var t,n,r,o,a,l=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e.points.length<2||!(0,b.R2)(e)){var s=e.points.reduce((function(e,t){var n=(0,i.Z)(t,2),r=n[0],o=n[1];return e.minY=Math.min(e.minY,o),e.minX=Math.min(e.minX,r),e.maxX=Math.max(e.maxX,r),e.maxY=Math.max(e.maxY,o),e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0}),c=s.minX,d=s.minY,f=s.maxX,p=s.maxY;n=c+e.x,r=d+e.y,o=f+e.x,a=p+e.y}else{var h=(0,b.R2)(e),m=(0,u.CM)(h[0]),g=(0,u.IX)(m),y=(0,i.Z)(g,4),x=y[0],w=y[1],k=y[2],E=y[3];n=x+e.x,r=w+e.y,o=k+e.x,a=E+e.y}var S=(n+o)\/2,_=(r+a)\/2;if(t=[n,r,o,a,S,_],!l)return t;var O=(0,v.WJ)(e);return O&&(t=j.getMinMaxXYWithBoundText(e,[n,r,o,a],O)),t};var _=function(e){var t=(0,r.Z)(new Set(e.filter((function(e){return null!==e&&-1!==e}))));return(t=t.sort((function(e,t){return e-t}))).length?t:null}},1935:function(e,t,n){\"use strict\";n.d(t,{BE:function(){return p},DR:function(){return f},ZP:function(){return h}});var r=n(6655),o=n(7169),i=n(3063),a=n(1564),l=n(5001),s=n(6954),c=n(6340);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var f=function(e,t){var n,o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],u=!1,f=t,p=f.points,h=f.fileId;for(var m in void 0!==p&&(t=d(d({},(0,l.k)(p)),t)),t){var g=t[m];if(void 0!==g){if(e[m]===g&&(\"object\"!==(0,r.Z)(g)||null===g||\"groupIds\"===m||\"scale\"===m))continue;if(\"scale\"===m){var v=e[m],b=g;if(v[0]===b[0]&&v[1]===b[1])continue}else if(\"points\"===m){var y=e[m],x=g;if(y.length===x.length){for(var w=!1,k=y.length;--k;){var E=y[k],S=x[k];if(E[0]!==S[0]||E[1]!==S[1]){w=!0;break}}if(!w)continue}}e[m]=g,u=!0}}if(!u)return e;(void 0===t.height&&void 0===t.width&&void 0===h&&void 0===p||(0,i.bI)(e),e.version++,e.versionNonce=(0,s.LU)(),e.updated=(0,c.C3)(),o)&&(null===(n=a.Z.getScene(e))||void 0===n||n.informMutation());return e},p=function(e,t){var n=!1;for(var o in t){var i=t[o];if(void 0!==i){if(e[o]===i&&(\"object\"!==(0,r.Z)(i)||null===i))continue;n=!0}}return n?d(d(d({},e),t),{},{updated:(0,c.C3)(),version:e.version+1,versionNonce:(0,s.LU)()}):e},h=function(e,t){return e.version=(null!=t?t:e.version)+1,e.versionNonce=(0,s.LU)(),e.updated=(0,c.C3)(),e}},2791:function(e,t,n){\"use strict\";n.d(t,{JZ:function(){return O},KE:function(){return I},N_:function(){return C},OL:function(){return D},Sy:function(){return L},Up:function(){return E},VL:function(){return j},_N:function(){return Z},vw:function(){return T},y8:function(){return M}});var r=n(6655),o=n(2577),i=n(7169),a=n(2726),l=n(6340),s=n(6954),c=n(1935),u=n(242),d=n(1047),f=n(6552),p=n(8925),h=n(5710),m=n(2335),g=n(1974),v=[\"x\",\"y\",\"strokeColor\",\"backgroundColor\",\"fillStyle\",\"strokeWidth\",\"strokeStyle\",\"roughness\",\"opacity\",\"width\",\"height\",\"angle\",\"groupIds\",\"roundness\",\"boundElements\",\"link\",\"locked\"];function b(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return y(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var k=function(e,t){var n,r,o=t.x,i=t.y,c=t.strokeColor,u=void 0===c?m.HN.strokeColor:c,d=t.backgroundColor,f=void 0===d?m.HN.backgroundColor:d,p=t.fillStyle,h=void 0===p?m.HN.fillStyle:p,g=t.strokeWidth,b=void 0===g?m.HN.strokeWidth:g,y=t.strokeStyle,x=void 0===y?m.HN.strokeStyle:y,w=t.roughness,k=void 0===w?m.HN.roughness:w,E=t.opacity,S=void 0===E?m.HN.opacity:E,j=t.width,_=void 0===j?0:j,O=t.height,C=void 0===O?0:O,I=t.angle,M=void 0===I?0:I,T=t.groupIds,P=void 0===T?[]:T,D=t.roundness,A=void 0===D?null:D,L=t.boundElements,Z=void 0===L?null:L,z=t.link,R=void 0===z?null:z,N=t.locked,B=void 0===N?m.HN.locked:N,H=(0,a.Z)(t,v);return{id:H.id||(0,s.kb)(),type:e,x:o,y:i,width:_,height:C,angle:M,strokeColor:u,backgroundColor:f,fillStyle:h,strokeWidth:b,strokeStyle:x,roughness:k,opacity:S,groupIds:P,roundness:A,seed:null!==(n=H.seed)&&void 0!==n?n:(0,s.LU)(),version:H.version||1,versionNonce:null!==(r=H.versionNonce)&&void 0!==r?r:0,isDeleted:!1,boundElements:Z,updated:(0,l.C3)(),link:R,locked:B}},E=function(e){return k(e.type,e)},S=function(e,t){return{x:\"center\"===e.textAlign?t.width\/2:\"right\"===e.textAlign?t.width:0,y:\"middle\"===e.verticalAlign?t.height\/2:0}},j=function(e){var t=e.fontFamily||m.rk,n=e.fontSize||m.n5,r=e.lineHeight||(0,h.PT)(t),o=(0,h.bG)(e.text),i=(0,h.X1)(o,(0,l.mO)({fontFamily:t,fontSize:n}),r),a=e.textAlign||m.Hg,s=e.verticalAlign||m.hs,u=S({textAlign:a,verticalAlign:s},i);return(0,c.BE)(w(w({},k(\"text\",e)),{},{text:o,fontSize:n,fontFamily:t,textAlign:a,verticalAlign:s,x:e.x-u.x,y:e.y-u.y,width:i.width,height:i.height,baseline:i.baseline,containerId:e.containerId||null,originalText:o,lineHeight:r}),{})},_=function(e,t){var n,r,i=(0,h.tl)(e),a=(0,h.X1)(t,(0,l.mO)(e),e.lineHeight),s=a.width,u=a.height,v=a.baseline,b=e.textAlign,y=e.verticalAlign;if(\"center\"!==b||y!==m.oX.MIDDLE||e.containerId){var x=(0,d.qf)(e),w=(0,o.Z)(x,4),k=w[0],E=w[1],j=w[2],_=w[3],O=(0,p.wC)(e,s,u,!1),C=(0,o.Z)(O,4),I=(k-C[0])\/2,M=(E-C[1])\/2,T=(j-C[2])\/2,P=(_-C[3])\/2,D=(0,f.yq)({s:!0,e:\"center\"===b||\"left\"===b,w:\"center\"===b||\"right\"===b},e.x,e.y,e.angle,I,M,T,P),A=(0,o.Z)(D,2);n=A[0],r=A[1]}else{var L=(0,h.X1)(e.text,(0,l.mO)(e),e.lineHeight),Z=S(e,{width:s-L.width,height:u-L.height});n=e.x-Z.x,r=e.y-Z.y}if(i){var z=(0,h.S)(e),R=(0,h.HE)(i),N=R.height,B=R.width;u>N-2*z&&(N=u+2*z),s>B-2*z&&(B=s+2*z),(0,g.Yv)(i)||N===R.height&&B===R.width||(0,c.DR)(i,{height:N,width:B})}return{width:s,height:u,baseline:v,x:Number.isFinite(n)?n:e.x,y:Number.isFinite(r)?r:e.y}},O=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.text;if(!e.isDeleted){var n=(0,h.tl)(e);n&&(t=(0,h.lD)(t,(0,l.mO)(e),(0,h.jd)(n)));var r=_(e,t);return w({text:t},r)}},C=function(e,t){t.text;var n=t.isDeleted,r=t.originalText;return(0,c.BE)(e,w({originalText:r,isDeleted:null!=n?n:e.isDeleted},O(e,r)))},I=function(e){return w(w({},k(e.type,e)),{},{points:e.points||[],pressures:[],simulatePressure:e.simulatePressure,lastCommittedPoint:null})},M=function(e){return w(w({},k(e.type,e)),{},{points:e.points||[],lastCommittedPoint:null,startBinding:null,endBinding:null,startArrowhead:e.startArrowhead,endArrowhead:e.endArrowhead})},T=function(e){var t,n,r;return w(w({},k(\"image\",e)),{},{strokeColor:\"transparent\",status:null!==(t=e.status)&&void 0!==t?t:\"pending\",fileId:null!==(n=e.fileId)&&void 0!==n?n:null,scale:null!==(r=e.scale)&&void 0!==r?r:[1,1]})},P=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(null==t||\"object\"!==(0,r.Z)(t))return t;var o=Object.prototype.toString.call(t);if(\"[object Object]\"===o){var i=\"function\"==typeof t.constructor?Object.create(Object.getPrototypeOf(t)):{};for(var a in t)if(t.hasOwnProperty(a)){if(0===n&&(\"shape\"===a||\"canvas\"===a))continue;i[a]=e(t[a],n+1)}return i}if(Array.isArray(t)){for(var l=t.length,s=new Array(l);l--;)s[l]=e(t[l],n+1);return s}return t},D=function(e){return P(e)},A=function(e){if((0,l.h2)()&&e){var t,n,r=\"\".concat(e,\"_copy\");return null!==(t=window.h)&&void 0!==t&&null!==(n=t.app)&&void 0!==n&&n.getSceneElementsIncludingDeleted().find((function(e){return e.id===r}))&&(r+=\"_copy\"),r}return(0,s.kb)()},L=function(e,t,n,r){var o=D(n);return o.id=A(o.id),o.boundElements=null,o.updated=(0,l.C3)(),o.seed=(0,s.LU)(),o.groupIds=(0,u.Qy)(o.groupIds,e,(function(e){return t.has(e)||t.set(e,A(e)),t.get(e)})),r&&(o=Object.assign(o,r)),o},Z=function(e){var t,n=[],r=(0,l.xn)(e),o=new Map,i=function(e){if(o.has(e))return o.get(e);if(r.has(e)){var t=A(e);return o.set(e,t),t}return null},a=new Map,s=b(e);try{for(s.s();!(t=s.n()).done;){var c=t.value,u=P(c);if(u.id=i(c.id),u.groupIds&&(u.groupIds=u.groupIds.map((function(e){return a.has(e)||a.set(e,A(e)),a.get(e)}))),\"containerId\"in u&&u.containerId){var d=i(u.containerId);u.containerId=d}if(\"boundElements\"in u&&u.boundElements&&(u.boundElements=u.boundElements.reduce((function(e,t){var n=i(t.id);return n&&e.push(w(w({},t),{},{id:n})),e}),[])),\"endBinding\"in u&&u.endBinding){var f=i(u.endBinding.elementId);u.endBinding=f?w(w({},u.endBinding),{},{elementId:f}):null}if(\"startBinding\"in u&&u.startBinding){var p=i(u.startBinding.elementId);u.startBinding=p?w(w({},u.startBinding),{},{elementId:p}):null}n.push(u)}}catch(e){s.e(e)}finally{s.f()}return n}},8634:function(e,t,n){\"use strict\";n.d(t,{LW:function(){return b},T:function(){return O},l2:function(){return E},vY:function(){return y},xx:function(){return _}});var r=n(1930),o=n(7169),i=n(2577),a=n(2335),l=n(5001),s=n(6552),c=n(8925),u=n(1974),d=n(1935),f=n(6340),p=n(8290),h=n(1564),m=n(5710);function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var b=function(e){return e>=2*Math.PI?e-2*Math.PI:e},y=function(e,t,n,r,o,a,l,s,c,d,f){if(1===n.length){var h=(0,i.Z)(n,1)[0];return\"rotation\"===t?(x(h,s,c,o,e.originalElements),(0,p.Ww)(h)):!(0,u.iB)(h)||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?t&&E(e.originalElements,l,h,t,a,s,c):(k(h,t,a,s,c),(0,p.Ww)(h)),!0}if(n.length>1){if(\"rotation\"===t)return j(e,n,s,c,o,d,f),!0;if(\"nw\"===t||\"ne\"===t||\"sw\"===t||\"se\"===t)return S(e,n,t,a,s,c),!0}return!1},x=function(e,t,n,r,o){var l=(0,c.qf)(e),s=(0,i.Z)(l,4),f=s[0],p=s[1],g=(f+s[2])\/2,v=(p+s[3])\/2,y=5*Math.PI\/2+Math.atan2(n-v,t-g);r&&(y+=a.ay\/2,y-=y%a.ay),y=b(y);var x=(0,m.xB)(e);if((0,d.DR)(e,{angle:y}),x){var w,k=null===(w=h.Z.getScene(e))||void 0===w?void 0:w.getElement(x);k&&!(0,u.Yv)(e)&&(0,d.DR)(k,{angle:y})}},w=function(e,t,n){var r=e.width;if((0,u.Xh)(e)){var o=(0,m.tl)(e);o&&(r=(0,m.jd)(o))}var i=e.fontSize*(t\/r);if(i<1)return null;var a=(0,m.X1)(e.text,(0,f.mO)({fontSize:i,fontFamily:e.fontFamily}),e.lineHeight);return{size:i,baseline:a.baseline+(n-a.height)}},k=function(e,t,n,r,o){var a,l=(0,c.qf)(e),u=(0,i.Z)(l,4),f=u[0],p=u[1],h=u[2],m=u[3],g=(f+h)\/2,v=(p+m)\/2,b=(0,s.U1)(r,o,g,v,-e.angle),y=(0,i.Z)(b,2),x=y[0],k=y[1];switch(t){case\"se\":a=Math.max((x-f)\/(h-f),(k-p)\/(m-p));break;case\"nw\":a=Math.max((h-x)\/(h-f),(m-k)\/(m-p));break;case\"ne\":a=Math.max((x-f)\/(h-f),(m-k)\/(m-p));break;case\"sw\":a=Math.max((h-x)\/(h-f),(k-p)\/(m-p))}if(a>0){var E=e.width*a,S=e.height*a,j=w(e,E,S);if(null===j)return;var _=(0,c.wC)(e,E,S,!1),O=(0,i.Z)(_,4),C=(f-O[0])\/2,I=(p-O[1])\/2,M=(h-O[2])\/2,T=(m-O[3])\/2,P=(0,s.yq)(function(e,t){return{n:\/^(n|ne|nw)$\/.test(e)||t&&\/^(s|se|sw)$\/.test(e),s:\/^(s|se|sw)$\/.test(e)||t&&\/^(n|ne|nw)$\/.test(e),w:\/^(w|nw|sw)$\/.test(e)||t&&\/^(e|ne|se)$\/.test(e),e:\/^(e|ne|se)$\/.test(e)||t&&\/^(w|nw|sw)$\/.test(e)}}(t,n),e.x,e.y,e.angle,C,I,M,T),D=(0,i.Z)(P,2),A=D[0],L=D[1];(0,d.DR)(e,{fontSize:j.size,width:E,height:S,baseline:j.baseline,x:A,y:L})}},E=function(e,t,n,o,a,h,g){var b=e.get(n.id),y=(0,c.wC)(b,b.width,b.height,!0),x=(0,i.Z)(y,4),k=[x[0],x[1]],E=[x[2],x[3]],S=(0,s.H5)(k,E),j=(0,s.xj)([h,g],S,-b.angle),_=(0,c.wC)(n,n.width,n.height,!0),O=(0,i.Z)(_,4),C=O[0],I=O[1],M=O[2]-C,T=O[3]-I,P=(E[0]-k[0])\/M,D=(E[1]-k[1])\/T,A={},L=(0,m.WJ)(n);o.includes(\"e\")&&(P=(j[0]-k[0])\/M),o.includes(\"s\")&&(D=(j[1]-k[1])\/T),o.includes(\"w\")&&(P=(E[0]-j[0])\/M),o.includes(\"n\")&&(D=(E[1]-j[1])\/T);var Z=b.width,z=b.height,R=n.width*P,N=n.height*D;if(a&&(R=2*R-Z,N=2*N-z),t){var B=Math.abs(R)\/Z,H=Math.abs(N)\/z;if(1===o.length&&(N*=B,R*=H),2===o.length){var W=Math.max(B,H);R=Z*W*Math.sign(R),N=z*W*Math.sign(N)}}if(L){var F=e.get(L.id);if(F&&(A={fontSize:F.fontSize,baseline:F.baseline}),t){var U=v(v({},n),{},{width:R,height:N}),K=w(L,(0,m.jd)(U),(0,m.N2)(U));if(null===K)return;A={fontSize:K.size,baseline:K.baseline}}else{var Y=(0,m.AT)((0,f.mO)(L),L.lineHeight),G=(0,m.w_)(L.fontSize,L.lineHeight);R=Math.ceil(Math.max(R,Y)),N=Math.ceil(Math.max(N,G))}}var V=(0,c.wC)(b,R,N,!0),X=(0,i.Z)(V,4),q=X[0],J=X[1],$=X[2],Q=X[3],ee=$-q,te=Q-J,ne=[].concat(k);if([\"n\",\"w\",\"nw\"].includes(o)&&(ne=[E[0]-Math.abs(ee),E[1]-Math.abs(te)]),\"ne\"===o){var re=[k[0],E[1]];ne=[re[0],re[1]-Math.abs(te)]}if(\"sw\"===o){var oe=[E[0],k[1]];ne=[oe[0]-Math.abs(ee),oe[1]]}t&&([\"s\",\"n\"].includes(o)&&(ne[0]=S[0]-ee\/2),[\"e\",\"w\"].includes(o)&&(ne[1]=S[1]-te\/2)),R<0&&(o.includes(\"e\")&&(ne[0]-=Math.abs(ee)),o.includes(\"w\")&&(ne[0]+=Math.abs(ee))),N<0&&(o.includes(\"s\")&&(ne[1]-=Math.abs(te)),o.includes(\"n\")&&(ne[1]+=Math.abs(te))),a&&(ne[0]=S[0]-Math.abs(ee)\/2,ne[1]=S[1]-Math.abs(te)\/2);var ie,ae,le=b.angle,se=(0,s.xj)(ne,S,le),ce=[ne[0]+Math.abs(ee)\/2,ne[1]+Math.abs(te)\/2],ue=(0,s.xj)(ce,S,le);ne=(0,s.xj)(se,ue,-le),((0,u.bt)(n)||(0,u.F9)(n))&&(ie=(0,l.z)(1,N,b.points,!0),ae=(0,l.z)(0,R,ie,!0));var de=(0,r.Z)(ne);de[0]+=b.x-q,de[1]+=b.y-J;var fe={width:Math.abs(R),height:Math.abs(N),x:de[0],y:de[1],points:ae};\"scale\"in n&&\"scale\"in b&&(0,d.DR)(n,{scale:[(Math.sign($-b.x)||b.scale[0])*b.scale[0],(Math.sign(Q-b.y)||b.scale[1])*b.scale[1]]}),0!==fe.width&&0!==fe.height&&Number.isFinite(fe.x)&&Number.isFinite(fe.y)&&((0,p.Ww)(n,{newSize:{width:fe.width,height:fe.height}}),(0,d.DR)(n,fe),L&&null!=A&&(0,d.DR)(L,{fontSize:A.fontSize,baseline:A.baseline}),(0,m.RB)(n,o))},S=function(e,t,n,r,o,a){var s=t.reduce((function(t,n){var r=e.originalElements.get(n.id);return r&&t.push({orig:r,latest:n}),t}),[]),f=(0,c.v2)(s.map((function(e){return e.orig}))),h=f.minX,g=f.minY,b=f.maxX,y=f.maxY,x=f.midX,k=f.midY,E=n,S=r?[x,k]:{ne:[h,y],se:[h,g],sw:[b,g],nw:[b,y]}[E],j=(0,i.Z)(S,2),_=j[0],O=j[1],C={ne:[o>=_,a<=O],se:[o>=_,a>=O],sw:[o<=_,a>=O],nw:[o<=_,a<=O]}[E].map((function(e){return e?1:-1})),I=(0,i.Z)(C,2),M=I[0],T=I[1];if(!(M<0&&T<0)){var P=Math.max(M*Math.abs(o-_)\/(b-h),T*Math.abs(a-O)\/(y-g))*(r?2:1);0!==P&&s.forEach((function(e){var t=e.orig.width*P,r=e.orig.height*P,o=_+(e.orig.x-_)*P,i=O+(e.orig.y-O)*P,a=function(e,t,n,r){return(0,u.bt)(e)||(0,u.F9)(e)?{points:(0,l.z)(0,t,(0,l.z)(1,n,e.points,r),r)}:{}}(e.orig,t,r,!1),s=v({width:t,height:r,x:o,y:i},a),c=null,f=(0,m.WJ)(e.latest);if(f||(0,u.iB)(e.orig)){var h=v(v({},e.latest),{},{width:t,height:r}),g=w(null!=f?f:e.orig,f?(0,m.jd)(h):h.width,f?(0,m.N2)(h):h.height);if(!g)return;(0,u.iB)(e.orig)&&(s.fontSize=g.size,s.baseline=g.baseline),f&&(c={fontSize:g.size,baseline:g.baseline})}(0,p.Ww)(e.latest,{newSize:{width:t,height:r}}),(0,d.DR)(e.latest,s),f&&c&&((0,d.DR)(f,c),(0,m.RB)(e.latest,n))}))}},j=function(e,t,n,r,o,l,f){var p=5*Math.PI\/2+Math.atan2(r-f,n-l);o&&(p+=a.ay\/2,p-=p%a.ay),t.forEach((function(t){var n,r,o=(0,c.qf)(t),a=(0,i.Z)(o,4),g=a[0],v=a[1],y=(g+a[2])\/2,x=(v+a[3])\/2,w=null!==(n=null===(r=e.originalElements.get(t.id))||void 0===r?void 0:r.angle)&&void 0!==n?n:t.angle,k=(0,s.U1)(y,x,l,f,p+w-t.angle),E=(0,i.Z)(k,2),S=E[0],j=E[1];(0,d.DR)(t,{x:t.x+(S-y),y:t.y+(j-x),angle:b(p+w)});var _=(0,m.xB)(t);if(_){var O,C=null===(O=h.Z.getScene(t))||void 0===O?void 0:O.getElement(_);C&&!(0,u.Yv)(t)&&(0,d.DR)(C,{x:C.x+(S-y),y:C.y+(j-x),angle:b(p+w)})}}))},_=function(e,t,n,r){var o=1===t.length?(0,c.qf)(t[0]):(0,c.KP)(t),a=(0,i.Z)(o,4),l=a[0],u=a[1],d=a[2],f=a[3],p=(l+d)\/2,h=(u+f)\/2,m=1===t.length?t[0].angle:0,g=(0,s.U1)(n,r,p,h,-m),v=(0,i.Z)(g,2);switch(n=v[0],r=v[1],e){case\"n\":return(0,s.U1)(n-(l+d)\/2,r-u,0,0,m);case\"s\":return(0,s.U1)(n-(l+d)\/2,r-f,0,0,m);case\"w\":return(0,s.U1)(n-l,r-(u+f)\/2,0,0,m);case\"e\":return(0,s.U1)(n-d,r-(u+f)\/2,0,0,m);case\"nw\":return(0,s.U1)(n-l,r-u,0,0,m);case\"ne\":return(0,s.U1)(n-d,r-u,0,0,m);case\"sw\":return(0,s.U1)(n-l,r-f,0,0,m);case\"se\":return(0,s.U1)(n-d,r-f,0,0,m);default:return[0,0]}},O=function(e,t){var n=(0,i.Z)(t.points,2),r=(0,i.Z)(n[1],2),o=r[0],a=r[1];return\"nw\"===e&&(o<0||a<0)||\"ne\"===e&&o>=0||\"sw\"===e&&o<=0||\"se\"===e&&(o>0||a>0)?\"end\":\"origin\"}},5710:function(e,t,n){\"use strict\";n.d(t,{$2:function(){return I},AT:function(){return R},FE:function(){return _},HE:function(){return F},H_:function(){return Y},N2:function(){return te},NS:function(){return Q},OW:function(){return q},P7:function(){return S},PT:function(){return oe},R8:function(){return C},RB:function(){return j},Rg:function(){return M},S:function(){return G},TP:function(){return U},WJ:function(){return H},X1:function(){return O},Zr:function(){return $},aV:function(){return X},bG:function(){return w},cn:function(){return V},cw:function(){return K},eB:function(){return ne},jd:function(){return ee},lD:function(){return L},mY:function(){return D},oN:function(){return E},tl:function(){return W},w_:function(){return T},xB:function(){return B}});var r,o=n(2577),i=n(1930),a=n(7169),l=n(6340),s=n(1935),c=n(2335),u=n(1564),d=n(1047),f=n(1974),p=n(6938),h=n(75),m=n(2325),g=n(6906);function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var y,x,w=function(e){return e.replace(\/\\t\/g,\"        \").replace(\/\\r?\\n|\\r\/g,\"\\n\")},k=function(e){return w(e).split(\"\\n\")},E=function(e,t){var n=void 0,r={x:e.x,y:e.y,text:e.text,width:e.width,height:e.height,baseline:e.baseline};r.text=e.text,t&&(n=ee(t),r.text=L(e.originalText,(0,l.mO)(e),n));var o=O(r.text,(0,l.mO)(e),e.lineHeight);if(r.width=o.width,r.height=o.height,r.baseline=o.baseline,t)if((0,f.Yv)(t)){var i=e.x+e.width\/2,a=e.y+e.height\/2,c=o.width-e.width,u=o.height-e.height;r.x=a-(e.height+u)\/2,r.y=i-(e.width+c)\/2}else{var d=F(t),p=te(t),h=d.height;o.height>p&&(h=Q(o.height,t.type),(0,s.DR)(t,{height:h}),p=te(t),(0,g.h_)(t.id,h));var m=b(b({},e),r),v=_(t,m),y=v.x,x=v.y;r.x=y,r.y=x}(0,s.DR)(e,r)},S=function(e,t,n){var r=(0,l.xn)(e);t.forEach((function(e){var t=n.get(e.id),o=B(e);if(o){var i=n.get(o);if(i){var a=r.get(t);a&&(0,s.DR)(a,{boundElements:(e.boundElements||[]).filter((function(e){return e.id!==i&&e.id!==o})).concat({type:\"text\",id:i})});var l=r.get(i);l&&(0,d.iB)(l)&&(0,s.DR)(l,{containerId:a?t:null})}}}))},j=function(e,t){var n=B(e);if(n){(0,g.kT)(e.id);var r=u.Z.getScene(e).getElement(n);if(r&&r.text){if(!e)return;var o=(r=u.Z.getScene(e).getElement(n)).text,i=r.height,a=r.width,c=F(e),d=ee(e),p=te(e),h=c.height,m=r.baseline;if(\"n\"!==t&&\"s\"!==t){o&&(o=L(r.originalText,(0,l.mO)(r),d));var v=O(o,(0,l.mO)(r),r.lineHeight);i=v.height,a=v.width,m=v.baseline}if(i>p){var b=(h=Q(i,e.type))-c.height,y=(0,f.Yv)(e)||\"ne\"!==t&&\"nw\"!==t&&\"n\"!==t?e.y:e.y-b;(0,s.DR)(e,{height:h,y:y})}(0,s.DR)(r,{text:o,width:a,height:i,baseline:m}),(0,f.Yv)(e)||(0,s.DR)(r,_(e,r))}}},_=function(e,t){if((0,f.Yv)(e))return p._.getBoundTextElementPosition(e,t);var n,r=K(e),o=te(e),i=ee(e);return n=t.verticalAlign===c.oX.TOP?r.y:t.verticalAlign===c.oX.BOTTOM?r.y+(o-t.height):r.y+(o\/2-t.height\/2),{x:t.textAlign===c.I8.LEFT?r.x:t.textAlign===c.I8.RIGHT?r.x+(i-t.width):r.x+(i\/2-t.width\/2),y:n}},O=function(e,t,n){e=e.split(\"\\n\").map((function(e){return e||\" \"})).join(\"\\n\");var r=parseFloat(t),o=A(e,r,n);return{width:D(e,t),height:o,baseline:C(e,t,n)}},C=function(e,t,n,r){var o=document.createElement(\"div\");o.style.position=\"absolute\",o.style.whiteSpace=\"pre\",o.style.font=t,o.style.minHeight=\"1em\",r&&(o.style.overflow=\"hidden\",o.style.wordBreak=\"break-word\",o.style.whiteSpace=\"pre-wrap\"),o.style.lineHeight=String(n),o.innerText=e,document.body.appendChild(o);var i=document.createElement(\"span\");i.style.display=\"inline-block\",i.style.overflow=\"hidden\",i.style.width=\"1px\",i.style.height=\"1px\",o.appendChild(i);var a=i.offsetTop+i.offsetHeight,l=o.offsetHeight;if(c.G6){var s=A(e,parseFloat(t),n),u=parseFloat(t),d=A(e,Math.round(u),n);s>l&&(a+=s-d),l>s&&(a-=d-s)}return document.body.removeChild(o),a},I=function(e){var t=k(e.text).length;return e.height\/t\/e.fontSize},M=function(e,t){return e*t},T=function(e,t){return M(e,t)+2*c.gK},P=function(e,t){y||(y=document.createElement(\"canvas\"));var n=y.getContext(\"2d\");n.font=t;var r=n.measureText(e).width;return(0,l.h2)()?10*r:r},D=function(e,t){var n=k(e),r=0;return n.forEach((function(e){r=Math.max(r,P(e,t))})),r},A=function(e,t,n){var r=k(e).length;return M(t,n)*r},L=function(e,t,n){if(!Number.isFinite(n)||n<0)return e;var r=[],o=e.split(\"\\n\"),i=P(\" \",t),a=\"\",l=0,s=function(e){e.trim()&&r.push(e)},c=function(){a=\"\",l=0};return o.forEach((function(e){if(D(e,t)<=n)r.push(e);else{var o=function(e){var t=e.split(\"-\");return t.length>1&&t.forEach((function(e,n){n!==t.length-1&&(t[n]=e+=\"-\")})),t.join(\" \").split(\" \")}(e);c();for(var u=0;u<o.length;){var d=P(o[u],t);if(d===n)s(o[u]),u++;else if(d>n){for(s(a),c();o[u].length>0;){var f=String.fromCodePoint(o[u].codePointAt(0)),p=Z.calculate(f,t);l+=p,o[u]=o[u].slice(f.length),l>=n?(s(a),a=f,l=p):a+=f}l+i>=n?(s(a),c()):a.endsWith(\"-\")||(a+=\" \",l+=i),u++}else for(;l<n&&u<o.length;){var h=o[u];if((l=P(a+h,t))>n){s(a),c();break}u++;var m=!h.endsWith(\"-\");if(a+=h,m&&(a+=\" \"),l+i>=n){m?r.push(a.slice(0,-1)):r.push(a),c();break}}}\" \"===a.slice(-1)&&(a=a.slice(0,-1),s(a))}})),r.join(\"\\n\")},Z=(x={},{calculate:function(e,t){var n=e.charCodeAt(0);if(x[t]||(x[t]=[]),!x[t][n]){var r=P(e,t);x[t][n]=r}return x[t][n]},getCache:function(e){return x[e]}}),z=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\".toLocaleUpperCase(),R=function(e,t){var n=N(e);return 0===n?O(z.split(\"\").join(\"\\n\"),e,t).width+2*c.gK:n+2*c.gK},N=function(e){var t=Z.getCache(e);if(!t)return 0;var n=t.filter((function(e){return void 0!==e}));return Math.max.apply(Math,(0,i.Z)(n))},B=function(e){var t,n,r;return null!=e&&null!==(t=e.boundElements)&&void 0!==t&&t.length&&(null==e||null===(n=e.boundElements)||void 0===n||null===(r=n.filter((function(e){return\"text\"===e.type}))[0])||void 0===r?void 0:r.id)||null},H=function(e){if(!e)return null;var t,n=B(e);return n&&(null===(t=u.Z.getScene(e))||void 0===t?void 0:t.getElement(n))||null},W=function(e){return e&&e.containerId&&(null===(t=u.Z.getScene(e))||void 0===t?void 0:t.getElement(e.containerId))||null;var t},F=function(e){return(0,f.Yv)(e)?{width:Math.max(e.width,300),height:e.height}:{width:e.width,height:e.height}},U=function(e,t){if(!(0,f.Yv)(e))return{x:e.x+e.width\/2,y:e.y+e.height\/2};var n=p._.getPointsGlobalCoordinates(e);if(n.length%2==1){var r=Math.floor(e.points.length\/2),o=p._.getPointGlobalCoordinates(e,e.points[r]);return{x:o[0],y:o[1]}}var i=e.points.length\/2-1,a=p._.getEditorMidPoints(e,t)[i];return a||(a=p._.getSegmentMidPoint(e,n[i],n[i+1],i+1)),{x:a[0],y:a[1]}},K=function(e){var t=c.gK,n=c.gK;return\"ellipse\"===e.type&&(t+=e.width\/2*(1-Math.sqrt(2)\/2),n+=e.height\/2*(1-Math.sqrt(2)\/2)),\"diamond\"===e.type&&(t+=e.width\/4,n+=e.height\/4),{x:e.x+t,y:e.y+n}},Y=function(e){var t=W(e);return!t||(0,f.Yv)(t)?e.angle:t.angle},G=function(e){var t=W(e);return t&&e?(0,f.Yv)(t)?8*c.gK:c.gK:0},V=function(e){return e.some((function(e){if((0,f.Xh)(e)){var t=W(e);return!(0,d.iB)(e)||!(0,f.Yv)(t)}return!1}))},X=function(e){return e.some((function(e){if((0,f.Xh)(e)){var t=W(e);return!(0,d.iB)(e)||!(0,f.Yv)(t)}return(0,d.iB)(e)}))},q=function(e,t,n,r){var i=(0,h.eD)(e,t);if(1===i.length)return(0,f.mG)(i[0],!1)?i[0]:null;for(var a=null,l=e.length-1;l>=0;--l)if(!e[l].isDeleted){var s=(0,d.qf)(e[l]),c=(0,o.Z)(s,4),u=c[0],p=c[1],g=c[2],v=c[3];if((0,f.Yv)(e[l])&&(0,m.Qu)(e[l],t,[n,r])){a=e[l];break}if(u<n&&n<g&&p<r&&r<v){a=e[l];break}}return(0,f.mG)(a,!1)?a:null},J=new Set([\"rectangle\",\"ellipse\",\"diamond\",\"image\",\"arrow\"]),$=function(e){return J.has(e.type)},Q=function(e,t){e=Math.ceil(e);var n=2*c.gK;return\"ellipse\"===t?Math.round((e+n)\/Math.sqrt(2)*2):\"arrow\"===t?e+8*n:\"diamond\"===t?2*(e+n):e+n},ee=function(e){var t=F(e).width;if((0,f.Yv)(e)){var n=t-8*c.gK*2;if(n<=0){var r=H(e);return r?r.width:8*c.gK*2}return n}return\"ellipse\"===e.type?Math.round(t\/2*Math.sqrt(2))-2*c.gK:\"diamond\"===e.type?Math.round(t\/2)-2*c.gK:t-2*c.gK},te=function(e){var t=F(e).height;if((0,f.Yv)(e)){if(t-8*c.gK*2<=0){var n=H(e);return n?n.height:8*c.gK*2}return t}return\"ellipse\"===e.type?Math.round(t\/2*Math.sqrt(2))-2*c.gK:\"diamond\"===e.type?Math.round(t\/2)-2*c.gK:t-2*c.gK},ne=function(){return D(z,(0,l.mO)({fontSize:c.n5,fontFamily:c.rk}))>0},re=(r={},(0,a.Z)(r,c.ut.Virgil,1.25),(0,a.Z)(r,c.ut.Helvetica,1.15),(0,a.Z)(r,c.ut.Cascadia,1.2),r),oe=function(e){return e in re?re[e]:re[c.rk]}},6906:function(e,t,n){\"use strict\";n.d(t,{b_:function(){return _},eR:function(){return j},h_:function(){return E},kT:function(){return S}});var r=n(8950),o=n(7169),i=n(2577),a=n(2975),l=n.n(a),s=n(6066),c=n(6340),u=n(1564),d=n(1974),f=n(2335),p=n(1935),h=n(5710),m=n(6208),g=n(2416),v=n(6938),b=n(6665);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var w=function(e,t,n,r,o,i){var a=r.zoom,l=180*n\/Math.PI,s=e*(a.value-1)\/2,c=t*(a.value-1)\/2;return e>o&&1!==a.value&&(s=o*(a.value-1)\/2),t>i&&1!==a.value&&(c=i*(a.value-1)\/2),\"translate(\".concat(s,\"px, \").concat(c,\"px) scale(\").concat(a.value,\") rotate(\").concat(l,\"deg)\")},k={},E=function(e,t){var n=k[e]||(k[e]={height:t});return n.height=t,n},S=function(e){k[e]&&delete k[e]},j=function(e){var t,n;return null!==(t=null===(n=k[e])||void 0===n?void 0:n.height)&&void 0!==t?t:null},_=function(e){var t=e.id,n=e.onChange,o=e.onSubmit,a=e.getViewportCoords,y=e.element,S=e.canvas,j=e.excalidrawContainer,_=e.app,O=function(){var e,n=_.state,r=null===(e=u.Z.getScene(y))||void 0===e?void 0:e.getElement(t);if(r){var o=r.textAlign,l=r.verticalAlign;if(r&&(0,d.iB)(r)){var s=r.x,m=r.y,g=(0,h.tl)(r),b=r.width,S=r.height,j=r.width,O=r.height;if(g&&r.containerId){if((0,d.Yv)(g)){var I=v._.getBoundTextElementPosition(g,r);s=I.x,m=I.y}var M,T=function(e,t){if(!t.style.fontFamily||!t.style.fontSize)return!1;var n=t.style.fontFamily.replace(\/\"\/g,\"\");return(0,c.$g)({fontFamily:e.fontFamily})!==n||\"\".concat(e.fontSize,\"px\")!==t.style.fontSize}(r,C),P=(0,h.HE)(g),D=Number(C.style.height.slice(0,-2));if(D>0&&(O=D),T&&(O=r.height),T?M=E(g.id,P.height):(M=k[g.id])||(M=E(g.id,P.height)),b=(0,h.jd)(g),S=(0,h.N2)(g),!(0,d.Yv)(g)&&O>S){var A=(0,h.NS)(O,g.type);return void(0,p.DR)(g,{height:A})}if(!(0,d.Yv)(g)&&P.height>M.height&&O<S){var L=(0,h.NS)(O,g.type);(0,p.DR)(g,{height:L})}else{var Z=(0,h.cw)(g);l===f.oX.MIDDLE&&((0,d.Yv)(g)||(m=Z.y+S\/2-O\/2)),l===f.oX.BOTTOM&&(m=Z.y+(S-O))}}var z=a(s,m),R=(0,i.Z)(z,2),N=R[0],B=R[1],H=C.selectionStart,W=C.selectionEnd,F=C.value.length;if(C.value=r.originalText,H===W&&W!==F){var U=F-W;C.selectionStart=C.value.length-U,C.selectionEnd=C.value.length-U}g?j+=.5:(b=(n.width-8-N)\/n.zoom.value,j=Math.min(j,b));var K=r.lineHeight;f.G6&&(K=(0,h.$2)(x(x({},r),{},{fontSize:Math.round(r.fontSize)})));var Y=(n.height-B)\/n.zoom.value;Object.assign(C.style,{font:(0,c.mO)(r),lineHeight:K,width:\"\".concat(j,\"px\"),height:\"\".concat(O,\"px\"),left:\"\".concat(N,\"px\"),top:\"\".concat(B,\"px\"),transform:w(j,O,(0,h.H_)(r),n,b,Y),textAlign:o,verticalAlign:l,color:r.strokeColor,opacity:r.opacity\/100,filter:\"var(--theme-filter)\",maxHeight:\"\".concat(Y,\"px\")}),C.scrollTop=0,(0,c.h2)()&&(C.style.fontFamily=(0,c.$g)(r)),(0,p.DR)(r,{x:s,y:m})}}},C=document.createElement(\"textarea\");C.dir=\"auto\",C.tabIndex=0,C.dataset.type=\"wysiwyg\",C.wrap=\"off\",C.classList.add(\"excalidraw-wysiwyg\");var I=\"pre\",M=\"normal\";(0,d.Xh)(y)&&(I=\"pre-wrap\",M=\"break-word\"),Object.assign(C.style,{position:\"absolute\",display:\"inline-block\",minHeight:\"1em\",backfaceVisibility:\"hidden\",margin:0,padding:0,border:0,outline:0,resize:\"none\",background:\"transparent\",overflow:\"hidden\",zIndex:\"var(--zIndex-wysiwyg)\",wordBreak:M,whiteSpace:I,overflowWrap:\"break-word\",boxSizing:\"content-box\"}),O(),n&&(C.onpaste=function(){var e=(0,r.Z)(l().mark((function e(t){var n,r,o,i,a,s;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,b.mQ)(t,!0);case 2:if((n=e.sent).text){e.next=5;break}return e.abrupt(\"return\");case 5:if(r=(0,h.bG)(n.text)){e.next=8;break}return e.abrupt(\"return\");case 8:o=(0,h.tl)(y),i=(0,c.mO)({fontSize:_.state.currentItemFontSize,fontFamily:_.state.currentItemFontFamily}),o&&(a=(0,h.lD)(\"\".concat(C.value).concat(r),i,(0,h.jd)(o)),s=(0,h.mY)(a,i),C.style.width=\"\".concat(s,\"px\"));case 11:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),C.oninput=function(){var e,r=null===(e=u.Z.getScene(y))||void 0===e?void 0:e.getElement(t),o=(0,c.mO)(r);if((0,d.Xh)(y)){var i=(0,h.tl)(y),a=(0,h.lD)((0,h.bG)(C.value),o,(0,h.jd)(i)),l=(0,h.X1)(a,o,r.lineHeight),s=l.width,f=l.height;C.style.width=\"\".concat(s,\"px\"),C.style.height=\"\".concat(f,\"px\")}n((0,h.bG)(C.value))}),C.onkeydown=function(e){if(!e.shiftKey&&g.Lo.keyTest(e))e.preventDefault(),_.actionManager.executeAction(g.Lo),O();else if(!e.shiftKey&&g.CZ.keyTest(e))e.preventDefault(),_.actionManager.executeAction(g.CZ),O();else if(m.Tu.keyTest(e))_.actionManager.executeAction(m.Tu);else if(m.Zq.keyTest(e))_.actionManager.executeAction(m.Zq);else if(e.key===s.tW.ESCAPE)e.preventDefault(),z=!0,R();else if(e.key===s.tW.ENTER&&e[s.tW.CTRL_OR_CMD]){if(e.preventDefault(),e.isComposing||229===e.keyCode)return;z=!0,R()}else if(e.key===s.tW.TAB||e[s.tW.CTRL_OR_CMD]&&(e.code===s.aU.BRACKET_LEFT||e.code===s.aU.BRACKET_RIGHT)){if(e.preventDefault(),e.isComposing)return;e.shiftKey||e.code===s.aU.BRACKET_LEFT?A():D(),C.dispatchEvent(new Event(\"input\"))}};var T=\" \".repeat(4),P=new RegExp(\"^ {1,\".concat(4,\"}\")),D=function(){var e=C.selectionStart,t=C.selectionEnd,n=L(),r=C.value;n.forEach((function(e){var t=r.slice(0,e),n=r.slice(e);r=\"\".concat(t).concat(T).concat(n)})),C.value=r,C.selectionStart=e+4,C.selectionEnd=t+4*n.length},A=function(){var e=C.selectionStart,t=C.selectionEnd,n=L(),r=[],o=C.value;n.forEach((function(e){var t=o.slice(e,e+4).match(P);if(t){var n=o.slice(0,e),i=o.slice(e+t[0].length);o=\"\".concat(n).concat(i),r.push(e)}})),C.value=o,r.length&&(e>r[r.length-1]?C.selectionStart=Math.max(e-4,r[r.length-1]):C.selectionStart=e,C.selectionEnd=Math.max(C.selectionStart,t-4*r.length))},L=function(){var e=C.selectionStart,t=C.selectionEnd,n=C.value,r=n.slice(0,e).match(\/[^\\n]*$\/)[0].length;return e-=r,n.slice(e,t).split(\"\\n\").reduce((function(t,n,r,o){return t.concat(r?t[r-1]+o[r-1].length+1:e)}),[]).reverse()},Z=function(e){e.preventDefault(),e.stopPropagation()},z=!1,R=function(){var e;N();var t=null===(e=u.Z.getScene(y))||void 0===e?void 0:e.getElement(y.id);if(t){var n=C.value,r=(0,h.tl)(t);if(r){if(n=t.text,C.value.trim()){var i=(0,h.xB)(r);i&&i===y.id||(0,p.DR)(r,{boundElements:(r.boundElements||[]).concat({type:\"text\",id:y.id})})}else{var a;(0,p.DR)(r,{boundElements:null===(a=r.boundElements)||void 0===a?void 0:a.filter((function(e){return!(0,d.iB)(e)}))})}(0,h.oN)(t,r)}o({text:n,viaKeyboard:z,originalText:C.value})}},N=function(){F||(F=!0,C.onblur=null,C.oninput=null,C.onkeydown=null,U&&U.disconnect(),window.removeEventListener(\"resize\",O),window.removeEventListener(\"wheel\",Z,!0),window.removeEventListener(\"pointerdown\",H),window.removeEventListener(\"pointerup\",B),window.removeEventListener(\"blur\",R),W(),C.remove())},B=function e(t){window.removeEventListener(\"pointerup\",e);var n=null==t?void 0:t.target,r=n instanceof HTMLInputElement&&n.closest(\".color-picker-input\")&&(0,c.s)(n);setTimeout((function(){C.onblur=R,n&&r&&(n.onblur=function(){C.focus()}),r||C.focus()}))},H=function(e){var t=e.target instanceof HTMLInputElement&&e.target.closest(\".color-picker-input\")&&(0,c.s)(e.target);((e.target instanceof HTMLElement||e.target instanceof SVGElement)&&e.target.closest(\".\".concat(f.$C.SHAPE_ACTIONS_MENU))&&!(0,c.s)(e.target)||t)&&(C.onblur=null,window.addEventListener(\"pointerup\",B),window.addEventListener(\"blur\",R))},W=u.Z.getScene(y).addCallback((function(){var e;O(),!(null===(e=document.activeElement)||void 0===e||!e.closest(\".color-picker-input\"))||C.focus()})),F=!1;C.select(),B();var U=null;S&&\"ResizeObserver\"in window?(U=new window.ResizeObserver((function(){O()}))).observe(S):window.addEventListener(\"resize\",O),window.addEventListener(\"pointerdown\",H),window.addEventListener(\"wheel\",Z,{passive:!1,capture:!0}),null==j||j.querySelector(\".excalidraw-textEditorContainer\").appendChild(C)}},267:function(e,t,n){\"use strict\";n.d(t,{PC:function(){return g},kK:function(){return m},oY:function(){return v},ox:function(){return u}});var r=n(2577),o=n(8925),i=n(6552),a=n(1047),l=n(1974),s=n(3547),c={mouse:8,pen:16,touch:28},u={e:!0,s:!0,n:!0,w:!0},d={e:!0,s:!0,n:!0,w:!0},f={e:!0,s:!0,n:!0,w:!0,nw:!0,se:!0},p={e:!0,s:!0,n:!0,w:!0},h=function(e,t,n,o,a,l,s){var c=(0,i.U1)(e+n\/2,t+o\/2,a,l,s),u=(0,r.Z)(c,2);return[u[0]-n\/2,u[1]-o\/2,n,o]},m=function(e,t,n,o){var i=(0,r.Z)(e,6),a=i[0],l=i[1],u=i[2],d=i[3],f=i[4],p=i[5],m=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},g=arguments.length>5&&void 0!==arguments[5]?arguments[5]:4,v=c[o],b=v\/n.value,y=v\/n.value,x=v\/n.value,w=v\/n.value,k=u-a,E=d-l,S=g\/n.value,j=(v-2*s.Lu)\/(2*n.value),_={nw:m.nw?void 0:h(a-S-x+j,l-S-w+j,b,y,f,p,t),ne:m.ne?void 0:h(u+S-j,l-S-w+j,b,y,f,p,t),sw:m.sw?void 0:h(a-S-x+j,d+S-j,b,y,f,p,t),se:m.se?void 0:h(u+S-j,d+S-j,b,y,f,p,t),rotation:m.rotation?void 0:h(a+k\/2-b\/2,l-S-w+j-16\/n.value,b,y,f,p,t)},O=5*c.mouse\/n.value;return Math.abs(k)>O&&(m.n||(_.n=h(a+k\/2-b\/2,l-S-w+j,b,y,f,p,t)),m.s||(_.s=h(a+k\/2-b\/2,d+S-j,b,y,f,p,t))),Math.abs(E)>O&&(m.w||(_.w=h(a-S-x+j,l+E\/2-y\/2,b,y,f,p,t)),m.e||(_.e=h(u+S-j,l+E\/2-y\/2,b,y,f,p,t))),_},g=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"mouse\";if(e.locked)return{};var i={};if(\"freedraw\"===e.type||(0,l.bt)(e)){if(2===e.points.length){var c=(0,r.Z)(e.points,2),u=c[1];0===u[0]||0===u[1]?i=p:u[0]>0&&u[1]<0?i=f:u[0]>0&&u[1]>0?i=p:u[0]<0&&u[1]>0?i=f:u[0]<0&&u[1]<0&&(i=p)}}else(0,a.iB)(e)&&(i=d);var h=(0,l.bt)(e)?s.Lu+8:s.Lu;return m((0,o.qf)(e,!0),e.angle,t,n,i,h)},v=function(e,t){if(t.editingLinearElement)return!1;if(e.length>1)return!0;var n=e[0];return!(0,l.bt)(n)||n.points.length>2}},1974:function(e,t,n){\"use strict\";n.d(t,{F9:function(){return l},Lx:function(){return p},Mn:function(){return f},QI:function(){return y},UQ:function(){return w},Xh:function(){return b},Xo:function(){return v},Yv:function(){return u},bt:function(){return c},dt:function(){return d},eK:function(){return x},f0:function(){return h},iB:function(){return a},mG:function(){return m},pC:function(){return i},r2:function(){return g},wi:function(){return o}});var r=n(2335),o=function(e){return!!e&&\"image\"===e.type&&!!e.fileId},i=function(e){return!!e&&\"image\"===e.type},a=function(e){return null!=e&&\"text\"===e.type},l=function(e){return null!=e&&s(e.type)},s=function(e){return\"freedraw\"===e},c=function(e){return null!=e&&d(e.type)},u=function(e){return null!=e&&\"arrow\"===e.type},d=function(e){return\"arrow\"===e||\"line\"===e},f=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return null!=e&&(!e.locked||!0===t)&&p(e.type)},p=function(e){return\"arrow\"===e},h=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return!(null==e||e.locked&&!0!==t||\"rectangle\"!==e.type&&\"diamond\"!==e.type&&\"ellipse\"!==e.type&&\"image\"!==e.type&&(\"text\"!==e.type||e.containerId))},m=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return null!=e&&(!e.locked||!0===t)&&(\"rectangle\"===e.type||\"diamond\"===e.type||\"ellipse\"===e.type||\"image\"===e.type||u(e))},g=function(e){return\"text\"===(null==e?void 0:e.type)||\"diamond\"===(null==e?void 0:e.type)||\"rectangle\"===(null==e?void 0:e.type)||\"ellipse\"===(null==e?void 0:e.type)||\"arrow\"===(null==e?void 0:e.type)||\"freedraw\"===(null==e?void 0:e.type)||\"line\"===(null==e?void 0:e.type)},v=function(e){var t;return m(e)&&!(null===(t=e.boundElements)||void 0===t||!t.some((function(e){return\"text\"===e.type})))},b=function(e){return null!==e&&\"containerId\"in e&&null!==e.containerId&&a(e)},y=function(e){return\"rectangle\"===e},x=function(e,t){return!(e!==r.a6.ADAPTIVE_RADIUS&&e!==r.a6.LEGACY||!y(t.type))||e===r.a6.PROPORTIONAL_RADIUS&&(\"line\"===(n=t.type)||\"arrow\"===n||\"diamond\"===n);var n},w=function(e){return\"arrow\"===e.type||\"line\"===e.type||\"diamond\"===e.type?{type:r.a6.PROPORTIONAL_RADIUS}:\"rectangle\"===e.type?{type:r.a6.ADAPTIVE_RADIUS}:null}},6797:function(e,t,n){\"use strict\";n.d(t,{_:function(){return h},l:function(){return p}});var r=n(5169),o=n(8821),i=n(2248),a=n(7245),l=n(2312),s=n(5901);function c(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,n){return u=c()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&(0,s.Z)(o,n.prototype),o},u.apply(null,arguments)}function d(e){var t=\"function\"==typeof Map?new Map:void 0;return d=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf(\"[native code]\")))return e;var n;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return u(e,arguments,(0,l.Z)(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),(0,s.Z)(r,e)},d(e)}function f(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,l.Z)(e);if(t){var o=(0,l.Z)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return(0,a.Z)(this,n)}}var p=function(e){(0,i.Z)(n,e);var t=f(n);function n(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Couldn't export canvas.\",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"CANVAS_ERROR\";return(0,o.Z)(this,n),(e=t.call(this)).name=i,e.message=r,e}return(0,r.Z)(n)}(d(Error)),h=function(e){(0,i.Z)(n,e);var t=f(n);function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"Request Aborted\";return(0,o.Z)(this,n),t.call(this,e,\"AbortError\")}return(0,r.Z)(n)}(d(DOMException))},242:function(e,t,n){\"use strict\";n.d(t,{AI:function(){return S},F$:function(){return f},Fb:function(){return y},Nd:function(){return b},Qy:function(){return w},S_:function(){return k},YS:function(){return x},bO:function(){return g},h6:function(){return E},iE:function(){return v},iJ:function(){return m},yO:function(){return h},zq:function(){return p}});var r=n(1930),o=n(2577),i=n(7169),a=n(75),l=n(5710);function s(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return c(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var f=function(e,t,n){var r=n.filter((function(t){return t.groupIds.includes(e)}));return r.length<2?t.selectedGroupIds[e]||t.editingGroupId===e?d(d({},t),{},{selectedGroupIds:d(d({},t.selectedGroupIds),{},(0,i.Z)({},e,!1)),editingGroupId:null}):t:d(d({},t),{},{selectedGroupIds:d(d({},t.selectedGroupIds),{},(0,i.Z)({},e,!0)),selectedElementIds:d(d({},t.selectedElementIds),Object.fromEntries(r.map((function(e){return[e.id,!0]}))))})},p=function(e,t){return null!=h(e,t)},h=function(e,t){return t.groupIds.filter((function(t){return t!==e.editingGroupId})).find((function(t){return e.selectedGroupIds[t]}))},m=function(e){return Object.entries(e.selectedGroupIds).filter((function(e){var t=(0,o.Z)(e,2);t[0];return t[1]})).map((function(e){var t=(0,o.Z)(e,2),n=t[0];t[1];return n}))},g=function(e,t){var n=d(d({},e),{},{selectedGroupIds:{}}),r=(0,a.eD)(t,e);if(!r.length)return d(d({},n),{},{editingGroupId:null});var o,i=s(r);try{for(i.s();!(o=i.n()).done;){var l=o.value.groupIds;if(e.editingGroupId){var c=l.indexOf(e.editingGroupId);c>-1&&(l=l.slice(0,c))}if(l.length>0){var u=l[l.length-1];n=f(u,n,t)}}}catch(e){i.e(e)}finally{i.f()}return n},v=function(e,t){return d(d({},e),{},{editingGroupId:t.groupIds.length?t.groupIds[0]:null,selectedGroupIds:{},selectedElementIds:(0,i.Z)({},t.id,!0)})},b=function(e,t){return e.groupIds.includes(t)},y=function(e,t){return e.filter((function(e){return b(e,t)}))},x=function(e,t){return e.groupIds.find((function(e){return t[e]}))},w=function(e,t,n){for(var o=(0,r.Z)(e),i=t?e.indexOf(t):-1,a=i>-1?i:e.length,l=0;l<a;l++)o[l]=n(o[l]);return o},k=function(e,t,n){var o=(0,r.Z)(e),i=n?o.indexOf(n):-1,a=i>-1?i:o.length;return o.splice(a,0,t),o},E=function(e,t){return e.filter((function(e){return!t[e]}))},S=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],o=t.get(n)||[],i=(0,l.WJ)(e);i&&o.push(i),t.set(n,[].concat((0,r.Z)(o),[e]))})),Array.from(t.values())}},8211:function(e,t,n){\"use strict\";n.d(t,{Fp:function(){return d},G3:function(){return v},Mj:function(){return f},QT:function(){return w},m0:function(){return g},t:function(){return y}});var r=n(8950),o=n(2975),i=n.n(o),a=n(1463),l=n(4451),s=n(2335),c=n(9487),u=n(4739),d={code:\"en\",label:\"English\"},f=[{code:\"ar-SA\",label:\"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",rtl:!0},{code:\"bg-BG\",label:\"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\"},{code:\"ca-ES\",label:\"Catal\u00e0\"},{code:\"cs-CZ\",label:\"\u010cesky\"},{code:\"de-DE\",label:\"Deutsch\"},{code:\"el-GR\",label:\"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"},{code:\"es-ES\",label:\"Espa\u00f1ol\"},{code:\"eu-ES\",label:\"Euskara\"},{code:\"fa-IR\",label:\"\u0641\u0627\u0631\u0633\u06cc\",rtl:!0},{code:\"fi-FI\",label:\"Suomi\"},{code:\"fr-FR\",label:\"Fran\u00e7ais\"},{code:\"gl-ES\",label:\"Galego\"},{code:\"he-IL\",label:\"\u05e2\u05d1\u05e8\u05d9\u05ea\",rtl:!0},{code:\"hi-IN\",label:\"\u0939\u093f\u0928\u094d\u0926\u0940\"},{code:\"hu-HU\",label:\"Magyar\"},{code:\"id-ID\",label:\"Bahasa Indonesia\"},{code:\"it-IT\",label:\"Italiano\"},{code:\"ja-JP\",label:\"\u65e5\u672c\u8a9e\"},{code:\"kab-KAB\",label:\"Taqbaylit\"},{code:\"kk-KZ\",label:\"\u049a\u0430\u0437\u0430\u049b \u0442\u0456\u043b\u0456\"},{code:\"ko-KR\",label:\"\ud55c\uad6d\uc5b4\"},{code:\"ku-TR\",label:\"Kurd\u00ee\"},{code:\"lt-LT\",label:\"Lietuvi\u0173\"},{code:\"lv-LV\",label:\"Latvie\u0161u\"},{code:\"my-MM\",label:\"Burmese\"},{code:\"nb-NO\",label:\"Norsk bokm\u00e5l\"},{code:\"nl-NL\",label:\"Nederlands\"},{code:\"nn-NO\",label:\"Norsk nynorsk\"},{code:\"oc-FR\",label:\"Occitan\"},{code:\"pa-IN\",label:\"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\"},{code:\"pl-PL\",label:\"Polski\"},{code:\"pt-BR\",label:\"Portugu\u00eas Brasileiro\"},{code:\"pt-PT\",label:\"Portugu\u00eas\"},{code:\"ro-RO\",label:\"Rom\u00e2n\u0103\"},{code:\"ru-RU\",label:\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"},{code:\"sk-SK\",label:\"Sloven\u010dina\"},{code:\"sv-SE\",label:\"Svenska\"},{code:\"sl-SI\",label:\"Sloven\u0161\u010dina\"},{code:\"tr-TR\",label:\"T\u00fcrk\u00e7e\"},{code:\"uk-UA\",label:\"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\"},{code:\"zh-CN\",label:\"\u7b80\u4f53\u4e2d\u6587\"},{code:\"zh-TW\",label:\"\u7e41\u9ad4\u4e2d\u6587\"},{code:\"vi-VN\",label:\"Ti\u1ebfng Vi\u1ec7t\"},{code:\"mr-IN\",label:\"\u092e\u0930\u093e\u0920\u0940\"}].concat([d]).sort((function(e,t){return e.label>t.label?1:-1})).filter((function(e){return l[e.code]>=85})),p=\"__test__\";\"production\"===s.Vi.DEVELOPMENT&&f.unshift({code:p,label:\"test language\"},{code:\"\".concat(p,\".rtl\"),label:\"\u202atest language (rtl)\u202c\",rtl:!0});var h=d,m={},g=function(){var e=(0,r.Z)(i().mark((function e(t){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(h=t,document.documentElement.dir=h.rtl?\"rtl\":\"ltr\",document.documentElement.lang=h.code,!t.code.startsWith(p)){e.next=7;break}m={},e.next=17;break;case 7:return e.prev=7,e.next=10,n(940)(\".\/\".concat(h.code,\".json\"));case 10:m=e.sent,e.next=17;break;case 13:e.prev=13,e.t0=e.catch(7),console.error(\"Failed to load language \".concat(t.code,\":\"),e.t0.message),m=a;case 17:c.e_.set(x,t.code);case 18:case\"end\":return e.stop()}}),e,null,[[7,13]])})));return function(t){return e.apply(this,arguments)}}(),v=function(){return h},b=function(e,t){for(var n=0;n<t.length;++n){var r=t[n];if(void 0===e[r])return;e=e[r]}if(\"string\"==typeof e)return e},y=function(e,t){if(h.code.startsWith(p)){var n=t?\"\".concat(e,\"(\").concat(JSON.stringify(t).slice(1,-1),\")\"):e;return\"\u202a[[\".concat(n,\"]]\u202c\")}var r=e.split(\".\"),o=b(m,r)||b(a,r);if(void 0===o)throw new Error(\"Can't find translation for \".concat(e));if(t)for(var i in t)o=o.replace(\"{{\".concat(i,\"}}\"),String(t[i]));return o},x=(0,u.cn)(d.code),w=function(){var e=(0,u.Dv)(x,c.yE);return{t:y,langCode:e}}},9487:function(e,t,n){\"use strict\";n.d(t,{e_:function(){return i},yE:function(){return o}});var r=n(4739),o=(n(9787),Symbol()),i=(0,r.Vv)()},6066:function(e,t,n){\"use strict\";n.d(t,{E0:function(){return s},Ge:function(){return c},OA:function(){return l},Wl:function(){return a},aU:function(){return o},tW:function(){return i}});var r=n(2335),o={EQUAL:\"Equal\",MINUS:\"Minus\",NUM_ADD:\"NumpadAdd\",NUM_SUBTRACT:\"NumpadSubtract\",NUM_ZERO:\"Numpad0\",BRACKET_RIGHT:\"BracketRight\",BRACKET_LEFT:\"BracketLeft\",ONE:\"Digit1\",TWO:\"Digit2\",NINE:\"Digit9\",QUOTE:\"Quote\",ZERO:\"Digit0\",SLASH:\"Slash\",C:\"KeyC\",D:\"KeyD\",H:\"KeyH\",V:\"KeyV\",Z:\"KeyZ\",R:\"KeyR\"},i={ARROW_DOWN:\"ArrowDown\",ARROW_LEFT:\"ArrowLeft\",ARROW_RIGHT:\"ArrowRight\",ARROW_UP:\"ArrowUp\",PAGE_UP:\"PageUp\",PAGE_DOWN:\"PageDown\",BACKSPACE:\"Backspace\",ALT:\"Alt\",CTRL_OR_CMD:r.Um?\"metaKey\":\"ctrlKey\",DELETE:\"Delete\",ENTER:\"Enter\",ESCAPE:\"Escape\",QUESTION_MARK:\"?\",SPACE:\" \",TAB:\"Tab\",CHEVRON_LEFT:\"<\",CHEVRON_RIGHT:\">\",PERIOD:\".\",COMMA:\",\",A:\"a\",C:\"c\",D:\"d\",E:\"e\",F:\"f\",G:\"g\",H:\"h\",I:\"i\",L:\"l\",O:\"o\",P:\"p\",Q:\"q\",R:\"r\",S:\"s\",T:\"t\",V:\"v\",X:\"x\",Y:\"y\",Z:\"z\",K:\"k\",0:\"0\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\"},a=function(e){return e===i.ARROW_LEFT||e===i.ARROW_RIGHT||e===i.ARROW_DOWN||e===i.ARROW_UP},l=function(e){return e.altKey},s=function(e){return e.shiftKey},c=function(e){return e.shiftKey}},6552:function(e,t,n){\"use strict\";n.d(t,{EK:function(){return S},H5:function(){return u},Jj:function(){return E},LW:function(){return c},N_:function(){return y},U1:function(){return a},c9:function(){return f},eH:function(){return w},g6:function(){return d},lk:function(){return k},wC:function(){return g},xj:function(){return l},yB:function(){return b},yW:function(){return v},yq:function(){return s}});var r=n(2335),o=n(3063),i=n(8925),a=function(e,t,n,r,o){return[(e-n)*Math.cos(o)-(t-r)*Math.sin(o)+n,(e-n)*Math.sin(o)+(t-r)*Math.cos(o)+r]},l=function(e,t,n){return a(e[0],e[1],t[0],t[1],n)},s=function(e,t,n,r,o,i,a,l){var s=Math.cos(r),c=Math.sin(r);return e.e&&e.w?t+=o+a:e.e?(t+=o*(1+s),n+=o*c,t+=a*(1-s),n+=a*-c):e.w&&(t+=o*(1-s),n+=o*-c,t+=a*(1+s),n+=a*c),e.n&&e.s?n+=i+l:e.n?(t+=i*c,n+=i*(1-s),t+=l*-c,n+=l*(1+s)):e.s&&(t+=i*-c,n+=i*(1+s),t+=l*c,n+=l*(1-s)),[t,n]},c=function(e,t,n,r){var o=n-e,i=r-t;return Math.hypot(o,i)},u=function(e,t){return[(e[0]+t[0])\/2,(e[1]+t[1])\/2]},d=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(e.length>=3){var n=[e[0],e[e.length-1]],o=n[0],i=n[1],a=c(o[0],o[1],i[0],i[1]);return a<=r.qx\/t}return!1},f=function(e,t,n){var r=e.length;if(r<3)return!1;for(var o=[Number.MAX_SAFE_INTEGER,n],i=[t,n],a=0,l=0;l<r;l++){var s=e[l],c=e[(l+1)%r];if(m(s,c,i,o)){if(0===h(s,i,c))return p(s,i,c);a++}}return a%2==1},p=function(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])},h=function(e,t,n){var r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2},m=function(e,t,n,r){var o=h(e,t,n),i=h(e,t,r),a=h(n,r,e),l=h(n,r,t);return o!==i&&a!==l||(!(0!==o||!p(e,n,t))||(!(0!==i||!p(e,r,t))||(!(0!==a||!p(n,e,r))||!(0!==l||!p(n,t,r)))))},g=function(e,t,n){return n?[Math.round(e\/n)*n,Math.round(t\/n)*n]:[e,t]},v=function(e,t){var n,o,i;if((null===(n=t.roundness)||void 0===n?void 0:n.type)===r.a6.PROPORTIONAL_RADIUS||(null===(o=t.roundness)||void 0===o?void 0:o.type)===r.a6.LEGACY)return e*r.Rx;if((null===(i=t.roundness)||void 0===i?void 0:i.type)===r.a6.ADAPTIVE_RADIUS){var a,l,s=null!==(a=null===(l=t.roundness)||void 0===l?void 0:l.value)&&void 0!==a?a:r._9;return e<=s\/r.Rx?e*r.Rx:s}return 0},b=function(e,t){var n=(0,o.R2)(e);if(!n)return null;for(var r=(0,i.CM)(n[0]),a=[0,0],l=0,s=1\/0,u=null;l<r.length;){var d=r[l],f=d.op,p=d.data;if(\"move\"===f&&(a=p),\"bcurveTo\"===f){var h=a,m=[p[0],p[1]],g=[p[2],p[3]],v=[p[4],p[5]],b=c(v[0],v[1],t[0],t[1]);b<s&&(s=b,u=[h,m,g,v]),a=v}l++}return u},y=function(e,t,n,r,o){var i=function(o,i){return Math.pow(1-o,3)*r[i]+3*o*Math.pow(1-o,2)*n[i]+3*Math.pow(o,2)*(1-o)*t[i]+e[i]*Math.pow(o,3)};return[i(o,0),i(o,1)]},x=function(e,t){var n=[];n[0]=0;for(var r=function(e,t){var n=b(e,t);if(!n)return[];for(var r=[],o=1;o>0;){var i=y(n[0],n[1],n[2],n[3],o);r.push([i[0],i[1]]),o-=.05}return r.length&&E(r.at(-1),t)&&r.push([t[0],t[1]]),r}(e,t),o=0,i=0;o<r.length-1;){i+=c(r[o][0],r[o][1],r[o+1][0],r[o+1][1]),n.push(i),o++}return n},w=function(e,t){return x(e,t).at(-1)},k=function(e,t,n){for(var r=x(e,t),o=r.length-1,i=n*r.at(-1),a=0,l=o,s=0;a<l;)r[s=Math.floor(a+(l-a)\/2)]<i?a=s+1:l=s;return r[s]>i&&s--,r[s]===i?s\/o:1-(s+(i-r[s])\/(r[s+1]-r[s]))\/o},E=function(e,t){return e[0]===t[0]&&e[1]===t[1]},S=function(e){return Math.round(e\/Math.PI*1e4)%5e3==0}},3024:function(e,t,n){\"use strict\";n.d(t,{$D:function(){return S},Fl:function(){return E},I_:function(){return f.I_},N7:function(){return v.N7},NI:function(){return f.NI},NL:function(){return k},ZY:function(){return g.ZY},cT:function(){return g.cT},i1:function(){return j},lV:function(){return g.lV},zh:function(){return b.zh}});var r=n(8950),o=n(7169),i=n(2975),a=n.n(i),l=n(4162),s=n(8897),c=n(679),u=n(2335),d=n(673),f=n(5523),p=n(6665),h=n(1564),m=n(2791),g=n(434),v=n(3063),b=n(7053);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var w=function(e){var t=new h.Z;return t.replaceAllElements((0,m._N)(e)),t.getNonDeletedElements()},k=function(e){var t=e.elements,n=e.appState,r=e.files,o=e.maxWidthOrHeight,i=e.getDimensions,a=e.exportPadding,s=(0,c.nu)({elements:t,appState:n},null,null),u=s.elements,d=s.appState,f=d.exportBackground,p=d.viewBackgroundColor;return(0,l.NL)(w(u),x(x({},d),{},{offsetTop:0,offsetLeft:0,width:0,height:0}),r||{},{exportBackground:f,exportPadding:a,viewBackgroundColor:p},(function(e,t){var r,a=document.createElement(\"canvas\");if(o){var l;\"function\"==typeof i&&console.warn(\"`getDimensions()` is ignored when `maxWidthOrHeight` is supplied.\");var s=Math.max(e,t),c=o<s?o\/s:null!==(l=null==n?void 0:n.exportScale)&&void 0!==l?l:1;return a.width=e*c,a.height=t*c,{canvas:a,scale:c}}var u=(null==i?void 0:i(e,t))||{width:e,height:t};return a.width=u.width,a.height=u.height,{canvas:a,scale:null!==(r=u.scale)&&void 0!==r?r:1}}))},E=function(){var e=(0,r.Z)(a().mark((function e(t){var n,o,i,l,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=(o=t).mimeType,l=void 0===i?u.LO.png:i,s=o.quality,l===u.LO.png&&\"number\"==typeof s&&console.warn('\"quality\" will be ignored for \"'.concat(u.LO.png,'\" mimeType')),\"image\/jpg\"===l&&(l=u.LO.jpg),l!==u.LO.jpg||null!==(n=t.appState)&&void 0!==n&&n.exportBackground||(console.warn('Defaulting \"exportBackground\" to \"true\" for \"'.concat(u.LO.jpg,'\" mimeType')),t=x(x({},t),{},{appState:x(x({},t.appState),{},{exportBackground:!0})})),e.next=6,k(x(x({},t),{},{elements:w(t.elements)}));case 6:return c=e.sent,s=s||(\/image\\\/jpe?g\/.test(l)?.92:.8),e.abrupt(\"return\",new Promise((function(e,n){c.toBlob(function(){var o=(0,r.Z)(a().mark((function r(o){var i;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(o){r.next=2;break}return r.abrupt(\"return\",n(new Error(\"couldn't export to blob\")));case 2:if(!o||l!==u.LO.png||null===(i=t.appState)||void 0===i||!i.exportEmbedScene){r.next=6;break}return r.next=5,(0,d.encodePngMetadata)({blob:o,metadata:(0,f.I_)(t.elements,t.appState,t.files||{},\"local\")});case 5:o=r.sent;case 6:e(o);case 7:case\"end\":return r.stop()}}),r)})));return function(e){return o.apply(this,arguments)}}(),l,s)})));case 9:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),S=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r,o,i,u,d,p,h,m,g;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.elements,r=t.appState,o=void 0===r?(0,s.im)():r,i=t.files,u=void 0===i?{}:i,d=t.exportPadding,p=(0,c.nu)({elements:n,appState:o},null,null),h=p.elements,m=p.appState,g=x(x({},m),{},{exportPadding:d}),e.abrupt(\"return\",(0,l.$D)(w(h),g,u,{serializeAsJSON:function(){return(0,f.I_)(h,g,u||{},\"local\")}}));case 4:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),j=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(\"svg\"!==t.type){e.next=8;break}return e.next=3,S(t);case 3:return n=e.sent,e.next=6,(0,p.dd)(n.outerHTML);case 6:case 11:case 17:e.next=20;break;case 8:if(\"png\"!==t.type){e.next=13;break}return e.next=11,(0,p.uR)(E(t));case 13:if(\"json\"!==t.type){e.next=19;break}return r=x(x({offsetTop:0,offsetLeft:0,width:0,height:0},(0,s.im)()),t.appState),e.next=17,(0,p.vQ)(t.elements,r,t.files);case 19:throw new Error(\"Invalid export type\");case 20:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},5001:function(e,t,n){\"use strict\";n.d(t,{k:function(){return o},z:function(){return i}});var r=n(1930),o=function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{width:Math.max.apply(Math,(0,r.Z)(t))-Math.min.apply(Math,(0,r.Z)(t)),height:Math.max.apply(Math,(0,r.Z)(n))-Math.min.apply(Math,(0,r.Z)(n))}},i=function(e,t,n,o){var i=n.map((function(t){return t[e]})),a=Math.max.apply(Math,(0,r.Z)(i)),l=Math.min.apply(Math,(0,r.Z)(i)),s=a-l,c=0===s?1:t\/s,u=1\/0,d=n.map((function(t){var n=t[e]*c,o=(0,r.Z)(t);return o[e]=n,n<u&&(u=n),o}));if(!o)return d;if(2===d.length)return d;var f=l-u;return d.map((function(t){return t.map((function(t,n){return n===e?t+f:t}))}))}},6954:function(e,t,n){\"use strict\";n.d(t,{LU:function(){return s},kb:function(){return c}});var r=n(8152),o=n(5605),i=n(6340),a=new r.k(Date.now()),l=0,s=function(){return Math.floor(a.next()*Math.pow(2,31))},c=function(){return(0,i.h2)()?\"id\".concat(l++):(0,o.x0)()}},3063:function(e,t,n){\"use strict\";n.d(t,{Dn:function(){return F},i:function(){return $},N7:function(){return le},R2:function(){return X},bI:function(){return J},lw:function(){return ne},Rg:function(){return oe}});var r=n(1930),o=n(7169),i=n(2577),a=n(1974),l=n(8925),s=n(6340),c=n(6552),u=n(8234),d=n(8897),f=n(2335);function p(e,t,n,r=(e=>e)){return e*r(.5-t*(.5-n))}function h(e,t){return[e[0]+t[0],e[1]+t[1]]}function m(e,t){return[e[0]-t[0],e[1]-t[1]]}function g(e,t){return[e[0]*t,e[1]*t]}function v(e){return[e[1],-e[0]]}function b(e,t){return e[0]*t[0]+e[1]*t[1]}function y(e,t){return e[0]===t[0]&&e[1]===t[1]}function x(e,t){return function(e){return e[0]*e[0]+e[1]*e[1]}(m(e,t))}function w(e){return function(e,t){return[e[0]\/t,e[1]\/t]}(e,function(e){return Math.hypot(e[0],e[1])}(e))}function k(e,t){return Math.hypot(e[1]-t[1],e[0]-t[0])}function E(e,t,n){let r=Math.sin(n),o=Math.cos(n),i=e[0]-t[0],a=e[1]-t[1],l=i*r+a*o;return[i*o-a*r+t[0],l+t[1]]}function S(e,t,n){return h(e,g(m(t,e),n))}function j(e,t,n){return h(e,g(t,n))}var{min:_,PI:O}=Math,C=O+1e-4;function I(e,t={}){return function(e,t={}){let{size:n=16,smoothing:r=.5,thinning:o=.5,simulatePressure:i=!0,easing:a=(e=>e),start:l={},end:s={},last:c=!1}=t,{cap:u=!0,easing:d=(e=>e*(2-e))}=l,{cap:f=!0,easing:y=(e=>--e*e*e+1)}=s;if(0===e.length||n<=0)return[];let k,O=e[e.length-1].runningLength,I=!1===l.taper?0:!0===l.taper?Math.max(n,O):l.taper,M=!1===s.taper?0:!0===s.taper?Math.max(n,O):s.taper,T=Math.pow(n*r,2),P=[],D=[],A=e.slice(0,10).reduce(((e,t)=>{let r=t.pressure;if(i){let o=_(1,t.distance\/n),i=_(1,1-o);r=_(1,e+.275*o*(i-e))}return(e+r)\/2}),e[0].pressure),L=p(n,o,e[e.length-1].pressure,a),Z=e[0].vector,z=e[0].point,R=z,N=z,B=R,H=!1;for(let t=0;t<e.length;t++){let{pressure:r}=e[t],{point:l,vector:s,distance:c,runningLength:u}=e[t];if(t<e.length-1&&O-u<3)continue;if(o){if(i){let e=_(1,c\/n),t=_(1,1-e);r=_(1,A+.275*e*(t-A))}L=p(n,o,r,a)}else L=n\/2;void 0===k&&(k=L);let f=u<I?d(u\/I):1,w=O-u<M?y((O-u)\/M):1;L=Math.max(.01,L*Math.min(f,w));let j=(t<e.length-1?e[t+1]:e[t]).vector,W=t<e.length-1?b(s,j):1,F=null!==W&&W<0;if(b(s,Z)<0&&!H||F){let e=g(v(Z),L);for(let t=1\/13,n=0;n<=1;n+=t)N=E(m(l,e),l,C*n),P.push(N),B=E(h(l,e),l,C*-n),D.push(B);z=N,R=B,F&&(H=!0);continue}if(H=!1,t===e.length-1){let e=g(v(s),L);P.push(m(l,e)),D.push(h(l,e));continue}let U=g(v(S(j,s,W)),L);N=m(l,U),(t<=1||x(z,N)>T)&&(P.push(N),z=N),B=h(l,U),(t<=1||x(R,B)>T)&&(D.push(B),R=B),A=r,Z=s}let W=e[0].point.slice(0,2),F=e.length>1?e[e.length-1].point.slice(0,2):h(e[0].point,[1,1]),U=[],K=[];if(1===e.length){if(!I&&!M||c){let e=j(W,w(v(m(W,F))),-(k||L)),t=[];for(let n=1\/13,r=n;r<=1;r+=n)t.push(E(e,W,2*C*r));return t}}else{if(!(I||M&&1===e.length))if(u)for(let e=1\/13,t=e;t<=1;t+=e){let e=E(D[0],W,C*t);U.push(e)}else{let e=m(P[0],D[0]),t=g(e,.5),n=g(e,.51);U.push(m(W,t),m(W,n),h(W,n),h(W,t))}let t=v(function(e){return[-e[0],-e[1]]}(e[e.length-1].vector));if(M||I&&1===e.length)K.push(F);else if(f){let e=j(F,t,L);for(let t=1\/29,n=t;n<1;n+=t)K.push(E(e,F,3*C*n))}else K.push(h(F,g(t,L)),h(F,g(t,.99*L)),m(F,g(t,.99*L)),m(F,g(t,L)))}return P.concat(K,D.reverse(),U)}(function(e,t={}){var n;let{streamline:r=.5,size:o=16,last:i=!1}=t;if(0===e.length)return[];let a=.15+.85*(1-r),l=Array.isArray(e[0])?e:e.map((({x:e,y:t,pressure:n=.5})=>[e,t,n]));if(2===l.length){let e=l[1];l=l.slice(0,-1);for(let t=1;t<5;t++)l.push(S(l[0],e,t\/4))}1===l.length&&(l=[...l,[...h(l[0],[1,1]),...l[0].slice(2)]]);let s=[{point:[l[0][0],l[0][1]],pressure:l[0][2]>=0?l[0][2]:.25,vector:[1,1],distance:0,runningLength:0}],c=!1,u=0,d=s[0],f=l.length-1;for(let e=1;e<l.length;e++){let t=i&&e===f?l[e].slice(0,2):S(d.point,l[e],a);if(y(d.point,t))continue;let n=k(t,d.point);if(u+=n,e<f&&!c){if(u<o)continue;c=!0}d={point:t,pressure:l[e][2]>=0?l[e][2]:.5,vector:w(m(d.point,t)),distance:n,runningLength:u},s.push(d)}return s[0].vector=(null==(n=s[1])?void 0:n.vector)||[0,0],s}(e,t),t)}var M=n(5710),T=n(6938),P=n(6794);function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var L=\"invert(100%) hue-rotate(180deg) saturate(1.25)\",Z=(0,d.im)(),z=function(e,t){return(0,a.wi)(e)&&!t.imageCache.has(e.fileId)},R=function(e,t){var n;return\"dark\"===t.theme&&(0,a.wi)(e)&&!z(e,t)&&(null===(n=t.imageCache.get(e.fileId))||void 0===n?void 0:n.mimeType)!==f.LO.svg},N=function(e){return[8,8+e]},B=function(e){return[1.5,6+e]},H=function(e){return\"freedraw\"===e.type?12*e.strokeWidth:20},W=function(e,t,n){var r,o=document.createElement(\"canvas\"),c=o.getContext(\"2d\"),d=H(e),f=function(e,t){var n=16777216,r=32767,o=H(e),c=(0,l.qf)(e),u=(0,i.Z)(c,4),d=u[0],f=u[1],p=u[2],h=u[3],m=(0,a.bt)(e)||(0,a.F9)(e)?(0,s.TE)(d,p):e.width,g=(0,a.bt)(e)||(0,a.F9)(e)?(0,s.TE)(f,h):e.height,v=m*window.devicePixelRatio+2*o,b=g*window.devicePixelRatio+2*o,y=t.value;return(v*y>r||b*y>r)&&(y=Math.min(r\/v,r\/b)),v*b*y*y>n&&(y=Math.sqrt(n\/(v*b))),{width:v=Math.floor(v*y),height:b=Math.floor(b*y),scale:y}}(e,t),p=f.width,h=f.height,m=f.scale;o.width=p,o.height=h;var g=0,v=0;if((0,a.bt)(e)||(0,a.F9)(e)){var b=(0,l.qf)(e),y=(0,i.Z)(b,2),x=y[0],w=y[1];g=e.x>x?(0,s.TE)(e.x,x)*window.devicePixelRatio*m:0,v=e.y>w?(0,s.TE)(e.y,w)*window.devicePixelRatio*m:0,c.translate(g,v)}c.save(),c.translate(d*m,d*m),c.scale(window.devicePixelRatio*m,window.devicePixelRatio*m);var k=u.Z.canvas(o);return R(e,n)&&(c.filter=L),Y(e,k,c,n),c.restore(),{element:e,canvas:o,theme:n.theme,scale:m,zoomValue:t.value,canvasOffsetX:g,canvasOffsetY:v,boundTextElementVersion:(null===(r=(0,M.WJ)(e))||void 0===r?void 0:r.version)||null}},F=14,U=document.createElement(\"img\");U.src=\"data:\".concat(f.LO.svg,\",\").concat(encodeURIComponent('<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"image\" class=\"svg-inline--fa fa-image fa-w-16\" role=\"img\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 512 512\"><path fill=\"#888\" d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z\"><\/path><\/svg>'));var K=document.createElement(\"img\");K.src=\"data:\".concat(f.LO.svg,\",\").concat(encodeURIComponent('<svg viewBox=\"0 0 668 668\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xml:space=\"preserve\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2\"><path d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48ZM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56ZM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48Z\" style=\"fill:#888;fill-rule:nonzero\" transform=\"matrix(.81709 0 0 .81709 124.825 145.825)\"\/><path d=\"M256 8C119.034 8 8 119.033 8 256c0 136.967 111.034 248 248 248s248-111.034 248-248S392.967 8 256 8Zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676ZM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676Z\" style=\"fill:#888;fill-rule:nonzero\" transform=\"matrix(.30366 0 0 .30366 506.822 60.065)\"\/><\/svg>'));var Y=function(e,t,n,r){switch(n.globalAlpha=e.opacity\/100,e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":n.lineJoin=\"round\",n.lineCap=\"round\",t.draw(X(e));break;case\"arrow\":case\"line\":n.lineJoin=\"round\",n.lineCap=\"round\",X(e).forEach((function(e){t.draw(e)}));break;case\"freedraw\":n.save(),n.fillStyle=e.strokeColor;var o=function(e){return ie.get(e)}(e),i=X(e);i&&t.draw(i),n.fillStyle=e.strokeColor,n.fill(o),n.restore();break;case\"image\":var l,c=(0,a.wi)(e)?null===(l=r.imageCache.get(e.fileId))||void 0===l?void 0:l.image:void 0;null==c||c instanceof Promise?function(e,t,n){t.fillStyle=\"#E7E7E7\",t.fillRect(0,0,e.width,e.height);var r=Math.min(e.width,e.height),o=Math.min(r,Math.min(.4*r,100));t.drawImage(\"error\"===e.status?K:U,e.width\/2-o\/2,e.height\/2-o\/2,o,o)}(e,n,r.zoom.value):n.drawImage(c,0,0,e.width,e.height);break;default:if(!(0,a.iB)(e))throw new Error(\"Unimplemented type \".concat(e.type));var u=(0,s.dZ)(e.text),d=u&&!n.canvas.isConnected;d&&document.body.appendChild(n.canvas),n.canvas.setAttribute(\"dir\",u?\"rtl\":\"ltr\"),n.save(),n.font=(0,s.mO)(e),n.fillStyle=e.strokeColor,n.textAlign=e.textAlign;for(var f=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),p=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,h=(0,M.Rg)(e.fontSize,e.lineHeight),m=e.height-e.baseline,g=0;g<f.length;g++)n.fillText(f[g],p,(g+1)*h-m);n.restore(),d&&n.canvas.remove()}n.globalAlpha=1},G=new WeakMap,V=new WeakMap,X=function(e){return V.get(e)},q=function(e,t){return V.set(e,t)},J=function(e){return V.delete(e)},$=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n={seed:e.seed,strokeLineDash:\"dashed\"===e.strokeStyle?N(e.strokeWidth):\"dotted\"===e.strokeStyle?B(e.strokeWidth):void 0,disableMultiStroke:\"solid\"!==e.strokeStyle,strokeWidth:\"solid\"!==e.strokeStyle?e.strokeWidth+.5:e.strokeWidth,fillWeight:e.strokeWidth\/2,hachureGap:4*e.strokeWidth,roughness:e.roughness,stroke:e.strokeColor,preserveVertices:t};switch(e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":return n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor,\"ellipse\"===e.type&&(n.curveFitting=1),n;case\"line\":case\"freedraw\":return(0,c.g6)(e.points)&&(n.fillStyle=e.fillStyle,n.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor),n;case\"arrow\":return n;default:throw new Error(\"Unimplemented type \".concat(e.type))}},Q=function(e,t){var n=V.get(e);if(void 0===n)switch(G.delete(e),e.type){case\"rectangle\":if(e.roundness){var o=e.width,a=e.height,s=(0,c.yW)(Math.min(o,a),e);n=t.path(\"M \".concat(s,\" 0 L \").concat(o-s,\" 0 Q \").concat(o,\" 0, \").concat(o,\" \").concat(s,\" L \").concat(o,\" \").concat(a-s,\" Q \").concat(o,\" \").concat(a,\", \").concat(o-s,\" \").concat(a,\" L \").concat(s,\" \").concat(a,\" Q 0 \").concat(a,\", 0 \").concat(a-s,\" L 0 \").concat(s,\" Q 0 0, \").concat(s,\" 0\"),$(e,!0))}else n=t.rectangle(0,0,e.width,e.height,$(e));q(e,n);break;case\"diamond\":var u=(0,l.UC)(e),d=(0,i.Z)(u,8),f=d[0],p=d[1],h=d[2],m=d[3],g=d[4],v=d[5],b=d[6],y=d[7];if(e.roundness){var x=(0,c.yW)(Math.abs(f-b),e),w=(0,c.yW)(Math.abs(m-p),e);n=t.path(\"M \".concat(f+x,\" \").concat(p+w,\" L \").concat(h-x,\" \").concat(m-w,\"\\n            C \").concat(h,\" \").concat(m,\", \").concat(h,\" \").concat(m,\", \").concat(h-x,\" \").concat(m+w,\"\\n            L \").concat(g+x,\" \").concat(v-w,\"\\n            C \").concat(g,\" \").concat(v,\", \").concat(g,\" \").concat(v,\", \").concat(g-x,\" \").concat(v-w,\"\\n            L \").concat(b+x,\" \").concat(y+w,\"\\n            C \").concat(b,\" \").concat(y,\", \").concat(b,\" \").concat(y,\", \").concat(b+x,\" \").concat(y-w,\"\\n            L \").concat(f-x,\" \").concat(p+w,\"\\n            C \").concat(f,\" \").concat(p,\", \").concat(f,\" \").concat(p,\", \").concat(f+x,\" \").concat(p+w),$(e,!0))}else n=t.polygon([[f,p],[h,m],[g,v],[b,y]],$(e));q(e,n);break;case\"ellipse\":n=t.ellipse(e.width\/2,e.height\/2,e.width,e.height,$(e)),q(e,n);break;case\"line\":case\"arrow\":var k=$(e),E=e.points.length?e.points:[[0,0]];if(n=e.roundness?[t.curve(E,k)]:k.fill?[t.polygon(E,k)]:[t.linearPath(E,k)],\"arrow\"===e.type){var S=e.startArrowhead,j=void 0===S?null:S,_=e.endArrowhead,O=void 0===_?\"arrow\":_,C=function(e,n,r,o){var a=(0,l.Y5)(e,n,r,o);if(null===a)return[];if(\"dot\"===o){var s=(0,i.Z)(a,3),c=s[0],u=s[1],d=s[2];return[t.circle(c,u,d,A(A({},k),{},{fill:e.strokeColor,fillStyle:\"solid\",stroke:\"none\"}))]}if(\"triangle\"===o){var f=(0,i.Z)(a,6),p=f[0],h=f[1],m=f[2],g=f[3],v=f[4],b=f[5];return delete k.strokeLineDash,[t.polygon([[p,h],[m,g],[v,b],[p,h]],A(A({},k),{},{fill:e.strokeColor,fillStyle:\"solid\"}))]}var y=(0,i.Z)(a,6),x=y[0],w=y[1],E=y[2],S=y[3],j=y[4],_=y[5];if(\"dotted\"===e.strokeStyle){var O=B(e.strokeWidth-1);k.strokeLineDash=[O[0],O[1]-1]}else delete k.strokeLineDash;return[t.line(E,S,x,w,k),t.line(j,_,x,w,k)]};if(null!==j){var I,M=C(e,n,\"start\",j);(I=n).push.apply(I,(0,r.Z)(M))}if(null!==O){var T,P=C(e,n,\"end\",O);(T=n).push.apply(T,(0,r.Z)(P))}}q(e,n);break;case\"freedraw\":ae(e),n=(0,c.g6)(e.points)?t.polygon(e.points,A(A({},$(e)),{},{stroke:\"none\"})):null,q(e,n);break;case\"text\":case\"image\":q(e,null)}},ee=function(e,t){var n,r=t?t.zoom:Z.zoom,o=G.get(e),i=o&&o.zoomValue!==r.value&&!(null!=t&&t.shouldCacheIgnoreZoom),a=(null===(n=(0,M.WJ)(e))||void 0===n?void 0:n.version)||null;if(!o||i||o.theme!==t.theme||o.boundTextElementVersion!==a){var l=W(e,r,t);return G.set(e,l),l}return o},te=function(e,t,n,r){var o=e.element,c=H(o),u=e.scale,d=(0,l.qf)(o),p=(0,i.Z)(d,4),h=p[0],m=p[1],g=p[2],v=p[3];(0,a.F9)(o)&&(h=Math.floor(h),g=Math.ceil(g),m=Math.floor(m),v=Math.ceil(v));var b=((h+g)\/2+r.scrollX)*window.devicePixelRatio,y=((m+v)\/2+r.scrollY)*window.devicePixelRatio;n.save(),n.scale(1\/window.devicePixelRatio,1\/window.devicePixelRatio);var x=(0,M.WJ)(o);if((0,a.Yv)(o)&&x){var w=document.createElement(\"canvas\"),k=w.getContext(\"2d\"),E=Math.max((0,s.TE)(h,g),(0,s.TE)(m,v));w.width=E*window.devicePixelRatio*u+c*e.scale*10,w.height=E*window.devicePixelRatio*u+c*e.scale*10;var S=(w.width-e.canvas.width)\/2,j=(w.height-e.canvas.height)\/2;k.translate(w.width\/2,w.height\/2),k.rotate(o.angle),k.drawImage(e.canvas,-e.canvas.width\/2,-e.canvas.height\/2,e.canvas.width,e.canvas.height);var _=(0,l.qf)(x),O=(0,i.Z)(_,6),C=O[4],I=O[5];k.rotate(-o.angle);var T=w.width\/2-(C-h)*window.devicePixelRatio*u-S-c*u,P=w.height\/2-(I-m)*window.devicePixelRatio*u-j-c*u;k.translate(-T,-P),k.clearRect(-(x.width\/2+f.gK)*window.devicePixelRatio*u,-(x.height\/2+f.gK)*window.devicePixelRatio*u,(x.width+2*f.gK)*window.devicePixelRatio*u,(x.height+2*f.gK)*window.devicePixelRatio*u),n.translate(b,y),n.drawImage(w,-(g-h)\/2*window.devicePixelRatio-S\/u-c,-(v-m)\/2*window.devicePixelRatio-j\/u-c,w.width\/u,w.height\/u)}else if(n.translate(b,y),n.rotate(o.angle),\"scale\"in e.element&&!z(o,r)&&n.scale(e.element.scale[0],e.element.scale[1]),n.translate(-b,-y),n.drawImage(e.canvas,(h+r.scrollX)*window.devicePixelRatio-c*e.scale\/e.scale,(m+r.scrollY)*window.devicePixelRatio-c*e.scale\/e.scale,e.canvas.width\/e.scale,e.canvas.height\/e.scale),\"true\"==={REACT_APP_BACKEND_V2_GET_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/\",REACT_APP_BACKEND_V2_POST_URL:\"https:\/\/json.excalidraw.com\/api\/v2\/post\/\",REACT_APP_LIBRARY_URL:\"https:\/\/libraries.excalidraw.com\",REACT_APP_LIBRARY_BACKEND:\"https:\/\/us-central1-excalidraw-room-persistence.cloudfunctions.net\/libraries\",REACT_APP_PORTAL_URL:\"https:\/\/portal.excalidraw.com\",REACT_APP_WS_SERVER_URL:\"\",REACT_APP_FIREBASE_CONFIG:'{\"apiKey\":\"AIzaSyAd15pYlMci_xIp9ko6wkEsDzAAA0Dn0RU\",\"authDomain\":\"excalidraw-room-persistence.firebaseapp.com\",\"databaseURL\":\"https:\/\/excalidraw-room-persistence.firebaseio.com\",\"projectId\":\"excalidraw-room-persistence\",\"storageBucket\":\"excalidraw-room-persistence.appspot.com\",\"messagingSenderId\":\"654800341332\",\"appId\":\"1:654800341332:web:4a692de832b55bd57ce0c1\"}',REACT_APP_GOOGLE_ANALYTICS_ID:\"UA-387204-13\",REACT_APP_MATOMO_URL:\"https:\/\/excalidraw.matomo.cloud\/\",REACT_APP_CDN_MATOMO_TRACKER_URL:\"\/\/cdn.matomo.cloud\/excalidraw.matomo.cloud\/matomo.js\",REACT_APP_MATOMO_SITE_ID:\"1\",REACT_APP_PLUS_APP:\"https:\/\/app.excalidraw.com\",PKG_NAME:\"@excalidraw\/excalidraw\",PKG_VERSION:\"0.15.3\",IS_EXCALIDRAW_NPM_PACKAGE:!0}.REACT_APP_DEBUG_ENABLE_TEXT_CONTAINER_BOUNDING_BOX&&(0,a.Xo)(o)){var D=(0,M.cw)(o);n.strokeStyle=\"#c92a2a\",n.lineWidth=3,n.strokeRect((D.x+r.scrollX)*window.devicePixelRatio,(D.y+r.scrollY)*window.devicePixelRatio,(0,M.jd)(o)*window.devicePixelRatio,(0,M.N2)(o)*window.devicePixelRatio)}n.restore()},ne=function(e,t,n,r,o){var d=t.generator;switch(e.type){case\"selection\":n.save(),n.translate(e.x+r.scrollX,e.y+r.scrollY),n.fillStyle=\"rgba(0, 0, 200, 0.04)\";var f=.5\/r.zoom.value;n.fillRect(f,f,e.width,e.height),n.lineWidth=1\/r.zoom.value,n.strokeStyle=\"rgb(105, 101, 219)\",n.strokeRect(f,f,e.width,e.height),n.restore();break;case\"freedraw\":if(Q(e,d),r.isExporting){var p=(0,l.qf)(e),h=(0,i.Z)(p,4),m=h[0],g=h[1],v=h[2],b=h[3],y=(m+v)\/2+r.scrollX,x=(g+b)\/2+r.scrollY,w=(v-m)\/2-(e.x-m),k=(b-g)\/2-(e.y-g);n.save(),n.translate(y,x),n.rotate(e.angle),n.translate(-w,-k),Y(e,t,n,r),n.restore()}else{var E=ee(e,r);te(E,0,n,r)}break;case\"rectangle\":case\"diamond\":case\"ellipse\":case\"line\":case\"arrow\":case\"image\":case\"text\":if(Q(e,d),r.isExporting){var S=(0,l.qf)(e),j=(0,i.Z)(S,4),_=j[0],O=j[1],C=j[2],I=j[3],P=(_+C)\/2+r.scrollX,D=(O+I)\/2+r.scrollY,A=(C-_)\/2-(e.x-_),L=(I-O)\/2-(e.y-O);if((0,a.iB)(e)){var Z=(0,M.tl)(e);if((0,a.Yv)(Z)){var z=T._.getBoundTextElementPosition(Z,e);A=(C-_)\/2-(z.x-_),L=(I-O)\/2-(z.y-O)}}n.save(),n.translate(P,D),R(e,r)&&(n.filter=\"none\");var N=(0,M.WJ)(e);if((0,a.Yv)(e)&&N){var B=document.createElement(\"canvas\"),W=B.getContext(\"2d\"),F=Math.max((0,s.TE)(_,C),(0,s.TE)(O,I)),U=H(e);B.width=F*o.exportScale+10*U*o.exportScale,B.height=F*o.exportScale+10*U*o.exportScale,W.translate(B.width\/2,B.height\/2),W.scale(o.exportScale,o.exportScale),A=e.width\/2-(e.x-_),L=e.height\/2-(e.y-O),W.rotate(e.angle);var K=u.Z.canvas(B);W.translate(-A,-L),Y(e,K,W,r),W.translate(A,L),W.rotate(-e.angle);var G=(0,l.qf)(N),V=(0,i.Z)(G,6),X=(_+C)\/2-V[4],q=(O+I)\/2-V[5];W.translate(-X,-q),W.clearRect(-N.width\/2,-N.height\/2,N.width,N.height),n.scale(1\/o.exportScale,1\/o.exportScale),n.drawImage(B,-B.width\/2,-B.height\/2,B.width,B.height)}else n.rotate(e.angle),\"image\"===e.type&&n.scale(e.scale[0],e.scale[1]),n.translate(-A,-L),Y(e,t,n,r);n.restore()}else{var J=ee(e,r),$=n.imageSmoothingEnabled;null!=r&&r.shouldCacheIgnoreZoom||e.angle&&!(0,c.EK)(e.angle)||(n.imageSmoothingEnabled=!1),te(J,0,n,r),n.imageSmoothingEnabled=$}break;default:throw new Error(\"Unimplemented type \".concat(e.type))}},re=function(e,t,n){if(void 0===n)return e.draw(t);var r={sets:t.sets,shape:t.shape,options:A(A({},t.options),{},{fixedDecimalPlaceDigits:n})};return e.draw(r)},oe=function(e,t,n,r,o,u,d){var p=(0,l.qf)(e),h=(0,i.Z)(p,4),m=h[0],g=h[1],v=h[2],b=h[3],y=(v-m)\/2-(e.x-m),x=(b-g)\/2-(e.y-g);if((0,a.iB)(e)){var w=(0,M.tl)(e);if((0,a.Yv)(w)){var k=(0,l.qf)(w),E=(0,i.Z)(k,4),S=E[0],j=E[1],_=E[2],O=E[3],C=T._.getBoundTextElementPosition(w,e);y=(_-S)\/2-(C.x-S),x=(O-j)\/2-(C.y-j),o=o+C.x-e.x,u=u+C.y-e.y}}var I=180*e.angle\/Math.PI,D=t.generator,A=n;if(e.link){var Z=n.ownerDocument.createElementNS(f.hR,\"a\");Z.setAttribute(\"href\",(0,P.$)(e.link)),A.appendChild(Z),A=Z}switch(e.type){case\"selection\":throw new Error(\"Selection rendering is not supported for SVG\");case\"rectangle\":case\"diamond\":case\"ellipse\":Q(e,D);var z=re(t,X(e),f.zK),R=e.opacity\/100;1!==R&&(z.setAttribute(\"stroke-opacity\",\"\".concat(R)),z.setAttribute(\"fill-opacity\",\"\".concat(R))),z.setAttribute(\"stroke-linecap\",\"round\"),z.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),A.appendChild(z);break;case\"line\":case\"arrow\":var N=(0,M.WJ)(e),B=n.ownerDocument.createElementNS(f.hR,\"mask\");if(N){B.setAttribute(\"id\",\"mask-\".concat(e.id));var H=n.ownerDocument.createElementNS(f.hR,\"rect\");o=o||0,u=u||0,H.setAttribute(\"x\",\"0\"),H.setAttribute(\"y\",\"0\"),H.setAttribute(\"fill\",\"#fff\"),H.setAttribute(\"width\",\"\".concat(e.width+100+o)),H.setAttribute(\"height\",\"\".concat(e.height+100+u)),B.appendChild(H);var W=n.ownerDocument.createElementNS(f.hR,\"rect\"),F=T._.getBoundTextElementPosition(e,N),U=o+F.x-e.x,K=u+F.y-e.y;W.setAttribute(\"x\",U.toString()),W.setAttribute(\"y\",K.toString()),W.setAttribute(\"fill\",\"#000\"),W.setAttribute(\"width\",\"\".concat(N.width)),W.setAttribute(\"height\",\"\".concat(N.height)),W.setAttribute(\"opacity\",\"1\"),B.appendChild(W)}Q(e,D);var Y=n.ownerDocument.createElementNS(f.hR,\"g\");N&&Y.setAttribute(\"mask\",\"url(#mask-\".concat(e.id,\")\"));var G=e.opacity\/100;Y.setAttribute(\"stroke-linecap\",\"round\"),X(e).forEach((function(n){var r=re(t,n,f.zK);1!==G&&(r.setAttribute(\"stroke-opacity\",\"\".concat(G)),r.setAttribute(\"fill-opacity\",\"\".concat(G))),r.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),\"line\"===e.type&&(0,c.g6)(e.points)&&\"transparent\"!==e.backgroundColor&&r.setAttribute(\"fill-rule\",\"evenodd\"),Y.appendChild(r)})),A.appendChild(Y),A.append(B);break;case\"freedraw\":Q(e,D),ae(e);var V=e.opacity\/100,q=X(e),J=q?re(t,q,f.zK):n.ownerDocument.createElementNS(f.hR,\"g\");1!==V&&(J.setAttribute(\"stroke-opacity\",\"\".concat(V)),J.setAttribute(\"fill-opacity\",\"\".concat(V))),J.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),J.setAttribute(\"stroke\",\"none\");var $=n.ownerDocument.createElementNS(f.hR,\"path\");$.setAttribute(\"fill\",e.strokeColor),$.setAttribute(\"d\",le(e)),J.appendChild($),A.appendChild(J);break;case\"image\":var ee=Math.round(e.width),te=Math.round(e.height),ne=(0,a.wi)(e)&&r[e.fileId];if(ne){var oe=\"image-\".concat(ne.id),ie=n.querySelector(\"#\".concat(oe));if(!ie){(ie=n.ownerDocument.createElementNS(f.hR,\"symbol\")).id=oe;var se=n.ownerDocument.createElementNS(f.hR,\"image\");se.setAttribute(\"width\",\"100%\"),se.setAttribute(\"height\",\"100%\"),se.setAttribute(\"href\",ne.dataURL),ie.appendChild(se),A.prepend(ie)}var ce=n.ownerDocument.createElementNS(f.hR,\"use\");if(ce.setAttribute(\"href\",\"#\".concat(oe)),d&&ne.mimeType!==f.LO.svg&&ce.setAttribute(\"filter\",L),ce.setAttribute(\"width\",\"\".concat(ee)),ce.setAttribute(\"height\",\"\".concat(te)),1!==e.scale[0]||1!==e.scale[1]){var ue=1!==e.scale[0]?-ee:0,de=1!==e.scale[1]?-te:0;ce.setAttribute(\"transform\",\"scale(\".concat(e.scale[0],\", \").concat(e.scale[1],\") translate(\").concat(ue,\" \").concat(de,\")\"))}var fe=n.ownerDocument.createElementNS(f.hR,\"g\");fe.appendChild(ce),fe.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\")),A.appendChild(fe)}break;default:if(!(0,a.iB)(e))throw new Error(\"Unimplemented type \".concat(e.type));var pe=e.opacity\/100,he=n.ownerDocument.createElementNS(f.hR,\"g\");1!==pe&&(he.setAttribute(\"stroke-opacity\",\"\".concat(pe)),he.setAttribute(\"fill-opacity\",\"\".concat(pe))),he.setAttribute(\"transform\",\"translate(\".concat(o||0,\" \").concat(u||0,\") rotate(\").concat(I,\" \").concat(y,\" \").concat(x,\")\"));for(var me=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),ge=(0,M.Rg)(e.fontSize,e.lineHeight),ve=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,be=(0,s.dZ)(e.text)?\"rtl\":\"ltr\",ye=\"center\"===e.textAlign?\"middle\":\"right\"===e.textAlign||\"rtl\"===be?\"end\":\"start\",xe=0;xe<me.length;xe++){var we=n.ownerDocument.createElementNS(f.hR,\"text\");we.textContent=me[xe],we.setAttribute(\"x\",\"\".concat(ve)),we.setAttribute(\"y\",\"\".concat(xe*ge)),we.setAttribute(\"font-family\",(0,s.$g)(e)),we.setAttribute(\"font-size\",\"\".concat(e.fontSize,\"px\")),we.setAttribute(\"fill\",e.strokeColor),we.setAttribute(\"text-anchor\",ye),we.setAttribute(\"style\",\"white-space: pre;\"),we.setAttribute(\"direction\",be),we.setAttribute(\"dominant-baseline\",\"text-before-edge\"),he.appendChild(we)}A.appendChild(he)}},ie=new WeakMap([]);function ae(e){var t=le(e),n=new Path2D(t);return ie.set(e,n),n}function le(e){return function(e){if(!e.length)return\"\";var t=e.length-1;return e.reduce((function(e,n,r,o){return r===t?e.push(n,se(n,o[0]),\"L\",o[0],\"Z\"):e.push(n,se(n,o[r+1])),e}),[\"M\",e[0],\"Q\"]).join(\" \").replace(ce,\"$1\")}(I(e.simulatePressure?e.points:e.points.length?e.points.map((function(t,n){var r=(0,i.Z)(t,2);return[r[0],r[1],e.pressures[n]]})):[[0,0,.5]],{simulatePressure:e.simulatePressure,size:4.25*e.strokeWidth,thinning:.6,smoothing:.5,streamline:.5,easing:function(e){return Math.sin(e*Math.PI\/2)},last:!!e.lastCommittedPoint}))}function se(e,t){return[(e[0]+t[0])\/2,(e[1]+t[1])\/2]}var ce=\/(\\s?[A-Z]?,?-?[0-9]*\\.[0-9]{0,2})(([0-9]|e|-)*)\/g},3547:function(e,t,n){\"use strict\";n.d(t,{Lu:function(){return j},Eu:function(){return D},M_:function(){return H}});var r,o=n(2577),i=n(1930),a=n(5284),l=n(1047),s=n(756),c=n(1868),u=n(3063),d=n(8982),f=n(6938),p=n(242),h=n(2325),m=n(8290),g=n(267),v=n(6340);!function(e){e.ACTIVE=\"active\",e.AWAY=\"away\",e.IDLE=\"idle\"}(r||(r={}));var b=n(2335),y=n(4929),x=n(1974);function w(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n))return k(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E,S=(0,v.Q5)(),j=2,_=function(e,t,n,r,o,i,a,l){var s=arguments.length>8&&void 0!==arguments[8]&&arguments[8];e.save(),e.translate(i,a),e.rotate(l),s&&e.fillRect(t-i,n-a,r,o),e.strokeRect(t-i,n-a,r,o),e.restore()},O=function(e,t,n,r){var o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];e.beginPath(),e.arc(t,n,r,0,2*Math.PI),e.fill(),o&&e.stroke()},C=function(e,t,n,r,o,i){var a=arguments.length>6&&void 0!==arguments[6]&&arguments[6];e.strokeStyle=\"#5e5ad8\",e.setLineDash([]),e.fillStyle=\"rgba(255, 255, 255, 0.9)\",i?e.fillStyle=\"rgba(134, 131, 226, 0.9)\":a&&(e.fillStyle=\"rgba(177, 151, 252, 0.7)\"),O(e,r[0],r[1],o\/n.zoom.value,!a)},I=function(e,t,n,r){if(t.selectedLinearElement){e.save(),e.translate(n.scrollX,n.scrollY),e.lineWidth=1\/n.zoom.value;var o=f._.getPointsGlobalCoordinates(r),i=f._.POINT_HANDLE_SIZE,a=t.editingLinearElement?i:i\/2;o.forEach((function(r,o){var i,l,s=!(null===(i=t.editingLinearElement)||void 0===i||null===(l=i.selectedPointsIndices)||void 0===l||!l.includes(o));C(e,t,n,r,a,s)})),f._.getEditorMidPoints(r,t).filter((function(e){return null!==e})).forEach((function(r){var l;null!=t&&null!==(l=t.selectedLinearElement)&&void 0!==l&&l.segmentMidPointHoveredCoords&&f._.arePointsEqual(r,t.selectedLinearElement.segmentMidPointHoveredCoords)?t.editingLinearElement?(C(e,t,n,r,a,!1),M(r,e,n)):(M(r,e,n),C(e,t,n,r,a,!1)):(t.editingLinearElement||2===o.length)&&C(e,t,n,r,i\/2,!1,!0)})),e.restore()}},M=function(e,t,n){t.fillStyle=\"rgba(105, 101, 219, 0.4)\",O(t,e[0],e[1],f._.POINT_HANDLE_SIZE\/n.zoom.value,!1)},T=function(e){var t,n=e.elements,h=e.appState,v=e.scale,y=e.rc,k=e.canvas,E=e.renderConfig;if(null===k)return{atLeastOneVisibleElement:!1};var O=E.renderScrollbars,C=void 0===O||O,T=E.renderSelection,P=void 0===T||T,D=E.renderGrid,z=void 0===D||D,R=E.isExporting,H=E.selectionColor||a.black,W=k.getContext(\"2d\");W.setTransform(1,0,0,1,0,0),W.save(),W.scale(v,v);var F=k.width\/v,U=k.height\/v;(R&&\"dark\"===E.theme&&(W.filter=b.ZF),\"string\"==typeof E.viewBackgroundColor)?((\"transparent\"===E.viewBackgroundColor||5===E.viewBackgroundColor.length||9===E.viewBackgroundColor.length||\/(hsla|rgba)\\(\/.test(E.viewBackgroundColor))&&W.clearRect(0,0,F,U),W.save(),W.fillStyle=E.viewBackgroundColor,W.fillRect(0,0,F,U),W.restore()):W.clearRect(0,0,F,U);W.save(),W.scale(E.zoom.value,E.zoom.value),z&&h.gridSize&&function(e,t,n,r,o,i){e.save(),e.strokeStyle=\"rgba(0,0,0,0.1)\",e.beginPath();for(var a=n;a<n+o+2*t;a+=t)e.moveTo(a,r-t),e.lineTo(a,r+i+2*t);for(var l=r;l<r+i+2*t;l+=t)e.moveTo(n-t,l),e.lineTo(n+o+2*t,l);e.stroke(),e.restore()}(W,h.gridSize,-Math.ceil(E.zoom.value\/h.gridSize)*h.gridSize+E.scrollX%h.gridSize,-Math.ceil(E.zoom.value\/h.gridSize)*h.gridSize+E.scrollY%h.gridSize,F\/E.zoom.value,U\/E.zoom.value);var K=n.filter((function(e){return B(e,F,U,{zoom:E.zoom,offsetLeft:h.offsetLeft,offsetTop:h.offsetTop,scrollX:E.scrollX,scrollY:E.scrollY})})),Y=void 0;if(K.forEach((function(e){try{var t;(0,u.lw)(e,y,W,E,h),(null===(t=h.editingLinearElement)||void 0===t?void 0:t.elementId)===e.id&&e&&(Y=e),R||N(e,W,h)}catch(e){console.error(e)}})),Y&&I(W,h,E,Y),h.selectionElement)try{(0,u.lw)(h.selectionElement,y,W,E,h)}catch(e){console.error(e)}(0,m.N1)(h)&&h.suggestedBindings.filter((function(e){return null!=e})).forEach((function(e){Z(W,E,e)}));var G,V=(0,c.eD)(n,h);if(1===V.length&&(null===(t=h.editingLinearElement)||void 0===t?void 0:t.elementId)===V[0].id&&I(W,h,E,V[0]),h.selectedLinearElement&&h.selectedLinearElement.hoverPointIndex>=0&&function(e,t,n){var r,o,i=t.selectedLinearElement,a=i.elementId,l=i.hoverPointIndex;if(null===(r=t.editingLinearElement)||void 0===r||null===(o=r.selectedPointsIndices)||void 0===o||!o.includes(l)){var s=f._.getElement(a);if(s){var c=f._.getPointAtIndexGlobalCoordinates(s,l);e.save(),e.translate(n.scrollX,n.scrollY),M(c,e,n),e.restore()}}}(W,h,E),P&&!h.multiElement&&!h.editingLinearElement){var X,q=(0,g.oY)(V,h),J=V.map((function(e){return e.id}));if(1===V.length&&(0,x.bt)(V[0])&&(null===(X=h.selectedLinearElement)||void 0===X?void 0:X.elementId)===V[0].id&&!V[0].locked&&I(W,h,E,V[0]),q){var $,Q=n.reduce((function(e,t){var n=[];if(J.includes(t.id)&&!(0,p.zq)(h,t)&&n.push(H),E.remoteSelectedElementIds[t.id]&&n.push.apply(n,(0,i.Z)(E.remoteSelectedElementIds[t.id].map((function(e){return(0,d.X)(e,h).background})))),n.length){var r=(0,l.qf)(t,!0),a=(0,o.Z)(r,6),s=a[0],c=a[1],u=a[2],f=a[3],m=a[4],g=a[5];e.push({angle:t.angle,elementX1:s,elementY1:c,elementX2:u,elementY2:f,selectionColors:n,dashed:!!E.remoteSelectedElementIds[t.id],cx:m,cy:g})}return e}),[]),ee=function(e){var t=(0,p.Fb)(n,e),r=(0,l.KP)(t),i=(0,o.Z)(r,4),s=i[0],c=i[1],u=i[2],d=i[3];Q.push({angle:0,elementX1:s,elementX2:u,elementY1:c,elementY2:d,selectionColors:[a.black],dashed:!0,cx:s+(u-s)\/2,cy:c+(d-c)\/2})},te=w((0,p.iJ)(h));try{for(te.s();!($=te.n()).done;){ee($.value)}}catch(e){te.e(e)}finally{te.f()}h.editingGroupId&&ee(h.editingGroupId),Q.forEach((function(e){return L(W,E,e)}))}if(W.save(),W.translate(E.scrollX,E.scrollY),1===V.length){W.fillStyle=a.white;var ne=(0,l.PC)(V[0],E.zoom,\"mouse\");!h.viewModeEnabled&&q&&A(W,E,ne,V[0].angle)}else if(V.length>1&&!h.isRotating){var re=2*j\/E.zoom.value;W.fillStyle=a.white;var oe=(0,l.KP)(V),ie=(0,o.Z)(oe,4),ae=ie[0],le=ie[1],se=ie[2],ce=ie[3],ue=W.getLineDash();W.setLineDash([2\/E.zoom.value]);var de=W.lineWidth;W.lineWidth=1\/E.zoom.value,W.strokeStyle=H,_(W,ae-re,le-re,se-ae+2*re,ce-le+2*re,(ae+se)\/2,(le+ce)\/2,0),W.lineWidth=de,W.setLineDash(ue);var fe=(0,l.kK)([ae,le,se,ce,(ae+se)\/2,(le+ce)\/2],0,E.zoom,\"mouse\",l.ox);V.some((function(e){return!e.locked}))&&A(W,E,fe,0)}W.restore()}for(var pe in W.restore(),E.remotePointerViewportCoords){var he=E.remotePointerViewportCoords[pe],me=he.x,ge=he.y;me-=h.offsetLeft,ge-=h.offsetTop;var ve=me<0||me>F-9||ge<0||ge>U-14;me=Math.max(me,0),me=Math.min(me,F-9),ge=Math.max(ge,0),ge=Math.min(ge,U-14);var be=(0,d.X)(pe,h),ye=be.background,xe=be.stroke;W.save(),W.strokeStyle=xe,W.fillStyle=ye;var we=E.remotePointerUserStates[pe];(ve||we===r.AWAY)&&(W.globalAlpha=.48),E.remotePointerButton&&\"down\"===E.remotePointerButton[pe]&&(W.beginPath(),W.arc(me,ge,15,0,2*Math.PI,!1),W.lineWidth=3,W.strokeStyle=\"#ffffff88\",W.stroke(),W.closePath(),W.beginPath(),W.arc(me,ge,15,0,2*Math.PI,!1),W.lineWidth=1,W.strokeStyle=xe,W.stroke(),W.closePath()),W.beginPath(),W.moveTo(me,ge),W.lineTo(me+1,ge+14),W.lineTo(me+4,ge+9),W.lineTo(me+9,ge+10),W.lineTo(me,ge),W.fill(),W.stroke();var ke=E.remotePointerUsernames[pe],Ee=\"\";we===r.AWAY?Ee=S?\"\u26ab\ufe0f\":\" (\".concat(r.AWAY,\")\"):we===r.IDLE&&(Ee=S?\"\ud83d\udca4\":\" (\".concat(r.IDLE,\")\"));var Se=\"\".concat(ke||\"\").concat(Ee?\" \".concat(Ee):\"\");if(!ve&&Se){var je=me+9,_e=ge+14,Oe=W.measureText(Se),Ce=Oe.actualBoundingBoxDescent+Oe.actualBoundingBoxAscent,Ie=je-1,Me=_e-1,Te=Oe.width+8+2,Pe=Ce+8+2;W.roundRect?(W.beginPath(),W.roundRect(Ie,Me,Te,Pe,4\/E.zoom.value),W.fillStyle=ye,W.fill(),W.fillStyle=xe,W.stroke()):(W.fillStyle=xe,W.fillRect(Ie,Me,Te,Pe),W.fillStyle=ye,W.fillRect(je,_e,Te-2,Pe-2)),W.fillStyle=a.white,W.fillText(Se,je+4,_e+4+Oe.actualBoundingBoxAscent)}W.restore(),W.closePath()}return C&&(G=(0,s.tJ)(n,F,U,E),W.save(),W.fillStyle=s.w1,W.strokeStyle=\"rgba(255,255,255,0.8)\",[G.horizontal,G.vertical].forEach((function(e){e&&function(e,t,n,r,o,i){e.beginPath(),e.moveTo(t+i,n),e.lineTo(t+r-i,n),e.quadraticCurveTo(t+r,n,t+r,n+i),e.lineTo(t+r,n+o-i),e.quadraticCurveTo(t+r,n+o,t+r-i,n+o),e.lineTo(t+i,n+o),e.quadraticCurveTo(t,n+o,t,n+o-i),e.lineTo(t,n+i),e.quadraticCurveTo(t,n,t+i,n),e.closePath(),e.fill(),e.stroke()}(W,e.x,e.y,e.width,e.height,s.nn\/2)})),W.restore()),W.restore(),{atLeastOneVisibleElement:K.length>0,scrollBars:G}},P=(0,v.hR)((function(e){var t,n=T(e);null===(t=e.callback)||void 0===t||t.call(e,n)}),{trailing:!0}),D=function(e,t){var n;if(!t){var r=T(e);return null===(n=e.callback)||void 0===n||n.call(e,r),r}P(e)},A=function(e,t,n,r){Object.keys(n).forEach((function(i){var a=n[i];if(void 0!==a){var l=(0,o.Z)(a,4),s=l[0],c=l[1],u=l[2],d=l[3];e.save(),e.lineWidth=1\/t.zoom.value,t.selectionColor&&(e.strokeStyle=t.selectionColor),\"rotation\"===i?O(e,s+u\/2,c+d\/2,u\/2):e.roundRect?(e.beginPath(),e.roundRect(s,c,u,d,2\/t.zoom.value),e.fill(),e.stroke()):_(e,s,c,u,d,s+u\/2,c+d\/2,r,!0),e.restore()}}))},L=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:2*j,o=n.angle,i=n.elementX1,a=n.elementY1,l=n.elementX2,s=n.elementY2,c=n.selectionColors,u=n.cx,d=n.cy,f=n.dashed,p=l-i,h=s-a,m=r\/t.zoom.value,g=8\/t.zoom.value,v=4\/t.zoom.value;e.save(),e.translate(t.scrollX,t.scrollY),e.lineWidth=1\/t.zoom.value;for(var b=c.length,y=0;y<b;++y)e.strokeStyle=c[y],f&&e.setLineDash([g,v+(g+v)*(b-1)]),e.lineDashOffset=(g+v)*y,_(e,i-m,a-m,p+2*m,h+2*m,u,d,o);e.restore()},Z=function(e,t,n){var r=Array.isArray(n)?R:z;e.save(),e.translate(t.scrollX,t.scrollY),r(e,n),e.restore()},z=function(e,t){var n=(0,l.qf)(t),r=(0,o.Z)(n,4),i=r[0],a=r[1],s=r[2]-i,c=r[3]-a,u=(0,h.fb)(t,s,c);e.strokeStyle=\"rgba(0,0,0,.05)\",e.lineWidth=u-4;var d=2+u\/2;switch(t.type){case\"rectangle\":case\"text\":case\"image\":_(e,i-d,a-d,s+2*d,c+2*d,i+s\/2,a+c\/2,t.angle);break;case\"diamond\":var f=Math.hypot(s,c);!function(e,t,n,r,o,i){e.save(),e.translate(r,o),e.rotate(i),e.beginPath(),e.moveTo(0,n\/2),e.lineTo(t\/2,0),e.lineTo(0,-n\/2),e.lineTo(-t\/2,0),e.closePath(),e.stroke(),e.restore()}(e,s+2*(d*f\/c),c+2*(d*f\/s),i+s\/2,a+c\/2,t.angle);break;case\"ellipse\":!function(e,t,n,r,o,i){e.beginPath(),e.ellipse(r,o,t\/2,n\/2,i,0,2*Math.PI),e.stroke()}(e,s+2*d,c+2*d,i+s\/2,a+c\/2,t.angle)}},R=function(e,t){var n=(0,o.Z)(t,3),r=n[0],i=n[1],a=n[2],l=(0,h.fb)(a,a.width,a.height);e.strokeStyle=\"rgba(0,0,0,0)\",e.fillStyle=\"rgba(0,0,0,.05)\",(\"both\"===i?[0,-1]:\"start\"===i?[0]:[-1]).forEach((function(t){var n=f._.getPointAtIndexGlobalCoordinates(r,t),i=(0,o.Z)(n,2),a=i[0],s=i[1];O(e,a,s,l)}))},N=function(e,t,n){if(e.link&&!n.selectedElementIds[e.id]){var r=(0,l.qf)(e),i=(0,o.Z)(r,4),a=i[0],s=i[1],c=i[2],u=i[3],d=(0,y.sw)([a,s,c,u],e.angle,n),f=(0,o.Z)(d,4),p=f[0],h=f[1],m=f[2],g=f[3],v=p+m\/2,b=h+g\/2;if(t.save(),t.translate(n.scrollX+v,n.scrollY+b),t.rotate(e.angle),E&&E.zoom===n.zoom.value)t.drawImage(E,p-v,h-b,m,g);else{(E=document.createElement(\"canvas\")).zoom=n.zoom.value,E.width=m*window.devicePixelRatio*n.zoom.value,E.height=g*window.devicePixelRatio*n.zoom.value;var x=E.getContext(\"2d\");x.scale(window.devicePixelRatio*n.zoom.value,window.devicePixelRatio*n.zoom.value),x.fillStyle=\"#fff\",x.fillRect(0,0,m,g),x.drawImage(y.rj,0,0,m,g),x.restore(),t.drawImage(E,p-v,h-b,m,g)}t.restore()}},B=function(e,t,n,r){var i=(0,l.Pi)(e),a=(0,o.Z)(i,4),s=a[0],c=a[1],u=a[2],d=a[3],f=(0,v.dE)({clientX:r.offsetLeft,clientY:r.offsetTop},r),p=(0,v.dE)({clientX:r.offsetLeft+t,clientY:r.offsetTop+n},r);return f.x<=u&&f.y<=d&&p.x>=s&&p.y>=c},H=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=o.offsetX,a=void 0===i?0:i,l=o.offsetY,s=void 0===l?0:l,c=o.exportWithDarkMode,d=void 0!==c&&c;n&&e.forEach((function(e,o){if(!e.isDeleted)try{(0,u.Rg)(e,t,n,r,e.x+a,e.y+s,d)}catch(e){console.error(e)}}))}},1564:function(e,t,n){\"use strict\";var r=n(1930),o=n(8821),i=n(5169),a=n(1047),l=function(e){return\"string\"==typeof e},s=function(){function e(){(0,o.Z)(this,e),this.callbacks=new Set,this.nonDeletedElements=[],this.elements=[],this.elementsMap=new Map}return(0,i.Z)(e,[{key:\"getElementsIncludingDeleted\",value:function(){return this.elements}},{key:\"getNonDeletedElements\",value:function(){return this.nonDeletedElements}},{key:\"getElement\",value:function(e){return this.elementsMap.get(e)||null}},{key:\"getNonDeletedElement\",value:function(e){var t=this.getElement(e);return t&&(0,a.qP)(t)?t:null}},{key:\"mapElements\",value:function(e){var t=!1,n=this.elements.map((function(n){var r=e(n);return r!==n&&(t=!0),r}));return t&&this.replaceAllElements(n),t}},{key:\"replaceAllElements\",value:function(t){var n=this;this.elements=t,this.elementsMap.clear(),t.forEach((function(t){n.elementsMap.set(t.id,t),e.mapElementToScene(t,n)})),this.nonDeletedElements=(0,a.Lm)(this.elements),this.informMutation()}},{key:\"informMutation\",value:function(){for(var e=0,t=Array.from(this.callbacks);e<t.length;e++){(0,t[e])()}}},{key:\"addCallback\",value:function(e){var t=this;if(this.callbacks.has(e))throw new Error;return this.callbacks.add(e),function(){if(!t.callbacks.has(e))throw new Error;t.callbacks.delete(e)}}},{key:\"destroy\",value:function(){var t=this;e.sceneMapById.forEach((function(n,r){n===t&&e.sceneMapById.delete(r)})),this.callbacks.clear()}},{key:\"insertElementAtIndex\",value:function(e,t){if(!Number.isFinite(t)||t<0)throw new Error(\"insertElementAtIndex can only be called with index >= 0\");var n=[].concat((0,r.Z)(this.elements.slice(0,t)),[e],(0,r.Z)(this.elements.slice(t)));this.replaceAllElements(n)}},{key:\"getElementIndex\",value:function(e){return this.elements.findIndex((function(t){return t.id===e}))}}],[{key:\"mapElementToScene\",value:function(e,t){l(e)?this.sceneMapById.set(e,t):(this.sceneMapByElement.set(e,t),this.sceneMapById.set(e.id,t))}},{key:\"getScene\",value:function(e){return l(e)?this.sceneMapById.get(e)||null:this.sceneMapByElement.get(e)||null}}]),e}();s.sceneMapByElement=new WeakMap,s.sceneMapById=new Map,t.Z=s},8120:function(e,t,n){\"use strict\";n.d(t,{$b:function(){return r},CJ:function(){return d},M9:function(){return a},PD:function(){return o},QG:function(){return u},Un:function(){return c},Zd:function(){return i},bZ:function(){return s},sh:function(){return l}});var r=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"line\"===e||\"freedraw\"===e},o=function(e){return\"image\"!==e},i=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"freedraw\"===e||\"arrow\"===e||\"line\"===e},a=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"arrow\"===e||\"line\"===e},l=function(e){return\"rectangle\"===e||\"arrow\"===e||\"line\"===e||\"diamond\"===e},s=function(e){return\"text\"===e},c=function(e){return\"arrow\"===e},u=function(e,t){for(var n=null,r=e.length-1;r>=0;--r){var o=e[r];if(!o.isDeleted&&t(o)){n=o;break}}return n},d=function(e,t){return e.filter((function(e){return!e.isDeleted&&t(e)}))}},4162:function(e,t,n){\"use strict\";n.d(t,{$D:function(){return v},Cg:function(){return y},NL:function(){return g},oj:function(){return m}});var r=n(2577),o=n(8950),i=n(2975),a=n.n(i),l=n(8234),s=n(8925),c=n(3547),u=n(6340),d=n(2335),f=n(8897),p=n(5523),h=n(5637),m=\"\\x3c!-- svg-source:excalidraw --\\x3e\",g=function(){var e=(0,o.Z)(a().mark((function e(t,n,o,i){var s,u,p,m,g,v,y,x,w,k,E,S,j,_,O,C,I,M,T=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return s=i.exportBackground,u=i.exportPadding,p=void 0===u?d.qy:u,m=i.viewBackgroundColor,g=T.length>4&&void 0!==T[4]?T[4]:function(e,t){var r=document.createElement(\"canvas\");return r.width=e*n.exportScale,r.height=t*n.exportScale,{canvas:r,scale:n.exportScale}},v=b(t,p),y=(0,r.Z)(v,4),x=y[0],w=y[1],k=y[2],E=y[3],S=g(k,E),j=S.canvas,_=S.scale,O=void 0===_?1:_,C=(0,f.im)(),e.next=7,(0,h.Xx)({imageCache:new Map,fileIds:(0,h.oA)(t).map((function(e){return e.fileId})),files:o});case 7:return I=e.sent,M=I.imageCache,(0,c.Eu)({elements:t,appState:n,scale:O,rc:l.Z.canvas(j),canvas:j,renderConfig:{viewBackgroundColor:s?m:null,scrollX:-x+p,scrollY:-w+p,zoom:C.zoom,remotePointerViewportCoords:{},remoteSelectedElementIds:{},shouldCacheIgnoreZoom:!1,remotePointerUsernames:{},remotePointerUserStates:{},theme:n.exportWithDarkMode?\"dark\":\"light\",imageCache:M,renderScrollbars:!1,renderSelection:!1,renderGrid:!1,isExporting:!0}}),e.abrupt(\"return\",j);case 11:case\"end\":return e.stop()}}),e)})));return function(t,n,r,o){return e.apply(this,arguments)}}(),v=function(){var e=(0,o.Z)(a().mark((function e(t,o,i,s){var u,f,h,g,v,y,x,w,k,E,S,j,_,O,C,I,M,T,P;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=o.exportPadding,f=void 0===u?d.qy:u,h=o.viewBackgroundColor,g=o.exportScale,v=void 0===g?1:g,y=o.exportEmbedScene,x=\"\",!y){e.next=14;break}return e.prev=3,e.next=6,Promise.resolve().then(n.bind(n,673));case 6:return e.next=8,e.sent.encodeSvgMetadata({text:null!=s&&s.serializeAsJSON?null==s||null===(w=s.serializeAsJSON)||void 0===w?void 0:w.call(s):(0,p.I_)(t,o,i||{},\"local\")});case 8:x=e.sent,e.next=14;break;case 11:e.prev=11,e.t0=e.catch(3),console.error(e.t0);case 14:return k=b(t,f),E=(0,r.Z)(k,4),S=E[0],j=E[1],_=E[2],O=E[3],(C=document.createElementNS(d.hR,\"svg\")).setAttribute(\"version\",\"1.1\"),C.setAttribute(\"xmlns\",d.hR),C.setAttribute(\"viewBox\",\"0 0 \".concat(_,\" \").concat(O)),C.setAttribute(\"width\",\"\".concat(_*v)),C.setAttribute(\"height\",\"\".concat(O*v)),o.exportWithDarkMode&&C.setAttribute(\"filter\",d.ZF),I=\"https:\/\/excalidraw.com\/\",I=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(\"@excalidraw\/excalidraw\",\"@\").concat(\"0.15.3\"),null!==(M=I)&&void 0!==M&&M.startsWith(\"\/\")&&(I=I.replace(\"\/\",\"\".concat(window.location.origin,\"\/\"))),I=\"\".concat(I,\"\/dist\/excalidraw-assets\/\"),C.innerHTML=\"\\n  \".concat(m,\"\\n  \").concat(x,'\\n  <defs>\\n    <style class=\"style-fonts\">\\n      @font-face {\\n        font-family: \"Virgil\";\\n        src: url(\"').concat(I,'Virgil.woff2\");\\n      }\\n      @font-face {\\n        font-family: \"Cascadia\";\\n        src: url(\"').concat(I,'Cascadia.woff2\");\\n      }\\n    <\/style>\\n  <\/defs>\\n  '),o.exportBackground&&h&&((T=C.ownerDocument.createElementNS(d.hR,\"rect\")).setAttribute(\"x\",\"0\"),T.setAttribute(\"y\",\"0\"),T.setAttribute(\"width\",\"\".concat(_)),T.setAttribute(\"height\",\"\".concat(O)),T.setAttribute(\"fill\",h),C.appendChild(T)),P=l.Z.svg(C),(0,c.M_)(t,P,C,i||{},{offsetX:-S+f,offsetY:-j+f,exportWithDarkMode:o.exportWithDarkMode}),e.abrupt(\"return\",C);case 29:case\"end\":return e.stop()}}),e,null,[[3,11]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),b=function(e,t){var n=(0,s.KP)(e),o=(0,r.Z)(n,4),i=o[0],a=o[1],l=o[2],c=o[3];return[i,a,(0,u.TE)(i,l)+2*t,(0,u.TE)(a,c)+t+t]},y=function(e,t,n){var o=b(e,t).map((function(e){return Math.trunc(e*n)})),i=(0,r.Z)(o,4);return[i[2],i[3]]}},75:function(e,t,n){\"use strict\";n.d(t,{$b:function(){return a.$b},CJ:function(){return a.CJ},M9:function(){return a.M9},N:function(){return o.N},PR:function(){return o.PR},QG:function(){return a.QG},Un:function(){return a.Un},W:function(){return i.W},Yp:function(){return o.Yp},Zd:function(){return a.Zd},Zs:function(){return o.Zs},_4:function(){return r._4},bZ:function(){return a.bZ},eD:function(){return o.eD},j:function(){return l.j},sh:function(){return a.sh}});var r=n(756),o=n(1868),i=n(2264),a=n(8120),l=n(746)},2264:function(e,t,n){\"use strict\";n.d(t,{W:function(){return l},s:function(){return a}});var r=n(2577),o=n(1047),i=n(6340),a=function(e){var t=e.scenePoint,n=e.viewportDimensions,r=e.zoom;return{scrollX:n.width\/2\/r.value-t.x,scrollY:n.height\/2\/r.value-t.y}},l=function(e,t,n){if(!(e=(0,o.n_)(e)).length)return{scrollX:0,scrollY:0};var l=(0,o.KP)(e),s=(0,r.Z)(l,4),c=s[0],u=s[1],d=s[2],f=s[3];if(function(e,t,n){var o=(0,r.Z)(n,4),a=o[0],l=o[1],s=o[2],c=o[3],u=(0,i._i)({sceneX:a,sceneY:l},e),d=u.x,f=u.y,p=(0,i._i)({sceneX:s,sceneY:c},e),h=p.x,m=p.y;return h-d>e.width||m-f>e.height}(t,0,[c,u,d,f])){var p=(0,o.os)(e,(0,i.dE)({clientX:t.scrollX,clientY:t.scrollY},t)),h=(0,r.Z)(p,4);c=h[0],u=h[1],d=h[2],f=h[3]}return a({scenePoint:{x:(c+d)\/2,y:(u+f)\/2},viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})}},756:function(e,t,n){\"use strict\";n.d(t,{WM:function(){return l},_4:function(){return d},nn:function(){return s},tJ:function(){return u},w1:function(){return c}});var r=n(2577),o=n(1047),i=n(6340),a=n(8211),l=4,s=6,c=\"rgba(0,0,0,0.3)\",u=function(e,t,n,c){var u=c.scrollX,d=c.scrollY,f=c.zoom;if(0===e.length)return{horizontal:null,vertical:null};var p=(0,o.KP)(e),h=(0,r.Z)(p,4),m=h[0],g=h[1],v=h[2],b=h[3],y=t\/f.value,x=n\/f.value,w=t-y,k=n-x,E={top:parseInt((0,i.IH)(\"sat\")),bottom:parseInt((0,i.IH)(\"sab\")),left:parseInt((0,i.IH)(\"sal\")),right:parseInt((0,i.IH)(\"sar\"))},S=(0,a.G3)().rtl,j=w\/2-u+E.left,_=k\/2-d+E.top,O=j+y-E.right,C=_+x-E.bottom,I=Math.min(m,j),M=Math.min(g,_),T=Math.max(v,O),P=Math.max(b,C);return{horizontal:j===I&&O===T?null:{x:Math.max(E.left,l)+(j-I)\/(T-I)*t,y:n-s-Math.max(l,E.bottom),width:(O-j)\/(T-I)*t-Math.max(2*l,E.left+E.right),height:s},vertical:_===M&&C===P?null:{x:S?Math.max(E.left,l):t-s-Math.max(E.right,l),y:(_-M)\/(P-M)*n+Math.max(E.top,l),width:s,height:(C-_)\/(P-M)*n-Math.max(2*l,E.top+E.bottom)}}},d=function(e,t,n){var o=[e.horizontal,e.vertical].map((function(e){return null!=e&&e.x<=t&&t<=e.x+e.width&&e.y<=n&&n<=e.y+e.height})),i=(0,r.Z)(o,2),a=i[0],l=i[1];return{isOverEither:a||l,isOverHorizontal:a,isOverVertical:l}}},1868:function(e,t,n){\"use strict\";n.d(t,{N:function(){return l},PR:function(){return s},Yp:function(){return a},Zs:function(){return u},eD:function(){return c}});var r=n(2577),o=n(1047),i=n(1974),a=function(e,t){var n=(0,o.qf)(t),a=(0,r.Z)(n,4),l=a[0],s=a[1],c=a[2],u=a[3];return e.filter((function(e){var t=(0,o.Pi)(e),n=(0,r.Z)(t,4),a=n[0],d=n[1],f=n[2],p=n[3];return!1===e.locked&&\"selection\"!==e.type&&!(0,i.Xh)(e)&&l<=a&&s<=d&&c>=f&&u>=p}))},l=function(e,t){return e.some((function(e){return t.selectedElementIds[e.id]}))},s=function(e,t,n){var r=Array.from(new Set(c(e,t).map((function(e){return n(e)}))));return 1===r.length?r[0]:null},c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return e.filter((function(e){return t.selectedElementIds[e.id]||n&&(0,i.Xh)(e)&&t.selectedElementIds[null==e?void 0:e.containerId]?e:null}))},u=function(e,t){return t.editingElement?[t.editingElement]:c(e,t,!0)}},746:function(e,t,n){\"use strict\";n.d(t,{E:function(){return i},j:function(){return o}});var r=n(2335),o=function(e){return Math.max(r.Zj,Math.min(e,30))},i=function(e,t){var n=e.viewportX,r=e.viewportY,o=e.nextZoom,i=n-t.offsetLeft,a=r-t.offsetTop,l=t.zoom.value;return{scrollX:t.scrollX+(i-i\/l)+-(i-i\/o),scrollY:t.scrollY+(a-a\/l)+-(a-a\/o),zoom:{value:o}}}},6340:function(e,t,n){\"use strict\";n.d(t,{$9:function(){return J},$g:function(){return x},$h:function(){return se},AK:function(){return U},B4:function(){return O},C3:function(){return ne},Ds:function(){return k},FG:function(){return K},Fc:function(){return m},G3:function(){return te},I4:function(){return oe},IH:function(){return H},Ip:function(){return Q},KJ:function(){return P},Mj:function(){return fe},OF:function(){return D},Om:function(){return M},Oo:function(){return g},PI:function(){return X},Pr:function(){return z},Q5:function(){return $},Qm:function(){return V},TE:function(){return I},Uk:function(){return A},_Z:function(){return b},_i:function(){return B},ag:function(){return ae},cx:function(){return Y},dE:function(){return N},dZ:function(){return F},h2:function(){return ie},hR:function(){return E},mO:function(){return w},qr:function(){return G},qz:function(){return ee},rB:function(){return L},s:function(){return y},tH:function(){return q},uY:function(){return R},v4:function(){return le},w8:function(){return de},wO:function(){return v},wo:function(){return Z},xn:function(){return re},xp:function(){return ue},y8:function(){return ce},yo:function(){return C},z8:function(){return T}});var r=n(6655),o=n(7169),i=n(1930),a=n(2577),l=n(5284),s=n(56),c=n(2335),u=n(5156),d=n(8897);function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,o.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var h=null,m=function(){if(h)return h;var e=new Date,t=e.getFullYear(),n=\"\".concat(e.getMonth()+1).padStart(2,\"0\"),r=\"\".concat(e.getDate()).padStart(2,\"0\"),o=\"\".concat(e.getHours()).padStart(2,\"0\"),i=\"\".concat(e.getMinutes()).padStart(2,\"0\");return\"\".concat(t,\"-\").concat(n,\"-\").concat(r,\"-\").concat(o).concat(i)},g=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},v=function(e){return e instanceof HTMLElement&&e.className.includes(\"ToolIcon\")},b=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement||e instanceof HTMLSelectElement},y=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLTextAreaElement||e instanceof HTMLInputElement&&(\"text\"===e.type||\"number\"===e.type)},x=function(e){for(var t=e.fontFamily,n=0,r=Object.entries(c.ut);n<r.length;n++){var o=(0,a.Z)(r[n],2),i=o[0];if(o[1]===t)return\"\".concat(i,\", \").concat(c._D)}return c._D},w=function(e){var t=e.fontSize,n=e.fontFamily;return\"\".concat(t,\"px \").concat(x({fontFamily:n}))},k=function(e,t){var n=0,r=null,o=function(){for(var o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];r=i,clearTimeout(n),n=window.setTimeout((function(){r=null,e.apply(void 0,i)}),t)};return o.flush=function(){if(clearTimeout(n),r){var t=r;r=null,e.apply(void 0,(0,i.Z)(t))}},o.cancel=function(){r=null,clearTimeout(n)},o},E=function(e,t){var n=null,r=null,o=null,a=function t(a){n=window.requestAnimationFrame((function(){n=null,e.apply(void 0,(0,i.Z)(a)),r=null,o&&(r=o,o=null,t(r))}))},l=function(){for(var e=arguments.length,i=new Array(e),l=0;l<e;l++)i[l]=arguments[l];r=i,null===n?a(r):null!=t&&t.trailing&&(o=i)};return l.flush=function(){null!==n&&(cancelAnimationFrame(n),n=null),r&&(e.apply(void 0,(0,i.Z)(o||r)),r=o=null)},l.cancel=function(){r=o=null,null!==n&&(cancelAnimationFrame(n),n=null)},l};function S(e){return 1-Math.pow(1-e,4)}var j,_,O=function(e,t,n,r){var o,a=!1,l=0,s=(null==r?void 0:r.duration)||250,c=(null==r?void 0:r.easeFn)||S;return l=window.requestAnimationFrame((function r(u){if(!a){void 0===o&&(o=u);var d=u-o;if(d<s){var f=c(d\/s),p=e.map((function(e,n){return(t[n]-e)*f+e}));n.apply(void 0,(0,i.Z)(p)),l=window.requestAnimationFrame(r)}else n.apply(void 0,(0,i.Z)(t))}})),function(){a=!0,window.cancelAnimationFrame(l)}},C=function(e,t){if(!e.length||t<1)return[];for(var n=0,r=0,o=Array(Math.ceil(e.length\/t));n<e.length;)o[r++]=e.slice(n,n+=t);return o},I=function(e,t){return Math.abs(e-t)},M=function(e,t){return\"custom\"===t.type?p(p({},e.activeTool),{},{type:\"custom\",customType:t.customType}):p(p({},e.activeTool),{},{lastActiveTool:void 0===t.lastActiveToolBeforeEraser?e.activeTool.lastActiveTool:t.lastActiveToolBeforeEraser,type:t.type,customType:null})},T=function(e){e&&(e.style.cursor=\"\")},P=function(e,t){e&&(e.style.cursor=t)},D=function(e,t){j&&j.theme===t||function(){var e=t===c.C6.DARK;(j=document.createElement(\"canvas\")).theme=t,j.height=20,j.width=20;var n=j.getContext(\"2d\");n.lineWidth=1,n.beginPath(),n.arc(j.width\/2,j.height\/2,5,0,2*Math.PI),n.fillStyle=e?l.black:l.white,n.fill(),n.strokeStyle=e?l.white:l.black,n.stroke(),_=j.toDataURL(c.LO.svg)}(),P(e,\"url(\".concat(_,\") \").concat(10,\" \").concat(10,\", auto\"))},A=function(e,t){e&&(\"selection\"===t.activeTool.type?T(e):(0,d.l$)(t)?e.style.cursor=c.oc.GRAB:(0,d.EN)(t)?D(e,t.theme):[\"image\",\"custom\"].includes(t.activeTool.type)||(e.style.cursor=c.oc.CROSSHAIR))},L=function(){var e;return\"HTML\"===(null===(e=document.fullscreenElement)||void 0===e?void 0:e.nodeName)},Z=function(){return document.documentElement.requestFullscreen()},z=function(){return document.exitFullscreen()},R=function(e){return e=e.replace(\/\\bAlt\\b\/i,\"Alt\").replace(\/\\bShift\\b\/i,\"Shift\").replace(\/\\b(Enter|Return)\\b\/i,\"Enter\"),c.Um?e.replace(\/\\bCtrlOrCmd\\b\/gi,\"Cmd\").replace(\/\\bAlt\\b\/i,\"Option\"):e.replace(\/\\bCtrlOrCmd\\b\/gi,\"Ctrl\")},N=function(e,t){var n=e.clientX,r=e.clientY,o=t.zoom,i=t.offsetLeft,a=t.offsetTop,l=t.scrollX,s=t.scrollY;return{x:(n-i)\/o.value-l,y:(r-a)\/o.value-s}},B=function(e,t){var n=e.sceneX,r=e.sceneY,o=t.zoom,i=t.offsetLeft,a=t.offsetTop,l=t.scrollX,s=t.scrollY;return{x:(n+l)*o.value+i,y:(r+s)*o.value+a}},H=function(e){return getComputedStyle(document.documentElement).getPropertyValue(\"--\".concat(e))},W=new RegExp(\"^[^\".concat(\"A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u2c00-\ufb1c\ufdfe-\ufe6f\ufefd-\uffff\",\"]*[\").concat(\"\u0591-\u07ff\ufb1d-\ufdfd\ufe70-\ufefc\",\"]\")),F=function(e){return W.test(e)},U=function(e){var t=(0,a.Z)(e,2);return{x:t[0],y:t[1]}},K=function(e){if(\"AbortError\"!==(null==e?void 0:e.name))throw e;console.warn(e)},Y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length,Math.max(n,0)))-1;++r<e.length;)if(t(e[r],r,e))return r;return-1},G=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length-1;n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length-1,Math.max(n,0)))+1;--r>-1;)if(t(e[r],r,e))return r;return-1},V=function(e){var t=5===e.length&&\"0\"===e.substr(4,1),n=9===e.length&&\"00\"===e.substr(7,2);return t||n||e===s.Z.elementBackground[0]},X=function(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n},q=function(e){return function(t){(0,u.unstable_batchedUpdates)(e,t)}},J=function(e){return E((function(t){(0,u.unstable_batchedUpdates)(e,t)}))},$=function(){var e=document.createElement(\"canvas\").getContext(\"2d\");if(!e)return!1;return e.fillStyle=\"#f00\",e.textBaseline=\"top\",e.font=\"32px Arial\",e.fillText(\"\ud83d\ude00\",0,0),0!==e.getImageData(12,12,1,1).data[0]},Q=function(e){for(var t=e.parentElement;t;){if(t===document.body)return document;var n=window.getComputedStyle(t).overflowY;if(t.scrollHeight>t.clientHeight&&(\"auto\"===n||\"scroll\"===n||\"overlay\"===n))return t;t=t.parentElement}return document},ee=function(e){for(var t=e.parentElement;t;){if(t.tabIndex>-1)return void t.focus();t=t.parentElement}},te=function(e){return Array.from(e).map((function(e){return\"0\".concat(e.toString(16)).slice(-2)})).join(\"\")},ne=function(){return ie()?1:Date.now()},re=function(e){return e.reduce((function(e,t){return e.set(\"string\"==typeof t?t:t.id,t),e}),new Map)},oe=function(e){return e.reduce((function(e,t,n){return e.set(t.id,[t,n]),e}),new Map)},ie=function(){return!1},ae=function(e,t){return new CustomEvent(e,{detail:{nativeEvent:t},cancelable:!0})},le=function(e,t){var n=!1;for(var o in t){var i=t[o];if(void 0!==i){if(e[o]===i&&(\"object\"!==(0,r.Z)(i)||null===i))continue;n=!0}}return n?p(p({},e),t):e},se=function(){try{return window.self===window.top?\"top\":\"iframe\"}catch(e){return\"iframe\"}},ce=function(e){return!!e&&\"object\"===(0,r.Z)(e)&&\"then\"in e&&\"catch\"in e&&\"finally\"in e},ue=function(e){var t=null==e?void 0:e.querySelectorAll(\"button, a, input, select, textarea, div[tabindex], label[tabindex]\");return t?Array.from(t).filter((function(e){return e.tabIndex>-1&&!e.disabled})):[]},de=function(e,t){var n=Object.keys(e),r=Object.keys(e);return n.length===r.length&&n.every((function(n){return e[n]===t[n]}))},fe=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.checkForDefaultPrevented,o=void 0===r||r;return function(n){if(null==e||e(n),!o||!n.defaultPrevented)return null==t?void 0:t(n)}}},9669:function(e){\"use strict\";e.exports=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\"},7984:function(e){\"use strict\";e.exports='data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>'},1639:function(e){\"use strict\";e.exports='data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path fill=\"%23ced4da\" d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>'},9729:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-Bold.woff2\"},1273:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-Medium.woff2\"},8303:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-Regular.woff2\"},9577:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Assistant-SemiBold.woff2\"},3147:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Cascadia.woff2\"},3940:function(e,t,n){\"use strict\";e.exports=n.p+\"excalidraw-assets\/Virgil.woff2\"},9787:function(t){\"use strict\";t.exports=e},5156:function(e){\"use strict\";e.exports=t},9649:function(e,t,n){var r=n(8114).default;function o(){\"use strict\";e.exports=o=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},n=Object.prototype,i=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},l=\"function\"==typeof Symbol?Symbol:{},s=l.iterator||\"@@iterator\",c=l.asyncIterator||\"@@asyncIterator\",u=l.toStringTag||\"@@toStringTag\";function d(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{d({},\"\")}catch(e){d=function(e,t,n){return e[t]=n}}function f(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),l=new C(r||[]);return a(i,\"_invoke\",{value:S(e,n,l)}),i}function p(e,t,n){try{return{type:\"normal\",arg:e.call(t,n)}}catch(e){return{type:\"throw\",arg:e}}}t.wrap=f;var h={};function m(){}function g(){}function v(){}var b={};d(b,s,(function(){return this}));var y=Object.getPrototypeOf,x=y&&y(y(I([])));x&&x!==n&&i.call(x,s)&&(b=x);var w=v.prototype=m.prototype=Object.create(b);function k(e){[\"next\",\"throw\",\"return\"].forEach((function(t){d(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,l,s){var c=p(e[o],e,a);if(\"throw\"!==c.type){var u=c.arg,d=u.value;return d&&\"object\"==r(d)&&i.call(d,\"__await\")?t.resolve(d.__await).then((function(e){n(\"next\",e,l,s)}),(function(e){n(\"throw\",e,l,s)})):t.resolve(d).then((function(e){u.value=e,l(u)}),(function(e){return n(\"throw\",e,l,s)}))}s(c.arg)}var o;a(this,\"_invoke\",{value:function(e,r){function i(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(i,i):i()}})}function S(e,t,n){var r=\"suspendedStart\";return function(o,i){if(\"executing\"===r)throw new Error(\"Generator is already running\");if(\"completed\"===r){if(\"throw\"===o)throw i;return M()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=j(a,n);if(l){if(l===h)continue;return l}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(\"suspendedStart\"===r)throw r=\"completed\",n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);r=\"executing\";var s=p(e,t,n);if(\"normal\"===s.type){if(r=n.done?\"completed\":\"suspendedYield\",s.arg===h)continue;return{value:s.arg,done:n.done}}\"throw\"===s.type&&(r=\"completed\",n.method=\"throw\",n.arg=s.arg)}}}function j(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,\"throw\"===t.method){if(e.iterator.return&&(t.method=\"return\",t.arg=void 0,j(e,t),\"throw\"===t.method))return h;t.method=\"throw\",t.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return h}var r=p(n,e.iterator,t.arg);if(\"throw\"===r.type)return t.method=\"throw\",t.arg=r.arg,t.delegate=null,h;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,\"return\"!==t.method&&(t.method=\"next\",t.arg=void 0),t.delegate=null,h):o:(t.method=\"throw\",t.arg=new TypeError(\"iterator result is not an object\"),t.delegate=null,h)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(_,this),this.reset(!0)}function I(e){if(e){var t=e[s];if(t)return t.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,r=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:M}}function M(){return{value:void 0,done:!0}}return g.prototype=v,a(w,\"constructor\",{value:v,configurable:!0}),a(v,\"constructor\",{value:g,configurable:!0}),g.displayName=d(v,u,\"GeneratorFunction\"),t.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===g||\"GeneratorFunction\"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,d(e,u,\"GeneratorFunction\")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},k(E.prototype),d(E.prototype,c,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new E(f(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},k(w),d(w,u,\"Generator\"),d(w,s,(function(){return this})),d(w,\"toString\",(function(){return\"[object Generator]\"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=I,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(O),!e)for(var t in this)\"t\"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return a.type=\"throw\",a.arg=e,t.next=n,r&&(t.method=\"next\",t.arg=void 0),!!r}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],a=o.completion;if(\"root\"===o.tryLoc)return n(\"end\");if(o.tryLoc<=this.prev){var l=i.call(o,\"catchLoc\"),s=i.call(o,\"finallyLoc\");if(l&&s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!s)throw new Error(\"try statement without catch or finally\");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,\"finallyLoc\")&&this.prev<r.finallyLoc){var o=r;break}}o&&(\"break\"===e||\"continue\"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method=\"next\",this.next=o.finallyLoc,h):this.complete(a)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if(\"throw\"===r.type){var o=r.arg;O(n)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,t,n){return this.delegate={iterator:I(e),resultName:t,nextLoc:n},\"next\"===this.method&&(this.arg=void 0),h}},t}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},8114:function(e){function t(n){return e.exports=t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(n)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},2975:function(e,t,n){var r=n(9649)();e.exports=r;try{regeneratorRuntime=r}catch(e){\"object\"==typeof globalThis?globalThis.regeneratorRuntime=r:Function(\"r\",\"regeneratorRuntime = r\")(r)}},7017:function(e,t,n){\"use strict\";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,{Z:function(){return r}})},3173:function(e,t,n){\"use strict\";function r(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}n.d(t,{Z:function(){return r}})},8950:function(e,t,n){\"use strict\";function r(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function l(e){r(a,o,i,l,s,\"next\",e)}function s(e){r(a,o,i,l,s,\"throw\",e)}l(void 0)}))}}n.d(t,{Z:function(){return o}})},8821:function(e,t,n){\"use strict\";function r(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}n.d(t,{Z:function(){return r}})},5169:function(e,t,n){\"use strict\";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),Object.defineProperty(e,\"prototype\",{writable:!1}),e}n.d(t,{Z:function(){return o}})},7169:function(e,t,n){\"use strict\";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:function(){return r}})},2312:function(e,t,n){\"use strict\";function r(e){return r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},r(e)}n.d(t,{Z:function(){return r}})},2248:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return o}});var r=n(5901);function o(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,\"prototype\",{writable:!1}),t&&(0,r.Z)(e,t)}},2726:function(e,t,n){\"use strict\";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,{Z:function(){return r}})},7245:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return i}});var r=n(6655),o=n(3173);function i(e,t){if(t&&(\"object\"===(0,r.Z)(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return(0,o.Z)(e)}},5901:function(e,t,n){\"use strict\";function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}n.d(t,{Z:function(){return r}})},2577:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return o}});var r=n(9139);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||(0,r.Z)(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}},1930:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return i}});var r=n(7017);var o=n(9139);function i(e){return function(e){if(Array.isArray(e))return(0,r.Z)(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e[\"@@iterator\"])return Array.from(e)}(e)||(0,o.Z)(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}},6655:function(e,t,n){\"use strict\";function r(e){return r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},r(e)}n.d(t,{Z:function(){return r}})},9139:function(e,t,n){\"use strict\";n.d(t,{Z:function(){return o}});var r=n(7017);function o(e,t){if(e){if(\"string\"==typeof e)return(0,r.Z)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||\/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)?(0,r.Z)(e,t):void 0}}},5605:function(e,t,n){\"use strict\";n.d(t,{x0:function(){return r}});let r=(e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+=(t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?\"-\":\"_\"),\"\")},5284:function(e){\"use strict\";e.exports=JSON.parse('{\"white\":\"#ffffff\",\"black\":\"#000000\",\"gray\":[\"#f8f9fa\",\"#f1f3f5\",\"#e9ecef\",\"#dee2e6\",\"#ced4da\",\"#adb5bd\",\"#868e96\",\"#495057\",\"#343a40\",\"#212529\"],\"red\":[\"#fff5f5\",\"#ffe3e3\",\"#ffc9c9\",\"#ffa8a8\",\"#ff8787\",\"#ff6b6b\",\"#fa5252\",\"#f03e3e\",\"#e03131\",\"#c92a2a\"],\"pink\":[\"#fff0f6\",\"#ffdeeb\",\"#fcc2d7\",\"#faa2c1\",\"#f783ac\",\"#f06595\",\"#e64980\",\"#d6336c\",\"#c2255c\",\"#a61e4d\"],\"grape\":[\"#f8f0fc\",\"#f3d9fa\",\"#eebefa\",\"#e599f7\",\"#da77f2\",\"#cc5de8\",\"#be4bdb\",\"#ae3ec9\",\"#9c36b5\",\"#862e9c\"],\"violet\":[\"#f3f0ff\",\"#e5dbff\",\"#d0bfff\",\"#b197fc\",\"#9775fa\",\"#845ef7\",\"#7950f2\",\"#7048e8\",\"#6741d9\",\"#5f3dc4\"],\"indigo\":[\"#edf2ff\",\"#dbe4ff\",\"#bac8ff\",\"#91a7ff\",\"#748ffc\",\"#5c7cfa\",\"#4c6ef5\",\"#4263eb\",\"#3b5bdb\",\"#364fc7\"],\"blue\":[\"#e7f5ff\",\"#d0ebff\",\"#a5d8ff\",\"#74c0fc\",\"#4dabf7\",\"#339af0\",\"#228be6\",\"#1c7ed6\",\"#1971c2\",\"#1864ab\"],\"cyan\":[\"#e3fafc\",\"#c5f6fa\",\"#99e9f2\",\"#66d9e8\",\"#3bc9db\",\"#22b8cf\",\"#15aabf\",\"#1098ad\",\"#0c8599\",\"#0b7285\"],\"teal\":[\"#e6fcf5\",\"#c3fae8\",\"#96f2d7\",\"#63e6be\",\"#38d9a9\",\"#20c997\",\"#12b886\",\"#0ca678\",\"#099268\",\"#087f5b\"],\"green\":[\"#ebfbee\",\"#d3f9d8\",\"#b2f2bb\",\"#8ce99a\",\"#69db7c\",\"#51cf66\",\"#40c057\",\"#37b24d\",\"#2f9e44\",\"#2b8a3e\"],\"lime\":[\"#f4fce3\",\"#e9fac8\",\"#d8f5a2\",\"#c0eb75\",\"#a9e34b\",\"#94d82d\",\"#82c91e\",\"#74b816\",\"#66a80f\",\"#5c940d\"],\"yellow\":[\"#fff9db\",\"#fff3bf\",\"#ffec99\",\"#ffe066\",\"#ffd43b\",\"#fcc419\",\"#fab005\",\"#f59f00\",\"#f08c00\",\"#e67700\"],\"orange\":[\"#fff4e6\",\"#ffe8cc\",\"#ffd8a8\",\"#ffc078\",\"#ffa94d\",\"#ff922b\",\"#fd7e14\",\"#f76707\",\"#e8590c\",\"#d9480f\"]}')},1463:function(e){\"use strict\";e.exports=JSON.parse('{\"labels\":{\"paste\":\"Paste\",\"pasteAsPlaintext\":\"Paste as plaintext\",\"pasteCharts\":\"Paste charts\",\"selectAll\":\"Select all\",\"multiSelect\":\"Add element to selection\",\"moveCanvas\":\"Move canvas\",\"cut\":\"Cut\",\"copy\":\"Copy\",\"copyAsPng\":\"Copy to clipboard as PNG\",\"copyAsSvg\":\"Copy to clipboard as SVG\",\"copyText\":\"Copy to clipboard as text\",\"bringForward\":\"Bring forward\",\"sendToBack\":\"Send to back\",\"bringToFront\":\"Bring to front\",\"sendBackward\":\"Send backward\",\"delete\":\"Delete\",\"copyStyles\":\"Copy styles\",\"pasteStyles\":\"Paste styles\",\"stroke\":\"Stroke\",\"background\":\"Background\",\"fill\":\"Fill\",\"strokeWidth\":\"Stroke width\",\"strokeStyle\":\"Stroke style\",\"strokeStyle_solid\":\"Solid\",\"strokeStyle_dashed\":\"Dashed\",\"strokeStyle_dotted\":\"Dotted\",\"sloppiness\":\"Sloppiness\",\"opacity\":\"Opacity\",\"textAlign\":\"Text align\",\"edges\":\"Edges\",\"sharp\":\"Sharp\",\"round\":\"Round\",\"arrowheads\":\"Arrowheads\",\"arrowhead_none\":\"None\",\"arrowhead_arrow\":\"Arrow\",\"arrowhead_bar\":\"Bar\",\"arrowhead_dot\":\"Dot\",\"arrowhead_triangle\":\"Triangle\",\"fontSize\":\"Font size\",\"fontFamily\":\"Font family\",\"onlySelected\":\"Only selected\",\"withBackground\":\"Background\",\"exportEmbedScene\":\"Embed scene\",\"exportEmbedScene_details\":\"Scene data will be saved into the exported PNG\/SVG file so that the scene can be restored from it.\\\\nWill increase exported file size.\",\"addWatermark\":\"Add \\\\\"Made with Excalidraw\\\\\"\",\"handDrawn\":\"Hand-drawn\",\"normal\":\"Normal\",\"code\":\"Code\",\"small\":\"Small\",\"medium\":\"Medium\",\"large\":\"Large\",\"veryLarge\":\"Very large\",\"solid\":\"Solid\",\"hachure\":\"Hachure\",\"zigzag\":\"Zigzag\",\"crossHatch\":\"Cross-hatch\",\"thin\":\"Thin\",\"bold\":\"Bold\",\"left\":\"Left\",\"center\":\"Center\",\"right\":\"Right\",\"extraBold\":\"Extra bold\",\"architect\":\"Architect\",\"artist\":\"Artist\",\"cartoonist\":\"Cartoonist\",\"fileTitle\":\"File name\",\"colorPicker\":\"Color picker\",\"canvasColors\":\"Used on canvas\",\"canvasBackground\":\"Canvas background\",\"drawingCanvas\":\"Drawing canvas\",\"layers\":\"Layers\",\"actions\":\"Actions\",\"language\":\"Language\",\"liveCollaboration\":\"Live collaboration...\",\"duplicateSelection\":\"Duplicate\",\"untitled\":\"Untitled\",\"name\":\"Name\",\"yourName\":\"Your name\",\"madeWithExcalidraw\":\"Made with Excalidraw\",\"group\":\"Group selection\",\"ungroup\":\"Ungroup selection\",\"collaborators\":\"Collaborators\",\"showGrid\":\"Show grid\",\"addToLibrary\":\"Add to library\",\"removeFromLibrary\":\"Remove from library\",\"libraryLoadingMessage\":\"Loading library\u2026\",\"libraries\":\"Browse libraries\",\"loadingScene\":\"Loading scene\u2026\",\"align\":\"Align\",\"alignTop\":\"Align top\",\"alignBottom\":\"Align bottom\",\"alignLeft\":\"Align left\",\"alignRight\":\"Align right\",\"centerVertically\":\"Center vertically\",\"centerHorizontally\":\"Center horizontally\",\"distributeHorizontally\":\"Distribute horizontally\",\"distributeVertically\":\"Distribute vertically\",\"flipHorizontal\":\"Flip horizontal\",\"flipVertical\":\"Flip vertical\",\"viewMode\":\"View mode\",\"toggleExportColorScheme\":\"Toggle export color scheme\",\"share\":\"Share\",\"showStroke\":\"Show stroke color picker\",\"showBackground\":\"Show background color picker\",\"toggleTheme\":\"Toggle theme\",\"personalLib\":\"Personal Library\",\"excalidrawLib\":\"Excalidraw Library\",\"decreaseFontSize\":\"Decrease font size\",\"increaseFontSize\":\"Increase font size\",\"unbindText\":\"Unbind text\",\"bindText\":\"Bind text to the container\",\"createContainerFromText\":\"Wrap text in a container\",\"link\":{\"edit\":\"Edit link\",\"create\":\"Create link\",\"label\":\"Link\"},\"lineEditor\":{\"edit\":\"Edit line\",\"exit\":\"Exit line editor\"},\"elementLock\":{\"lock\":\"Lock\",\"unlock\":\"Unlock\",\"lockAll\":\"Lock all\",\"unlockAll\":\"Unlock all\"},\"statusPublished\":\"Published\",\"sidebarLock\":\"Keep sidebar open\"},\"library\":{\"noItems\":\"No items added yet...\",\"hint_emptyLibrary\":\"Select an item on canvas to add it here, or install a library from the public repository, below.\",\"hint_emptyPrivateLibrary\":\"Select an item on canvas to add it here.\"},\"buttons\":{\"clearReset\":\"Reset the canvas\",\"exportJSON\":\"Export to file\",\"exportImage\":\"Export image...\",\"export\":\"Save to...\",\"exportToPng\":\"Export to PNG\",\"exportToSvg\":\"Export to SVG\",\"copyToClipboard\":\"Copy to clipboard\",\"copyPngToClipboard\":\"Copy PNG to clipboard\",\"scale\":\"Scale\",\"save\":\"Save to current file\",\"saveAs\":\"Save as\",\"load\":\"Open\",\"getShareableLink\":\"Get shareable link\",\"close\":\"Close\",\"selectLanguage\":\"Select language\",\"scrollBackToContent\":\"Scroll back to content\",\"zoomIn\":\"Zoom in\",\"zoomOut\":\"Zoom out\",\"resetZoom\":\"Reset zoom\",\"menu\":\"Menu\",\"done\":\"Done\",\"edit\":\"Edit\",\"undo\":\"Undo\",\"redo\":\"Redo\",\"resetLibrary\":\"Reset library\",\"createNewRoom\":\"Create new room\",\"fullScreen\":\"Full screen\",\"darkMode\":\"Dark mode\",\"lightMode\":\"Light mode\",\"zenMode\":\"Zen mode\",\"exitZenMode\":\"Exit zen mode\",\"cancel\":\"Cancel\",\"clear\":\"Clear\",\"remove\":\"Remove\",\"publishLibrary\":\"Publish\",\"submit\":\"Submit\",\"confirm\":\"Confirm\"},\"alerts\":{\"clearReset\":\"This will clear the whole canvas. Are you sure?\",\"couldNotCreateShareableLink\":\"Couldn\\'t create shareable link.\",\"couldNotCreateShareableLinkTooBig\":\"Couldn\\'t create shareable link: the scene is too big\",\"couldNotLoadInvalidFile\":\"Couldn\\'t load invalid file\",\"importBackendFailed\":\"Importing from backend failed.\",\"cannotExportEmptyCanvas\":\"Cannot export empty canvas.\",\"couldNotCopyToClipboard\":\"Couldn\\'t copy to clipboard.\",\"decryptFailed\":\"Couldn\\'t decrypt data.\",\"uploadedSecurly\":\"The upload has been secured with end-to-end encryption, which means that Excalidraw server and third parties can\\'t read the content.\",\"loadSceneOverridePrompt\":\"Loading external drawing will replace your existing content. Do you wish to continue?\",\"collabStopOverridePrompt\":\"Stopping the session will overwrite your previous, locally stored drawing. Are you sure?\\\\n\\\\n(If you want to keep your local drawing, simply close the browser tab instead.)\",\"errorAddingToLibrary\":\"Couldn\\'t add item to the library\",\"errorRemovingFromLibrary\":\"Couldn\\'t remove item from the library\",\"confirmAddLibrary\":\"This will add {{numShapes}} shape(s) to your library. Are you sure?\",\"imageDoesNotContainScene\":\"This image does not seem to contain any scene data. Have you enabled scene embedding during export?\",\"cannotRestoreFromImage\":\"Scene couldn\\'t be restored from this image file\",\"invalidSceneUrl\":\"Couldn\\'t import scene from the supplied URL. It\\'s either malformed, or doesn\\'t contain valid Excalidraw JSON data.\",\"resetLibrary\":\"This will clear your library. Are you sure?\",\"removeItemsFromsLibrary\":\"Delete {{count}} item(s) from library?\",\"invalidEncryptionKey\":\"Encryption key must be of 22 characters. Live collaboration is disabled.\",\"collabOfflineWarning\":\"No internet connection available.\\\\nYour changes will not be saved!\"},\"errors\":{\"unsupportedFileType\":\"Unsupported file type.\",\"imageInsertError\":\"Couldn\\'t insert image. Try again later...\",\"fileTooBig\":\"File is too big. Maximum allowed size is {{maxSize}}.\",\"svgImageInsertError\":\"Couldn\\'t insert SVG image. The SVG markup looks invalid.\",\"invalidSVGString\":\"Invalid SVG.\",\"cannotResolveCollabServer\":\"Couldn\\'t connect to the collab server. Please reload the page and try again.\",\"importLibraryError\":\"Couldn\\'t load library\",\"collabSaveFailed\":\"Couldn\\'t save to the backend database. If problems persist, you should save your file locally to ensure you don\\'t lose your work.\",\"collabSaveFailed_sizeExceeded\":\"Couldn\\'t save to the backend database, the canvas seems to be too big. You should save the file locally to ensure you don\\'t lose your work.\",\"brave_measure_text_error\":{\"start\":\"Looks like you are using Brave browser with the\",\"aggressive_block_fingerprint\":\"Aggressively Block Fingerprinting\",\"setting_enabled\":\"setting enabled\",\"break\":\"This could result in breaking the\",\"text_elements\":\"Text Elements\",\"in_your_drawings\":\"in your drawings\",\"strongly_recommend\":\"We strongly recommend disabling this setting. You can follow\",\"steps\":\"these steps\",\"how\":\"on how to do so\",\"disable_setting\":\" If disabling this setting doesn\\'t fix the display of text elements, please open an\",\"issue\":\"issue\",\"write\":\"on our GitHub, or write us on\",\"discord\":\"Discord\"}},\"toolBar\":{\"selection\":\"Selection\",\"image\":\"Insert image\",\"rectangle\":\"Rectangle\",\"diamond\":\"Diamond\",\"ellipse\":\"Ellipse\",\"arrow\":\"Arrow\",\"line\":\"Line\",\"freedraw\":\"Draw\",\"text\":\"Text\",\"library\":\"Library\",\"lock\":\"Keep selected tool active after drawing\",\"penMode\":\"Pen mode - prevent touch\",\"link\":\"Add\/ Update link for a selected shape\",\"eraser\":\"Eraser\",\"hand\":\"Hand (panning tool)\"},\"headings\":{\"canvasActions\":\"Canvas actions\",\"selectedShapeActions\":\"Selected shape actions\",\"shapes\":\"Shapes\"},\"hints\":{\"canvasPanning\":\"To move canvas, hold mouse wheel or spacebar while dragging, or use the hand tool\",\"linearElement\":\"Click to start multiple points, drag for single line\",\"freeDraw\":\"Click and drag, release when you\\'re finished\",\"text\":\"Tip: you can also add text by double-clicking anywhere with the selection tool\",\"text_selected\":\"Double-click or press ENTER to edit text\",\"text_editing\":\"Press Escape or CtrlOrCmd+ENTER to finish editing\",\"linearElementMulti\":\"Click on last point or press Escape or Enter to finish\",\"lockAngle\":\"You can constrain angle by holding SHIFT\",\"resize\":\"You can constrain proportions by holding SHIFT while resizing,\\\\nhold ALT to resize from the center\",\"resizeImage\":\"You can resize freely by holding SHIFT,\\\\nhold ALT to resize from the center\",\"rotate\":\"You can constrain angles by holding SHIFT while rotating\",\"lineEditor_info\":\"Hold CtrlOrCmd and Double-click or press CtrlOrCmd + Enter to edit points\",\"lineEditor_pointSelected\":\"Press Delete to remove point(s),\\\\nCtrlOrCmd+D to duplicate, or drag to move\",\"lineEditor_nothingSelected\":\"Select a point to edit (hold SHIFT to select multiple),\\\\nor hold Alt and click to add new points\",\"placeImage\":\"Click to place the image, or click and drag to set its size manually\",\"publishLibrary\":\"Publish your own library\",\"bindTextToElement\":\"Press enter to add text\",\"deepBoxSelect\":\"Hold CtrlOrCmd to deep select, and to prevent dragging\",\"eraserRevert\":\"Hold Alt to revert the elements marked for deletion\",\"firefox_clipboard_write\":\"This feature can likely be enabled by setting the \\\\\"dom.events.asyncClipboard.clipboardItem\\\\\" flag to \\\\\"true\\\\\". To change the browser flags in Firefox, visit the \\\\\"about:config\\\\\" page.\"},\"canvasError\":{\"cannotShowPreview\":\"Cannot show preview\",\"canvasTooBig\":\"The canvas may be too big.\",\"canvasTooBigTip\":\"Tip: try moving the farthest elements a bit closer together.\"},\"errorSplash\":{\"headingMain_pre\":\"Encountered an error. Try \",\"headingMain_button\":\"reloading the page.\",\"clearCanvasMessage\":\"If reloading doesn\\'t work, try \",\"clearCanvasMessage_button\":\"clearing the canvas.\",\"clearCanvasCaveat\":\" This will result in loss of work \",\"trackedToSentry_pre\":\"The error with identifier \",\"trackedToSentry_post\":\" was tracked on our system.\",\"openIssueMessage_pre\":\"We were very cautious not to include your scene information on the error. If your scene is not private, please consider following up on our \",\"openIssueMessage_button\":\"bug tracker.\",\"openIssueMessage_post\":\" Please include information below by copying and pasting into the GitHub issue.\",\"sceneContent\":\"Scene content:\"},\"roomDialog\":{\"desc_intro\":\"You can invite people to your current scene to collaborate with you.\",\"desc_privacy\":\"Don\\'t worry, the session uses end-to-end encryption, so whatever you draw will stay private. Not even our server will be able to see what you come up with.\",\"button_startSession\":\"Start session\",\"button_stopSession\":\"Stop session\",\"desc_inProgressIntro\":\"Live-collaboration session is now in progress.\",\"desc_shareLink\":\"Share this link with anyone you want to collaborate with:\",\"desc_exitSession\":\"Stopping the session will disconnect you from the room, but you\\'ll be able to continue working with the scene, locally. Note that this won\\'t affect other people, and they\\'ll still be able to collaborate on their version.\",\"shareTitle\":\"Join a live collaboration session on Excalidraw\"},\"errorDialog\":{\"title\":\"Error\"},\"exportDialog\":{\"disk_title\":\"Save to disk\",\"disk_details\":\"Export the scene data to a file from which you can import later.\",\"disk_button\":\"Save to file\",\"link_title\":\"Shareable link\",\"link_details\":\"Export as a read-only link.\",\"link_button\":\"Export to Link\",\"excalidrawplus_description\":\"Save the scene to your Excalidraw+ workspace.\",\"excalidrawplus_button\":\"Export\",\"excalidrawplus_exportError\":\"Couldn\\'t export to Excalidraw+ at this moment...\"},\"helpDialog\":{\"blog\":\"Read our blog\",\"click\":\"click\",\"deepSelect\":\"Deep select\",\"deepBoxSelect\":\"Deep select within box, and prevent dragging\",\"curvedArrow\":\"Curved arrow\",\"curvedLine\":\"Curved line\",\"documentation\":\"Documentation\",\"doubleClick\":\"double-click\",\"drag\":\"drag\",\"editor\":\"Editor\",\"editLineArrowPoints\":\"Edit line\/arrow points\",\"editText\":\"Edit text \/ add label\",\"github\":\"Found an issue? Submit\",\"howto\":\"Follow our guides\",\"or\":\"or\",\"preventBinding\":\"Prevent arrow binding\",\"tools\":\"Tools\",\"shortcuts\":\"Keyboard shortcuts\",\"textFinish\":\"Finish editing (text editor)\",\"textNewLine\":\"Add new line (text editor)\",\"title\":\"Help\",\"view\":\"View\",\"zoomToFit\":\"Zoom to fit all elements\",\"zoomToSelection\":\"Zoom to selection\",\"toggleElementLock\":\"Lock\/unlock selection\",\"movePageUpDown\":\"Move page up\/down\",\"movePageLeftRight\":\"Move page left\/right\"},\"clearCanvasDialog\":{\"title\":\"Clear canvas\"},\"publishDialog\":{\"title\":\"Publish library\",\"itemName\":\"Item name\",\"authorName\":\"Author name\",\"githubUsername\":\"GitHub username\",\"twitterUsername\":\"Twitter username\",\"libraryName\":\"Library name\",\"libraryDesc\":\"Library description\",\"website\":\"Website\",\"placeholder\":{\"authorName\":\"Your name or username\",\"libraryName\":\"Name of your library\",\"libraryDesc\":\"Description of your library to help people understand its usage\",\"githubHandle\":\"GitHub handle (optional), so you can edit the library once submitted for review\",\"twitterHandle\":\"Twitter username (optional), so we know who to credit when promoting over Twitter\",\"website\":\"Link to your personal website or elsewhere (optional)\"},\"errors\":{\"required\":\"Required\",\"website\":\"Enter a valid URL\"},\"noteDescription\":{\"pre\":\"Submit your library to be included in the \",\"link\":\"public library repository\",\"post\":\"for other people to use in their drawings.\"},\"noteGuidelines\":{\"pre\":\"The library needs to be manually approved first. Please read the \",\"link\":\"guidelines\",\"post\":\" before submitting. You will need a GitHub account to communicate and make changes if requested, but it is not strictly required.\"},\"noteLicense\":{\"pre\":\"By submitting, you agree the library will be published under the \",\"link\":\"MIT License, \",\"post\":\"which in short means anyone can use them without restrictions.\"},\"noteItems\":\"Each library item must have its own name so it\\'s filterable. The following library items will be included:\",\"atleastOneLibItem\":\"Please select at least one library item to get started\",\"republishWarning\":\"Note: some of the selected items are marked as already published\/submitted. You should only resubmit items when updating an existing library or submission.\"},\"publishSuccessDialog\":{\"title\":\"Library submitted\",\"content\":\"Thank you {{authorName}}. Your library has been submitted for review. You can track the status\",\"link\":\"here\"},\"confirmDialog\":{\"resetLibrary\":\"Reset library\",\"removeItemsFromLib\":\"Remove selected items from library\"},\"encrypted\":{\"tooltip\":\"Your drawings are end-to-end encrypted so Excalidraw\\'s servers will never see them.\",\"link\":\"Blog post on end-to-end encryption in Excalidraw\"},\"stats\":{\"angle\":\"Angle\",\"element\":\"Element\",\"elements\":\"Elements\",\"height\":\"Height\",\"scene\":\"Scene\",\"selected\":\"Selected\",\"storage\":\"Storage\",\"title\":\"Stats for nerds\",\"total\":\"Total\",\"version\":\"Version\",\"versionCopy\":\"Click to copy\",\"versionNotAvailable\":\"Version not available\",\"width\":\"Width\"},\"toast\":{\"addedToLibrary\":\"Added to library\",\"copyStyles\":\"Copied styles.\",\"copyToClipboard\":\"Copied to clipboard.\",\"copyToClipboardAsPng\":\"Copied {{exportSelection}} to clipboard as PNG\\\\n({{exportColorScheme}})\",\"fileSaved\":\"File saved.\",\"fileSavedToFilename\":\"Saved to {filename}\",\"canvas\":\"canvas\",\"selection\":\"selection\",\"pasteAsSingleElement\":\"Use {{shortcut}} to paste as a single element,\\\\nor paste into an existing text editor\"},\"colors\":{\"495057\":\"Gray 7\",\"ffffff\":\"White\",\"f8f9fa\":\"Gray 0\",\"f1f3f5\":\"Gray 1\",\"fff5f5\":\"Red 0\",\"fff0f6\":\"Pink 0\",\"f8f0fc\":\"Grape 0\",\"f3f0ff\":\"Violet 0\",\"edf2ff\":\"Indigo 0\",\"e7f5ff\":\"Blue 0\",\"e3fafc\":\"Cyan 0\",\"e6fcf5\":\"Teal 0\",\"ebfbee\":\"Green 0\",\"f4fce3\":\"Lime 0\",\"fff9db\":\"Yellow 0\",\"fff4e6\":\"Orange 0\",\"transparent\":\"Transparent\",\"ced4da\":\"Gray 4\",\"868e96\":\"Gray 6\",\"fa5252\":\"Red 6\",\"e64980\":\"Pink 6\",\"be4bdb\":\"Grape 6\",\"7950f2\":\"Violet 6\",\"4c6ef5\":\"Indigo 6\",\"228be6\":\"Blue 6\",\"15aabf\":\"Cyan 6\",\"12b886\":\"Teal 6\",\"40c057\":\"Green 6\",\"82c91e\":\"Lime 6\",\"fab005\":\"Yellow 6\",\"fd7e14\":\"Orange 6\",\"000000\":\"Black\",\"343a40\":\"Gray 8\",\"c92a2a\":\"Red 9\",\"a61e4d\":\"Pink 9\",\"862e9c\":\"Grape 9\",\"5f3dc4\":\"Violet 9\",\"364fc7\":\"Indigo 9\",\"1864ab\":\"Blue 9\",\"0b7285\":\"Cyan 9\",\"087f5b\":\"Teal 9\",\"2b8a3e\":\"Green 9\",\"5c940d\":\"Lime 9\",\"e67700\":\"Yellow 9\",\"d9480f\":\"Orange 9\"},\"welcomeScreen\":{\"app\":{\"center_heading\":\"All your data is saved locally in your browser.\",\"center_heading_plus\":\"Did you want to go to the Excalidraw+ instead?\",\"menuHint\":\"Export, preferences, languages, ...\"},\"defaults\":{\"menuHint\":\"Export, preferences, and more...\",\"center_heading\":\"Diagrams. Made. Simple.\",\"toolbarHint\":\"Pick a tool & Start drawing!\",\"helpHint\":\"Shortcuts & help\"}}}')},4451:function(e){\"use strict\";e.exports=JSON.parse('{\"ar-SA\":89,\"bg-BG\":52,\"bn-BD\":57,\"ca-ES\":96,\"cs-CZ\":72,\"da-DK\":31,\"de-DE\":100,\"el-GR\":98,\"en\":100,\"es-ES\":99,\"eu-ES\":99,\"fa-IR\":91,\"fi-FI\":96,\"fr-FR\":99,\"gl-ES\":99,\"he-IL\":99,\"hi-IN\":73,\"hu-HU\":85,\"id-ID\":98,\"it-IT\":99,\"ja-JP\":97,\"kab-KAB\":93,\"kk-KZ\":19,\"ko-KR\":99,\"ku-TR\":91,\"lt-LT\":61,\"lv-LV\":93,\"mr-IN\":100,\"my-MM\":40,\"nb-NO\":100,\"nl-NL\":92,\"nn-NO\":86,\"oc-FR\":94,\"pa-IN\":79,\"pl-PL\":87,\"pt-BR\":96,\"pt-PT\":99,\"ro-RO\":100,\"ru-RU\":96,\"si-LK\":8,\"sk-SK\":99,\"sl-SI\":100,\"sv-SE\":99,\"ta-IN\":90,\"th-TH\":39,\"tr-TR\":98,\"uk-UA\":93,\"vi-VN\":52,\"zh-CN\":99,\"zh-HK\":25,\"zh-TW\":100}')}},l={};function s(e){var t=l[e];if(void 0!==t)return t.exports;var n=l[e]={id:e,exports:{}};return a[e](n,n.exports,s),n.exports}s.m=a,s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,{a:t}),t},r=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},s.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if(\"object\"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&\"function\"==typeof e.then)return e}var o=Object.create(null);s.r(o);var i={};n=n||[null,r({}),r([]),r(r)];for(var a=2&t&&e;\"object\"==typeof a&&!~n.indexOf(a);a=r(a))Object.getOwnPropertyNames(a).forEach((function(t){i[t]=function(){return e[t]}}));return i.default=function(){return e},s.d(o,i),o},s.d=function(e,t){for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=function(e){return Promise.all(Object.keys(s.f).reduce((function(t,n){return s.f[n](e,t),t}),[]))},s.u=function(e){return\"excalidraw-assets\/\"+{22:\"locales\/kk-KZ-json\",537:\"locales\/th-TH-json\",1204:\"locales\/ja-JP-json\",1302:\"locales\/si-LK-json\",1477:\"locales\/my-MM-json\",1513:\"locales\/el-GR-json\",1628:\"locales\/bg-BG-json\",1690:\"locales\/oc-FR-json\",1790:\"locales\/da-DK-json\",2091:\"locales\/ar-SA-json\",2312:\"locales\/he-IL-json\",2359:\"locales\/nb-NO-json\",2404:\"locales\/ta-IN-json\",2943:\"locales\/gl-ES-json\",3024:\"locales\/nl-NL-json\",3031:\"locales\/ku-TR-json\",3082:\"locales\/de-DE-json\",3162:\"locales\/pa-IN-json\",3397:\"locales\/mr-IN-json\",3421:\"locales\/zh-TW-json\",3512:\"locales\/fi-FI-json\",3674:\"locales\/pl-PL-json\",3682:\"locales\/fr-FR-json\",3721:\"locales\/pt-BR-json\",3808:\"locales\/id-ID-json\",3885:\"locales\/nn-NO-json\",4e3:\"locales\/vi-VN-json\",4680:\"locales\/zh-CN-json\",4736:\"vendor\",4977:\"locales\/tr-TR-json\",5089:\"locales\/ro-RO-json\",5130:\"locales\/ca-ES-json\",5330:\"locales\/fa-IR-json\",5395:\"locales\/pt-PT-json\",6071:\"locales\/sl-SI-json\",6239:\"locales\/it-IT-json\",6265:\"locales\/cs-CZ-json\",6768:\"locales\/lv-LV-json\",6844:\"locales\/ko-KR-json\",7368:\"locales\/hu-HU-json\",7429:\"locales\/bn-BD-json\",7759:\"locales\/uk-UA-json\",7920:\"locales\/zh-HK-json\",8081:\"locales\/eu-ES-json\",8124:\"locales\/ru-RU-json\",8340:\"locales\/lt-LT-json\",8534:\"locales\/sv-SE-json\",8750:\"locales\/sk-SK-json\",8759:\"locales\/es-ES-json\",9551:\"locales\/kab-KAB-json\",9828:\"locales\/hi-IN-json\"}[e]+\"-\"+{22:\"1f9df2b51e34996bad30\",537:\"3a152569bbebfec7c6c0\",1204:\"ef6ec5abb0c3c53c7a51\",1302:\"db1222db995d9425e281\",1477:\"1a05d5c242c822079dca\",1513:\"79f7d66730b39df84f8e\",1628:\"72ac7b7548d7fefdcd2a\",1690:\"e90ca79174b6e1eccb72\",1790:\"ed85a6f48e1df51b1b46\",2091:\"06d4bd2f3a164162f2b8\",2312:\"3280be0edae615c7685f\",2359:\"7ea7ab2356e76889af8d\",2404:\"4063d11b19f24794564a\",2943:\"2117445509ba7c479ee0\",3024:\"5805f36f33a3f8e53adc\",3031:\"d10a4bb9ede3c08a08e1\",3082:\"f70dfb7201a16dc3f9fc\",3162:\"1854ecccf3c6f8ea9c46\",3397:\"c922a007bb00d3e4f3b1\",3421:\"c39caba2da3f001066a8\",3512:\"d43636fb51002f55e2a4\",3674:\"b4be83b26070e4cf70ca\",3682:\"b5ea877625968f748b7f\",3721:\"2e7a1690edc8d46e8842\",3808:\"6031eb8be253b20c28e9\",3885:\"8209f0f674435b52293d\",4e3:\"2f5b95c0011820e16f4b\",4680:\"2cb13b38b6615ada3097\",4736:\"53d1c69ef585b6dd219b\",4977:\"9002b1505b0931924d42\",5089:\"3397acad1a98b5093c8b\",5130:\"6108f4ae0be3d1e369a6\",5330:\"586a1324f942d89620b6\",5395:\"aba1622a80e32e465a3d\",6071:\"68eba9ac00ae57bae3f4\",6239:\"446b14f993000d0f572f\",6265:\"1ae99f296c9febb99f72\",6768:\"1e3a5e87e39d2d90274c\",6844:\"cf33ecf52ab95055544b\",7368:\"6ccf0d8a164ecec52187\",7429:\"759924ef13bd9e602cb3\",7759:\"4e345c790342b7672248\",7920:\"4bcbf71743fda1544a84\",8081:\"1cc77079b354b962615f\",8124:\"8ab49e8d0473e92a8ab9\",8340:\"08c7fc343ef2f533ec5f\",8534:\"36b97455521e61312a47\",8750:\"50dcb09552f93c2de3a4\",8759:\"682b92427b8b27bb0aa8\",9551:\"69853849c71eff277ba0\",9828:\"dad8ce15f9b7a435a926\"}[e]+\".js\"},s.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(e){if(\"object\"==typeof window)return window}}(),s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o={},i=\"ExcalidrawLib:\",s.l=function(e,t,n,r){if(o[e])o[e].push(t);else{var a,l;if(void 0!==n)for(var c=document.getElementsByTagName(\"script\"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute(\"src\")==e||d.getAttribute(\"data-webpack\")==i+n){a=d;break}}a||(l=!0,(a=document.createElement(\"script\")).charset=\"utf-8\",a.timeout=120,s.nc&&a.setAttribute(\"nonce\",s.nc),a.setAttribute(\"data-webpack\",i+n),a.src=e),o[e]=[t];var f=function(t,n){a.onerror=a.onload=null,clearTimeout(p);var r=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((function(e){return e(n)})),t)return t(n)},p=setTimeout(f.bind(null,void 0,{type:\"timeout\",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},s.p=\"\",function(){s.b=document.baseURI||self.location.href;var e={1388:0};s.f.j=function(t,n){var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise((function(n,o){r=e[t]=[n,o]}));n.push(r[2]=o);var i=s.p+s.u(t),a=new Error;s.l(i,(function(n){if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&(\"load\"===n.type?\"missing\":n.type),i=n&&n.target&&n.target.src;a.message=\"Loading chunk \"+t+\" failed.\\n(\"+o+\": \"+i+\")\",a.name=\"ChunkLoadError\",a.type=o,a.request=i,r[1](a)}}),\"chunk-\"+t,t)}};var t=function(t,n){var r,o,i=n[0],a=n[1],l=n[2],c=0;if(i.some((function(t){return 0!==e[t]}))){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);if(l)l(s)}for(t&&t(n);c<i.length;c++)o=i[c],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkExcalidrawLib=self.webpackChunkExcalidrawLib||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),s.nc=void 0;var c={};return function(){\"use strict\";s.r(c),s.d(c,{Button:function(){return Se},Excalidraw:function(){return Ge},FONT_FAMILY:function(){return e.ut},Footer:function(){return K},LiveCollaborationTrigger:function(){return Te},MIME_TYPES:function(){return e.LO},MainMenu:function(){return Y.Z},Sidebar:function(){return Re.Y},THEME:function(){return e.C6},WelcomeScreen:function(){return be},bumpVersion:function(){return Ze.ZP},defaultLang:function(){return I.Fp},exportToBlob:function(){return Ae.Fl},exportToCanvas:function(){return Ae.NL},exportToClipboard:function(){return Ae.i1},exportToSvg:function(){return Ae.$D},getFreeDrawSvgPath:function(){return Ae.N7},getNonDeletedElements:function(){return Pe.Lm},getSceneVersion:function(){return Pe.Uo},isInvisiblySmallElement:function(){return Pe.QD},isLinearElement:function(){return Le.bt},languages:function(){return I.Mj},loadFromBlob:function(){return Ae.cT},loadLibraryFromBlob:function(){return Ae.lV},loadSceneOrLibraryFromBlob:function(){return Ae.ZY},mergeLibraryItems:function(){return Ae.zh},mutateElement:function(){return Ze.DR},newElementWith:function(){return Ze.BE},normalizeLink:function(){return Ne.$},parseLibraryTokensFromUrl:function(){return ze.Di},restore:function(){return De.nu},restoreAppState:function(){return De.lY},restoreElements:function(){return De.ET},restoreLibraryItems:function(){return De.wJ},sceneCoordsToViewportCoords:function(){return D._i},serializeAsJSON:function(){return Ae.I_},serializeLibraryAsJSON:function(){return Ae.NI},useDevice:function(){return P.Fy},useHandleLibrary:function(){return ze.xS},useI18n:function(){return I.QT},viewportCoordsToSceneCoords:function(){return D.dE}});var e=s(2335);\"production\"!==e.Vi.TEST&&(s.p=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(\"@excalidraw\/excalidraw\",\"@\").concat(\"0.15.3\",\"\/dist\/\"));var t=function(){Array.prototype.at||Object.defineProperty(Array.prototype,\"at\",{value:function(e){if((e=Math.trunc(e)||0)<0&&(e+=this.length),!(e<0||e>=this.length))return this[e]},writable:!0,enumerable:!1,configurable:!0})},n=s(487),r=s.n(n),o=s(631),i=s.n(o),a=s(2052),l=s.n(a),u=s(4010),d=s.n(u),f=s(1469),p=s.n(f),h=s(9329),m=s.n(h),g=s(4295),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=l().bind(null,\"head\"),v.domAPI=i(),v.insertStyleElement=p();r()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals;var b=s(6479),y=s.n(b),x=s(9713),w=s.n(x),k=s(9787),E=s.n(k),S=s(8950),j=s(2577),_=s(2975),O=s.n(_),C=s(5440),I=s(8211),M=s(4512),T=function(e){var t=(0,k.useState)(!0),n=(0,j.Z)(t,2),r=n[0],o=n[1];return(0,k.useEffect)((function(){var t=function(){var e=(0,S.Z)(O().mark((function e(){return O().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,I.m0)(n);case 2:o(!1);case 3:case\"end\":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),n=I.Mj.find((function(t){return t.code===e.langCode}))||I.Fp;t()}),[e.langCode]),r?(0,M.jsx)(C.z,{theme:e.theme}):e.children},P=s(2134),D=s(6340),A=s(9915),L={};L.styleTagTransform=m(),L.setAttributes=d(),L.insert=l().bind(null,\"head\"),L.domAPI=i(),L.insertStyleElement=p();r()(A.Z,L),A.Z&&A.Z.locals&&A.Z.locals;var Z=s(9310),z={};z.styleTagTransform=m(),z.setAttributes=d(),z.insert=l().bind(null,\"head\"),z.domAPI=i(),z.insertStyleElement=p();r()(Z.Z,z),Z.Z&&Z.Z.locals&&Z.Z.locals;var R=s(4739),N=s(9487),B=s(45),H=s(8888),W=s(8793),F={};F.styleTagTransform=m(),F.setAttributes=d(),F.insert=l().bind(null,\"head\"),F.domAPI=i(),F.insertStyleElement=p();r()(W.Z,F),W.Z&&W.Z.locals&&W.Z.locals;var U=function(e){var t=e.children,n=(0,H.R6)().footerCenterTunnel,r=(0,P.gF)();return(0,M.jsx)(n.In,{children:(0,M.jsx)(\"div\",{className:(0,B.Z)(\"footer-center zen-mode-transition\",{\"layer-ui__wrapper__footer-left--transition-bottom\":r.zenModeEnabled}),children:t})})},K=U;U.displayName=\"FooterCenter\";var Y=s(4709),G=s(7169),V=s(2726),X=s(6710),q=s(785),J=s(3646),$=[\"onSelect\",\"children\",\"icon\",\"shortcut\",\"className\"],Q=[\"children\",\"href\",\"icon\",\"shortcut\",\"className\"];function ee(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function te(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ee(Object(n),!0).forEach((function(t){(0,G.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ee(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ne=function(e){var t=e.icon,n=e.shortcut,r=e.children,o=(0,P.Fy)();return(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(\"div\",{className:\"welcome-screen-menu-item__icon\",children:t}),(0,M.jsx)(\"div\",{className:\"welcome-screen-menu-item__text\",children:r}),n&&!o.isMobile&&(0,M.jsx)(\"div\",{className:\"welcome-screen-menu-item__shortcut\",children:n})]})};ne.displayName=\"WelcomeScreenMenuItemContent\";var re=function(e){var t=e.onSelect,n=e.children,r=e.icon,o=e.shortcut,i=e.className,a=void 0===i?\"\":i,l=(0,V.Z)(e,$);return(0,M.jsx)(\"button\",te(te({},l),{},{type:\"button\",className:\"welcome-screen-menu-item \".concat(a),onClick:t,children:(0,M.jsx)(ne,{icon:r,shortcut:o,children:n})}))};re.displayName=\"WelcomeScreenMenuItem\";var oe=function(e){var t=e.children,n=e.href,r=e.icon,o=e.shortcut,i=e.className,a=void 0===i?\"\":i,l=(0,V.Z)(e,Q);return(0,M.jsx)(\"a\",te(te({},l),{},{className:\"welcome-screen-menu-item \".concat(a),href:n,target:\"_blank\",rel:\"noreferrer\",children:(0,M.jsx)(ne,{icon:r,shortcut:o,children:t})}))};oe.displayName=\"WelcomeScreenMenuItemLink\";var ie=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenCenterTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsx)(\"div\",{className:\"welcome-screen-center\",children:t||(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(ae,{}),(0,M.jsx)(le,{children:(0,I.t)(\"welcomeScreen.defaults.center_heading\")}),(0,M.jsxs)(se,{children:[(0,M.jsx)(ue,{}),(0,M.jsx)(ce,{})]})]})})})};ie.displayName=\"Center\";var ae=function(e){var t=e.children;return(0,M.jsx)(\"div\",{className:\"welcome-screen-center__logo virgil welcome-screen-decor\",children:t||(0,M.jsxs)(M.Fragment,{children:[J.Mw,\" Excalidraw\"]})})};ae.displayName=\"Logo\";var le=function(e){var t=e.children;return(0,M.jsx)(\"div\",{className:\"welcome-screen-center__heading welcome-screen-decor virgil\",children:t})};le.displayName=\"Heading\";var se=function(e){var t=e.children;return(0,M.jsx)(\"div\",{className:\"welcome-screen-menu\",children:t})};se.displayName=\"Menu\";var ce=function(){var e=(0,P.eh)();return(0,M.jsx)(re,{onSelect:function(){return e.executeAction(X.jY)},shortcut:\"?\",icon:J.by,children:(0,I.t)(\"helpDialog.title\")})};ce.displayName=\"MenuItemHelp\";var ue=function(){var e=(0,P.gF)(),t=(0,P.eh)();return e.viewModeEnabled?null:(0,M.jsx)(re,{onSelect:function(){return t.executeAction(X._d)},shortcut:(0,q.C)(\"loadScene\"),icon:J.Tl,children:(0,I.t)(\"buttons.load\")})};ue.displayName=\"MenuItemLoadScene\";var de=function(e){var t=e.onSelect,n=(0,I.QT)().t;return(0,M.jsx)(re,{shortcut:null,onSelect:t,icon:J.jn,children:n(\"labels.liveCollaboration\")})};de.displayName=\"MenuItemLiveCollaborationTrigger\",ie.Logo=ae,ie.Heading=le,ie.Menu=se,ie.MenuItem=re,ie.MenuItemLink=oe,ie.MenuItemHelp=ce,ie.MenuItemLoadScene=ue,ie.MenuItemLiveCollaborationTrigger=de;var fe=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenMenuHintTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsxs)(\"div\",{className:\"virgil welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--menu\",children:[J.oQ,(0,M.jsx)(\"div\",{className:\"welcome-screen-decor-hint__label\",children:t||(0,I.t)(\"welcomeScreen.defaults.menuHint\")})]})})};fe.displayName=\"MenuHint\";var pe=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenToolbarHintTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsxs)(\"div\",{className:\"virgil welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--toolbar\",children:[(0,M.jsx)(\"div\",{className:\"welcome-screen-decor-hint__label\",children:t||(0,I.t)(\"welcomeScreen.defaults.toolbarHint\")}),J.DJ]})})};pe.displayName=\"ToolbarHint\";var he=function(e){var t=e.children,n=(0,H.R6)().welcomeScreenHelpHintTunnel;return(0,M.jsx)(n.In,{children:(0,M.jsxs)(\"div\",{className:\"virgil welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--help\",children:[(0,M.jsx)(\"div\",{children:t||(0,I.t)(\"welcomeScreen.defaults.helpHint\")}),J._U]})})};he.displayName=\"HelpHint\";var me=s(1569),ge={};ge.styleTagTransform=m(),ge.setAttributes=d(),ge.insert=l().bind(null,\"head\"),ge.domAPI=i(),ge.insertStyleElement=p();r()(me.Z,ge),me.Z&&me.Z.locals&&me.Z.locals;var ve=function(e){return(0,M.jsx)(M.Fragment,{children:e.children||(0,M.jsxs)(M.Fragment,{children:[(0,M.jsx)(ie,{}),(0,M.jsx)(fe,{}),(0,M.jsx)(pe,{}),(0,M.jsx)(he,{})]})})};ve.displayName=\"WelcomeScreen\",ve.Center=ie,ve.Hints={MenuHint:fe,ToolbarHint:pe,HelpHint:he};var be=ve,ye=s(3137),xe={};xe.styleTagTransform=m(),xe.setAttributes=d(),xe.insert=l().bind(null,\"head\"),xe.domAPI=i(),xe.insertStyleElement=p();r()(ye.Z,xe),ye.Z&&ye.Z.locals&&ye.Z.locals;var we=[\"type\",\"onSelect\",\"children\",\"className\"];function ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(n),!0).forEach((function(t){(0,G.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Se=function(e){var t=e.type,n=void 0===t?\"button\":t,r=e.onSelect,o=e.children,i=e.className,a=void 0===i?\"\":i,l=(0,V.Z)(e,we);return(0,M.jsx)(\"button\",Ee(Ee({onClick:function(e){var t;r(),null===(t=l.onClick)||void 0===t||t.call(l,e)},type:n,className:\"excalidraw-button \".concat(a)},l),{},{children:o}))},je=s(3397),_e={};_e.styleTagTransform=m(),_e.setAttributes=d(),_e.insert=l().bind(null,\"head\"),_e.domAPI=i(),_e.insertStyleElement=p();r()(je.Z,_e),je.Z&&je.Z.locals&&je.Z.locals;var Oe=[\"isCollaborating\",\"onSelect\"];function Ce(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ie(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ce(Object(n),!0).forEach((function(t){(0,G.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ce(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Me=function(e){var t=e.isCollaborating,n=e.onSelect,r=(0,V.Z)(e,Oe),o=(0,P.gF)();return(0,M.jsxs)(Se,Ie(Ie({},r),{},{className:(0,B.Z)(\"collab-button\",{active:t}),type:\"button\",onSelect:n,style:{position:\"relative\"},title:(0,I.t)(\"labels.liveCollaboration\"),children:[J.jn,o.collaborators.size>0&&(0,M.jsx)(\"div\",{className:\"CollabButton-collaborators\",children:o.collaborators.size})]}))},Te=Me;Me.displayName=\"LiveCollaborationTrigger\";var Pe=s(1047),De=s(679),Ae=s(3024),Le=s(1974),Ze=s(1935),ze=s(7053),Re=s(9430),Ne=s(6794),Be=[\"initialData\",\"UIOptions\"],He=[\"initialData\",\"UIOptions\"];function We(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?We(Object(n),!0).forEach((function(t){w()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):We(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ue=function(t){var n,r,o,i=t.onChange,a=t.initialData,l=t.excalidrawRef,s=t.isCollaborating,c=void 0!==s&&s,u=t.onPointerUpdate,d=t.renderTopRightUI,f=t.renderSidebar,p=t.langCode,h=void 0===p?I.Fp.code:p,m=t.viewModeEnabled,g=t.zenModeEnabled,v=t.gridModeEnabled,b=t.libraryReturnUrl,y=t.theme,x=t.name,w=t.renderCustomStats,E=t.onPaste,S=t.detectScroll,j=void 0===S||S,_=t.handleKeyboardGlobally,O=void 0!==_&&_,C=t.onLibraryChange,D=t.autoFocus,A=void 0!==D&&D,L=t.generateIdForFile,Z=t.onLinkOpen,z=t.onPointerDown,B=t.onScrollChange,H=t.children,W=null===(n=t.UIOptions)||void 0===n?void 0:n.canvasActions,F=Fe(Fe({},t.UIOptions),{},{canvasActions:Fe(Fe({},e.cW.canvasActions),W)});null!=W&&W.export&&(F.canvasActions.export.saveFileToDisk=null!==(r=null===(o=W.export)||void 0===o?void 0:o.saveFileToDisk)&&void 0!==r?r:e.cW.canvasActions.export.saveFileToDisk);return null===F.canvasActions.toggleTheme&&void 0===y&&(F.canvasActions.toggleTheme=!0),(0,k.useEffect)((function(){var e=function(e){\"number\"==typeof e.scale&&1!==e.scale&&e.preventDefault()};return document.addEventListener(\"touchmove\",e,{passive:!1}),function(){document.removeEventListener(\"touchmove\",e)}}),[]),(0,M.jsx)(R.zt,{unstable_createStore:function(){return N.e_},scope:N.yE,children:(0,M.jsx)(T,{langCode:h,theme:y,children:(0,M.jsx)(P.ZP,{onChange:i,initialData:a,excalidrawRef:l,isCollaborating:c,onPointerUpdate:u,renderTopRightUI:d,langCode:h,viewModeEnabled:m,zenModeEnabled:g,gridModeEnabled:v,libraryReturnUrl:b,theme:y,name:x,renderCustomStats:w,UIOptions:F,onPaste:E,detectScroll:j,handleKeyboardGlobally:O,onLibraryChange:C,autoFocus:A,generateIdForFile:L,onLinkOpen:Z,onPointerDown:z,onScrollChange:B,renderSidebar:f,children:H})})})},Ke=function(e,t){if(e.children!==t.children)return!1;e.initialData;var n=e.UIOptions,r=void 0===n?{}:n,o=y()(e,Be),i=(t.initialData,t.UIOptions),a=void 0===i?{}:i,l=y()(t,He),s=Object.keys(r),c=Object.keys(a);return s.length===c.length&&(s.every((function(e){return\"canvasActions\"===e?Object.keys(r.canvasActions).every((function(e){var t,n,o,i;return\"export\"===e&&null!=r&&null!==(t=r.canvasActions)&&void 0!==t&&t.export&&null!=a&&null!==(n=a.canvasActions)&&void 0!==n&&n.export?r.canvasActions.export.saveFileToDisk===a.canvasActions.export.saveFileToDisk:(null==r||null===(o=r.canvasActions)||void 0===o?void 0:o[e])===(null==a||null===(i=a.canvasActions)||void 0===i?void 0:i[e])})):r[e]===a[e]}))&&(0,D.w8)(o,l))},Ye=(0,k.forwardRef)((function(e,t){return(0,M.jsx)(Ue,Fe(Fe({},e),{},{excalidrawRef:t}))})),Ge=E().memo(Ye,Ke);Ge.displayName=\"Excalidraw\",t()}(),c}()}));\n};","(ns frontend.rum\n  \"Utility fns for rum\"\n  (:require [clojure.string :as s]\n            [clojure.set :as set]\n            [clojure.walk :as w]\n            [rum.core :refer [use-state use-effect!] :as rum]\n            [daiquiri.interpreter :as interpreter]\n            [cljs-bean.core :as bean]))\n\n;; copy from https:\/\/github.com\/priornix\/antizer\/blob\/35ba264cf48b84e6597743e28b3570d8aa473e74\/src\/antizer\/core.cljs\n\n(defn kebab-case->camel-case\n  \"Converts from kebab case to camel case, eg: on-click to onClick\"\n  [input]\n  (s\/replace input #\"-([a-z])\" (fn [[_ c]] (s\/upper-case c))))\n\n(defn map-keys->camel-case\n  \"Stringifys all the keys of a cljs hashmap and converts them\n   from kebab case to camel case. If :html-props option is specified,\n   then rename the html properties values to their dom equivalent\n   before conversion\"\n  [data & {:keys [html-props]}]\n  (let [convert-to-camel (fn [[key value]]\n                           [(kebab-case->camel-case (name key)) value])]\n    (w\/postwalk (fn [x]\n                  (if (map? x)\n                    (let [new-map (if html-props\n                                    (set\/rename-keys x {:class :className :for :htmlFor})\n                                    x)]\n                      (into {} (map convert-to-camel new-map)))\n                    x))\n                data)))\n\n;; TODO: Replace this with rum's built in rum.core\/adapt-class\n;; adapted from https:\/\/github.com\/tonsky\/rum\/issues\/20\n(defn adapt-class\n  ([react-class]\n   (adapt-class react-class false))\n  ([react-class skip-opts-transform?]\n   (fn [& args]\n    (let [[opts children] (if (map? (first args))\n                            [(first args) (rest args)]\n                            [{} args])\n          type# (first children)\n          ;; we have to make sure to check if the children is sequential\n          ;; as a list can be returned, eg: from a (for)\n          new-children (if (sequential? type#)\n                         (let [result (interpreter\/interpret children)]\n                           (if (sequential? result)\n                             result\n                             [result]))\n                         children)\n          ;; convert any options key value to a react element, if\n          ;; a valid html element tag is used, using sablono\n          vector->react-elems (fn [[key val]]\n                                (if (sequential? val)\n                                  [key (interpreter\/interpret val)]\n                                  [key val]))\n          new-options (into {}\n                            (if skip-opts-transform?\n                              opts\n                              (map vector->react-elems opts)))]\n      (apply js\/React.createElement react-class\n        ;; sablono html-to-dom-attrs does not work for nested hashmaps\n        (bean\/->js (map-keys->camel-case new-options :html-props true))\n        new-children)))))\n\n(defn use-atom-fn\n  [a getter-fn setter-fn]\n  (let [[val set-val] (use-state (getter-fn @a))]\n    (use-effect!\n      (fn []\n        (let [id (str (random-uuid))]\n          (add-watch a id (fn [_ _ prev-state next-state]\n                            (let [prev-value (getter-fn prev-state)\n                                  next-value (getter-fn next-state)]\n                              (when-not (= prev-value next-value)\n                                (set-val next-value)))))\n          #(remove-watch a id)))\n      [])\n    [val #(swap! a setter-fn %)]))\n\n(defn use-atom\n  \"(use-atom my-atom)\"\n  [a]\n  (use-atom-fn a identity (fn [_ v] v)))\n\n(defn use-mounted\n  []\n  (let [*mounted (rum\/use-ref false)]\n    (use-effect!\n      (fn []\n         (rum\/set-ref! *mounted true)\n         #(rum\/set-ref! *mounted false))\n      [])\n    #(rum\/deref *mounted)))\n\n(defn use-bounding-client-rect\n  \"Returns the bounding client rect for a given dom node\n   You can manually change the tick value, if you want to force refresh the value, you can manually change the tick value\"\n  ([] (use-bounding-client-rect nil))\n  ([tick]\n   (let [[ref set-ref] (rum\/use-state nil)\n         [rect set-rect] (rum\/use-state nil)]\n     (rum\/use-effect!\n      (if ref\n        (fn []\n          (let [update-rect #(set-rect (. ref getBoundingClientRect))\n                updator (fn [entries]\n                          (when (.-contentRect (first (js->clj entries))) (update-rect)))\n                observer (js\/ResizeObserver. updator)]\n            (update-rect)\n            (.observe observer ref)\n            #(.disconnect observer)))\n        #())\n      [ref tick])\n     [set-ref rect])))\n\n(defn ->breakpoint\n  \"Converts a number to a breakpoint string\n   Values come from https:\/\/tailwindcss.com\/docs\/responsive-design\"\n  [size]\n  (cond\n    (nil? size) :md\n    (<= size 640) :sm\n    (<= size 768) :md\n    (<= size 1024) :lg\n    (<= size 1280) :xl\n    (<= size 1536) :xl\n    :else :2xl))\n\n(defn use-breakpoint\n  \"Returns the current breakpoint\n   You can manually change the tick value, if you want to force refresh the value, you can manually change the tick value\"\n  ([] (use-breakpoint nil))\n  ([tick]\n   (let [[ref rect] (use-bounding-client-rect tick)\n         bp (->breakpoint (when (some? rect) (.-width rect)))]\n     [ref bp])))\n\n(defn use-click-outside\n  \"Returns a function that can be used to register a callback\n   that will be called when the user clicks outside the given dom node\"\n  [handler & {:keys [capture? event]\n              :or {capture? false\n                   event \"click\"}}] ;; could be \"mousedown\" or \"click\"\n  (let [[ref set-ref] (rum\/use-state nil)]\n    (rum\/use-effect!\n     (fn []\n       (let [listener (fn [e]\n                        (when (and ref\n                                   (not (.. ref (contains (.-target e)))))\n                          (handler e)))]\n         (js\/document.addEventListener event listener capture?)\n         #(js\/document.removeEventListener event listener capture?)))\n     [ref])\n    set-ref))\n",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http:\/\/opensource.org\/licenses\/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core\n  (:require goog.math.Long\n            goog.math.Integer\n            [goog.string :as gstring]\n            [goog.object :as gobject]\n            [goog.array :as garray]\n            [goog.Uri])\n  (:import [goog.string StringBuffer]))\n\n;; next line is auto-generated by the build-script - Do not edit!\n(def *clojurescript-version* \"1.11.54\")\n\n;; Setting of these Vars is in ClojureScript code is associated with intrinsics\n;; that affect compilation state, but otherwise turn into no-ops in the emitted\n;; JavaScript.\n\n;; The scope of *unchecked-if* is controlled by balanced pairs of set! calls.\n(def *unchecked-if* false)\n;; The scope of *unchecked-arrays* is file-scope: In JVM ClojureScript its side-\n;; effect is to set same-named analyzer dynamic Var, which is unset via binding\n;; scopes. In self-hosted it is cleared via cljs.js\/post-file-side-effects.\n(def *unchecked-arrays* false)\n;; The scope of *warn-on-infer* is file-scope: Its side effect is to set the\n;; cljs.analyzer\/*cljs-warnings* dynamic Var, which is unset via binding scopes.\n(def *warn-on-infer* false)\n\n(set! *unchecked-arrays* true)\n\n(defonce PROTOCOL_SENTINEL #js {})\n\n(def MODULE_URIS nil) ;; set by compiler\n(def MODULE_INFOS nil) ;; set by compiler\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \\\"nodejs\\\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.\"}\n  *target* \"default\")\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Manually set the JavaScript global context. Only \\\"window\\\", \\\"self\\\"\n  , and \\\"global\\\" supported. \"}\n  *global* \"default\")\n\n(def\n  ^{:dynamic true\n    :doc \"Var bound to the current namespace. Only used for bootstrapping.\"\n    :jsdoc [\"@type {*}\"]}\n  *ns* nil)\n\n(def\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *out* nil)\n\n(def\n  ^{:dynamic true}\n  *assert* true)\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-fn* nil)\n\n(declare boolean)\n\n(defn ^{:doc \"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise.\" :dynamic true}\n  *exec-tap-fn*\n  [f]\n  (and\n    (exists? js\/setTimeout)\n    ;; See CLJS-3274 - workaround for recent WebKit releases\n    (boolean (js\/setTimeout f 0))))\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-err-fn* nil)\n\n(defn set-print-fn!\n  \"Set *print-fn* to f.\"\n  [f] (set! *print-fn* f))\n\n(defn set-print-err-fn!\n  \"Set *print-err-fn* to f.\"\n  [f] (set! *print-err-fn* f))\n\n(def\n  ^{:dynamic true\n    :doc \"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true.\"}\n  *flush-on-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects.\"}\n  *print-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true\"}\n  *print-readably* true)\n\n(def\n  ^{:dynamic true\n    :doc \"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false.\"}\n  *print-meta* false)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.\"}\n  *print-dup* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true.\"}\n  *print-namespace-maps* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-length* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-level* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-fns-bodies* controls whether functions print their source or\n    only their names.\"}\n  *print-fn-bodies* false)\n\n(defonce\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *loaded-libs* nil)\n\n(defn- pr-opts []\n  {:flush-on-newline *flush-on-newline*\n   :readably *print-readably*\n   :meta *print-meta*\n   :dup *print-dup*\n   :print-length *print-length*})\n\n(declare into-array)\n\n(defn enable-console-print!\n  \"Set *print-fn* to console.log\"\n  []\n  (set! *print-newline* false)\n  (set-print-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-log js\/console) js\/console (garray\/clone xs)))))\n  (set-print-err-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-error js\/console) js\/console (garray\/clone xs)))))\n  nil)\n\n(def\n  ^{:doc \"bound in a repl thread to the most recent value printed\"}\n  *1)\n\n(def\n  ^{:doc \"bound in a repl thread to the second most recent value printed\"}\n  *2)\n\n(def\n  ^{:doc \"bound in a repl thread to the third most recent value printed\"}\n  *3)\n\n(def\n  ^{:doc \"bound in a repl thread to the most recent exception caught by the repl\"}\n  *e)\n\n(defn truth_\n  \"Internal - do not use!\"\n  [x]\n  (cljs.core\/truth_ x))\n\n(def not-native nil)\n\n(declare instance? Keyword)\n\n(defn ^boolean identical?\n  \"Tests if 2 arguments are the same object\"\n  [x y]\n  (cljs.core\/identical? x y))\n\n(defn ^boolean nil?\n  \"Returns true if x is nil, false otherwise.\"\n  [x]\n  (coercive-= x nil))\n\n(defn ^boolean array?\n  \"Returns true if x is a JavaScript array.\"\n  [x]\n  (if (identical? *target* \"nodejs\")\n    (.isArray js\/Array x)\n    (instance? js\/Array x)))\n\n(defn ^boolean number?\n  \"Returns true if x is a JavaScript number.\"\n  [x]\n  (cljs.core\/number? x))\n\n(defn not\n  \"Returns true if x is logical false, false otherwise.\"\n  [x]\n  (cond\n    (nil? x) true\n    (false? x) true\n    :else false))\n\n(defn ^boolean some?\n  \"Returns true if x is not nil, false otherwise.\"\n  [x] (not (nil? x)))\n\n(defn object?\n  \"Returns true if x's constructor is Object\"\n  [x]\n  (if-not (nil? x)\n    (identical? (.-constructor x) js\/Object)\n    false))\n\n(defn ^boolean string?\n  \"Returns true if x is a JavaScript string.\"\n  [x]\n  (identical? \"string\" (goog\/typeOf x)))\n\n(defn char?\n  \"Returns true if x is a JavaScript string of length one.\"\n  [x]\n  (and (string? x) (== 1 (.-length x))))\n\n(defn any?\n  \"Returns true if given any argument.\"\n  [x] true)\n\n(set! *unchecked-if* true)\n(defn native-satisfies?\n  \"Internal - do not use!\"\n  [p x]\n  (let [x (if (nil? x) nil x)]\n    (cond\n     (unchecked-get p (goog\/typeOf x)) true\n     (unchecked-get p \"_\") true\n     :else false)))\n(set! *unchecked-if* false)\n\n(defn is_proto_\n  [x]\n  (identical? (.-prototype (.-constructor x)) x))\n\n(def\n  ^{:doc \"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments\"}\n  *main-cli-fn* nil)\n\n(def\n  ^{:doc \"A sequence of the supplied command line arguments, or nil if\n  none were supplied\"}\n  *command-line-args* nil)\n\n(defn type\n  \"Return x's constructor.\"\n  [x]\n  (when-not (nil? x)\n    (.-constructor x)))\n\n(defn missing-protocol [proto obj]\n  (let [ty (type obj)\n        ty (if (and ty (.-cljs$lang$type ty))\n             (.-cljs$lang$ctorStr ty)\n             (goog\/typeOf obj))]\n   (js\/Error.\n     (.join (array \"No protocol method \" proto\n                   \" defined for type \" ty \": \" obj) \"\"))))\n\n(defn type->str [ty]\n  (if-let [s (.-cljs$lang$ctorStr ty)]\n    s\n    (str ty)))\n\n;; INTERNAL - do not use, only for Node.js\n(defn load-file [file]\n  (when-not js\/COMPILED\n    (cljs.core\/load-file* file)))\n\n(if (and (exists? js\/Symbol)\n         (identical? (goog\/typeOf js\/Symbol) \"function\"))\n  (def ITER_SYMBOL (.-iterator js\/Symbol))\n  (def ITER_SYMBOL \"@@iterator\"))\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  CHAR_MAP\n  #js {\"-\"    \"_\"\n       \":\"    \"_COLON_\"\n       \"+\"    \"_PLUS_\"\n       \">\"    \"_GT_\"\n       \"<\"    \"_LT_\"\n       \"=\"    \"_EQ_\"\n       \"~\"    \"_TILDE_\"\n       \"!\"    \"_BANG_\"\n       \"@\"    \"_CIRCA_\"\n       \"#\"    \"_SHARP_\"\n       \"'\"    \"_SINGLEQUOTE_\"\n       \"\\\\\\\"\" \"_DOUBLEQUOTE_\"\n       \"%\"    \"_PERCENT_\"\n       \"^\"    \"_CARET_\"\n       \"&\"    \"_AMPERSAND_\"\n       \"*\"    \"_STAR_\"\n       \"|\"    \"_BAR_\"\n       \"{\"    \"_LBRACE_\"\n       \"}\"    \"_RBRACE_\"\n       \"[\"    \"_LBRACK_\"\n       \"]\"    \"_RBRACK_\"\n       \"\/\"    \"_SLASH_\"\n       \"\\\\\\\\\" \"_BSLASH_\"\n       \"?\"    \"_QMARK_\"})\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  DEMUNGE_MAP\n  #js {\"_\"             \"-\"\n       \"_COLON_\"       \":\"\n       \"_PLUS_\"        \"+\"\n       \"_GT_\"          \">\"\n       \"_LT_\"          \"<\"\n       \"_EQ_\"          \"=\"\n       \"_TILDE_\"       \"~\"\n       \"_BANG_\"        \"!\"\n       \"_CIRCA_\"       \"@\"\n       \"_SHARP_\"       \"#\"\n       \"_SINGLEQUOTE_\" \"'\"\n       \"_DOUBLEQUOTE_\" \"\\\\\\\"\"\n       \"_PERCENT_\"     \"%\"\n       \"_CARET_\"       \"^\"\n       \"_AMPERSAND_\"   \"&\"\n       \"_STAR_\"        \"*\"\n       \"_BAR_\"         \"|\"\n       \"_LBRACE_\"      \"{\"\n       \"_RBRACE_\"      \"}\"\n       \"_LBRACK_\"      \"[\"\n       \"_RBRACK_\"      \"]\"\n       \"_SLASH_\"       \"\/\"\n       \"_BSLASH_\"      \"\\\\\\\\\"\n       \"_QMARK_\"       \"?\"})\n\n(def DEMUNGE_PATTERN nil)\n\n(defn system-time\n  \"Returns highest resolution time offered by host in milliseconds.\"\n  []\n  (cond\n    (and (exists? js\/performance)\n         (not (nil? (. js\/performance -now))))\n    (.now js\/performance)\n\n    (and (exists? js\/process)\n         (not (nil? (. js\/process -hrtime))))\n    (let [t (.hrtime js\/process)]\n      (\/ (+ (* (aget t 0) 1e9) (aget t 1)) 1e6))\n\n    :else (.getTime (js\/Date.))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; arrays ;;;;;;;;;;;;;;;;\n\n(declare apply)\n\n(defn ^array make-array\n  \"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.\"\n  ([size]\n     (js\/Array. size))\n  ([type size]\n     (make-array size))\n  ([type size & more-sizes]\n    (let [dims more-sizes\n          dimarray (make-array size)]\n      (dotimes [i (alength dimarray)]\n        (aset dimarray i (apply make-array nil dims)))\n      dimarray)))\n\n(defn aclone\n  \"Returns a javascript array, cloned from the passed in array\"\n  [arr]\n  (let [len (alength arr)\n        new-arr (make-array len)]\n    (dotimes [i len]\n      (aset new-arr i (aget arr i)))\n    new-arr))\n\n(defn ^array array\n  \"Creates a new javascript array.\n@param {...*} var_args\" ;;array is a special case, don't emulate this doc string\n  [var-args]            ;; [& items]\n  (let [a (js\/Array. (alength (cljs.core\/js-arguments)))]\n    (loop [i 0]\n      (if (< i (alength a))\n        (do\n          (aset a i (aget (cljs.core\/js-arguments) i))\n          (recur (inc i)))\n        a))))\n\n(defn- maybe-warn\n  [e]\n  (when *print-err-fn*\n    (*print-err-fn* e)))\n\n(defn- checked-aget\n  ([array idx]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget (checked-aget array idx) idxs)))\n\n(defn- checked-aset\n  ([array idx val]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset (checked-aget array idx) idx2 idxv)))\n\n(defn- checked-aget'\n  ([array idx]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget' (checked-aget' array idx) idxs)))\n\n(defn- checked-aset'\n  ([array idx val]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset' (checked-aget' array idx) idx2 idxv)))\n\n(defn aget\n  \"Returns the value at the index\/indices. Works on JavaScript arrays.\"\n  ([array idx]\n     (cljs.core\/aget array idx))\n  ([array idx & idxs]\n     (apply aget (aget array idx) idxs)))\n\n(defn aset\n  \"Sets the value at the index\/indices. Works on JavaScript arrays.\n  Returns val.\"\n  ([array idx val]\n    (cljs.core\/aset array idx val))\n  ([array idx idx2 & idxv]\n    (apply aset (aget array idx) idx2 idxv)))\n\n(defn ^number alength\n  \"Returns the length of the array. Works on arrays of all types.\"\n  [array]\n  (cljs.core\/alength array))\n\n(declare reduce)\n\n(defn ^array into-array\n  \"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.\"\n  ([aseq]\n     (into-array nil aseq))\n  ([type aseq]\n     (reduce (fn [a x] (.push a x) a) (array) aseq)))\n\n(defn js-invoke\n  \"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.\"\n  [obj s & args]\n  (.apply (unchecked-get obj s) obj (into-array args)))\n\n(defn js-symbol?\n  \"Returns true if x is an instance of Symbol\"\n  [x]\n  (or (identical? (goog\/typeOf x) \"symbol\")\n      (and (exists? js\/Symbol)\n           (instance? js\/Symbol x))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;; core protocols ;;;;;;;;;;;;;\n\n(defprotocol Fn\n  \"Marker protocol\")\n\n(defprotocol IFn\n  \"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2\"\n  (-invoke\n    [this]\n    [this a]\n    [this a b]\n    [this a b c]\n    [this a b c d]\n    [this a b c d e]\n    [this a b c d e f]\n    [this a b c d e f g]\n    [this a b c d e f g h]\n    [this a b c d e f g h i]\n    [this a b c d e f g h i j]\n    [this a b c d e f g h i j k]\n    [this a b c d e f g h i j k l]\n    [this a b c d e f g h i j k l m]\n    [this a b c d e f g h i j k l m n]\n    [this a b c d e f g h i j k l m n o]\n    [this a b c d e f g h i j k l m n o p]\n    [this a b c d e f g h i j k l m n o p q]\n    [this a b c d e f g h i j k l m n o p q r]\n    [this a b c d e f g h i j k l m n o p q r s]\n    [this a b c d e f g h i j k l m n o p q r s t]\n    [this a b c d e f g h i j k l m n o p q r s t rest]))\n\n(defprotocol ICloneable\n  \"Protocol for cloning a value.\"\n  (^clj -clone [value]\n    \"Creates a clone of value.\"))\n\n(defprotocol ICounted\n  \"Protocol for adding the ability to count a collection in constant time.\"\n  (^number -count [coll]\n    \"Calculates the count of coll in constant time. Used by cljs.core\/count.\"))\n\n(defprotocol IEmptyableCollection\n  \"Protocol for creating an empty collection.\"\n  (-empty [coll]\n    \"Returns an empty collection of the same category as coll. Used\n     by cljs.core\/empty.\"))\n\n(defprotocol ICollection\n  \"Protocol for adding to a collection.\"\n  (^clj -conj [coll o]\n    \"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)\"))\n\n#_(defprotocol IOrdinal\n    (-index [coll]))\n\n(defprotocol IIndexed\n  \"Protocol for collections to provide indexed-based access to their items.\"\n  (-nth [coll n] [coll n not-found]\n    \"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.\"))\n\n(defprotocol ASeq\n  \"Marker protocol indicating an array sequence.\")\n\n(defprotocol ISeq\n  \"Protocol for collections to provide access to their items as sequences.\"\n  (-first [coll]\n    \"Returns the first item in the collection coll. Used by cljs.core\/first.\")\n  (^clj -rest [coll]\n    \"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()\"))\n\n(defprotocol INext\n  \"Protocol for accessing the next items of a collection.\"\n  (^clj-or-nil -next [coll]\n    \"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil\"))\n\n(defprotocol ILookup\n  \"Protocol for looking up a value in a data structure.\"\n  (-lookup [o k] [o k not-found]\n    \"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.\"))\n\n(defprotocol IAssociative\n  \"Protocol for adding associativity to collections.\"\n  (^boolean -contains-key? [coll k]\n    \"Returns true if k is a key in coll.\")\n  #_(-entry-at [coll k])\n  (^clj -assoc [coll k v]\n    \"Returns a new collection of coll with a mapping from key k to\n     value v added to it.\"))\n\n(defprotocol IFind\n  \"Protocol for implementing entry finding in collections.\"\n  (-find [coll k] \"Returns the map entry for key, or nil if key not present.\"))\n\n(defprotocol IMap\n  \"Protocol for adding mapping functionality to collections.\"\n  #_(-assoc-ex [coll k v])\n  (^clj -dissoc [coll k]\n    \"Returns a new collection of coll without the mapping for key k.\"))\n\n(defprotocol IMapEntry\n  \"Protocol for examining a map entry.\"\n  (-key [coll]\n    \"Returns the key of the map entry.\")\n  (-val [coll]\n    \"Returns the value of the map entry.\"))\n\n(defprotocol ISet\n  \"Protocol for adding set functionality to a collection.\"\n  (^clj -disjoin [coll v]\n    \"Returns a new collection of coll that does not contain v.\"))\n\n(defprotocol IStack\n  \"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.\"\n  (-peek [coll]\n    \"Returns the item from the top of the stack. Is used by cljs.core\/peek.\")\n  (^clj -pop [coll]\n    \"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core\/pop.\"))\n\n(defprotocol IVector\n  \"Protocol for adding vector functionality to collections.\"\n  (^clj -assoc-n [coll n val]\n    \"Returns a new vector with value val added at position n.\"))\n\n(defprotocol IDeref\n  \"Protocol for adding dereference functionality to a reference.\"\n  (-deref [o]\n    \"Returns the value of the reference o.\"))\n\n(defprotocol IDerefWithTimeout\n  (-deref-with-timeout [o msec timeout-val]))\n\n(defprotocol IMeta\n  \"Protocol for accessing the metadata of an object.\"\n  (^clj-or-nil -meta [o]\n    \"Returns the metadata of object o.\"))\n\n(defprotocol IWithMeta\n  \"Protocol for adding metadata to an object.\"\n  (^clj -with-meta [o meta]\n    \"Returns a new object with value of o and metadata meta added to it.\"))\n\n(defprotocol IReduce\n  \"Protocol for seq types that can reduce themselves.\n  Called by cljs.core\/reduce.\"\n  (-reduce [coll f] [coll f start]\n    \"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.\"))\n\n(defprotocol IKVReduce\n  \"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core\/reduce-kv.\"\n  (-kv-reduce [coll f init]\n    \"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.\"))\n\n(defprotocol IEquiv\n  \"Protocol for adding value comparison functionality to a type.\"\n  (^boolean -equiv [o other]\n    \"Returns true if o and other are equal, false otherwise.\"))\n\n(defprotocol IHash\n  \"Protocol for adding hashing functionality to a type.\"\n  (-hash [o]\n    \"Returns the hash code of o.\"))\n\n(defprotocol ISeqable\n  \"Protocol for adding the ability to a type to be transformed into a sequence.\"\n  (^clj-or-nil -seq [o]\n    \"Returns a seq of o, or nil if o is empty.\"))\n\n(defprotocol ISequential\n  \"Marker interface indicating a persistent collection of sequential items\")\n\n(defprotocol IList\n  \"Marker interface indicating a persistent list\")\n\n(defprotocol IRecord\n  \"Marker interface indicating a record object\")\n\n(defprotocol IReversible\n  \"Protocol for reversing a seq.\"\n  (^clj -rseq [coll]\n    \"Returns a seq of the items in coll in reversed order.\"))\n\n(defprotocol ISorted\n  \"Protocol for a collection which can represent their items\n  in a sorted manner. \"\n  (^clj -sorted-seq [coll ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\")\n  (^clj -sorted-seq-from [coll k ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)\")\n  (-entry-key [coll entry]\n    \"Returns the key for entry.\")\n  (-comparator [coll]\n    \"Returns the comparator for coll.\"))\n\n(defprotocol IWriter\n  \"Protocol for writing. Currently only implemented by StringBufferWriter.\"\n  (-write [writer s]\n    \"Writes s with writer and returns the result.\")\n  (-flush [writer]\n    \"Flush writer.\"))\n\n(defprotocol IPrintWithWriter\n  \"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.\"\n  (-pr-writer [o writer opts]))\n\n(defprotocol IPending\n  \"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.\"\n  (^boolean -realized? [x]\n    \"Returns true if a value for x has been produced, false otherwise.\"))\n\n(defprotocol IWatchable\n  \"Protocol for types that can be watched. Currently only implemented by Atom.\"\n  (-notify-watches [this oldval newval]\n    \"Calls all watchers with this, oldval and newval.\")\n  (-add-watch [this key f]\n    \"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.\")\n  (-remove-watch [this key]\n    \"Removes watcher that corresponds to key from this.\"))\n\n(defprotocol IEditableCollection\n  \"Protocol for collections which can transformed to transients.\"\n  (^clj -as-transient [coll]\n    \"Returns a new, transient version of the collection, in constant time.\"))\n\n(defprotocol ITransientCollection\n  \"Protocol for adding basic functionality to transient collections.\"\n  (^clj -conj! [tcoll val]\n    \"Adds value val to tcoll and returns tcoll.\")\n  (^clj -persistent! [tcoll]\n    \"Creates a persistent data structure from tcoll and returns it.\"))\n\n(defprotocol ITransientAssociative\n  \"Protocol for adding associativity to transient collections.\"\n  (^clj -assoc! [tcoll key val]\n    \"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.\"))\n\n(defprotocol ITransientMap\n  \"Protocol for adding mapping functionality to transient collections.\"\n  (^clj -dissoc! [tcoll key]\n    \"Returns a new transient collection of tcoll without the mapping for key.\"))\n\n(defprotocol ITransientVector\n  \"Protocol for adding vector functionality to transient collections.\"\n  (^clj -assoc-n! [tcoll n val]\n    \"Returns tcoll with value val added at position n.\")\n  (^clj -pop! [tcoll]\n    \"Returns tcoll with the last item removed from it.\"))\n\n(defprotocol ITransientSet\n  \"Protocol for adding set functionality to a transient collection.\"\n  (^clj -disjoin! [tcoll v]\n    \"Returns tcoll without v.\"))\n\n(defprotocol IComparable\n  \"Protocol for values that can be compared.\"\n  (^number -compare [x y]\n    \"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.\"))\n\n(defprotocol IChunk\n  \"Protocol for accessing the items of a chunk.\"\n  (-drop-first [coll]\n    \"Return a new chunk of coll with the first item removed.\"))\n\n(defprotocol IChunkedSeq\n  \"Protocol for accessing a collection as sequential chunks.\"\n  (-chunked-first [coll]\n    \"Returns the first chunk in coll.\")\n  (-chunked-rest [coll]\n    \"Return a new collection of coll with the first chunk removed.\"))\n\n(defprotocol IChunkedNext\n  \"Protocol for accessing the chunks of a collection.\"\n  (-chunked-next [coll]\n    \"Returns a new collection of coll without the first chunk.\"))\n\n(defprotocol INamed\n  \"Protocol for adding a name.\"\n  (^string -name [x]\n    \"Returns the name String of x.\")\n  ( ^{:tag #{string clj-nil}}-namespace [x]\n    \"Returns the namespace String of x.\"))\n\n(defprotocol IAtom\n  \"Marker protocol indicating an atom.\")\n\n(defprotocol IReset\n  \"Protocol for adding resetting functionality.\"\n  (-reset! [o new-value]\n    \"Sets the value of o to new-value.\"))\n\n(defprotocol ISwap\n  \"Protocol for adding swapping functionality.\"\n  (-swap! [o f] [o f a] [o f a b] [o f a b xs]\n    \"Swaps the value of o to be (apply f current-value-of-atom args).\"))\n\n(defprotocol IVolatile\n  \"Protocol for adding volatile functionality.\"\n  (-vreset! [o new-value]\n    \"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.\"))\n\n(defprotocol IIterable\n  \"Protocol for iterating over a collection.\"\n  (-iterator [coll]\n    \"Returns an iterator for coll.\"))\n\n;; Printing support\n\n(deftype StringBufferWriter [sb]\n  IWriter\n  (-write [_ s] (.append sb s))\n  (-flush [_] nil))\n\n(defn pr-str*\n  \"Support so that collections can implement toString without\n   loading all the printing machinery.\"\n  [^not-native obj]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (-pr-writer obj writer (pr-opts))\n    (-flush writer)\n    (str sb)))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 ;;;;;;;;;;;;;;;\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/Integer.java\n(defn ^number int-rotate-left [x n]\n  (bit-or\n    (bit-shift-left x n)\n    (unsigned-bit-shift-right x (- n))))\n\n;; http:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Math\/imul\n(if (and (exists? Math\/imul)\n         (not (zero? (Math\/imul 0xffffffff 5))))\n  (defn ^number imul [a b] (Math\/imul a b))\n  (defn ^number imul [a b]\n    (let [ah (bit-and (unsigned-bit-shift-right a 16) 0xffff)\n          al (bit-and a 0xffff)\n          bh (bit-and (unsigned-bit-shift-right b 16) 0xffff)\n          bl (bit-and b 0xffff)]\n      (bit-or\n        (+ (* al bl)\n           (unsigned-bit-shift-right\n             (bit-shift-left (+ (* ah bl) (* al bh)) 16) 0)) 0))))\n\n;; http:\/\/smhasher.googlecode.com\/svn\/trunk\/MurmurHash3.cpp\n(def m3-seed 0)\n(def m3-C1 (int 0xcc9e2d51))\n(def m3-C2 (int 0x1b873593))\n\n(defn ^number m3-mix-K1 [k1]\n  (-> (int k1) (imul m3-C1) (int-rotate-left 15) (imul m3-C2)))\n\n(defn ^number m3-mix-H1 [h1 k1]\n  (int (-> (int h1) (bit-xor (int k1)) (int-rotate-left 13) (imul 5) (+ (int 0xe6546b64)))))\n\n(defn ^number m3-fmix [h1 len]\n  (as-> (int h1) h1\n    (bit-xor h1 len)\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))\n    (imul h1 (int 0x85ebca6b))\n    (bit-xor h1 (unsigned-bit-shift-right h1 13))\n    (imul h1 (int 0xc2b2ae35))\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))))\n\n(defn ^number m3-hash-int [in]\n  (if (zero? in)\n    in\n    (let [k1 (m3-mix-K1 in)\n          h1 (m3-mix-H1 m3-seed k1)]\n      (m3-fmix h1 4))))\n\n(defn ^number m3-hash-unencoded-chars [in]\n  (let [h1 (loop [i 1 h1 m3-seed]\n             (if (< i (.-length in))\n               (recur (+ i 2)\n                 (m3-mix-H1 h1\n                   (m3-mix-K1\n                     (bit-or (.charCodeAt in (dec i))\n                       (bit-shift-left (.charCodeAt in i) 16)))))\n               h1))\n        h1 (if (== (bit-and (.-length in) 1) 1)\n             (bit-xor h1 (m3-mix-K1 (.charCodeAt in (dec (.-length in)))))\n             h1)]\n    (m3-fmix h1 (imul 2 (.-length in)))))\n\n;;;;;;;;;;;;;;;;;;; symbols ;;;;;;;;;;;;;;;\n\n(declare list Symbol = compare)\n\n;; Simple caching of string hashcode\n(def string-hash-cache (js-obj))\n(def string-hash-cache-count 0)\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/String.java\n(defn hash-string* [s]\n  (if-not (nil? s)\n    (let [len (.-length s)]\n      (if (pos? len)\n        (loop [i 0 hash 0]\n          (if (< i len)\n            (recur (inc i) (+ (imul 31 hash) (.charCodeAt s i)))\n            hash))\n        0))\n    0))\n\n(defn add-to-string-hash-cache [k]\n  (let [h (hash-string* k)]\n    (gobject\/set string-hash-cache k h)\n    (set! string-hash-cache-count (inc string-hash-cache-count))\n    h))\n\n(defn hash-string [k]\n  (when (> string-hash-cache-count 255)\n    (set! string-hash-cache (js-obj))\n    (set! string-hash-cache-count 0))\n  (if (nil? k)\n    0\n    (let [h (unchecked-get string-hash-cache k)]\n      (if (number? h)\n        h\n        (add-to-string-hash-cache k)))))\n\n(defn hash\n  \"Returns the hash code of its argument. Note this is the hash code\n   consistent with =.\"\n  [o]\n  (cond\n    (implements? IHash o)\n    (bit-xor (-hash o) 0)\n\n    (number? o)\n    (if ^boolean (js\/isFinite o)\n      (js-mod (Math\/floor o) 2147483647)\n      (case o\n        ##Inf\n        2146435072\n        ##-Inf\n        -1048576\n        2146959360))\n\n    ;; note: mirrors Clojure's behavior on the JVM, where the hashCode is\n    ;; 1231 for true and 1237 for false\n    ;; http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Boolean.html#hashCode%28%29\n    (true? o) 1231\n\n    (false? o) 1237\n\n    (string? o)\n    (m3-hash-int (hash-string o))\n\n    (instance? js\/Date o)\n    (bit-xor (.valueOf o) 0)\n\n    (nil? o) 0\n\n    :else\n    (bit-xor (-hash o) 0)))\n\n(defn hash-combine [seed hash]\n  ; a la boost\n  (bit-xor seed\n    (+ hash 0x9e3779b9\n      (bit-shift-left seed 6)\n      (bit-shift-right seed 2))))\n\n(defn ^boolean instance?\n  \"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false\"\n  [c x]\n  (cljs.core\/instance? c x))\n\n(defn ^boolean symbol?\n  \"Return true if x is a Symbol\"\n  [x]\n  (instance? Symbol x))\n\n(defn- hash-symbol [sym]\n  (hash-combine\n    (m3-hash-unencoded-chars (.-name sym))\n    (hash-string (.-ns sym))))\n\n(defn- compare-symbols [a b]\n  (cond\n   (identical? (.-str a) (.-str b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(declare get)\n\n(deftype Symbol [ns name str ^:mutable _hash _meta]\n  Object\n  (toString [_] str)\n  (equiv [this other] (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Symbol other)\n      (identical? str (.-str other))\n      false))\n\n  IFn\n  (-invoke [sym coll]\n    (get coll sym))\n  (-invoke [sym coll not-found]\n    (get coll sym not-found))\n\n  IMeta\n  (-meta [_] _meta)\n\n  IWithMeta\n  (-with-meta [_ new-meta] (Symbol. ns name str _hash new-meta))\n\n  IHash\n  (-hash [sym]\n    (caching-hash sym hash-symbol _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer str)))\n\n(defn var?\n  \"Returns true if v is of type cljs.core.Var\"\n  [v]\n  (instance? cljs.core.Var v))\n\n(defn symbol\n  \"Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.\"\n  ([name]\n   (cond (symbol? name) name\n         (string? name) (let [idx (.indexOf name \"\/\")]\n                          (if (< idx 1)\n                            (symbol nil name)\n                            (symbol (.substring name 0 idx)\n                                    (.substring name (inc idx) (. name -length)))))\n         (var? name) (.-sym name)\n         (keyword? name) (recur (.-fqn name))\n         :else (throw (new js\/Error \"no conversion to symbol\"))))\n  ([ns name]\n   (let [sym-str (if-not (nil? ns)\n                   (str ns \"\/\" name)\n                   name)]\n     (Symbol. ns name sym-str nil nil))))\n\n(deftype Var [val sym _meta]\n  Object\n  (isMacro [_]\n    (. (val) -cljs$lang$macro))\n  (toString [_]\n    (str \"#'\" sym))\n  IDeref\n  (-deref [_] (val))\n  IMeta\n  (-meta [_] _meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (Var. val sym new-meta))\n  IEquiv\n  (-equiv [this other]\n    (if (instance? Var other)\n      (= (.-sym this) (.-sym other))\n      false))\n  IHash\n  (-hash [_]\n    (hash-symbol sym))\n  Fn\n  IFn\n  (-invoke [_]\n    ((val)))\n  (-invoke [_ a]\n    ((val) a))\n  (-invoke [_ a b]\n    ((val) a b))\n  (-invoke [_ a b c]\n    ((val) a b c))\n  (-invoke [_ a b c d]\n    ((val) a b c d))\n  (-invoke [_ a b c d e]\n    ((val) a b c d e))\n  (-invoke [_ a b c d e f]\n    ((val) a b c d e f))\n  (-invoke [_ a b c d e f g]\n    ((val) a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    ((val) a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    ((val) a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    ((val) a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    ((val) a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    ((val) a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    ((val) a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    ((val) a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    ((val) a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    ((val) a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    ((val) a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    ((val) a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    ((val) a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    ((val) a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply (val) a b c d e f g h i j k l m n o p q r s t rest)))\n\n;;;;;;;;;;;;;;;;;;; fundamentals ;;;;;;;;;;;;;;;\n\n(declare array-seq prim-seq IndexedSeq)\n\n(defn iterable?\n  \"Return true if x implements IIterable protocol.\"\n  [x]\n  (satisfies? IIterable x))\n\n(defn js-iterable?\n  \"Return true if x has a JavaScript iterator property\"\n  [x]\n  (and (not (nil? x))\n       (not (nil? (js* \"~{}[~{}]\" x ITER_SYMBOL)))))\n\n(defn clone\n  \"Clone the supplied value which must implement ICloneable.\"\n  [value]\n  (-clone value))\n\n(defn cloneable?\n  \"Return true if x implements ICloneable protocol.\"\n  [value]\n  (satisfies? ICloneable value))\n\n(declare es6-iterator-seq)\n\n(defn ^seq seq\n  \"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? ISeqable coll)\n      (-seq coll)\n\n      (array? coll)\n      (when-not (zero? (alength coll))\n        (IndexedSeq. coll 0 nil))\n\n      (string? coll)\n      (when-not (zero? (.-length coll))\n        (IndexedSeq. coll 0 nil))\n\n      (js-iterable? coll)\n      (es6-iterator-seq\n        (.call (gobject\/get coll ITER_SYMBOL) coll))\n\n      (native-satisfies? ISeqable coll)\n      (-seq coll)\n\n      :else (throw (js\/Error. (str coll \" is not ISeqable\"))))))\n\n(defn first\n  \"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-first coll)\n      (let [s (seq coll)]\n        (when-not (nil? s)\n          (-first s))))))\n\n(defn ^seq rest\n  \"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.\"\n  [coll]\n  (if-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-rest coll)\n      (let [s (seq coll)]\n        (if s\n          (-rest ^not-native s)\n          ())))\n    ()))\n\n(defn ^seq next\n  \"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? INext coll)\n      (-next coll)\n      (seq (rest coll)))))\n\n(defn ^boolean =\n  \"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.\"\n  ([x] true)\n  ([x y]\n    (if (nil? x)\n      (nil? y)\n      (or (identical? x y)\n        ^boolean (-equiv x y))))\n  ([x y & more]\n     (if (= x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (= y (first more)))\n       false)))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6Iterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value x :done false})\n      #js {:value nil :done true})))\n\n(defn es6-iterator\n  \"EXPERIMENTAL: Return a ES2015 compatible iterator for coll.\"\n  [coll]\n  (ES6Iterator. (seq coll)))\n\n(deftype ES6IteratorSeq [value iter ^:mutable _rest]\n  ISeqable\n  (-seq [this] this)\n  ISeq\n  (-first [_] value)\n  (-rest [_]\n    (when (nil? _rest)\n      (set! _rest (es6-iterator-seq iter)))\n    _rest))\n\n(defn es6-iterator-seq\n  \"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq.\"\n  [iter]\n  (let [v (.next iter)]\n    (if (.-done v)\n      nil\n      (ES6IteratorSeq. (.-value v) iter nil))))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 Helpers ;;;;;;;;;;;;;;;;\n\n(defn ^number mix-collection-hash\n  \"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [hash-basis count]\n  (let [h1 m3-seed\n        k1 (m3-mix-K1 hash-basis)\n        h1 (m3-mix-H1 h1 k1)]\n    (m3-fmix h1 count)))\n\n(defn ^number hash-ordered-coll\n  \"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 1 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ (imul 31 hash-code) (hash (first coll))) 0)\n        (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-ordered-hash\n  (mix-collection-hash 1 0))\n\n(defn ^number hash-unordered-coll\n  \"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 0 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ hash-code (hash (first coll))) 0) (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-unordered-hash\n  (mix-collection-hash 0 0))\n\n;;;;;;;;;;;;;;;;;;; protocols on primitives ;;;;;;;;\n(declare hash-map list equiv-sequential)\n\n(extend-type nil\n  ICounted\n  (-count [_] 0))\n\n;; TODO: we should remove this and handle date equality checking\n;; by some other means, probably by adding a new primitive type\n;; case to the hash table lookup - David\n\n(extend-type js\/Date\n  IEquiv\n  (-equiv [o other]\n    (and (instance? js\/Date other)\n         (== (.valueOf o) (.valueOf other))))\n\n  IComparable\n  (-compare [this other]\n    (if (instance? js\/Date other)\n      (garray\/defaultCompare (.valueOf this) (.valueOf other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defprotocol Inst\n  (inst-ms* [inst]))\n\n(extend-protocol Inst\n  js\/Date\n  (inst-ms* [inst] (.getTime inst)))\n\n(defn inst-ms\n  \"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT\"\n  [inst]\n  (inst-ms* inst))\n\n(defn inst?\n  \"Return true if x satisfies Inst\"\n  [x]\n  (satisfies? Inst x))\n\n(extend-type number\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(declare with-meta)\n\n(extend-type function\n  Fn\n  IMeta\n  (-meta [_] nil))\n\n(extend-type default\n  IHash\n  (-hash [o]\n    (goog\/getUid o)))\n\n;;this is primitive because & emits call to array-seq\n(defn inc\n  \"Returns a number one greater than num.\"\n  [x] (cljs.core\/+ x 1))\n\n(declare deref)\n\n(deftype Reduced [val]\n  IDeref\n  (-deref [o] val))\n\n(defn reduced\n  \"Wraps x in a way such that a reduce will terminate with the value x\"\n  [x]\n  (Reduced. x))\n\n(defn reduced?\n  \"Returns true if x is the result of a call to reduced\"\n  [r]\n  (instance? Reduced r))\n\n(defn ensure-reduced\n  \"If x is already reduced?, returns it, else returns (reduced x)\"\n  [x]\n  (if (reduced? x) x (reduced x)))\n\n(defn unreduced\n  \"If x is reduced?, returns (deref x), else returns x\"\n  [x]\n  (if (reduced? x) (deref x) x))\n\n;; generic to all refs\n;; (but currently hard-coded to atom!)\n(defn deref\n  \"Also reader macro: @var\/@atom\/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?.\"\n  [o]\n  (-deref o))\n\n(defn- ci-reduce\n  \"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization\"\n  ([^not-native cicoll f]\n     (let [cnt (-count cicoll)]\n       (if (zero? cnt)\n         (f)\n         (loop [val (-nth cicoll 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (-nth cicoll n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([^not-native cicoll f val]\n     (let [cnt (-count cicoll)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (-nth cicoll n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(defn- array-reduce\n  ([arr f]\n     (let [cnt (alength arr)]\n       (if (zero? (alength arr))\n         (f)\n         (loop [val (aget arr 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (aget arr n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([arr f val]\n     (let [cnt (alength arr)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val))))\n  ([arr f val idx]\n     (let [cnt (alength arr)]\n       (loop [val val, n idx]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(declare hash-coll cons drop count nth RSeq List)\n\n(defn counted?\n  \"Returns true if coll implements count in constant time\"\n  [x] (satisfies? ICounted x))\n\n(defn indexed?\n  \"Returns true if coll implements nth in constant time\"\n  [x] (satisfies? IIndexed x))\n\n(defn- -indexOf\n  ([coll x]\n   (-indexOf coll x 0))\n  ([coll x start]\n   (let [len (count coll)]\n     (if (>= start len)\n       -1\n       (loop [idx (cond\n                    (pos? start) start\n                    (neg? start) (max 0 (+ start len))\n                    :else start)]\n         (if (< idx len)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (inc idx)))\n           -1))))))\n\n(defn- -lastIndexOf\n  ([coll x]\n   (-lastIndexOf coll x (count coll)))\n  ([coll x start]\n   (let [len (count coll)]\n    (if (zero? len)\n      -1\n      (loop [idx (cond\n                   (pos? start) (min (dec len) start)\n                   (neg? start) (+ len start)\n                   :else start)]\n        (if (>= idx 0)\n          (if (= (nth coll idx) x)\n            idx\n            (recur (dec idx)))\n          -1))))))\n\n(deftype IndexedSeqIterator [arr ^:mutable i]\n  Object\n  (hasNext [_]\n    (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret)))\n\n(deftype IndexedSeq [arr i meta]\n  Object\n  (toString [coll]\n   (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (IndexedSeq. arr i meta))\n\n  ISeqable\n  (-seq [this]\n    (when (< i (alength arr))\n      this))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (IndexedSeq. arr i new-meta)))\n\n  ASeq\n  ISeq\n  (-first [_] (aget arr i))\n  (-rest [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               (list)))\n\n  INext\n  (-next [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               nil))\n\n  ICounted\n  (-count [_]\n    (max 0 (- (alength arr) i)))\n\n  IIndexed\n  (-nth [coll n]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [coll n not-found]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        not-found)))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IIterable\n  (-iterator [coll]\n    (IndexedSeqIterator. arr i))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr i) (inc i)))\n  (-reduce [coll f start]\n    (array-reduce arr f start i))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReversible\n  (-rseq [coll]\n    (let [c (-count coll)]\n      (if (pos? c)\n        (RSeq. coll (dec c) nil)))))\n\n(es6-iterable IndexedSeq)\n\n(defn prim-seq\n  \"Create seq from a primitive JavaScript Array-like.\"\n  ([prim]\n     (prim-seq prim 0))\n  ([prim i]\n     (when (< i (alength prim))\n       (IndexedSeq. prim i nil))))\n\n(defn array-seq\n  \"Create a seq from a JavaScript array.\"\n  ([array]\n     (prim-seq array 0))\n  ([array i]\n     (prim-seq array i)))\n\n(declare with-meta seq-reduce)\n\n(deftype RSeq [ci i meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (RSeq. ci i meta))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (RSeq. ci i new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeq\n  (-first [coll]\n    (-nth ci i))\n  (-rest [coll]\n    (if (pos? i)\n      (RSeq. ci (dec i) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (pos? i)\n      (RSeq. ci (dec i) nil)))\n\n  ICounted\n  (-count [coll] (inc i))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReduce\n  (-reduce [col f] (seq-reduce f col))\n  (-reduce [col f start] (seq-reduce f start col)))\n\n(es6-iterable RSeq)\n\n(defn second\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn ffirst\n  \"Same as (first (first x))\"\n  [coll]\n  (first (first coll)))\n\n(defn nfirst\n  \"Same as (next (first x))\"\n  [coll]\n  (next (first coll)))\n\n(defn fnext\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn nnext\n  \"Same as (next (next x))\"\n  [coll]\n  (next (next coll)))\n\n(defn last\n  \"Return the last item in coll, in linear time\"\n  [s]\n  (let [sn (next s)]\n    (if-not (nil? sn)\n      (recur sn)\n      (first s))))\n\n(extend-type default\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(defn conj\n  \"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).\n  (conj coll) returns coll. (conj) returns [].\n  The 'addition' may happen at different 'places' depending\n  on the concrete type.\"\n  ([] [])\n  ([coll] coll)\n  ([coll x]\n    (if-not (nil? coll)\n      (-conj coll x)\n      (list x)))\n  ([coll x & xs]\n    (if xs\n      (recur (conj coll x) (first xs) (next xs))\n      (conj coll x))))\n\n(defn empty\n  \"Returns an empty collection of the same category as coll, or nil\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? IEmptyableCollection coll)\n      (-empty coll)\n\n      (satisfies? IEmptyableCollection coll)\n      (-empty coll)\n\n      :else nil)))\n\n(defn- accumulating-seq-count [coll]\n  (loop [s (seq coll) acc 0]\n    (if (counted? s) ; assumes nil is counted, which it currently is\n      (+ acc (-count s))\n      (recur (next s) (inc acc)))))\n\n(defn count\n  \"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps\"\n  [coll]\n  (if-not (nil? coll)\n    (cond\n      (implements? ICounted coll)\n      (-count coll)\n\n      (array? coll)\n      (alength coll)\n\n      (string? coll)\n      ^number (.-length coll)\n\n      (implements? ISeqable coll)\n      (accumulating-seq-count coll)\n\n      :else (-count coll))\n    0))\n\n(defn- linear-traversal-nth\n  ([coll n]\n     (cond\n       (nil? coll)     (throw (js\/Error. \"Index out of bounds\"))\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         (throw (js\/Error. \"Index out of bounds\")))\n       (indexed? coll) (-nth coll n)\n       (seq coll)      (recur (next coll) (dec n))\n       :else           (throw (js\/Error. \"Index out of bounds\"))))\n  ([coll n not-found]\n     (cond\n       (nil? coll)     not-found\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         not-found)\n       (indexed? coll) (-nth coll n not-found)\n       (seq coll)      (recur (next coll) (dec n) not-found)\n       :else           not-found)))\n\n(defn nth\n  \"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.\"\n  ([coll n]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number\"))\n\n      (nil? coll)\n      coll\n\n      (implements? IIndexed coll)\n      (-nth coll n)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        (throw (js\/Error. \"Index out of bounds\"))\n        (linear-traversal-nth coll n))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll)))))))\n  ([coll n not-found]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number.\"))\n\n      (nil? coll)\n      not-found\n\n      (implements? IIndexed coll)\n      (-nth coll n not-found)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        not-found)\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        not-found)\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        not-found\n        (linear-traversal-nth coll n not-found))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n not-found)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll))))))))\n\n(defn nthrest\n  \"Returns the nth rest of coll, coll when n is 0.\"\n  [coll n]\n    (loop [n n xs coll]\n      (if-let [xs (and (pos? n) (seq xs))]\n        (recur (dec n) (rest xs))\n        xs)))\n\n(defn get\n  \"Returns the value mapped to key, not-found or nil if key not present\n  in associative collection, set, string, array, or ILookup instance.\"\n  ([o k]\n    (when-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k)\n\n        (array? o)\n        (when (and (some? k) (< k (.-length o)))\n          (aget o (int k)))\n\n        (string? o)\n        (when (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k)))\n\n        (native-satisfies? ILookup o)\n        (-lookup o k)\n\n        :else nil)))\n  ([o k not-found]\n    (if-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k not-found)\n\n        (array? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (aget o (int k))\n          not-found)\n\n        (string? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k))\n          not-found)\n\n        (native-satisfies? ILookup o)\n        (-lookup o k not-found)\n\n        :else not-found)\n      not-found)))\n\n(declare PersistentHashMap PersistentArrayMap MapEntry)\n\n(defn assoc\n  \"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed\/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index. Note - index must be <= (count vector).\"\n  ([coll k v]\n   (if (implements? IAssociative coll)\n     (-assoc coll k v)\n     (if-not (nil? coll)\n       (-assoc coll k v)\n       (array-map k v))))\n  ([coll k v & kvs]\n     (let [ret (assoc coll k v)]\n       (if kvs\n         (recur ret (first kvs) (second kvs) (nnext kvs))\n         ret))))\n\n(defn dissoc\n  \"dissoc[iate]. Returns a new map of the same (hashed\/sorted) type,\n  that does not contain a mapping for key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-dissoc coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (dissoc coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn fn?\n  \"Return true if f is a JavaScript function or satisfies the Fn protocol.\"\n  [f]\n  (or (js-fn? f) (satisfies? Fn f)))\n\n(deftype MetaFn [afn meta]\n  IMeta\n  (-meta [_] meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (MetaFn. afn new-meta))\n  Fn\n  IFn\n  (-invoke [_]\n    (afn))\n  (-invoke [_ a]\n    (afn a))\n  (-invoke [_ a b]\n    (afn a b))\n  (-invoke [_ a b c]\n    (afn a b c))\n  (-invoke [_ a b c d]\n    (afn a b c d))\n  (-invoke [_ a b c d e]\n    (afn a b c d e))\n  (-invoke [_ a b c d e f]\n    (afn a b c d e f))\n  (-invoke [_ a b c d e f g]\n    (afn a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    (afn a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    (afn a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    (afn a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    (afn a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    (afn a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    (afn a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    (afn a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    (afn a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    (afn a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    (afn a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    (afn a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    (afn a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    (afn a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply afn a b c d e f g h i j k l m n o p q r s t rest)))\n\n(defn with-meta\n  \"Returns an object of the same type and value as obj, with\n  map m as its metadata.\"\n  [o meta]\n  (if (js-fn? o)\n    (MetaFn. o meta)\n    (when-not (nil? o)\n      (-with-meta o meta))))\n\n(defn meta\n  \"Returns the metadata of obj, returns nil if there is no metadata.\"\n  [o]\n  (when (and (not (nil? o))\n             (satisfies? IMeta o))\n    (-meta o)))\n\n(defn peek\n  \"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (-peek coll)))\n\n(defn pop\n  \"For a list or queue, returns a new list\/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next\/butlast.\"\n  [coll]\n  (when-not (nil? coll)\n    (-pop coll)))\n\n(defn disj\n  \"disj[oin]. Returns a new set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-disjoin coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (disj coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn empty?\n  \"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))\"\n  [coll] (or (nil? coll)\n             (not (seq coll))))\n\n(defn coll?\n  \"Returns true if x satisfies ICollection\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ICollection x)))\n\n(defn set?\n  \"Returns true if x satisfies ISet\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ISet x)))\n\n(defn associative?\n \"Returns true if coll implements IAssociative\"\n  [x] (satisfies? IAssociative x))\n\n(defn ifind?\n \"Returns true if coll implements IFind\"\n  [x] (satisfies? IFind x))\n\n(defn sequential?\n  \"Returns true if coll satisfies ISequential\"\n  [x] (satisfies? ISequential x))\n\n(defn sorted?\n  \"Returns true if coll satisfies ISorted\"\n  [x] (satisfies? ISorted x))\n\n(defn reduceable?\n  \"Returns true if coll satisfies IReduce\"\n  [x] (satisfies? IReduce x))\n\n(defn map?\n  \"Return true if x satisfies IMap\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? IMap x)))\n\n(defn record?\n  \"Return true if x satisfies IRecord\"\n  [x]\n  (satisfies? IRecord x))\n\n(defn vector?\n  \"Return true if x satisfies IVector\"\n  [x] (satisfies? IVector x))\n\n(declare ChunkedCons ChunkedSeq)\n\n(defn chunked-seq?\n  \"Return true if x satisfies IChunkedSeq.\"\n  [x] (implements? IChunkedSeq x))\n\n;;;;;;;;;;;;;;;;;;;; js primitives ;;;;;;;;;;;;\n(defn js-obj\n  \"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.\"\n  ([]\n     (cljs.core\/js-obj))\n  ([& keyvals]\n     (apply gobject\/create keyvals)))\n\n(defn js-keys\n  \"Return the JavaScript keys for an object.\"\n  [obj]\n  (gobject\/getKeys obj))\n\n(defn js-delete\n  \"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise.\"\n  [obj key]\n  (cljs.core\/js-delete obj key))\n\n(defn- array-copy\n  ([from i to j len]\n    (loop [i i j j len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (inc i) (inc j) (dec len)))))))\n\n(defn- array-copy-downward\n  ([from i to j len]\n     (loop [i (+ i (dec len)) j (+ j (dec len)) len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (dec i) (dec j) (dec len)))))))\n\n;;;;;;;;;;;;;;;; preds ;;;;;;;;;;;;;;;;;;\n\n(def ^:private lookup-sentinel (js-obj))\n\n(defn ^boolean false?\n  \"Returns true if x is the value false, false otherwise.\"\n  [x] (cljs.core\/false? x))\n\n(defn ^boolean true?\n  \"Returns true if x is the value true, false otherwise.\"\n  [x] (cljs.core\/true? x))\n\n(defn boolean?\n  \"Return true if x is a Boolean\"\n  [x] (or (cljs.core\/true? x) (cljs.core\/false? x)))\n\n(defn ^boolean undefined?\n  \"Returns true if x identical to the JavaScript undefined value.\"\n  [x]\n  (cljs.core\/undefined? x))\n\n(defn seq?\n  \"Return true if s satisfies ISeq\"\n  [s]\n  (if (nil? s)\n    false\n    (satisfies? ISeq s)))\n\n(defn seqable?\n  \"Return true if the seq function is supported for s\"\n  [s]\n  (or\n   (nil? s)\n   (satisfies? ISeqable s)\n   (array? s)\n   (string? s)))\n\n(defn boolean\n  \"Coerce to boolean\"\n  [x]\n  (cond\n    (nil? x) false\n    (false? x) false\n    :else true))\n\n(defn ifn?\n  \"Returns true if f returns true for fn? or satisfies IFn.\"\n  [f]\n  (or (fn? f) (satisfies? IFn f)))\n\n(defn integer?\n  \"Returns true if n is a JavaScript number with no decimal part.\"\n  [n]\n  (and (number? n)\n       (not ^boolean (js\/isNaN n))\n       (not (identical? n js\/Infinity))\n       (== (js\/parseFloat n) (js\/parseInt n 10))))\n\n(def\n  ^{:doc \"INTERNAL: do not use\"}\n  LongImpl goog.math.Long)\n\n(defn int?\n  \"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long.\"\n  [x]\n  (or (integer? x)\n      (instance? goog.math.Integer x)\n      (instance? goog.math.Long x)))\n\n(defn pos-int?\n  \"Return true if x satisfies int? and is positive.\"\n  [x]\n  (cond\n    (integer? x) (pos? x)\n\n    (instance? goog.math.Integer x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    (instance? goog.math.Long x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    :else false))\n\n(defn ^boolean neg-int?\n  \"Return true if x satisfies int? and is negative.\"\n  [x]\n  (cond\n    (integer? x) (neg? x)\n\n    (instance? goog.math.Integer x)\n    (.isNegative x)\n\n    (instance? goog.math.Long x)\n    (.isNegative x)\n\n    :else false))\n\n(defn nat-int?\n  \"Return true if x satisfies int? and is a natural integer value.\"\n  [x]\n  (cond\n    (integer? x)\n    (not (neg? x))\n\n    (instance? goog.math.Integer x)\n    (not (.isNegative x))\n\n    (instance? goog.math.Long x)\n    (not (.isNegative x))\n\n    :else false))\n\n(defn float?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn double?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn infinite?\n  \"Returns true for Infinity and -Infinity values.\"\n  [x]\n  (or (identical? x js\/Number.POSITIVE_INFINITY)\n      (identical? x js\/Number.NEGATIVE_INFINITY)))\n\n(defn contains?\n  \"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.\"\n  [coll v]\n  (cond\n    (implements? IAssociative coll)\n    (-contains-key? coll v)\n\n    (native-satisfies? IAssociative coll)\n    (-contains-key? coll v)\n\n    (identical? (get coll v lookup-sentinel) lookup-sentinel)\n    false\n\n    :else\n    true))\n\n(defn find\n  \"Returns the map entry for key, or nil if key not present.\"\n  [coll k]\n  (if (ifind? coll)\n    (-find coll k)\n    (when (and (not (nil? coll))\n            (associative? coll)\n            (contains? coll k))\n      (MapEntry. k (get coll k) nil))))\n\n(defn ^boolean distinct?\n  \"Returns true if no two of the arguments are =\"\n  ([x] true)\n  ([x y] (not (= x y)))\n  ([x y & more]\n     (if (not (= x y))\n     (loop [s #{x y} xs more]\n       (let [x (first xs)\n             etc (next xs)]\n         (if xs\n           (if (contains? s x)\n             false\n             (recur (conj s x) etc))\n           true)))\n     false)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Seq fns ;;;;;;;;;;;;;;;;\n\n(defn ^number compare\n  \"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.\"\n  [x y]\n  (cond\n   (identical? x y) 0\n\n   (nil? x) -1\n\n   (nil? y) 1\n\n   (number? x) (if (number? y)\n                 (garray\/defaultCompare x y)\n                 (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))\n\n   (satisfies? IComparable x)\n   (-compare x y)\n\n   :else\n   (if (and (or (string? x) (array? x) (true? x) (false? x))\n            (identical? (type x) (type y)))\n     (garray\/defaultCompare x y)\n     (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n(defn ^:private compare-indexed\n  \"Compare indexed collection.\"\n  ([xs ys]\n     (let [xl (count xs)\n           yl (count ys)]\n       (cond\n        (< xl yl) -1\n        (> xl yl) 1\n        (== xl 0) 0\n        :else (compare-indexed xs ys xl 0))))\n  ([xs ys len n]\n     (let [d (compare (nth xs n) (nth ys n))]\n       (if (and (zero? d) (< (+ n 1) len))\n         (recur xs ys len (inc n))\n         d))))\n\n(defn ^:private fn->comparator\n  \"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.\"\n  [f]\n  (if (= f compare)\n    compare\n    (fn [x y]\n      (let [r (f x y)]\n        (if (number? r)\n          r\n          (if r\n            -1\n            (if (f y x) 1 0)))))))\n\n(declare to-array)\n\n(defn sort\n  \"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([coll]\n   (sort compare coll))\n  ([comp coll]\n   (if (seq coll)\n     (let [a (to-array coll)]\n       ;; matching Clojure's stable sort, though docs don't promise it\n       (garray\/stableSort a (fn->comparator comp))\n       (with-meta (seq a) (meta coll)))\n     ())))\n\n(defn sort-by\n  \"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([keyfn coll]\n   (sort-by keyfn compare coll))\n  ([keyfn comp coll]\n     (sort (fn [x y] ((fn->comparator comp) (keyfn x) (keyfn y))) coll)))\n\n; simple reduce based on seqs, used as default\n(defn- seq-reduce\n  ([f coll]\n    (if-let [s (seq coll)]\n      (reduce f (first s) (next s))\n      (f)))\n  ([f val coll]\n    (loop [val val, coll (seq coll)]\n      (if coll\n        (let [nval (f val (first coll))]\n          (if (reduced? nval)\n            @nval\n            (recur nval (next coll))))\n        val))))\n\n(declare vec)\n\n(defn shuffle\n  \"Return a random permutation of coll\"\n  [coll]\n  (let [a (to-array coll)]\n    (garray\/shuffle a)\n    (vec a)))\n\n(defn- iter-reduce\n  ([coll f]\n   (let [iter (-iterator coll)]\n     (if (.hasNext iter)\n       (let [init (.next iter)]\n         (loop [acc init]\n           (if ^boolean (.hasNext iter)\n             (let [nacc (f acc (.next iter))]\n               (if (reduced? nacc)\n                 @nacc\n                 (recur nacc)))\n             acc)))\n       (f))))\n  ([coll f init]\n   (let [iter (-iterator coll)]\n     (loop [acc init]\n       (if ^boolean (.hasNext iter)\n         (let [nacc (f acc (.next iter))]\n           (if (reduced? nacc)\n             @nacc\n             (recur nacc)))\n         acc)))))\n\n(defn reduce\n  \"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.\"\n  ([f coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f)\n\n       (array? coll)\n       (array-reduce coll f)\n\n       (string? coll)\n       (array-reduce coll f)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f)\n\n       (iterable? coll)\n       (iter-reduce coll f)\n\n       :else\n       (seq-reduce f coll)))\n  ([f val coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f val)\n\n       (array? coll)\n       (array-reduce coll f val)\n\n       (string? coll)\n       (array-reduce coll f val)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f val)\n\n       (iterable? coll)\n       (iter-reduce coll f val)\n\n       :else\n       (seq-reduce f val coll))))\n\n(defn reduce-kv\n  \"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.\"\n  ([f init coll]\n    (if-not (nil? coll)\n      (-kv-reduce coll f init)\n      init)))\n\n(defn identity\n  \"Returns its argument.\"\n  [x] x)\n\n(defn completing\n  \"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.\"\n  ([f] (completing f identity))\n  ([f cf]\n    (fn\n      ([] (f))\n      ([x] (cf x))\n      ([x y] (f x y)))))\n\n(defn transduce\n  \"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.\"\n  ([xform f coll] (transduce xform f (f) coll))\n  ([xform f init coll]\n     (let [f (xform f)\n           ret (reduce f init coll)]\n       (f ret))))\n\n;;; Math - variadic forms will not work until the following implemented:\n;;; first, next, reduce\n\n(defn ^number +\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/+ x y))\n  ([x y & more]\n    (reduce + (cljs.core\/+ x y) more)))\n\n(defn ^number -\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/- x))\n  ([x y] (cljs.core\/- x y))\n  ([x y & more] (reduce - (cljs.core\/- x y) more)))\n\n(defn ^number *\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/* x y))\n  ([x y & more] (reduce * (cljs.core\/* x y) more)))\n\n(declare divide)\n\n(defn ^number \/\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (\/ 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce \/ (\/ x y) more)))\n\n(defn ^boolean <\n  \"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/< x y))\n  ([x y & more]\n     (if (cljs.core\/< x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (cljs.core\/< y (first more)))\n       false)))\n\n(defn ^boolean <=\n  \"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/<= x y))\n  ([x y & more]\n   (if (cljs.core\/<= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/<= y (first more)))\n     false)))\n\n(defn ^boolean >\n  \"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/> x y))\n  ([x y & more]\n   (if (cljs.core\/> x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/> y (first more)))\n     false)))\n\n(defn ^boolean >=\n  \"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/>= x y))\n  ([x y & more]\n   (if (cljs.core\/>= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/>= y (first more)))\n     false)))\n\n(defn dec\n  \"Returns a number one less than num.\"\n  [x] (- x 1))\n\n(defn ^number abs\n  {:doc \"Returns the absolute value of a.\"\n   :added \"1.11.10\"}\n  [a] (Math\/abs a))\n\n(defn ^number max\n  \"Returns the greatest of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/max x y))\n  ([x y & more]\n   (reduce max (cljs.core\/max x y) more)))\n\n(defn ^number min\n  \"Returns the least of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/min x y))\n  ([x y & more]\n   (reduce min (cljs.core\/min x y) more)))\n\n(defn ^number byte [x] x)\n\n(defn char\n  \"Coerce to char\"\n  [x]\n  (cond\n    (number? x) (.fromCharCode js\/String x)\n    (and (string? x) (== (.-length x) 1)) x\n    :else (throw (js\/Error. \"Argument to char must be a character or number\"))))\n\n(defn ^number short [x] x)\n(defn ^number float [x] x)\n(defn ^number double [x] x)\n\n(defn ^number unchecked-byte [x] x)\n(defn ^number unchecked-char [x] x)\n(defn ^number unchecked-short [x] x)\n(defn ^number unchecked-float [x] x)\n(defn ^number unchecked-double [x] x)\n\n(defn ^number unchecked-add\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add x y))\n  ([x y & more] (reduce unchecked-add (cljs.core\/unchecked-add x y) more)))\n\n(defn ^number unchecked-add-int\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add-int x y))\n  ([x y & more] (reduce unchecked-add-int (cljs.core\/unchecked-add-int x y) more)))\n\n(defn unchecked-dec\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec x))\n\n(defn unchecked-dec-int\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec-int x))\n\n(defn ^number unchecked-divide-int\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (unchecked-divide-int 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce unchecked-divide-int (unchecked-divide-int x y) more)))\n\n(defn unchecked-inc [x]\n  (cljs.core\/unchecked-inc x))\n\n(defn unchecked-inc-int [x]\n  (cljs.core\/unchecked-inc-int x))\n\n(defn ^number unchecked-multiply\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply x y))\n  ([x y & more] (reduce unchecked-multiply (cljs.core\/unchecked-multiply x y) more)))\n\n(defn ^number unchecked-multiply-int\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply-int x y))\n  ([x y & more] (reduce unchecked-multiply-int (cljs.core\/unchecked-multiply-int x y) more)))\n\n(defn unchecked-negate [x]\n  (cljs.core\/unchecked-negate x))\n\n(defn unchecked-negate-int [x]\n  (cljs.core\/unchecked-negate-int x))\n\n(declare mod)\n\n(defn unchecked-remainder-int [x n]\n  (cljs.core\/unchecked-remainder-int x n))\n\n(defn ^number unchecked-subtract\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract x))\n  ([x y] (cljs.core\/unchecked-subtract x y))\n  ([x y & more] (reduce unchecked-subtract (cljs.core\/unchecked-subtract x y) more)))\n\n(defn ^number unchecked-subtract-int\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract-int x))\n  ([x y] (cljs.core\/unchecked-subtract-int x y))\n  ([x y & more] (reduce unchecked-subtract-int (cljs.core\/unchecked-subtract-int x y) more)))\n\n(defn- ^number fix [q]\n  (if (>= q 0)\n    (Math\/floor q)\n    (Math\/ceil q)))\n\n(defn int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (bit-or x 0))\n\n(defn unchecked-int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (fix x))\n\n(defn long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn unchecked-long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn booleans [x] x)\n(defn bytes [x] x)\n(defn chars [x] x)\n(defn shorts [x] x)\n(defn ints [x] x)\n(defn floats [x] x)\n(defn doubles [x] x)\n(defn longs [x] x)\n\n(defn js-mod\n  \"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers\"\n  [n d]\n  (cljs.core\/js-mod n d))\n\n(defn mod\n  \"Modulus of num and div. Truncates toward negative infinity.\"\n  [n d]\n  (js-mod (+ (js-mod n d) d) d))\n\n(defn quot\n  \"quot[ient] of dividing numerator by denominator.\"\n  [n d]\n  (let [rem (js-mod n d)]\n    (fix (\/ (- n rem) d))))\n\n(defn rem\n  \"remainder of dividing numerator by denominator.\"\n  [n d]\n  (let [q (quot n d)]\n    (- n (* d q))))\n\n(defn bit-xor\n  \"Bitwise exclusive or\"\n  ([x y] (cljs.core\/bit-xor x y))\n  ([x y & more]\n     (reduce bit-xor (cljs.core\/bit-xor x y) more)))\n\n(defn bit-and\n  \"Bitwise and\"\n  ([x y] (cljs.core\/bit-and x y))\n  ([x y & more]\n     (reduce bit-and (cljs.core\/bit-and x y) more)))\n\n(defn bit-or\n  \"Bitwise or\"\n  ([x y] (cljs.core\/bit-or x y))\n  ([x y & more]\n     (reduce bit-or (cljs.core\/bit-or x y) more)))\n\n(defn bit-and-not\n  \"Bitwise and with complement\"\n  ([x y] (cljs.core\/bit-and-not x y))\n  ([x y & more]\n     (reduce bit-and-not (cljs.core\/bit-and-not x y) more)))\n\n(defn bit-clear\n  \"Clear bit at index n\"\n  [x n]\n  (cljs.core\/bit-clear x n))\n\n(defn bit-flip\n  \"Flip bit at index n\"\n  [x n]\n  (cljs.core\/bit-flip x n))\n\n(defn bit-not\n  \"Bitwise complement\"\n  [x] (cljs.core\/bit-not x))\n\n(defn bit-set\n  \"Set bit at index n\"\n  [x n]\n  (cljs.core\/bit-set x n))\n\n(defn ^boolean bit-test\n  \"Test bit at index n\"\n  [x n]\n  (cljs.core\/bit-test x n))\n\n(defn bit-shift-left\n  \"Bitwise shift left\"\n  [x n] (cljs.core\/bit-shift-left x n))\n\n(defn bit-shift-right\n  \"Bitwise shift right\"\n  [x n] (cljs.core\/bit-shift-right x n))\n\n(defn bit-shift-right-zero-fill\n  \"DEPRECATED: Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/bit-shift-right-zero-fill x n))\n\n(defn unsigned-bit-shift-right\n  \"Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/unsigned-bit-shift-right x n))\n\n(defn bit-count\n  \"Counts the number of bits set in n\"\n  [v]\n  (let [v (- v (bit-and (bit-shift-right v 1) 0x55555555))\n        v (+ (bit-and v 0x33333333) (bit-and (bit-shift-right v 2) 0x33333333))]\n    (bit-shift-right (* (bit-and (+ v (bit-shift-right v 4)) 0xF0F0F0F) 0x1010101) 24)))\n\n(defn ^boolean ==\n  \"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.\"\n  ([x] true)\n  ([x y] (-equiv x y))\n  ([x y & more]\n   (if (== x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (== y (first more)))\n     false)))\n\n(defn ^boolean pos?\n  \"Returns true if num is greater than zero, else false\"\n  [x] (cljs.core\/pos? x))\n\n(defn ^boolean zero?\n  \"Returns true if num is zero, else false\"\n  [x]\n  (cljs.core\/zero? x))\n\n(defn ^boolean neg?\n  \"Returns true if num is less than zero, else false\"\n  [x] (cljs.core\/neg? x))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; protocols for host types ;;;;;;\n\n(defn nthnext\n  \"Returns the nth next of coll, (seq coll) when n is 0.\"\n  [coll n]\n  (loop [n n xs (seq coll)]\n    (if (and xs (pos? n))\n      (recur (dec n) (next xs))\n      xs)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;; basics ;;;;;;;;;;;;;;;;;;\n\n(defn str\n  \"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.\"\n  ([] \"\")\n  ([x] (if (nil? x)\n         \"\"\n         (.join #js [x] \"\")))\n  ([x & ys]\n    (loop [sb (StringBuffer. (str x)) more ys]\n      (if more\n        (recur (. sb  (append (str (first more)))) (next more))\n        (.toString sb)))))\n\n(defn subs\n  \"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.\"\n  ([s start] ^string (.substring s start))\n  ([s start end] ^string (.substring s start end)))\n\n(declare map name)\n\n(defn- equiv-sequential\n  \"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.\"\n  [x y]\n  (boolean\n    (when (sequential? y)\n      (if (and (counted? x) (counted? y)\n               (not (== (count x) (count y))))\n        false\n        (loop [xs (seq x) ys (seq y)]\n          (cond (nil? xs) (nil? ys)\n            (nil? ys) false\n            (= (first xs) (first ys)) (recur (next xs) (next ys))\n            :else false))))))\n\n(defn- hash-coll [coll]\n  (if (seq coll)\n    (loop [res (hash (first coll)) s (next coll)]\n      (if (nil? s)\n        res\n        (recur (hash-combine res (hash (first s))) (next s))))\n    0))\n\n(declare key val)\n\n(defn- hash-imap [m]\n  ;; a la clojure.lang.APersistentMap\n  (loop [h 0 s (seq m)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (bit-xor (hash (key e)) (hash (val e))))\n                    4503599627370496)\n               (next s)))\n      h)))\n\n(defn- hash-iset [s]\n  ;; a la clojure.lang.APersistentSet\n  (loop [h 0 s (seq s)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (hash e)) 4503599627370496)\n               (next s)))\n      h)))\n\n(declare name chunk-first chunk-rest)\n\n(defn- extend-object!\n  \"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached.\"\n  [obj fn-map]\n  (doseq [[key-name f] fn-map]\n    (let [str-name (name key-name)]\n      (gobject\/set obj str-name f)))\n  obj)\n\n;;;;;;;;;;;;;;;; cons ;;;;;;;;;;;;;;;;\n(deftype List [meta first rest count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (List. meta first rest count __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (List. new-meta first rest count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll]\n    (if (== count 1)\n      ()\n      rest))\n\n  INext\n  (-next [coll]\n    (if (== count 1)\n      nil\n      rest))\n\n  IStack\n  (-peek [coll] first)\n  (-pop [coll] (-rest coll))\n\n  ICollection\n  (-conj [coll o] (List. meta o coll (inc count) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ICounted\n  (-count [coll] count)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(defn list?\n  \"Returns true if x implements IList\"\n  [x]\n  (satisfies? IList x))\n\n(es6-iterable List)\n\n(deftype EmptyList [meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (EmptyList. meta))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (EmptyList. new-meta)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] nil)\n  (-rest [coll] ())\n\n  INext\n  (-next [coll] nil)\n\n  IStack\n  (-peek [coll] nil)\n  (-pop [coll] (throw (js\/Error. \"Can't pop empty list\")))\n\n  ICollection\n  (-conj [coll o] (List. meta o nil 1 nil))\n\n  IEmptyableCollection\n  (-empty [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (or (list? other)\n            (sequential? other))\n      (nil? (seq other))\n      false))\n\n  IHash\n  (-hash [coll] empty-ordered-hash)\n\n  ISeqable\n  (-seq [coll] nil)\n\n  ICounted\n  (-count [coll] 0)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(set! (.-EMPTY List) (EmptyList. nil))\n\n(es6-iterable EmptyList)\n\n(defn reversible?\n  \"Returns true if coll satisfies? IReversible.\"\n  [coll]\n  (satisfies? IReversible coll))\n\n(defn ^seq rseq\n  \"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil\"\n  [rev]\n  (-rseq rev))\n\n(defn reverse\n  \"Returns a seq of the items in coll in reverse order. Not lazy.\"\n  [coll]\n  (if (reversible? coll)\n    (or (rseq coll) ())\n    (reduce conj () coll)))\n\n(defn list\n  \"Creates a new list containing the items.\"\n  [& xs]\n  (let [arr (if (and (instance? IndexedSeq xs) (zero? (.-i xs)))\n              (.-arr xs)\n              (let [arr (array)]\n                (loop [^not-native xs xs]\n                  (if-not (nil? xs)\n                    (do\n                      (.push arr (-first xs))\n                      (recur (-next xs)))\n                    arr))))]\n    (loop [i (alength arr) r ()]\n      (if (> i 0)\n        (recur (dec i) (-conj r (aget arr (dec i))))\n        r))))\n\n(deftype Cons [meta first rest ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (Cons. meta first rest __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cons. new-meta first rest __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll] (if (nil? rest) () rest))\n\n  INext\n  (-next [coll]\n    (if (nil? rest) nil (seq rest)))\n\n  ICollection\n  (-conj [coll o] (Cons. nil o coll nil))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable Cons)\n\n(defn cons\n  \"Returns a new seq where x is the first element and coll is the rest.\"\n  [x coll]\n  (cond\n    (nil? coll)             (List. nil x nil 1 nil)\n    (implements? ISeq coll) (Cons. nil x coll nil)\n    :default                (Cons. nil x (seq coll) nil)))\n\n(defn hash-keyword [k]\n  (int (+ (hash-symbol k) 0x9e3779b9)))\n\n(defn- compare-keywords [a b]\n  (cond\n   (identical? (.-fqn a) (.-fqn b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(deftype Keyword [ns name fqn ^:mutable _hash]\n  Object\n  (toString [_] (str \":\" fqn))\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Keyword other)\n      (identical? fqn (.-fqn other))\n      false))\n  IFn\n  (-invoke [kw coll]\n    (get coll kw))\n  (-invoke [kw coll not-found]\n    (get coll kw not-found))\n\n  IHash\n  (-hash [this]\n    (caching-hash this hash-keyword _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer (str \":\" fqn))))\n\n(defn keyword?\n  \"Return true if x is a Keyword\"\n  [x]\n  (instance? Keyword x))\n\n(defn keyword-identical?\n  \"Efficient test to determine that two keywords are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (keyword? x) (keyword? y))\n      (identical? (.-fqn x) (.-fqn y))\n      false)))\n\n(defn symbol-identical?\n  \"Efficient test to determine that two symbols are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (symbol? x) (symbol? y))\n      (identical? (.-str x) (.-str y))\n      false)))\n\n(defn namespace\n  \"Returns the namespace String of a symbol or keyword, or nil if not present.\"\n  [x]\n  (if (implements? INamed x)\n    (-namespace x)\n    (throw (js\/Error. (str \"Doesn't support namespace: \" x)))))\n\n(defn ident?\n  \"Return true if x is a symbol or keyword\"\n  [x] (or (keyword? x) (symbol? x)))\n\n(defn simple-ident?\n  \"Return true if x is a symbol or keyword without a namespace\"\n  [x] (and (ident? x) (nil? (namespace x))))\n\n(defn qualified-ident?\n  \"Return true if x is a symbol or keyword with a namespace\"\n  [x] (boolean (and (ident? x) (namespace x) true)))\n\n(defn simple-symbol?\n  \"Return true if x is a symbol without a namespace\"\n  [x] (and (symbol? x) (nil? (namespace x))))\n\n(defn qualified-symbol?\n  \"Return true if x is a symbol with a namespace\"\n  [x] (boolean (and (symbol? x) (namespace x) true)))\n\n(defn simple-keyword?\n  \"Return true if x is a keyword without a namespace\"\n  [x] (and (keyword? x) (nil? (namespace x))))\n\n(defn qualified-keyword?\n  \"Return true if x is a keyword with a namespace\"\n  [x] (boolean (and (keyword? x) (namespace x) true)))\n\n(defn keyword\n  \"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.\"\n  ([name] (cond\n            (keyword? name) name\n            (symbol? name) (Keyword.\n                             (cljs.core\/namespace name)\n                             (cljs.core\/name name) (.-str name) nil)\n            (= \"\/\" name) (Keyword. nil name name nil)\n            (string? name) (let [parts (.split name \"\/\")]\n                             (if (== (alength parts) 2)\n                               (Keyword. (aget parts 0) (aget parts 1) name nil)\n                               (Keyword. nil (aget parts 0) name nil)))))\n  ([ns name]\n   (let [ns   (cond\n                (keyword? ns) (cljs.core\/name ns)\n                (symbol? ns)  (cljs.core\/name ns)\n                :else ns)\n         name (cond\n                (keyword? name) (cljs.core\/name name)\n                (symbol? name) (cljs.core\/name name)\n                :else name)]\n     (Keyword. ns name (str (when ns (str ns \"\/\")) name) nil))))\n\n\n(deftype LazySeq [meta ^:mutable fn ^:mutable s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (sval [coll]\n    (if (nil? fn)\n      s\n      (do\n        (set! s (fn))\n        (set! fn nil)\n        s)))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll]\n    (not fn))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (LazySeq. new-meta #(-seq coll) nil __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (first s)))\n  (-rest [coll]\n    (-seq coll)\n    (if-not (nil? s)\n      (rest s)\n      ()))\n\n  INext\n  (-next [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (next s)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (.sval coll)\n    (when-not (nil? s)\n      (loop [ls s]\n        (if (instance? LazySeq ls)\n          (recur (.sval ls))\n          (do (set! s ls)\n            (seq s))))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable LazySeq)\n\n(declare ArrayChunk)\n\n(deftype ChunkBuffer [^:mutable buf ^:mutable end]\n  Object\n  (add [_ o]\n    (aset buf end o)\n    (set! end (inc end)))\n\n  (chunk [_]\n    (let [ret (ArrayChunk. buf 0 end)]\n      (set! buf nil)\n      ret))\n\n  ICounted\n  (-count [_] end))\n\n(defn chunk-buffer [capacity]\n  (ChunkBuffer. (make-array capacity) 0))\n\n(deftype ArrayChunk [arr off end]\n  ICounted\n  (-count [_] (- end off))\n\n  IIndexed\n  (-nth [coll i]\n    (aget arr (+ off i)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i (- end off)))\n      (aget arr (+ off i))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (== off end)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (ArrayChunk. arr (inc off) end)))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr off) (inc off)))\n  (-reduce [coll f start]\n    (array-reduce arr f start off)))\n\n(defn array-chunk\n  ([arr]\n     (ArrayChunk. arr 0 (alength arr)))\n  ([arr off]\n     (ArrayChunk. arr off (alength arr)))\n  ([arr off end]\n     (ArrayChunk. arr off end)))\n\n(deftype ChunkedCons [chunk more meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ChunkedCons. chunk more new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ASeq\n  ISeq\n  (-first [coll] (-nth chunk 0))\n  (-rest [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (if (nil? more)\n        ()\n        more)))\n\n  INext\n  (-next [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (when-not (nil? more)\n        (-seq more))))\n\n  IChunkedSeq\n  (-chunked-first [coll] chunk)\n  (-chunked-rest [coll]\n    (if (nil? more)\n      ()\n      more))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (if (nil? more)\n      nil\n      more))\n\n  ICollection\n  (-conj [this o]\n    (cons o this))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash)))\n\n(es6-iterable ChunkedCons)\n\n(defn chunk-cons [chunk rest]\n  (if (zero? (-count chunk))\n    rest\n    (ChunkedCons. chunk rest nil nil)))\n\n(defn chunk-append [b x]\n  (.add b x))\n\n(defn chunk [b]\n  (.chunk b))\n\n(defn chunk-first [s]\n  (-chunked-first s))\n\n(defn chunk-rest [s]\n  (-chunked-rest s))\n\n(defn chunk-next [s]\n  (if (implements? IChunkedNext s)\n    (-chunked-next s)\n    (seq (-chunked-rest s))))\n\n;;;;;;;;;;;;;;;;\n\n(defn to-array\n  \"Returns an array containing the contents of coll.\"\n  [coll]\n  (let [ary (array)]\n    (loop [s (seq coll)]\n      (if-not (nil? s)\n        (do (. ary push (first s))\n            (recur (next s)))\n        ary))))\n\n(defn to-array-2d\n  \"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.\"\n  [coll]\n    (let [ret (make-array (count coll))]\n      (loop [i 0 xs (seq coll)]\n        (when-not (nil? xs)\n          (aset ret i (to-array (first xs)))\n          (recur (inc i) (next xs))))\n      ret))\n\n(defn int-array\n  \"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (int-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn long-array\n  \"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (long-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn double-array\n  \"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (double-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn object-array\n  \"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (object-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn bounded-count\n  \"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq\"\n  {:added \"1.9\"}\n  [n coll]\n  (if (counted? coll)\n    (count coll)\n    (loop [i 0 s (seq coll)]\n      (if (and (not (nil? s)) (< i n))\n        (recur (inc i) (next s))\n        i))))\n\n(defn spread\n  [arglist]\n  (when-not (nil? arglist)\n    (let [n (next arglist)]\n      (if (nil? n)\n        (seq (first arglist))\n        (cons (first arglist)\n              (spread n))))))\n\n(defn concat\n  \"Returns a lazy seq representing the concatenation of the elements in the supplied colls.\"\n  ([] (lazy-seq nil))\n  ([x] (lazy-seq x))\n  ([x y]\n    (lazy-seq\n      (let [s (seq x)]\n        (if s\n          (if (chunked-seq? s)\n            (chunk-cons (chunk-first s) (concat (chunk-rest s) y))\n            (cons (first s) (concat (rest s) y)))\n          y))))\n  ([x y & zs]\n     (let [cat (fn cat [xys zs]\n                 (lazy-seq\n                   (let [xys (seq xys)]\n                     (if xys\n                       (if (chunked-seq? xys)\n                         (chunk-cons (chunk-first xys)\n                                     (cat (chunk-rest xys) zs))\n                         (cons (first xys) (cat (rest xys) zs)))\n                       (when zs\n                         (cat (first zs) (next zs)))))))]\n       (cat (concat x y) zs))))\n\n(defn list*\n  \"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.\"\n  ([args] (seq args))\n  ([a args] (cons a args))\n  ([a b args] (cons a (cons b args)))\n  ([a b c args] (cons a (cons b (cons c args))))\n  ([a b c d & more]\n     (cons a (cons b (cons c (cons d (spread more)))))))\n\n\n;;; Transients\n\n(defn transient\n  \"Returns a new, transient version of the collection, in constant time.\"\n  [coll]\n  (-as-transient coll))\n\n(defn persistent!\n  \"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.\"\n  [tcoll]\n  (-persistent! tcoll))\n\n(defn conj!\n  \"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.\"\n  ([] (transient []))\n  ([tcoll] tcoll)\n  ([tcoll val]\n    (-conj! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-conj! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n(defn assoc!\n  \"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.\"\n  ([tcoll key val]\n    (-assoc! tcoll key val))\n  ([tcoll key val & kvs]\n    (let [ntcoll (-assoc! tcoll key val)]\n      (if kvs\n        (recur ntcoll (first kvs) (second kvs) (nnext kvs))\n        ntcoll))))\n\n(defn dissoc!\n  \"Returns a transient map that doesn't contain a mapping for key(s).\"\n  ([tcoll key]\n    (-dissoc! tcoll key))\n  ([tcoll key & ks]\n    (let [ntcoll (-dissoc! tcoll key)]\n      (if ks\n        (recur ntcoll (first ks) (next ks))\n        ntcoll))))\n\n(defn pop!\n  \"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll\"\n  [tcoll]\n  (-pop! tcoll))\n\n(defn disj!\n  \"disj[oin]. Returns a transient set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([tcoll val]\n    (-disjoin! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-disjoin! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; apply ;;;;;;;;;;;;;;;;\n\n;; see core.clj\n(gen-apply-to)\n\n(set! *unchecked-if* true)\n\n(defn- ^seq next*\n  \"Internal. DO NOT USE! Next without the nil? check.\"\n  [coll]\n  (if (implements? INext coll)\n    (-next ^not-native coll)\n    (seq (rest coll))))\n\n(defn- apply-to-simple\n  \"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!\"\n  ([f ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$0 f)\n       (.cljs$core$IFn$_invoke$arity$0 f)\n       (.call f f))\n     (apply-to-simple f (-first args) (next* args))))\n  ([f a0 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$1 f)\n       (.cljs$core$IFn$_invoke$arity$1 f a0)\n       (.call f f a0))\n     (apply-to-simple f a0 (-first args) (next* args))))\n  ([f a0 a1 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$2 f)\n       (.cljs$core$IFn$_invoke$arity$2 f a0 a1)\n       (.call f f a0 a1))\n     (apply-to-simple f a0 a1 (-first args) (next* args))))\n  ([f a0 a1 a2 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$3 f)\n       (.cljs$core$IFn$_invoke$arity$3 f a0 a1 a2)\n       (.call f f a0 a1 a2))\n     (apply-to-simple f a0 a1 a2 (-first args) (next* args))))\n  ([f a0 a1 a2 a3 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$4 f)\n       (.cljs$core$IFn$_invoke$arity$4 f a0 a1 a2 a3)\n       (.call f f a0 a1 a2 a3))\n     (gen-apply-to-simple f 4 args))))\n\n(defn apply\n  \"Applies fn f to the argument list formed by prepending intervening arguments to args.\"\n  ([f args]\n   (if (.-cljs$lang$applyTo f)\n     (let [fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (bounded-count (inc fixed-arity) args)]\n       (if (<= bc fixed-arity)\n         (apply-to f bc args)\n         (.cljs$lang$applyTo f args)))\n     (apply-to-simple f (seq args))))\n  ([f x args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (inc (bounded-count fixed-arity args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x (seq args))))\n  ([f x y args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 2 (bounded-count (dec fixed-arity) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y (seq args))))\n  ([f x y z args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y z args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 3 (bounded-count (- fixed-arity 2) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y z (seq args))))\n  ([f a b c d & args]\n   (if (.-cljs$lang$applyTo f)\n     (let [spread-args (spread args)\n           arglist (cons a (cons b (cons c (cons d spread-args))))\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 4 (bounded-count (- fixed-arity 3) spread-args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f a b c d (spread args)))))\n\n(set! *unchecked-if* false)\n\n;; CLJS-3200: used by destructure macro for maps to reduce amount of repeated code\n;; placed here because it needs apply and hash-map (only declared at this point)\n(defn --destructure-map [gmap]\n  (if (implements? ISeq gmap)\n    (if (next gmap)\n      (.createAsIfByAssoc PersistentArrayMap (to-array gmap))\n      (if (seq gmap)\n        (first gmap)\n        (.-EMPTY PersistentArrayMap)))\n    gmap))\n\n(defn vary-meta\n \"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.\"\n  ([obj f]\n   (with-meta obj (f (meta obj))))\n  ([obj f a]\n   (with-meta obj (f (meta obj) a)))\n  ([obj f a b]\n   (with-meta obj (f (meta obj) a b)))\n  ([obj f a b c]\n   (with-meta obj (f (meta obj) a b c)))\n  ([obj f a b c d]\n   (with-meta obj (f (meta obj) a b c d)))\n  ([obj f a b c d & args]\n   (with-meta obj (apply f (meta obj) a b c d args))))\n\n(defn ^boolean not=\n  \"Same as (not (= obj1 obj2))\"\n  ([x] false)\n  ([x y] (not (= x y)))\n  ([x y & more]\n   (not (apply = x y more))))\n\n(defn not-empty\n  \"If coll is empty, returns nil, else coll\"\n  [coll] (when (seq coll) coll))\n\n(defn nil-iter []\n  (reify\n    Object\n    (hasNext [_] false)\n    (next [_] (js\/Error. \"No such element\"))\n    (remove [_] (js\/Error. \"Unsupported operation\"))))\n\n(deftype StringIter [s ^:mutable i]\n  Object\n  (hasNext [_] (< i (.-length s)))\n  (next [_]\n    (let [ret (.charAt s i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn string-iter [x]\n  (StringIter. x 0))\n\n(deftype ArrayIter [arr ^:mutable i]\n  Object\n  (hasNext [_] (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn array-iter [x]\n  (ArrayIter. x 0))\n\n(def INIT #js {})\n(def START #js {})\n\n(deftype SeqIter [^:mutable _seq ^:mutable _next]\n  Object\n  (hasNext [_]\n    (if (identical? _seq INIT)\n      (do\n        (set! _seq START)\n        (set! _next (seq _next)))\n      (if (identical? _seq _next)\n        (set! _next (next _seq))))\n    (not (nil? _next)))\n  (next [this]\n    (if-not ^boolean (.hasNext this)\n      (throw (js\/Error. \"No such element\"))\n      (do\n        (set! _seq _next)\n        (first _next))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn seq-iter [coll]\n  (SeqIter. INIT coll))\n\n(defn iter [coll]\n  (cond\n    (iterable? coll) (-iterator coll)\n    (nil? coll) (nil-iter)\n    (string? coll) (string-iter coll)\n    (array? coll) (array-iter coll)\n    (seqable? coll) (seq-iter coll)\n    :else (throw (js\/Error. (str \"Cannot create iterator from \" coll)))))\n\n(deftype Many [vals]\n  Object\n  (add [this o]\n    (.push vals o)\n    this)\n  (remove [this]\n    (.shift vals))\n  (isEmpty [this]\n    (zero? (.-length vals)))\n  (toString [this]\n    (str \"Many: \" vals)))\n\n(def ^:private NONE #js {})\n\n(deftype Single [^:mutable val]\n  Object\n  (add [this o]\n    (if (identical? val NONE)\n      (do\n        (set! val o)\n        this)\n      (Many. #js [val o])))\n  (remove [this]\n    (if (identical? val NONE)\n      (throw (js\/Error. (str \"Removing object from empty buffer\")))\n      (let [ret val]\n        (set! val NONE)\n        ret)))\n  (isEmpty [this]\n    (identical? val NONE))\n  (toString [this]\n    (str \"Single: \" val)))\n\n(deftype Empty []\n  Object\n  (add [this o]\n    (Single. o))\n  (remove [this]\n    (throw (js\/Error. (str \"Removing object from empty buffer\"))))\n  (isEmpty [this]\n    true)\n  (toString [this]\n    \"Empty\"))\n\n(def ^:private EMPTY (Empty.))\n\n(deftype MultiIterator [iters]\n  Object\n  (hasNext [_]\n    (loop [iters (seq iters)]\n      (if-not (nil? iters)\n        (let [iter (first iters)]\n          (if-not ^boolean (.hasNext iter)\n            false\n            (recur (next iters))))\n        true)))\n  (next [_]\n    (let [nexts (array)]\n      (dotimes [i (alength iters)]\n        (aset nexts i (.next (aget iters i))))\n      (prim-seq nexts 0))))\n\n(defn- chunkIteratorSeq [iter]\n  (lazy-seq\n    (when ^boolean (.hasNext iter)\n      (let [arr (array)]\n        (loop [n 0]\n          (if (and (.hasNext iter) (< n 32))\n            (do\n              (aset arr n (.next iter))\n              (recur (inc n)))\n            (chunk-cons (array-chunk arr 0 n) (chunkIteratorSeq iter))))))))\n\n(deftype TransformerIterator [^:mutable buffer ^:mutable _next ^:mutable completed ^:mutable xf sourceIter multi]\n  Object\n  (step [this]\n    (if-not (identical? _next NONE)\n      true\n      (loop []\n        (if (identical? _next NONE)\n          (if ^boolean (.isEmpty buffer)\n            (if ^boolean completed\n              false\n              (if ^boolean (.hasNext sourceIter)\n                (let [iter (if ^boolean multi\n                             (apply xf (cons nil (.next sourceIter)))\n                             (xf nil (.next sourceIter)))]\n                  (when (reduced? iter)\n                    (xf nil)\n                    (set! completed true))\n                  (recur))\n                (do\n                  (xf nil)\n                  (set! completed true)\n                  (recur))))\n            (do\n              (set! _next (.remove buffer))\n              (recur)))\n          true))))\n  (hasNext [this]\n    (.step this))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (let [ret _next]\n        (set! _next NONE)\n        ret)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_]\n    (js\/Error. \"Unsupported operation\")))\n\n(es6-iterable TransformerIterator)\n\n(defn transformer-iterator\n  [xform sourceIter multi]\n  (let [iterator (TransformerIterator. EMPTY NONE false nil sourceIter multi)]\n    (set! (.-xf iterator)\n      (xform (fn\n               ([] nil)\n               ([acc] acc)\n               ([acc o]\n                (set! (.-buffer iterator) (.add (.-buffer iterator) o))\n                acc))))\n    iterator))\n\n(set! (.-create TransformerIterator)\n  (fn [xform source]\n    (transformer-iterator xform source false)))\n\n(set! (.-createMulti TransformerIterator)\n  (fn [xform sources]\n    (transformer-iterator xform (MultiIterator. (to-array sources)) true)))\n\n(defn sequence\n  \"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments\"\n  ([coll]\n     (if (seq? coll)\n       coll\n       (or (seq coll) ())))\n  ([xform coll]\n   (or (chunkIteratorSeq\n         (.create TransformerIterator xform (iter coll)))\n       ()))\n  ([xform coll & colls]\n   (or (chunkIteratorSeq\n         (.createMulti TransformerIterator xform (map iter (cons coll colls))))\n       ())))\n\n(defn every?\n  \"Returns true if (pred x) is logical true for every x in coll, else\n  false.\"\n  [pred coll]\n  (cond\n   (nil? (seq coll)) true\n   (pred (first coll)) (recur pred (next coll))\n   :else false))\n\n(defn not-every?\n  \"Returns false if (pred x) is logical true for every x in\n  coll, else true.\"\n  [pred coll] (not (every? pred coll)))\n\n(defn some\n  \"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)\"\n  [pred coll]\n  (when-let [s (seq coll)]\n    (or (pred (first s)) (recur pred (next s)))))\n\n(defn not-any?\n  \"Returns false if (pred x) is logical true for any x in coll,\n  else true.\"\n  [pred coll] (not (some pred coll)))\n\n(defn even?\n  \"Returns true if n is even, throws an exception if n is not an integer\"\n   [n] (if (integer? n)\n        (zero? (bit-and n 1))\n        (throw (js\/Error. (str \"Argument must be an integer: \" n)))))\n\n(defn odd?\n  \"Returns true if n is odd, throws an exception if n is not an integer\"\n  [n] (not (even? n)))\n\n(defn complement\n  \"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.\"\n  [f]\n  (fn\n    ([] (not (f)))\n    ([x] (not (f x)))\n    ([x y] (not (f x y)))\n    ([x y & zs] (not (apply f x y zs)))))\n\n(defn constantly\n  \"Returns a function that takes any number of arguments and returns x.\"\n  [x] (fn [& args] x))\n\n(defn comp\n  \"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.\"\n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))\n\n(defn partial\n  \"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.\"\n  ([f] f)\n  ([f arg1]\n   (fn\n     ([] (f arg1))\n     ([x] (f arg1 x))\n     ([x y] (f arg1 x y))\n     ([x y z] (f arg1 x y z))\n     ([x y z & args] (apply f arg1 x y z args))))\n  ([f arg1 arg2]\n   (fn\n     ([] (f arg1 arg2))\n     ([x] (f arg1 arg2 x))\n     ([x y] (f arg1 arg2 x y))\n     ([x y z] (f arg1 arg2 x y z))\n     ([x y z & args] (apply f arg1 arg2 x y z args))))\n  ([f arg1 arg2 arg3]\n   (fn\n     ([] (f arg1 arg2 arg3))\n     ([x] (f arg1 arg2 arg3 x))\n     ([x y] (f arg1 arg2 arg3 x y))\n     ([x y z] (f arg1 arg2 arg3 x y z))\n     ([x y z & args] (apply f arg1 arg2 arg3 x y z args))))\n  ([f arg1 arg2 arg3 & more]\n   (fn [& args] (apply f arg1 arg2 arg3 (concat more args)))))\n\n(defn fnil\n  \"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.\"\n  ([f x]\n   (fn\n     ([a] (f (if (nil? a) x a)))\n     ([a b] (f (if (nil? a) x a) b))\n     ([a b c] (f (if (nil? a) x a) b c))\n     ([a b c & ds] (apply f (if (nil? a) x a) b c ds))))\n  ([f x y]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) c))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) c ds))))\n  ([f x y z]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c)))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c) ds)))))\n\n(declare volatile!)\n\n(defn map-indexed\n  \"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (let [i (volatile! -1)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (rf result (f (vswap! i inc) input)))))))\n  ([f coll]\n    (letfn [(mapi [idx coll]\n              (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (chunk-append b (f (+ idx i) (-nth c i))))\n                      (chunk-cons (chunk b) (mapi (+ idx size) (chunk-rest s))))\n                    (cons (f idx (first s)) (mapi (inc idx) (rest s)))))))]\n      (mapi 0 coll))))\n\n(defn keep\n  \"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.\"\n  ([f]\n   (fn [rf]\n     (fn\n       ([] (rf))\n       ([result] (rf result))\n       ([result input]\n          (let [v (f input)]\n            (if (nil? v)\n              result\n              (rf result v)))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n            (let [x (f (-nth c i))]\n              (when-not (nil? x)\n                (chunk-append b x))))\n          (chunk-cons (chunk b) (keep f (chunk-rest s))))\n        (let [x (f (first s))]\n          (if (nil? x)\n            (keep f (rest s))\n            (cons x (keep f (rest s))))))))))\n\n;; =============================================================================\n;; Atom\n\n(deftype Atom [state meta validator watches]\n  Object\n  (equiv [this other]\n    (-equiv this other))\n\n  IAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [_] state)\n\n  IMeta\n  (-meta [_] meta)\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [[key f] watches]\n      (f key this oldval newval)))\n  (-add-watch [this key f]\n    (set! (.-watches this) (assoc watches key f))\n    this)\n  (-remove-watch [this key]\n    (set! (.-watches this) (dissoc watches key)))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn atom\n  \"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.\"\n  ([x] (Atom. x nil nil nil))\n  ([x & {:keys [meta validator]}] (Atom. x meta validator nil)))\n\n(declare pr-str)\n\n(defn reset!\n  \"Sets the value of atom to newval without regard for the\n  current value. Returns new-value.\"\n  [a new-value]\n  (if (instance? Atom a)\n    (let [validate (.-validator a)]\n      (when-not (nil? validate)\n        (when-not (validate new-value)\n          (throw (js\/Error. \"Validator rejected reference state\"))))\n      (let [old-value (.-state a)]\n        (set! (.-state a) new-value)\n        (when-not (nil? (.-watches a))\n          (-notify-watches a old-value new-value))\n        new-value))\n    (-reset! a new-value)))\n\n(defn reset-vals!\n  \"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.\"\n  {:added \"1.9\"}\n  [a new-value]\n  (let [validate (.-validator a)]\n    (when-not (nil? validate)\n      (when-not (validate new-value)\n        (throw (js\/Error. \"Validator rejected reference state\"))))\n    (let [old-value (.-state a)]\n      (set! (.-state a) new-value)\n      (when-not (nil? (.-watches a))\n        (-notify-watches a old-value new-value))\n      [old-value new-value])))\n\n(defn swap!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.\"\n  ([a f]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a)))\n     (-swap! a f)))\n  ([a f x]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x))\n     (-swap! a f x)))\n  ([a f x y]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x y))\n     (-swap! a f x y)))\n  ([a f x y & more]\n   (if (instance? Atom a)\n     (reset! a (apply f (.-state a) x y more))\n     (-swap! a f x y more))))\n\n(defn swap-vals!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.\"\n  {:added \"1.9\"}\n  ([a f]\n   (reset-vals! a (f (.-state a))))\n  ([a f x]\n   (reset-vals! a (f (.-state a) x)))\n  ([a f x y]\n   (reset-vals! a (f (.-state a) x y)))\n  ([a f x y & more]\n   (reset-vals! a (apply f (.-state a) x y more))))\n\n(defn compare-and-set!\n  \"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false.\"\n  [^not-native a oldval newval]\n  (if (= (-deref a) oldval)\n    (do (reset! a newval) true)\n    false))\n\n(defn set-validator!\n  \"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.\"\n  [iref val]\n  (when (and (some? val)\n             (not (val (-deref iref))))\n    (throw (js\/Error. \"Validator rejected reference state\")))\n  (set! (.-validator iref) val))\n\n(defn get-validator\n  \"Gets the validator-fn for a var\/ref\/agent\/atom.\"\n  [iref]\n  (.-validator iref))\n\n(deftype Volatile [^:mutable state]\n  IVolatile\n  (-vreset! [_ new-state]\n    (set! state new-state))\n\n  IDeref\n  (-deref [_] state))\n\n(defn volatile!\n  \"Creates and returns a Volatile with an initial value of val.\"\n  [val]\n  (Volatile. val))\n\n(defn volatile?\n  \"Returns true if x is a volatile.\"\n  [x] (instance? Volatile x))\n\n(defn vreset!\n  \"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.\"\n  [vol newval]  (-vreset! vol newval))\n\n(defn keep-indexed\n  \"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.\"\n  ([f]\n   (fn [rf]\n     (let [ia (volatile! -1)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [i (vswap! ia inc)\n                  v (f i input)]\n              (if (nil? v)\n                result\n                (rf result v))))))))\n  ([f coll]\n     (letfn [(keepi [idx coll]\n               (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (let [x (f (+ idx i) (-nth c i))]\n                          (when-not (nil? x)\n                            (chunk-append b x))))\n                      (chunk-cons (chunk b) (keepi (+ idx size) (chunk-rest s))))\n                    (let [x (f idx (first s))]\n                      (if (nil? x)\n                        (keepi (inc idx) (rest s))\n                        (cons x (keepi (inc idx) (rest s)))))))))]\n       (keepi 0 coll))))\n\n(defn every-pred\n  \"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.\"\n  ([p]\n     (fn ep1\n       ([] true)\n       ([x] (boolean (p x)))\n       ([x y] (boolean (and (p x) (p y))))\n       ([x y z] (boolean (and (p x) (p y) (p z))))\n       ([x y z & args] (boolean (and (ep1 x y z)\n                                     (every? p args))))))\n  ([p1 p2]\n     (fn ep2\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x))))\n       ([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y))))\n       ([x y z] (boolean (and (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z))))\n       ([x y z & args] (boolean (and (ep2 x y z)\n                                     (every? #(and (p1 %) (p2 %)) args))))))\n  ([p1 p2 p3]\n     (fn ep3\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x) (p3 x))))\n       ([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y) (p3 x) (p3 y))))\n       ([x y z] (boolean (and (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z) (p3 x) (p3 y) (p3 z))))\n       ([x y z & args] (boolean (and (ep3 x y z)\n                                     (every? #(and (p1 %) (p2 %) (p3 %)) args))))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn epn\n         ([] true)\n         ([x] (every? #(% x) ps))\n         ([x y] (every? #(and (% x) (% y)) ps))\n         ([x y z] (every? #(and (% x) (% y) (% z)) ps))\n         ([x y z & args] (boolean (and (epn x y z)\n                                       (every? #(every? % args) ps))))))))\n\n(defn some-fn\n  \"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.\"\n  ([p]\n     (fn sp1\n       ([] nil)\n       ([x] (p x))\n       ([x y] (or (p x) (p y)))\n       ([x y z] (or (p x) (p y) (p z)))\n       ([x y z & args] (or (sp1 x y z)\n                           (some p args)))))\n  ([p1 p2]\n     (fn sp2\n       ([] nil)\n       ([x] (or (p1 x) (p2 x)))\n       ([x y] (or (p1 x) (p1 y) (p2 x) (p2 y)))\n       ([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z)))\n       ([x y z & args] (or (sp2 x y z)\n                           (some #(or (p1 %) (p2 %)) args)))))\n  ([p1 p2 p3]\n     (fn sp3\n       ([] nil)\n       ([x] (or (p1 x) (p2 x) (p3 x)))\n       ([x y] (or (p1 x) (p1 y) (p2 x) (p2 y) (p3 x) (p3 y)))\n       ([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z) (p3 x) (p3 y) (p3 z)))\n       ([x y z & args] (or (sp3 x y z)\n                           (some #(or (p1 %) (p2 %) (p3 %)) args)))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn spn\n         ([] nil)\n         ([x] (some #(% x) ps))\n         ([x y] (some #(or (% x) (% y)) ps))\n         ([x y z] (some #(or (% x) (% y) (% z)) ps))\n         ([x y z & args] (or (spn x y z)\n                             (some #(some % args) ps)))))))\n\n(defn map\n  \"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (rf result (f input)))\n        ([result input & inputs]\n           (rf result (apply f input inputs))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (chunk-append b (f (-nth c i))))\n          (chunk-cons (chunk b) (map f (chunk-rest s))))\n        (cons (f (first s)) (map f (rest s)))))))\n  ([f c1 c2]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (f (first s1) (first s2))\n              (map f (rest s1) (rest s2)))))))\n  ([f c1 c2 c3]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]\n      (when (and  s1 s2 s3)\n        (cons (f (first s1) (first s2) (first s3))\n              (map f (rest s1) (rest s2) (rest s3)))))))\n  ([f c1 c2 c3 & colls]\n   (let [step (fn step [cs]\n                 (lazy-seq\n                  (let [ss (map seq cs)]\n                    (when (every? identity ss)\n                      (cons (map first ss) (step (map rest ss)))))))]\n     (map #(apply f %) (step (conj colls c3 c2 c1))))))\n\n(defn take\n  \"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na\n                    nn (vswap! na dec)\n                    result (if (pos? n)\n                             (rf result input)\n                             result)]\n                (if (not (pos? nn))\n                  (ensure-reduced result)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when (pos? n)\n         (when-let [s (seq coll)]\n           (cons (first s) (take (dec n) (rest s))))))))\n\n(defn drop\n  \"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na]\n                (vswap! na dec)\n                (if (pos? n)\n                  result\n                  (rf result input))))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (let [step (fn [n coll]\n                  (let [s (seq coll)]\n                    (if (and (pos? n) s)\n                      (recur (dec n) (rest s))\n                      s)))]\n       (lazy-seq (step n coll)))))\n\n(defn drop-last\n  \"Return a lazy sequence of all but the last n (default 1) items in coll\"\n  ([s] (drop-last 1 s))\n  ([n s] (map (fn [x _] x) s (drop n s))))\n\n(defn take-last\n  \"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.\"\n  [n coll]\n  (loop [s (seq coll), lead (seq (drop n coll))]\n    (if lead\n      (recur (next s) (next lead))\n      s)))\n\n(defn drop-while\n  \"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (let [da (volatile! true)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [drop? @da]\n                (if (and drop? (pred input))\n                  result\n                  (do\n                    (vreset! da nil)\n                    (rf result input)))))))))\n  ([pred coll]\n     (let [step (fn [pred coll]\n                  (let [s (seq coll)]\n                    (if (and s (pred (first s)))\n                      (recur pred (rest s))\n                      s)))]\n       (lazy-seq (step pred coll)))))\n\n(deftype Cycle [meta all prev ^:mutable current ^:mutable _next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (currentval [coll]\n    (when-not ^seq current\n      (if-let [c (next prev)]\n        (set! current c)\n        (set! current all)))\n    current)\n\n  IPending\n  (-realized? [coll]\n    (some? current))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cycle. new-meta all prev current _next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (first (.currentval coll)))\n  (-rest [coll]\n    (when (nil? _next)\n      (set! _next (Cycle. nil all (.currentval coll) nil nil)))\n    _next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f]\n    (loop [s (.currentval coll) ret (first s)]\n      (let [s   (or (next s) all)\n            ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur s ret)))))\n  (-reduce [coll f start]\n    (loop [s (.currentval coll) ret start]\n      (let [ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur (or (next s) all) ret))))))\n\n(defn cycle\n  \"Returns a lazy (infinite!) sequence of repetitions of the items in coll.\"\n  [coll] (if-let [vals (seq coll)]\n           (Cycle. nil vals nil vals nil)\n           (.-EMPTY List)))\n\n(defn split-at\n  \"Returns a vector of [(take n coll) (drop n coll)]\"\n  [n coll]\n  [(take n coll) (drop n coll)])\n\n(deftype Repeat [meta count val ^:mutable next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll] false)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Repeat. new-meta count val next nil)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    val)\n  (-rest [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          ()))\n      next))\n\n  INext\n  (-next [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          nil))\n      next))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IReduce\n  (-reduce [coll f]\n    (if (== count -1)\n      (loop [ret (f val val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 1 ret val]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret))))\n  (-reduce [coll f start]\n    (if (== count -1)\n      (loop [ret (f start val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 0 ret start]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret)))))\n\n(defn repeat\n  \"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"\n  ([x] (Repeat. nil -1 x nil nil))\n  ([n x] (if (pos? n)\n           (Repeat. nil n x nil nil)\n           (.-EMPTY List))))\n\n(defn replicate\n  \"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs.\"\n  [n x] (take n (repeat x)))\n\n(defn repeatedly\n  \"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it\"\n  ([f] (lazy-seq (cons (f) (repeatedly f))))\n  ([n f] (take n (repeatedly f))))\n\n(def ^:private UNREALIZED-SEED #js {})\n\n(deftype Iterate [meta f prev-seed ^:mutable seed ^:mutable next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IPending\n  (-realized? [coll]\n    (not (identical? seed UNREALIZED-SEED)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Iterate. new-meta f prev-seed seed next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (when (identical? UNREALIZED-SEED seed)\n      (set! seed (f prev-seed)))\n    seed)\n  (-rest [coll]\n    (when (nil? next)\n      (set! next (Iterate. nil f (-first coll) UNREALIZED-SEED nil)))\n    next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll rf]\n    (let [first (-first coll)\n          v     (f first)]\n      (loop [ret (rf first v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v))))))\n  (-reduce [coll rf start]\n    (let [v (-first coll)]\n      (loop [ret (rf start v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v)))))))\n\n(defn iterate\n  \"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\"\n  {:added \"1.0\"}\n  [f x] (Iterate. nil f nil x nil))\n\n(defn interleave\n  \"Returns a lazy seq of the first item in each coll, then the second etc.\"\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (interleave (rest s1) (rest s2))))))))\n  ([c1 c2 & colls]\n     (lazy-seq\n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply interleave (map rest ss))))))))\n\n(defn interpose\n  \"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.\"\n  ([sep]\n    (fn [rf]\n      (let [started (volatile! false)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if @started\n              (let [sepr (rf result sep)]\n                (if (reduced? sepr)\n                  sepr\n                  (rf sepr input)))\n              (do\n                (vreset! started true)\n                (rf result input))))))))\n  ([sep coll] (drop 1 (interleave (repeat sep) coll))))\n\n\n\n(defn- flatten1\n  \"Take a collection of collections, and return a lazy seq\n  of items from the inner collection\"\n  [colls]\n  (let [cat (fn cat [coll colls]\n              (lazy-seq\n                (if-let [coll (seq coll)]\n                  (cons (first coll) (cat (rest coll) colls))\n                  (when (seq colls)\n                    (cat (first colls) (rest colls))))))]\n    (cat nil colls)))\n\n(declare cat)\n\n(defn mapcat\n  \"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided\"\n  {:added \"1.0\"\n   :static true}\n  ([f] (comp (map f) cat))\n  ([f & colls]\n     (apply concat (apply map f colls))))\n\n(defn filter\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (if (pred input)\n             (rf result input)\n             result)))))\n  ([pred coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (when (pred (-nth c i))\n                (chunk-append b (-nth c i))))\n          (chunk-cons (chunk b) (filter pred (chunk-rest s))))\n        (let [f (first s) r (rest s)]\n          (if (pred f)\n            (cons f (filter pred r))\n            (filter pred r))))))))\n\n(defn remove\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred] (filter (complement pred)))\n  ([pred coll]\n     (filter (complement pred) coll)))\n\n(defn tree-seq\n  \"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree.\"\n   [branch? children root]\n   (let [walk (fn walk [node]\n                (lazy-seq\n                 (cons node\n                  (when (branch? node)\n                    (mapcat walk (children node))))))]\n     (walk root)))\n\n(defn flatten\n  \"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.\"\n  [x]\n  (filter #(not (sequential? %))\n          (rest (tree-seq sequential? seq x))))\n\n(defn into\n  \"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.\"\n  ([] [])\n  ([to] to)\n  ([to from]\n     (if-not (nil? to)\n       (if (implements? IEditableCollection to)\n         (-with-meta (persistent! (reduce -conj! (transient to) from)) (meta to))\n         (reduce -conj to from))\n       (reduce conj to from)))\n  ([to xform from]\n     (if (implements? IEditableCollection to)\n       (let [tm (meta to)\n             rf (fn\n                  ([coll] (-> (persistent! coll) (-with-meta tm)))\n                  ([coll v] (conj! coll v)))]\n         (transduce xform rf (transient to) from))\n       (transduce xform conj to from))))\n\n(defn mapv\n  \"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.\"\n  ([f coll]\n     (-> (reduce (fn [v o] (conj! v (f o))) (transient []) coll)\n         persistent!))\n  ([f c1 c2]\n     (into [] (map f c1 c2)))\n  ([f c1 c2 c3]\n     (into [] (map f c1 c2 c3)))\n  ([f c1 c2 c3 & colls]\n     (into [] (apply map f c1 c2 c3 colls))))\n\n(defn filterv\n  \"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\"\n  [pred coll]\n  (-> (reduce (fn [v o] (if (pred o) (conj! v o) v))\n              (transient [])\n              coll)\n      persistent!))\n\n(defn partition\n  \"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.\"\n  ([n coll]\n     (partition n n coll))\n  ([n step coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (when (== n (count p))\n             (cons p (partition n step (drop step s))))))))\n  ([n step pad coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (if (== n (count p))\n             (cons p (partition n step pad (drop step s)))\n             (list (take n (concat p pad)))))))))\n\n(defn get-in\n  \"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.\"\n  {:added \"1.2\"\n   :static true}\n  ([m ks]\n     (reduce get m ks))\n  ([m ks not-found]\n     (loop [sentinel lookup-sentinel\n            m m\n            ks (seq ks)]\n       (if-not (nil? ks)\n         (let [m (get m (first ks) sentinel)]\n           (if (identical? sentinel m)\n             not-found\n             (recur sentinel m (next ks))))\n         m))))\n\n(defn assoc-in\n  \"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.\"\n  [m [k & ks] v]\n  (if ks\n    (assoc m k (assoc-in (get m k) ks v))\n    (assoc m k v)))\n\n(defn update-in\n  \"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.\"\n  ([m [k & ks] f]\n   (if ks\n     (assoc m k (update-in (get m k) ks f))\n     (assoc m k (f (get m k)))))\n  ([m [k & ks] f a]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a))\n     (assoc m k (f (get m k) a))))\n  ([m [k & ks] f a b]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b))\n     (assoc m k (f (get m k) a b))))\n  ([m [k & ks] f a b c]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b c))\n     (assoc m k (f (get m k) a b c))))\n  ([m [k & ks] f a b c & args]\n   (if ks\n     (assoc m k (apply update-in (get m k) ks f a b c args))\n     (assoc m k (apply f (get m k) a b c args)))))\n\n(defn update\n  \"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.\"\n  ([m k f]\n   (assoc m k (f (get m k))))\n  ([m k f x]\n   (assoc m k (f (get m k) x)))\n  ([m k f x y]\n   (assoc m k (f (get m k) x y)))\n  ([m k f x y z]\n   (assoc m k (f (get m k) x y z)))\n  ([m k f x y z & more]\n   (assoc m k (apply f (get m k) x y z more))))\n\n;;; PersistentVector\n\n(deftype VectorNode [edit arr])\n\n(defn- pv-fresh-node [edit]\n  (VectorNode. edit (make-array 32)))\n\n(defn- pv-aget [node idx]\n  (aget (.-arr node) idx))\n\n(defn- pv-aset [node idx val]\n  (aset (.-arr node) idx val))\n\n(defn- pv-clone-node [node]\n  (VectorNode. (.-edit node) (aclone (.-arr node))))\n\n(defn- tail-off [pv]\n  (let [cnt (.-cnt pv)]\n    (if (< cnt 32)\n      0\n      (bit-shift-left (bit-shift-right-zero-fill (dec cnt) 5) 5))))\n\n(defn- new-path [edit level node]\n  (loop [ll level\n         ret node]\n    (if (zero? ll)\n      ret\n      (let [embed ret\n            r (pv-fresh-node edit)\n            _ (pv-aset r 0 embed)]\n        (recur (- ll 5) r)))))\n\n(defn- push-tail [pv level parent tailnode]\n  (let [ret (pv-clone-node parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt pv)) level) 0x01f)]\n    (if (== 5 level)\n      (do\n        (pv-aset ret subidx tailnode)\n        ret)\n      (let [child (pv-aget parent subidx)]\n        (if-not (nil? child)\n          (let [node-to-insert (push-tail pv (- level 5) child tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret)\n          (let [node-to-insert (new-path nil (- level 5) tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret))))))\n\n(defn- vector-index-out-of-bounds [i cnt]\n  (throw (js\/Error. (str \"No item \" i \" in vector of length \" cnt))))\n\n(defn- first-array-for-longvec [pv]\n  ;; invariants: (count pv) > 32.\n  (loop [node (.-root pv)\n         level (.-shift pv)]\n    (if (pos? level)\n      (recur (pv-aget node 0) (- level 5))\n      (.-arr node))))\n\n(defn- unchecked-array-for [pv i]\n  ;; invariant: i is a valid index of pv (use array-for if unknown).\n  (if (>= i (tail-off pv))\n      (.-tail pv)\n      (loop [node (.-root pv)\n             level (.-shift pv)]\n        (if (pos? level)\n          (recur (pv-aget node (bit-and (bit-shift-right-zero-fill i level) 0x01f))\n                 (- level 5))\n          (.-arr node)))))\n\n(defn- array-for [pv i]\n  (if (and (<= 0 i) (< i (.-cnt pv)))\n    (unchecked-array-for pv i)\n    (vector-index-out-of-bounds i (.-cnt pv))))\n\n(defn- do-assoc [pv level node i val]\n  (let [ret (pv-clone-node node)]\n    (if (zero? level)\n      (do\n        (pv-aset ret (bit-and i 0x01f) val)\n        ret)\n      (let [subidx (bit-and (bit-shift-right-zero-fill i level) 0x01f)]\n        (pv-aset ret subidx (do-assoc pv (- level 5) (pv-aget node subidx) i val))\n        ret))))\n\n(defn- pop-tail [pv level node]\n  (let [subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt pv) 2) level) 0x01f)]\n    (cond\n     (> level 5) (let [new-child (pop-tail pv (- level 5) (pv-aget node subidx))]\n                   (if (and (nil? new-child) (zero? subidx))\n                     nil\n                     (let [ret (pv-clone-node node)]\n                       (pv-aset ret subidx new-child)\n                       ret)))\n     (zero? subidx) nil\n     :else (let [ret (pv-clone-node node)]\n             (pv-aset ret subidx nil)\n             ret))))\n\n(deftype RangedIterator [^:mutable i ^:mutable base ^:mutable arr v start end]\n  Object\n  (hasNext [this]\n    (< i end))\n  (next [this]\n    (when (== (- i base) 32)\n      (set! arr (unchecked-array-for v i))\n      (set! base (+ base 32)))\n    (let [ret (aget arr (bit-and i 0x01f))]\n      (set! i (inc i))\n      ret)))\n\n(defn ranged-iterator [v start end]\n  (let [i start]\n    (RangedIterator. i (- i (js-mod i 32))\n      (when (< start (count v))\n        (unchecked-array-for v i))\n      v start end)))\n\n(defn- pv-reduce\n  ([pv f start end]\n   (if (< start end)\n     (pv-reduce pv f (nth pv start) (inc start) end)\n     (f)))\n  ([pv f init start end]\n   (loop [acc init i start arr (unchecked-array-for pv start)]\n     (if (< i end)\n       (let [j (bit-and i 0x01f)\n             arr (if (zero? j) (unchecked-array-for pv i) arr)\n             nacc (f acc (aget arr j))]\n         (if (reduced? nacc)\n           @nacc\n           (recur nacc (inc i) arr)))\n       acc))))\n\n(declare tv-editable-root tv-editable-tail TransientVector deref\n         pr-sequential-writer pr-writer chunked-seq)\n\n(defprotocol APersistentVector\n  \"Marker protocol\")\n\n(deftype PersistentVector [meta cnt shift root tail ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (PersistentVector. meta cnt shift root tail __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentVector. new-meta cnt shift root tail __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when (> cnt 0)\n      (-nth coll (dec cnt))))\n  (-pop [coll]\n    (cond\n     (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n     (== 1 cnt) (-with-meta (.-EMPTY PersistentVector) meta)\n     (< 1 (- cnt (tail-off coll)))\n      (PersistentVector. meta (dec cnt) shift root (.slice tail 0 -1) nil)\n      :else (let [new-tail (unchecked-array-for coll (- cnt 2))\n                  nr (pop-tail coll shift root)\n                  new-root (if (nil? nr) (.-EMPTY-NODE PersistentVector) nr)\n                  cnt-1 (dec cnt)]\n              (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n                (PersistentVector. meta cnt-1 (- shift 5) (pv-aget new-root 0) new-tail nil)\n                (PersistentVector. meta cnt-1 shift new-root new-tail nil)))))\n\n  ICollection\n  (-conj [coll o]\n    (if (< (- cnt (tail-off coll)) 32)\n      (let [len (alength tail)\n            new-tail (make-array (inc len))]\n        (dotimes [i len]\n          (aset new-tail i (aget tail i)))\n        (aset new-tail len o)\n        (PersistentVector. meta (inc cnt) shift root new-tail nil))\n      (let [root-overflow? (> (bit-shift-right-zero-fill cnt 5) (bit-shift-left 1 shift))\n            new-shift (if root-overflow? (+ shift 5) shift)\n            new-root (if root-overflow?\n                       (let [n-r (pv-fresh-node nil)]\n                           (pv-aset n-r 0 root)\n                           (pv-aset n-r 1 (new-path nil shift (VectorNode. nil tail)))\n                           n-r)\n                       (push-tail coll shift root (VectorNode. nil tail)))]\n        (PersistentVector. meta (inc cnt) new-shift new-root (array o) nil))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (instance? PersistentVector other)\n      (if (== cnt (count other))\n        (let [me-iter  (-iterator coll)\n              you-iter (-iterator other)]\n          (loop []\n            (if ^boolean (.hasNext me-iter)\n              (let [x (.next me-iter)\n                    y (.next you-iter)]\n                (if (= x y)\n                  (recur)\n                  false))\n              true)))\n        false)\n      (equiv-sequential coll other)))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (cond\n      (zero? cnt) nil\n      (<= cnt 32) (IndexedSeq. tail 0 nil)\n      :else (chunked-seq coll (first-array-for-longvec coll) 0 0)))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IIndexed\n  (-nth [coll n]\n    (aget (array-for coll n) (bit-and n 0x01f)))\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (aget (unchecked-array-for coll n) (bit-and n 0x01f))\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (number? k)\n      (-assoc-n coll k v)\n      (throw (js\/Error. \"Vector's key for assoc must be a number.\"))))\n  (-contains-key? [coll k]\n    (if (integer? k)\n      (and (<= 0 k) (< k cnt))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when (and (<= 0 n) (< n cnt))\n      (MapEntry. n (aget (unchecked-array-for coll n) (bit-and n 0x01f)) nil)))\n\n  APersistentVector\n  IVector\n  (-assoc-n [coll n val]\n    (cond\n       (and (<= 0 n) (< n cnt))\n       (if (<= (tail-off coll) n)\n         (let [new-tail (aclone tail)]\n           (aset new-tail (bit-and n 0x01f) val)\n           (PersistentVector. meta cnt shift root new-tail nil))\n         (PersistentVector. meta cnt shift (do-assoc coll shift root n val) tail nil))\n       (== n cnt) (-conj coll val)\n       :else (throw (js\/Error. (str \"Index \" n \" out of bounds  [0,\" cnt \"]\")))))\n\n  IReduce\n  (-reduce [v f]\n    (pv-reduce v f 0 cnt))\n  (-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IKVReduce\n  (-kv-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (+ j i) (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (if (number? k)\n      (-nth coll k)\n      (throw (js\/Error. \"Key must be integer\"))))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientVector. cnt shift (tv-editable-root root) (tv-editable-tail tail)))\n\n  IReversible\n  (-rseq [coll]\n    (when (pos? cnt)\n      (RSeq. coll (dec cnt) nil)))\n\n  IIterable\n  (-iterator [this]\n    (ranged-iterator this 0 cnt)))\n\n(set! (.-EMPTY-NODE PersistentVector) (VectorNode. nil (make-array 32)))\n\n(set! (.-EMPTY PersistentVector)\n  (PersistentVector. nil 0 5 (.-EMPTY-NODE PersistentVector) (array) empty-ordered-hash))\n\n(set! (.-fromArray PersistentVector)\n  (fn [xs ^boolean no-clone]\n    (let [l (alength xs)\n          xs (if no-clone xs (aclone xs))]\n      (if (< l 32)\n        (PersistentVector. nil l 5 (.-EMPTY-NODE PersistentVector) xs nil)\n        (let [node (.slice xs 0 32)\n              v (PersistentVector. nil 32 5 (.-EMPTY-NODE PersistentVector) node nil)]\n          (loop [i 32 out (-as-transient v)]\n            (if (< i l)\n              (recur (inc i) (conj! out (aget xs i)))\n              (persistent! out))))))))\n\n(es6-iterable PersistentVector)\n\n(declare map-entry?)\n\n(defn vec\n  \"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified.\"\n  [coll]\n  (cond\n    (map-entry? coll)\n    [(key coll) (val coll)]\n\n    (vector? coll)\n    (with-meta coll nil)\n\n    (array? coll)\n    (.fromArray PersistentVector coll true)\n\n    :else\n    (-persistent!\n      (reduce -conj!\n        (-as-transient (.-EMPTY PersistentVector))\n        coll))))\n\n(defn vector\n  \"Creates a new vector containing the args.\"\n  [& args]\n  (if (and (instance? IndexedSeq args) (zero? (.-i args)))\n    (.fromArray PersistentVector (.-arr args) (not (array? (.-arr args))))\n    (vec args)))\n\n(declare subvec)\n\n(deftype ChunkedSeq [vec node i off meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (chunked-seq vec node i off new-meta)))\n  IMeta\n  (-meta [coll] meta)\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ASeq\n  ISeq\n  (-first [coll]\n    (aget node off))\n  (-rest [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          ()\n          s))\n      (-chunked-rest coll)))\n\n  INext\n  (-next [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          nil\n          s))\n      (-chunked-next coll)))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll]\n    ())\n\n  IChunkedSeq\n  (-chunked-first [coll]\n    (array-chunk node off))\n  (-chunked-rest [coll]\n    (let [end (+ i (alength node))]\n      (if (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0)\n        ())))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (let [end (+ i (alength node))]\n      (when (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f]\n    (pv-reduce vec f (+ i off) (count vec)))\n\n  (-reduce [coll f start]\n    (pv-reduce vec f start (+ i off) (count vec))))\n\n(es6-iterable ChunkedSeq)\n\n(defn chunked-seq\n  ([vec i off] (ChunkedSeq. vec (array-for vec i) i off nil nil))\n  ([vec node i off] (ChunkedSeq. vec node i off nil nil))\n  ([vec node i off meta]\n     (ChunkedSeq. vec node i off meta nil)))\n\n(declare build-subvec)\n\n(deftype Subvec [meta v start end ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (Subvec. meta v start end __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (build-subvec new-meta v start end __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when-not (== start end)\n      (-nth v (dec end))))\n  (-pop [coll]\n    (if (== start end)\n      (throw (js\/Error. \"Can't pop empty vector\"))\n      (build-subvec meta v start (dec end) nil)))\n\n  ICollection\n  (-conj [coll o]\n    (build-subvec meta (-assoc-n v end o) start (inc end) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [subvec-seq (fn subvec-seq [i]\n                       (when-not (== i end)\n                         (cons (-nth v i)\n                               (lazy-seq\n                                (subvec-seq (inc i))))))]\n      (subvec-seq start)))\n\n  IReversible\n  (-rseq [coll]\n    (if-not (== start end)\n      (RSeq. coll (dec (- end start)) nil)))\n\n  ICounted\n  (-count [coll] (- end start))\n\n  IIndexed\n  (-nth [coll n]\n    (if (or (neg? n) (<= end (+ start n)))\n      (vector-index-out-of-bounds n (- end start))\n      (-nth v (+ start n))))\n  (-nth [coll n not-found]\n    (if (or (neg? n) (<= end (+ start n)))\n      not-found\n      (-nth v (+ start n) not-found)))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll key val]\n    (if (number? key)\n      (-assoc-n coll key val)\n      (throw (js\/Error. \"Subvec's key for assoc must be a number.\"))))\n  (-contains-key? [coll key]\n    (if (integer? key)\n      (and (<= 0 key) (< key (- end start)))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when-not (neg? n)\n      (let [idx (+ start n)]\n        (when (< idx end)\n          (MapEntry. n (-lookup v idx) nil)))))\n\n  IVector\n  (-assoc-n [coll n val]\n    (let [v-pos (+ start n)]\n      (if (or (neg? n) (<= (inc end) v-pos))\n        (throw (js\/Error. (str \"Index \" n \" out of bounds [0,\" (-count coll) \"]\")))\n        (build-subvec meta (assoc v v-pos val) start (max end (inc v-pos)) nil))))\n\n  IReduce\n  (-reduce [coll f]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f start end)\n      (ci-reduce coll f)))\n  (-reduce [coll f init]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f init start end)\n      (ci-reduce coll f init)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (loop [i start j 0 init init]\n      (if (< i end)\n        (let [init (f init j (-nth v i))]\n          (if (reduced? init)\n            @init\n            (recur (inc i) (inc j) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (-nth coll k))\n  (-invoke [coll k not-found]\n    (-nth coll k not-found))\n\n  IIterable\n  (-iterator [coll]\n    (if (implements? APersistentVector v)\n      (ranged-iterator v start end)\n      (seq-iter coll))))\n\n(es6-iterable Subvec)\n\n(defn- build-subvec [meta v start end __hash]\n  (if (instance? Subvec v)\n    (recur meta (.-v v) (+ (.-start v) start) (+ (.-start v) end) __hash)\n    (do\n      (when-not (vector? v)\n        (throw (js\/Error. \"v must satisfy IVector\")))\n      (when (or (neg? start)\n                (< end start)\n                (> end (count v)))\n        (throw (js\/Error. \"Index out of bounds\")))\n      (Subvec. meta v start end __hash))))\n\n(defn subvec\n  \"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.\"\n  ([v start]\n   (subvec v start (count v)))\n  ([v start end]\n   (assert (and (not (nil? start)) (not (nil? end))))\n   (build-subvec nil v (int start) (int end) nil)))\n\n(defn- tv-ensure-editable [edit node]\n  (if (identical? edit (.-edit node))\n    node\n    (VectorNode. edit (aclone (.-arr node)))))\n\n(defn- tv-editable-root [node]\n  (VectorNode. (js-obj) (aclone (.-arr node))))\n\n(defn- tv-editable-tail [tl]\n  (let [ret (make-array 32)]\n    (array-copy tl 0 ret 0 (alength tl))\n    ret))\n\n(defn- tv-push-tail [tv level parent tail-node]\n  (let [ret    (tv-ensure-editable (.. tv -root -edit) parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt tv)) level) 0x01f)]\n    (pv-aset ret subidx\n             (if (== level 5)\n               tail-node\n               (let [child (pv-aget ret subidx)]\n                 (if-not (nil? child)\n                   (tv-push-tail tv (- level 5) child tail-node)\n                   (new-path (.. tv -root -edit) (- level 5) tail-node)))))\n    ret))\n\n(defn- tv-pop-tail [tv level node]\n  (let [node   (tv-ensure-editable (.. tv -root -edit) node)\n        subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt tv) 2) level) 0x01f)]\n    (cond\n      (> level 5) (let [new-child (tv-pop-tail\n                                   tv (- level 5) (pv-aget node subidx))]\n                    (if (and (nil? new-child) (zero? subidx))\n                      nil\n                      (do (pv-aset node subidx new-child)\n                          node)))\n      (zero? subidx) nil\n      :else (do (pv-aset node subidx nil)\n                node))))\n\n(defn- unchecked-editable-array-for [tv i]\n  ;; invariant: i is a valid index of tv.\n  (if (>= i (tail-off tv))\n    (.-tail tv)\n    (let [root (.-root tv)]\n      (loop [node  root\n             level (.-shift tv)]\n        (if (pos? level)\n          (recur (tv-ensure-editable\n                   (.-edit root)\n                   (pv-aget node\n                            (bit-and (bit-shift-right-zero-fill i level)\n                                     0x01f)))\n                 (- level 5))\n          (.-arr node))))))\n\n(deftype TransientVector [^:mutable cnt\n                          ^:mutable shift\n                          ^:mutable root\n                          ^:mutable tail]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if ^boolean (.-edit root)\n      (if (< (- cnt (tail-off tcoll)) 32)\n        (do (aset tail (bit-and cnt 0x01f) o)\n            (set! cnt (inc cnt))\n            tcoll)\n        (let [tail-node (VectorNode. (.-edit root) tail)\n              new-tail  (make-array 32)]\n          (aset new-tail 0 o)\n          (set! tail new-tail)\n          (if (> (bit-shift-right-zero-fill cnt 5)\n                 (bit-shift-left 1 shift))\n            (let [new-root-array (make-array 32)\n                  new-shift      (+ shift 5)]\n              (aset new-root-array 0 root)\n              (aset new-root-array 1 (new-path (.-edit root) shift tail-node))\n              (set! root  (VectorNode. (.-edit root) new-root-array))\n              (set! shift new-shift)\n              (set! cnt   (inc cnt))\n              tcoll)\n            (let [new-root (tv-push-tail tcoll shift root tail-node)]\n              (set! root new-root)\n              (set! cnt  (inc cnt))\n              tcoll))))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if ^boolean (.-edit root)\n      (do (set! (.-edit root) nil)\n          (let [len (- cnt (tail-off tcoll))\n                trimmed-tail (make-array len)]\n            (array-copy tail 0 trimmed-tail 0 len)\n            (PersistentVector. nil cnt shift root trimmed-tail nil)))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if (number? key)\n      (-assoc-n! tcoll key val)\n      (throw (js\/Error. \"TransientVector's key for assoc! must be a number.\"))))\n\n  ITransientVector\n  (-assoc-n! [tcoll n val]\n    (if ^boolean (.-edit root)\n      (cond\n        (and (<= 0 n) (< n cnt))\n        (if (<= (tail-off tcoll) n)\n          (do (aset tail (bit-and n 0x01f) val)\n              tcoll)\n          (let [new-root\n                ((fn go [level node]\n                   (let [node (tv-ensure-editable (.-edit root) node)]\n                     (if (zero? level)\n                       (do (pv-aset node (bit-and n 0x01f) val)\n                           node)\n                       (let [subidx (bit-and (bit-shift-right-zero-fill n level)\n                                             0x01f)]\n                         (pv-aset node subidx\n                                  (go (- level 5) (pv-aget node subidx)))\n                         node))))\n                 shift root)]\n            (set! root new-root)\n            tcoll))\n        (== n cnt) (-conj! tcoll val)\n        :else\n        (throw\n         (js\/Error.\n          (str \"Index \" n \" out of bounds for TransientVector of length\" cnt))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (-pop! [tcoll]\n    (if ^boolean (.-edit root)\n      (cond\n        (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n        (== 1 cnt)                       (do (set! cnt 0) tcoll)\n        (pos? (bit-and (dec cnt) 0x01f)) (do (set! cnt (dec cnt)) tcoll)\n        :else\n        (let [new-tail (unchecked-editable-array-for tcoll (- cnt 2))\n              new-root (let [nr (tv-pop-tail tcoll shift root)]\n                         (if-not (nil? nr)\n                           nr\n                           (VectorNode. (.-edit root) (make-array 32))))]\n          (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n            (let [new-root (tv-ensure-editable (.-edit root) (pv-aget new-root 0))]\n              (set! root  new-root)\n              (set! shift (- shift 5))\n              (set! cnt   (dec cnt))\n              (set! tail  new-tail)\n              tcoll)\n            (do (set! root new-root)\n                (set! cnt  (dec cnt))\n                (set! tail new-tail)\n                tcoll))))\n      (throw (js\/Error. \"pop! after persistent!\"))))\n\n  ICounted\n  (-count [coll]\n    (if ^boolean (.-edit root)\n      cnt\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  IIndexed\n  (-nth [coll n]\n    (if ^boolean (.-edit root)\n      (aget (array-for coll n) (bit-and n 0x01f))\n      (throw (js\/Error. \"nth after persistent!\"))))\n\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (-nth coll n)\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond\n      (not ^boolean (.-edit root)) (throw (js\/Error. \"lookup after persistent!\"))\n      (number? k) (-nth coll k not-found)\n      :else not-found))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n;;; PersistentQueue ;;;\n\n(deftype PersistentQueueIter [^:mutable fseq riter]\n  Object\n  (hasNext [_]\n    (or (and (some? fseq) (seq fseq)) (and (some? riter) (.hasNext riter))))\n  (next [_]\n    (cond\n      (some? fseq)\n      (let [ret (first fseq)]\n        (set! fseq (next fseq))\n        ret)\n      (and (some? riter) ^boolean (.hasNext riter))\n      (.next riter)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentQueueSeq [meta front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueueSeq. new-meta front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest  [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (if (nil? rear)\n        (-empty coll)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  INext\n  (-next [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (when (some? rear)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll))\n\n(es6-iterable PersistentQueueSeq)\n\n(deftype PersistentQueue [meta count front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [coll] (PersistentQueue. meta count front rear __hash))\n\n  IIterable\n  (-iterator [coll]\n    (PersistentQueueIter. front (-iterator rear)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueue. new-meta count front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest [coll] (rest (seq coll)))\n\n  IStack\n  (-peek [coll] (first front))\n  (-pop [coll]\n    (if front\n      (if-let [f1 (next front)]\n        (PersistentQueue. meta (dec count) f1 rear nil)\n        (PersistentQueue. meta (dec count) (seq rear) [] nil))\n      coll))\n\n  ICollection\n  (-conj [coll o]\n    (if front\n      (PersistentQueue. meta (inc count) front (conj (or rear []) o) nil)\n      (PersistentQueue. meta (inc count) (conj front o) [] nil)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentQueue) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [rear (seq rear)]\n      (if (or front rear)\n        (PersistentQueueSeq. nil front (seq rear) nil))))\n\n  ICounted\n  (-count [coll] count))\n\n(set! (.-EMPTY PersistentQueue) (PersistentQueue. nil 0 nil [] empty-ordered-hash))\n\n(es6-iterable PersistentQueue)\n\n(deftype NeverEquiv []\n  Object\n  (equiv [this other]\n    (-equiv this other))\n  IEquiv\n  (-equiv [o other] false))\n\n(def ^:private never-equiv (NeverEquiv.))\n\n(defn equiv-map\n  \"Test map equivalence. Returns true if x equals y, otherwise returns false.\"\n  [x y]\n  (boolean\n    (when (and (map? y) (not (record? y)))\n      ; assume all maps are counted\n      (when (== (count x) (count y))\n        (if (satisfies? IKVReduce x)\n          (reduce-kv\n            (fn [_ k v]\n              (if (= (get y k never-equiv) v)\n                true\n                (reduced false)))\n            true x)\n          (every?\n            (fn [xkv]\n              (= (get y (first xkv) never-equiv) (second xkv)))\n            x))))))\n\n\n(defn- scan-array [incr k array]\n  (let [len (alength array)]\n    (loop [i 0]\n      (when (< i len)\n        (if (identical? k (aget array i))\n          i\n          (recur (+ i incr)))))))\n\n; The keys field is an array of all keys of this map, in no particular\n; order. Any string, keyword, or symbol key is used as a property name\n; to store the value in strobj.  If a key is assoc'ed when that same\n; key already exists in strobj, the old value is overwritten. If a\n; non-string key is assoc'ed, return a HashMap object instead.\n\n(defn- obj-map-compare-keys [a b]\n  (let [a (hash a)\n        b (hash b)]\n    (cond\n     (< a b) -1\n     (> a b) 1\n     :else 0)))\n\n(defn- obj-map->hash-map [m k v]\n  (let [ks  (.-keys m)\n        len (alength ks)\n        so  (.-strobj m)\n        mm  (meta m)]\n    (loop [i   0\n           out (transient (.-EMPTY PersistentHashMap))]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (inc i) (assoc! out k (gobject\/get so k))))\n        (-with-meta (persistent! (assoc! out k v)) mm)))))\n\n;;; ObjMap - DEPRECATED\n\n(defn- obj-clone [obj ks]\n  (let [new-obj (js-obj)\n        l (alength ks)]\n    (loop [i 0]\n      (when (< i l)\n        (let [k (aget ks i)]\n          (gobject\/set new-obj k (gobject\/get obj k))\n          (recur (inc i)))))\n    new-obj))\n\n(deftype ObjMap [meta keys strobj update-count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ObjMap. new-meta keys strobj update-count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (reduce -conj\n              coll\n              entry)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY ObjMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? (alength keys))\n      (map #(vector % (unchecked-get strobj %))\n           (.sort keys obj-map-compare-keys))))\n\n  ICounted\n  (-count [coll] (alength keys))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (unchecked-get strobj k)\n      not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (string? k)\n        (if (or (> update-count (.-HASHMAP_THRESHOLD ObjMap))\n                (>= (alength keys) (.-HASHMAP_THRESHOLD ObjMap)))\n          (obj-map->hash-map coll k v)\n          (if-not (nil? (scan-array 1 k keys))\n            (let [new-strobj (obj-clone strobj keys)]\n              (gobject\/set new-strobj k v)\n              (ObjMap. meta keys new-strobj (inc update-count) nil)) ; overwrite\n            (let [new-strobj (obj-clone strobj keys) ; append\n                  new-keys (aclone keys)]\n              (gobject\/set new-strobj k v)\n              (.push new-keys k)\n              (ObjMap. meta new-keys new-strobj (inc update-count) nil))))\n        ;; non-string key. game over.\n        (obj-map->hash-map coll k v)))\n  (-contains-key? [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      true\n      false))\n\n  IFind\n  (-find [coll k]\n    (when (and (string? k)\n            (not (nil? (scan-array 1 k keys))))\n      (MapEntry. k (unchecked-get strobj k) nil)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength keys)]\n      (loop [keys (.sort keys obj-map-compare-keys)\n             init init]\n        (if (seq keys)\n          (let [k (first keys)\n                init (f init k (unchecked-get strobj k))]\n            (if (reduced? init)\n              @init\n              (recur (rest keys) init)))\n          init))))\n\n  IMap\n  (-dissoc [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (let [new-keys (aclone keys)\n            new-strobj (obj-clone strobj keys)]\n        (.splice new-keys (scan-array 1 k new-keys) 1)\n        (js-delete new-strobj k)\n        (ObjMap. meta new-keys new-strobj (inc update-count) nil))\n      coll)) ; key not found, return coll unchanged\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (transient (into (hash-map) coll))))\n\n(set! (.-EMPTY ObjMap) (ObjMap. nil (array) (js-obj) 0 empty-unordered-hash))\n\n(set! (.-HASHMAP_THRESHOLD ObjMap) 8)\n\n(set! (.-fromObject ObjMap) (fn [ks obj] (ObjMap. nil ks obj 0 nil)))\n\n;; Record Iterator\n(deftype RecordIter [^:mutable i record base-count fields ext-map-iter]\n  Object\n  (hasNext [_]\n    (or (< i base-count) (.hasNext ext-map-iter)))\n  (next [_]\n    (if (< i base-count)\n      (let [k (nth fields i)]\n        (set! i (inc i))\n        (MapEntry. k (-lookup record k) nil))\n      (.next ext-map-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6EntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [[k v] (first s)]\n        (set! s (next s))\n        #js {:value #js [k v] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-entries-iterator [coll]\n  (ES6EntriesIterator. (seq coll)))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6SetEntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value #js [x x] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-set-entries-iterator [coll]\n  (ES6SetEntriesIterator. (seq coll)))\n\n;;; PersistentArrayMap\n\n(defn- array-index-of-nil? [arr]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (nil? (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-keyword? [arr k]\n  (let [len  (alength arr)\n        kstr (.-fqn k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (keyword? (aget arr i))\n             (identical? kstr (.-fqn (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-symbol? [arr k]\n  (let [len  (alength arr)\n        kstr (.-str k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (symbol? (aget arr i))\n             (identical? kstr (.-str (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-identical? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (identical? k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-equiv? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (= k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn array-index-of [arr k]\n  (cond\n    (keyword? k) (array-index-of-keyword? arr k)\n\n    (or (string? k) (number? k))\n    (array-index-of-identical? arr k)\n\n    (symbol? k) (array-index-of-symbol? arr k)\n\n    (nil? k)\n    (array-index-of-nil? arr)\n\n    :else (array-index-of-equiv? arr k)))\n\n(defn- array-map-index-of [m k]\n  (array-index-of (.-arr m) k))\n\n(defn- array-extend-kv [arr k v]\n  (let [l (alength arr)\n        narr (make-array (+ l 2))]\n    (loop [i 0]\n      (when (< i l)\n        (aset narr i (aget arr i))\n        (recur (inc i))))\n    (aset narr l k)\n    (aset narr (inc l) v)\n    narr))\n\n(defn- array-map-extend-kv [m k v]\n  (array-extend-kv (.-arr m) k v))\n\n(declare TransientArrayMap)\n\n(deftype MapEntry [key val ^:mutable __hash]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(defn map-entry?\n  \"Returns true if x satisfies IMapEntry\"\n  [x]\n  (implements? IMapEntry x))\n\n(deftype PersistentArrayMapSeq [arr i _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (PersistentArrayMapSeq. arr i new-meta)))\n\n  ICounted\n  (-count [coll]\n    (\/ (- (alength arr) i) 2))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (MapEntry. (aget arr i) (aget arr (inc i)) nil))\n\n  (-rest [coll]\n    (if (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentArrayMapSeq)\n\n(defn persistent-array-map-seq [arr i _meta]\n  (when (<= i (- (alength arr) 2))\n    (PersistentArrayMapSeq. arr i _meta)))\n\n(declare keys vals)\n\n(deftype PersistentArrayMapIterator [arr ^:mutable i cnt]\n  Object\n  (hasNext [_]\n    (< i cnt))\n  (next [_]\n    (let [ret (MapEntry. (aget arr i) (aget arr (inc i)) nil)]\n      (set! i (+ i 2))\n      ret)))\n\n(deftype PersistentArrayMap [meta cnt arr ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentArrayMap. meta cnt arr __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentArrayMap. new-meta cnt arr __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentArrayMap) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (if (and (map? other) (not (record? other)))\n      (let [alen (alength arr)\n            ^not-native other other]\n        (if (== cnt (-count other))\n          (loop [i 0]\n            (if (< i alen)\n              (let [v (-lookup other (aget arr i) lookup-sentinel)]\n                (if-not (identical? v lookup-sentinel)\n                  (if (= (aget arr (inc i)) v)\n                    (recur (+ i 2))\n                    false)\n                  false))\n              true))\n          false))\n      false))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  IIterable\n  (-iterator [this]\n    (PersistentArrayMapIterator. arr 0 (* cnt 2)))\n\n  ISeqable\n  (-seq [coll]\n    (persistent-array-map-seq arr 0 nil))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [idx (array-map-index-of coll k)]\n      (if (== idx -1)\n        not-found\n        (aget arr (inc idx)))))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [idx (array-map-index-of coll k)]\n      (cond\n        (== idx -1)\n        (if (< cnt (.-HASHMAP-THRESHOLD PersistentArrayMap))\n          (let [arr (array-map-extend-kv coll k v)]\n            (PersistentArrayMap. meta (inc cnt) arr nil))\n          (-> (into (.-EMPTY PersistentHashMap) coll)\n            (-assoc k v)\n            (-with-meta meta)))\n\n        (identical? v (aget arr (inc idx)))\n        coll\n\n        :else\n        (let [arr (doto (aclone arr)\n                    (aset (inc idx) v))]\n          (PersistentArrayMap. meta cnt arr nil)))))\n\n  (-contains-key? [coll k]\n    (not (== (array-map-index-of coll k) -1)))\n\n  IFind\n  (-find [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (when-not (== idx -1)\n        (MapEntry. (aget arr idx) (aget arr (inc idx)) nil))))\n\n  IMap\n  (-dissoc [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (if (>= idx 0)\n        (let [len     (alength arr)\n              new-len (- len 2)]\n          (if (zero? new-len)\n            (-empty coll)\n            (let [new-arr (make-array new-len)]\n              (loop [s 0 d 0]\n                (cond\n                  (>= s len) (PersistentArrayMap. meta (dec cnt) new-arr nil)\n                  (= k (aget arr s)) (recur (+ s 2) d)\n                  :else (do (aset new-arr d (aget arr s))\n                            (aset new-arr (inc d) (aget arr (inc s)))\n                            (recur (+ s 2) (+ d 2))))))))\n        coll)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength arr)]\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [init (f init (aget arr i) (aget arr (inc i)))]\n            (if (reduced? init)\n              @init\n              (recur (+ i 2) init)))\n          init))))\n\n  IReduce\n  (-reduce [coll f]\n    (iter-reduce coll f))\n  (-reduce [coll f start]\n    (iter-reduce coll f start))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientArrayMap. (js-obj) (alength arr) (aclone arr))))\n\n(set! (.-EMPTY PersistentArrayMap) (PersistentArrayMap. nil 0 (array) empty-unordered-hash))\n\n(set! (.-HASHMAP-THRESHOLD PersistentArrayMap) 8)\n\n(set! (.-fromArray PersistentArrayMap)\n  (fn [arr ^boolean no-clone ^boolean no-check]\n    (as-> (if no-clone arr (aclone arr)) arr\n      (if no-check\n        arr\n        (let [ret (array)]\n          (loop [i 0]\n            (when (< i (alength arr))\n              (let [k (aget arr i)\n                    v (aget arr (inc i))\n                    idx (array-index-of ret k)]\n                (when (== idx -1)\n                  (.push ret k)\n                  (.push ret v)))\n              (recur (+ i 2))))\n          ret))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(set! (.-createWithCheck PersistentArrayMap)\n  (fn [arr]\n    (let [ret (array)]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (let [k (aget arr i)\n                v (aget arr (inc i))\n                idx (array-index-of ret k)]\n            (if (== idx -1)\n              (doto ret (.push k) (.push v))\n              (throw (js\/Error. (str \"Duplicate key: \" k)))))\n          (recur (+ i 2))))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(defn key-test [key other]\n  (cond\n    (identical? key other) true\n    (keyword-identical? key other) true\n    :else (= key other)))\n\n(defn- ^boolean pam-dupes? [arr]\n  (loop [i 0]\n    (if (< i (alength arr))\n      (let [dupe? (loop [j 0]\n                    (if (< j i)\n                      (or\n                        (key-test (aget arr i) (aget arr j))\n                        (recur (+ 2 j)))\n                      false))]\n        (or dupe? (recur (+ 2 i))))\n      false)))\n\n(defn- pam-new-size [arr]\n  (loop [i 0 n 0]\n    (if (< i (alength arr))\n      (let [dupe? (loop [j 0]\n                    (if (< j i)\n                      (or\n                        (key-test (aget arr i) (aget arr j))\n                        (recur (+ 2 j)))\n                      false))]\n        (recur (+ 2 i) (if dupe? n (+ n 2))))\n      n)))\n\n(defn- pam-grow-seed-array [seed trailing]\n  (let [seed-cnt  (dec (alength seed))\n        extra-kvs (seq trailing)\n        ret       (make-array (+ seed-cnt (* 2 (count extra-kvs))))\n        ret       (array-copy seed 0 ret 0 seed-cnt)]\n    (loop [i seed-cnt extra-kvs extra-kvs]\n      (if extra-kvs\n        (let [kv (first extra-kvs)]\n          (aset ret i (-key kv))\n          (aset ret (inc i) (-val kv))\n          (recur (+ 2 seed-cnt) (next extra-kvs)))\n        ret))))\n\n(set! (.-createAsIfByAssoc PersistentArrayMap)\n  (fn [init]\n    ;; check trailing element\n    (let [len           (alength init)\n          has-trailing? (== 1 (bit-and len  1))]\n      (if-not (or has-trailing? (pam-dupes? init))\n        (PersistentArrayMap. nil (\/ len 2) init nil)\n        (.createAsIfByAssocComplexPath PersistentArrayMap init has-trailing?)))))\n\n(set! (.-createAsIfByAssocComplexPath PersistentArrayMap)\n  (fn [init ^boolean has-trailing?]\n    (let [init (if has-trailing?\n                 (pam-grow-seed-array init\n                   ;; into {} in case the final element is not a map but something conj-able\n                   ;; for parity with Clojure implementation of CLJ-2603\n                   (into {} (aget init (dec (alength init)))))\n                 init)\n          n    (pam-new-size init)\n          len  (alength init)]\n      (if (< n len)\n        (let [nodups (make-array n)]\n          (loop [i 0 m 0]\n            (if (< i len)\n              (let [dupe? (loop [j 0]\n                            (if (< j m)\n                              (or\n                                (key-test (aget init i) (aget init j))\n                                (recur (+ 2 j)))\n                              false))]\n                (if-not dupe?\n                  (let [j (loop [j (- len 2)]\n                            (if (>= j i)\n                              (if (key-test (aget init i) (aget init j))\n                                j\n                                (recur (- j 2)))\n                              j))]\n                    (aset nodups m (aget init i))\n                    (aset nodups (inc m) (aget init (inc j)))\n                    (recur (+ 2 i) (+ 2 m)))\n                  (recur (+ 2 i) m)))))\n          (PersistentArrayMap. nil (\/ (alength nodups) 2) nodups nil))\n        (PersistentArrayMap. nil (\/ (alength init) 2) init nil)))))\n\n(es6-iterable PersistentArrayMap)\n\n(declare array->transient-hash-map)\n\n(deftype TransientArrayMap [^:mutable ^boolean editable?\n                            ^:mutable len\n                            arr]\n  ICounted\n  (-count [tcoll]\n    (if editable?\n      (quot len 2)\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (-lookup tcoll k nil))\n\n  (-lookup [tcoll k not-found]\n    (if editable?\n      (let [idx (array-map-index-of tcoll k)]\n        (if (== idx -1)\n          not-found\n          (aget arr (inc idx))))\n      (throw (js\/Error. \"lookup after persistent!\"))))\n\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if editable?\n      (cond\n        (map-entry? o)\n        (-assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (-assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (-assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if editable?\n      (do (set! editable? false)\n          (PersistentArrayMap. nil (quot len 2) arr nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (if (== idx -1)\n          (if (<= (+ len 2) (* 2 (.-HASHMAP-THRESHOLD PersistentArrayMap)))\n            (do (set! len (+ len 2))\n                (.push arr key)\n                (.push arr val)\n                tcoll)\n            (assoc! (array->transient-hash-map len arr) key val))\n          (if (identical? val (aget arr (inc idx)))\n            tcoll\n            (do (aset arr (inc idx) val)\n                tcoll))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  ITransientMap\n  (-dissoc! [tcoll key]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (when (>= idx 0)\n          (aset arr idx (aget arr (- len 2)))\n          (aset arr (inc idx) (aget arr (dec len)))\n          (doto arr .pop .pop)\n          (set! len (- len 2)))\n        tcoll)\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key nil))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n(declare TransientHashMap)\n\n(defn- array->transient-hash-map [len arr]\n  (loop [out (transient (.-EMPTY PersistentHashMap))\n         i   0]\n    (if (< i len)\n      (recur (assoc! out (aget arr i) (aget arr (inc i))) (+ i 2))\n      out)))\n\n;;; PersistentHashMap\n\n(deftype Box [^:mutable val])\n\n(declare create-inode-seq create-array-node-seq reset! create-node atom deref)\n\n(defn- mask [hash shift]\n  (bit-and (bit-shift-right-zero-fill hash shift) 0x01f))\n\n(defn- clone-and-set\n  ([arr i a]\n     (doto (aclone arr)\n       (aset i a)))\n  ([arr i a j b]\n     (doto (aclone arr)\n       (aset i a)\n       (aset j b))))\n\n(defn- remove-pair [arr i]\n  (let [new-arr (make-array (- (alength arr) 2))]\n    (array-copy arr 0 new-arr 0 (* 2 i))\n    (array-copy arr (* 2 (inc i)) new-arr (* 2 i) (- (alength new-arr) (* 2 i)))\n    new-arr))\n\n(defn- bitmap-indexed-node-index [bitmap bit]\n  (bit-count (bit-and bitmap (dec bit))))\n\n(defn- bitpos [hash shift]\n  (bit-shift-left 1 (mask hash shift)))\n\n(defn- edit-and-set\n  ([inode edit i a]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       editable))\n  ([inode edit i a j b]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       (aset (.-arr editable) j b)\n       editable)))\n\n(defn- inode-kv-reduce [arr f init]\n  (let [len (alength arr)]\n    (loop [i 0 init init]\n      (if (< i len)\n        (let [init (let [k (aget arr i)]\n                     (if-not (nil? k)\n                       (f init k (aget arr (inc i)))\n                       (let [node (aget arr (inc i))]\n                         (if-not (nil? node)\n                           (.kv-reduce node f init)\n                           init))))]\n          (if (reduced? init)\n            init\n            (recur (+ i 2) init)))\n        init))))\n\n(declare ArrayNode)\n\n (deftype NodeIterator [arr ^:mutable i ^:mutable next-entry ^:mutable next-iter]\n  Object\n  (advance [this]\n    (let [len (alength arr)]\n      (loop []\n        (if (< i len)\n          (let [key (aget arr i)\n                node-or-val (aget arr (inc i))\n                ^boolean found\n                (cond (some? key)\n                      (set! next-entry (MapEntry. key node-or-val nil))\n                      (some? node-or-val)\n                      (let [new-iter (-iterator node-or-val)]\n                        (if ^boolean (.hasNext new-iter)\n                          (set! next-iter new-iter)\n                          false))\n                      :else false)]\n            (set! i (+ i 2))\n            (if found true (recur)))\n          false))))\n  (hasNext [this]\n    (or (some? next-entry) (some? next-iter) (.advance this)))\n  (next [this]\n    (cond\n      (some? next-entry)\n      (let [ret next-entry]\n        (set! next-entry nil)\n        ret)\n      (some? next-iter)\n      (let [ret (.next next-iter)]\n        (when-not ^boolean (.hasNext next-iter)\n          (set! next-iter nil))\n        ret)\n      ^boolean (.advance this)\n      (.next this)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype BitmapIndexedNode [edit ^:mutable bitmap ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (if (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc (.-EMPTY BitmapIndexedNode)\n                                              (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. nil (inc n) nodes))\n            (let [new-arr (make-array (* 2 (inc n)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (BitmapIndexedNode. nil (bit-or bitmap bit) new-arr))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc val-or-node (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) val)))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (BitmapIndexedNode. nil bitmap\n                                        (clone-and-set arr (* 2 idx) nil (inc (* 2 idx))\n                                                       (create-node (+ shift 5) key-or-nil val-or-node hash key val)))))))))\n\n  (inode-without [inode shift hash key]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without val-or-node (+ shift 5) hash key)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))\n                        (== bitmap bit) nil\n                        :else (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))))\n                (key-test key key-or-nil)\n                (if (== bitmap bit)\n                  nil\n                  (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx)))\n                :else inode)))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)  (.inode-lookup val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil) val-or-node\n                :else not-found)))))\n\n  (inode-find [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil) (.inode-find val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil)          (MapEntry. key-or-nil val-or-node nil)\n                :else not-found)))))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [n       (bit-count bitmap)\n            new-arr (make-array (if (neg? n) 4 (* 2 (inc n))))]\n        (array-copy arr 0 new-arr 0 (* 2 n))\n        (BitmapIndexedNode. e bitmap new-arr))))\n\n  (edit-and-remove-pair [inode e bit i]\n    (if (== bitmap bit)\n      nil\n      (let [editable (.ensure-editable inode e)\n            earr     (.-arr editable)\n            len      (alength earr)]\n        (set! (.-bitmap editable) (bit-xor bit (.-bitmap editable)))\n        (array-copy earr (* 2 (inc i))\n                    earr (* 2 i)\n                    (- len (* 2 (inc i))))\n        (aset earr (- len 2) nil)\n        (aset earr (dec len) nil)\n        editable)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (cond\n            (< (* 2 n) (alength arr))\n            (let [editable (.ensure-editable inode edit)\n                  earr     (.-arr editable)]\n              (set! (.-val added-leaf?) true)\n              (array-copy-downward earr (* 2 idx)\n                                   earr (* 2 (inc idx))\n                                   (* 2 (- n idx)))\n              (aset earr (* 2 idx) key)\n              (aset earr (inc (* 2 idx)) val)\n              (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n              editable)\n\n            (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc! (.-EMPTY BitmapIndexedNode)\n                                               edit (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. edit (inc n) nodes))\n\n            :else\n            (let [new-arr (make-array (* 2 (+ n 4)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (let [editable (.ensure-editable inode edit)]\n                (set! (.-arr editable) new-arr)\n                (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n                editable))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc! val-or-node edit (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (edit-and-set inode edit (inc (* 2 idx)) n)))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (edit-and-set inode edit (inc (* 2 idx)) val))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (edit-and-set inode edit (* 2 idx) nil (inc (* 2 idx))\n                                  (create-node edit (+ shift 5) key-or-nil val-or-node hash key val))))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without! val-or-node edit (+ shift 5) hash key removed-leaf?)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (edit-and-set inode edit (inc (* 2 idx)) n)\n                        (== bitmap bit) nil\n                        :else (.edit-and-remove-pair inode edit bit idx)))\n                (key-test key key-or-nil)\n                (do (set! (.-val removed-leaf?) true)\n                    (.edit-and-remove-pair inode edit bit idx))\n                :else inode)))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(set! (.-EMPTY BitmapIndexedNode) (BitmapIndexedNode. nil 0 (make-array 0)))\n\n(defn- pack-array-node [array-node edit idx]\n  (let [arr     (.-arr array-node)\n        len     (alength arr)\n        new-arr (make-array (* 2 (dec (.-cnt array-node))))]\n    (loop [i 0 j 1 bitmap 0]\n      (if (< i len)\n        (if (and (not (== i idx))\n                 (not (nil? (aget arr i))))\n          (do (aset new-arr j (aget arr i))\n              (recur (inc i) (+ j 2) (bit-or bitmap (bit-shift-left 1 i))))\n          (recur (inc i) j bitmap))\n        (BitmapIndexedNode. edit bitmap new-arr)))))\n\n(deftype ArrayNodeIterator [arr ^:mutable i ^:mutable next-iter]\n  Object\n  (hasNext [this]\n    (let [len (alength arr)]\n      (loop []\n        (if-not (and  (some? next-iter) ^boolean (.hasNext next-iter))\n          (if (< i len)\n            (let [node (aget arr i)]\n              (set! i (inc i))\n              (when (some? node)\n                (set! next-iter (-iterator node)))\n              (recur))\n            false)\n          true))))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (.next next-iter)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype ArrayNode [edit ^:mutable cnt ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (ArrayNode. nil (inc cnt) (clone-and-set arr idx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?)))\n        (let [n (.inode-assoc node (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (ArrayNode. nil cnt (clone-and-set arr idx n)))))))\n\n  (inode-without [inode shift hash key]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (let [n (.inode-without node (+ shift 5) hash key)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode nil idx)\n              (ArrayNode. nil (dec cnt) (clone-and-set arr idx n)))\n\n            :else\n            (ArrayNode. nil cnt (clone-and-set arr idx n))))\n        inode)))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-lookup node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-find node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-seq [inode]\n    (create-array-node-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (ArrayNode. e cnt (aclone arr))))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (let [editable (edit-and-set inode edit idx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))]\n          (set! (.-cnt editable) (inc (.-cnt editable)))\n          editable)\n        (let [n (.inode-assoc! node edit (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (edit-and-set inode edit idx n))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        inode\n        (let [n (.inode-without! node edit (+ shift 5) hash key removed-leaf?)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode edit idx)\n              (let [editable (edit-and-set inode edit idx n)]\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))\n\n            :else\n            (edit-and-set inode edit idx n))))))\n\n  (kv-reduce [inode f init]\n    (let [len (alength arr)]           ; actually 32\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [node (aget arr i)]\n            (if-not (nil? node)\n              (let [init (.kv-reduce node f init)]\n                (if (reduced? init)\n                  init\n                  (recur (inc i) init)))\n              (recur (inc i) init)))\n          init))))\n\n IIterable\n (-iterator [coll]\n    (ArrayNodeIterator. arr 0 nil)))\n\n(defn- hash-collision-node-find-index [arr cnt key]\n  (let [lim (* 2 cnt)]\n    (loop [i 0]\n      (if (< i lim)\n        (if (key-test key (aget arr i))\n          i\n          (recur (+ i 2)))\n        -1))))\n\n(deftype HashCollisionNode [edit\n                            ^:mutable collision-hash\n                            ^:mutable cnt\n                            ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (let [len     (* 2 cnt)\n                new-arr (make-array (+ len 2))]\n            (array-copy arr 0 new-arr 0 len)\n            (aset new-arr len key)\n            (aset new-arr (inc len) val)\n            (set! (.-val added-leaf?) true)\n            (HashCollisionNode. nil collision-hash (inc cnt) new-arr))\n          (if (= (aget arr (inc idx)) val)\n            inode\n            (HashCollisionNode. nil collision-hash cnt (clone-and-set arr (inc idx) val)))))\n      (.inode-assoc (BitmapIndexedNode. nil (bitpos collision-hash shift) (array nil inode))\n                    shift hash key val added-leaf?)))\n\n  (inode-without [inode shift hash key]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (== idx -1) inode\n            (== cnt 1)  nil\n            :else (HashCollisionNode. nil collision-hash (dec cnt) (remove-pair arr (quot idx 2))))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0)              not-found\n            (key-test key (aget arr idx)) (aget arr (inc idx))\n            :else                  not-found)))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0)              not-found\n            (key-test key (aget arr idx)) (MapEntry. (aget arr idx) (aget arr (inc idx)) nil)\n            :else                  not-found)))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [new-arr (make-array (* 2 (inc cnt)))]\n        (array-copy arr 0 new-arr 0 (* 2 cnt))\n        (HashCollisionNode. e collision-hash cnt new-arr))))\n\n  (ensure-editable-array [inode e count array]\n    (if (identical? e edit)\n      (do (set! arr array)\n          (set! cnt count)\n          inode)\n      (HashCollisionNode. edit collision-hash count array)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (if (> (alength arr) (* 2 cnt))\n            (let [editable (edit-and-set inode edit (* 2 cnt) key (inc (* 2 cnt)) val)]\n              (set! (.-val added-leaf?) true)\n              (set! (.-cnt editable) (inc (.-cnt editable)))\n              editable)\n            (let [len     (alength arr)\n                  new-arr (make-array (+ len 2))]\n              (array-copy arr 0 new-arr 0 len)\n              (aset new-arr len key)\n              (aset new-arr (inc len) val)\n              (set! (.-val added-leaf?) true)\n              (.ensure-editable-array inode edit (inc cnt) new-arr)))\n          (if (identical? (aget arr (inc idx)) val)\n            inode\n            (edit-and-set inode edit (inc idx) val))))\n      (.inode-assoc! (BitmapIndexedNode. edit (bitpos collision-hash shift) (array nil inode nil nil))\n                     edit shift hash key val added-leaf?)))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (if (== idx -1)\n        inode\n        (do (set! (.-val removed-leaf?) true)\n            (if (== cnt 1)\n              nil\n              (let [editable (.ensure-editable inode edit)\n                    earr     (.-arr editable)]\n                (aset earr idx (aget earr (- (* 2 cnt) 2)))\n                (aset earr (inc idx) (aget earr (dec (* 2 cnt))))\n                (aset earr (dec (* 2 cnt)) nil)\n                (aset earr (- (* 2 cnt) 2) nil)\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(defn- create-node\n  ([shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc shift key2hash key2 val2 added-leaf?))))))\n  ([edit shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc! edit shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc! edit shift key2hash key2 val2 added-leaf?)))))))\n\n(deftype NodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (NodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll]\n    (if (nil? s)\n      (MapEntry. (aget nodes i) (aget nodes (inc i)) nil)\n      (first s)))\n\n  (-rest [coll]\n    (let [ret (if (nil? s)\n                (create-inode-seq nodes (+ i 2) nil)\n                (create-inode-seq nodes i (next s)))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (if (nil? s)\n      (create-inode-seq nodes (+ i 2) nil)\n      (create-inode-seq nodes i (next s))))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable NodeSeq)\n\n(defn- create-inode-seq\n  ([nodes]\n     (create-inode-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-not (nil? (aget nodes j))\n               (NodeSeq. nil nodes j nil nil)\n               (if-let [node (aget nodes (inc j))]\n                 (if-let [node-seq (.inode-seq node)]\n                   (NodeSeq. nil nodes (+ j 2) node-seq nil)\n                   (recur (+ j 2)))\n                 (recur (+ j 2)))))))\n       (NodeSeq. nil nodes i s nil))))\n\n(deftype ArrayNodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ArrayNodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll] (first s))\n  (-rest  [coll]\n    (let [ret (create-array-node-seq nodes i (next s))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (create-array-node-seq nodes i (next s)))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ArrayNodeSeq)\n\n(defn- create-array-node-seq\n  ([nodes] (create-array-node-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-let [nj (aget nodes j)]\n               (if-let [ns (.inode-seq nj)]\n                 (ArrayNodeSeq. nil nodes (inc j) ns nil)\n                 (recur (inc j)))\n               (recur (inc j))))))\n       (ArrayNodeSeq. nil nodes i s nil))))\n\n(deftype HashMapIter [nil-val root-iter ^:mutable seen]\n  Object\n  (hasNext [_]\n    (or (not ^boolean seen) ^boolean (.hasNext root-iter)))\n  (next [_]\n    (if-not ^boolean seen\n      (do\n        (set! seen true)\n        (MapEntry. nil nil-val nil))\n      (.next root-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashMap [meta cnt root ^boolean has-nil? nil-val ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashMap. meta cnt root has-nil? nil-val __hash))\n\n  IIterable\n  (-iterator [coll]\n    (let [root-iter (if ^boolean root (-iterator root) (nil-iter))]\n      (if has-nil?\n        (HashMapIter. nil-val root-iter false)\n        root-iter)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashMap. new-meta cnt root has-nil? nil-val __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? cnt)\n      (let [s (if-not (nil? root) (.inode-seq root))]\n        (if has-nil?\n          (cons (MapEntry. nil nil-val nil) s)\n          s))))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond (nil? k)    (if has-nil?\n                        nil-val\n                        not-found)\n          (nil? root) not-found\n          :else       (.inode-lookup root 0 (hash k) k not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (nil? k)\n      (if (and has-nil? (identical? v nil-val))\n        coll\n        (PersistentHashMap. meta (if has-nil? cnt (inc cnt)) root true v nil))\n      (let [added-leaf? (Box. false)\n            new-root    (-> (if (nil? root)\n                              (.-EMPTY BitmapIndexedNode)\n                              root)\n                            (.inode-assoc 0 (hash k) k v added-leaf?))]\n        (if (identical? new-root root)\n          coll\n          (PersistentHashMap. meta (if ^boolean (.-val added-leaf?) (inc cnt) cnt) new-root has-nil? nil-val nil)))))\n\n  (-contains-key? [coll k]\n    (cond (nil? k)    has-nil?\n          (nil? root) false\n          :else       (not (identical? (.inode-lookup root 0 (hash k) k lookup-sentinel)\n                                       lookup-sentinel))))\n\n  IFind\n  (-find [coll k]\n    (cond\n      (nil? k) (when has-nil? (MapEntry. nil nil-val nil))\n      (nil? root) nil\n      :else (.inode-find root 0 (hash k) k nil)))\n\n  IMap\n  (-dissoc [coll k]\n    (cond (nil? k)    (if has-nil?\n                        (PersistentHashMap. meta (dec cnt) root false nil nil)\n                        coll)\n          (nil? root) coll\n          :else\n          (let [new-root (.inode-without root 0 (hash k) k)]\n            (if (identical? new-root root)\n              coll\n              (PersistentHashMap. meta (dec cnt) new-root has-nil? nil-val nil)))))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [init (if has-nil? (f init nil nil-val) init)]\n      (cond\n        (reduced? init)          @init\n        (not (nil? root)) (unreduced (.kv-reduce root f init))\n        :else                    init)))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientHashMap. (js-obj) root cnt has-nil? nil-val)))\n\n(set! (.-EMPTY PersistentHashMap) (PersistentHashMap. nil 0 nil false nil empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashMap)\n  (fn [arr ^boolean no-clone]\n    (let [arr (if no-clone arr (aclone arr))\n          len (alength arr)]\n      (loop [i 0 ret (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (recur (+ i 2)\n            (-assoc! ret (aget arr i) (aget arr (inc i))))\n          (-persistent! ret))))))\n\n(set! (.-fromArrays PersistentHashMap)\n  (fn [ks vs]\n    (let [len (alength ks)]\n      (loop [i 0 ^not-native out (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (if (<= (alength vs) i)\n            (throw (js\/Error. (str \"No value supplied for key: \" (aget ks i))))\n            (recur (inc i) (-assoc! out (aget ks i) (aget vs i))))\n          (persistent! out))))))\n\n(set! (.-createWithCheck PersistentHashMap)\n  (fn [arr]\n    (let [len (alength arr)\n          ret (transient (.-EMPTY PersistentHashMap))]\n      (loop [i 0]\n        (when (< i len)\n          (-assoc! ret (aget arr i) (aget arr (inc i)))\n          (if (not= (-count ret) (inc (\/ i 2)))\n            (throw (js\/Error. (str \"Duplicate key: \" (aget arr i))))\n            (recur (+ i 2)))))\n      (-persistent! ret))))\n\n(es6-iterable PersistentHashMap)\n\n(deftype TransientHashMap [^:mutable ^boolean edit\n                           ^:mutable root\n                           ^:mutable count\n                           ^:mutable ^boolean has-nil?\n                           ^:mutable nil-val]\n  Object\n  (conj! [tcoll o]\n    (if edit\n      (cond\n        (map-entry? o)\n        (.assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (.assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (.assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent\"))))\n\n  (assoc! [tcoll k v]\n    (if edit\n      (if (nil? k)\n        (do (if (identical? nil-val v)\n              nil\n              (set! nil-val v))\n            (if has-nil?\n              nil\n              (do (set! count (inc count))\n                  (set! has-nil? true)))\n            tcoll)\n        (let [added-leaf? (Box. false)\n              node        (-> (if (nil? root)\n                                (.-EMPTY BitmapIndexedNode)\n                                root)\n                              (.inode-assoc! edit 0 (hash k) k v added-leaf?))]\n          (if (identical? node root)\n            nil\n            (set! root node))\n          (if ^boolean (.-val added-leaf?)\n            (set! count (inc count)))\n          tcoll))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (without! [tcoll k]\n    (if edit\n      (if (nil? k)\n        (if has-nil?\n          (do (set! has-nil? false)\n              (set! nil-val nil)\n              (set! count (dec count))\n              tcoll)\n          tcoll)\n        (if (nil? root)\n          tcoll\n          (let [removed-leaf? (Box. false)\n                node (.inode-without! root edit 0 (hash k) k removed-leaf?)]\n            (if (identical? node root)\n              nil\n              (set! root node))\n            (if ^boolean (.-val removed-leaf?)\n              (set! count (dec count)))\n            tcoll)))\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  (persistent! [tcoll]\n    (if edit\n      (do (set! edit nil)\n          (PersistentHashMap. nil count root has-nil? nil-val nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ICounted\n  (-count [coll]\n    (if edit\n      count\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (if (nil? k)\n      (if has-nil?\n        nil-val)\n      (if (nil? root)\n        nil\n        (.inode-lookup root 0 (hash k) k))))\n\n  (-lookup [tcoll k not-found]\n    (if (nil? k)\n      (if has-nil?\n        nil-val\n        not-found)\n      (if (nil? root)\n        not-found\n        (.inode-lookup root 0 (hash k) k not-found))))\n\n  ITransientCollection\n  (-conj! [tcoll val] (.conj! tcoll val))\n\n  (-persistent! [tcoll] (.persistent! tcoll))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val] (.assoc! tcoll key val))\n\n  ITransientMap\n  (-dissoc! [tcoll key] (.without! tcoll key))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n;;; PersistentTreeMap\n\n(defn- tree-map-seq-push [node stack ^boolean ascending?]\n  (loop [t node stack stack]\n    (if-not (nil? t)\n      (recur (if ascending? (.-left t) (.-right t))\n             (conj stack t))\n      stack)))\n\n(deftype PersistentTreeMapSeq [meta stack ^boolean ascending? cnt ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISeqable\n  (-seq [this] this)\n\n  ISequential\n  ISeq\n  (-first [this] (peek stack))\n  (-rest [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (if-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil)\n        ())))\n  INext\n  (-next [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (when-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil))))\n\n  ICounted\n  (-count [coll]\n    (if (neg? cnt)\n      (inc (count (next coll)))\n      cnt))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMapSeq. new-meta stack ascending? cnt __hash)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentTreeMapSeq)\n\n(defn- create-tree-map-seq [tree ascending? cnt]\n  (PersistentTreeMapSeq. nil (tree-map-seq-push tree nil ascending?) ascending? cnt nil))\n\n(declare RedNode BlackNode)\n\n(defn- balance-left [key val ins right]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-left ins))\n      (RedNode. (.-key ins) (.-val ins)\n              (.blacken (.-left ins))\n              (BlackNode. key val (.-right ins) right nil)\n              nil)\n\n      (instance? RedNode (.-right ins))\n      (RedNode. (.. ins -right -key) (.. ins -right -val)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.-left ins)\n                            (.. ins -right -left)\n                            nil)\n                (BlackNode. key val\n                            (.. ins -right -right)\n                            right\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val ins right nil))\n    (BlackNode. key val ins right nil)))\n\n(defn- balance-right [key val left ins]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-right ins))\n      (RedNode. (.-key ins) (.-val ins)\n                (BlackNode. key val left (.-left ins) nil)\n                (.blacken (.-right ins))\n                nil)\n\n      (instance? RedNode (.-left ins))\n      (RedNode. (.. ins -left -key) (.. ins -left -val)\n                (BlackNode. key val left (.. ins -left -left) nil)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.. ins -left -right)\n                            (.-right ins)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val left ins nil))\n    (BlackNode. key val left ins nil)))\n\n(defn- balance-left-del [key val del right]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val (.blacken del) right nil)\n\n    (instance? BlackNode right)\n    (balance-right key val del (.redden right))\n\n    (and (instance? RedNode right) (instance? BlackNode (.-left right)))\n    (RedNode. (.. right -left -key) (.. right -left -val)\n              (BlackNode. key val del (.. right -left -left) nil)\n              (balance-right (.-key right) (.-val right)\n                             (.. right -left -right)\n                             (.redden (.-right right)))\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- balance-right-del [key val left del]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val left (.blacken del) nil)\n\n    (instance? BlackNode left)\n    (balance-left key val (.redden left) del)\n\n    (and (instance? RedNode left) (instance? BlackNode (.-right left)))\n    (RedNode. (.. left -right -key) (.. left -right -val)\n              (balance-left (.-key left) (.-val left)\n                            (.redden (.-left left))\n                            (.. left -right -left))\n              (BlackNode. key val (.. left -right -right) del nil)\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- tree-map-kv-reduce [node f init]\n  (let [init (if-not (nil? (.-left node))\n               (tree-map-kv-reduce (.-left node) f init)\n               init)]\n    (if (reduced? init)\n      init\n      (let [init (f init (.-key node) (.-val node))]\n        (if (reduced? init)\n          init\n          (if-not (nil? (.-right node))\n            (tree-map-kv-reduce (.-right node) f init)\n            init))))))\n\n(deftype BlackNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (.balance-left ins node))\n\n  (add-right [node ins]\n    (.balance-right ins node))\n\n  (remove-left [node del]\n    (balance-left-del key val del right))\n\n  (remove-right [node del]\n    (balance-right-del key val left del))\n\n  (blacken [node] node)\n\n  (redden [node] (RedNode. key val left right nil))\n\n  (balance-left [node parent]\n    (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil))\n\n  (balance-right [node parent]\n    (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil))\n\n  (replace [node key val left right]\n    (BlackNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable BlackNode)\n\n(deftype RedNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (RedNode. key val ins right nil))\n\n  (add-right [node ins]\n    (RedNode. key val left ins nil))\n\n  (remove-left [node del]\n    (RedNode. key val del right nil))\n\n  (remove-right [node del]\n    (RedNode. key val left del nil))\n\n  (blacken [node]\n    (BlackNode. key val left right nil))\n\n  (redden [node]\n    (throw (js\/Error. \"red-black tree invariant violation\")))\n\n  (balance-left [node parent]\n    (cond\n      (instance? RedNode left)\n      (RedNode. key val\n                (.blacken left)\n                (BlackNode. (.-key parent) (.-val parent) right (.-right parent) nil)\n                nil)\n\n      (instance? RedNode right)\n      (RedNode. (.-key right) (.-val right)\n                (BlackNode. key val left (.-left right) nil)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-right right)\n                            (.-right parent)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil)))\n\n  (balance-right [node parent]\n    (cond\n      (instance? RedNode right)\n      (RedNode. key val\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            left\n                            nil)\n                (.blacken right)\n                nil)\n\n      (instance? RedNode left)\n      (RedNode. (.-key left) (.-val left)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            (.-left left)\n                            nil)\n                (BlackNode. key val (.-right left) right nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil)))\n\n  (replace [node key val left right]\n    (RedNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable RedNode)\n\n(defn- tree-map-add [comp tree k v found]\n  (if (nil? tree)\n    (RedNode. k v nil nil nil)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            nil)\n\n        (neg? c)\n        (let [ins (tree-map-add comp (.-left tree) k v found)]\n          (if-not (nil? ins)\n            (.add-left tree ins)))\n\n        :else\n        (let [ins (tree-map-add comp (.-right tree) k v found)]\n          (if-not (nil? ins)\n            (.add-right tree ins)))))))\n\n(defn- tree-map-append [left right]\n  (cond\n    (nil? left)\n    right\n\n    (nil? right)\n    left\n\n    (instance? RedNode left)\n    (if (instance? RedNode right)\n      (let [app (tree-map-append (.-right left) (.-left right))]\n        (if (instance? RedNode app)\n          (RedNode. (.-key app) (.-val app)\n                    (RedNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                    (RedNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                    nil)\n          (RedNode. (.-key left) (.-val left)\n                    (.-left left)\n                    (RedNode. (.-key right) (.-val right) app (.-right right) nil)\n                    nil)))\n      (RedNode. (.-key left) (.-val left)\n                (.-left left)\n                (tree-map-append (.-right left) right)\n                nil))\n\n    (instance? RedNode right)\n    (RedNode. (.-key right) (.-val right)\n              (tree-map-append left (.-left right))\n              (.-right right)\n              nil)\n\n    :else\n    (let [app (tree-map-append (.-right left) (.-left right))]\n      (if (instance? RedNode app)\n        (RedNode. (.-key app) (.-val app)\n                  (BlackNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                  (BlackNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                  nil)\n        (balance-left-del (.-key left) (.-val left)\n                          (.-left left)\n                          (BlackNode. (.-key right) (.-val right)\n                                      app\n                                      (.-right right)\n                                      nil))))))\n\n(defn- tree-map-remove [comp tree k found]\n  (if-not (nil? tree)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            (tree-map-append (.-left tree) (.-right tree)))\n\n        (neg? c)\n        (let [del (tree-map-remove comp (.-left tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-left tree))\n              (balance-left-del (.-key tree) (.-val tree) del (.-right tree))\n              (RedNode. (.-key tree) (.-val tree) del (.-right tree) nil))))\n\n        :else\n        (let [del (tree-map-remove comp (.-right tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-right tree))\n              (balance-right-del (.-key tree) (.-val tree) (.-left tree) del)\n              (RedNode. (.-key tree) (.-val tree) (.-left tree) del nil))))))))\n\n(defn- tree-map-replace [comp tree k v]\n  (let [tk (.-key tree)\n        c  (comp k tk)]\n    (cond (zero? c) (.replace tree tk v (.-left tree) (.-right tree))\n          (neg? c)  (.replace tree tk (.-val tree) (tree-map-replace comp (.-left tree) k v) (.-right tree))\n          :else     (.replace tree tk (.-val tree) (.-left tree) (tree-map-replace comp (.-right tree) k v)))))\n\n(declare key)\n\n(deftype PersistentTreeMap [comp tree cnt meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  (entry-at [coll k]\n    (loop [t tree]\n      (if-not (nil? t)\n        (let [c (comp k (.-key t))]\n          (cond (zero? c) t\n                (neg? c)  (recur (.-left t))\n                :else     (recur (.-right t)))))))\n\n  ICloneable\n  (-clone [_] (PersistentTreeMap. comp tree cnt meta __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMap. comp tree cnt new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeMap. comp nil 0 meta 0))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (if-not (nil? tree)\n      (unreduced (tree-map-kv-reduce tree f init))\n      init))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  ISeqable\n  (-seq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree true cnt)))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree false cnt)))\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [n (.entry-at coll k)]\n      (if-not (nil? n)\n        (.-val n)\n        not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [found (array nil)\n          t     (tree-map-add comp tree k v found)]\n      (if (nil? t)\n        (let [found-node (nth found 0)]\n          (if (= v (.-val found-node))\n            coll\n            (PersistentTreeMap. comp (tree-map-replace comp tree k v) cnt meta nil)))\n        (PersistentTreeMap. comp (.blacken t) (inc cnt) meta nil))))\n\n  (-contains-key? [coll k]\n    (not (nil? (.entry-at coll k))))\n\n  IFind\n  (-find [coll k]\n    (.entry-at coll k))\n\n  IMap\n  (-dissoc [coll k]\n    (let [found (array nil)\n          t     (tree-map-remove comp tree k found)]\n      (if (nil? t)\n        (if (nil? (nth found 0))\n          coll\n          (PersistentTreeMap. comp nil 0 meta nil))\n        (PersistentTreeMap. comp (.blacken t) (dec cnt) meta nil))))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (if (pos? cnt)\n      (create-tree-map-seq tree ascending? cnt)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (if (pos? cnt)\n      (loop [stack nil t tree]\n        (if-not (nil? t)\n          (let [c (comp k (.-key t))]\n            (cond\n              (zero? c)  (PersistentTreeMapSeq. nil (conj stack t) ascending? -1 nil)\n              ascending? (if (neg? c)\n                           (recur (conj stack t) (.-left t))\n                           (recur stack          (.-right t)))\n              :else      (if (pos? c)\n                           (recur (conj stack t) (.-right t))\n                           (recur stack          (.-left t)))))\n          (when-not (nil? stack)\n            (PersistentTreeMapSeq. nil stack ascending? -1 nil))))))\n\n  (-entry-key [coll entry] (key entry))\n\n  (-comparator [coll] comp))\n\n(set! (.-EMPTY PersistentTreeMap) (PersistentTreeMap. compare nil 0 nil empty-unordered-hash))\n\n(es6-iterable PersistentTreeMap)\n\n(defn hash-map\n  \"keyval => key val\n  Returns a new hash map with supplied mappings.\"\n  [& keyvals]\n  (loop [in (seq keyvals), out (transient (.-EMPTY PersistentHashMap))]\n    (if in\n      (let [in' (next in)]\n        (if (nil? in')\n          (throw (js\/Error. (str \"No value supplied for key: \" (first in))))\n          (recur (next in') (assoc! out (first in) (first in')) )))\n      (persistent! out))))\n\n(defn array-map\n  \"keyval => key val\n  Returns a new array map with supplied mappings.\"\n  [& keyvals]\n  (let [arr (if (and (instance? IndexedSeq keyvals) (zero? (.-i keyvals)))\n              (.-arr keyvals)\n              (into-array keyvals))]\n    (if (odd? (alength arr))\n      (throw (js\/Error. (str \"No value supplied for key: \" (last arr))))\n      (.createAsIfByAssoc PersistentArrayMap arr))))\n\n(defn seq-to-map-for-destructuring\n  \"Builds a map from a seq as described in\n  https:\/\/clojure.org\/reference\/special_forms#keyword-arguments\"\n  [s]\n  (if (next s)\n    (.createAsIfByAssoc PersistentArrayMap (to-array s))\n    (if (seq s) (first s) (.-EMPTY PersistentArrayMap))))\n\n(defn obj-map\n  \"keyval => key val\n  Returns a new object map with supplied mappings.\"\n  [& keyvals]\n  (let [ks  (array)\n        obj (js-obj)]\n    (loop [kvs (seq keyvals)]\n      (if kvs\n        (do (.push ks (first kvs))\n            (gobject\/set obj (first kvs) (second kvs))\n            (recur (nnext kvs)))\n        (.fromObject ObjMap ks obj)))))\n\n(defn sorted-map\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings.\"\n  ([& keyvals]\n     (loop [in (seq keyvals) out (.-EMPTY PersistentTreeMap)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn sorted-map-by\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.\"\n  ([comparator & keyvals]\n     (loop [in (seq keyvals)\n            out (PersistentTreeMap. (fn->comparator comparator) nil 0 nil 0)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(deftype KeySeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (KeySeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-key me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (KeySeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (KeySeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable KeySeq)\n\n(defn keys\n  \"Returns a sequence of the map's keys, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (KeySeq. mseq nil)))\n\n(defn key\n  \"Returns the key of the map entry.\"\n  [map-entry]\n  (-key map-entry))\n\n(deftype ValSeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (ValSeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-val me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (ValSeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (ValSeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ValSeq)\n\n(defn vals\n  \"Returns a sequence of the map's values, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (ValSeq. mseq nil)))\n\n(defn val\n  \"Returns the value in the map entry.\"\n  [map-entry]\n  (-val map-entry))\n\n(defn merge\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.\"\n  [& maps]\n  (when (some identity maps)\n    (reduce #(conj (or %1 {}) %2) maps)))\n\n(defn merge-with\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).\"\n  [f & maps]\n  (when (some identity maps)\n    (let [merge-entry (fn [m e]\n                        (let [k (key e) v (val e)]\n                          (if (contains? m k)\n                            (assoc m k (f (get m k) v))\n                            (assoc m k v))))\n          merge2 (fn [m1 m2]\n                   (reduce merge-entry (or m1 {}) (seq m2)))]\n      (reduce merge2 maps))))\n\n(defn select-keys\n  \"Returns a map containing only those entries in map whose key is in keys\"\n  [map keyseq]\n    (loop [ret {} keys (seq keyseq)]\n      (if keys\n        (let [key   (first keys)\n              entry (get map key ::not-found)]\n          (recur\n           (if (not= entry ::not-found)\n             (assoc ret key entry)\n             ret)\n           (next keys)))\n        (-with-meta ret (meta map)))))\n\n;;; PersistentHashSet\n\n(declare TransientHashSet)\n\n(deftype HashSetIter [iter]\n  Object\n  (hasNext [_]\n    (.hasNext iter))\n  (next [_]\n    (if ^boolean (.hasNext iter)\n      (.-key (.next iter))\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashSet [meta hash-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashSet. meta hash-map __hash))\n\n  IIterable\n  (-iterator [coll]\n    (HashSetIter. (-iterator hash-map)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashSet. new-meta hash-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentHashSet. meta (assoc hash-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashSet) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true hash-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys hash-map))\n\n  ICounted\n  (-count [coll] (-count hash-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (if-let [entry (-find hash-map v)]\n      (key entry)\n      not-found))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentHashSet. meta (-dissoc hash-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll] (TransientHashSet. (-as-transient hash-map))))\n\n(set! (.-EMPTY PersistentHashSet)\n  (PersistentHashSet. nil (.-EMPTY PersistentArrayMap) empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashSet)\n  (fn [items ^boolean no-clone]\n    (let [len (alength items)]\n      (if (<= len (.-HASHMAP-THRESHOLD PersistentArrayMap))\n        (let [arr (if no-clone items (aclone items))]\n          (loop [i 0\n                 out (transient (.-EMPTY PersistentArrayMap))]\n            (if (< i len)\n              (recur (inc i) (-assoc! out (aget items i) nil))\n              (PersistentHashSet. nil (-persistent! out) nil))))\n       (loop [i 0\n              out (transient (.-EMPTY PersistentHashSet))]\n         (if (< i len)\n           (recur (inc i) (-conj! out (aget items i)))\n           (-persistent! out)))))))\n\n(set! (.-createWithCheck PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len]\n            (-conj! t (aget items i))\n            (when-not (= (count t) (inc i))\n              (throw (js\/Error. (str \"Duplicate key: \" (aget items i))))))\n          (-persistent! t))))\n\n(set! (.-createAsIfByAssoc PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len] (-conj! t (aget items i)))\n          (-persistent! t))))\n\n(es6-iterable PersistentHashSet)\n\n(deftype TransientHashSet [^:mutable transient-map]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (set! transient-map (assoc! transient-map o nil))\n    tcoll)\n\n  (-persistent! [tcoll]\n    (PersistentHashSet. nil (persistent! transient-map) nil))\n\n  ITransientSet\n  (-disjoin! [tcoll v]\n    (set! transient-map (dissoc! transient-map v))\n    tcoll)\n\n  ICounted\n  (-count [tcoll] (count transient-map))\n\n  ILookup\n  (-lookup [tcoll v]\n    (-lookup tcoll v nil))\n\n  (-lookup [tcoll v not-found]\n    (if (identical? (-lookup transient-map v lookup-sentinel) lookup-sentinel)\n      not-found\n      v))\n\n  IFn\n  (-invoke [tcoll k]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      nil\n      k))\n\n  (-invoke [tcoll k not-found]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      not-found\n      k)))\n\n(deftype PersistentTreeSet [meta tree-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentTreeSet. meta tree-map __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeSet. new-meta tree-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentTreeSet. meta (assoc tree-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeSet. meta (-empty tree-map) 0))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true tree-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys tree-map))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (map key (-sorted-seq tree-map ascending?)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (map key (-sorted-seq-from tree-map k ascending?)))\n\n  (-entry-key [coll entry] entry)\n\n  (-comparator [coll] (-comparator tree-map))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? (count tree-map))\n      (map key (rseq tree-map))))\n\n  ICounted\n  (-count [coll] (count tree-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (let [n (.entry-at tree-map v)]\n      (if-not (nil? n)\n        (.-key n)\n        not-found)))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentTreeSet. meta (dissoc tree-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n(set! (.-EMPTY PersistentTreeSet)\n  (PersistentTreeSet. nil (.-EMPTY PersistentTreeMap) empty-unordered-hash))\n\n(es6-iterable PersistentTreeSet)\n\n(defn set-from-indexed-seq [iseq]\n  (let [arr (.-arr iseq)\n        ret (areduce arr i ^not-native res (-as-transient #{})\n              (-conj! res (aget arr i)))]\n    (-persistent! ^not-native ret)))\n\n(defn set\n  \"Returns a set of the distinct elements of coll.\"\n  [coll]\n  (if (set? coll)\n    (with-meta coll nil)\n    (let [in (seq coll)]\n      (cond\n        (nil? in) #{}\n\n        (and (instance? IndexedSeq in) (zero? (.-i in)))\n        (.createAsIfByAssoc PersistentHashSet (.-arr in))\n\n        :else\n        (loop [^not-native in  in\n               ^not-native out (-as-transient #{})]\n          (if-not (nil? in)\n            (recur (next in) (-conj! out (-first in)))\n            (persistent! out)))))))\n\n(defn hash-set\n  \"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.\"\n  ([] #{})\n  ([& keys] (set keys)))\n\n(defn sorted-set\n  \"Returns a new sorted set with supplied keys.\"\n  ([& keys]\n   (reduce -conj (.-EMPTY PersistentTreeSet) keys)))\n\n(defn sorted-set-by\n  \"Returns a new sorted set with supplied keys, using the supplied comparator.\"\n  ([comparator & keys]\n   (reduce -conj\n           (PersistentTreeSet. nil (sorted-map-by comparator) 0)\n           keys)))\n\n(defn replace\n  \"Given a map of replacement pairs and a vector\/collection, returns a\n  vector\/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.\"\n  ([smap]\n     (map #(if-let [e (find smap %)] (val e) %)))\n  ([smap coll]\n     (if (vector? coll)\n       (let [n (count coll)]\n         (reduce (fn [v i]\n                   (if-let [e (find smap (nth v i))]\n                     (assoc v i (second e))\n                     v))\n           coll (take n (iterate inc 0))))\n       (map #(if-let [e (find smap %)] (second e) %) coll))))\n\n(defn distinct\n  \"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.\"\n  ([]\n    (fn [rf]\n      (let [seen (volatile! #{})]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if (contains? @seen input)\n              result\n              (do (vswap! seen conj input)\n                  (rf result input))))))))\n  ([coll]\n    (let [step (fn step [xs seen]\n                 (lazy-seq\n                   ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{}))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn butlast\n  \"Return a seq of all but the last item in coll, in linear time\"\n  [s]\n  (loop [ret [] s s]\n    (if (next s)\n      (recur (conj ret (first s)) (next s))\n      (seq ret))))\n\n(defn name\n  \"Returns the name String of a string, symbol or keyword.\"\n  [x]\n  (if (implements? INamed x)\n    (-name x)\n    (if (string? x)\n      x\n      (throw (js\/Error. (str \"Doesn't support name: \" x))))))\n\n(defn zipmap\n  \"Returns a map with the keys mapped to the corresponding vals.\"\n  [keys vals]\n    (loop [map (transient {})\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc! map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        (persistent! map))))\n\n(defn max-key\n  \"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (> (k x) (k y)) x y))\n  ([k x y & more]\n   (reduce #(max-key k %1 %2) (max-key k x y) more)))\n\n(defn min-key\n  \"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (< (k x) (k y)) x y))\n  ([k x y & more]\n     (reduce #(min-key k %1 %2) (min-key k x y) more)))\n\n(deftype ArrayList [^:mutable arr]\n  Object\n  (add [_ x] (.push arr x))\n  (size [_] (alength arr))\n  (clear [_] (set! arr (array)))\n  (isEmpty [_] (zero? (alength arr)))\n  (toArray [_] arr))\n\n(defn array-list []\n  (ArrayList. (array)))\n\n(defn partition-all\n  \"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   (fn [rf]\n     (let [a (array-list)]\n       (fn\n         ([] (rf))\n         ([result]\n            (let [result (if (.isEmpty a)\n                           result\n                           (let [v (vec (.toArray a))]\n                             ;;clear first!\n                             (.clear a)\n                             (unreduced (rf result v))))]\n              (rf result)))\n         ([result input]\n            (.add a input)\n            (if (== n (.size a))\n              (let [v (vec (.toArray a))]\n                (.clear a)\n                (rf result v))\n              result))))))\n  ([n coll]\n     (partition-all n n coll))\n  ([n step coll]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (take n s) (partition-all n step (drop step s)))))))\n\n(defn take-while\n  \"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (if (pred input)\n              (rf result input)\n              (reduced result))))))\n  ([pred coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (when (pred (first s))\n           (cons (first s) (take-while pred (rest s))))))))\n\n(defn mk-bound-fn\n  [sc test key]\n  (fn [e]\n    (let [comp (-comparator sc)]\n      (test (comp (-entry-key sc e) key) 0))))\n\n(defn subseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{> >=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key true)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc true)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc start-key true)]\n       (take-while (mk-bound-fn sc end-test end-key)\n                   (if ((mk-bound-fn sc start-test start-key) e) s (next s))))))\n\n(defn rsubseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{< <=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key false)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc false)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc end-key false)]\n       (take-while (mk-bound-fn sc start-test start-key)\n                   (if ((mk-bound-fn sc end-test end-key) e) s (next s))))))\n\n(deftype IntegerRangeChunk [start step count]\n  ICounted\n  (-count [coll] count)\n\n  ISeq\n  (-first [coll] start)\n\n  IIndexed\n  (-nth [coll i]\n    (+ start (* i step)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i count))\n      (+ start (* i step))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (<= count 1)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (IntegerRangeChunk. (+ start step) step (dec count)))))\n\n(deftype RangeIterator [^:mutable i end step]\n  Object\n  (hasNext [_]\n    (if (pos? step)\n      (< i end)\n      (> i end)))\n  (next [_]\n    (let [ret i]\n      (set! i (+ i step))\n      ret)))\n\n(deftype IntegerRange [meta start end step ^:mutable chunk ^:mutable chunk-next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n  (forceChunk [coll]\n    (when (nil? chunk)\n      (let [count (-count coll)]\n        (if (> count 32)\n          (do\n            (set! chunk-next (IntegerRange. nil (+ start (* step 32)) end step nil nil nil))\n            (set! chunk (IntegerRangeChunk. start step 32)))\n          (set! chunk (IntegerRangeChunk. start step count))))))\n\n  ICloneable\n  (-clone [_] (IntegerRange. meta start end step chunk chunk-next __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (IntegerRange. new-meta start end step chunk chunk-next __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (IntegerRange. nil (+ start step) end step nil nil nil))\n      (when (> (+ start step) end)\n        (IntegerRange. nil (+ start step) end step nil nil nil))))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (.forceChunk rng)\n    chunk)\n  (-chunked-rest [rng]\n    (.forceChunk rng)\n    (if (nil? chunk-next)\n      ()\n      chunk-next))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  ICounted\n  (-count [rng]\n    (Math\/ceil (\/ (- end start) step)))\n\n  IIndexed\n  (-nth [rng n]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [rng n not-found]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        not-found)))\n\n  IReduce\n  (-reduce [rng f] (ci-reduce rng f))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable IntegerRange)\n\n(deftype Range [meta start end step ^:mutable chunk ^:mutable chunk-next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n  (forceChunk [coll]\n    (when (nil? chunk)\n      (let [arr (make-array 32)\n            val (loop [n 0 val start]\n                  (if (< n 32)\n                    (do\n                      (aset arr n val)\n                      (let [n (inc n)\n                            val (+ val step)]\n                        (if (if (pos? step) (< val end) (> val end))\n                          (recur n val)\n                          (set! chunk (array-chunk arr 0 n)))))\n                    val))]\n        (when (nil? chunk)\n          (set! chunk (array-chunk arr 0 32))\n          (when (if (pos? step) (< val end) (> val end))\n            (set! chunk-next (Range. nil val end step nil nil nil)))))))\n\n  ICloneable\n  (-clone [_] (Range. meta start end step chunk chunk-next __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (Range. new-meta start end step chunk chunk-next __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))\n      (when (> (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (.forceChunk rng)\n    chunk)\n  (-chunked-rest [rng]\n    (.forceChunk rng)\n    (if (nil? chunk-next)\n      ()\n      chunk-next))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [rng f] (seq-reduce f rng))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable Range)\n\n(defn range\n  \"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.\"\n  ([] (range 0 (.-MAX_VALUE js\/Number) 1))\n  ([end] (range 0 end 1))\n  ([start end] (range start end 1))\n  ([start end step]\n   (cond\n     (pos? step)\n     (if (<= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step nil nil nil)\n         (Range. nil start end step nil nil nil)))\n\n     (neg? step)\n     (if (>= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step nil nil nil)\n         (Range. nil start end step nil nil nil)))\n\n     :else\n     (if (== end start)\n       ()\n       (repeat start)))))\n\n(defn take-nth\n  \"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [ia (volatile! -1)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [i (vswap! ia inc)]\n                (if (zero? (rem i n))\n                  (rf result input)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (cons (first s) (take-nth n (drop n s)))))))\n\n(defn split-with\n  \"Returns a vector of [(take-while pred coll) (drop-while pred coll)]\"\n  [pred coll]\n  [(take-while pred coll) (drop-while pred coll)])\n\n(defn partition-by\n  \"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.\"\n  ([f]\n     (fn [rf]\n       (let [a (array-list)\n             pa (volatile! ::none)]\n         (fn\n           ([] (rf))\n           ([result]\n              (let [result (if (.isEmpty a)\n                             result\n                             (let [v (vec (.toArray a))]\n                               ;;clear first!\n                               (.clear a)\n                               (unreduced (rf result v))))]\n                (rf result)))\n           ([result input]\n              (let [pval @pa\n                    val (f input)]\n                (vreset! pa val)\n                (if (or (keyword-identical? pval ::none)\n                        (= val pval))\n                  (do\n                    (.add a input)\n                    result)\n                  (let [v (vec (.toArray a))]\n                    (.clear a)\n                    (let [ret (rf result v)]\n                      (when-not (reduced? ret)\n                        (.add a input))\n                      ret)))))))))\n  ([f coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [fst (first s)\n               fv (f fst)\n               run (cons fst (take-while #(= fv (f %)) (next s)))]\n           (cons run (partition-by f (lazy-seq (drop (count run) s)))))))))\n\n(defn frequencies\n  \"Returns a map from distinct items in coll to the number of times\n  they appear.\"\n  [coll]\n  (persistent!\n   (reduce (fn [counts x]\n             (assoc! counts x (inc (get counts x 0))))\n           (transient {}) coll)))\n\n(defn reductions\n  \"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.\"\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (reductions f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (if (reduced? init)\n     (list @init)\n     (cons init\n       (lazy-seq\n         (when-let [s (seq coll)]\n           (reductions f (f init (first s)) (rest s))))))))\n\n(defn juxt\n  \"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]\"\n  ([f]\n     (fn\n       ([] (vector (f)))\n       ([x] (vector (f x)))\n       ([x y] (vector (f x y)))\n       ([x y z] (vector (f x y z)))\n       ([x y z & args] (vector (apply f x y z args)))))\n  ([f g]\n     (fn\n       ([] (vector (f) (g)))\n       ([x] (vector (f x) (g x)))\n       ([x y] (vector (f x y) (g x y)))\n       ([x y z] (vector (f x y z) (g x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (vector (f) (g) (h)))\n       ([x] (vector (f x) (g x) (h x)))\n       ([x y] (vector (f x y) (g x y) (h x y)))\n       ([x y z] (vector (f x y z) (g x y z) (h x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args) (apply h x y z args)))))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))\n\n(defn dorun\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.\"\n  ([coll]\n   (when-let [s (seq coll)]\n     (recur (next s))))\n  ([n coll]\n   (when (and (seq coll) (pos? n))\n     (recur (dec n) (next coll)))))\n\n(defn doall\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.\"\n  ([coll]\n   (dorun coll)\n   coll)\n  ([n coll]\n   (dorun n coll)\n   coll))\n\n;;;;;;;;;;;;;;;;;;;;;;;;; Regular Expressions ;;;;;;;;;;\n\n(defn regexp?\n  \"Returns true if x is a JavaScript RegExp instance.\"\n  [x]\n  (instance? js\/RegExp x))\n\n(defn re-matches\n  \"Returns the result of (re-find re s) if re fully matches s.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when (and (not (nil? matches))\n                 (= (aget matches 0) s))\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-matches must match against a string.\"))))\n\n\n(defn re-find\n  \"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when-not (nil? matches)\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-find must match against a string.\"))))\n\n(defn- re-seq* [re s]\n  (when-some [matches (.exec re s)]\n    (let [match-str (aget matches 0)\n          match-vals (if (== (.-length matches) 1)\n                       match-str\n                       (vec matches))]\n      (cons match-vals\n            (lazy-seq\n             (let [post-idx (+ (.-index matches)\n                               (max 1 (.-length match-str)))]\n               (when (<= post-idx (.-length s))\n                 (re-seq* re (subs s post-idx)))))))))\n\n(defn re-seq\n  \"Returns a lazy sequence of successive matches of re in s.\"\n  [re s]\n  (if (string? s)\n    (re-seq* re s)\n    (throw (js\/TypeError. \"re-seq must match against a string.\"))))\n\n(defn re-pattern\n  \"Returns an instance of RegExp which has compiled the provided string.\"\n  [s]\n  (if (instance? js\/RegExp s)\n    s\n    (let [[prefix flags] (re-find #\"^\\(\\?([idmsux]*)\\)\" s)\n          pattern (subs s (if (nil? prefix)\n                            0\n                            (count ^string prefix)))]\n      (js\/RegExp. pattern (or flags \"\")))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Printing ;;;;;;;;;;;;;;;;\n\n(defn pr-sequential-writer [writer print-one begin sep end opts coll]\n  (binding [*print-level* (when-not (nil? *print-level*) (dec *print-level*))]\n    (if (and (not (nil? *print-level*)) (neg? *print-level*))\n      (-write writer \"#\")\n      (do\n        (-write writer begin)\n        (if (zero? (:print-length opts))\n          (when (seq coll)\n            (-write writer (or (:more-marker opts) \"...\")))\n          (do\n            (when (seq coll)\n              (print-one (first coll) writer opts))\n            (loop [coll (next coll) n (dec (:print-length opts))]\n              (if (and coll (or (nil? n) (not (zero? n))))\n                (do\n                  (-write writer sep)\n                  (print-one (first coll) writer opts)\n                  (recur (next coll) (dec n)))\n                (when (and (seq coll) (zero? n))\n                  (-write writer sep)\n                  (-write writer (or (:more-marker opts) \"...\")))))))\n        (-write writer end)))))\n\n(defn write-all [writer & ss]\n  (doseq [s ss]\n    (-write writer s)))\n\n(defn string-print [x]\n  (when (nil? *print-fn*)\n    (throw (js\/Error. \"No *print-fn* fn set for evaluation environment\")))\n  (*print-fn* x)\n  nil)\n\n(defn flush [] ;stub\n  nil)\n\n(def ^:private char-escapes\n  (js-obj\n    \"\\\"\" \"\\\\\\\"\"\n    \"\\\\\" \"\\\\\\\\\"\n    \"\\b\" \"\\\\b\"\n    \"\\f\" \"\\\\f\"\n    \"\\n\" \"\\\\n\"\n    \"\\r\" \"\\\\r\"\n    \"\\t\" \"\\\\t\"))\n\n(defn ^:private quote-string\n  [s]\n  (str \\\"\n       (.replace s (js\/RegExp \"[\\\\\\\\\\\"\\b\\f\\n\\r\\t]\" \"g\")\n         (fn [match] (unchecked-get char-escapes match)))\n       \\\"))\n\n(declare print-map)\n\n(defn print-meta? [opts obj]\n  (and (boolean (get opts :meta))\n       (implements? IMeta obj)\n       (not (nil? (meta obj)))))\n\n(defn- pr-writer-impl\n  [obj writer opts]\n  (cond\n    (nil? obj) (-write writer \"nil\")\n    :else\n    (do\n      (when (print-meta? opts obj)\n        (-write writer \"^\")\n        (pr-writer (meta obj) writer opts)\n        (-write writer \" \"))\n      (cond\n        ;; handle CLJS ctors\n        ^boolean (.-cljs$lang$type obj)\n        (.cljs$lang$ctorPrWriter obj obj writer opts)\n\n        ; Use the new, more efficient, IPrintWithWriter interface when possible.\n        (satisfies? IPrintWithWriter obj)\n        (-pr-writer obj writer opts)\n\n        (or (true? obj) (false? obj))\n        (-write writer (str obj))\n\n        (number? obj)\n        (-write writer\n          (cond\n            ^boolean (js\/isNaN obj) \"##NaN\"\n            (identical? obj js\/Number.POSITIVE_INFINITY) \"##Inf\"\n            (identical? obj js\/Number.NEGATIVE_INFINITY) \"##-Inf\"\n            :else (str obj)))\n\n        (object? obj)\n        (do\n          (-write writer \"#js \")\n          (print-map\n            (map (fn [k]\n                   (MapEntry. (cond-> k (some? (re-matches #\"[A-Za-z_\\*\\+\\?!\\-'][\\w\\*\\+\\?!\\-']*\" k)) keyword) (unchecked-get obj k) nil))\n              (js-keys obj))\n            pr-writer writer opts))\n\n        (array? obj)\n        (pr-sequential-writer writer pr-writer \"#js [\" \" \" \"]\" opts obj)\n\n        (string? obj)\n        (if (:readably opts)\n          (-write writer (quote-string obj))\n          (-write writer obj))\n\n        (js-fn? obj)\n        (let [name (.-name obj)\n              name (if (or (nil? name) (gstring\/isEmpty name))\n                     \"Function\"\n                     name)]\n          (write-all writer \"#object[\" name\n            (if *print-fn-bodies*\n              (str \" \\\"\" (str obj) \"\\\"\")\n              \"\")\n            \"]\"))\n\n        (instance? js\/Date obj)\n        (let [normalize (fn [n len]\n                          (loop [ns (str n)]\n                            (if (< (count ns) len)\n                              (recur (str \"0\" ns))\n                              ns)))]\n          (write-all writer\n            \"#inst \\\"\"\n            (normalize (.getUTCFullYear obj) 4)     \"-\"\n            (normalize (inc (.getUTCMonth obj)) 2)  \"-\"\n            (normalize (.getUTCDate obj) 2)         \"T\"\n            (normalize (.getUTCHours obj) 2)        \":\"\n            (normalize (.getUTCMinutes obj) 2)      \":\"\n            (normalize (.getUTCSeconds obj) 2)      \".\"\n            (normalize (.getUTCMilliseconds obj) 3) \"-\"\n            \"00:00\\\"\"))\n\n        (regexp? obj) (write-all writer \"#\\\"\" (.-source obj) \"\\\"\")\n\n        (js-symbol? obj) (write-all writer \"#object[\" (.toString obj) \"]\" )\n\n        :else\n        (if (some-> obj .-constructor .-cljs$lang$ctorStr)\n          (write-all writer\n            \"#object[\" (.replace (.. obj -constructor -cljs$lang$ctorStr)\n                         (js\/RegExp. \"\/\" \"g\") \".\") \"]\")\n          (let [name (some-> obj .-constructor .-name)\n                name (if (or (nil? name) (gstring\/isEmpty name))\n                       \"Object\"\n                       name)]\n            (if (nil? (. obj -constructor))\n              (write-all writer \"#object[\" name \"]\")\n              (write-all writer \"#object[\" name \" \" (str obj) \"]\"))))))))\n\n(defn- pr-writer\n  \"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.\"\n  [obj writer opts]\n  (if-let [alt-impl (:alt-impl opts)]\n    (alt-impl obj writer (assoc opts :fallback-impl pr-writer-impl))\n    (pr-writer-impl obj writer opts)))\n\n(defn pr-seq-writer [objs writer opts]\n  (pr-writer (first objs) writer opts)\n  (doseq [obj (next objs)]\n    (-write writer \" \")\n    (pr-writer obj writer opts)))\n\n(defn- pr-sb-with-opts [objs opts]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (pr-seq-writer objs writer opts)\n    (-flush writer)\n    sb))\n\n(defn pr-str-with-opts\n  \"Prints a sequence of objects to a string, observing all the\n  options given in opts\"\n  [objs opts]\n  (if (empty? objs)\n    \"\"\n    (str (pr-sb-with-opts objs opts))))\n\n(defn prn-str-with-opts\n  \"Same as pr-str-with-opts followed by (newline)\"\n  [objs opts]\n  (if (empty? objs)\n    \"\\n\"\n    (let [sb (pr-sb-with-opts objs opts)]\n      (.append sb \\newline)\n      (str sb))))\n\n(defn- pr-with-opts\n  \"Prints a sequence of objects using string-print, observing all\n  the options given in opts\"\n  [objs opts]\n  (string-print (pr-str-with-opts objs opts)))\n\n(defn newline\n  \"Prints a newline using *print-fn*\"\n  ([] (newline nil))\n  ([opts]\n   (string-print \"\\n\")\n   (when (get opts :flush-on-newline)\n     (flush))))\n\n(defn pr-str\n  \"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.\"\n  [& objs]\n  (pr-str-with-opts objs (pr-opts)))\n\n(defn prn-str\n  \"Same as pr-str followed by (newline)\"\n  [& objs]\n  (prn-str-with-opts objs (pr-opts)))\n\n(defn pr\n  \"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader\"\n  [& objs]\n  (pr-with-opts objs (pr-opts)))\n\n(def ^{:doc\n  \"Prints the object(s) using string-print.\n  print and println produce output for human consumption.\"}\n  print\n  (fn cljs-core-print [& objs]\n    (pr-with-opts objs (assoc (pr-opts) :readably false))))\n\n(defn print-str\n  \"print to a string, returning it\"\n  [& objs]\n  (pr-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn println\n  \"Same as print followed by (newline)\"\n  [& objs]\n  (pr-with-opts objs (assoc (pr-opts) :readably false))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn println-str\n  \"println to a string, returning it\"\n  [& objs]\n  (prn-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn prn\n  \"Same as pr followed by (newline).\"\n  [& objs]\n  (pr-with-opts objs (pr-opts))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn- strip-ns\n  [named]\n  (if (symbol? named)\n    (symbol nil (name named))\n    (keyword nil (name named))))\n\n(defn- lift-ns\n  \"Returns [lifted-ns lifted-map] or nil if m can't be lifted.\"\n  [m]\n  (when *print-namespace-maps*\n    (loop [ns nil\n           [[k v :as entry] & entries] (seq m)\n           lm (empty m)]\n      (if entry\n        (when (or (keyword? k) (symbol? k))\n          (if ns\n            (when (= ns (namespace k))\n              (recur ns entries (assoc lm (strip-ns k) v)))\n            (when-let [new-ns (namespace k)]\n              (recur new-ns entries (assoc lm (strip-ns k) v)))))\n        [ns lm]))))\n\n(defn print-prefix-map [prefix m print-one writer opts]\n  (pr-sequential-writer\n    writer\n    (fn [e w opts]\n      (do (print-one (key e) w opts)\n          (-write w \\space)\n          (print-one (val e) w opts)))\n    (str prefix \"{\") \", \" \"}\"\n    opts (seq m)))\n\n(defn print-map [m print-one writer opts]\n  (let [[ns lift-map] (when (map? m)\n                        (lift-ns m))]\n    (if ns\n      (print-prefix-map (str \"#:\" ns) lift-map print-one writer opts)\n      (print-prefix-map nil m print-one writer opts))))\n\n(extend-protocol IPrintWithWriter\n  LazySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  TransformerIterator\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IndexedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  RSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentQueue\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#queue [\" \" \" \"]\" opts (seq coll)))\n\n  PersistentQueueSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentTreeMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  NodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ArrayNodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  List\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  EmptyList\n  (-pr-writer [coll writer opts] (-write writer \"()\"))\n\n  PersistentVector\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ChunkedCons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ChunkedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Subvec\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  BlackNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  RedNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  MapEntry\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ObjMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  KeySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ValSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentTreeMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  PersistentTreeSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  Range\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IntegerRange\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cycle\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Repeat\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Iterate\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ES6IteratorSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Atom\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Atom \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Volatile\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Volatile \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Var\n  (-pr-writer [a writer opts]\n    (-write writer \"#'\")\n    (pr-writer (.-sym a) writer opts)))\n\n;; IComparable\n(extend-protocol IComparable\n  Symbol\n  (-compare [x y]\n    (if (symbol? y)\n      (compare-symbols x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Keyword\n  (-compare [x y]\n    (if (keyword? y)\n      (compare-keywords x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Subvec\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  PersistentVector\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  MapEntry\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  BlackNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  RedNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reference Types ;;;;;;;;;;;;;;;;\n\n(defn alter-meta!\n  \"Atomically sets the metadata for a namespace\/var\/ref\/agent\/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects\"\n  [iref f & args]\n  (set! (.-meta iref) (apply f (.-meta iref) args)))\n\n(defn reset-meta!\n  \"Atomically resets the metadata for an atom\"\n  [iref m]\n  (set! (.-meta iref) m))\n\n(defn add-watch\n  \"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old\/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1\"\n  [iref key f]\n  (-add-watch iref key f)\n  iref)\n\n(defn remove-watch\n  \"Removes a watch (set by add-watch) from a reference\"\n  [iref key]\n  (-remove-watch iref key)\n  iref)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; gensym ;;;;;;;;;;;;;;;;\n;; Internal - do not use!\n(def\n  ^{:jsdoc [\"@type {*}\"]}\n  gensym_counter nil)\n\n(defn gensym\n  \"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.\"\n  ([] (gensym \"G__\"))\n  ([prefix-string]\n     (when (nil? gensym_counter)\n       (set! gensym_counter (atom 0)))\n     (symbol (str prefix-string (swap! gensym_counter inc)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Delay ;;;;;;;;;;;;;;;;;;;;\n\n(deftype Delay [^:mutable f ^:mutable value]\n  IDeref\n  (-deref [_]\n    (when f\n      (set! value (f))\n      (set! f nil))\n    value)\n\n  IPending\n  (-realized? [x]\n    (not f))\n\n  IPrintWithWriter\n  (-pr-writer [x writer opts]\n    (-write writer \"#object[cljs.core.Delay \")\n    (pr-writer {:status (if (nil? f) :ready :pending), :val value} writer opts)\n    (-write writer \"]\")))\n\n(defn delay?\n  \"returns true if x is a Delay created with delay\"\n  [x] (instance? Delay x))\n\n(defn force\n  \"If x is a Delay, returns the (possibly cached) value of its expression, else returns x\"\n  [x]\n  (if (delay? x)\n    (deref x)\n    x))\n\n(defn ^boolean realized?\n  \"Returns true if a value has been produced for a delay or lazy sequence.\"\n  [x]\n  (-realized? x))\n\n(defn- preserving-reduced\n  [rf]\n  #(let [ret (rf %1 %2)]\n     (if (reduced? ret)\n       (reduced ret)\n       ret)))\n\n(defn cat\n  \"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.\"\n  {:added \"1.7\"}\n  [rf]\n  (let [rf1 (preserving-reduced rf)]\n    (fn\n      ([] (rf))\n      ([result] (rf result))\n      ([result input]\n         (reduce rf1 result input)))))\n\n(defn halt-when\n  \"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.\"\n  {:added \"1.9\"}\n  ([pred] (halt-when pred nil))\n  ([pred retf]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result]\n            (if (and (map? result) (contains? result ::halt))\n              (::halt result)\n              (rf result)))\n         ([result input]\n            (if (pred input)\n              (reduced {::halt (if retf (retf (rf result) input) input)})\n              (rf result input)))))))\n\n(defn dedupe\n  \"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.\"\n  ([]\n   (fn [rf]\n     (let [pa (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [prior @pa]\n              (vreset! pa input)\n              (if (= prior input)\n                result\n                (rf result input))))))))\n  ([coll] (sequence (dedupe) coll)))\n\n(declare rand)\n\n(defn random-sample\n  \"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.\"\n  ([prob]\n     (filter (fn [_] (< (rand) prob))))\n  ([prob coll]\n     (filter (fn [_] (< (rand) prob)) coll)))\n\n(deftype Eduction [xform coll]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISequential\n\n  IIterable\n  (-iterator [_]\n    (.create TransformerIterator xform (iter coll)))\n\n  ISeqable\n  (-seq [_] (seq (sequence xform coll)))\n\n  IReduce\n  (-reduce [_ f] (transduce xform (completing f) coll))\n  (-reduce [_ f init] (transduce xform (completing f) init coll))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll)))\n\n(es6-iterable Eduction)\n\n(defn eduction\n  \"Returns a reducible\/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce\/iterator is called.\"\n  {:arglists '([xform* coll])}\n  [& xforms]\n  (Eduction. (apply comp (butlast xforms)) (last xforms)))\n\n(defn run!\n  \"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil\"\n  [proc coll]\n  (reduce #(proc %2) nil coll)\n  nil)\n\n(defn iteration\n  \"Creates a seqable\/reducible via repeated calls to step,\n  a function of some (continuation token) 'k'. The first call to step\n  will be passed initk, returning 'ret'. Iff (somef ret) is true,\n  (vf ret) will be included in the iteration, else iteration will\n  terminate and vf\/kf will not be called. If (kf ret) is non-nil it\n  will be passed to the next step call, else iteration will terminate.\n  This can be used e.g. to consume APIs that return paginated or batched data.\n   step - (possibly impure) fn of 'k' -> 'ret'\n   :somef - fn of 'ret' -> logical true\/false, default 'some?'\n   :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'\n   :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'\n   :initk - the first value passed to step, default 'nil'\n  It is presumed that step with non-initk is unreproducible\/non-idempotent.\n  If step with initk is unreproducible it is on the consumer to not consume twice.\"\n  {:added \"1.11\"}\n  [step & {:keys [somef vf kf initk]\n           :or {vf identity\n                kf identity\n                somef some?\n                initk nil}}]\n  (reify\n    ISeqable\n    (-seq [_]\n      ((fn next [ret]\n         (when (somef ret)\n           (cons (vf ret)\n             (when-some [k (kf ret)]\n               (lazy-seq (next (step k)))))))\n       (step initk)))\n    IReduce\n    (-reduce [_ rf init]\n      (loop [acc init\n             ret (step initk)]\n        (if (somef ret)\n          (let [acc (rf acc (vf ret))]\n            (if (reduced? acc)\n              @acc\n              (if-some [k (kf ret)]\n                (recur acc (step k))\n                acc)))\n          acc)))))\n\n(defprotocol IEncodeJS\n  (-clj->js [x] \"Recursively transforms clj values to JavaScript\")\n  (-key->js [x] \"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)\"))\n\n(declare clj->js)\n\n(defn key->js\n  ([k] (key->js k clj->js))\n  ([k primitive-fn]\n   (cond\n     (satisfies? IEncodeJS k) (-clj->js k)\n     (or (string? k)\n         (number? k)\n         (keyword? k)\n         (symbol? k)) (primitive-fn k)\n     :default (pr-str k))))\n\n(defn clj->js\n  \"Recursively transforms ClojureScript values to JavaScript.\n  sets\/vectors\/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.\"\n  [x & {:keys [keyword-fn]\n        :or   {keyword-fn name}\n        :as options}]\n  (letfn [(keyfn [k] (key->js k thisfn))\n          (thisfn [x] (cond\n                        (nil? x) nil\n                        (satisfies? IEncodeJS x) (-clj->js x)\n                        (keyword? x) (keyword-fn x)\n                        (symbol? x) (str x)\n                        (map? x) (let [m (js-obj)]\n                                   (doseq [[k v] x]\n                                     (gobject\/set m (keyfn k) (thisfn v)))\n                                   m)\n                        (coll? x) (let [arr (array)]\n                                    (doseq [x (map thisfn x)]\n                                      (.push arr x))\n                                    arr)\n                        :else x))]\n    (thisfn x)))\n\n\n(defprotocol IEncodeClojure\n  (-js->clj [x options] \"Transforms JavaScript values to Clojure\"))\n\n(defn js->clj\n  \"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.\"\n  ([x] (js->clj x :keywordize-keys false))\n  ([x & opts]\n    (let [{:keys [keywordize-keys]} opts\n          keyfn (if keywordize-keys keyword str)\n          f (fn thisfn [x]\n              (cond\n                (satisfies? IEncodeClojure x)\n                (-js->clj x (apply array-map opts))\n\n                (seq? x)\n                (doall (map thisfn x))\n\n                (map-entry? x)\n                (MapEntry. (thisfn (key x)) (thisfn (val x)) nil)\n\n                (coll? x)\n                (into (empty x) (map thisfn) x)\n\n                (array? x)\n                (persistent!\n                 (reduce #(conj! %1 (thisfn %2))\n                         (transient []) x))\n\n                (identical? (type x) js\/Object)\n                (persistent!\n                 (reduce (fn [r k] (assoc! r (keyfn k) (thisfn (gobject\/get x k))))\n                         (transient {}) (js-keys x)))\n                :else x))]\n      (f x))))\n\n(defn memoize\n  \"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.\"\n  [f]\n  (let [mem (atom {})]\n    (fn [& args]\n      (let [v (get @mem args lookup-sentinel)]\n        (if (identical? v lookup-sentinel)\n          (let [ret (apply f args)]\n            (swap! mem assoc args ret)\n            ret)\n          v)))))\n\n(defn trampoline\n  \"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.\"\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampoline #(apply f args))))\n\n(defn rand\n  \"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).\"\n  ([] (rand 1))\n  ([n] (* (Math\/random) n)))\n\n(defn rand-int\n  \"Returns a random integer between 0 (inclusive) and n (exclusive).\"\n  [n] (Math\/floor (* (Math\/random) n)))\n\n(defn rand-nth\n  \"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.\"\n  [coll]\n  (nth coll (rand-int (count coll))))\n\n(defn group-by\n  \"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.\"\n  [f coll]\n  (persistent!\n    (reduce\n      (fn [ret x]\n        (let [k (f x)]\n          (assoc! ret k (conj (get ret k []) x))))\n      (transient {}) coll)))\n\n(defn make-hierarchy\n  \"Creates a hierarchy object for use with derive, isa? etc.\"\n  [] {:parents {} :descendants {} :ancestors {}})\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  -global-hierarchy nil)\n\n(defn- get-global-hierarchy []\n  (when (nil? -global-hierarchy)\n    (set! -global-hierarchy (atom (make-hierarchy))))\n  -global-hierarchy)\n\n(defn- swap-global-hierarchy! [f & args]\n  (apply swap! (get-global-hierarchy) f args))\n\n(defn ^boolean isa?\n  \"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy\"\n  ([child parent] (isa? @(get-global-hierarchy) child parent))\n  ([h child parent]\n     (or (= child parent)\n         ;; (and (class? parent) (class? child)\n         ;;    (. ^Class parent isAssignableFrom child))\n         (contains? ((:ancestors h) child) parent)\n         ;;(and (class? child) (some #(contains? ((:ancestors h) %) parent) (supers child)))\n         (and (vector? parent) (vector? child)\n              (== (count parent) (count child))\n              (loop [ret true i 0]\n                (if (or (not ret) (== i (count parent)))\n                  ret\n                  (recur (isa? h (child i) (parent i)) (inc i))))))))\n\n(defn parents\n  \"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (parents @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:parents h) tag))))\n\n(defn ancestors\n  \"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (ancestors @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:ancestors h) tag))))\n\n(defn descendants\n  \"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.\"\n  ([tag] (descendants @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:descendants h) tag))))\n\n(defn derive\n  \"Establishes a parent\/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n   (assert (namespace parent))\n   ;; (assert (or (class? tag) (and (instance? cljs.core.Named tag) (namespace tag))))\n   (swap-global-hierarchy! derive tag parent) nil)\n  ([h tag parent]\n   (assert (not= tag parent))\n   ;; (assert (or (class? tag) (instance? clojure.lang.Named tag)))\n   ;; (assert (instance? clojure.lang.INamed tag))\n   ;; (assert (instance? clojure.lang.INamed parent))\n   (let [tp (:parents h)\n         td (:descendants h)\n         ta (:ancestors h)\n         tf (fn [m source sources target targets]\n              (reduce (fn [ret k]\n                        (assoc ret k\n                               (reduce conj (get targets k #{}) (cons target (targets target)))))\n                      m (cons source (sources source))))]\n     (or\n      (when-not (contains? (tp tag) parent)\n        (when (contains? (ta tag) parent)\n          (throw (js\/Error. (str tag \"already has\" parent \"as ancestor\"))))\n        (when (contains? (ta parent) tag)\n          (throw (js\/Error. (str \"Cyclic derivation:\" parent \"has\" tag \"as ancestor\"))))\n        {:parents (assoc (:parents h) tag (conj (get tp tag #{}) parent))\n         :ancestors (tf (:ancestors h) tag td parent ta)\n         :descendants (tf (:descendants h) parent ta tag td)})\n      h))))\n\n(defn underive\n  \"Removes a parent\/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n    (swap-global-hierarchy! underive tag parent)\n    nil)\n  ([h tag parent]\n    (let [parentMap (:parents h)\n          childsParents (if (parentMap tag)\n                          (disj (parentMap tag) parent) #{})\n          newParents (if (not-empty childsParents)\n                      (assoc parentMap tag childsParents)\n                      (dissoc parentMap tag))\n          deriv-seq (flatten (map #(cons (first %) (interpose (first %) (second %)))\n                                  (seq newParents)))]\n      (if (contains? (parentMap tag) parent)\n        (reduce #(apply derive %1 %2) (make-hierarchy)\n                (partition 2 deriv-seq))\n        h))))\n\n(defn- reset-cache\n  [method-cache method-table cached-hierarchy hierarchy]\n  (swap! method-cache (fn [_] (deref method-table)))\n  (swap! cached-hierarchy (fn [_] (deref hierarchy))))\n\n(defn- prefers*\n  [x y prefer-table]\n  (let [xprefs (@prefer-table x)]\n    (or\n     (when (and xprefs (xprefs y))\n       true)\n     (loop [ps (parents y)]\n       (when (pos? (count ps))\n         (when (prefers* x (first ps) prefer-table)\n           true)\n         (recur (rest ps))))\n     (loop [ps (parents x)]\n       (when (pos? (count ps))\n         (when (prefers* (first ps) y prefer-table)\n           true)\n         (recur (rest ps))))\n     false)))\n\n(defn- dominates\n  [x y prefer-table hierarchy]\n  (or (prefers* x y prefer-table) (isa? hierarchy x y)))\n\n(defn- find-and-cache-best-method\n  [name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy default-dispatch-val]\n  (let [best-entry (reduce (fn [be [k _ :as e]]\n                             (if (isa? @hierarchy dispatch-val k)\n                               (let [be2 (if (or (nil? be) (dominates k (first be) prefer-table @hierarchy))\n                                           e\n                                           be)]\n                                 (when-not (dominates (first be2) k prefer-table @hierarchy)\n                                   (throw (js\/Error.\n                                            (str \"Multiple methods in multimethod '\" name\n                                              \"' match dispatch value: \" dispatch-val \" -> \" k\n                                              \" and \" (first be2) \", and neither is preferred\"))))\n                                 be2)\n                               be))\n                     nil @method-table)\n        best-entry (if-let [entry (and (nil? best-entry) (@method-table default-dispatch-val))]\n                     [default-dispatch-val entry]\n                     best-entry)]\n    (when best-entry\n      (if (= @cached-hierarchy @hierarchy)\n        (do\n          (swap! method-cache assoc dispatch-val (second best-entry))\n          (second best-entry))\n        (do\n          (reset-cache method-cache method-table cached-hierarchy hierarchy)\n          (find-and-cache-best-method name dispatch-val hierarchy method-table prefer-table\n            method-cache cached-hierarchy default-dispatch-val))))))\n\n(defprotocol IMultiFn\n  (-reset [mf])\n  (-add-method [mf dispatch-val method])\n  (-remove-method [mf dispatch-val])\n  (-prefer-method [mf dispatch-val dispatch-val-y])\n  (-get-method [mf dispatch-val])\n  (-methods [mf])\n  (-prefers [mf])\n  (-default-dispatch-val [mf])\n  (-dispatch-fn [mf]))\n\n(defn- throw-no-method-error [name dispatch-val]\n  (throw (js\/Error. (str \"No method in multimethod '\" name \"' for dispatch value: \" dispatch-val))))\n\n(deftype MultiFn [name dispatch-fn default-dispatch-val hierarchy\n                  method-table prefer-table method-cache cached-hierarchy]\n  IFn\n  (-invoke [mf]\n    (let [dispatch-val (dispatch-fn)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn)))\n  (-invoke [mf a]\n    (let [dispatch-val (dispatch-fn a)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a)))\n  (-invoke [mf a b]\n    (let [dispatch-val (dispatch-fn a b)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b)))\n  (-invoke [mf a b c]\n    (let [dispatch-val (dispatch-fn a b c)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c)))\n  (-invoke [mf a b c d]\n    (let [dispatch-val (dispatch-fn a b c d)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d)))\n  (-invoke [mf a b c d e]\n    (let [dispatch-val (dispatch-fn a b c d e)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e)))\n  (-invoke [mf a b c d e f]\n    (let [dispatch-val (dispatch-fn a b c d e f)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f)))\n  (-invoke [mf a b c d e f g]\n    (let [dispatch-val (dispatch-fn a b c d e f g)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g)))\n  (-invoke [mf a b c d e f g h]\n    (let [dispatch-val (dispatch-fn a b c d e f g h)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h)))\n  (-invoke [mf a b c d e f g h i]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i)))\n  (-invoke [mf a b c d e f g h i j]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j)))\n  (-invoke [mf a b c d e f g h i j k]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k)))\n  (-invoke [mf a b c d e f g h i j k l]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l)))\n  (-invoke [mf a b c d e f g h i j k l m]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m)))\n  (-invoke [mf a b c d e f g h i j k l m n]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n)))\n  (-invoke [mf a b c d e f g h i j k l m n o]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o)))\n  (-invoke [mf a b c d e f g h i j k l m n o p]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s t)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s t)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t rest]\n    (let [dispatch-val (apply dispatch-fn a b c d e f g h i j k l m n o p q r s t rest)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (apply target-fn a b c d e f g h i j k l m n o p q r s t rest)))\n\n  IMultiFn\n  (-reset [mf]\n    (swap! method-table (fn [mf] {}))\n    (swap! method-cache (fn [mf] {}))\n    (swap! prefer-table (fn [mf] {}))\n    (swap! cached-hierarchy (fn [mf] nil))\n    mf)\n\n  (-add-method [mf dispatch-val method]\n    (swap! method-table assoc dispatch-val method)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-remove-method [mf dispatch-val]\n    (swap! method-table dissoc dispatch-val)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-get-method [mf dispatch-val]\n    (when-not (= @cached-hierarchy @hierarchy)\n      (reset-cache method-cache method-table cached-hierarchy hierarchy))\n    (if-let [target-fn (@method-cache dispatch-val)]\n      target-fn\n      (find-and-cache-best-method name dispatch-val hierarchy method-table\n        prefer-table method-cache cached-hierarchy default-dispatch-val)))\n\n  (-prefer-method [mf dispatch-val-x dispatch-val-y]\n    (when (prefers* dispatch-val-y dispatch-val-x  prefer-table)\n      (throw (js\/Error. (str \"Preference conflict in multimethod '\" name \"': \" dispatch-val-y\n                   \" is already preferred to \" dispatch-val-x))))\n    (swap! prefer-table\n           (fn [old]\n             (assoc old dispatch-val-x\n                    (conj (get old dispatch-val-x #{})\n                          dispatch-val-y))))\n    (reset-cache method-cache method-table cached-hierarchy hierarchy))\n\n  (-methods [mf] @method-table)\n  (-prefers [mf] @prefer-table)\n  (-default-dispatch-val [mf] default-dispatch-val)\n  (-dispatch-fn [mf] dispatch-fn)\n\n  INamed\n  (-name [this] (-name name))\n  (-namespace [this] (-namespace name))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn remove-all-methods\n  \"Removes all of the methods of multimethod.\"\n [multifn]\n (-reset multifn))\n\n(defn remove-method\n  \"Removes the method of multimethod associated with dispatch-value.\"\n [multifn dispatch-val]\n (-remove-method multifn dispatch-val))\n\n(defn prefer-method\n  \"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict\"\n  [multifn dispatch-val-x dispatch-val-y]\n  (-prefer-method multifn dispatch-val-x dispatch-val-y))\n\n(defn methods\n  \"Given a multimethod, returns a map of dispatch values -> dispatch fns\"\n  [multifn] (-methods multifn))\n\n(defn get-method\n  \"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default\"\n  [multifn dispatch-val] (-get-method multifn dispatch-val))\n\n(defn prefers\n  \"Given a multimethod, returns a map of preferred value -> set of other values\"\n  [multifn] (-prefers multifn))\n\n(defn default-dispatch-val\n  \"Given a multimethod, return its default-dispatch-val.\"\n  [multifn] (-default-dispatch-val multifn))\n\n(defn dispatch-fn\n  \"Given a multimethod, return its dispatch-fn.\"\n  [multifn] (-dispatch-fn multifn))\n\n;; UUID\n(defprotocol IUUID \"A marker protocol for UUIDs\")\n\n(deftype UUID [uuid ^:mutable __hash]\n  IUUID\n\n  Object\n  (toString [_] uuid)\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? UUID other) (identical? uuid (.-uuid other))))\n\n  IPrintWithWriter\n  (-pr-writer [_ writer _]\n    (-write writer (str \"#uuid \\\"\" uuid \"\\\"\")))\n\n  IHash\n  (-hash [this]\n    (when (nil? __hash)\n      (set! __hash (hash uuid)))\n    __hash)\n\n  IComparable\n  (-compare [this other]\n    (if (instance? UUID other)\n      (garray\/defaultCompare uuid (.-uuid other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defn uuid\n  \"Returns a UUID consistent with the string s.\"\n  [s]\n  (assert (string? s))\n  (UUID. (.toLowerCase s) nil))\n\n(defn random-uuid\n  \"Returns a pseudo-randomly generated UUID instance (i.e. type 4).\"\n  []\n  (letfn [(hex [] (.toString (rand-int 16) 16))]\n    (let [rhex (.toString (bit-or 0x8 (bit-and 0x3 (rand-int 16))) 16)]\n      (uuid\n        (str (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex) \"-\"\n             (hex) (hex) (hex) (hex) \"-\"\n             \"4\"   (hex) (hex) (hex) \"-\"\n             rhex  (hex) (hex) (hex) \"-\"\n             (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex))))))\n\n(defn uuid?\n  \"Return true if x is a UUID.\"\n  [x] (implements? IUUID x))\n\n;;; ExceptionInfo\n\n(defn- pr-writer-ex-info [obj writer opts]\n  (-write writer \"#error {:message \")\n  (pr-writer (.-message obj) writer opts)\n  (when (.-data obj)\n    (-write writer \", :data \")\n    (pr-writer (.-data obj) writer opts))\n  (when (.-cause obj)\n    (-write writer \", :cause \")\n    (pr-writer (.-cause obj) writer opts))\n  (-write writer \"}\"))\n\n(defn ^{:jsdoc [\"@constructor\"]}\n  ExceptionInfo [message data cause]\n  (let [e (js\/Error. message)]\n    (this-as this\n      (set! (.-message this) message)\n      (set! (.-data this) data)\n      (set! (.-cause this) cause)\n      (do\n        (set! (.-name this) (.-name e))\n        ;; non-standard\n        (set! (.-description this) (.-description e))\n        (set! (.-number this) (.-number e))\n        (set! (.-fileName this) (.-fileName e))\n        (set! (.-lineNumber this) (.-lineNumber e))\n        (set! (.-columnNumber this) (.-columnNumber e))\n        (set! (.-stack this) (.-stack e)))\n      this)))\n\n(set! (.. ExceptionInfo -prototype -__proto__) js\/Error.prototype)\n\n(extend-type ExceptionInfo\n  IPrintWithWriter\n  (-pr-writer [obj writer opts]\n    (pr-writer-ex-info obj writer opts)))\n\n(set! (.. ExceptionInfo -prototype -toString)\n  (fn []\n    (this-as this (pr-str* this))))\n\n(defn ex-info\n  \"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.\"\n  ([msg data] (ex-info msg data nil))\n  ([msg data cause]\n    (ExceptionInfo. msg data cause)))\n\n(defn ex-data\n  \"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-data ex)))\n\n(defn ex-message\n  \"Returns the message attached to the given Error \/ ExceptionInfo object.\n  For non-Errors returns nil.\"\n  [ex]\n  (when (instance? js\/Error ex)\n    (.-message ex)))\n\n(defn ex-cause\n  \"Returns exception cause (an Error \/ ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-cause ex)))\n\n(defn comparator\n  \"Returns an JavaScript compatible comparator based upon pred.\"\n  [pred]\n  (fn [x y]\n    (cond (pred x y) -1 (pred y x) 1 :else 0)))\n\n(defn ^boolean special-symbol?\n  \"Returns true if x names a special form\"\n  [x]\n  (contains?\n    '#{if def fn* do let* loop* letfn* throw try catch finally\n       recur new set! ns deftype* defrecord* . js* & quote case* var ns*}\n    x))\n\n(defn test\n  \"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception\"\n  [v]\n  (let [f (.-cljs$lang$test v)]\n    (if f\n      (do (f) :ok)\n      :no-test)))\n\n\n(deftype TaggedLiteral [tag form]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IEquiv\n  (-equiv [this other]\n    (and (instance? TaggedLiteral other)\n         (= tag (.-tag other))\n         (= form (.-form other))))\n\n  IHash\n  (-hash [this]\n    (+ (* 31 (hash tag))\n       (hash form)))\n\n  ILookup\n  (-lookup [this v]\n    (-lookup this v nil))\n  (-lookup [this v not-found]\n    (case v\n      :tag tag\n      :form form\n      not-found))\n\n  IPrintWithWriter\n  (-pr-writer [o writer opts]\n    (-write writer (str \"#\" tag \" \"))\n    (pr-writer form writer opts)))\n\n(defn tagged-literal?\n  \"Return true if the value is the data representation of a tagged literal\"\n  [value]\n  (instance? TaggedLiteral value))\n\n(defn tagged-literal\n  \"Construct a data representation of a tagged literal from a\n  tag symbol and a form.\"\n  [tag form]\n  {:pre [(symbol? tag)]}\n  (TaggedLiteral. tag form))\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  js-reserved-arr\n  #js [\"arguments\" \"abstract\" \"await\" \"boolean\" \"break\" \"byte\" \"case\"\n       \"catch\" \"char\" \"class\" \"const\" \"continue\"\n       \"debugger\" \"default\" \"delete\" \"do\" \"double\"\n       \"else\" \"enum\" \"export\" \"extends\" \"final\"\n       \"finally\" \"float\" \"for\" \"function\" \"goto\" \"if\"\n       \"implements\" \"import\" \"in\" \"instanceof\" \"int\"\n       \"interface\" \"let\" \"long\" \"native\" \"new\"\n       \"package\" \"private\" \"protected\" \"public\"\n       \"return\" \"short\" \"static\" \"super\" \"switch\"\n       \"synchronized\" \"this\" \"throw\" \"throws\"\n       \"transient\" \"try\" \"typeof\" \"var\" \"void\"\n       \"volatile\" \"while\" \"with\" \"yield\" \"methods\"\n       \"null\" \"constructor\"])\n\n(def\n  ^{:jsdoc [\"@type {null|Object}\"]}\n  js-reserved nil)\n\n(defn- js-reserved? [x]\n  (when (nil? js-reserved)\n    (set! js-reserved\n      (reduce #(do (gobject\/set %1 %2 true) %1)\n        #js {} js-reserved-arr)))\n  (.hasOwnProperty js-reserved x))\n\n(defn- demunge-pattern []\n  (when-not DEMUNGE_PATTERN\n    (set! DEMUNGE_PATTERN\n      (let [ks (sort (fn [a b] (- (. b -length) (. a -length)))\n                 (js-keys DEMUNGE_MAP))]\n        (loop [ks ks ret \"\"]\n          (if (seq ks)\n            (recur\n              (next ks)\n              (str\n                (cond-> ret\n                  (not (identical? ret \"\")) (str \"|\"))\n                (first ks)))\n            (str ret \"|\\\\$\"))))))\n  DEMUNGE_PATTERN)\n\n(defn- ^string munge-str [name]\n  (let [sb (StringBuffer.)]\n    (loop [i 0]\n      (if (< i (. name -length))\n        (let [c (.charAt name i)\n              sub (gobject\/get CHAR_MAP c)]\n          (if-not (nil? sub)\n            (.append sb sub)\n            (.append sb c))\n          (recur (inc i)))))\n    (.toString sb)))\n\n(defn munge [name]\n  (let [name' (munge-str (str name))\n        name' (cond\n                (identical? name' \"..\") \"_DOT__DOT_\"\n                (js-reserved? name') (str name' \"$\")\n                :else name')]\n    (if (symbol? name)\n      (symbol name')\n      name')))\n\n(defn- demunge-str [munged-name]\n  (let [r (js\/RegExp. (demunge-pattern) \"g\")\n        munged-name (if (gstring\/endsWith munged-name \"$\")\n                      (.substring munged-name 0 (dec (. munged-name -length)))\n                      munged-name)]\n    (loop [ret \"\" last-match-end 0]\n      (if-let [match (.exec r munged-name)]\n        (let [[x] match]\n          (recur\n            (str ret\n              (.substring munged-name last-match-end\n                (- (. r -lastIndex) (. x -length)))\n              (if (identical? x \"$\") \"\/\" (gobject\/get DEMUNGE_MAP x)))\n            (. r -lastIndex)))\n        (str ret\n          (.substring munged-name last-match-end (.-length munged-name)))))))\n\n(defn demunge [name]\n  ((if (symbol? name) symbol str)\n    (let [name' (str name)]\n      (if (identical? name' \"_DOT__DOT_\")\n        \"..\"\n        (demunge-str name')))))\n\n(defonce ^{:jsdoc [\"@type {*}\"] :private true}\n  tapset nil)\n\n(defn- maybe-init-tapset []\n  (when (nil? tapset)\n    (set! tapset (atom #{}))))\n\n(defn add-tap\n  \"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset conj f)\n  nil)\n\n(defn remove-tap\n  \"Remove f from the tap set.\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset disj f)\n  nil)\n\n(defn ^boolean tap>\n  \"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value.\"\n  [x]\n  (maybe-init-tapset)\n  (*exec-tap-fn*\n    (fn []\n      (doseq [tap @tapset]\n        (try\n          (tap x)\n          (catch js\/Error ex))))))\n\n(defn update-vals\n  \"m f => {k (f v) ...}\n  Given a map m and a function f of 1-argument, returns a new map where the keys of m\n  are mapped to result of applying f to the corresponding values of m.\"\n  {:added \"1.11\"}\n  [m f]\n  (with-meta\n    (persistent!\n      (reduce-kv (fn [acc k v] (assoc! acc k (f v)))\n                 (if (implements? IEditableCollection m)\n                   (transient m)\n                   (transient {}))\n                 m))\n    (meta m)))\n\n(defn update-keys\n  \"m f => {(f k) v ...}\n  Given a map m and a function f of 1-argument, returns a new map whose\n  keys are the result of applying f to the keys of m, mapped to the\n  corresponding values of m.\n  f must return a unique key for each key of m, else the behavior is undefined.\"\n  {:added \"1.11\"}\n  [m f]\n  (let [ret (persistent!\n              (reduce-kv (fn [acc k v] (assoc! acc (f k) v))\n                         (transient {})\n                         m))]\n    (with-meta ret (meta m))))\n\n;; -----------------------------------------------------------------------------\n;; Bootstrap helpers - incompatible with advanced compilation\n\n(defn- ns-lookup\n  \"Bootstrap only.\"\n  [ns-obj k]\n  (fn [] (gobject\/get ns-obj k)))\n\n;; Bootstrap only\n(deftype Namespace [obj name]\n  Object\n  (findInternedVar [this sym]\n    (let [k (munge (str sym))]\n      (when ^boolean (gobject\/containsKey obj k)\n        (let [var-sym (symbol (str name) (str sym))\n              var-meta {:ns this}]\n          (Var. (ns-lookup obj k) var-sym var-meta)))))\n  (getName [_] name)\n  (toString [_]\n    (str name))\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Namespace other)\n      (= name (.-name other))\n      false))\n  IHash\n  (-hash [_]\n    (hash name)))\n\n(def\n  ^{:doc \"Bootstrap only.\" :jsdoc [\"@type {*}\"]}\n  NS_CACHE nil)\n\n(defn- find-ns-obj*\n  \"Bootstrap only.\"\n  [ctxt xs]\n  (cond\n    (nil? ctxt) nil\n    (nil? xs) ctxt\n    :else (recur (gobject\/get ctxt (first xs)) (next xs))))\n\n(defn find-ns-obj\n  \"Bootstrap only.\"\n  [ns]\n  (let [munged-ns (munge (str ns))\n        segs (.split munged-ns \".\")]\n    (case *target*\n      \"nodejs\"  (if ^boolean js\/COMPILED\n                  ; Under simple optimizations on nodejs, namespaces will be in module\n                  ; rather than global scope and must be accessed by a direct call to eval.\n                  ; The first segment may refer to an undefined variable, so its evaluation\n                  ; may throw ReferenceError.\n                  (find-ns-obj*\n                    (try\n                      (let [ctxt (js\/eval (first segs))]\n                        (when (and ctxt (object? ctxt))\n                          ctxt))\n                      (catch js\/ReferenceError e\n                        nil))\n                    (next segs))\n                  (find-ns-obj* goog\/global segs))\n      (\"default\" \"webworker\") (find-ns-obj* goog\/global segs)\n      (throw (js\/Error. (str \"find-ns-obj not supported for target \" *target*))))))\n\n(defn ns-interns*\n  \"Returns a map of the intern mappings for the namespace.\n  Bootstrap only.\"\n  [sym]\n  (let [ns-obj (find-ns-obj sym)\n        ns     (Namespace. ns-obj sym)]\n    (letfn [(step [ret k]\n              (let [var-sym (symbol (demunge k))]\n                (assoc ret\n                  var-sym (Var. #(gobject\/get ns-obj k)\n                            (symbol (str sym) (str var-sym)) {:ns ns}))))]\n      (reduce step {} (js-keys ns-obj)))))\n\n(defn create-ns\n  \"Create a new namespace named by the symbol. Bootstrap only.\"\n  ([sym]\n   (create-ns sym (find-ns-obj sym)))\n  ([sym ns-obj]\n   (Namespace. ns-obj sym)))\n\n(defn find-ns\n  \"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n        (when-not (nil? ns-obj)\n          (let [new-ns (create-ns ns ns-obj)]\n            (swap! NS_CACHE assoc ns new-ns)\n            new-ns))))))\n\n(defn find-macros-ns\n  \"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [ns-str (str ns)\n        ns (if (not ^boolean (gstring\/contains ns-str \"$macros\"))\n             (symbol (str ns-str \"$macros\"))\n             ns)\n        the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n       (when-not (nil? ns-obj)\n         (let [new-ns (create-ns ns ns-obj)]\n           (swap! NS_CACHE assoc ns new-ns)\n           new-ns))))))\n\n(defn ns-name\n  \"Returns the name of the namespace, a Namespace object.\n  Bootstrap only.\"\n  [ns-obj]\n  (.-name ns-obj))\n\n(defn uri?\n  \"Returns true x is a goog.Uri instance.\"\n  {:added \"1.9\"}\n  [x]\n  (instance? goog.Uri x))\n\n(defn ^boolean NaN?\n  \"Returns true if num is NaN, else false\"\n  [val]\n  (js\/isNaN val))\n\n(defn ^:private parsing-err\n  \"Construct message for parsing for non-string parsing error\"\n  [val]\n  (str \"Expected string, got: \" (if (nil? val) \"nil\" (goog\/typeOf val))))\n\n(defn ^number parse-long\n  \"Parse string of decimal digits with optional leading -\/+ and return an\n  integer value, or nil if parse fails\"\n  [s]\n  (if (string? s)\n    (and (re-matches #\"[+-]?\\d+\" s)\n         (let [i (js\/parseInt s)]\n           (when (and (<= i js\/Number.MAX_SAFE_INTEGER)\n                      (>= i js\/Number.MIN_SAFE_INTEGER))\n             i)))\n    (throw (js\/Error. (parsing-err s)))))\n\n(defn ^number parse-double\n  \"Parse string with floating point components and return a floating point value,\n  or nil if parse fails.\n  Grammar: https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/lang\/Double.html#valueOf-java.lang.String-\"\n  [s]\n  (if (string? s)\n    (cond\n      ^boolean (re-matches #\"[\\x00-\\x20]*[+-]?NaN[\\x00-\\x20]*\" s) ##NaN\n      ^boolean (re-matches\n                #\"[\\x00-\\x20]*[+-]?(Infinity|((\\d+\\.?\\d*|\\.\\d+)([eE][+-]?\\d+)?)[dDfF]?)[\\x00-\\x20]*\"\n                s) (js\/parseFloat s)\n      :default nil)\n    (throw (js\/Error. (parsing-err s)))))\n\n(def ^:private uuid-regex\n  #\"^[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]-[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]$\")\n\n(defn parse-uuid\n  \"Parse a string representing a UUID and return a UUID instance,\n  or nil if parse fails.\n  Grammar: https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/UUID.html#toString--\"\n  [s]\n  (if (string? s)\n    (when ^boolean (re-matches uuid-regex s)\n      (uuid s))\n    (throw (js\/Error. (parsing-err s)))))\n\n(defn parse-boolean\n  \"Parse strings \\\"true\\\" or \\\"false\\\" and return a boolean, or nil if invalid. Note that this explicitly\n  excludes strings with different cases, or space characters.\"\n  [s]\n  (if (string? s)\n    (case s\n      \"true\" true\n      \"false\" false\n      nil)\n    (throw (js\/Error. (parsing-err s)))))\n\n(defn- maybe-enable-print! []\n  (cond\n    (exists? js\/console)\n    (enable-console-print!)\n\n    (or (identical? *target* \"nashorn\")\n        (identical? *target* \"graaljs\"))\n    (let [system (.type js\/Java \"java.lang.System\")]\n      (set! *print-newline* false)\n      (set-print-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-out system) s))))\n      (set-print-err-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-error system) s)))))))\n\n(maybe-enable-print!)\n\n(defonce\n  ^{:doc \"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated.\" :dynamic true}\n  *eval*\n  (fn [_]\n    (throw (js\/Error. \"cljs.core\/*eval* not bound\"))))\n\n(defn eval\n  \"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core\/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core\/*eval* for that environment.\"\n  [form]\n  (*eval* form))\n\n(when ^boolean js\/COMPILED\n  (when (identical? \"nodejs\" *target*)\n    (set! goog\/global js\/global))\n  (cond\n    (identical? \"window\" *global*) (set! goog\/global js\/window)\n    (identical? \"self\" *global*) (set! goog\/global js\/self)\n    (identical? \"global\" *global*) (set! goog\/global js\/global)))\n","(ns frontend.db\n  \"Main entry ns for db related fns\"\n  (:require [clojure.core.async :as async]\n            [datascript.core :as d]\n            [logseq.db.schema :as db-schema]\n            [frontend.db.conn :as conn]\n            [logseq.db.default :as default-db]\n            [frontend.db.model]\n            [frontend.db.query-custom]\n            [frontend.db.query-react]\n            [frontend.db.react :as react]\n            [frontend.db.utils]\n            [frontend.db.persist :as db-persist]\n            [frontend.db.migrate :as db-migrate]\n            [frontend.namespaces :refer [import-vars]]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [promesa.core :as p]\n            [electron.ipc :as ipc]))\n\n(import-vars\n [frontend.db.conn\n  ;; TODO: remove later\n  conns\n  get-repo-path\n  get-repo-name\n  get-short-repo-name\n  datascript-db\n  get-db\n  remove-conn!]\n\n [frontend.db.utils\n  db->json db->edn-str db->string get-max-tx-id get-tx-id\n  group-by-page seq-flatten\n  string->db\n\n  entity pull pull-many transact! get-key-value]\n\n [frontend.db.model\n  blocks-count blocks-count-cache delete-blocks get-pre-block\n  delete-files delete-pages-by-files get-all-block-contents get-all-tagged-pages\n  get-all-templates get-block-and-children get-block-by-uuid get-block-children sort-by-left\n  get-block-parent get-block-parents parents-collapsed? get-block-referenced-blocks get-all-referenced-blocks-uuid\n  get-block-children-ids get-block-immediate-children get-block-page\n  get-custom-css get-date-scheduled-or-deadlines\n  get-file-last-modified-at get-file get-file-page get-file-page-id file-exists?\n  get-files get-files-blocks get-files-full get-journals-length get-pages-with-file\n  get-latest-journals get-page get-page-alias get-page-alias-names get-paginated-blocks\n  get-page-blocks-count get-page-blocks-no-cache get-page-file get-page-format get-page-properties\n  get-page-referenced-blocks get-page-referenced-blocks-full get-page-referenced-pages get-page-unlinked-references\n  get-all-pages get-pages get-pages-relation get-pages-that-mentioned-page get-tag-pages\n  journal-page? page-alias-set sub-block\n  set-file-last-modified-at! page-empty? page-exists? page-empty-or-dummy? get-alias-source-page\n  set-file-content! has-children? get-namespace-pages get-all-namespace-relation get-pages-by-name-partition\n  get-original-name]\n\n [frontend.db.react\n  get-current-page set-key-value\n  remove-key! remove-q! remove-query-component! add-q! add-query-component! clear-query-state!\n  clear-query-state-without-refs-and-embeds! kv q\n  query-state query-components remove-custom-query! set-new-result! sub-key-value refresh!]\n\n [frontend.db.query-custom\n  custom-query]\n\n [frontend.db.query-react\n  react-query custom-query-result-transform]\n\n [logseq.db.default built-in-pages-names built-in-pages])\n\n(defn- old-schema?\n  \"Requires migration if the schema version is older than db-schema\/version\"\n  [db]\n  (let [v (db-migrate\/get-schema-version db)\n        ;; backward compatibility\n        v (if (integer? v) v 0)]\n    (cond\n      (= db-schema\/version v)\n      false\n\n      (< db-schema\/version v)\n      (do\n        (js\/console.error \"DB schema version is newer than the app, please update the app. \" \":db-version\" v)\n        false)\n\n      :else\n      true)))\n\n;; persisting DBs between page reloads\n(defn persist! [repo]\n  (let [key (datascript-db repo)\n        db (get-db repo)]\n    (when db\n      (let [db-str (if db (db->string db) \"\")]\n        (p\/let [_ (db-persist\/save-graph! key db-str)])))))\n\n(defonce persistent-jobs (atom {}))\n\n(defn clear-repo-persistent-job!\n  [repo]\n  (when-let [old-job (get @persistent-jobs repo)]\n    (js\/clearTimeout old-job)))\n\n(defn persist-if-idle!\n  [repo]\n  (clear-repo-persistent-job! repo)\n  (let [job (js\/setTimeout\n             (fn []\n               (if (and (state\/input-idle? repo)\n                        (state\/db-idle? repo)\n                        ;; It's ok to not persist here since new changes\n                        ;; will be notified when restarting the app.\n                        (not (state\/whiteboard-route?)))\n                 (persist! repo)\n                 ;; (state\/set-db-persisted! repo true)\n\n                 (persist-if-idle! repo)))\n             3000)]\n    (swap! persistent-jobs assoc repo job)))\n\n;; only save when user's idle\n\n(defonce *db-listener (atom nil))\n\n(defn- repo-listen-to-tx!\n  [repo conn]\n  (d\/listen! conn :persistence\n             (fn [tx-report]\n               (when (not (:new-graph? (:tx-meta tx-report))) ; skip initial txs\n                 (if (util\/electron?)\n                   (when-not (:dbsync? (:tx-meta tx-report))\n                     ;; sync with other windows if needed\n                     (p\/let [graph-has-other-window? (ipc\/ipc \"graphHasOtherWindow\" repo)]\n                       (when graph-has-other-window?\n                         (ipc\/ipc \"dbsync\" repo {:data (db->string (:tx-data tx-report))}))))\n                   (do\n                     (state\/set-last-transact-time! repo (util\/time-ms))\n                     (persist-if-idle! repo)))\n\n                 (when-let [db-listener @*db-listener]\n                   (db-listener repo tx-report))))))\n\n(defn listen-and-persist!\n  [repo]\n  (when-let [conn (get-db repo false)]\n    (d\/unlisten! conn :persistence)\n    (repo-listen-to-tx! repo conn)))\n\n(defn start-db-conn!\n  ([repo]\n   (start-db-conn! repo {}))\n  ([repo option]\n   (conn\/start! repo\n                (assoc option\n                       :listen-handler listen-and-persist!))))\n\n(defn restore-graph-from-text!\n  \"Swap db string into the current db status\n   stored: the text to restore from\"\n  [repo stored]\n  (p\/let [db-name (datascript-db repo)\n          db-conn (d\/create-conn db-schema\/schema)\n          _ (swap! conns assoc db-name db-conn)\n          _ (when stored\n              (let [stored-db (try (string->db stored)\n                                   (catch :default _e\n                                     (js\/console.warn \"Invalid graph cache\")\n                                     (d\/empty-db db-schema\/schema)))\n                    attached-db (d\/db-with stored-db\n                                           default-db\/built-in-pages) ;; TODO bug overriding uuids?\n                    db (if (old-schema? attached-db)\n                         (db-migrate\/migrate attached-db)\n                         attached-db)]\n                (conn\/reset-conn! db-conn db)))]\n    (d\/transact! db-conn [{:schema\/version db-schema\/version}])))\n\n(defn restore-graph!\n  \"Restore db from serialized db cache\"\n  [repo]\n  (p\/let [db-name (datascript-db repo)\n          stored (db-persist\/get-serialized-graph db-name)]\n    (restore-graph-from-text! repo stored)))\n\n(defn restore!\n  [repo]\n  (p\/let [_ (restore-graph! repo)]\n    (listen-and-persist! repo)))\n\n(defn run-batch-txs!\n  []\n  (let [chan (state\/get-db-batch-txs-chan)]\n    (async\/go-loop []\n      (let [f (async\/<! chan)]\n        (f))\n      (recur))\n    chan))\n\n(defn new-block-id\n  []\n  (d\/squuid))\n","(ns ^:no-doc frontend.handler.editor\n  (:require [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as w]\n            [dommy.core :as dom]\n            [frontend.commands :as commands]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db.model :as db-model]\n            [frontend.db.utils :as db-utils]\n            [frontend.db.query-dsl :as query-dsl]\n            [frontend.diff :as diff]\n            [frontend.format.block :as block]\n            [frontend.format.mldoc :as mldoc]\n            [frontend.fs :as fs]\n            [frontend.fs.nfs :as nfs]\n            [logseq.common.path :as path]\n            [frontend.extensions.pdf.utils :as pdf-utils]\n            [frontend.handler.assets :as assets-handler]\n            [frontend.handler.block :as block-handler]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.editor.property :as editor-property]\n            [frontend.handler.export.html :as export-html]\n            [frontend.handler.export.text :as export-text]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.repeated :as repeated]\n            [frontend.handler.route :as route-handler]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.modules.outliner.core :as outliner-core]\n            [frontend.modules.outliner.transaction :as outliner-tx]\n            [frontend.modules.outliner.tree :as tree]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.template :as template]\n            [frontend.util :as util :refer [profile]]\n            [frontend.util.clock :as clock]\n            [frontend.util.cursor :as cursor]\n            [frontend.util.drawer :as drawer]\n            [frontend.util.keycode :as keycode]\n            [frontend.util.list :as list]\n            [frontend.util.marker :as marker]\n            [frontend.util.property :as property]\n            [frontend.util.text :as text-util]\n            [frontend.util.thingatpt :as thingatpt]\n            [goog.dom :as gdom]\n            [goog.dom.classes :as gdom-classes]\n            [goog.object :as gobj]\n            [goog.crypt.base64 :as base64]\n            [lambdaisland.glogi :as log]\n            [logseq.db.schema :as db-schema]\n            [logseq.graph-parser.block :as gp-block]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.property :as gp-property]\n            [logseq.graph-parser.text :as text]\n            [logseq.graph-parser.utf8 :as utf8]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.util.block-ref :as block-ref]\n            [logseq.graph-parser.util.page-ref :as page-ref]\n            [promesa.core :as p]\n            [rum.core :as rum]\n            [frontend.fs.capacitor-fs :as capacitor-fs]))\n\n;; FIXME: should support multiple images concurrently uploading\n\n(defonce *asset-uploading? (atom false))\n(defonce *asset-uploading-process (atom 0))\n\n(def clear-selection! editor-property\/clear-selection!)\n(def edit-block! editor-property\/edit-block!)\n\n(defn get-block-own-order-list-type\n  [block]\n  (some-> block :block\/properties :logseq.order-list-type))\n\n(defn set-block-own-order-list-type!\n  [block type]\n  (when-let [uuid (:block\/uuid block)]\n    (editor-property\/set-block-property! uuid :logseq.order-list-type (name type))))\n\n(defn remove-block-own-order-list-type!\n  [block]\n  (when-let [uuid (:block\/uuid block)]\n    (editor-property\/remove-block-property! uuid :logseq.order-list-type)))\n\n(defn own-order-number-list?\n  [block]\n  (= (get-block-own-order-list-type block) \"number\"))\n\n(defn make-block-as-own-order-list!\n  [block]\n  (some-> block (set-block-own-order-list-type! \"number\")))\n\n(defn toggle-blocks-as-own-order-list!\n  [blocks]\n  (when (seq blocks)\n    (let [has-ordered?    (some own-order-number-list? blocks)\n          blocks-uuids    (some->> blocks (map :block\/uuid) (remove nil?))\n          order-list-prop :logseq.order-list-type]\n      (if has-ordered?\n        (editor-property\/batch-remove-block-property! blocks-uuids order-list-prop)\n        (editor-property\/batch-add-block-property! blocks-uuids order-list-prop \"number\")))))\n\n(defn get-selection-and-format\n  []\n  (when-let [block (state\/get-edit-block)]\n    (when (:block\/uuid block)\n      (when-let [edit-id (state\/get-edit-input-id)]\n        (when-let [input (gdom\/getElement edit-id)]\n          (let [selection-start (util\/get-selection-start input)\n                selection-end (util\/get-selection-end input)\n                value (gobj\/get input \"value\")\n                selection (when (not= selection-start selection-end)\n                            (subs value selection-start selection-end))\n                selection-start (+ selection-start\n                                   (count (take-while #(= \" \" %) selection)))\n                selection-end (- selection-end\n                                 (count (take-while #(= \" \" %) (reverse selection))))]\n            {:selection-start selection-start\n             :selection-end selection-end\n             :selection (some-> selection\n                                string\/trim)\n             :format (:block\/format block)\n             :value value\n             :block block\n             :edit-id edit-id\n             :input input}))))))\n\n(defn- format-text!\n  [pattern-fn]\n  (when-let [m (get-selection-and-format)]\n    (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n          pattern (pattern-fn format)\n          pattern-count (count pattern)\n          pattern-prefix (subs value (max 0 (- selection-start pattern-count)) selection-start)\n          pattern-suffix (subs value selection-end (min (count value) (+ selection-end pattern-count)))\n          already-wrapped? (= pattern pattern-prefix pattern-suffix)\n          prefix (if already-wrapped?\n                   (subs value 0 (- selection-start pattern-count))\n                   (subs value 0 selection-start))\n          postfix (if already-wrapped?\n                    (subs value (+ selection-end pattern-count))\n                    (subs value selection-end))\n          inner-value (cond-> selection\n                        (not already-wrapped?)\n                        (#(str pattern % pattern)))\n          new-value (str prefix inner-value postfix)]\n      (state\/set-edit-content! edit-id new-value)\n      (cond\n        already-wrapped? (cursor\/set-selection-to input (- selection-start pattern-count) (- selection-end pattern-count))\n        selection (cursor\/move-cursor-to input (+ selection-end pattern-count))\n        :else (cursor\/set-selection-to input (+ selection-start pattern-count) (+ selection-end pattern-count))))))\n\n(defn bold-format! []\n  (format-text! config\/get-bold))\n\n(defn italics-format! []\n  (format-text! config\/get-italic))\n\n(defn highlight-format! []\n  (when-let [block (state\/get-edit-block)]\n    (let [format (:block\/format block)]\n      (format-text! #(config\/get-highlight format)))))\n\n(defn strike-through-format! []\n  (format-text! config\/get-strike-through))\n\n(defn html-link-format!\n  ([]\n   (html-link-format! nil))\n  ([text]\n   (when-let [m (get-selection-and-format)]\n     (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n           empty-selection? (= selection-start selection-end)\n           selection-link? (and selection (gp-mldoc\/mldoc-link? format selection))\n           [content forward-pos] (cond\n                                   empty-selection?\n                                   (config\/get-empty-link-and-forward-pos format)\n\n                                   (and text selection-link?)\n                                   (config\/with-label-link format text selection)\n\n                                   text\n                                   (config\/with-label-link format selection text)\n\n                                   selection-link?\n                                   (config\/with-default-link format selection)\n\n                                   :else\n                                   (config\/with-default-label format selection))\n           new-value (str\n                      (subs value 0 selection-start)\n                      content\n                      (subs value selection-end))\n           cur-pos (or selection-start (cursor\/pos input))]\n       (state\/set-edit-content! edit-id new-value)\n       (cursor\/move-cursor-to input (+ cur-pos forward-pos))))))\n\n(defn open-block-in-sidebar!\n  [block-id]\n  (when block-id\n    (when-let [block (db\/entity (if (number? block-id) block-id [:block\/uuid block-id]))]\n      (let [page? (nil? (:block\/page block))]\n        (state\/sidebar-add-block!\n         (state\/get-current-repo)\n         (:db\/id block)\n         (if page? :page :block))))))\n\n(defn reset-cursor-range!\n  [node]\n  (when node\n    (state\/set-cursor-range! (util\/caret-range node))))\n\n(defn restore-cursor-pos!\n  [id markup]\n  (when-let [node (gdom\/getElement (str id))]\n    (let [cursor-range (state\/get-cursor-range)\n          pos (or (state\/get-editor-last-pos)\n                  (and cursor-range\n                       (diff\/find-position markup cursor-range)))]\n      (cursor\/move-cursor-to node pos)\n      (state\/clear-editor-last-pos!))))\n\n(defn highlight-block!\n  [block-uuid]\n  (let [blocks (array-seq (js\/document.getElementsByClassName (str block-uuid)))]\n    (doseq [block blocks]\n      (dom\/add-class! block \"block-highlight\"))))\n\n(defn unhighlight-blocks!\n  []\n  (let [blocks (some->> (array-seq (js\/document.getElementsByClassName \"block-highlight\"))\n                        (repeat 2)\n                        (apply concat))]\n    (doseq [block blocks]\n      (gdom-classes\/remove block \"block-highlight\"))))\n\n;; id: block dom id, \"ls-block-counter-uuid\"\n(defn- another-block-with-same-id-exists?\n  [current-id block-id]\n  (when-let [id (and (string? block-id) (parse-uuid block-id))]\n    (and (not= current-id id)\n         (db\/entity [:block\/uuid id]))))\n\n(defn- remove-non-existed-refs!\n  [refs]\n  (remove (fn [x] (or\n                   (and (vector? x)\n                        (= :block\/uuid (first x))\n                        (nil? (db\/entity x)))\n                   (nil? x))) refs))\n\n(defn- with-marker-time\n  [content block format new-marker old-marker]\n  (if (and (state\/enable-timetracking?) new-marker)\n    (try\n      (let [logbook-exists? (and (:block\/body block) (drawer\/get-logbook (:block\/body block)))\n            new-marker (string\/trim (string\/lower-case (name new-marker)))\n            old-marker (when old-marker (string\/trim (string\/lower-case (name old-marker))))\n            new-content (cond\n                          (or (and (nil? old-marker) (or (= new-marker \"doing\")\n                                                         (= new-marker \"now\")))\n                              (and (= old-marker \"todo\") (= new-marker \"doing\"))\n                              (and (= old-marker \"later\") (= new-marker \"now\"))\n                              (and (= old-marker new-marker \"now\") (not logbook-exists?))\n                              (and (= old-marker new-marker \"doing\") (not logbook-exists?)))\n                          (clock\/clock-in format content)\n\n                          (or\n                           (and (= old-marker \"doing\") (= new-marker \"todo\"))\n                           (and (= old-marker \"now\") (= new-marker \"later\"))\n                           (and (contains? #{\"now\" \"doing\"} old-marker)\n                                (= new-marker \"done\")))\n                          (clock\/clock-out format content)\n\n                          :else\n                          content)]\n        new-content)\n      (catch :default _e\n        content))\n    content))\n\n(defn- with-timetracking\n  [block value]\n  (if (and (state\/enable-timetracking?)\n           (not= (:block\/content block) value))\n    (let [format (:block\/format block)\n          new-marker (last (util\/safe-re-find (marker\/marker-pattern format) (or value \"\")))\n          new-value (with-marker-time value block format\n                      new-marker\n                      (:block\/marker block))]\n      new-value)\n    value))\n\n(defn wrap-parse-block\n  [{:block\/keys [content format left page uuid level pre-block?] :as block}]\n  (let [block (or (and (:db\/id block) (db\/pull (:db\/id block))) block)\n        block (merge block\n                     (block\/parse-title-and-body uuid format pre-block? (:block\/content block)))\n        properties (:block\/properties block)\n        properties (if (and (= format :markdown)\n                            (number? (:heading properties)))\n                     (dissoc properties :heading)\n                     properties)\n        real-content (:block\/content block)\n        content (if (and (seq properties) real-content (not= real-content content))\n                  (property\/with-built-in-properties properties content format)\n                  content)\n        content (drawer\/with-logbook block content)\n        content (with-timetracking block content)\n        first-block? (= left page)\n        ast (mldoc\/->edn (string\/trim content) (gp-mldoc\/default-config format))\n        first-elem-type (first (ffirst ast))\n        first-elem-meta (second (ffirst ast))\n        properties? (contains? #{\"Property_Drawer\" \"Properties\"} first-elem-type)\n        markdown-heading? (and (= format :markdown)\n                               (= \"Heading\" first-elem-type)\n                               (nil? (:size first-elem-meta)))\n        block-with-title? (mldoc\/block-with-title? first-elem-type)\n        content (string\/triml content)\n        content (string\/replace content (block-ref\/->block-ref uuid) \"\")\n        [content content'] (cond\n                             (and first-block? properties?)\n                             [content content]\n\n                             markdown-heading?\n                             [content content]\n\n                             :else\n                             (let [content' (str (config\/get-block-pattern format) (if block-with-title? \" \" \"\\n\") content)]\n                               [content content']))\n        block (assoc block\n                     :block\/content content'\n                     :block\/format format)\n        block (apply dissoc block (remove #{:block\/pre-block?} db-schema\/retract-attributes))\n        block (block\/parse-block block)\n        block (if (and first-block? (:block\/pre-block? block))\n                block\n                (dissoc block :block\/pre-block?))\n        block (update block :block\/refs remove-non-existed-refs!)\n        block (if (and left (not= (:block\/left block) left)) (assoc block :block\/left left) block)\n        new-properties (merge\n                        (select-keys properties (property\/hidden-properties))\n                        (:block\/properties block))]\n    (-> block\n        (dissoc :block.temp\/top?\n                :block.temp\/bottom?)\n        (assoc :block\/content content\n               :block\/properties new-properties)\n        (merge (if level {:block\/level level} {})))))\n\n(defn- save-block-inner!\n  [block value opts]\n  (let [block (assoc block :block\/content value)\n        block (apply dissoc block db-schema\/retract-attributes)]\n    (profile\n     \"Save block: \"\n     (let [original-block (db\/entity (:db\/id block))\n           original-uuid (:block\/uuid original-block)\n           original-props (:block\/properties original-block)\n           uuid-changed? (not= (:block\/uuid block) original-uuid)\n           block' (-> (wrap-parse-block block)\n                      ;; :block\/uuid might be changed when backspace\/delete\n                      ;; a block that has been refed\n                      (assoc :block\/uuid (:block\/uuid block)))\n           opts' (merge opts (cond-> {:outliner-op :save-block}\n                               uuid-changed?\n                               (assoc :uuid-changed {:from (:block\/uuid block)\n                                                     :to original-uuid})))]\n       (outliner-tx\/transact!\n        opts'\n        (outliner-core\/save-block! block')\n        ;; page properties changed\n        (when-let [page-name (and (:block\/pre-block? block')\n                                  (not= original-props (:block\/properties block'))\n                                  (some-> (:block\/page block') :db\/id (db-utils\/pull) :block\/name))]\n          (state\/set-page-properties-changed! page-name)))\n\n       ;; sanitized page name changed\n       (when-let [title (get-in block' [:block\/properties :title])]\n         (if (string? title)\n           (when-let [old-page-name (:block\/name (db\/entity (:db\/id (:block\/page block'))))]\n             (when (and (:block\/pre-block? block')\n                        (not (string\/blank? title))\n                        (not= (util\/page-name-sanity-lc title) old-page-name))\n               (state\/pub-event! [:page\/title-property-changed old-page-name title])))\n           (js\/console.error (str \"Title is not a string: \" title))))))))\n\n(defn save-block-if-changed!\n  ([block value]\n   (save-block-if-changed! block value nil))\n  ([block value\n    {:keys [force?]\n     :as opts}]\n   (let [{:block\/keys [uuid page format repo content properties]} block\n         repo (or repo (state\/get-current-repo))\n         format (or format (state\/get-preferred-format))\n         page (db\/entity repo (:db\/id page))\n         block-id (when (map? properties) (get properties :id))\n         content (-> (property\/remove-built-in-properties format content)\n                     (drawer\/remove-logbook))]\n     (cond\n       (and (another-block-with-same-id-exists? uuid block-id)\n            (not (= :delete (:editor\/op opts))))\n       (notification\/show!\n        [:p.content\n         (util\/format \"Block with the id %s already exists!\" block-id)]\n        :error)\n\n       force?\n       (save-block-inner! block value opts)\n\n       :else\n       (let [content-changed? (not= (string\/trim content) (string\/trim value))]\n         (when (and content-changed? page)\n           (save-block-inner! block value opts)))))))\n\n(defn- compute-fst-snd-block-text\n  [value selection-start selection-end]\n  (when (string? value)\n    (let [fst-block-text (subs value 0 selection-start)\n          snd-block-text (string\/triml (subs value selection-end))]\n      [fst-block-text snd-block-text])))\n\n(declare save-current-block!)\n(defn outliner-insert-block!\n  [config current-block new-block {:keys [sibling? keep-uuid?\n                                          replace-empty-target?]}]\n  (let [ref-query-top-block? (and (or (:ref? config)\n                                      (:custom-query? config))\n                                  (not (:ref-query-child? config)))\n        has-children? (db\/has-children? (:block\/uuid current-block))\n        sibling? (cond\n                   ref-query-top-block?\n                   false\n\n                   (boolean? sibling?)\n                   sibling?\n\n                   (util\/collapsed? current-block)\n                   true\n\n                   :else\n                   (not has-children?))]\n    (outliner-tx\/transact!\n     {:outliner-op :insert-blocks}\n     (save-current-block! {:current-block current-block})\n     (outliner-core\/insert-blocks! [new-block] current-block {:sibling? sibling?\n                                                              :keep-uuid? keep-uuid?\n                                                              :replace-empty-target? replace-empty-target?}))))\n\n(defn- block-self-alone-when-insert?\n  [config uuid]\n  (let [current-page (state\/get-current-page)\n        block-id (or (some-> (:id config) parse-uuid)\n                     (some-> current-page parse-uuid))]\n    (= uuid block-id)))\n\n(defn insert-new-block-before-block-aux!\n  [config block value {:keys [ok-handler]}]\n  (let [edit-input-id (state\/get-edit-input-id)\n        input (gdom\/getElement edit-input-id)\n        input-text-selected? (util\/input-text-selected? input)\n        new-m {:block\/uuid (db\/new-block-id)\n               :block\/content \"\"}\n        prev-block (-> (merge (select-keys block [:block\/parent :block\/left :block\/format\n                                                  :block\/page :block\/journal?]) new-m)\n                       (wrap-parse-block))\n        left-block (db\/pull (:db\/id (:block\/left block)))]\n    (when input-text-selected?\n      (let [selection-start (util\/get-selection-start input)\n            selection-end (util\/get-selection-end input)\n            [_ new-content] (compute-fst-snd-block-text value selection-start selection-end)]\n        (state\/set-edit-content! edit-input-id new-content)))\n    (profile\n     \"outliner insert block\"\n     (let [sibling? (not= (:db\/id left-block) (:db\/id (:block\/parent block)))]\n       (outliner-insert-block! config left-block prev-block {:sibling? sibling?\n                                                             :keep-uuid? true})))\n    (ok-handler prev-block)))\n\n(defn insert-new-block-aux!\n  [config\n   {:block\/keys [uuid]\n    :as block}\n   value\n   {:keys [ok-handler]\n    :as _opts}]\n  (let [block-self? (block-self-alone-when-insert? config uuid)\n        input (gdom\/getElement (state\/get-edit-input-id))\n        selection-start (util\/get-selection-start input)\n        selection-end (util\/get-selection-end input)\n        [fst-block-text snd-block-text] (compute-fst-snd-block-text value selection-start selection-end)\n        current-block (assoc block :block\/content fst-block-text)\n        current-block (apply dissoc current-block db-schema\/retract-attributes)\n        current-block (wrap-parse-block current-block)\n        new-m {:block\/uuid (db\/new-block-id)\n               :block\/content snd-block-text}\n        next-block (-> (merge (select-keys block [:block\/parent :block\/left :block\/format\n                                                  :block\/page :block\/journal?]) new-m)\n                       (wrap-parse-block))\n        sibling? (when block-self? false)]\n    (outliner-insert-block! config current-block next-block {:sibling? sibling?\n                                                             :keep-uuid? true})\n    (util\/set-change-value input fst-block-text)\n    (ok-handler next-block)))\n\n(defn clear-when-saved!\n  []\n  (commands\/restore-state))\n\n(defn get-state\n  []\n  (let [[{:keys [on-hide block block-id block-parent-id format sidebar?]} id config] (state\/get-editor-args)\n        node (gdom\/getElement id)]\n    (when node\n      (let [value (gobj\/get node \"value\")\n            pos (util\/get-selection-start node)]\n        {:config config\n         :on-hide on-hide\n         :sidebar? sidebar?\n         :format format\n         :id id\n         :block (or (db\/pull [:block\/uuid (:block\/uuid block)]) block)\n         :block-id block-id\n         :block-parent-id block-parent-id\n         :node node\n         :value value\n         :pos pos}))))\n\n(defn insert-new-block!\n  \"Won't save previous block content - remember to save!\"\n  ([state]\n   (insert-new-block! state nil))\n  ([_state block-value]\n   (when (and (not config\/publishing?)\n              (not= :insert (state\/get-editor-op)))\n     (state\/set-editor-op! :insert)\n     (when-let [state (get-state)]\n       (let [{:keys [block value id config]} state\n             value (if (string? block-value) block-value value)\n             block-id (:block\/uuid block)\n             block (or (db\/pull [:block\/uuid block-id])\n                       block)\n             block-self? (block-self-alone-when-insert? config block-id)\n             input (gdom\/getElement (state\/get-edit-input-id))\n             selection-start (util\/get-selection-start input)\n             selection-end (util\/get-selection-end input)\n             [fst-block-text snd-block-text] (compute-fst-snd-block-text value selection-start selection-end)\n             insert-fn (cond\n                         block-self?\n                         insert-new-block-aux!\n\n                         (and (string\/blank? fst-block-text) (not (string\/blank? snd-block-text)))\n                         insert-new-block-before-block-aux!\n\n                         :else\n                         insert-new-block-aux!)]\n         (insert-fn config block value\n                    {:ok-handler\n                     (fn [last-block]\n                       (clear-when-saved!)\n                       (edit-block! last-block 0 id))}))))\n   (state\/set-editor-op! nil)))\n\n(defn api-insert-new-block!\n  [content {:keys [page block-uuid sibling? before? properties\n                   custom-uuid replace-empty-target? edit-block?]\n            :or {sibling? false\n                 before? false\n                 edit-block? true}}]\n  (when (or page block-uuid)\n    (let [before? (if page false before?)\n          sibling? (boolean sibling?)\n          sibling? (if before? true (if page false sibling?))\n          block (if page\n                  (db\/entity [:block\/name (util\/page-name-sanity-lc page)])\n                  (db\/entity [:block\/uuid block-uuid]))]\n      (when block\n        (let [last-block (when (not sibling?)\n                           (let [children (:block\/_parent block)\n                                 blocks (db\/sort-by-left children block)\n                                 last-block-id (:db\/id (last blocks))]\n                             (when last-block-id\n                               (db\/pull last-block-id))))\n              format (or\n                      (:block\/format block)\n                      (db\/get-page-format (:db\/id block))\n                      (state\/get-preferred-format))\n              content (if (seq properties)\n                        (property\/insert-properties format content properties)\n                        content)\n              new-block (-> (select-keys block [:block\/page :block\/journal?\n                                                :block\/journal-day])\n                            (assoc :block\/content content\n                                   :block\/format format))\n              new-block (assoc new-block :block\/page\n                               (if page\n                                 (:db\/id block)\n                                 (:db\/id (:block\/page new-block))))\n              new-block (-> new-block\n                            (wrap-parse-block)\n                            (assoc :block\/uuid (or custom-uuid (db\/new-block-id))))\n              [block-m sibling?] (cond\n                                   before?\n                                   (let [first-child? (->> [:block\/parent :block\/left]\n                                                           (map #(:db\/id (get block %)))\n                                                           (apply =))\n                                         block (db\/pull (:db\/id (:block\/left block)))\n                                         sibling? (if (or first-child? ;; insert as first child\n                                                          (:block\/name block))\n                                                    false sibling?)]\n                                     [block sibling?])\n\n                                   sibling?\n                                   [(db\/pull (:db\/id block)) sibling?]\n\n                                   last-block\n                                   [last-block true]\n\n                                   block\n                                   [(db\/pull (:db\/id block)) sibling?]\n\n                                   ;; FIXME: assert\n                                   :else\n                                   nil)]\n          (when block-m\n            (outliner-insert-block! {} block-m new-block {:sibling? sibling?\n                                                          :keep-uuid? true\n                                                          :replace-empty-target? replace-empty-target?})\n            (when edit-block?\n              (if (and replace-empty-target?\n                       (string\/blank? (:block\/content last-block)))\n                ;; 20ms of waiting for DOM to load the block, to avoid race condition.\n                ;; It's ensuring good response under M1 pro\n                ;; Used to be 10ms before, but is causing occasional failure on M1 pro with a full page of blocks,\n                ;; or failing E2E with a small number of blocks.\n                ;; Should be related to the # of elements in page\n                (js\/setTimeout #(edit-block! last-block :max (:block\/uuid last-block)) 20)\n                (js\/setTimeout #(edit-block! new-block :max (:block\/uuid new-block)) 20)))\n            new-block))))))\n\n(defn insert-first-page-block-if-not-exists!\n  ([page-title]\n   (insert-first-page-block-if-not-exists! page-title {}))\n  ([page-title opts]\n   (when (and (string? page-title)\n              (not (string\/blank? page-title)))\n     (state\/pub-event! [:page\/create page-title opts]))))\n\n(defn properties-block\n  [properties format page]\n  (let [content (property\/insert-properties format \"\" properties)\n        refs (gp-block\/get-page-refs-from-properties properties\n                                                     (db\/get-db (state\/get-current-repo))\n                                                     (state\/get-date-formatter)\n                                                     (state\/get-config))]\n    {:block\/pre-block? true\n     :block\/uuid (db\/new-block-id)\n     :block\/properties properties\n     :block\/properties-order (keys properties)\n     :block\/refs refs\n     :block\/left page\n     :block\/format format\n     :block\/content content\n     :block\/parent page\n     :block\/page page}))\n\n(defn update-timestamps-content!\n  [{:block\/keys [repeated? marker format] :as block} content]\n  (if repeated?\n    (let [scheduled-ast (block-handler\/get-scheduled-ast block)\n          deadline-ast (block-handler\/get-deadline-ast block)\n          content (some->> (filter repeated\/repeated? [scheduled-ast deadline-ast])\n                           (map (fn [ts]\n                                  [(repeated\/timestamp->text ts)\n                                   (repeated\/next-timestamp-text ts)]))\n                           (reduce (fn [content [old new]]\n                                     (string\/replace content old new))\n                                   content))\n          content (string\/replace-first\n                   content marker\n                   (case marker\n                     \"DOING\"\n                     \"TODO\"\n\n                     \"NOW\"\n                     \"LATER\"\n\n                     marker))\n          content (clock\/clock-out format content)\n          content (drawer\/insert-drawer\n                   format content \"logbook\"\n                   (util\/format (str (if (= :org format) \"-\" \"*\")\n                                     \" State \\\"DONE\\\" from \\\"%s\\\" [%s]\")\n                                marker\n                                (date\/get-date-time-string-3)))]\n      content)\n    content))\n\n(defn check\n  [{:block\/keys [marker content repeated? uuid] :as block}]\n  (let [new-content (string\/replace-first content marker \"DONE\")\n        new-content (if repeated?\n                      (update-timestamps-content! block content)\n                      new-content)\n        input-id (state\/get-edit-input-id)]\n    (if (and input-id\n             (string\/ends-with? input-id (str uuid)))\n      (state\/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn uncheck\n  [{:block\/keys [content uuid] :as block}]\n  (let [marker (if (= :now (state\/get-preferred-workflow))\n                 \"LATER\"\n                 \"TODO\")\n        new-content (string\/replace-first content \"DONE\" marker)\n        input-id (state\/get-edit-input-id)]\n    (if (and input-id\n             (string\/ends-with? input-id (str uuid)))\n      (state\/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn get-selected-blocks\n  []\n  (distinct (seq (state\/get-selection-blocks))))\n\n(defn set-marker\n  \"The set-marker will set a new marker on the selected block.\n  if the `new-marker` is nil, it will generate it automatically.\"\n  ([block]\n   (set-marker block nil))\n  ([{:block\/keys [marker content format] :as block} new-marker]\n   (let [[new-content _] (marker\/cycle-marker content marker new-marker format (state\/get-preferred-workflow))]\n     (save-block-if-changed! block new-content))))\n\n(defn cycle-todos!\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [ids (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))]\n      (outliner-tx\/transact! {:outliner-op :cycle-todos}\n        (doseq [id ids]\n          (let [block (db\/pull [:block\/uuid id])]\n            (when (not-empty (:block\/content block))\n              (set-marker block))))))))\n\n(defn cycle-todo!\n  []\n  #_:clj-kondo\/ignore\n  (if-let [blocks (seq (get-selected-blocks))]\n    (cycle-todos!)\n    (when (state\/get-edit-block)\n      (let [edit-input-id (state\/get-edit-input-id)\n            current-input (gdom\/getElement edit-input-id)\n            content (state\/get-edit-content)\n            format (or (db\/get-page-format (state\/get-current-page))\n                       (state\/get-preferred-format))\n            [new-content marker] (marker\/cycle-marker content nil nil format (state\/get-preferred-workflow))\n            new-pos (commands\/compute-pos-delta-when-change-marker\n                     content marker (cursor\/pos current-input))]\n        (state\/set-edit-content! edit-input-id new-content)\n        (cursor\/move-cursor-to current-input new-pos)))))\n\n(defn set-priority\n  [{:block\/keys [priority content] :as block} new-priority]\n  (let [new-content (string\/replace-first content\n                                          (util\/format \"[#%s]\" priority)\n                                          (util\/format \"[#%s]\" new-priority))]\n    (save-block-if-changed! block new-content)))\n\n(defn delete-block-aux!\n  [{:block\/keys [uuid repo] :as _block} children?]\n  (let [repo (or repo (state\/get-current-repo))\n        block (db\/pull repo '[*] [:block\/uuid uuid])]\n    (when block\n      (outliner-tx\/transact!\n       {:outliner-op :delete-blocks}\n       (outliner-core\/delete-blocks! [block] {:children? children?})))))\n\n(defn- move-to-prev-block\n  [repo sibling-block format id value move?]\n  (when (and repo sibling-block)\n    (when-let [sibling-block-id (dom\/attr sibling-block \"blockid\")]\n      (when-let [block (db\/pull repo '[*] [:block\/uuid (uuid sibling-block-id)])]\n        (let [original-content (util\/trim-safe (:block\/content block))\n              value' (-> (property\/remove-built-in-properties format original-content)\n                         (drawer\/remove-logbook))\n              value (->> value\n                         (property\/remove-properties format)\n                         (drawer\/remove-logbook))\n              new-value (str value' value)\n              tail-len (count value)\n              pos (max\n                   (if original-content\n                     (gobj\/get (utf8\/encode original-content) \"length\")\n                     0)\n                   0)\n              f (fn []\n                  (edit-block! (db\/pull (:db\/id block))\n                               pos\n                               id\n                               {:custom-content new-value\n                                :tail-len tail-len}))]\n          (when move? (f))\n          {:prev-block block\n           :new-content new-value\n           :move-fn f})))))\n\n(declare save-block!)\n\n(defn- block-has-no-ref?\n  [eid]\n  (empty? (:block\/_refs (db\/entity eid))))\n\n(defn delete-block!\n  ([repo]\n   (delete-block! repo true))\n  ([repo delete-children?]\n   (state\/set-editor-op! :delete)\n   (let [{:keys [id block-id block-parent-id value format config]} (get-state)]\n     (when block-id\n       (let [page-id (:db\/id (:block\/page (db\/entity [:block\/uuid block-id])))\n             page-blocks-count (and page-id (db\/get-page-blocks-count repo page-id))]\n         (when (> page-blocks-count 1)\n           (let [block-e (db\/entity [:block\/uuid block-id])\n                 has-children? (seq (:block\/_parent block-e))\n                 block (db\/pull (:db\/id block-e))\n                 left (tree\/-get-left (outliner-core\/block block))\n                 left-has-children? (and left\n                                         (when-let [block-id (:block\/uuid (:data left))]\n                                           (let [block (db\/entity [:block\/uuid block-id])]\n                                             (seq (:block\/_parent block)))))]\n             (when-not (and has-children? left-has-children?)\n               (when block-parent-id\n                 (let [block-parent (gdom\/getElement block-parent-id)\n                       sibling-block (if (:embed? config)\n                                       (util\/get-prev-block-non-collapsed\n                                        block-parent\n                                        {:container (util\/rec-get-blocks-container block-parent)})\n                                       (util\/get-prev-block-non-collapsed-non-embed block-parent))\n                       {:keys [prev-block new-content move-fn]} (move-to-prev-block repo sibling-block format id value false)\n                       concat-prev-block? (boolean (and prev-block new-content))\n                       transact-opts (cond->\n                                      {:outliner-op :delete-blocks}\n                                       concat-prev-block?\n                                       (assoc :concat-data\n                                              {:last-edit-block (:block\/uuid block)}))]\n                   (outliner-tx\/transact! transact-opts\n                                          (if concat-prev-block?\n                                            (let [prev-block' (if (seq (:block\/_refs block-e))\n                                                                (assoc prev-block\n                                                                       :block\/uuid (:block\/uuid block)\n                                                                       :block.temp\/additional-properties (:block\/properties block))\n                                                                prev-block)]\n                                              (delete-block-aux! block delete-children?)\n                                              (save-block! repo prev-block' new-content {:editor\/op :delete}))\n                                            (delete-block-aux! block delete-children?)))\n                   (move-fn)))))))))\n   (state\/set-editor-op! nil)))\n\n(defn delete-blocks!\n  [repo block-uuids blocks dom-blocks]\n  (when (seq block-uuids)\n    (let [uuid->dom-block (zipmap block-uuids dom-blocks)\n          block (first blocks)\n          block-parent (get uuid->dom-block (:block\/uuid block))\n          sibling-block (when block-parent (util\/get-prev-block-non-collapsed-non-embed block-parent))]\n      (outliner-tx\/transact!\n       {:outliner-op :delete-blocks}\n       (outliner-core\/delete-blocks! blocks {}))\n      (when sibling-block\n        (move-to-prev-block repo sibling-block\n                            (:block\/format block)\n                            (dom\/attr sibling-block \"id\")\n                            \"\"\n                            true)))))\n\n(defn- set-block-property-aux!\n  [block-or-id key value]\n  (when-let [block (cond (string? block-or-id) (db\/entity [:block\/uuid (uuid block-or-id)])\n                         (uuid? block-or-id) (db\/entity [:block\/uuid block-or-id])\n                         :else block-or-id)]\n    (let [format (:block\/format block)\n          content (:block\/content block)\n          properties (:block\/properties block)\n          properties (if (nil? value)\n                       (dissoc properties key)\n                       (assoc properties key value))\n          content (if (nil? value)\n                    (property\/remove-property format key content)\n                    (property\/insert-property format content key value))\n          content (property\/remove-empty-properties content)]\n      {:block\/uuid (:block\/uuid block)\n       :block\/properties properties\n       :block\/properties-order (or (keys properties) [])\n       :block\/content content})))\n\n(defn set-block-query-properties!\n  [block-id all-properties key add?]\n  (when-let [block (db\/entity [:block\/uuid block-id])]\n    (let [query-properties (-> (get-in block [:block\/properties :query-properties] \"\")\n                               (common-handler\/safe-read-string \"Failed to parse query properties\"))\n          query-properties (if (seq query-properties)\n                             query-properties\n                             all-properties)\n          query-properties (if add?\n                             (distinct (conj query-properties key))\n                             (remove #{key} query-properties))\n          query-properties (vec query-properties)]\n      (if (seq query-properties)\n        (editor-property\/set-block-property! block-id :query-properties (str query-properties))\n        (editor-property\/remove-block-property! block-id :query-properties)))))\n\n(defn set-block-timestamp!\n  [block-id key value]\n  (let [key (string\/lower-case (str key))\n        block-id (if (string? block-id) (uuid block-id) block-id)\n        value (str value)]\n    (when-let [block (db\/pull [:block\/uuid block-id])]\n      (let [{:block\/keys [content]} block\n            content (or content (state\/get-edit-content))\n            new-content (-> (text-util\/remove-timestamp content key)\n                            (text-util\/add-timestamp key value))]\n        (when (not= content new-content)\n          (let [input-id (state\/get-edit-input-id)]\n            (if (and input-id\n                     (string\/ends-with? input-id (str block-id)))\n              (state\/set-edit-content! input-id new-content)\n              (save-block-if-changed! block new-content))))))))\n\n(defn set-editing-block-timestamp!\n  \"Almost the same as set-block-timestamp! except for:\n   - it doesn't save the block\n   - it extracts current content from current input\"\n  [key value]\n  (let [key (string\/lower-case (str key))\n        value (str value)\n        content (state\/get-edit-content)\n        new-content (-> (text-util\/remove-timestamp content key)\n                        (text-util\/add-timestamp key value))]\n    (when (not= content new-content)\n      (let [input-id (state\/get-edit-input-id)]\n        (state\/set-edit-content! input-id new-content)))))\n\n(defn set-blocks-id!\n  \"Persist block uuid to file if the uuid is valid, and it's not persisted in file.\n   Accepts a list of uuids.\"\n  [block-ids]\n  (let [block-ids (remove nil? block-ids)\n        col (map (fn [block-id]\n                   (when-let [block (db\/entity [:block\/uuid block-id])]\n                     (when-not (:block\/pre-block? block)\n                       [block-id :id (str block-id)])))\n                 block-ids)\n        col (remove nil? col)]\n    (editor-property\/batch-set-block-property! col)))\n\n(defn copy-block-ref!\n  ([block-id]\n   (copy-block-ref! block-id #(str %)))\n  ([block-id tap-clipboard]\n   (set-blocks-id! [block-id])\n   (util\/copy-to-clipboard! (tap-clipboard block-id))))\n\n(defn select-block!\n  [block-uuid]\n  (block-handler\/select-block! block-uuid))\n\n(defn- compose-copied-blocks-contents\n  [repo block-ids]\n  (let [blocks (db-utils\/pull-many repo '[*] (mapv (fn [id] [:block\/uuid id]) block-ids))\n        top-level-block-uuids (->> (outliner-core\/get-top-level-blocks blocks)\n                                   (map :block\/uuid))\n        content (export-text\/export-blocks-as-markdown\n                 repo top-level-block-uuids\n                 {:indent-style (state\/get-export-block-text-indent-style)\n                  :remove-options (set (state\/get-export-block-text-remove-options))})]\n    [top-level-block-uuids content]))\n\n(defn- get-all-blocks-by-ids\n  [repo ids]\n  (loop [ids ids\n         result []]\n    (if (seq ids)\n      (let [db-id (:db\/id (db\/entity [:block\/uuid (first ids)]))\n            blocks (tree\/get-sorted-block-and-children repo db-id)\n            result (vec (concat result blocks))]\n        (recur (remove (set (map :block\/uuid result)) (rest ids)) result))\n      result)))\n\n(defn copy-selection-blocks\n  [html?]\n  (when-let [blocks (seq (state\/get-selection-blocks))]\n    (let [repo (state\/get-current-repo)\n          ids (distinct (keep #(when-let [id (dom\/attr % \"blockid\")]\n                                 (uuid id)) blocks))\n          [top-level-block-uuids content] (compose-copied-blocks-contents repo ids)\n          block (db\/entity [:block\/uuid (first ids)])]\n      (when block\n        (let [html (export-html\/export-blocks-as-html repo top-level-block-uuids nil)\n              copied-blocks (get-all-blocks-by-ids repo top-level-block-uuids)]\n          (common-handler\/copy-to-clipboard-without-id-property! (:block\/format block) content (when html? html) copied-blocks))\n        (state\/set-block-op-type! :copy)\n        (notification\/show! \"Copied!\" :success)))))\n\n(defn copy-block-refs\n  []\n  (when-let [selected-blocks (seq (get-selected-blocks))]\n    (let [blocks (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                        (let [level (dom\/attr % \"level\")]\n                                          {:id (uuid id)\n                                           :level (int level)}))\n                                     selected-blocks))\n                      (remove nil?))\n          first-block (first blocks)\n          first-root-level-index (ffirst\n                                  (filter (fn [[_ block]] (= (:level block) 1))\n                                          (map-indexed vector blocks)))\n          root-level (atom (:level first-block))\n          adjusted-blocks (map-indexed\n                           (fn [index {:keys [id level]}]\n                             {:id id\n                              :level (if (< index first-root-level-index)\n                                       (if (< level @root-level)\n                                         (do\n                                           (reset! root-level level)\n                                           1)\n                                         (inc (- level @root-level)))\n                                       level)})\n                           blocks)\n          block (db\/pull [:block\/uuid (:id first-block)])\n          copy-str (some->> adjusted-blocks\n                            (map (fn [{:keys [id level]}]\n                                   (condp = (:block\/format block)\n                                     :org\n                                     (str (string\/join (repeat level \"*\")) \" \" (block-ref\/->block-ref id))\n                                     :markdown\n                                     (str (string\/join (repeat (dec level) \"\\t\")) \"- \" (block-ref\/->block-ref id)))))\n                            (string\/join \"\\n\\n\"))]\n      (set-blocks-id! (map :id blocks))\n      (util\/copy-to-clipboard! copy-str))))\n\n(defn copy-block-embeds\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [ids (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))\n          ids-str (some->> ids\n                           (map (fn [id] (util\/format \"{{embed ((%s))}}\" id)))\n                           (string\/join \"\\n\\n\"))]\n      (set-blocks-id! ids)\n      (util\/copy-to-clipboard! ids-str))))\n\n(defn get-selected-toplevel-block-uuids\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [repo (state\/get-current-repo)\n          block-ids (->> (distinct (map #(when-let [id (dom\/attr % \"blockid\")]\n                                           (uuid id)) blocks))\n                         (remove nil?))\n          blocks (db-utils\/pull-many repo '[*] (mapv (fn [id] [:block\/uuid id]) block-ids))\n          page-id (:db\/id (:block\/page (first blocks)))\n          ;; filter out blocks not belong to page with 'page-id'\n          blocks* (remove (fn [block] (some-> (:db\/id (:block\/page block)) (not= page-id))) blocks)]\n      (->> (outliner-core\/get-top-level-blocks blocks*)\n           (map :block\/uuid)))))\n\n(defn cut-selection-blocks\n  [copy?]\n  (when copy? (copy-selection-blocks true))\n  (state\/set-block-op-type! :cut)\n  (when-let [blocks (seq (get-selected-blocks))]\n    ;; remove embeds, references and queries\n    (let [dom-blocks (remove (fn [block]\n                              (or (= \"true\" (dom\/attr block \"data-transclude\"))\n                                  (= \"true\" (dom\/attr block \"data-query\")))) blocks)\n          dom-blocks (if (seq dom-blocks) dom-blocks\n                         (remove (fn [block]\n                                   (= \"true\" (dom\/attr block \"data-transclude\"))) blocks))]\n      (when (seq dom-blocks)\n        (let [repo (state\/get-current-repo)\n              block-uuids (distinct (map #(uuid (dom\/attr % \"blockid\")) dom-blocks))\n              lookup-refs (map (fn [id] [:block\/uuid id]) block-uuids)\n              blocks (db\/pull-many repo '[*] lookup-refs)\n              top-level-blocks (outliner-core\/get-top-level-blocks blocks)\n              sorted-blocks (mapcat (fn [block]\n                                      (tree\/get-sorted-block-and-children repo (:db\/id block)))\n                                    top-level-blocks)]\n          (delete-blocks! repo (map :block\/uuid sorted-blocks) sorted-blocks dom-blocks))))))\n\n(def url-regex\n  \"Didn't use link\/plain-link as it is incorrectly detects words as urls.\"\n  #\"[^\\s\\(\\[]+:\/\/[^\\s\\)\\]]+\")\n\n(defn extract-nearest-link-from-text\n  [text pos & additional-patterns]\n  (let [;; didn't use page-ref regexs b\/c it handles page-ref and org link cases\n        page-pattern #\"\\[\\[([^\\]]+)]]\"\n        tag-pattern #\"#\\S+\"\n        page-matches (util\/re-pos page-pattern text)\n        block-matches (util\/re-pos block-ref\/block-ref-re text)\n        tag-matches (util\/re-pos tag-pattern text)\n        additional-matches (mapcat #(util\/re-pos % text) additional-patterns)\n        matches (->> (concat page-matches block-matches tag-matches additional-matches)\n                     (remove nil?))\n        [_ match] (first (sort-by\n                          (fn [[start-pos content]]\n                            (let [end-pos (+ start-pos (count content))]\n                              (cond\n                                (< pos start-pos)\n                                (- pos start-pos)\n\n                                (> pos end-pos)\n                                (- end-pos pos)\n\n                                :else\n                                0)))\n                          >\n                          matches))]\n    (when match\n      (cond\n        (some #(re-find % match) additional-patterns)\n        match\n        (string\/starts-with? match \"#\")\n        (subs match 1 (count match))\n        :else\n        (subs match 2 (- (count match) 2))))))\n\n(defn- get-nearest-page-or-url\n  \"Return the nearest page-name (not dereferenced, may be an alias), block, tag or url\"\n  []\n  (when-let [block (state\/get-edit-block)]\n    (when (:block\/uuid block)\n      (when-let [edit-id (state\/get-edit-input-id)]\n        (when-let [input (gdom\/getElement edit-id)]\n          (when-let [pos (cursor\/pos input)]\n            (let [value (gobj\/get input \"value\")]\n              (extract-nearest-link-from-text value pos url-regex))))))))\n\n(defn- get-nearest-page\n  \"Return the nearest page-name (not dereferenced, may be an alias), block or tag\"\n  []\n  (when-let [block (state\/get-edit-block)]\n    (when (:block\/uuid block)\n      (when-let [edit-id (state\/get-edit-input-id)]\n        (when-let [input (gdom\/getElement edit-id)]\n          (when-let [pos (cursor\/pos input)]\n            (let [value (gobj\/get input \"value\")]\n              (extract-nearest-link-from-text value pos))))))))\n\n(defn follow-link-under-cursor!\n  []\n  (when-let [page (get-nearest-page-or-url)]\n    (when-not (string\/blank? page)\n      (if (re-find url-regex page)\n        (js\/window.open page)\n        (let [page-name (db-model\/get-redirect-page-name page)]\n          (state\/clear-edit!)\n          (insert-first-page-block-if-not-exists! page-name))))))\n\n(defn open-link-in-sidebar!\n  []\n  (when-let [page (get-nearest-page)]\n    (let [page-name (string\/lower-case page)\n          block? (util\/uuid-string? page-name)]\n      (when-let [page (db\/get-page page-name)]\n        (if block?\n          (state\/sidebar-add-block!\n           (state\/get-current-repo)\n           (:db\/id page)\n           :block)\n          (state\/sidebar-add-block!\n           (state\/get-current-repo)\n           (:db\/id page)\n           :page))))))\n\n(defn zoom-in! []\n  (if (state\/editing?)\n    (when-let [id (some-> (state\/get-edit-block)\n                          :block\/uuid\n                          ((fn [id] [:block\/uuid id]))\n                          db\/entity\n                          :block\/uuid)]\n      (let [pos (state\/get-edit-pos)]\n        (route-handler\/redirect-to-page! id)\n        (js\/setTimeout #(edit-block! {:block\/uuid id} pos id) 0)))\n    (js\/window.history.forward)))\n\n(defn zoom-out!\n  []\n  (if (state\/editing?)\n    (let [page (state\/get-current-page)\n          block-id (and (string? page) (parse-uuid page))]\n      (when block-id\n        (let [block-parent (db\/get-block-parent block-id)]\n          (if-let [id (and\n                       (nil? (:block\/name block-parent))\n                       (:block\/uuid block-parent))]\n            (do\n              (route-handler\/redirect-to-page! id)\n              (js\/setTimeout #(edit-block! {:block\/uuid block-id} :max block-id) 0))\n            (let [page-id (some-> (db\/entity [:block\/uuid block-id])\n                                  :block\/page\n                                  :db\/id)]\n\n              (when-let [page-name (:block\/name (db\/entity page-id))]\n                (route-handler\/redirect-to-page! page-name)\n                (js\/setTimeout #(edit-block! {:block\/uuid block-id} :max block-id) 0)))))))\n    (js\/window.history.back)))\n\n(defn cut-block!\n  [block-id]\n  (when-let [block (db\/pull [:block\/uuid block-id])]\n    (let [repo (state\/get-current-repo)\n          ;; TODO: support org mode\n          [_top-level-block-uuids md-content] (compose-copied-blocks-contents repo [block-id])\n          html (export-html\/export-blocks-as-html repo [block-id] nil)\n          sorted-blocks (tree\/get-sorted-block-and-children repo (:db\/id block))]\n      (common-handler\/copy-to-clipboard-without-id-property! (:block\/format block) md-content html sorted-blocks)\n      (state\/set-block-op-type! :cut)\n      (delete-block-aux! block true))))\n\n(defn highlight-selection-area!\n  [end-block]\n  (when-let [start-block (state\/get-selection-start-block-or-first)]\n    (let [blocks (util\/get-nodes-between-two-nodes start-block end-block \"ls-block\")\n          direction (util\/get-direction-between-two-nodes start-block end-block \"ls-block\")\n          blocks (if (= :up direction)\n                   (reverse blocks)\n                   blocks)]\n      (state\/exit-editing-and-set-selected-blocks! blocks direction))))\n\n(defn- select-block-up-down\n  [direction]\n  (cond\n    ;; when editing, quit editing and select current block\n    (state\/editing?)\n    (let [element (gdom\/getElement (state\/get-editing-block-dom-id))]\n      (when element\n        (util\/scroll-to-block element)\n        (state\/exit-editing-and-set-selected-blocks! [element])))\n\n    ;; when selection and one block selected, select next block\n    (and (state\/selection?) (== 1 (count (state\/get-selection-blocks))))\n    (let [f (if (= :up direction) util\/get-prev-block-non-collapsed util\/get-next-block-non-collapsed-skip)\n          element (f (first (state\/get-selection-blocks)))]\n      (when element\n        (util\/scroll-to-block element)\n        (state\/conj-selection-block! element direction)))\n\n    ;; if same direction, keep conj on same direction\n    (and (state\/selection?) (= direction (state\/get-selection-direction)))\n    (let [f (if (= :up direction) util\/get-prev-block-non-collapsed util\/get-next-block-non-collapsed-skip)\n          first-last (if (= :up direction) first last)\n          element (f (first-last (state\/get-selection-blocks)))]\n      (when element\n        (util\/scroll-to-block element)\n        (state\/conj-selection-block! element direction)))\n\n    ;; if different direction, keep clear until one left\n    (state\/selection?)\n    (let [f (if (= :up direction) util\/get-prev-block-non-collapsed util\/get-next-block-non-collapsed)\n          last-first (if (= :up direction) last first)\n          element (f (last-first (state\/get-selection-blocks)))]\n      (when element\n        (util\/scroll-to-block element)\n        (state\/drop-last-selection-block!))))\n  nil)\n\n(defn on-select-block\n  [direction]\n  (fn [_event]\n    (select-block-up-down direction)))\n\n(defn save-block-aux!\n  [block value opts]\n  (let [value (string\/trim value)]\n    ;; FIXME: somehow frontend.components.editor's will-unmount event will loop forever\n    ;; maybe we shouldn't save the block\/file in \"will-unmount\" event?\n    (save-block-if-changed! block value opts)))\n\n(defn save-block!\n  ([repo block-or-uuid content]\n    (save-block! repo block-or-uuid content {}))\n  ([repo block-or-uuid content {:keys [properties] :as opts}]\n   (let [block (if (or (uuid? block-or-uuid)\n                       (string? block-or-uuid))\n                 (db-model\/query-block-by-uuid block-or-uuid) block-or-uuid)]\n     (save-block!\n      {:block block :repo repo :opts (dissoc opts :properties)}\n      (if (seq properties)\n        (property\/insert-properties (:block\/format block) content properties)\n        content))))\n  ([{:keys [block repo opts] :as _state} value]\n   (let [repo (or repo (state\/get-current-repo))]\n     (when (db\/entity repo [:block\/uuid (:block\/uuid block)])\n       (save-block-aux! block value opts)))))\n\n(defn save-blocks!\n  [blocks]\n  (outliner-tx\/transact!\n   {:outliner-op :save-block}\n   (doseq [[block value] blocks]\n     (save-block-if-changed! block value))))\n\n(defn save-current-block!\n  \"skip-properties? if set true, when editing block is likely be properties, skip saving\"\n  ([]\n   (save-current-block! {}))\n  ([{:keys [force? skip-properties? current-block] :as opts}]\n   ;; non English input method\n   (when-not (or (state\/editor-in-composition?)\n                 (:editor\/skip-saving-current-block? @state\/state))\n     (when (state\/get-current-repo)\n       (when-not (state\/get-editor-action)\n         (try\n           (let [input-id (state\/get-edit-input-id)\n                 block (state\/get-edit-block)\n                 db-block (when-let [block-id (:block\/uuid block)]\n                            (db\/pull [:block\/uuid block-id]))\n                 elem (and input-id (gdom\/getElement input-id))\n                 db-content (:block\/content db-block)\n                 db-content-without-heading (and db-content\n                                                 (gp-util\/safe-subs db-content (:block\/level db-block)))\n                 value (if (= (:block\/uuid current-block) (:block\/uuid block))\n                         (:block\/content current-block)\n                         (and elem (gobj\/get elem \"value\")))]\n             (when value\n               (cond\n                 force?\n                 (save-block-aux! db-block value opts)\n\n                 (and skip-properties?\n                      (db-model\/top-block? block)\n                      (when elem (thingatpt\/properties-at-point elem)))\n                 nil\n\n                 (and block value db-content-without-heading\n                      (not= (string\/trim db-content-without-heading)\n                            (string\/trim value)))\n                 (save-block-aux! db-block value opts))))\n           (catch :default error\n             (log\/error :save-block-failed error))))))\n   (state\/set-state! :editor\/skip-saving-current-block? false)))\n\n(defn- clean-content!\n  [format content]\n  (->> (text\/remove-level-spaces content format (config\/get-block-pattern format))\n       (drawer\/remove-logbook)\n       (property\/remove-properties format)\n       string\/trim))\n\n(defn insert-command!\n  [id command-output format {:keys [restore?]\n                             :or {restore? true}\n                             :as option}]\n  (cond\n    ;; replace string\n    (string? command-output)\n    (commands\/insert! id command-output option)\n\n    ;; steps\n    (vector? command-output)\n    (commands\/handle-steps command-output format)\n\n    (fn? command-output)\n    (let [s (command-output)]\n      (commands\/insert! id s option))\n\n    :else\n    nil)\n\n  (when restore?\n    (commands\/restore-state)))\n\n(defn- ensure-assets-dir!\n  [repo]\n  (p\/let [repo-dir (config\/get-repo-dir repo)\n          assets-dir \"assets\"\n          _ (fs\/mkdir-if-not-exists (path\/path-join repo-dir assets-dir))]\n    [repo-dir assets-dir]))\n\n(defn get-asset-path\n  \"Get asset path from filename, ensure assets dir exists\"\n  [filename]\n  (p\/let [[repo-dir assets-dir] (ensure-assets-dir! (state\/get-current-repo))]\n    (path\/path-join repo-dir assets-dir filename)))\n\n(defn save-assets!\n  \"Save incoming(pasted) assets to assets directory.\n\n   Returns: [file-rpath file-obj file-fpath matched-alias]\"\n  ([repo files]\n   (p\/let [[repo-dir assets-dir] (ensure-assets-dir! repo)]\n     (save-assets! repo repo-dir assets-dir files\n                   (fn [index file-stem]\n                     ;; TODO: maybe there're other chars we need to handle?\n                     (let [file-base (-> file-stem\n                                         (string\/replace \" \" \"_\")\n                                         (string\/replace \"%\" \"_\")\n                                         (string\/replace \"\/\" \"_\"))\n                           file-name (str file-base \"_\" (.now js\/Date) \"_\" index)]\n                       (string\/replace file-name #\"_+\" \"_\"))))))\n  ([repo repo-dir asset-dir-rpath files gen-filename]\n   (p\/all\n    (for [[index ^js file] (map-indexed vector files)]\n      ;; WARN file name maybe fully qualified path when paste file\n      (let [file-name (util\/node-path.basename (.-name file))\n            [file-stem ext-full ext-base] (if file-name\n                                            (let [ext-base (util\/node-path.extname file-name)\n                                                  ext-full (if-not (config\/extname-of-supported? ext-base)\n                                                             (util\/full-path-extname file-name) ext-base)]\n                                              [(subs file-name 0 (- (count file-name)\n                                                                    (count ext-full))) ext-full ext-base])\n                                            [\"\" \"\" \"\"])\n            filename  (str (gen-filename index file-stem) ext-full)\n            file-rpath  (str asset-dir-rpath \"\/\" filename)\n            matched-alias (assets-handler\/get-matched-alias-by-ext ext-base)\n            file-rpath (cond-> file-rpath\n                         (not (nil? matched-alias))\n                         (string\/replace #\"^[.\\\/\\\\]*assets[\\\/\\\\]+\" \"\"))\n            dir (or (:dir matched-alias) repo-dir)]\n        (if (util\/electron?)\n          (let [from (not-empty (.-path file))]\n\n            (js\/console.debug \"Debug: Copy Asset #\" dir file-rpath from)\n            (-> (js\/window.apis.copyFileToAssets dir file-rpath from)\n                (p\/then\n                 (fn [dest]\n                   [file-rpath\n                    (if (string? dest) (js\/File. #js[] dest) file)\n                    (path\/path-join dir file-rpath)\n                    matched-alias]))\n                (p\/catch #(js\/console.error \"Debug: Copy Asset Error#\" %))))\n\n          (p\/do! (js\/console.debug \"Debug: Writing Asset #\" dir file-rpath)\n                 (if (mobile-util\/native-platform?)\n                   ;; capacitor fs accepts Blob, File implements Blob\n                   (p\/let [buffer (.arrayBuffer file)\n                           content (base64\/encodeByteArray (js\/Uint8Array. buffer))\n                           fpath (path\/path-join dir file-rpath)]\n                     (capacitor-fs\/<write-file-with-base64 fpath content))\n                   (fs\/write-file! repo dir file-rpath (.stream file) nil))\n                 [file-rpath file (path\/path-join dir file-rpath) matched-alias])))))))\n\n(defonce *assets-url-cache (atom {}))\n\n(defn make-asset-url\n  \"Make asset URL for UI element, to fill img.src\"\n  [path] ;; path start with \"\/assets\"(editor) or compatible for \"..\/assets\"(whiteboards)\n  (if config\/publishing?\n    path\n    (let [repo      (state\/get-current-repo)\n          repo-dir  (config\/get-repo-dir repo)\n          ;; Hack for path calculation\n          path      (string\/replace path #\"^(\\.\\.)?\/\" \".\/\")\n          full-path (path\/path-join repo-dir path)\n          data-url? (string\/starts-with? path \"data:\")]\n      (cond\n        data-url?\n        path ;; just return the original\n\n        (and (assets-handler\/alias-enabled?)\n             (assets-handler\/check-alias-path? path))\n        (assets-handler\/resolve-asset-real-path-url (state\/get-current-repo) path)\n\n        (util\/electron?)\n        (path\/path-join \"assets:\/\/\" full-path)\n\n        (mobile-util\/native-platform?)\n        (mobile-util\/convert-file-src full-path)\n\n        :else ;; nfs\n        (let [handle-path (str \"handle\/\" full-path)\n              cached-url  (get @*assets-url-cache (keyword handle-path))]\n          (if cached-url\n            (p\/resolved cached-url)\n            ;; Loading File from handle cache\n            ;; Use await file handle, to ensure all handles are loaded.\n            (p\/let [handle (nfs\/await-get-nfs-file-handle repo handle-path)\n                    file   (and handle (.getFile handle))]\n              (when file\n                (p\/let [url (js\/URL.createObjectURL file)]\n                  (swap! *assets-url-cache assoc (keyword handle-path) url)\n                  url)))))))))\n\n(defn delete-asset-of-block!\n  [{:keys [repo href full-text block-id local? delete-local?] :as _opts}]\n  (let [block (db-model\/query-block-by-uuid block-id)\n        _ (or block (throw (str block-id \" not exists\")))\n        text (:block\/content block)\n        content (string\/replace text full-text \"\")]\n    (save-block! repo block content)\n    (when (and local? delete-local?)\n      (when-let [href (if (util\/electron?) href\n                          (second (re-find #\"\\((.+)\\)$\" full-text)))]\n        (let [block-file-rpath (db-model\/get-block-file-path block)\n              asset-fpath (if (string\/starts-with? href \"assets:\/\/\")\n                            (path\/url-to-path href)\n                            (config\/get-repo-fpath\n                             repo\n                             (path\/resolve-relative-path block-file-rpath href)))]\n          (prn ::deleting-asset href asset-fpath)\n          (fs\/unlink! repo asset-fpath nil))))))\n\n;; assets\/journals_2021_02_03_1612350230540_0.png\n(defn resolve-relative-path\n  \"Relative path to current file path.\n\n   Requires editing state\"\n  [file-path]\n  (if-let [current-file-rpath (or (db-model\/get-block-file-path (state\/get-edit-block))\n                                  ;; fix dummy file path of page\n                                  (when (config\/get-pages-directory)\n                                    (path\/path-join (config\/get-pages-directory) \"_.md\"))\n                                  \"pages\/contents.md\")]\n    (let [repo-dir (config\/get-repo-dir (state\/get-current-repo))\n          current-file-fpath (path\/path-join repo-dir current-file-rpath)]\n      (path\/get-relative-path current-file-fpath file-path))\n    file-path))\n\n(defn upload-asset\n  \"Paste asset and insert link to current editing block\"\n  [id ^js files format uploading? drop-or-paste?]\n  (let [repo (state\/get-current-repo)]\n    (when (config\/local-db? repo)\n      (-> (save-assets! repo (js->clj files))\n          ;; FIXME: only the first asset is handled\n          (p\/then\n           (fn [res]\n             (when-let [[asset-file-name file-obj asset-file-fpath matched-alias] (and (seq res) (first res))]\n               (let [image? (config\/ext-of-image? asset-file-name)]\n                 (insert-command!\n                  id\n                  (assets-handler\/get-asset-file-link format\n                                       (if matched-alias\n                                         (str\n                                          (if image? \"..\/assets\/\" \"\")\n                                          \"@\" (:name matched-alias) \"\/\" asset-file-name)\n                                         (resolve-relative-path (or asset-file-fpath asset-file-name)))\n                                       (if file-obj (.-name file-obj) (if image? \"image\" \"asset\"))\n                                       image?)\n                  format\n                  {:last-pattern (if drop-or-paste? \"\" commands\/command-trigger)\n                   :restore?     true\n                   :command      :insert-asset})))))\n          (p\/finally\n            (fn []\n              (reset! uploading? false)\n              (reset! *asset-uploading? false)\n              (reset! *asset-uploading-process 0)))))))\n\n;; Editor should track some useful information, like editor modes.\n;; For example:\n;; 1. Which file format is it, markdown or org mode?\n;; 2. Is it in the properties area? Then we can enable the \":\" autopair\n(def autopair-map\n  {\"[\" \"]\"\n   \"{\" \"}\"\n   \"(\" \")\"\n   \"`\" \"`\"\n   \"~\" \"~\"\n   \"*\" \"*\"\n   \"_\" \"_\"\n   \"^\" \"^\"\n   \"=\" \"=\"\n   \"\/\" \"\/\"\n   \"+\" \"+\"})\n;; \":\" \":\"                              ; TODO: only properties editing and org mode tag\n\n(def reversed-autopair-map\n  (zipmap (vals autopair-map)\n          (keys autopair-map)))\n\n(def autopair-when-selected\n  #{\"*\" \"^\" \"_\" \"=\" \"+\" \"\/\"})\n\n(def delete-map\n  (assoc autopair-map\n         \"$\" \"$\"\n         \":\" \":\"))\n\n(defn- autopair\n  [input-id prefix _format _option]\n  (let [value (get autopair-map prefix)\n        selected (util\/get-selected-text)\n        postfix (str selected value)\n        value (str prefix postfix)\n        input (gdom\/getElement input-id)]\n    (when value\n      (let [[prefix _pos] (commands\/simple-replace! input-id value selected\n                                                    {:backward-pos (count postfix)\n                                                     :check-fn (fn [new-value prefix-pos]\n                                                                 (when (>= prefix-pos 0)\n                                                                   [(subs new-value prefix-pos (+ prefix-pos 2))\n                                                                    (+ prefix-pos 2)]))})]\n        (cond\n          (= prefix page-ref\/left-brackets)\n          (do\n            (commands\/handle-step [:editor\/search-page])\n            (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)\n                                            :selected selected}))\n\n          (= prefix block-ref\/left-parens)\n          (do\n            (commands\/handle-step [:editor\/search-block :reference])\n            (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)\n                                            :selected selected})))))))\n\n(defn surround-by?\n  [input before end]\n  (when input\n    (let [value (gobj\/get input \"value\")\n          pos (cursor\/pos input)]\n      (text-util\/surround-by? value pos before end))))\n\n(defn- autopair-left-paren?\n  [input key]\n  (and (= key \"(\")\n       (or (surround-by? input :start \"\")\n           (surround-by? input \"\\n\" \"\")\n           (surround-by? input \" \" \"\")\n           (surround-by? input \"]\" \"\")\n           (surround-by? input \"(\" \"\"))))\n\n(defn wrapped-by?\n  [input before end]\n  (when input\n    (let [value (gobj\/get input \"value\")\n          pos (cursor\/pos input)]\n      (when (>= pos 0)\n        (text-util\/wrapped-by? value pos before end)))))\n\n(defn get-matched-pages\n  \"Return matched page names\"\n  [q]\n  (let [block (state\/get-edit-block)\n        editing-page (and block\n                          (when-let [page-id (:db\/id (:block\/page block))]\n                            (:block\/name (db\/entity page-id))))\n        pages (search\/page-search q 100)]\n    (if editing-page\n      ;; To prevent self references\n      (remove (fn [p] (= (util\/page-name-sanity-lc p) editing-page)) pages)\n      pages)))\n\n(defn get-matched-blocks\n  [q block-id]\n  ;; remove current block\n  (let [current-block (state\/get-edit-block)\n        block-parents (set (->> (db\/get-block-parents (state\/get-current-repo)\n                                                      block-id\n                                                      99)\n                                (map (comp str :block\/uuid))))\n        current-and-parents (set\/union #{(str (:block\/uuid current-block))} block-parents)]\n    (p\/let [result (search\/block-search (state\/get-current-repo) q {:limit 20})]\n      (remove\n       (fn [h]\n         (contains? current-and-parents (:block\/uuid h)))\n       result))))\n\n(defn get-matched-templates\n  [q]\n  (search\/template-search q))\n\n(defn get-matched-properties\n  [q]\n  (search\/property-search q))\n\n(defn get-matched-property-values\n  [property q]\n  (search\/property-value-search property q))\n\n(defn get-matched-commands\n  [input]\n  (try\n    (let [edit-content (or (gobj\/get input \"value\") \"\")\n          pos (cursor\/pos input)\n          last-slash-caret-pos (:pos (:pos (state\/get-editor-action-data)))\n          last-command (and last-slash-caret-pos (subs edit-content last-slash-caret-pos pos))]\n      (when (> pos 0)\n        (or\n         (and (= commands\/command-trigger (util\/nth-safe edit-content (dec pos)))\n              @commands\/*initial-commands)\n         (and last-command\n              (commands\/get-matched-commands last-command)))))\n    (catch :default e\n      (js\/console.error e)\n      nil)))\n\n(defn get-matched-block-commands\n  [input]\n  (try\n    (let [edit-content (gobj\/get input \"value\")\n          pos (cursor\/pos input)\n          last-command (subs edit-content\n                             (:pos (:pos (state\/get-editor-action-data)))\n                             pos)]\n      (when (> pos 0)\n        (or\n         (and (= \\< (util\/nth-safe edit-content (dec pos)))\n              (commands\/block-commands-map))\n         (and last-command\n              (commands\/get-matched-commands\n               last-command\n               (commands\/block-commands-map))))))\n    (catch :default _error\n      nil)))\n\n(defn auto-complete?\n  []\n  (or @*asset-uploading?\n      (state\/get-editor-action)))\n\n(defn get-current-input-char\n  [input]\n  (when-let [pos (cursor\/pos input)]\n    (let [value (gobj\/get input \"value\")]\n      (when (and (>= (count value) (inc pos))\n                 (>= pos 1))\n        (util\/nth-safe value pos)))))\n\n(defn move-up-down\n  [up?]\n  (fn [event]\n    (util\/stop event)\n    (save-current-block!)\n    (let [edit-block-id (:block\/uuid (state\/get-edit-block))\n          move-nodes (fn [blocks]\n                       (outliner-tx\/transact!\n                        {:outliner-op :move-blocks}\n                        (outliner-core\/move-blocks-up-down! blocks up?))\n                       (when-let [block-node (util\/get-first-block-by-id (:block\/uuid (first blocks)))]\n                         (.scrollIntoView block-node #js {:behavior \"smooth\" :block \"nearest\"})))]\n      (if edit-block-id\n        (when-let [block (db\/pull [:block\/uuid edit-block-id])]\n          (let [blocks [block]]\n            (move-nodes blocks))\n          (when-let [input-id (state\/get-edit-input-id)]\n            (when-let [input (gdom\/getElement input-id)]\n              (.focus input)\n              (js\/setTimeout #(util\/scroll-editor-cursor input) 100))))\n        (let [ids (state\/get-selection-block-ids)]\n          (when (seq ids)\n            (let [lookup-refs (map (fn [id] [:block\/uuid id]) ids)\n                  blocks (db\/pull-many (state\/get-current-repo) '[*] lookup-refs)]\n              (move-nodes blocks))))))))\n\n(defn get-selected-ordered-blocks\n  []\n  (let [repo (state\/get-current-repo)\n        ids (state\/get-selection-block-ids)\n        lookup-refs (->> (map (fn [id] [:block\/uuid id]) ids)\n                         (remove nil?))]\n    (db\/pull-many repo '[*] lookup-refs)))\n\n(defn on-tab\n  \"`direction` = :left | :right.\"\n  [direction]\n  (let [blocks (get-selected-ordered-blocks)]\n    (when (seq blocks)\n      (outliner-tx\/transact!\n       {:outliner-op :move-blocks\n        :real-outliner-op :indent-outdent}\n       (outliner-core\/indent-outdent-blocks! blocks (= direction :right))))))\n\n(defn- get-link [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util\/format \"[%s](%s)\" label link)\n      :org (util\/format \"[[%s][%s]]\" link label)\n      nil)))\n\n(defn- get-image-link\n  [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util\/format \"![%s](%s)\" label link)\n      :org (util\/format \"[[%s]]\"))))\n\n(defn handle-command-input-close [id]\n  (state\/set-editor-show-input! nil)\n  (when-let [saved-cursor (state\/get-editor-last-pos)]\n    (when-let [input (gdom\/getElement id)]\n      (.focus input)\n      (cursor\/move-cursor-to input saved-cursor))))\n\n(defn handle-command-input [command id format m]\n  ;; TODO: Add error handling for when user doesn't provide a required field.\n  ;; (The current behavior is to just revert back to the editor.)\n  (case command\n\n    :link (let [{:keys [link label]} m]\n            (when-not (or (string\/blank? link) (string\/blank? label))\n              (insert-command!\n               id\n               (get-link format link label)\n               format\n               {:last-pattern (str commands\/command-trigger \"link\")\n                :command :link})))\n\n    :image-link (let [{:keys [link label]} m]\n                  (when (not (string\/blank? link))\n                    (insert-command!\n                     id\n                     (get-image-link format link label)\n                     format\n                     {:last-pattern (str commands\/command-trigger \"link\")\n                      :command :image-link})))\n\n    nil)\n\n  (handle-command-input-close id))\n\n(defn- close-autocomplete-if-outside\n  [input]\n  (when (and input\n             (contains? #{:page-search :page-search-hashtag :block-search} (state\/get-editor-action))\n             (not (wrapped-by? input page-ref\/left-brackets page-ref\/right-brackets))\n             (not (wrapped-by? input block-ref\/left-parens block-ref\/right-parens))\n             ;; wrapped-by? doesn't detect multiple beginnings when ending with \"\" so\n             ;; use subs to correctly detect current hashtag\n             (not (text-util\/wrapped-by? (subs (.-value input) 0 (cursor\/pos input)) (cursor\/pos input) commands\/hashtag \"\")))\n    (state\/clear-editor-action!)))\n\n(defn resize-image!\n  [block-id metadata full_text size]\n  (let [new-meta (merge metadata size)\n        image-part (first (string\/split full_text #\"\\{\"))\n        new-full-text (str image-part (pr-str new-meta))\n        block (db\/pull [:block\/uuid block-id])\n        value (:block\/content block)\n        new-value (string\/replace value full_text new-full-text)]\n    (save-block-aux! block new-value {})))\n\n(defn- mark-last-input-time!\n  [repo]\n  (when repo\n    (state\/set-editor-last-input-time! repo (util\/time-ms))\n    (db\/clear-repo-persistent-job! repo)))\n\n(defonce *auto-save-timeout (atom nil))\n(defn edit-box-on-change!\n  [e _block id]\n  (let [value (util\/evalue e)\n        repo (state\/get-current-repo)]\n    (state\/set-edit-content! id value false)\n    (when @*auto-save-timeout\n      (js\/clearTimeout @*auto-save-timeout))\n    (mark-last-input-time! repo)\n    (reset! *auto-save-timeout\n            (js\/setTimeout\n             (fn []\n               (when (state\/input-idle? repo :diff 500)\n                 (state\/set-editor-op! :auto-save)\n                 ; don't auto-save for page's properties block\n                 (save-current-block! {:skip-properties? true})\n                 (state\/set-editor-op! nil)))\n             500))))\n\n(defn- start-of-new-word?\n  [input pos]\n  (contains? #{\" \" \"\\t\"} (get (.-value input) (- pos 2))))\n\n(defn handle-last-input []\n  (let [input           (state\/get-input)\n        input-id        (state\/get-edit-input-id)\n        edit-block      (state\/get-edit-block)\n        pos             (cursor\/pos input)\n        content         (.-value input)\n        last-input-char (util\/nth-safe content (dec pos))\n        last-prev-input-char (util\/nth-safe content (dec (dec pos)))\n        prev-prev-input-char (util\/nth-safe content (- pos 3))]\n\n    ;; TODO: is it cross-browser compatible?\n    ;; (not= (gobj\/get native-e \"inputType\") \"insertFromPaste\")\n    (cond\n      (and (= content \"1. \") (= last-input-char \" \") input-id edit-block\n           (not (own-order-number-list? edit-block)))\n      (p\/do!\n       (state\/pub-event! [:editor\/toggle-own-number-list edit-block])\n       (state\/set-edit-content! input-id \"\"))\n\n      (and (= last-input-char commands\/command-trigger)\n           (or (re-find #\"(?m)^\/\" (str (.-value input))) (start-of-new-word? input pos)))\n      (do\n        (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)})\n        (commands\/reinit-matched-commands!)\n        (state\/set-editor-show-commands!))\n\n      (= last-input-char commands\/angle-bracket)\n      (do\n        (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)})\n        (commands\/reinit-matched-block-commands!)\n        (state\/set-editor-show-block-commands!))\n\n      (and (= last-input-char last-prev-input-char commands\/colon)\n           (or (nil? prev-prev-input-char)\n               (= prev-prev-input-char \"\\n\")))\n      (do\n        (cursor\/move-cursor-backward input 2)\n        (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)})\n        (state\/set-editor-action! :property-search))\n\n      (and\n       (not= :property-search (state\/get-editor-action))\n       (let [{:keys [line start-pos]} (text-util\/get-current-line-by-pos (.-value input) (dec pos))]\n         (text-util\/wrapped-by? line (- pos start-pos) \"\" gp-property\/colons)))\n      (do\n        (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)})\n        (state\/set-editor-action! :property-search))\n\n      (and (= last-input-char commands\/colon) (= :property-search (state\/get-editor-action)))\n      (state\/clear-editor-action!)\n\n      ;; Open \"Search page or New page\" auto-complete\n      (and (= last-input-char commands\/hashtag)\n           ;; Only trigger at beginning of a line or before whitespace\n           (or (re-find #\"(?m)^#\" (str (.-value input))) (start-of-new-word? input pos)))\n      (do\n        (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)})\n        (state\/set-editor-last-pos! pos)\n        (state\/set-editor-action! :page-search-hashtag))\n\n      :else\n      nil)))\n\n(defn get-selected-text\n  []\n  (let [text (:selected (state\/get-editor-action-data))]\n    (when-not (string\/blank? text)\n      text)))\n\n(defn block-on-chosen-handler\n  [id q format selected-text]\n  (fn [chosen _click?]\n    (state\/clear-editor-action!)\n    (let [uuid-string (str (:block\/uuid chosen))]\n\n      ;; block reference\n      (insert-command! id\n                       (block-ref\/->block-ref uuid-string)\n                       format\n                       {:last-pattern (str block-ref\/left-parens (if selected-text \"\" q))\n                        :end-pattern block-ref\/right-parens\n                        :postfix-fn   (fn [s] (util\/replace-first block-ref\/right-parens s \"\"))\n                        :forward-pos 3\n                        :command :block-ref})\n\n      ;; Save it so it'll be parsed correctly in the future\n      (editor-property\/set-block-property! (:block\/uuid chosen)\n                                           :id\n                                           uuid-string)\n\n      (when-let [input (gdom\/getElement id)]\n        (.focus input)))))\n\n(defn block-non-exist-handler\n  [input]\n  (fn []\n    (state\/clear-editor-action!)\n    (cursor\/move-cursor-forward input 2)))\n\n(defn- paste-block-cleanup\n  [block page exclude-properties format content-update-fn keep-uuid?]\n  (let [new-content\n        (if content-update-fn\n          (content-update-fn (:block\/content block))\n          (:block\/content block))\n        new-content\n        (cond->> new-content\n             (not keep-uuid?) (property\/remove-property format \"id\")\n             true             (property\/remove-property format \"custom_id\"))]\n    (merge (apply dissoc block (conj (when-not keep-uuid? [:block\/_refs]) :block\/pre-block? :block\/meta))\n           {:block\/page {:db\/id (:db\/id page)}\n            :block\/format format\n            :block\/properties (apply dissoc (:block\/properties block)\n                                     (concat\n                                      (when-not keep-uuid? [:id])\n                                      [:custom_id :custom-id]\n                                      exclude-properties))\n            :block\/properties-text-values (apply dissoc (:block\/properties-text-values block)\n                                                 (concat\n                                                  (when-not keep-uuid? [:id])\n                                                  exclude-properties))\n            :block\/content new-content})))\n\n(defn- edit-last-block-after-inserted!\n  [result]\n  (js\/setTimeout\n   (fn []\n     (when-let [last-block (last (:blocks result))]\n       (clear-when-saved!)\n       (let [last-block' (db\/pull [:block\/uuid (:block\/uuid last-block)])]\n         (edit-block! last-block' :max (:block\/uuid last-block')))))\n   0))\n\n(defn- nested-blocks\n  [blocks]\n  (let [ids (set (map :db\/id blocks))]\n    (some? (some #(ids (:db\/id (:block\/parent %))) blocks))))\n\n(defn paste-blocks\n  \"Given a vec of blocks, insert them into the target page.\n   keep-uuid?: if true, keep the uuid provided in the block structure.\"\n  [blocks {:keys [content-update-fn\n                  exclude-properties\n                  target-block\n                  sibling?\n                  keep-uuid?\n                  revert-cut-txs]\n           :or {exclude-properties []}}]\n  (let [editing-block (when-let [editing-block (state\/get-edit-block)]\n                        (some-> (db\/pull [:block\/uuid (:block\/uuid editing-block)])\n                                (assoc :block\/content (state\/get-edit-content))))\n        has-unsaved-edits (and editing-block\n                               (not= (:block\/content (db\/pull (:db\/id editing-block)))\n                                     (state\/get-edit-content)))\n        target-block (or target-block editing-block)\n        block (db\/entity (:db\/id target-block))\n        page (if (:block\/name block) block\n                 (when target-block (:block\/page (db\/entity (:db\/id target-block)))))\n        empty-target? (string\/blank? (:block\/content target-block))\n        paste-nested-blocks? (nested-blocks blocks)\n        target-block-has-children? (db\/has-children? (:block\/uuid target-block))\n        replace-empty-target? (and empty-target?\n                                   (or (not target-block-has-children?)\n                                       (and target-block-has-children? (= (count blocks) 1)))\n                                   (block-has-no-ref? (:db\/id target-block)))\n        target-block' (if (and empty-target? target-block-has-children? paste-nested-blocks?)\n                        (db\/pull (:db\/id (:block\/left target-block)))\n                        target-block)\n        sibling? (cond\n                   (and paste-nested-blocks? empty-target?)\n                   (= (:block\/parent target-block') (:block\/parent target-block))\n\n                   (some? sibling?)\n                   sibling?\n\n                   target-block-has-children?\n                   false\n\n                   :else\n                   true)]\n\n    (when has-unsaved-edits\n      (outliner-tx\/transact!\n        {:outliner-op :save-block}\n        (outliner-core\/save-block! editing-block)))\n\n    (outliner-tx\/transact!\n      {:outliner-op :insert-blocks\n       :additional-tx revert-cut-txs}\n      (when target-block'\n        (let [format (or (:block\/format target-block') (state\/get-preferred-format))\n              blocks' (map (fn [block]\n                             (paste-block-cleanup block page exclude-properties format content-update-fn keep-uuid?))\n                        blocks)\n              result (outliner-core\/insert-blocks! blocks' target-block' {:sibling? sibling?\n                                                                          :outliner-op :paste\n                                                                          :replace-empty-target? replace-empty-target?\n                                                                          :keep-uuid? keep-uuid?})]\n          (state\/set-block-op-type! nil)\n          (edit-last-block-after-inserted! result))))))\n\n(defn- block-tree->blocks\n  \"keep-uuid? - maintain the existing :uuid in tree vec\"\n  [tree-vec format keep-uuid? page-name]\n  (->> (outliner-core\/tree-vec-flatten tree-vec)\n       (map (fn [block]\n              (let [content (:content block)\n                    props (into [] (:properties block))\n                    content* (str (if (= :markdown format) \"- \" \"* \")\n                                  (property\/insert-properties format content props))\n                    ast (mldoc\/->edn content* (gp-mldoc\/default-config format))\n                    blocks (block\/extract-blocks ast content* format {:page-name page-name})\n                    fst-block (first blocks)\n                    fst-block (if (and keep-uuid? (uuid? (:uuid block)))\n                                (assoc fst-block :block\/uuid (:uuid block))\n                                fst-block)]\n                (assert fst-block \"fst-block shouldn't be nil\")\n                (assoc fst-block :block\/level (:block\/level block)))))))\n\n(defn insert-block-tree\n  \"`tree-vec`: a vector of blocks.\n   A block element: {:content :properties :children [block-1, block-2, ...]}\"\n  [tree-vec format {:keys [target-block keep-uuid?] :as opts}]\n  (let [page-id (:db\/id (:block\/page target-block))\n        page-name (some-> page-id (db\/entity) :block\/name)\n        blocks (block-tree->blocks tree-vec format keep-uuid? page-name)\n        blocks (gp-block\/with-parent-and-left page-id blocks)\n        block-refs (->> (mapcat :block\/refs blocks)\n                        (set)\n                        (filter (fn [ref] (and (vector? ref) (= :block\/uuid (first ref))))))]\n    (when (seq block-refs)\n      (db\/transact! (map (fn [[_ id]] {:block\/uuid id}) block-refs)))\n    (paste-blocks\n     blocks\n     opts)))\n\n(defn insert-block-tree-after-target\n  \"`tree-vec`: a vector of blocks.\n   A block element: {:content :properties :children [block-1, block-2, ...]}\"\n  [target-block-id sibling? tree-vec format keep-uuid?]\n  (insert-block-tree tree-vec format\n                     {:target-block (db\/pull target-block-id)\n                      :keep-uuid?   keep-uuid?\n                      :sibling?     sibling?}))\n\n(defn insert-template!\n  ([element-id db-id]\n   (insert-template! element-id db-id {}))\n  ([element-id db-id {:keys [target] :as opts}]\n   (when-let [db-id (if (integer? db-id)\n                      db-id\n                      (:db\/id (db-model\/get-template-by-name (name db-id))))]\n     (let [journal? (:block\/journal? target)\n           repo (state\/get-current-repo)\n           target (or target (state\/get-edit-block))\n           block (db\/entity db-id)\n           format (:block\/format block)\n           block-uuid (:block\/uuid block)\n           template-including-parent? (not (false? (:template-including-parent (:block\/properties block))))\n           blocks (db\/get-block-and-children repo block-uuid)\n           root-block (db\/pull db-id)\n           blocks-exclude-root (remove (fn [b] (= (:db\/id b) db-id)) blocks)\n           sorted-blocks (tree\/sort-blocks blocks-exclude-root root-block)\n           sorted-blocks (cons\n                          (-> (first sorted-blocks)\n                              (update :block\/properties-text-values dissoc :template)\n                              (update :block\/properties-order (fn [keys]\n                                                                (vec (remove #{:template} keys)))))\n                          (rest sorted-blocks))\n           blocks (if template-including-parent?\n                    sorted-blocks\n                    (drop 1 sorted-blocks))]\n       (when element-id\n         (insert-command! element-id \"\" format {:end-pattern commands\/command-trigger}))\n       (let [exclude-properties [:id :template :template-including-parent]\n             content-update-fn (fn [content]\n                                 (->> content\n                                      (property\/remove-property format \"template\")\n                                      (property\/remove-property format \"template-including-parent\")\n                                      template\/resolve-dynamic-template!))\n             page (if (:block\/name block) block\n                      (when target (:block\/page (db\/entity (:db\/id target)))))\n             blocks' (map (fn [block]\n                            (paste-block-cleanup block page exclude-properties format content-update-fn false))\n                          blocks)\n             sibling? (:sibling? opts)\n             sibling?' (cond\n                         (some? sibling?)\n                         sibling?\n\n                         (db\/has-children? (:block\/uuid target))\n                         false\n\n                         :else\n                         true)]\n         (try\n           (outliner-tx\/transact!\n            {:outliner-op :insert-blocks\n             :created-from-journal-template? journal?}\n            (save-current-block!)\n            (let [result (outliner-core\/insert-blocks! blocks'\n                                                       target\n                                                       (assoc opts\n                                                              :sibling? sibling?'))]\n              (edit-last-block-after-inserted! result)))\n           (catch :default ^js\/Error e\n             (notification\/show!\n              [:p.content\n               (util\/format \"Template insert error: %s\" (.-message e))]\n              :error))))))))\n\n(defn template-on-chosen-handler\n  [element-id]\n  (fn [[_template db-id] _click?]\n    (insert-template! element-id db-id\n                      {:replace-empty-target? true})))\n\n(defn get-searching-property\n  [input]\n  (let [value (.-value input)\n        pos (util\/get-selection-start input)\n        postfix (subs value pos)\n        end-index (when-let [idx (string\/index-of postfix gp-property\/colons)]\n                    (+ (max 0 (count (subs value 0 pos))) idx))\n        start-index (or (when-let [p (string\/last-index-of (subs value 0 pos) \"\\n\")]\n                          (inc p))\n                        0)]\n    {:end-index end-index\n     :searching-property (when (and start-index end-index (>= end-index start-index))\n                           (subs value start-index end-index))}))\n\n(defn property-on-chosen-handler\n  [element-id q]\n  (fn [property]\n    (when-let [input (gdom\/getElement element-id)]\n      (let [{:keys [end-index searching-property]} (get-searching-property input)]\n        (cursor\/move-cursor-to input (+ end-index 2))\n        (commands\/insert! element-id (str (or property q) gp-property\/colons \" \")\n                          {:last-pattern (str searching-property gp-property\/colons)})\n        (state\/clear-editor-action!)\n        (js\/setTimeout (fn []\n                         (let [pos (let [input (gdom\/getElement element-id)]\n                                     (cursor\/get-caret-pos input))]\n                           (state\/set-editor-action-data! {:property (or property q)\n                                                           :pos pos})\n                           (state\/set-editor-action! :property-value-search)))\n                       50)))))\n\n(defn property-value-on-chosen-handler\n  [element-id q]\n  (fn [property-value]\n    (commands\/insert! element-id (str gp-property\/colons \" \" (or property-value q))\n                      {:last-pattern (str gp-property\/colons \" \" q)})\n    (state\/clear-editor-action!)))\n\n(defn parent-is-page?\n  [{{:block\/keys [parent page]} :data :as node}]\n  {:pre [(tree\/satisfied-inode? node)]}\n  (= parent page))\n\n(defn outdent-on-enter\n  [node]\n  (when-not (parent-is-page? node)\n    (let [parent-node (tree\/-get-parent node)]\n      (save-current-block!)\n      (outliner-tx\/transact!\n       {:outliner-op :move-blocks\n        :real-outliner-op :indent-outdent}\n       (outliner-core\/move-blocks! [(:data node)] (:data parent-node) true)))))\n\n(defn- last-top-level-child?\n  [{:keys [id]} current-node]\n  (when id\n    (when-let [entity (if-let [id' (parse-uuid (str id))]\n                        (db\/entity [:block\/uuid id'])\n                        (db\/entity [:block\/name (util\/page-name-sanity-lc id)]))]\n      (= (:block\/uuid entity) (tree\/-get-parent-id current-node)))))\n\n(defn insert\n  ([insertion]\n   (insert insertion false))\n  ([insertion auto-complete-enabled?]\n   (when (or auto-complete-enabled?\n             (not (auto-complete?)))\n     (let [^js input (state\/get-input)\n           selected-start (util\/get-selection-start input)\n           selected-end (util\/get-selection-end input)\n           value (.-value input)\n           s1 (subs value 0 selected-start)\n           s2 (subs value selected-end)]\n       (state\/set-edit-content! (state\/get-edit-input-id)\n                                (str s1 insertion))\n       ;; HACK: save scroll-pos of current pos, then add trailing content\n       ;; This logic is also in commands\/simple-insert!\n       (let [scroll-container (util\/nearest-scrollable-container input)\n             scroll-pos (.-scrollTop scroll-container)]\n         (state\/set-edit-content! (state\/get-edit-input-id)\n                                  (str s1 insertion s2))\n         (cursor\/move-cursor-to input (+ selected-start (count insertion)))\n         (set! (.-scrollTop scroll-container) scroll-pos))))))\n\n(defn- keydown-new-line\n  \"Insert newline to current cursor position\"\n  []\n  (insert \"\\n\"))\n\n(declare delete-and-update)\n\n(defn- dwim-in-properties\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state\/get-input)\n              content (gobj\/get input \"value\")\n              format (:block\/format (:block (get-state)))\n              property-key (:raw-content (thingatpt\/property-key-at-point input))\n              org? (= format :org)\n              move-to-pos (if org? 2 3)]\n          (if org?\n            (cond\n              (and property-key (not= property-key \"\"))\n              (case property-key\n                ;; When cursor in \"PROPERTIES\", add :|: in a new line and move cursor to |\n                \"PROPERTIES\"\n                (do (cursor\/move-cursor-to-line-end input)\n                    (insert \"\\n:: \")\n                    (cursor\/move-cursor-backward input move-to-pos))\n                ;; When cursor in \"END\", new block (respect the previous enter behavior)\n                \"END\"\n                (do\n                  (cursor\/move-cursor-to-end input)\n                  (save-current-block!)\n                  (insert-new-block! state))\n                ;; cursor in other positions of :ke|y: or ke|y::, move to line end for inserting value.\n                (if (property\/property-key-exist? format content property-key)\n                  (notification\/show!\n                   [:p.content\n                    (util\/format \"Property key \\\"%s\\\" already exists!\" property-key)]\n                   :error)\n                  (cursor\/move-cursor-to-line-end input)))\n\n              ;; when cursor in empty property key\n              (and property-key (= property-key \"\"))\n              (do (delete-and-update\n                   input\n                   (cursor\/line-beginning-pos input)\n                   (inc (cursor\/line-end-pos input)))\n                  (property\/goto-properties-end format input)\n                  (cursor\/move-cursor-to-line-end input))\n              :else\n              ;;When cursor in other place of PROPERTIES drawer, add :|: in a new line and move cursor to |\n              (do\n                (insert \"\\n:: \")\n                (cursor\/move-cursor-backward input move-to-pos)))\n            (insert \"\\n\")))))))\n\n(defn toggle-list-checkbox\n  [{:block\/keys [content] :as block} old-item-content new-item-content]\n  (let [new-content (string\/replace-first content old-item-content new-item-content)]\n    (save-block-if-changed! block new-content)))\n\n(defn- dwim-in-list\n  []\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state\/get-input)]\n          (when-let [item (thingatpt\/list-item-at-point input)]\n            (let [{:keys [full-content indent bullet checkbox ordered _]} item\n                  next-bullet (if ordered (str (inc bullet) \".\") bullet)\n                  checkbox (when checkbox \"[ ] \")]\n              (if (and\n                   (= (count full-content)\n                      (+ (if ordered (+ (count (str bullet)) 2) 2) (when checkbox (count checkbox))))\n                   (string\/includes? (.-value input) \"\\n\"))\n                (delete-and-update input (cursor\/line-beginning-pos input) (cursor\/line-end-pos input))\n                (let [start-pos (util\/get-selection-start input)\n                      value (.-value input)\n                      before (subs value 0 start-pos)\n                      after (subs value start-pos)\n                      cursor-in-item-content? (and (re-find #\"^(\\d+){1}\\.\" (last (string\/split-lines before)))\n                                                   (not (string\/blank? (first (string\/split-lines after)))))]\n                  (when-not cursor-in-item-content?\n                    (cursor\/move-cursor-to-line-end input)\n                    (insert (str \"\\n\" indent next-bullet \" \" checkbox)))\n                  (when ordered\n                    (let [value (.-value input)\n                          start-pos (util\/get-selection-start input)\n                          after-lists-str (string\/trim (subs value start-pos))\n                          after-lists-str (if cursor-in-item-content?\n                                            (str indent next-bullet \" \" after-lists-str)\n                                            after-lists-str)\n                          lines (string\/split-lines after-lists-str)\n                          after-lists-str' (list\/re-order-items lines (if cursor-in-item-content? bullet (inc bullet)))\n                          value' (str (subs value 0 start-pos) \"\\n\" after-lists-str')\n                          cursor' (if cursor-in-item-content?\n                                    (inc (count (str (subs value 0 start-pos) indent next-bullet \" \")))\n                                    (+ (:end item) (count next-bullet) 2))]\n                      (state\/set-edit-content! (state\/get-edit-input-id) value')\n                      (cursor\/move-cursor-to input cursor'))))))))))))\n\n(defn toggle-page-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state\/get-input)\n            new-pos (cursor\/get-caret-pos input)\n            page-ref-fn (fn [bounds backward-pos]\n                          (commands\/simple-insert!\n                           parent-id bounds\n                           {:backward-pos backward-pos\n                            :check-fn (fn [_ _ _]\n                                        (state\/set-editor-action-data! {:pos new-pos})\n                                        (commands\/handle-step [:editor\/search-page]))}))]\n        (state\/clear-editor-action!)\n        (let [selection (get-selection-and-format)\n              {:keys [selection-start selection-end selection]} selection]\n          (if selection\n            (do (delete-and-update input selection-start selection-end)\n                (insert (page-ref\/->page-ref selection)))\n            (if-let [embed-ref (thingatpt\/embed-macro-at-point input)]\n              (let [{:keys [raw-content start end]} embed-ref]\n                (delete-and-update input start end)\n                (if (= 5 (count raw-content))\n                  (page-ref-fn page-ref\/left-and-right-brackets 2)\n                  (insert raw-content)))\n              (if-let [page-ref (thingatpt\/page-ref-at-point input)]\n                (let [{:keys [start end full-content raw-content]} page-ref]\n                  (delete-and-update input start end)\n                  (if (= raw-content \"\")\n                    (page-ref-fn \"{{embed [[]]}}\" 4)\n                    (insert (util\/format \"{{embed %s}}\" full-content))))\n                (page-ref-fn page-ref\/left-and-right-brackets 2)))))))))\n\n(defn toggle-block-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state\/get-input)\n            new-pos (cursor\/get-caret-pos input)\n            block-ref-fn (fn [bounds backward-pos]\n                           (commands\/simple-insert!\n                            parent-id bounds\n                            {:backward-pos backward-pos\n                             :check-fn     (fn [_ _ _]\n                                             (state\/set-editor-action-data! {:pos new-pos})\n                                             (commands\/handle-step [:editor\/search-block]))}))]\n        (state\/clear-editor-action!)\n        (if-let [embed-ref (thingatpt\/embed-macro-at-point input)]\n          (let [{:keys [raw-content start end]} embed-ref]\n            (delete-and-update input start end)\n            (if (= 5 (count raw-content))\n              (block-ref-fn block-ref\/left-and-right-parens 2)\n              (insert raw-content)))\n          (if-let [page-ref (thingatpt\/block-ref-at-point input)]\n            (let [{:keys [start end full-content raw-content]} page-ref]\n              (delete-and-update input start end)\n              (if (= raw-content \"\")\n                (block-ref-fn \"{{embed (())}}\" 4)\n                (insert (util\/format \"{{embed %s}}\" full-content))))\n            (block-ref-fn block-ref\/left-and-right-parens 2)))))))\n\n(defn- keydown-new-block\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block config]} (get-state)]\n      (when block\n        (let [input (state\/get-input)\n              config (assoc config :keydown-new-block true)\n              content (gobj\/get input \"value\")\n              pos (cursor\/pos input)\n              current-node (outliner-core\/block block)\n              has-right? (-> (tree\/-get-right current-node)\n                             (tree\/satisfied-inode?))\n              thing-at-point ;intern is not supported in cljs, need a more elegant solution\n              (or (when (thingatpt\/get-setting :admonition&src?)\n                    (thingatpt\/admonition&src-at-point input))\n                  (when (thingatpt\/get-setting :markup?)\n                    (thingatpt\/markup-at-point input))\n                  (when (thingatpt\/get-setting :block-ref?)\n                    (thingatpt\/block-ref-at-point input))\n                  (when (thingatpt\/get-setting :page-ref?)\n                    (thingatpt\/page-ref-at-point input))\n                  (when (thingatpt\/get-setting :properties?)\n                    (thingatpt\/properties-at-point input))\n                  (when (thingatpt\/get-setting :list?)\n                    (and (not (cursor\/beginning-of-line? input))\n                         (thingatpt\/list-item-at-point input))))]\n          (cond\n            thing-at-point\n            (case (:type thing-at-point)\n              \"markup\" (let [right-bound (:bounds thing-at-point)]\n                         (cursor\/move-cursor-to\n                          input\n                          (+ (string\/index-of content right-bound pos)\n                             (count right-bound))))\n              \"admonition-block\" (keydown-new-line)\n              \"source-block\" (do\n                               (keydown-new-line)\n                               (case (:action thing-at-point)\n                                 :into-code-editor\n                                 (state\/into-code-editor-mode!)\n                                 nil))\n              \"block-ref\" (open-block-in-sidebar! (:link thing-at-point))\n              \"page-ref\" (when-not (string\/blank? (:link thing-at-point))\n                           (let [page (:link thing-at-point)\n                                 page-name (db-model\/get-redirect-page-name page)]\n                             (insert-first-page-block-if-not-exists! page-name)))\n              \"list-item\" (dwim-in-list)\n              \"properties-drawer\" (dwim-in-properties state))\n\n            (and (string\/blank? content)\n                 (own-order-number-list? block)\n                 (not (some-> (db-model\/get-block-parent (:block\/uuid block))\n                              (own-order-number-list?))))\n            (remove-block-own-order-list-type! block)\n\n            (and\n             (string\/blank? content)\n             (not has-right?)\n             (not (last-top-level-child? config current-node)))\n            (outdent-on-enter current-node)\n\n            :else\n            (profile\n             \"Insert block\"\n             (outliner-tx\/transact! {:outliner-op :insert-blocks}\n               (insert-new-block! state)))))))))\n\n(defn- inside-of-single-block\n  \"When we are in a single block wrapper, we should always insert a new line instead of new block\"\n  [el]\n  (some? (dom\/closest el \".single-block\")))\n\n(defn keydown-new-block-handler [state e]\n  (if (or (state\/doc-mode-enter-for-new-line?) (inside-of-single-block (rum\/dom-node state)))\n    (keydown-new-line)\n    (do\n      (.preventDefault e)\n      (keydown-new-block state))))\n\n(defn keydown-new-line-handler [state e]\n  (if (and (state\/doc-mode-enter-for-new-line?) (not (inside-of-single-block (rum\/dom-node state))))\n    (keydown-new-block state)\n    (do\n      (.preventDefault e)\n      (keydown-new-line))))\n\n(defn- select-first-last\n  \"Select first or last block in viewpoint\"\n  [direction]\n  (let [f (case direction :up last :down first)\n        block (->> (util\/get-blocks-noncollapse)\n                   (f))]\n    (when block\n      (util\/scroll-to-block block)\n      (state\/exit-editing-and-set-selected-blocks! [block]))))\n\n(defn- select-up-down [direction]\n  (let [selected-blocks (state\/get-selection-blocks)\n        selected (case direction\n                   :up (first selected-blocks)\n                   :down (last selected-blocks))\n        f (case direction\n            :up util\/get-prev-block-non-collapsed\n            :down util\/get-next-block-non-collapsed)\n        sibling-block (f selected)]\n    (when (and sibling-block (dom\/attr sibling-block \"blockid\"))\n      (util\/scroll-to-block sibling-block)\n      (state\/exit-editing-and-set-selected-blocks! [sibling-block]))))\n\n(defn- move-cross-boundary-up-down\n  [direction]\n  (let [input (state\/get-input)\n        line-pos (util\/get-first-or-last-line-pos input)\n        repo (state\/get-current-repo)\n        f (case direction\n            :up util\/get-prev-block-non-collapsed\n            :down util\/get-next-block-non-collapsed)\n        sibling-block (f (gdom\/getElement (state\/get-editing-block-dom-id)))\n        {:block\/keys [uuid content format]} (state\/get-edit-block)]\n    (if sibling-block\n      (when-let [sibling-block-id (dom\/attr sibling-block \"blockid\")]\n        (let [value (state\/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string\/trim value))\n            (save-block! repo uuid value)))\n\n        (let [new-id (string\/replace (gobj\/get sibling-block \"id\") \"ls-block\" \"edit-block\")\n              new-uuid (cljs.core\/uuid sibling-block-id)\n              block (db\/pull repo '[*] [:block\/uuid new-uuid])]\n          (edit-block! block\n                       [direction line-pos]\n                       new-id)))\n      (case direction\n        :up (cursor\/move-cursor-to input 0)\n        :down (cursor\/move-cursor-to-end input)))))\n\n(defn keydown-up-down-handler\n  [direction]\n  (let [input (state\/get-input)\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)\n        up? (= direction :up)\n        down? (= direction :down)]\n    (cond\n      (not= selected-start selected-end)\n      (if up?\n        (cursor\/move-cursor-to input selected-start)\n        (cursor\/move-cursor-to input selected-end))\n\n      (or (and up? (cursor\/textarea-cursor-first-row? input))\n          (and down? (cursor\/textarea-cursor-last-row? input)))\n      (move-cross-boundary-up-down direction)\n\n      :else\n      (if up?\n        (cursor\/move-cursor-up input)\n        (cursor\/move-cursor-down input)))))\n\n(defn- move-to-block-when-cross-boundary\n  [direction]\n  (let [up? (= :left direction)\n        pos (if up? :max 0)\n        {:block\/keys [format uuid] :as block} (state\/get-edit-block)\n        id (state\/get-edit-input-id)\n        repo (state\/get-current-repo)\n        editing-block (gdom\/getElement (state\/get-editing-block-dom-id))\n        f (if up? util\/get-prev-block-non-collapsed util\/get-next-block-non-collapsed)\n        sibling-block (f editing-block)\n        same-container? (when (and editing-block sibling-block)\n                          (->> [editing-block sibling-block]\n                               (map (fn [^js b] (.closest b \".blocks-container\")))\n                               (apply =)))]\n    (when (and sibling-block same-container?)\n      (when-let [sibling-block-id (dom\/attr sibling-block \"blockid\")]\n        (let [content (:block\/content block)\n              value (state\/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string\/trim value))\n            (save-block! repo uuid value)))\n        (let [block (db\/pull repo '[*] [:block\/uuid (cljs.core\/uuid sibling-block-id)])]\n          (edit-block! block pos id))))))\n\n(defn keydown-arrow-handler\n  [direction]\n  (let [input (state\/get-input)\n        element js\/document.activeElement\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)\n        left? (= direction :left)\n        right? (= direction :right)]\n    (when (= input element)\n      (cond\n        (not= selected-start selected-end)\n        (if left?\n          (cursor\/move-cursor-to input selected-start)\n          (cursor\/move-cursor-to input selected-end))\n\n        (or (and left? (cursor\/start? input))\n            (and right? (cursor\/end? input)))\n        (move-to-block-when-cross-boundary direction)\n\n        :else\n        (if left?\n          (cursor\/move-cursor-backward input)\n          (cursor\/move-cursor-forward input))))))\n\n(defn- delete-and-update [^js input start end]\n  (util\/safe-set-range-text! input \"\" start end)\n  (state\/set-edit-content! (state\/get-edit-input-id) (.-value input)))\n\n(defn- delete-concat [current-block]\n  (let [^js input (state\/get-input)\n        current-pos (cursor\/pos input)\n        value (gobj\/get input \"value\")\n        right (outliner-core\/get-right-sibling (:db\/id current-block))\n        current-block-has-children? (db\/has-children? (:block\/uuid current-block))\n        collapsed? (util\/collapsed? current-block)\n        first-child (:data (tree\/-get-down (outliner-core\/block current-block)))\n        next-block (if (or collapsed? (not current-block-has-children?))\n                     (when right (db\/pull (:db\/id right)))\n                     first-child)]\n    (cond\n      (nil? next-block)\n      nil\n\n      (and collapsed? right (db\/has-children? (:block\/uuid right)))\n      nil\n\n      (and (not collapsed?) first-child (db\/has-children? (:block\/uuid first-child)))\n      nil\n\n      :else\n      (let [edit-block (state\/get-edit-block)\n            transact-opts {:outliner-op :delete-blocks\n                           :concat-data {:last-edit-block (:block\/uuid edit-block)\n                                         :end? true}}\n            next-block-has-refs? (some? (:block\/_refs (db\/entity (:db\/id next-block))))\n            new-content (if next-block-has-refs?\n                          (str value \"\"\n                               (->> (:block\/content next-block)\n                                    (property\/remove-properties (:block\/format next-block))\n                                    (drawer\/remove-logbook)))\n                          (str value \"\" (:block\/content next-block)))\n            repo (state\/get-current-repo)\n            edit-block' (if next-block-has-refs?\n                          (assoc edit-block\n                                 :block\/uuid (:block\/uuid next-block)\n                                 :block.temp\/additional-properties (dissoc (:block\/properties next-block) :block\/uuid))\n                          edit-block)]\n        (outliner-tx\/transact! transact-opts\n          (delete-block-aux! next-block false)\n          (save-block! repo edit-block' new-content {:editor\/op :delete}))\n        (let [block (if next-block-has-refs? next-block edit-block)]\n          (edit-block! block current-pos (:block\/uuid block)))))))\n\n(defn keydown-delete-handler\n  [_e]\n  (let [^js input (state\/get-input)\n        current-pos (cursor\/pos input)\n        value (gobj\/get input \"value\")\n        end? (= current-pos (count value))\n        current-block (state\/get-edit-block)\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)]\n    (when current-block\n      (cond\n        (not= selected-start selected-end)\n        (delete-and-update input selected-start selected-end)\n\n        (and end? current-block)\n        (let [editor-state (get-state)\n              custom-query? (get-in editor-state [:config :custom-query?])]\n          (when-not custom-query?\n            (delete-concat current-block)))\n\n        :else\n        (delete-and-update\n          input current-pos (util\/safe-inc-current-pos-from-start (.-value input) current-pos))))))\n\n(defn keydown-backspace-handler\n  [cut? e]\n  (let [^js input (state\/get-input)\n        id (state\/get-edit-input-id)\n        current-pos (cursor\/pos input)\n        value (gobj\/get input \"value\")\n        deleted (and (> current-pos 0)\n                     (util\/nth-safe value (dec current-pos)))\n        selected-start (util\/get-selection-start input)\n        selected-end (util\/get-selection-end input)\n        block (state\/get-edit-block)\n        repo (state\/get-current-repo)\n        top-block? (= (:block\/left block) (:block\/page block))\n        single-block? (inside-of-single-block (.-target e))\n        root-block? (= (:block.temp\/container block) (str (:block\/uuid block)))]\n    (mark-last-input-time! repo)\n    (cond\n      (not= selected-start selected-end)\n      (do\n        (util\/stop e)\n        (when cut?\n          (js\/document.execCommand \"copy\"))\n        (delete-and-update input selected-start selected-end))\n\n      (zero? current-pos)\n      (let [editor-state (get-state)\n            custom-query? (get-in editor-state [:config :custom-query?])]\n        (util\/stop e)\n        (when (and (if top-block? (string\/blank? value) true)\n                   (not root-block?)\n                   (not single-block?)\n                   (not custom-query?))\n          (if (own-order-number-list? block)\n            (do\n              (save-current-block!)\n              (remove-block-own-order-list-type! block))\n            (delete-block! repo false))))\n\n      (and (> current-pos 1)\n           (= (util\/nth-safe value (dec current-pos)) commands\/command-trigger))\n      (do\n        (util\/stop e)\n        (commands\/restore-state)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      (and (> current-pos 1)\n           (= (util\/nth-safe value (dec current-pos)) commands\/angle-bracket))\n      (do\n        (util\/stop e)\n        (commands\/restore-state)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; pair\n      (and\n       deleted\n       (contains?\n        (set (keys delete-map))\n        deleted)\n       (>= (count value) (inc current-pos))\n       (= (util\/nth-safe value current-pos)\n          (get delete-map deleted)))\n\n      (do\n        (util\/stop e)\n        (commands\/delete-pair! id)\n        (cond\n          (and (= deleted \"[\") (state\/get-editor-show-page-search?))\n          (state\/clear-editor-action!)\n\n          (and (= deleted \"(\") (state\/get-editor-show-block-search?))\n          (state\/clear-editor-action!)\n\n          :else\n          nil))\n\n      ;; deleting hashtag\n      (and (= deleted \"#\") (state\/get-editor-show-page-search-hashtag?))\n      (do\n        (state\/clear-editor-action!)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; just delete\n      :else\n      (when-not (mobile-util\/native-ios?)\n        (util\/stop e)\n        (delete-and-update\n         input (util\/safe-dec-current-pos-from-end (.-value input) current-pos) current-pos)))))\n\n(defn indent-outdent\n  [indent?]\n  (save-current-block!)\n  (state\/set-editor-op! :indent-outdent)\n  (let [pos (some-> (state\/get-input) cursor\/pos)\n        {:keys [block]} (get-state)]\n    (when block\n      (state\/set-editor-last-pos! pos)\n      (outliner-tx\/transact!\n       {:outliner-op :move-blocks\n        :real-outliner-op :indent-outdent}\n       (outliner-core\/indent-outdent-blocks! [block] indent?)))\n    (state\/set-editor-op! :nil)))\n\n(defn keydown-tab-handler\n  [direction]\n  (fn [e]\n    (cond\n      (state\/editing?)\n      (when-not (state\/get-editor-action)\n        (util\/stop e)\n        (indent-outdent (not (= :left direction))))\n\n      (state\/selection?)\n      (do\n        (util\/stop e)\n        (on-tab direction)))\n    nil))\n\n(defn ^:large-vars\/cleanup-todo keydown-not-matched-handler\n  \"NOTE: Keydown cannot be used on Android platform\"\n  [format]\n  (fn [e _key-code]\n    (let [input-id (state\/get-edit-input-id)\n          input (state\/get-input)\n          key (gobj\/get e \"key\")\n          value (gobj\/get input \"value\")\n          ctrlKey (gobj\/get e \"ctrlKey\")\n          metaKey (gobj\/get e \"metaKey\")\n          pos (cursor\/pos input)\n          hashtag? (or (surround-by? input \"#\" \" \")\n                       (surround-by? input \"#\" :end)\n                       (= key \"#\"))]\n      (cond\n        (and (contains? #{\"ArrowLeft\" \"ArrowRight\"} key)\n             (contains? #{:property-search :property-value-search} (state\/get-editor-action)))\n        (state\/clear-editor-action!)\n\n        (and (util\/event-is-composing? e true) ;; #3218\n             (not hashtag?) ;; #3283 @Rime\n             (not (state\/get-editor-show-page-search-hashtag?))) ;; #3283 @MacOS pinyin\n        nil\n\n        (or ctrlKey metaKey)\n        nil\n\n        ;; FIXME: On mobile, a backspace click to call keydown-backspace-handler\n        ;; does not work if cursor is at the beginning of a block, hence the block\n        ;; can't be deleted. Need to figure out why and find a better solution.\n        (and (mobile-util\/native-platform?)\n             (= key \"Backspace\")\n             (zero? pos)\n             (string\/blank? (.toString (js\/window.getSelection))))\n        (keydown-backspace-handler false e)\n\n        (and (= key \"#\")\n             (and (> pos 0)\n                  (= \"#\" (util\/nth-safe value (dec pos)))))\n        (state\/clear-editor-action!)\n\n        (and (contains? (set\/difference (set (keys reversed-autopair-map))\n                                        #{\"`\"})\n                        key)\n             (= (get-current-input-char input) key))\n        (do (util\/stop e)\n            (cursor\/move-cursor-forward input))\n\n        (and (autopair-when-selected key) (string\/blank? (util\/get-selected-text)))\n        nil\n\n        (some? (:editor\/action @state\/state))\n        nil\n\n        (and (not (string\/blank? (util\/get-selected-text)))\n             (contains? keycode\/left-square-brackets-keys key))\n        (do (autopair input-id \"[\" format nil)\n            (util\/stop e))\n\n        (and (not (string\/blank? (util\/get-selected-text)))\n             (contains? keycode\/left-paren-keys key))\n        (do (util\/stop e)\n            (autopair input-id \"(\" format nil))\n\n        ;; If you type `xyz`, the last backtick should close the first and not add another autopair\n        ;; If you type several backticks in a row, each one should autopair to accommodate multiline code (```)\n        (-> (keys autopair-map)\n            set\n            (disj \"(\")\n            (contains? key)\n            (or (autopair-left-paren? input key)))\n        (let [curr (get-current-input-char input)\n              prev (util\/nth-safe value (dec pos))]\n          (util\/stop e)\n          (if (and (= key \"`\") (= \"`\" curr) (not= \"`\" prev))\n            (cursor\/move-cursor-forward input)\n            (autopair input-id key format nil)))\n\n        (let [sym \"$\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands\/simple-insert! input-id \"$$\" {:backward-pos 2})\n\n        (let [sym \"^\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands\/simple-insert! input-id \"^^\" {:backward-pos 2})\n\n        :else\n        nil))))\n\n(defn- input-page-ref?\n  [k current-pos blank-selected? last-key-code]\n  (and blank-selected?\n       (contains? keycode\/left-square-brackets-keys k)\n       (= (:key last-key-code) k)\n       (> current-pos 0)))\n\n(defn- default-case-for-keyup-handler\n  [input current-pos k code is-processed? c]\n  (let [last-key-code (state\/get-last-key-code)\n        blank-selected? (string\/blank? (util\/get-selected-text))\n        non-enter-processed? (and is-processed? ;; #3251\n                                  (not= code keycode\/enter-code))  ;; #3459\n        editor-action (state\/get-editor-action)]\n    (if (and (= editor-action :page-search-hashtag)\n             (input-page-ref? k current-pos blank-selected? last-key-code))\n      (do\n        (commands\/handle-step [:editor\/input page-ref\/right-brackets {:last-pattern :skip-check\n                                                                      :backward-pos 2}])\n        (commands\/handle-step [:editor\/search-page])\n        (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)}))\n      (when (and (not editor-action) (not non-enter-processed?))\n       (cond\n         ;; When you type text inside square brackets\n         (and (not (contains? #{\"ArrowDown\" \"ArrowLeft\" \"ArrowRight\" \"ArrowUp\" \"Escape\"} k))\n              (wrapped-by? input page-ref\/left-brackets page-ref\/right-brackets))\n         (let [orig-pos (cursor\/get-caret-pos input)\n               value (gobj\/get input \"value\")\n               square-pos (string\/last-index-of (subs value 0 (:pos orig-pos)) page-ref\/left-brackets)\n               pos (+ square-pos 2)\n               _ (state\/set-editor-last-pos! pos)\n               pos (assoc orig-pos :pos pos)\n               command-step (if (= \\# (util\/nth-safe value (dec square-pos)))\n                              :editor\/search-page-hashtag\n                              :editor\/search-page)]\n           (commands\/handle-step [command-step])\n           (state\/set-editor-action-data! {:pos pos}))\n\n         ;; Handle non-ascii square brackets\n         (and (input-page-ref? k current-pos blank-selected? last-key-code)\n              (not (wrapped-by? input page-ref\/left-brackets page-ref\/right-brackets)))\n         (do\n           (commands\/handle-step [:editor\/input page-ref\/left-and-right-brackets {:backward-truncate-number 2\n                                                                                  :backward-pos 2}])\n           (commands\/handle-step [:editor\/search-page])\n           (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)}))\n\n         ;; Handle non-ascii parentheses\n         (and blank-selected?\n              (contains? keycode\/left-paren-keys k)\n              (= (:key last-key-code) k)\n              (> current-pos 0)\n              (not (wrapped-by? input block-ref\/left-parens block-ref\/right-parens)))\n         (do\n           (commands\/handle-step [:editor\/input block-ref\/left-and-right-parens {:backward-truncate-number 2\n                                                                                 :backward-pos 2}])\n           (commands\/handle-step [:editor\/search-block :reference])\n           (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)}))\n\n         ;; Handle non-ascii angle brackets\n         (and (= \"\u3008\" c)\n              (= \"\u300a\" (util\/nth-safe (gobj\/get input \"value\") (dec (dec current-pos))))\n              (> current-pos 0))\n         (do\n           (commands\/handle-step [:editor\/input commands\/angle-bracket {:last-pattern \"\u300a\u3008\"\n                                                                        :backward-pos 0}])\n           (state\/set-editor-action-data! {:pos (cursor\/get-caret-pos input)})\n           (state\/set-editor-show-block-commands!))\n\n         :else\n         nil)))))\n\n(defn keyup-handler\n  [_state input input-id]\n  (fn [e key-code]\n    (when-not (util\/event-is-composing? e)\n      (let [current-pos (cursor\/pos input)\n            value (gobj\/get input \"value\")\n            c (util\/nth-safe value (dec current-pos))\n            [key-code k code is-processed?]\n            (if (and c\n                     (mobile-util\/native-android?)\n                     (or (= key-code 229)\n                         (= key-code 0)))\n              [(.charCodeAt value (dec current-pos))\n               c\n               (cond\n                 (= c \" \")\n                 \"Space\"\n\n                 (parse-long c)\n                 (str \"Digit\" c)\n\n                 :else\n                 (str \"Key\" (string\/upper-case c)))\n               false]\n              [key-code\n               (gobj\/get e \"key\")\n               (if (mobile-util\/native-android?)\n                 (gobj\/get e \"key\")\n                 (gobj\/getValueByKeys e \"event_\" \"code\"))\n                ;; #3440\n               (util\/event-is-composing? e true)])]\n        (cond\n          ;; When you type something after \/\n          (and (= :commands (state\/get-editor-action)) (not= k commands\/command-trigger))\n          (if (= commands\/command-trigger (second (re-find #\"(\\S+)\\s+$\" value)))\n            (state\/clear-editor-action!)\n            (let [matched-commands (get-matched-commands input)]\n              (if (seq matched-commands)\n                (reset! commands\/*matched-commands matched-commands)\n                (state\/clear-editor-action!))))\n\n          ;; When you type search text after < (and when you release shift after typing <)\n          (and (= :block-commands (state\/get-editor-action)) (not= key-code 188)) ; not <\n          (let [matched-block-commands (get-matched-block-commands input)\n                format (:format (get-state))]\n            (if (seq matched-block-commands)\n              (cond\n                (= key-code 9)          ;tab\n                (do\n                  (util\/stop e)\n                  (insert-command! input-id\n                                   (last (first matched-block-commands))\n                                   format\n                                   {:last-pattern commands\/angle-bracket\n                                    :command :block-commands}))\n\n                :else\n                (reset! commands\/*matched-block-commands matched-block-commands))\n              (state\/clear-editor-action!)))\n\n          ;; When you type two spaces after a command character (may always just be handled by the above instead?)\n          (and (contains? #{:block-commands} (state\/get-editor-action))\n               (= c (util\/nth-safe value (dec (dec current-pos))) \" \"))\n          (state\/clear-editor-action!)\n\n          ;; When you type a space after a #\n          (and (state\/get-editor-show-page-search-hashtag?)\n               (= c \" \"))\n          (state\/clear-editor-action!)\n\n          :else\n          (default-case-for-keyup-handler input current-pos k code is-processed? c))\n\n        (close-autocomplete-if-outside input)\n\n        (when-not (or (= k \"Shift\") is-processed?)\n          (state\/set-last-key-code! {:key-code key-code\n                                     :code code\n                                     :key k\n                                     :shift? (.-shiftKey e)}))))))\n\n(defn editor-on-click!\n  [id]\n  (fn [_e]\n    (let [input (gdom\/getElement id)]\n      (util\/scroll-editor-cursor input)\n      (close-autocomplete-if-outside input))))\n\n(defn editor-on-change!\n  [block id search-timeout]\n  (fn [e]\n    (if (= :block-search (state\/sub :editor\/action))\n      (let [timeout 300]\n        (when @search-timeout\n          (js\/clearTimeout @search-timeout))\n        (reset! search-timeout\n                (js\/setTimeout\n                 #(edit-box-on-change! e block id)\n                 timeout)))\n      (let [input (gdom\/getElement id)]\n        (edit-box-on-change! e block id)\n        (util\/scroll-editor-cursor input)))))\n\n(defn- cut-blocks-and-clear-selections!\n  [copy?]\n  (when-not (get-in @state\/state [:ui\/find-in-page :active?])\n    (cut-selection-blocks copy?)\n    (clear-selection!)))\n\n(defn shortcut-copy-selection\n  [_e]\n  (copy-selection-blocks true))\n\n(defn shortcut-cut-selection\n  [e]\n  (util\/stop e)\n  (cut-blocks-and-clear-selections! true))\n\n(defn shortcut-delete-selection\n  [e]\n  (util\/stop e)\n  (cut-blocks-and-clear-selections! false))\n\n(defn- copy-current-block-ref\n  [format]\n  (when-let [current-block (state\/get-edit-block)]\n    (when-let [block-id (:block\/uuid current-block)]\n      (if (= format \"embed\")\n       (copy-block-ref! block-id #(str \"{{embed ((\" % \"))}}\"))\n       (copy-block-ref! block-id block-ref\/->block-ref)))))\n\n(defn copy-current-block-embed []\n  (copy-current-block-ref \"embed\"))\n\n(defn shortcut-copy\n  \"shortcut copy action:\n  * when in selection mode, copy selected blocks\n  * when in edit mode but no text selected, copy current block ref\n  * when in edit mode with text selected, copy selected text as normal\n  * when text is selected on a PDF, copy the highlighted text\"\n  [e]\n  (when-not (auto-complete?)\n    (cond\n      (state\/selection?)\n      (shortcut-copy-selection e)\n\n      (state\/editing?)\n      (let [input (state\/get-input)\n            selected-start (util\/get-selection-start input)\n            selected-end (util\/get-selection-end input)]\n        (save-current-block!)\n        (when (= selected-start selected-end)\n          (copy-current-block-ref \"ref\")))\n\n      (and (state\/get-current-pdf)\n           (.closest (.. js\/window getSelection -baseNode -parentElement)  \".pdfViewer\"))\n      (util\/copy-to-clipboard!\n       (pdf-utils\/fix-selection-text-breakline (.. js\/window getSelection toString))\n       nil))))\n\n(defn shortcut-copy-text\n  \"shortcut copy action:\n  * when in selection mode, copy selected blocks\n  * when in edit mode with text selected, copy selected text as normal\"\n  [_e]\n  (when-not (auto-complete?)\n    (cond\n      (state\/selection?)\n      (copy-selection-blocks false)\n\n      :else\n      (js\/document.execCommand \"copy\"))))\n\n(defn whiteboard?\n  []\n  (and (state\/whiteboard-route?)\n       (.closest (.-activeElement js\/document) \".logseq-tldraw\")))\n\n(defn shortcut-cut\n  \"shortcut cut action:\n  * when in selection mode, cut selected blocks\n  * when in edit mode with text selected, cut selected text\n  * otherwise nothing need to be handled.\"\n  [e]\n  (cond\n    (state\/selection?)\n    (shortcut-cut-selection e)\n\n    (and (state\/editing?) (util\/input-text-selected?\n                           (gdom\/getElement (state\/get-edit-input-id))))\n    (keydown-backspace-handler true e)\n\n    (whiteboard?)\n    (.cut (state\/active-tldraw-app))\n\n    :else\n    nil))\n\n(defn delete-selection\n  [e]\n  (cond\n    (state\/selection?)\n    (shortcut-delete-selection e)\n\n    (and (whiteboard?) (not (state\/editing?)))\n    (.deleteShapes (.-api ^js (state\/active-tldraw-app)))\n\n    :else\n    nil))\n\n(defn editor-delete\n  [_state e]\n  (when (state\/editing?)\n    (util\/stop e)\n    (keydown-delete-handler e)))\n\n(defn editor-backspace\n  [_state e]\n  (when (state\/editing?)\n    (keydown-backspace-handler false e)))\n\n(defn- slide-focused?\n  []\n  (some-> (first (dom\/by-class \"reveal\"))\n          (dom\/has-class? \"focused\")))\n\n(defn shortcut-up-down [direction]\n  (fn [e]\n    (when (and (not (auto-complete?))\n               (not (slide-focused?))\n               (not (state\/get-timestamp-block)))\n      (util\/stop e)\n      (cond\n        (state\/editing?)\n        (keydown-up-down-handler direction)\n\n        (state\/selection?)\n        (select-up-down direction)\n\n        ;; if there is an edit-input-id set, we are probably still on editing mode, that is not fully initialized\n        (not (state\/get-edit-input-id))\n        (select-first-last direction)))\n    nil))\n\n(defn shortcut-select-up-down [direction]\n  (fn [e]\n    (util\/stop e)\n    (if (state\/editing?)\n      (let [input (state\/get-input)\n            selected-start (util\/get-selection-start input)\n            selected-end (util\/get-selection-end input)\n            [anchor cursor] (case (util\/get-selection-direction input)\n                              \"backward\" [selected-end selected-start]\n                              [selected-start selected-end])\n            cursor-rect (cursor\/get-caret-pos input cursor)]\n        (if\n          ;; if the move is to cross block boundary, select the whole block\n         (or (and (= direction :up) (cursor\/textarea-cursor-rect-first-row? cursor-rect))\n             (and (= direction :down) (cursor\/textarea-cursor-rect-last-row? cursor-rect)))\n         (select-block-up-down direction)\n          ;; simulate text selection\n         (cursor\/select-up-down input direction anchor cursor-rect)))\n      (select-block-up-down direction))))\n\n(defn open-selected-block!\n  [direction e]\n  (let [selected-blocks (state\/get-selection-blocks)\n        f (case direction\n            :left first\n            :right last)]\n    (when-let [block-id (some-> selected-blocks\n                                f\n                                (dom\/attr \"blockid\")\n                                uuid)]\n      (util\/stop e)\n      (let [block    {:block\/uuid block-id}\n            block-id (-> selected-blocks\n                         f\n                         (gobj\/get \"id\")\n                         (string\/replace \"ls-block\" \"edit-block\"))\n            left?    (= direction :left)]\n        (edit-block! block\n                    (if left? 0 :max)\n                    block-id)))))\n\n(defn shortcut-left-right [direction]\n  (fn [e]\n    (when (and (not (auto-complete?))\n               (not (state\/get-timestamp-block)))\n      (cond\n        (state\/editing?)\n        (do\n          (util\/stop e)\n          (keydown-arrow-handler direction))\n\n        (state\/selection?)\n        (do\n          (util\/stop e)\n          (open-selected-block! direction e))\n\n        :else\n        nil))))\n\n(defn clear-block-content! []\n  (save-current-block! {:force? true})\n  (state\/set-edit-content! (state\/get-edit-input-id) \"\"))\n\n(defn kill-line-before! []\n  (save-current-block! {:force? true})\n  (util\/kill-line-before! (state\/get-input)))\n\n(defn kill-line-after! []\n  (save-current-block! {:force? true})\n  (util\/kill-line-after! (state\/get-input)))\n\n(defn beginning-of-block []\n  (cursor\/move-cursor-to (state\/get-input) 0))\n\n(defn end-of-block []\n  (cursor\/move-cursor-to-end (state\/get-input)))\n\n(defn cursor-forward-word []\n  (cursor\/move-cursor-forward-by-word (state\/get-input)))\n\n(defn cursor-backward-word []\n  (cursor\/move-cursor-backward-by-word (state\/get-input)))\n\n(defn backward-kill-word []\n  (let [input (state\/get-input)]\n    (save-current-block! {:force? true})\n    (util\/backward-kill-word input)\n    (state\/set-edit-content! (state\/get-edit-input-id) (.-value input))))\n\n(defn forward-kill-word []\n  (let [input (state\/get-input)]\n    (save-current-block! {:force? true})\n    (util\/forward-kill-word input)\n    (state\/set-edit-content! (state\/get-edit-input-id) (.-value input))))\n\n\n\n(defn block-with-title?\n  [format content semantic?]\n  (and (string\/includes? content \"\\n\")\n       (if semantic?\n         (let [ast (mldoc\/->edn content (gp-mldoc\/default-config format))\n               first-elem-type (first (ffirst ast))]\n           (mldoc\/block-with-title? first-elem-type))\n         true)))\n\n(defn- valid-dsl-query-block?\n  \"Whether block has a valid dsl query.\"\n  [block]\n  (->> (:block\/macros (db\/entity (:db\/id block)))\n       (some (fn [macro]\n               (when-let [query-body (and\n                                      (= \"query\" (get-in macro [:block\/properties :logseq.macro-name]))\n                                      (first (:logseq.macro-arguments (:block\/properties macro))))]\n                 (seq (:query\n                       (try\n                         (query-dsl\/parse-query query-body)\n                         (catch :default _e\n                           nil)))))))))\n\n(defn- valid-custom-query-block?\n  \"Whether block has a valid customl query.\"\n  [block]\n  (let [entity (db\/entity (:db\/id block))\n        content (:block\/content entity)]\n    (when (and (string\/includes? content \"#+BEGIN_QUERY\")\n               (string\/includes? content \"#+END_QUERY\"))\n      (let [ast (mldoc\/->edn (string\/trim content) (gp-mldoc\/default-config (or (:block\/format entity) :markdown)))\n            q (mldoc\/extract-first-query-from-ast ast)]\n        (some? (:query (gp-util\/safe-read-string q)))))))\n\n(defn collapsable?\n  ([block-id]\n   (collapsable? block-id {}))\n  ([block-id {:keys [semantic?]\n              :or {semantic? false}}]\n   (when block-id\n     (if-let [block (db-model\/query-block-by-uuid block-id)]\n       (or (db-model\/has-children? block-id)\n           (valid-dsl-query-block? block)\n           (valid-custom-query-block? block)\n           (and\n            (:outliner\/block-title-collapse-enabled? (state\/get-config))\n            (block-with-title? (:block\/format block)\n                               (:block\/content block)\n                               semantic?)))\n       false))))\n\n(defn all-blocks-with-level\n  \"Return all blocks associated with correct level\n   if :root-block is not nil, only return root block with its children\n   if :expanded? true, return expanded children\n   if :collapse? true, return without any collapsed children\n   if :incremental? true, collapse\/expand will be step by step\n   for example:\n   - a\n    - b (collapsed)\n     - c\n     - d\n    - e\n   return:\n    blocks\n    [{:block a :level 1}\n     {:block b :level 2}\n     {:block e :level 2}]\"\n  [{:keys [collapse? expanded? incremental? root-block page]\n    :or {collapse? false expanded? false incremental? true root-block nil}}]\n  (when-let [page (or page\n                      (state\/get-current-page)\n                      (date\/today))]\n    (let [block-id (or root-block (parse-uuid page))\n          blocks (if block-id\n                   (db\/get-block-and-children (state\/get-current-repo) block-id)\n                   (db\/get-page-blocks-no-cache page))\n          root-block (or block-id root-block)]\n      (if incremental?\n        (let [blocks (tree\/blocks->vec-tree blocks (or block-id page))]\n          (->>\n           (cond->> blocks\n             root-block\n             (map (fn find [root]\n                    (if (= root-block (:block\/uuid root))\n                      root\n                      (first (filter find (:block\/children root []))))))\n\n             collapse?\n             (w\/postwalk\n              (fn [b]\n                (if (and (map? b)\n                         (util\/collapsed? b)\n                         (not= root-block (:block\/uuid b)))\n                  (assoc b :block\/children []) b)))\n\n             true\n             (mapcat (fn [x] (tree-seq map? :block\/children x)))\n\n             expanded?\n             (filter (fn [b] (collapsable? (:block\/uuid b))))\n\n             true\n             (map (fn [x] (dissoc x :block\/children))))\n           (remove nil?)))\n\n        (cond->> blocks\n          collapse?\n          (filter util\/collapsed?)\n\n          expanded?\n          (filter (fn [b] (collapsable? (:block\/uuid b))))\n\n          true\n          (remove nil?))))))\n\n(defn- skip-collapsing-in-db?\n  []\n  (let [config (last (state\/get-editor-args))]\n    (:ref? config)))\n\n(defn- set-blocks-collapsed!\n  [block-ids value]\n  (let [block-ids (map (fn [block-id] (if (string? block-id) (uuid block-id) block-id)) block-ids)\n        repo (state\/get-current-repo)\n        value (boolean value)]\n    (when repo\n      (save-current-block!) ;; Save the input contents before collapsing\n      (outliner-tx\/transact! ;; Save the new collapsed state as an undo transaction (if it changed)\n        {:outliner-op :collapse-expand-blocks}\n        (doseq [block-id block-ids]\n          (when-let [block (db\/entity [:block\/uuid block-id])]\n            (let [current-value (boolean (:block\/collapsed? block))]\n              (when-not (= current-value value)\n                (let [block {:block\/uuid block-id\n                             :block\/collapsed? value}]\n                  (outliner-core\/save-block! block)))))))\n      (doseq [block-id block-ids]\n        (state\/set-collapsed-block! block-id value)))))\n\n(defn collapse-block! [block-id]\n  (when (collapsable? block-id)\n    (when-not (skip-collapsing-in-db?)\n      (set-blocks-collapsed! [block-id] true))))\n\n(defn expand-block! [block-id]\n  (when-not (skip-collapsing-in-db?)\n    (set-blocks-collapsed! [block-id] false)))\n\n(defn expand!\n  ([e] (expand! e false))\n  ([e clear-selection?]\n   (util\/stop e)\n   (cond\n     (state\/editing?)\n     (when-let [block-id (:block\/uuid (state\/get-edit-block))]\n       (expand-block! block-id))\n\n     (state\/selection?)\n     (do\n       (->> (get-selected-blocks)\n            (map (fn [dom]\n                   (-> (dom\/attr dom \"blockid\")\n                       uuid\n                       expand-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n\n     (whiteboard?)\n     (.setCollapsed (.-api ^js (state\/active-tldraw-app)) false)\n\n     :else\n     ;; expand one level\n     (let [blocks-with-level (all-blocks-with-level {})\n           max-level (or (apply max (map :block\/level blocks-with-level)) 99)]\n       (loop [level 1]\n         (if (> level max-level)\n           nil\n           (let [blocks-to-expand (->> blocks-with-level\n                                       (filter (fn [b] (= (:block\/level b) level)))\n                                       (filter util\/collapsed?))]\n             (if (empty? blocks-to-expand)\n               (recur (inc level))\n               (doseq [{:block\/keys [uuid]} blocks-to-expand]\n                 (expand-block! uuid))))))))))\n\n(defn collapse!\n  ([e] (collapse! e false))\n  ([e clear-selection?]\n   (when e (util\/stop e))\n   (cond\n     (state\/editing?)\n     (when-let [block-id (:block\/uuid (state\/get-edit-block))]\n       (collapse-block! block-id))\n\n     (state\/selection?)\n     (do\n       (->> (get-selected-blocks)\n            (map (fn [dom]\n                   (-> (dom\/attr dom \"blockid\")\n                       uuid\n                       collapse-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n\n     (whiteboard?)\n     (.setCollapsed (.-api ^js (state\/active-tldraw-app)) true)\n\n     :else\n     ;; collapse by one level from outside\n     (let [blocks-with-level\n           (all-blocks-with-level {:collapse? true})\n           max-level (or (apply max (map :block\/level blocks-with-level)) 99)]\n       (loop [level max-level]\n         (if (zero? level)\n           nil\n           (let [blocks-to-collapse\n                 (->> blocks-with-level\n                      (filter (fn [b] (= (:block\/level b) level)))\n                      (filter (fn [b] (collapsable? (:block\/uuid b)))))]\n             (if (empty? blocks-to-collapse)\n               (recur (dec level))\n               (doseq [{:block\/keys [uuid]} blocks-to-collapse]\n                 (collapse-block! uuid))))))))))\n\n(defn collapse-all!\n  ([]\n   (collapse-all! nil {}))\n  ([block-id {:keys [collapse-self?]\n              :or {collapse-self? true}}]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :expanded? true\n                                        :root-block block-id})\n         block-ids (cond->> (mapv :block\/uuid blocks)\n                     (not collapse-self?)\n                     (remove #{block-id}))]\n     (set-blocks-collapsed! block-ids true))))\n\n(defn expand-all!\n  ([]\n   (expand-all! nil))\n  ([block-id]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :collapse? true\n                                        :root-block block-id})\n         block-ids (map :block\/uuid blocks)]\n     (set-blocks-collapsed! block-ids false))))\n\n(defn collapse-all-selection!\n  []\n  (let [block-ids (->> (get-selected-toplevel-block-uuids)\n                       (map #(all-blocks-with-level {:incremental? false\n                                                     :expanded? true\n                                                     :root-block %}))\n                       flatten\n                       (map :block\/uuid)\n                       distinct)]\n    (set-blocks-collapsed! block-ids true)))\n\n(defn expand-all-selection!\n  []\n  (let [block-ids (->> (get-selected-toplevel-block-uuids)\n                       (map #(all-blocks-with-level {:incremental? false\n                                                     :collapse? true\n                                                     :root-block %}))\n                       flatten\n                       (map :block\/uuid)\n                       distinct)]\n    (set-blocks-collapsed! block-ids false)))\n\n(defn toggle-open! []\n  (let [all-expanded? (empty? (all-blocks-with-level {:incremental? false\n                                                      :collapse? true}))]\n    (if all-expanded?\n      (collapse-all!)\n      (expand-all!))))\n\n(defn toggle-open-block-children! [block-id]\n  (let [all-expanded? (empty? (all-blocks-with-level {:incremental? false\n                                                      :collapse? true\n                                                      :root-block block-id}))]\n    (if all-expanded?\n      (collapse-all! block-id {:collapse-self? false})\n      (expand-all! block-id))))\n\n(defn select-all-blocks!\n  [{:keys [page]}]\n  (if-let [current-input-id (state\/get-edit-input-id)]\n    (let [input (gdom\/getElement current-input-id)\n          blocks-container (util\/rec-get-blocks-container input)\n          blocks (dom\/by-class blocks-container \"ls-block\")]\n      (state\/exit-editing-and-set-selected-blocks! blocks))\n    (->> (all-blocks-with-level {:page page\n                                 :collapse? true})\n         (map (comp gdom\/getElementByClass str :block\/uuid))\n         state\/exit-editing-and-set-selected-blocks!))\n  (state\/set-state! :selection\/selected-all? true))\n\n(defn select-parent [e]\n  (let [edit-input (some-> (state\/get-edit-input-id) gdom\/getElement)\n        edit-block (state\/get-edit-block)\n        target-element (.-nodeName (.-target e))]\n    (cond\n      ;; editing block fully selected\n      (and edit-block edit-input\n           (= (util\/get-selected-text) (.-value edit-input)))\n      (do\n        (util\/stop e)\n        (state\/exit-editing-and-set-selected-blocks!\n         [(gdom\/getElementByClass (str (:block\/uuid edit-block)))]))\n\n      edit-block\n      nil\n\n      ;; Focusing other input element, e.g. when editing page title.\n      (contains? #{\"INPUT\" \"TEXTAREA\"} target-element)\n      nil\n\n      (whiteboard?)\n      (do\n        (util\/stop e)\n        (.selectAll (.-api ^js (state\/active-tldraw-app))))\n\n      :else\n      (do\n        (util\/stop e)\n        (when-not (:selection\/selected-all? @state\/state)\n          (if-let [block-id (some-> (first (state\/get-selection-blocks))\n                                    (dom\/attr \"blockid\")\n                                    uuid)]\n            (when-let [block (db\/entity [:block\/uuid block-id])]\n              (let [parent (:block\/parent block)]\n                (cond\n                  (= (state\/get-current-page) (str (:block\/uuid block)))\n                  nil\n\n                  (and parent (:block\/parent parent))\n                  (state\/exit-editing-and-set-selected-blocks! [(gdom\/getElementByClass (:block\/uuid parent))])\n\n                  (:block\/name parent)\n                  ;; page block\n                  (select-all-blocks! {:page (:block\/name parent)}))))\n            (select-all-blocks! {})))))))\n\n(defn escape-editing\n  ([]\n   (escape-editing true))\n  ([select?]\n   (when (state\/editing?)\n     (if select?\n       (->> (:block\/uuid (state\/get-edit-block))\n            select-block!)\n       (state\/clear-edit!)))))\n\n(defn replace-block-reference-with-content-at-point\n  []\n  (when-let [{:keys [start end link]} (thingatpt\/block-ref-at-point)]\n    (when-let [block (db\/pull [:block\/uuid link])]\n      (let [block-content (:block\/content block)\n            format (or (:block\/format block) :markdown)\n            block-content-without-prop (-> (property\/remove-properties format block-content)\n                                           (drawer\/remove-logbook))]\n        (when-let [input (state\/get-input)]\n          (when-let [current-block-content (gobj\/get input \"value\")]\n            (let [block-content* (str (subs current-block-content 0 start)\n                                      block-content-without-prop\n                                      (subs current-block-content end))]\n              (state\/set-block-content-and-last-pos! input block-content* 1))))))))\n\n(defn copy-current-ref\n  [block-id]\n  (when block-id\n    (util\/copy-to-clipboard! (block-ref\/->block-ref block-id))))\n\n(defn delete-current-ref!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (re-pattern (str \"\\\\s?\"\n                                 (string\/replace (block-ref\/->block-ref ref-id) #\"([\\(\\)])\" \"\\\\$1\")))\n          content (string\/replace-first (:block\/content block) match \"\")]\n      (save-block! (state\/get-current-repo)\n                   (:block\/uuid block)\n                   content))))\n\n(defn replace-ref-with-text!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (block-ref\/->block-ref ref-id)\n          ref-block (db\/entity [:block\/uuid ref-id])\n          block-ref-content (->> (or (:block\/content ref-block)\n                                     \"\")\n                                 (property\/remove-built-in-properties (:block\/format ref-block))\n                                 (drawer\/remove-logbook))\n          content (string\/replace-first (:block\/content block) match\n                                        block-ref-content)]\n      (save-block! (state\/get-current-repo)\n                   (:block\/uuid block)\n                   content))))\n\n(defn replace-ref-with-embed!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (block-ref\/->block-ref ref-id)\n          content (string\/replace-first (:block\/content block) match\n                                        (util\/format \"{{embed ((%s))}}\"\n                                                     (str ref-id)))]\n      (save-block! (state\/get-current-repo)\n                   (:block\/uuid block)\n                   content))))\n\n(defn block-default-collapsed?\n  \"Whether a block should be collapsed by default.\n  Currently, this handles several cases:\n  1. References.\n  2. Custom queries.\"\n  [block config]\n  (or\n   (and\n    (or (:ref? config) (:custom-query? config))\n    (>= (:block\/level block) (state\/get-ref-open-blocks-level))\n    ;; has children\n    (first (:block\/_parent (db\/entity (:db\/id block)))))\n   (util\/collapsed? block)))\n\n(defn- set-heading-aux!\n  [block-id heading]\n  (let [block (db\/pull [:block\/uuid block-id])\n        format (:block\/format block)\n        old-heading (get-in block [:block\/properties :heading])]\n    (if (= format :markdown)\n      (cond\n        ;; nothing changed\n        (or (and (nil? old-heading) (nil? heading))\n            (and (true? old-heading) (true? heading))\n            (= old-heading heading))\n        nil\n\n        (or (and (nil? old-heading) (true? heading))\n            (and (true? old-heading) (nil? heading)))\n        (set-block-property-aux! block :heading heading)\n\n        (and (or (nil? heading) (true? heading))\n             (number? old-heading))\n        (let [block' (set-block-property-aux! block :heading heading)\n              content (commands\/clear-markdown-heading (:block\/content block'))]\n          (merge block' {:block\/content content}))\n\n        (and (or (nil? old-heading) (true? old-heading))\n             (number? heading))\n        (let [block' (set-block-property-aux! block :heading nil)\n              properties (assoc (:block\/properties block) :heading heading)\n              content (commands\/set-markdown-heading (:block\/content block') heading)]\n          (merge block' {:block\/content content :block\/properties properties}))\n\n        ;; heading-num1 -> heading-num2\n        :else\n        (let [properties (assoc (:block\/properties block) :heading heading)\n              content (-> block\n                          :block\/content\n                          commands\/clear-markdown-heading\n                          (commands\/set-markdown-heading heading))]\n          {:block\/uuid (:block\/uuid block)\n           :block\/properties properties\n           :block\/content content}))\n      (set-block-property-aux! block :heading heading))))\n\n(defn set-heading!\n  [block-id heading]\n  (when-let [block (set-heading-aux! block-id heading)]\n    (outliner-tx\/transact!\n     {:outliner-op :save-block}\n     (outliner-core\/save-block! block))))\n\n(defn remove-heading!\n  [block-id]\n  (set-heading! block-id nil))\n\n(defn batch-set-heading!\n  [block-ids heading]\n  (outliner-tx\/transact!\n   {:outliner-op :save-block}\n   (doseq [block-id block-ids]\n     (when-let [block (set-heading-aux! block-id heading)]\n       (outliner-core\/save-block! block)))))\n\n(defn batch-remove-heading!\n  [block-ids]\n  (batch-set-heading! block-ids nil))\n\n(defn block->data-transfer!\n  \"Set block or page name to the given event's dataTransfer. Used in dnd.\"\n  [block-or-page-name event]\n  (.setData (gobj\/get event \"dataTransfer\")\n            (if (db-model\/page? block-or-page-name) \"page-name\" \"block-uuid\")\n            (str block-or-page-name)))\n","(ns frontend.state\n  \"Provides main application state, fns associated to set and state based rum\n  cursors\"\n  (:require [cljs-bean.core :as bean]\n            [cljs.core.async :as async :refer [<! >!]]\n            [cljs.spec.alpha :as s]\n            [clojure.string :as string]\n            [dommy.core :as dom]\n            [electron.ipc :as ipc]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.storage :as storage]\n            [frontend.spec.storage :as storage-spec]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [logseq.graph-parser.config :as gp-config]\n            [medley.core :as medley]\n            [promesa.core :as p]\n            [rum.core :as rum]))\n\n;; Stores main application state\n(defonce ^:large-vars\/data-var state\n  (let [document-mode? (or (storage\/get :document\/mode?) false)\n        current-graph  (let [graph (storage\/get :git\/current-repo)]\n                        (when graph (ipc\/ipc \"setCurrentGraph\" graph))\n                        graph)]\n   (atom\n    {:route-match                           nil\n     :today                                 nil\n     :system\/events                         (async\/chan 1000)\n     :db\/batch-txs                          (async\/chan 1000)\n     :file\/writes                           (async\/chan 10000)\n     :file\/unlinked-dirs                    #{}\n     :reactive\/custom-queries               (async\/chan 1000)\n     :notification\/show?                    false\n     :notification\/content                  nil\n     :repo\/loading-files?                   {}\n     :nfs\/user-granted?                     {}\n     :nfs\/refreshing?                       nil\n     :instrument\/disabled?                  (storage\/get \"instrument-disabled\")\n     ;; TODO: how to detect the network reliably?\n     :network\/online?         true\n     :indexeddb\/support?      true\n     :me                      nil\n     :git\/current-repo        current-graph\n     :draw?                   false\n     :db\/restoring?           nil\n\n     :journals-length                       3\n\n     :search\/q                              \"\"\n     :search\/mode                           :global  ;; inner page or full graph? {:page :global}\n     :search\/result                         nil\n     :search\/graph-filters                  []\n     :search\/engines                        {}\n\n     ;; modals\n     :modal\/dropdowns                       {}\n     :modal\/id                              nil\n     :modal\/label                           \"\"\n     :modal\/show?                           false\n     :modal\/panel-content                   nil\n     :modal\/payload                         nil\n     :modal\/fullscreen?                     false\n     :modal\/close-btn?                      nil\n     :modal\/close-backdrop?                 true\n     :modal\/subsets                         []\n\n     ;; ui\n     :ui\/viewport                           {}\n\n     ;; left sidebar\n     :ui\/navigation-item-collapsed?         {}\n\n     ;; right sidebar\n     :ui\/handbooks-open?                    false\n     :ui\/help-open?                         false\n     :ui\/fullscreen?                        false\n     :ui\/settings-open?                     false\n     :ui\/sidebar-open?                      false\n     :ui\/sidebar-width                      \"40%\"\n     :ui\/left-sidebar-open?                 (boolean (storage\/get \"ls-left-sidebar-open?\"))\n     :ui\/theme                              (or (storage\/get :ui\/theme) \"light\")\n     :ui\/system-theme?                      ((fnil identity (or util\/mac? util\/win32? false)) (storage\/get :ui\/system-theme?))\n     :ui\/custom-theme                       (or (storage\/get :ui\/custom-theme) {:light {:mode \"light\"} :dark {:mode \"dark\"}})\n     :ui\/wide-mode?                         (storage\/get :ui\/wide-mode)\n\n     ;; ui\/collapsed-blocks is to separate the collapse\/expand state from db for:\n     ;; 1. right sidebar\n     ;; 2. zoom-in view\n     ;; 3. queries\n     ;; 4. references\n     ;; graph => {:block-id bool}\n     :ui\/collapsed-blocks                   {}\n     :ui\/sidebar-collapsed-blocks           {}\n     :ui\/root-component                     nil\n     :ui\/file-component                     nil\n     :ui\/developer-mode?                    (or (= (storage\/get \"developer-mode\") \"true\")\n                                                false)\n     ;; remember scroll positions of visited paths\n     :ui\/paths-scroll-positions             {}\n     :ui\/shortcut-tooltip?                  (if (false? (storage\/get :ui\/shortcut-tooltip?))\n                                              false\n                                              true)\n     :ui\/scrolling?                         false\n     :document\/mode?                        document-mode?\n\n     :config                                {}\n     :block\/component-editing-mode?         false\n     :editor\/op                             nil\n     :editor\/latest-op                      nil\n     :editor\/hidden-editors                 #{}             ;; page names\n     :editor\/draw-mode?                     false\n     :editor\/action                         nil\n     :editor\/action-data                    nil\n     ;; With label or other data\n     :editor\/last-saved-cursor              nil\n     :editor\/editing?                       nil\n     :editor\/in-composition?                false\n     :editor\/content                        {}\n     :editor\/block                          nil\n     :editor\/block-dom-id                   nil\n     :editor\/set-timestamp-block            nil             ;; click rendered block timestamp-cp to set timestamp\n     :editor\/last-input-time                nil\n     :editor\/document-mode?                 document-mode?\n     :editor\/args                           nil\n     :editor\/on-paste?                      false\n     :editor\/last-key-code                  nil\n     :editor\/block-op-type                  nil             ;; :cut, :copy\n\n     ;; Stores deleted refed blocks, indexed by repo\n     :editor\/last-replace-ref-content-tx    nil\n\n     ;; for audio record\n     :editor\/record-status                  \"NONE\"\n\n     ;; Whether to skip saving the current block\n     :editor\/skip-saving-current-block?     false\n\n     :editor\/code-block-context             {}\n\n     :db\/properties-changed-pages           {}\n     :db\/last-transact-time                 {}\n     ;; whether database is persisted\n     :db\/persisted?                         {}\n\n     :cursor-range                          nil\n\n     :selection\/mode                        false\n     ;; Warning: blocks order is determined when setting this attribute\n     :selection\/blocks                      []\n     :selection\/start-block                 nil\n     ;; either :up or :down, defaults to down\n     ;; used to determine selection direction when two or more blocks are selected\n     :selection\/direction                   :down\n     :selection\/selected-all?               false\n     :custom-context-menu\/show?             false\n     :custom-context-menu\/links             nil\n     :custom-context-menu\/position          nil\n\n     ;; pages or blocks in the right sidebar\n     ;; It is a list of `[repo db-id block-type block-data]` 4-tuple\n     :sidebar\/blocks                        '()\n\n     :preferred-language                    (storage\/get :preferred-language)\n\n     ;; electron\n     :electron\/auto-updater-downloaded      false\n     :electron\/updater-pending?             false\n     :electron\/updater                      {}\n     :electron\/user-cfgs                    nil\n     :electron\/server                       nil\n     :electron\/window-maximized?            false\n     :electron\/window-fullscreen?           false\n\n     ;; assets\n     :assets\/alias-enabled?                 (or (storage\/get :assets\/alias-enabled?) false)\n     :assets\/alias-dirs                     (or (storage\/get :assets\/alias-dirs) [])\n\n     ;; mobile\n     :mobile\/container-urls                 nil\n     :mobile\/show-action-bar?               false\n     :mobile\/actioned-block                 nil\n     :mobile\/show-toolbar?                  false\n     :mobile\/show-recording-bar?            false\n     :mobile\/show-tabbar?                   false\n     ;;; Used to monitor mobile app status,\n     ;;; value spec:\n     ;;; {:is-active? bool, :timestamp int}\n     :mobile\/app-state-change                 (atom nil)\n\n     ;; plugin\n     :plugin\/enabled                        (and (util\/electron?)\n                                                 ;; true false :theme-only\n                                                 ((fnil identity true) (storage\/get ::storage-spec\/lsp-core-enabled)))\n     :plugin\/preferences                    nil\n     :plugin\/indicator-text                 nil\n     :plugin\/installed-plugins              {}\n     :plugin\/installed-themes               []\n     :plugin\/installed-slash-commands       {}\n     :plugin\/installed-ui-items             {}\n     :plugin\/installed-resources            {}\n     :plugin\/installed-hooks                {}\n     :plugin\/installed-services             {}\n     :plugin\/simple-commands                {}\n     :plugin\/selected-theme                 nil\n     :plugin\/selected-unpacked-pkg          nil\n     :plugin\/marketplace-pkgs               nil\n     :plugin\/marketplace-stats              nil\n     :plugin\/installing                     nil\n     :plugin\/active-readme                  nil\n     :plugin\/updates-auto-checking?         false\n     :plugin\/updates-pending                {}\n     :plugin\/updates-coming                 {}\n     :plugin\/updates-downloading?           false\n     :plugin\/updates-unchecked              #{}\n     :plugin\/navs-settings?                 true\n     :plugin\/focused-settings               nil ;; plugin id\n\n     ;; pdf\n     :pdf\/system-win?                       false\n     :pdf\/current                           nil\n     :pdf\/ref-highlight                     nil\n     :pdf\/block-highlight-colored?          (or (storage\/get \"ls-pdf-hl-block-is-colored\") true)\n     :pdf\/auto-open-ctx-menu?               (not= false (storage\/get \"ls-pdf-auto-open-ctx-menu\"))\n\n     ;; all notification contents as k-v pairs\n     :notification\/contents                 {}\n     :graph\/syncing?                        false\n     ;; graph -> state\n     :graph\/parsing-state                   {}\n\n     :copy\/export-block-text-indent-style   (or (storage\/get :copy\/export-block-text-indent-style)\n                                                \"dashes\")\n     :copy\/export-block-text-remove-options (or (storage\/get :copy\/export-block-text-remove-options)\n                                                #{})\n     :copy\/export-block-text-other-options  (or (storage\/get :copy\/export-block-text-other-options)\n                                                {})\n     :date-picker\/date                      nil\n\n     :youtube\/players                       {}\n\n     ;; command palette\n     :command-palette\/commands              []\n\n     :view\/components                       {}\n\n     :favorites\/dragging                    nil\n\n     :srs\/mode?                             false\n\n     :srs\/cards-due-count                   nil\n\n     :reactive\/query-dbs                    {}\n\n     ;; login, userinfo, token, ...\n     :auth\/refresh-token                    (storage\/get \"refresh-token\")\n     :auth\/access-token                     nil\n     :auth\/id-token                         nil\n\n     ;; file-sync\n     :file-sync\/jstour-inst                   nil\n     :file-sync\/onboarding-state            (or (storage\/get :file-sync\/onboarding-state)\n                                                {:welcome false})\n     :file-sync\/remote-graphs               {:loading false :graphs nil}\n     :file-sync\/set-remote-graph-password-result {}\n\n     ;; graph-uuid -> {:graphs-txid {}\n     ;;                :file-sync\/sync-manager {}\n     ;;                :file-sync\/sync-state {}\n     ;;                ;; {file-path -> payload}\n     ;;                :file-sync\/progress {}\n     ;;                :file-sync\/start-time {}\n     ;;                :file-sync\/last-synced-at {}}\n     :file-sync\/graph-state                 {:current-graph-uuid nil}\n                                             ;; graph-uuid -> ...\n\n     :user\/info                             {:UserGroups (storage\/get :user-groups)}\n     :encryption\/graph-parsing?             false\n\n     :ui\/loading?                           {}\n     :feature\/enable-sync?                  (storage\/get :logseq-sync-enabled)\n     :feature\/enable-sync-diff-merge?       ((fnil identity true) (storage\/get :logseq-sync-diff-merge-enabled))\n\n     :file\/rename-event-chan                (async\/chan 100)\n     :ui\/find-in-page                       nil\n     :graph\/importing                       nil\n     :graph\/importing-state                 {}\n\n     :handbook\/route-chan                   (async\/chan (async\/sliding-buffer 1))\n\n     :whiteboard\/onboarding-whiteboard?     (or (storage\/get :ls-onboarding-whiteboard?) false)\n     :whiteboard\/onboarding-tour?           (or (storage\/get :whiteboard-onboarding-tour?) false)\n     :whiteboard\/last-persisted-at          {}\n     :whiteboard\/pending-tx-data            {}\n     :history\/page-only-mode?               false\n     ;; db tx-id -> editor cursor\n     :history\/tx->editor-cursor             {}})))\n\n;; Block ast state\n;; ===============\n\n;; block uuid -> {content(String) -> ast}\n(def blocks-ast-cache (atom {}))\n(defn add-block-ast-cache!\n  [block-uuid content ast]\n  (when (and block-uuid content ast)\n    (let [new-value (assoc-in @blocks-ast-cache [block-uuid content] ast)\n          new-value (if (> (count new-value) 10000)\n                      (into {} (take 5000 new-value))\n                      new-value)]\n      (reset! blocks-ast-cache new-value))))\n\n(defn get-block-ast\n  [block-uuid content]\n  (when (and block-uuid content)\n    (get-in @blocks-ast-cache [block-uuid content])))\n\n;; User configuration getters under :config (and sometimes :me)\n;; ========================================\n;; TODO: Refactor default config values to be data driven. Currently they are all\n;;  buried in getters\n;; TODO: Refactor our access to be more data driven. Currently each getter\n;;  (re-)fetches get-current-repo needlessly\n;; TODO: Add consistent validation. Only a few config options validate at get time\n\n(def default-config\n  \"Default config for a repo-specific, user config\"\n  {:feature\/enable-search-remove-accents? true\n   :default-arweave-gateway \"https:\/\/arweave.net\"\n   :ui\/auto-expand-block-refs? true\n\n   ;; For flushing the settings of old versions. Don't bump this value.\n   ;; There are only two kinds of graph, one is not upgraded (:legacy) and one is upgraded (:triple-lowbar)\n   ;; For not upgraded graphs, the config will have no key `:file\/name-format`\n   ;; Then the default value is applied\n   :file\/name-format :legacy})\n\n;; State that most user config is dependent on\n(declare get-current-repo sub set-state!)\n\n(defn merge-configs\n  \"Merges user configs in given orders. All values are overridden except for maps\n  which are merged.\"\n  [& configs]\n  (->> configs\n       (filter map?)\n       (apply merge-with\n         (fn merge-config [current new]\n           (if (and (map? current) (map? new))\n             (merge current new)\n             new)))))\n\n(defn get-global-config\n  []\n  (get-in @state [:config ::global-config]))\n\n(defn get-global-config-str-content\n  []\n  (get-in @state [:config ::global-config-str-content]))\n\n(defn get-graph-config\n  ([] (get-graph-config (get-current-repo)))\n  ([repo-url] (get-in @state [:config repo-url])))\n\n(defn get-config\n  \"User config for the given repo or current repo if none given. All config fetching\nshould be done through this fn in order to get global config and config defaults\"\n  ([]\n   (get-config (get-current-repo)))\n  ([repo-url]\n   (merge-configs\n    default-config\n    (get-global-config)\n    (get-graph-config repo-url))))\n\n(defonce publishing? (atom nil))\n\n(defn publishing-enable-editing?\n  []\n  (and @publishing? (:publishing\/enable-editing? (get-config))))\n\n(defn enable-editing?\n  []\n  (or (not @publishing?) (:publishing\/enable-editing? (get-config))))\n\n(defn get-arweave-gateway\n  []\n  (:arweave\/gateway (get-config)))\n\n(defonce built-in-macros\n         {\"img\" \"[:img.$4 {:src \\\"$1\\\" :style {:width $2 :height $3}}]\"})\n\n(defn get-macros\n  []\n  (merge\n    built-in-macros\n    (:macros (get-config))))\n\n(defn set-assets-alias-enabled!\n  [v]\n  (set-state! :assets\/alias-enabled? (boolean v))\n  (storage\/set :assets\/alias-enabled? (boolean v)))\n\n(defn set-assets-alias-dirs!\n  [dirs]\n  (when dirs\n    (set-state! :assets\/alias-dirs dirs)\n    (storage\/set :assets\/alias-dirs dirs)))\n\n(defn get-custom-css-link\n  []\n  (:custom-css-url (get-config)))\n\n(defn get-custom-js-link\n  []\n  (:custom-js-url (get-config)))\n\n(defn get-default-journal-template\n  []\n  (when-let [template (get-in (get-config) [:default-templates :journals])]\n    (when-not (string\/blank? template)\n      (string\/trim template))))\n\n(defn all-pages-public?\n  []\n  (let [value (:publishing\/all-pages-public? (get-config))\n        value (if (some? value) value (:all-pages-public? (get-config)))]\n    (true? value)))\n\n(defn get-default-home\n  []\n  (:default-home (get-config)))\n\n(defn custom-home-page?\n  []\n  (some? (:page (get-default-home))))\n\n(defn get-preferred-format\n  ([]\n   (get-preferred-format (get-current-repo)))\n  ([repo-url]\n   (keyword\n     (or\n       (when-let [fmt (:preferred-format (get-config repo-url))]\n         (string\/lower-case (name fmt)))\n\n       (get-in @state [:me :preferred_format] \"markdown\")))))\n\n(defn markdown?\n  []\n  (= (keyword (get-preferred-format))\n     :markdown))\n\n(defn get-pages-directory\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (:pages-directory (get-config repo)))\n    \"pages\"))\n\n(defn get-journals-directory\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (:journals-directory (get-config repo)))\n    \"journals\"))\n\n(defn get-whiteboards-directory\n  []\n  (or\n   (when-let [repo (get-current-repo)]\n     (:whiteboards-directory (get-config repo)))\n   \"whiteboards\"))\n\n(defn org-mode-file-link?\n  [repo]\n  (:org-mode\/insert-file-link? (get-config repo)))\n\n(defn get-journal-file-name-format\n  []\n  (when-let [repo (get-current-repo)]\n    (:journal\/file-name-format (get-config repo))))\n\n(defn get-preferred-workflow\n  []\n  (keyword\n    (or\n      (when-let [workflow (:preferred-workflow (get-config))]\n        (let [workflow (name workflow)]\n          (if (util\/safe-re-find #\"now|NOW\" workflow)\n            :now\n            :todo)))\n      (get-in @state [:me :preferred_workflow] :now))))\n\n(defn get-preferred-todo\n  []\n  (if (= (get-preferred-workflow) :now)\n    \"LATER\"\n    \"TODO\"))\n\n(defn get-filename-format\n  ([] (get-filename-format (get-current-repo)))\n  ([repo]\n   (:file\/name-format (get-config repo))))\n\n(defn get-date-formatter\n  []\n  (gp-config\/get-date-formatter (get-config)))\n\n(defn shortcuts []\n  (:shortcuts (get-config)))\n\n(defn get-commands\n  []\n  (:commands (get-config)))\n\n(defn get-scheduled-future-days\n  []\n  (let [days (:scheduled\/future-days (get-config))]\n    (or (when (int? days) days) 7)))\n\n(defn get-start-of-week\n  []\n  (or (:start-of-week (get-config))\n      (get-in @state [:me :settings :start-of-week])\n      6))\n\n(defn get-ref-open-blocks-level\n  []\n  (or\n    (when-let [value (:ref\/default-open-blocks-level (get-config))]\n      (when (integer? value)\n        value))\n    2))\n\n(defn get-linked-references-collapsed-threshold\n  []\n  (or\n    (when-let [value (:ref\/linked-references-collapsed-threshold (get-config))]\n      (when (integer? value)\n        value))\n    100))\n\n(defn get-export-bullet-indentation\n  []\n  (case (get (get-config) :export\/bullet-indentation :tab)\n    :eight-spaces\n    \"        \"\n    :four-spaces\n    \"    \"\n    :two-spaces\n    \"  \"\n    :tab\n    \"\\t\"))\n\n(defn enable-search-remove-accents?\n  []\n  (:feature\/enable-search-remove-accents? (get-config)))\n\n;; State cursor fns for use with rum components\n;; ============================================\n\n(declare document-mode?)\n\n(defn sub\n  \"Creates a rum cursor, https:\/\/github.com\/tonsky\/rum#cursors, for use in rum components.\nSimilar to re-frame subscriptions\"\n  [ks]\n  (if (coll? ks)\n    (util\/react (rum\/cursor-in state ks))\n    (util\/react (rum\/cursor state ks))))\n\n(defn sub-config\n  \"Sub equivalent to get-config which should handle all sub user-config access\"\n  ([] (sub-config (get-current-repo)))\n  ([repo]\n   (let [config (sub :config)]\n     (merge-configs default-config\n                    (get config ::global-config)\n                    (get config repo)))))\n\n(defn enable-grammarly?\n  []\n  (true? (:feature\/enable-grammarly? (sub-config))))\n\n(defn scheduled-deadlines-disabled?\n  []\n  (true? (:feature\/disable-scheduled-and-deadline-query? (sub-config))))\n\n(defn enable-timetracking?\n  []\n  (not (false? (:feature\/enable-timetracking? (sub-config)))))\n\n(defn enable-fold-button-right?\n  []\n  (let [_ (sub :ui\/viewport)]\n    (and (util\/mobile?)\n         (util\/sm-breakpoint?))))\n\n(defn enable-journals?\n  ([]\n   (enable-journals? (get-current-repo)))\n  ([repo]\n   (not (false? (:feature\/enable-journals? (sub-config repo))))))\n\n(defn enable-flashcards?\n  ([]\n   (enable-flashcards? (get-current-repo)))\n  ([repo]\n   (not (false? (:feature\/enable-flashcards? (sub-config repo))))))\n\n(defn enable-sync?\n  []\n  (sub :feature\/enable-sync?))\n\n(defn enable-sync-diff-merge?\n  []\n  (sub :feature\/enable-sync-diff-merge?))\n\n(defn enable-whiteboards?\n  ([]\n   (enable-whiteboards? (get-current-repo)))\n  ([repo]\n   (not (false? (:feature\/enable-whiteboards? (sub-config repo))))))\n\n(defn enable-git-auto-push?\n  [repo]\n  (not (false? (:git-auto-push (sub-config repo)))))\n\n(defn enable-block-timestamps?\n  []\n  (true? (:feature\/enable-block-timestamps? (sub-config))))\n\n(defn graph-settings\n  []\n  (:graph\/settings (sub-config)))\n\n;; Enable by default\n(defn show-brackets?\n  []\n  (not (false? (:ui\/show-brackets? (sub-config)))))\n\n(defn sub-default-home-page\n  []\n  (get-in (sub-config) [:default-home :page] \"\"))\n\n(defn sub-edit-content\n  [id]\n  (sub [:editor\/content id]))\n\n(defn- get-selected-block-ids\n  [blocks]\n  (->> blocks\n       (remove nil?)\n       (keep #(when-let [id (dom\/attr % \"blockid\")]\n                (uuid id)))\n       (distinct)))\n\n(defn sub-block-selected?\n  [container-id block-uuid]\n  (rum\/react\n   (rum\/derived-atom [state] [::select-block container-id block-uuid]\n     (fn [state]\n       (contains? (set (get-selected-block-ids (:selection\/blocks state)))\n                  block-uuid)))))\n\n(defn block-content-max-length\n  [repo]\n  (or (:block\/content-max-length (sub-config repo)) 10000))\n\n(defn mobile?\n  []\n  (or (util\/mobile?) (mobile-util\/native-platform?)))\n\n(defn enable-tooltip?\n  []\n  (if (mobile?)\n    false\n    (get (sub-config) :ui\/enable-tooltip? true)))\n\n(defn show-command-doc?\n  []\n  (get (sub-config) :ui\/show-command-doc? true))\n\n(defn logical-outdenting?\n  []\n  (:editor\/logical-outdenting? (sub-config)))\n\n(defn show-full-blocks?\n  []\n  (:ui\/show-full-blocks? (sub-config)))\n\n(defn preferred-pasting-file?\n  []\n  (:editor\/preferred-pasting-file? (sub-config)))\n\n(defn auto-expand-block-refs?\n  []\n  (:ui\/auto-expand-block-refs? (sub-config)))\n\n(defn doc-mode-enter-for-new-line?\n  []\n  (and (document-mode?)\n       (not (:shortcut\/doc-mode-enter-for-new-block? (get-config)))))\n\n(defn user-groups\n  []\n  (set (sub [:user\/info :UserGroups])))\n\n;; State mutation helpers\n;; ======================\n\n(defn set-state!\n  [path value]\n  (if (vector? path)\n    (swap! state assoc-in path value)\n    (swap! state assoc path value))\n  nil)\n\n(defn update-state!\n  [path f]\n  (if (vector? path)\n    (swap! state update-in path f)\n    (swap! state update path f))\n  nil)\n\n;; State getters and setters\n;; =========================\n;; These fns handle any key except :config.\n;; Some state is also stored in local storage and\/or sent to electron's main process\n\n(defn get-route-match\n  []\n  (:route-match @state))\n\n(defn get-current-route\n  []\n  (get-in (get-route-match) [:data :name]))\n\n(defn home?\n  []\n  (= :home (get-current-route)))\n\n(defn whiteboard-dashboard?\n  []\n  (= :whiteboards (get-current-route)))\n\n(defn setups-picker?\n  []\n  (= :repo-add (get-current-route)))\n\n(defn get-current-page\n  []\n  (when (= :page (get-current-route))\n    (get-in (get-route-match)\n            [:path-params :name])))\n\n(defn whiteboard-route?\n  []\n  (= :whiteboard (get-current-route)))\n\n(defn get-current-whiteboard\n  []\n  (when (whiteboard-route?)\n    (get-in (get-route-match)\n            [:path-params :name])))\n\n(defn route-has-p?\n  []\n  (get-in (get-route-match) [:query-params :p]))\n\n(defn get-current-repo\n  \"Returns the current repo URL, or else open demo graph\"\n  []\n  (or (:git\/current-repo @state)\n      \"local\"))\n\n(defn get-remote-graphs\n  []\n  (get-in @state [:file-sync\/remote-graphs :graphs]))\n\n(defn get-remote-graph-info-by-uuid\n  [uuid]\n  (when-let [graphs (seq (get-in @state [:file-sync\/remote-graphs :graphs]))]\n    (some #(when (= (:GraphUUID %) (str uuid)) %) graphs)))\n\n(defn get-remote-graph-usage\n  []\n  (when-let [graphs (seq (get-in @state [:file-sync\/remote-graphs :graphs]))]\n    (->> graphs\n         (map #(hash-map :uuid (:GraphUUID %)\n                         :name (:GraphName %)\n                         :used-gbs (\/ (:GraphStorageUsage %) 1024 1024 1024)\n                         :limit-gbs (\/ (:GraphStorageLimit %) 1024 1024 1024)\n                         :used-percent (\/ (:GraphStorageUsage %) (:GraphStorageLimit %) 0.01)))\n         (map #(assoc % :free-gbs (- (:limit-gbs %) (:used-gbs %))))\n         (vec))))\n\n(defn delete-remote-graph!\n  [repo]\n  (swap! state update-in [:file-sync\/remote-graphs :graphs]\n         (fn [repos]\n           (remove #(and\n                     (:GraphUUID repo)\n                     (:GraphUUID %)\n                     (= (:GraphUUID repo) (:GraphUUID %))) repos))))\n\n(defn add-remote-graph!\n  [repo]\n  (swap! state update-in [:file-sync\/remote-graphs :graphs]\n         (fn [repos]\n           (->> (conj repos repo)\n                (distinct)))))\n\n(defn get-repos\n  []\n  (get-in @state [:me :repos]))\n\n(defn set-repos!\n  [repos]\n  (set-state! [:me :repos] repos))\n\n(defn add-repo!\n  [repo]\n  (when (not (string\/blank? repo))\n    (update-state! [:me :repos]\n                   (fn [repos]\n                     (->> (conj repos repo)\n                          (distinct))))))\n\n(defn set-current-repo!\n  [repo]\n  (swap! state assoc :git\/current-repo repo)\n  (if repo\n    (storage\/set :git\/current-repo repo)\n    (storage\/remove :git\/current-repo))\n  (ipc\/ipc \"setCurrentGraph\" repo))\n\n(defn set-preferred-format!\n  [format]\n  (swap! state assoc-in [:me :preferred_format] (name format)))\n\n(defn set-preferred-workflow!\n  [workflow]\n  (swap! state assoc-in [:me :preferred_workflow] (name workflow)))\n\n(defn set-preferred-language!\n  [language]\n  (set-state! :preferred-language (name language))\n  (storage\/set :preferred-language (name language)))\n\n(defn delete-repo!\n  [repo]\n  (swap! state update-in [:me :repos]\n         (fn [repos]\n           (->> (remove #(or (= (:url repo) (:url %))\n                             (and\n                              (:GraphUUID repo)\n                              (:GraphUUID %)\n                              (= (:GraphUUID repo) (:GraphUUID %)))) repos)\n                (util\/distinct-by :url)))))\n\n(defn set-timestamp-block!\n  [value]\n  (set-state! :editor\/set-timestamp-block value))\n\n(defn get-timestamp-block\n  []\n  (:editor\/set-timestamp-block @state))\n\n(defn set-edit-content!\n  ([input-id value] (set-edit-content! input-id value true))\n  ([input-id value set-input-value?]\n   (when input-id\n     (when set-input-value?\n       (when-let [input (gdom\/getElement input-id)]\n         (util\/set-change-value input value)))\n     (update-state! :editor\/content (fn [m]\n                                      (assoc m input-id value))))))\n\n(defn get-edit-input-id\n  []\n  (ffirst (:editor\/editing? @state)))\n\n(defn get-input\n  []\n  (when-let [id (get-edit-input-id)]\n    (gdom\/getElement id)))\n\n(defn editing?\n  []\n  (let [input (get-input)]\n    (and input (= input (.-activeElement js\/document)))))\n\n(defn get-edit-content\n  []\n  (get (:editor\/content @state) (get-edit-input-id)))\n\n(defn get-cursor-range\n  []\n  (:cursor-range @state))\n\n(defn set-cursor-range!\n  [range]\n  (set-state! :cursor-range range))\n\n(defn set-q!\n  [value]\n  (set-state! :search\/q value))\n\n(defn set-search-mode!\n  [value]\n  (set-state! :search\/mode value))\n\n(defn set-editor-action!\n  [value]\n  (set-state! :editor\/action value))\n\n(defn set-editor-action-data!\n  [value]\n  (set-state! :editor\/action-data value))\n\n(defn get-editor-action\n  []\n  (:editor\/action @state))\n\n(defn get-editor-action-data\n  []\n  (:editor\/action-data @state))\n\n(defn get-editor-show-page-search?\n  []\n  (= (get-editor-action) :page-search))\n\n(defn get-editor-show-page-search-hashtag?\n  []\n  (= (get-editor-action) :page-search-hashtag))\n\n(defn get-editor-show-block-search?\n  []\n  (= (get-editor-action) :block-search))\n\n(defn set-editor-show-input!\n  [value]\n  (if value\n    (do\n      (set-editor-action-data! (assoc (get-editor-action-data) :options value))\n      (set-editor-action! :input))\n    (do\n      (set-editor-action! nil)\n      (set-editor-action-data! nil))))\n\n(defn get-editor-show-input\n  []\n  (when (= (get-editor-action) :input)\n    (get @state :editor\/action-data)))\n\n(defn set-editor-show-commands!\n  []\n  (when-not (get-editor-action) (set-editor-action! :commands)))\n\n(defn set-editor-show-block-commands!\n  []\n  (when-not (get-editor-action) (set-editor-action! :block-commands)))\n\n(defn clear-editor-action!\n  []\n  (swap! state (fn [state]\n                 (assoc state :editor\/action nil))))\n\n(defn set-edit-input-id!\n  [input-id]\n  (swap! state update :editor\/editing?\n         (fn [_m]\n           (and input-id {input-id true}))))\n\n(defn get-edit-pos\n  []\n  (when-let [input (get-input)]\n    (util\/get-selection-start input)))\n\n(defn get-selection-start-block\n  []\n  (get @state :selection\/start-block))\n\n(defn set-selection-start-block!\n  [start-block]\n  (when-not (get-selection-start-block)\n    (swap! state assoc :selection\/start-block start-block)))\n\n(defn set-selection-blocks!\n  ([blocks]\n   (set-selection-blocks! blocks :down))\n  ([blocks direction]\n   (when (seq blocks)\n     (let [blocks (vec (util\/sort-by-height (remove nil? blocks)))]\n       (swap! state assoc\n             :selection\/mode true\n             :selection\/blocks blocks\n             :selection\/direction direction)))))\n\n(defn into-selection-mode!\n  []\n  (swap! state assoc :selection\/mode true))\n\n(defn clear-selection!\n  []\n  (swap! state assoc\n         :selection\/mode false\n         :selection\/blocks nil\n         :selection\/direction :down\n         :selection\/start-block nil\n         :selection\/selected-all? false))\n\n(defn get-selection-blocks\n  []\n  (->> (:selection\/blocks @state)\n       (remove nil?)))\n\n(defn get-selection-block-ids\n  []\n  (get-selected-block-ids (get-selection-blocks)))\n\n(defn get-selection-start-block-or-first\n  []\n  (or (get-selection-start-block)\n      (some-> (first (get-selection-blocks))\n              (gobj\/get \"id\"))))\n\n(defn in-selection-mode?\n  []\n  (:selection\/mode @state))\n\n(defn selection?\n  \"True sense of selection mode with valid selected block\"\n  []\n  (and (in-selection-mode?) (seq (get-selection-blocks))))\n\n(defn conj-selection-block!\n  [block direction]\n  (swap! state assoc\n         :selection\/mode true\n         :selection\/blocks (-> (conj (vec (:selection\/blocks @state)) block)\n                               util\/sort-by-height\n                               vec)\n         :selection\/direction direction))\n\n(defn drop-last-selection-block!\n  []\n  (let [direction (:selection\/direction @state)\n        up? (= direction :up)\n        blocks (:selection\/blocks @state)\n        last-block (if up?\n                     (first blocks)\n                     (peek (vec blocks)))\n        blocks' (-> (if up?\n                      (rest blocks)\n                      (pop (vec blocks)))\n                    util\/sort-by-height\n                    vec)]\n    (swap! state assoc\n           :selection\/mode true\n           :selection\/blocks blocks')\n    last-block))\n\n(defn get-selection-direction\n  []\n  (:selection\/direction @state))\n\n(defn show-custom-context-menu!\n  [links position]\n  (swap! state assoc\n         :custom-context-menu\/show? true\n         :custom-context-menu\/links links\n         :custom-context-menu\/position position))\n\n(defn hide-custom-context-menu!\n  []\n  (swap! state assoc\n         :custom-context-menu\/show? false\n         :custom-context-menu\/links nil\n         :custom-context-menu\/position nil))\n\n(defn toggle-navigation-item-collapsed!\n  [item]\n  (update-state! [:ui\/navigation-item-collapsed? item] not))\n\n(defn toggle-sidebar-open?!\n  []\n  (swap! state update :ui\/sidebar-open? not))\n\n(defn open-right-sidebar!\n  []\n  (swap! state assoc :ui\/sidebar-open? true))\n\n(defn hide-right-sidebar!\n  []\n  (swap! state assoc :ui\/sidebar-open? false))\n\n(defn sidebar-add-block!\n  [repo db-id block-type]\n  (when (not (util\/sm-breakpoint?))\n    (when db-id\n      (update-state! :sidebar\/blocks (fn [blocks]\n                                       (->> (remove #(= (second %) db-id) blocks)\n                                            (cons [repo db-id block-type])\n                                            (distinct))))\n      (set-state! [:ui\/sidebar-collapsed-blocks db-id] false)\n      (open-right-sidebar!)\n      (when-let [elem (gdom\/getElementByClass \"sidebar-item-list\")]\n        (util\/scroll-to elem 0)))))\n\n(defn sidebar-move-block!\n  [from to]\n  (update-state! :sidebar\/blocks (fn [blocks]\n                                   (let [to (if (> from to) (inc to) to)]\n                                     (if (not= to from)\n                                       (let [item (nth blocks from)\n                                             blocks (keep-indexed #(when (not= %1 from) %2) blocks)\n                                             [l r] (split-at to blocks)]\n                                         (concat l [item] r))\n                                       blocks)))))\n\n(defn sidebar-remove-block!\n  [idx]\n  (update-state! :sidebar\/blocks (fn [blocks]\n                                   (if (string? idx)\n                                     (remove #(= (second %) idx) blocks)\n                                     (util\/drop-nth idx blocks))))\n  (when (empty? (:sidebar\/blocks @state))\n    (hide-right-sidebar!)))\n\n(defn sidebar-remove-rest!\n  [db-id]\n  (update-state! :sidebar\/blocks (fn [blocks]\n                                   (remove #(not= (second %) db-id) blocks)))\n  (set-state! [:ui\/sidebar-collapsed-blocks db-id] false))\n\n(defn sidebar-replace-block!\n  [old-sidebar-key new-sidebar-key]\n  (update-state! :sidebar\/blocks (fn [blocks]\n                                   (map #(if (= % old-sidebar-key)\n                                           new-sidebar-key\n                                           %) blocks))))\n\n(defn sidebar-block-exists?\n  [idx]\n  (some #(= (second %) idx) (:sidebar\/blocks @state)))\n\n(defn clear-sidebar-blocks!\n  []\n  (set-state! :sidebar\/blocks '()))\n\n(defn sidebar-block-toggle-collapse!\n  [db-id]\n  (when db-id\n    (update-state! [:ui\/sidebar-collapsed-blocks db-id] not)))\n\n(defn sidebar-block-collapse-rest!\n  [db-id]\n  (let [items (disj (set (map second (:sidebar\/blocks @state))) db-id)]\n    (doseq [item items] (set-state! [:ui\/sidebar-collapsed-blocks item] true))))\n\n(defn sidebar-block-set-collapsed-all!\n  [collapsed?]\n  (let [items (map second (:sidebar\/blocks @state))]\n    (doseq [item items]\n      (set-state! [:ui\/sidebar-collapsed-blocks item] collapsed?))))\n\n(defn get-edit-block\n  []\n  (get @state :editor\/block))\n\n(defn get-current-edit-block-and-position\n  []\n  (let [edit-input-id (get-edit-input-id)\n        edit-block (get-edit-block)\n        block-element (when edit-input-id (gdom\/getElement (string\/replace edit-input-id \"edit-block\" \"ls-block\")))\n        container (when block-element\n                    (util\/get-block-container block-element))]\n    (when container\n      {:last-edit-block edit-block\n       :container       (gobj\/get container \"id\")\n       :pos             (or (cursor\/pos (gdom\/getElement edit-input-id))\n                            (count (:block\/content edit-block)))})))\n\n(defn clear-edit!\n  []\n  (swap! state merge {:editor\/editing? nil\n                      :editor\/block    nil\n                      :cursor-range    nil\n                      :editor\/last-saved-cursor nil}))\n\n(defn into-code-editor-mode!\n  []\n  (swap! state merge {:editor\/editing?   nil\n                      :cursor-range      nil\n                      :editor\/code-mode? true}))\n\n(defn set-editor-last-pos!\n  [new-pos]\n  (set-state! [:editor\/last-saved-cursor (:block\/uuid (get-edit-block))] new-pos))\n\n(defn clear-editor-last-pos!\n  []\n  (set-state! :editor\/last-saved-cursor nil))\n\n(defn get-editor-last-pos\n  []\n  (get-in @state [:editor\/last-saved-cursor (:block\/uuid (get-edit-block))]))\n\n(defn set-block-content-and-last-pos!\n  [edit-input-id content new-pos]\n  (when edit-input-id\n    (set-edit-content! edit-input-id content)\n    (set-state! [:editor\/last-saved-cursor (:block\/uuid (get-edit-block))] new-pos)))\n\n(defn set-theme-mode!\n  [mode]\n  (when (mobile-util\/native-platform?)\n    (if (= mode \"light\")\n      (util\/set-theme-light)\n      (util\/set-theme-dark)))\n  (set-state! :ui\/theme mode)\n  (storage\/set :ui\/theme mode))\n\n(defn sync-system-theme!\n  []\n  (let [system-dark? (.-matches (js\/window.matchMedia \"(prefers-color-scheme: dark)\"))]\n    (set-theme-mode! (if system-dark? \"dark\" \"light\"))\n    (set-state! :ui\/system-theme? true)\n    (storage\/set :ui\/system-theme? true)))\n\n(defn use-theme-mode!\n  [theme-mode]\n  (if (= theme-mode \"system\")\n    (sync-system-theme!)\n    (do\n      (set-theme-mode! theme-mode)\n      (set-state! :ui\/system-theme? false)\n      (storage\/set :ui\/system-theme? false))))\n\n(defn- toggle-theme\n  [theme]\n  (if (= theme \"dark\") \"light\" \"dark\"))\n\n(defn toggle-theme!\n  []\n  (use-theme-mode! (toggle-theme (:ui\/theme @state))))\n\n(defn set-custom-theme!\n  ([custom-theme]\n   (set-custom-theme! nil custom-theme))\n  ([mode theme]\n   (set-state! (if mode [:ui\/custom-theme (keyword mode)] :ui\/custom-theme) theme)\n   (storage\/set :ui\/custom-theme (:ui\/custom-theme @state))))\n\n(defn restore-mobile-theme!\n  \"Restore mobile theme setting from local storage\"\n  []\n  (let [mode (or (storage\/get :ui\/theme) \"light\")\n        system-theme? (storage\/get :ui\/system-theme?)]\n    (when (and (not system-theme?)\n               (mobile-util\/native-platform?))\n      (if (= mode \"light\")\n        (util\/set-theme-light)\n        (util\/set-theme-dark)))))\n\n(defn set-editing-block-dom-id!\n  [block-dom-id]\n  (set-state! :editor\/block-dom-id block-dom-id))\n\n(defn get-editing-block-dom-id\n  []\n  (:editor\/block-dom-id @state))\n\n(defn set-root-component!\n  [component]\n  (set-state! :ui\/root-component component))\n\n(defn get-root-component\n  []\n  (get @state :ui\/root-component))\n\n(defn load-app-user-cfgs\n  ([] (load-app-user-cfgs false))\n  ([refresh?]\n   (when (util\/electron?)\n     (p\/let [cfgs (if (or refresh? (nil? (:electron\/user-cfgs @state)))\n                    (ipc\/ipc :userAppCfgs)\n                    (:electron\/user-cfgs @state))\n             cfgs (if (object? cfgs) (bean\/->clj cfgs) cfgs)]\n       (set-state! :electron\/user-cfgs cfgs)))))\n\n(defn setup-electron-updater!\n  []\n  (when (util\/electron?)\n    (js\/window.apis.setUpdatesCallback\n      (fn [_ args]\n        (let [data (bean\/->clj args)\n              pending? (not= (:type data) \"completed\")]\n          (set-state! :electron\/updater-pending? pending?)\n          (when pending? (set-state! :electron\/updater data))\n          nil)))))\n\n(defn set-file-component!\n  [component]\n  (set-state! :ui\/file-component component))\n\n(defn clear-file-component!\n  []\n  (set-state! :ui\/file-component nil))\n\n(defn set-journals-length!\n  [value]\n  (when value\n    (set-state! :journals-length value)))\n\n(defn save-scroll-position!\n  ([value]\n   (save-scroll-position! value js\/window.location.hash))\n  ([value path]\n   (set-state! [:ui\/paths-scroll-positions path] value)))\n\n(defn get-saved-scroll-position\n  ([]\n   (get-saved-scroll-position js\/window.location.hash))\n  ([path]\n   (get-in @state [:ui\/paths-scroll-positions path] 0)))\n\n(defn set-today!\n  [value]\n  (set-state! :today value))\n\n(defn get-me\n  []\n  (:me @state))\n\n(defn set-db-restoring!\n  [value]\n  (set-state! :db\/restoring? value))\n\n(defn set-indexedb-support!\n  [value]\n  (set-state! :indexeddb\/support? value))\n\n(defn modal-opened?\n  []\n  (:modal\/show? @state))\n\n(declare set-modal!)\n(declare close-modal!)\n\n(defn get-sub-modals\n  []\n  (:modal\/subsets @state))\n\n(defn set-sub-modal!\n  ([panel-content]\n   (set-sub-modal! panel-content\n                   {:close-btn? true}))\n  ([panel-content {:keys [id label payload close-btn? close-backdrop? show? center?] :as opts}]\n   (if (not (modal-opened?))\n     (set-modal! panel-content opts)\n     (let [modals (:modal\/subsets @state)\n           idx (and id (first (keep-indexed #(when (= (:modal\/id %2) id) %1)\n                                            modals)))\n           input (medley\/filter-vals\n                   #(not (nil? %1))\n                   {:modal\/id            id\n                    :modal\/label         (or label (if center? \"ls-modal-align-center\" \"\"))\n                    :modal\/payload       payload\n                    :modal\/show?         (if (boolean? show?) show? true)\n                    :modal\/panel-content panel-content\n                    :modal\/close-btn?    close-btn?\n                    :modal\/close-backdrop? (if (boolean? close-backdrop?) close-backdrop? true)})]\n       (swap! state update-in\n              [:modal\/subsets (or idx (count modals))]\n              merge input)\n       (:modal\/subsets @state)))))\n\n(defn close-sub-modal!\n  ([] (close-sub-modal! nil))\n  ([all?-a-id]\n   (if (true? all?-a-id)\n     (swap! state assoc :modal\/subsets [])\n     (let [id     all?-a-id\n           mid    (:modal\/id @state)\n           modals (:modal\/subsets @state)]\n       (if (and id (not (string\/blank? mid)) (= id mid))\n         (close-modal!)\n         (when-let [idx (if id (first (keep-indexed #(when (= (:modal\/id %2) id) %1) modals))\n                          (dec (count modals)))]\n           (swap! state assoc :modal\/subsets (into [] (medley\/remove-nth idx modals)))))))\n   (:modal\/subsets @state)))\n\n(defn set-modal!\n  ([modal-panel-content]\n   (set-modal! modal-panel-content\n               {:fullscreen? false\n                :close-btn?  true}))\n  ([modal-panel-content {:keys [id label payload fullscreen? close-btn? close-backdrop? center?]}]\n   (let [opened? (modal-opened?)]\n     (when opened?\n       (close-modal!))\n     (when (seq (get-sub-modals))\n       (close-sub-modal! true))\n\n     (async\/go\n       (when opened?\n         (<! (async\/timeout 100)))\n       (swap! state assoc\n              :modal\/id id\n              :modal\/label (or label (if center? \"ls-modal-align-center\" \"\"))\n              :modal\/show? (boolean modal-panel-content)\n              :modal\/panel-content modal-panel-content\n              :modal\/payload payload\n              :modal\/fullscreen? fullscreen?\n              :modal\/close-btn? close-btn?\n              :modal\/close-backdrop? (if (boolean? close-backdrop?) close-backdrop? true))))\n   nil))\n\n(defn close-modal!\n  []\n  (when-not (editing?)\n    (if (seq (get-sub-modals))\n      (close-sub-modal!)\n      (swap! state assoc\n             :modal\/id nil\n             :modal\/label \"\"\n             :modal\/payload nil\n             :modal\/show? false\n             :modal\/fullscreen? false\n             :modal\/panel-content nil\n             :ui\/open-select nil))))\n\n(defn get-db-batch-txs-chan\n  []\n  (:db\/batch-txs @state))\n\n(defn get-file-write-chan\n  []\n  (:file\/writes @state))\n\n(defn get-reactive-custom-queries-chan\n  []\n  (:reactive\/custom-queries @state))\n\n(defn get-left-sidebar-open?\n  []\n  (get-in @state [:ui\/left-sidebar-open?]))\n\n(defn set-left-sidebar-open!\n  [value]\n  (storage\/set \"ls-left-sidebar-open?\" (boolean value))\n  (set-state! :ui\/left-sidebar-open? value))\n\n(defn toggle-left-sidebar!\n  []\n  (set-left-sidebar-open!\n    (not (get-left-sidebar-open?))))\n\n(defn set-developer-mode!\n  [value]\n  (set-state! :ui\/developer-mode? value)\n  (storage\/set \"developer-mode\" (str value)))\n\n(defn developer-mode?\n  []\n  (:ui\/developer-mode? @state))\n\n(defn get-notification-contents\n  []\n  (get @state :notification\/contents))\n\n(defn document-mode?\n  []\n  (get @state :document\/mode?))\n\n(defn toggle-document-mode!\n  []\n  (let [mode (document-mode?)]\n    (set-state! :document\/mode? (not mode))\n    (storage\/set :document\/mode? (not mode))))\n\n(defn shortcut-tooltip-enabled?\n  []\n  (get @state :ui\/shortcut-tooltip?))\n\n(defn toggle-shortcut-tooltip!\n  []\n  (let [mode (shortcut-tooltip-enabled?)]\n    (set-state! :ui\/shortcut-tooltip? (not mode))\n    (storage\/set :ui\/shortcut-tooltip? (not mode))))\n\n(defn set-config!\n  [repo-url value]\n  (when value (set-state! [:config repo-url] value)))\n\n(defn set-global-config!\n  [value str-content]\n  ;; Placed under :config so cursors can work seamlessly\n  (when value\n    (set-config! ::global-config value)\n    (set-config! ::global-config-str-content str-content)))\n\n(defn get-wide-mode?\n  []\n  (:ui\/wide-mode? @state))\n\n(defn toggle-wide-mode!\n  []\n  (update-state! :ui\/wide-mode? not))\n\n(defn set-online!\n  [value]\n  (set-state! :network\/online? value))\n\n(defn get-plugins-slash-commands\n  []\n  (mapcat seq (flatten (vals (:plugin\/installed-slash-commands @state)))))\n\n(defn get-plugins-commands-with-type\n  [type]\n  (->> (apply concat (vals (:plugin\/simple-commands @state)))\n       (filterv #(= (keyword (first %)) (keyword type)))))\n\n(defn get-plugins-ui-items-with-type\n  [type]\n  (->> (apply concat (vals (:plugin\/installed-ui-items @state)))\n       (filterv #(= (keyword (first %)) (keyword type)))))\n\n(defn get-plugin-resources-with-type\n  [pid type]\n  (when-let [pid (and type (keyword pid))]\n    (get-in @state [:plugin\/installed-resources pid (keyword type)])))\n\n(defn get-plugin-resource\n  [pid type key]\n  (when-let [resources (get-plugin-resources-with-type pid type)]\n    (get resources key)))\n\n(defn upt-plugin-resource\n  [pid type key attr val]\n  (when-let [resource (get-plugin-resource pid type key)]\n    (let [resource (assoc resource (keyword attr) val)]\n      (set-state!\n        [:plugin\/installed-resources (keyword pid) (keyword type) key] resource)\n      resource)))\n\n(defn get-plugin-services\n  [pid type]\n  (when-let [installed (and pid (:plugin\/installed-services @state))]\n    (some->> (seq (get installed (keyword pid)))\n             (filterv #(= type (:type %))))))\n\n(defn install-plugin-service\n  ([pid type name] (install-plugin-service pid type name nil))\n  ([pid type name opts]\n   (when-let [pid (and pid type name (keyword pid))]\n     (let [exists (get-plugin-services pid type)]\n       (when-let [service (and (or (not exists) (not (some #(= name (:name %)) exists)))\n                               {:pid pid :type type :name name :opts opts})]\n         (update-state! [:plugin\/installed-services pid] #(conj (vec %) service))\n\n         ;; search engines state for results\n         (when (= type :search)\n           (set-state! [:search\/engines (str pid name)] service)))))))\n\n(defn uninstall-plugin-service\n  [pid type-or-all]\n  (when-let [pid (keyword pid)]\n    (when-let [installed (get (:plugin\/installed-services @state) pid)]\n      (let [remove-all? (or (true? type-or-all) (nil? type-or-all))\n            remains     (if remove-all? nil (filterv #(not= type-or-all (:type %)) installed))\n            removed     (if remove-all? installed (filterv #(= type-or-all (:type %)) installed))]\n        (set-state! [:plugin\/installed-services pid] remains)\n\n        ;; search engines state for results\n        (when-let [removed' (seq (filter #(= :search (:type %)) removed))]\n          (update-state! :search\/engines #(apply dissoc % (mapv (fn [{:keys [pid name]}] (str pid name)) removed'))))))))\n\n(defn get-all-plugin-services-with-type\n  [type]\n  (when-let [installed (vals (:plugin\/installed-services @state))]\n    (mapcat (fn [s] (filter #(= (keyword type) (:type %)) s)) installed)))\n\n(defn get-all-plugin-search-engines\n  []\n  (:search\/engines @state))\n\n(defn update-plugin-search-engine\n  [pid name f]\n  (when-let [pid (keyword pid)]\n    (set-state! :search\/engines\n                (update-vals (get-all-plugin-search-engines)\n                             #(if (and (= pid (:pid %)) (= name (:name %)))\n                                (f %) %)))))\n\n(defn reset-plugin-search-engines\n  []\n  (when-let [engines (get-all-plugin-search-engines)]\n    (set-state! :search\/engines\n                (update-vals engines #(assoc % :result nil)))))\n\n(defn install-plugin-hook\n  ([pid hook] (install-plugin-hook pid hook true))\n  ([pid hook opts]\n   (when-let [pid (keyword pid)]\n     (set-state!\n      [:plugin\/installed-hooks hook]\n      (assoc\n        ((fnil identity {}) (get-in @state [:plugin\/installed-hooks hook]))\n        pid opts)) true)))\n\n(defn uninstall-plugin-hook\n  [pid hook-or-all]\n  (when-let [pid (keyword pid)]\n    (if (nil? hook-or-all)\n      (swap! state update :plugin\/installed-hooks #(update-vals % (fn [ids] (dissoc ids pid))))\n      (when-let [coll (get-in @state [:plugin\/installed-hooks hook-or-all])]\n        (set-state! [:plugin\/installed-hooks hook-or-all] (dissoc coll pid))))\n    true))\n\n(defn slot-hook-exist?\n  [uuid]\n  (when-let [type (and uuid (string\/replace (str uuid) \"-\" \"_\"))]\n    (when-let [hooks (sub :plugin\/installed-hooks)]\n      (contains? hooks (str \"hook:editor:slot_\" type)))))\n\n(defn active-tldraw-app\n  []\n  (when-let [tldraw-el (.querySelector js\/document.body \".logseq-tldraw[data-tlapp]\")]\n    (gobj\/get js\/window.tlapps (.. tldraw-el -dataset -tlapp))))\n\n(defn tldraw-editing-logseq-block?\n  []\n  (when-let [app (active-tldraw-app)]\n    (and (= 1 (.. app -selectedShapesArray -length))\n         (= (.. app -editingShape) (.. app -selectedShapesArray (at 0))))))\n\n(defn set-graph-syncing?\n  [value]\n  (set-state! :graph\/syncing? value))\n\n(defn set-editor-in-composition!\n  [value]\n  (set-state! :editor\/in-composition? value))\n\n(defn editor-in-composition?\n  []\n  (:editor\/in-composition? @state))\n\n(defn set-loading-files!\n  [repo value]\n  (when repo\n    (set-state! [:repo\/loading-files? repo] value)))\n\n(defn loading-files?\n  [repo]\n  (get-in @state [:repo\/loading-files? repo]))\n\n(defn set-editor-last-input-time!\n  [repo time]\n  (swap! state assoc-in [:editor\/last-input-time repo] time))\n\n(defn set-last-transact-time!\n  [repo time]\n  (swap! state assoc-in [:db\/last-transact-time repo] time)\n\n  ;; THINK: new block, indent\/outdent, drag && drop, etc.\n  (set-editor-last-input-time! repo time))\n\n(defn set-db-persisted!\n  [repo value]\n  (swap! state assoc-in [:db\/persisted? repo] value))\n\n(defn db-idle?\n  [repo]\n  (when repo\n    (when-let [last-time (get-in @state [:db\/last-transact-time repo])]\n      (let [now (util\/time-ms)]\n        (>= (- now last-time) 3000)))))\n\n(defn input-idle?\n  [repo & {:keys [diff]\n           :or {diff 1000}}]\n  (when repo\n    (or\n     (when-let [last-time (get-in @state [:editor\/last-input-time repo])]\n       (let [now (util\/time-ms)]\n         (>= (- now last-time) diff)))\n     ;; not in editing mode\n     ;; Is this a good idea to put whiteboard check here?\n     (not (get-edit-input-id)))))\n\n(defn whiteboard-idle?\n  \"Check if whiteboard is idle.\"\n  [repo]\n  (when repo\n    (>= (- (util\/time-ms) (or (get-in @state [:whiteboard\/last-persisted-at repo])\n                              (- (util\/time-ms) 10000)))\n        3000)))\n\n(defn set-nfs-refreshing!\n  [value]\n  (set-state! :nfs\/refreshing? value))\n\n(defn nfs-refreshing?\n  []\n  (:nfs\/refreshing? @state))\n\n(defn set-search-result!\n  [value]\n  (set-state! :search\/result value))\n\n(defn clear-search-result!\n  []\n  (set-search-result! nil))\n\n(defn add-graph-search-filter!\n  [q]\n  (when-not (string\/blank? q)\n    (update-state! :search\/graph-filters\n                   (fn [value]\n                     (vec (distinct (conj value q)))))))\n\n(defn remove-search-filter!\n  [q]\n  (when-not (string\/blank? q)\n    (update-state! :search\/graph-filters\n                   (fn [value]\n                     (remove #{q} value)))))\n\n(defn clear-search-filters!\n  []\n  (set-state! :search\/graph-filters []))\n\n(defn get-search-mode\n  []\n  (:search\/mode @state))\n\n(defn toggle!\n  [path]\n  (update-state! path not))\n\n(defn toggle-settings!\n  []\n  (toggle! :ui\/settings-open?))\n\n(defn settings-open?\n  []\n  (:ui\/settings-open? @state))\n\n(defn close-settings!\n  []\n  (set-state! :ui\/settings-open? false))\n\n(defn open-settings!\n  ([] (open-settings! true))\n  ([active-tab] (set-state! :ui\/settings-open? active-tab)))\n\n;; TODO: Move those to the uni `state`\n\n(defn set-editor-op!\n  [value]\n  (set-state! :editor\/op value)\n  (when value (set-state! :editor\/latest-op value)))\n\n(defn get-editor-op\n  []\n  (:editor\/op @state))\n\n(defn get-editor-latest-op\n  []\n  (:editor\/latest-op @state))\n\n(defn get-events-chan\n  []\n  (:system\/events @state))\n\n(defn pub-event!\n  {:malli\/schema [:=> [:cat vector?] :any]}\n  [payload]\n  (let [d (p\/deferred)\n        chan (get-events-chan)]\n    (async\/put! chan [payload d])\n    d))\n\n(defn get-export-block-text-indent-style []\n  (:copy\/export-block-text-indent-style @state))\n\n(defn set-export-block-text-indent-style!\n  [v]\n  (set-state! :copy\/export-block-text-indent-style v)\n  (storage\/set :copy\/export-block-text-indent-style v))\n\n(defn get-export-block-text-remove-options []\n  (:copy\/export-block-text-remove-options @state))\n\n(defn update-export-block-text-remove-options!\n  [e k]\n  (let [f (if (util\/echecked? e) conj disj)]\n    (update-state! :copy\/export-block-text-remove-options\n                   #(f % k))\n    (storage\/set :copy\/export-block-text-remove-options\n                 (get-export-block-text-remove-options))))\n\n(defn get-export-block-text-other-options []\n  (:copy\/export-block-text-other-options @state))\n\n(defn update-export-block-text-other-options!\n  [k v]\n  (update-state! :copy\/export-block-text-other-options #(assoc % k v)))\n\n(defn set-editor-args!\n  [args]\n  (set-state! :editor\/args args))\n\n(defn editing-whiteboard-portal?\n  []\n  (and (active-tldraw-app) (tldraw-editing-logseq-block?)))\n\n(defn block-component-editing?\n  []\n  (and (:block\/component-editing-mode? @state)\n       (not (editing-whiteboard-portal?))))\n\n(defn set-block-component-editing-mode!\n  [value]\n  (set-state! :block\/component-editing-mode? value))\n\n(defn get-editor-args\n  []\n  (:editor\/args @state))\n\n(defn set-page-blocks-cp!\n  [value]\n  (set-state! [:view\/components :page-blocks] value))\n\n(defn get-page-blocks-cp\n  []\n  (get-in @state [:view\/components :page-blocks]))\n\n;; To avoid circular dependencies\n(defn set-component!\n  [k value]\n  (set-state! [:view\/components k] value))\n\n(defn get-component\n  [k]\n  (get-in @state [:view\/components k]))\n\n(defn exit-editing-and-set-selected-blocks!\n  ([blocks]\n   (exit-editing-and-set-selected-blocks! blocks :down))\n  ([blocks direction]\n   (clear-edit!)\n   (set-selection-blocks! blocks direction)))\n\n(defn set-editing!\n  ([edit-input-id content block cursor-range]\n   (set-editing! edit-input-id content block cursor-range true))\n  ([edit-input-id content block cursor-range move-cursor?]\n   (if (> (count content)\n          (block-content-max-length (get-current-repo)))\n     (let [elements (array-seq (js\/document.getElementsByClassName (:block\/uuid block)))]\n       (when (first elements)\n         (util\/scroll-to-element (gobj\/get (first elements) \"id\")))\n       (exit-editing-and-set-selected-blocks! elements))\n     (when (and edit-input-id block\n               (or\n                (publishing-enable-editing?)\n                (not @publishing?)))\n      (let [block-element (gdom\/getElement (string\/replace edit-input-id \"edit-block\" \"ls-block\"))\n            container (util\/get-block-container block-element)\n            block (if container\n                    (assoc block\n                           :block.temp\/container (gobj\/get container \"id\"))\n                    block)\n            content (string\/trim (or content \"\"))]\n        (swap! state\n               (fn [state]\n                 (-> state\n                     (assoc-in [:editor\/content edit-input-id] content)\n                     (assoc\n                      :editor\/block block\n                      :editor\/editing? {edit-input-id true}\n                      :editor\/last-key-code nil\n                      :editor\/set-timestamp-block nil\n                      :cursor-range cursor-range))))\n        (when-let [input (gdom\/getElement edit-input-id)]\n          (let [pos (count cursor-range)]\n            (when content\n              (util\/set-change-value input content))\n\n            (when move-cursor?\n              (cursor\/move-cursor-to input pos))\n\n            (when (or (util\/mobile?) (mobile-util\/native-platform?))\n              (set-state! :mobile\/show-action-bar? false)))))))))\n\n(defn action-bar-open?\n  []\n  (:mobile\/show-action-bar? @state))\n\n(defn remove-watch-state [key]\n  (remove-watch state key))\n\n(defn get-git-auto-commit-enabled?\n  []\n  (false? (sub [:electron\/user-cfgs :git\/disable-auto-commit?])))\n\n(defn set-last-key-code!\n  [key-code]\n  (set-state! :editor\/last-key-code key-code))\n\n(defn get-last-key-code\n  []\n  (:editor\/last-key-code @state))\n\n(defn set-block-op-type!\n  [op-type]\n  (set-state! :editor\/block-op-type op-type))\n\n(defn get-block-op-type\n  []\n  (:editor\/block-op-type @state))\n\n(defn feature-http-server-enabled?\n  []\n  (boolean (storage\/get ::storage-spec\/http-server-enabled)))\n\n(defn get-plugin-by-id\n  [id]\n  (when-let [id (and id (keyword id))]\n    (get-in @state [:plugin\/installed-plugins id])))\n\n(defn get-enabled?-installed-plugins\n  ([theme?] (get-enabled?-installed-plugins theme? true false false))\n  ([theme? enabled? include-unpacked? include-all?]\n   (filterv\n     #(and (if include-unpacked? true (:iir %))\n           (if-not (boolean? enabled?) true (= (not enabled?) (boolean (get-in % [:settings :disabled]))))\n           (or include-all? (if (boolean? theme?) (= (boolean theme?) (:theme %)) true)))\n     (vals (:plugin\/installed-plugins @state)))))\n\n(defn lsp-enabled?-or-theme\n  []\n  (:plugin\/enabled @state))\n\n(def lsp-enabled?\n  (lsp-enabled?-or-theme))\n\n(defn consume-updates-from-coming-plugin!\n  [payload updated?]\n  (when-let [id (keyword (:id payload))]\n    (let [prev-pending? (boolean (seq (:plugin\/updates-pending @state)))]\n      (println \"Updates: consumed pending - \" id)\n      (swap! state update :plugin\/updates-pending dissoc id)\n      (if updated?\n        (if-let [error (:error-code payload)]\n          (swap! state update-in [:plugin\/updates-coming id] assoc :error-code error)\n          (swap! state update :plugin\/updates-coming dissoc id))\n        (swap! state update :plugin\/updates-coming assoc id payload))\n      (pub-event! [:plugin\/consume-updates id prev-pending? updated?]))))\n\n(defn coming-update-new-version?\n  [pkg]\n  (and pkg (:latest-version pkg)))\n\n(defn plugin-update-available?\n  [id]\n  (when-let [pkg (and id (get (:plugin\/updates-coming @state) (keyword id)))]\n    (coming-update-new-version? pkg)))\n\n(defn all-available-coming-updates\n  ([] (all-available-coming-updates (:plugin\/updates-coming @state)))\n  ([updates] (when-let [updates (vals updates)]\n               (filterv #(coming-update-new-version? %) updates))))\n\n(defn get-next-selected-coming-update\n  []\n  (when-let [updates (all-available-coming-updates)]\n    (let [unchecked (:plugin\/updates-unchecked @state)]\n      (first (filter #(and (not (and (seq unchecked) (contains? unchecked (:id %))))\n                           (not (:error-code %))) updates)))))\n\n(defn set-unchecked-update\n  [id unchecked?]\n  (swap! state update :plugin\/updates-unchecked (if unchecked? conj disj) id))\n\n(defn reset-unchecked-update\n  []\n  (swap! state assoc :plugin\/updates-unchecked #{}))\n\n(defn reset-all-updates-state\n  []\n  (swap! state assoc\n         :plugin\/updates-auto-checking?         false\n         :plugin\/updates-pending                {}\n         :plugin\/updates-coming                 {}\n         :plugin\/updates-downloading?           false))\n\n(defn sub-right-sidebar-blocks\n  []\n  (when-let [current-repo (get-current-repo)]\n    (->> (sub :sidebar\/blocks)\n         (filter #(= (first %) current-repo)))))\n\n\n(defn toggle-collapsed-block!\n  [block-id]\n  (let [current-repo (get-current-repo)]\n    (update-state! [:ui\/collapsed-blocks current-repo block-id] not)))\n\n(defn set-collapsed-block!\n  [block-id value]\n  (let [current-repo (get-current-repo)]\n    (set-state! [:ui\/collapsed-blocks current-repo block-id] value)))\n\n(defn sub-collapsed\n  [block-id]\n  (sub [:ui\/collapsed-blocks (get-current-repo) block-id]))\n\n(defn get-modal-id\n  []\n  (:modal\/id @state))\n\n(defn edit-in-query-or-refs-component\n  []\n  (let [config (last (get-editor-args))]\n    {:custom-query? (:custom-query? config)\n     :ref? (:ref? config)}))\n\n(defn set-auth-id-token\n  [id-token]\n  (set-state! :auth\/id-token id-token))\n\n(defn set-auth-refresh-token\n  [refresh-token]\n  (set-state! :auth\/refresh-token refresh-token))\n\n(defn set-auth-access-token\n  [access-token]\n  (set-state! :auth\/access-token access-token))\n\n(defn get-auth-id-token []\n  (sub :auth\/id-token))\n\n(defn get-auth-refresh-token []\n  (:auth\/refresh-token @state))\n\n(defn set-file-sync-manager [graph-uuid v]\n  (when (and graph-uuid v)\n    (set-state! [:file-sync\/graph-state graph-uuid :file-sync\/sync-manager] v)))\n\n(defn get-file-sync-manager [graph-uuid]\n  (get-in @state [:file-sync\/graph-state graph-uuid :file-sync\/sync-manager]))\n\n(defn clear-file-sync-state! [graph-uuid]\n  (set-state! [:file-sync\/graph-state graph-uuid] nil))\n\n(defn clear-file-sync-progress! [graph-uuid]\n  (set-state! [:file-sync\/graph-state\n               graph-uuid\n               :file-sync\/progress]\n              nil))\n\n(defn set-file-sync-state [graph-uuid v]\n  (when v (s\/assert :frontend.fs.sync\/sync-state v))\n  (set-state! [:file-sync\/graph-state graph-uuid :file-sync\/sync-state] v))\n\n(defn get-current-file-sync-graph-uuid\n  []\n  (get-in @state [:file-sync\/graph-state :current-graph-uuid]))\n\n(defn sub-current-file-sync-graph-uuid\n  []\n  (sub [:file-sync\/graph-state :current-graph-uuid]))\n\n(defn get-file-sync-state\n  ([]\n   (get-file-sync-state (get-current-file-sync-graph-uuid)))\n  ([graph-uuid]\n   (get-in @state [:file-sync\/graph-state graph-uuid :file-sync\/sync-state])))\n\n(defn sub-file-sync-state\n  [graph-uuid]\n  (sub [:file-sync\/graph-state graph-uuid :file-sync\/sync-state]))\n\n(defn reset-parsing-state!\n  []\n  (set-state! [:graph\/parsing-state (get-current-repo)] {}))\n\n(defn set-parsing-state!\n  [m]\n  (update-state! [:graph\/parsing-state (get-current-repo)]\n                 (if (fn? m) m\n                   (fn [old-value] (merge old-value m)))))\n\n(defn http-proxy-enabled-or-val? []\n  (when-let [{:keys [type protocol host port] :as agent-opts} (sub [:electron\/user-cfgs :settings\/agent])]\n    (when (and  (not (contains? #{\"system\"} type))\n                (every? not-empty (vals agent-opts)))\n      (str protocol \":\/\/\" host \":\" port))))\n\n(defn set-mobile-app-state-change\n  [is-active?]\n  (set-state! :mobile\/app-state-change\n              {:is-active? is-active?\n               :timestamp (inst-ms (js\/Date.))}))\n\n(defn get-sync-graph-by-id\n  [graph-uuid]\n  (when graph-uuid\n    (let [graph (first (filter #(= graph-uuid (:GraphUUID %))\n                               (get-repos)))]\n      (when (:url graph)\n        graph))))\n\n(defn unlinked-dir?\n  [dir]\n  (contains? (:file\/unlinked-dirs @state) dir))\n\n(defn get-file-rename-event-chan\n  []\n  (:file\/rename-event-chan @state))\n\n(defn offer-file-rename-event-chan!\n  [v]\n  {:pre [(map? v)\n         (= #{:repo :old-path :new-path} (set (keys v)))]}\n  (async\/offer! (get-file-rename-event-chan) v))\n\n(defn set-onboarding-whiteboard!\n  [v]\n  (set-state! :whiteboard\/onboarding-whiteboard? v)\n  (storage\/set :ls-onboarding-whiteboard? v))\n\n(defn get-onboarding-whiteboard?\n  []\n  (get-in @state [:whiteboard\/onboarding-whiteboard?]))\n\n(defn get-local-container-root-url\n  []\n  (when (mobile-util\/native-ios?)\n    (get-in @state [:mobile\/container-urls :localContainerUrl])))\n\n(defn get-icloud-container-root-url\n  []\n  (when (mobile-util\/native-ios?)\n    (get-in @state [:mobile\/container-urls :iCloudContainerUrl])))\n\n(defn get-current-pdf\n  []\n  (:pdf\/current @state))\n\n(defn nfs-user-granted?\n  [repo]\n  (get-in @state [:nfs\/user-granted? repo]))\n\n(defn set-current-pdf!\n  [inflated-file]\n  (let [settle-file! #(set-state! :pdf\/current inflated-file)]\n    (if-not (get-current-pdf)\n      (settle-file!)\n      (when (apply not= (map :identity [inflated-file (get-current-pdf)]))\n        (set-state! :pdf\/current nil)\n        (js\/setTimeout #(settle-file!) 16)))))\n\n(defn focus-whiteboard-shape\n  ([shape-id]\n   (focus-whiteboard-shape (active-tldraw-app) shape-id))\n  ([tln shape-id]\n   (when-let [^js api (gobj\/get tln \"api\")]\n     (when (and shape-id (parse-uuid shape-id))\n       (. api selectShapes shape-id)\n       (. api zoomToSelection)))))\n\n(defn set-user-info!\n  [info]\n  (when info\n    (set-state! :user\/info info)\n    (let [groups (:UserGroups info)]\n      (when (seq groups)\n        (storage\/set :user-groups groups)))))\n\n(defn get-user-info []\n  (sub :user\/info))\n\n(defn clear-user-info!\n  []\n  (storage\/remove :user-groups))\n\n(defn handbook-open?\n  []\n  (:ui\/handbooks-open? @state))\n\n(defn get-handbook-route-chan\n  []\n  (:handbook\/route-chan @state))\n\n(defn open-handbook-pane!\n  [k]\n  (when-not (handbook-open?)\n    (set-state! :ui\/handbooks-open? true))\n  (js\/setTimeout #(async\/go\n                    (>! (get-handbook-route-chan) k))))\n\n(defn set-page-properties-changed!\n  [page-name]\n  (when-not (string\/blank? page-name)\n    (update-state! [:db\/properties-changed-pages page-name] #(inc %))))\n\n(defn sub-page-properties-changed\n  [page-name]\n  (when-not (string\/blank? page-name)\n    (sub [:db\/properties-changed-pages page-name])))\n","\/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n *\/\n\n\/**\n * @fileoverview Utilities for manipulating objects\/maps\/hashes.\n *\/\ngoog.module('goog.object');\ngoog.module.declareLegacyNamespace();\n\n\/**\n * Calls a function for each element in an object\/map\/hash.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):?} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and the return value is ignored.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {void}\n * @template T,K,V\n *\/\nfunction forEach(obj, f, opt_obj) {\n  for (const key in obj) {\n    f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj);\n  }\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If that call returns\n * true, adds the element to a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean. If the return value is true the\n *     element is added to the result object. If it is false the element is not\n *     included.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,V>} a new object in which only elements that passed the\n *     test are present.\n * @template T,K,V\n *\/\nfunction filter(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      res[key] = obj[key];\n    }\n  }\n  return res;\n}\n\n\/**\n * For every element in an object\/map\/hash calls a function and inserts the\n * result into a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):R} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and should return something. The result will be inserted into a\n *     new object.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,R>} a new object with the results from f.\n * @template T,K,V,R\n *\/\nfunction map(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj);\n  }\n  return res;\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If any\n * call returns true, returns true (without checking the rest). If\n * all calls return false, returns false.\n * @param {?Object<K,V>} obj The object to check.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} true if any element passes the test.\n * @template T,K,V\n *\/\nfunction some(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\/**\n * Calls a function for each element in an object\/map\/hash. If\n * all calls return true, returns true. If any call returns false, returns\n * false at this point and does not continue to check the remaining elements.\n * @param {?Object<K,V>} obj The object to check.\n * @param {?function(this:T,V,?,?Object<K,V>):boolean} f The function to call\n *     for every element. This function takes 3 arguments (the value, the key\n *     and the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} false if any element fails the test.\n * @template T,K,V\n *\/\nfunction every(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (!f.call(\/** @type {?} *\/ (opt_obj), obj[key], key, obj)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\/**\n * Returns the number of key-value pairs in the object map.\n * @param {?Object} obj The object for which to get the number of key-value\n *     pairs.\n * @return {number} The number of key-value pairs in the object map.\n *\/\nfunction getCount(obj) {\n  let rv = 0;\n  for (const key in obj) {\n    rv++;\n  }\n  return rv;\n}\n\n\/**\n * Returns one key from the object map, if any exists.\n * For map literals the returned key will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object} obj The object to pick a key from.\n * @return {string|undefined} The key or undefined if the object is empty.\n *\/\nfunction getAnyKey(obj) {\n  for (const key in obj) {\n    return key;\n  }\n}\n\n\/**\n * Returns one value from the object map, if any exists.\n * For map literals the returned value will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object<K,V>} obj The object to pick a value from.\n * @return {V|undefined} The value or undefined if the object is empty.\n * @template K,V\n *\/\nfunction getAnyValue(obj) {\n  for (const key in obj) {\n    return obj[key];\n  }\n}\n\n\/**\n * Whether the object\/hash\/map contains the given object as a value.\n * An alias for containsValue(obj, val).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The object for which to check.\n * @return {boolean} true if val is present.\n * @template K,V\n *\/\nfunction contains(obj, val) {\n  return containsValue(obj, val);\n}\n\n\/**\n * Returns the values of the object\/map\/hash.\n * @param {?Object<K,V>} obj The object from which to get the values.\n * @return {!Array<V>} The values in the object\/map\/hash.\n * @template K,V\n *\/\nfunction getValues(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n}\n\n\/**\n * Returns the keys of the object\/map\/hash.\n * @param {?Object} obj The object from which to get the keys.\n * @return {!Array<string>} Array of property keys.\n *\/\nfunction getKeys(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = key;\n  }\n  return res;\n}\n\n\/**\n * Get a value from an object multiple levels deep.  This is useful for\n * pulling values from deeply nested objects, such as JSON responses.\n * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)\n * @param {?Object} obj An object to get the value from. Can be array-like.\n * @param {...(string|number|!IArrayLike<number|string>)} var_args A number of\n *     keys (as strings, or numbers, for array-like objects). Can also be\n *     specified as a single array of keys.\n * @return {*} The resulting value. If, at any point, the value for a key in the\n *     current object is null or undefined, returns undefined.\n *\/\nfunction getValueByKeys(obj, var_args) {\n  const isArrayLike = goog.isArrayLike(var_args);\n  const keys = isArrayLike ?\n      \/** @type {!IArrayLike<number|string>} *\/ (var_args) :\n      arguments;\n\n  \/\/ Start with the 2nd parameter for the variable parameters syntax.\n  for (let i = isArrayLike ? 0 : 1; i < keys.length; i++) {\n    if (obj == null) return undefined;\n    obj = obj[keys[i]];\n  }\n\n  return obj;\n}\n\n\/**\n * Whether the object\/map\/hash contains the given key.\n * @param {?Object} obj The object in which to look for key.\n * @param {?} key The key for which to check.\n * @return {boolean} true If the map contains the key.\n *\/\nfunction containsKey(obj, key) {\n  return obj !== null && key in obj;\n}\n\n\/**\n * Whether the object\/map\/hash contains the given value. This is O(n).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The value for which to check.\n * @return {boolean} true If the map contains the value.\n * @template K,V\n *\/\nfunction containsValue(obj, val) {\n  for (const key in obj) {\n    if (obj[key] == val) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\/**\n * Searches an object for an element that satisfies the given condition and\n * returns its key.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {string|undefined} The key of an element for which the function\n *     returns true or undefined if no such element is found.\n * @template T,K,V\n *\/\nfunction findKey(obj, f, thisObj = undefined) {\n  for (const key in obj) {\n    if (f.call(\/** @type {?} *\/ (thisObj), obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n\/**\n * Searches an object for an element that satisfies the given condition and\n * returns its value.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {V} The value of an element for which the function returns true or\n *     undefined if no such element is found.\n * @template T,K,V\n *\/\nfunction findValue(obj, f, thisObj = undefined) {\n  const key = findKey(obj, f, thisObj);\n  return key && obj[key];\n}\n\n\/**\n * Whether the object\/map\/hash is empty.\n * @param {?Object} obj The object to test.\n * @return {boolean} true if obj is empty.\n *\/\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    return false;\n  }\n  return true;\n}\n\n\/**\n * Removes all key value pairs from the object\/map\/hash.\n * @param {?Object} obj The object to clear.\n * @return {void}\n *\/\nfunction clear(obj) {\n  for (const i in obj) {\n    delete obj[i];\n  }\n}\n\n\/**\n * Removes a key-value pair based on the key.\n * @param {?Object} obj The object from which to remove the key.\n * @param {?} key The key to remove.\n * @return {boolean} Whether an element was removed.\n *\/\nfunction remove(obj, key) {\n  let rv;\n  if (rv = key in \/** @type {!Object} *\/ (obj)) {\n    delete obj[key];\n  }\n  return rv;\n}\n\n\/**\n * Adds a key-value pair to the object. Throws an exception if the key is\n * already in use. Use set if you want to change an existing pair.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} val The value to add.\n * @return {void}\n * @template K,V\n *\/\nfunction add(obj, key, val) {\n  if (obj !== null && key in obj) {\n    throw new Error(`The object already contains the key \"${key}\"`);\n  }\n  set(obj, key, val);\n}\n\n\/**\n * Returns the value for the given key.\n * @param {?Object<K,V>} obj The object from which to get the value.\n * @param {string} key The key for which to get the value.\n * @param {R=} val The value to return if no item is found for the given key\n *     (default is undefined).\n * @return {V|R|undefined} The value for the given key.\n * @template K,V,R\n *\/\nfunction get(obj, key, val = undefined) {\n  if (obj !== null && key in obj) {\n    return obj[key];\n  }\n  return val;\n}\n\n\/**\n * Adds a key-value pair to the object\/map\/hash.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add.\n * @template K,V\n * @return {void}\n *\/\nfunction set(obj, key, value) {\n  obj[key] = value;\n}\n\n\/**\n * Adds a key-value pair to the object\/map\/hash if it doesn't exist yet.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n *\/\nfunction setIfUndefined(obj, key, value) {\n  return key in \/** @type {!Object} *\/ (obj) ? obj[key] : (obj[key] = value);\n}\n\n\/**\n * Sets a key and value to an object if the key is not set. The value will be\n * the return value of the given function. If the key already exists, the\n * object will not be changed and the function will not be called (the function\n * will be lazily evaluated -- only called if necessary).\n * This function is particularly useful when used with an `Object` which is\n * acting as a cache.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {function():V} f The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n *\/\nfunction setWithReturnValueIfNotSet(obj, key, f) {\n  if (key in obj) {\n    return obj[key];\n  }\n\n  const val = f();\n  obj[key] = val;\n  return val;\n}\n\n\/**\n * Compares two objects for equality using === on the values.\n * @param {!Object<K,V>} a\n * @param {!Object<K,V>} b\n * @return {boolean}\n * @template K,V\n *\/\nfunction equals(a, b) {\n  for (const k in a) {\n    if (!(k in b) || a[k] !== b[k]) {\n      return false;\n    }\n  }\n  for (const k in b) {\n    if (!(k in a)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\/**\n * Returns a shallow clone of the object.\n * @param {?Object<K,V>} obj Object to clone.\n * @return {!Object<K,V>} Clone of the input object.\n * @template K,V\n *\/\nfunction clone(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key];\n  }\n  return res;\n}\n\n\/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n * WARNINGS:\n * <code>unsafeClone<\/code> does not detect reference loops. Objects\n * that refer to themselves will cause infinite recursion.\n * <code>unsafeClone<\/code> is unaware of unique identifiers, and\n * copies UIDs created by <code>getUid<\/code> into cloned results.\n * @param {T} obj The value to clone.\n * @return {T} A clone of the input value.\n * @template T\n *\/\nfunction unsafeClone(obj) {\n  if (!obj || typeof obj !== 'object') return obj;\n  if (typeof obj.clone === 'function') return obj.clone();\n  if (typeof Map !== 'undefined' && obj instanceof Map) {\n    return new Map(obj);\n  } else if (typeof Set !== 'undefined' && obj instanceof Set) {\n    return new Set(obj);\n  }\n  const clone = Array.isArray(obj) ? [] :\n      typeof ArrayBuffer === 'function' &&\n          typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj) &&\n          !(obj instanceof DataView) ?\n                                     new obj.constructor(obj.length) :\n                                     {};\n  for (const key in obj) {\n    clone[key] = unsafeClone(obj[key]);\n  }\n  return clone;\n}\n\n\/**\n * Returns a new object in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n * @param {?Object} obj The object to transpose.\n * @return {!Object} The transposed object.\n *\/\nfunction transpose(obj) {\n  const transposed = {};\n  for (const key in obj) {\n    transposed[obj[key]] = key;\n  }\n  return transposed;\n}\n\n\/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n *\/\nconst PROTOTYPE_FIELDS = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf',\n];\n\n\/**\n * Extends an object with another object.\n * This operates 'in-place'; it does not create a new Object.\n * Example:\n * var o = {};\n * extend(o, {a: 0, b: 1});\n * o; \/\/ {a: 0, b: 1}\n * extend(o, {b: 2, c: 3});\n * o; \/\/ {a: 0, b: 2, c: 3}\n * @param {?Object} target The object to modify. Existing properties will be\n *     overwritten if they are also present in one of the objects in `var_args`.\n * @param {...(?Object|undefined)} var_args The objects from which values\n *     will be copied.\n * @return {void}\n * @deprecated Prefer Object.assign\n *\/\nfunction extend(target, var_args) {\n  let key;\n  let source;\n  for (let i = 1; i < arguments.length; i++) {\n    source = arguments[i];\n    for (key in source) {\n      target[key] = source[key];\n    }\n\n    \/\/ For IE the for-in-loop does not contain any properties that are not\n    \/\/ enumerable on the prototype object (for example isPrototypeOf from\n    \/\/ Object.prototype) and it will also not include 'replace' on objects that\n    \/\/ extend String and change 'replace' (not that it is common for anyone to\n    \/\/ extend anything except Object).\n\n    for (let j = 0; j < PROTOTYPE_FIELDS.length; j++) {\n      key = PROTOTYPE_FIELDS[j];\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n}\n\n\/**\n * Creates a new object built from the key-value pairs provided as arguments.\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise even arguments are used as\n *     the property names and odd arguments are used as the property values.\n * @return {!Object} The new object.\n * @throws {!Error} If there are uneven number of arguments or there is only one\n *     non array argument.\n *\/\nfunction create(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return create.apply(null, arguments[0]);\n  }\n\n  if (argLength % 2) {\n    throw new Error('Uneven number of arguments');\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i += 2) {\n    rv[arguments[i]] = arguments[i + 1];\n  }\n  return rv;\n}\n\n\/**\n * Creates a new object where the property names come from the arguments but\n * the value is always set to true\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise the arguments are used as\n *     the property names.\n * @return {!Object} The new object.\n *\/\nfunction createSet(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return createSet.apply(null, arguments[0]);\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i++) {\n    rv[arguments[i]] = true;\n  }\n  return rv;\n}\n\n\/**\n * Creates an immutable view of the underlying object, if the browser\n * supports immutable objects.\n * In default mode, writes to this view will fail silently. In strict mode,\n * they will throw an error.\n * @param {!Object<K,V>} obj An object.\n * @return {!Object<K,V>} An immutable view of that object, or the original\n *     object if this browser does not support immutables.\n * @template K,V\n *\/\nfunction createImmutableView(obj) {\n  let result = obj;\n  if (Object.isFrozen && !Object.isFrozen(obj)) {\n    result = Object.create(obj);\n    Object.freeze(result);\n  }\n  return result;\n}\n\n\/**\n * @param {!Object} obj An object.\n * @return {boolean} Whether this is an immutable view of the object.\n *\/\nfunction isImmutableView(obj) {\n  return !!Object.isFrozen && Object.isFrozen(obj);\n}\n\n\/**\n * Get all properties names on a given Object regardless of enumerability.\n * <p> If the browser does not support `Object.getOwnPropertyNames` nor\n * `Object.getPrototypeOf` then this is equivalent to using\n * `getKeys`\n * @param {?Object} obj The object to get the properties of.\n * @param {boolean=} includeObjectPrototype Whether properties defined on\n *     `Object.prototype` should be included in the result.\n * @param {boolean=} includeFunctionPrototype Whether properties defined on\n *     `Function.prototype` should be included in the result.\n * @return {!Array<string>}\n * @public\n *\/\nfunction getAllPropertyNames(\n    obj, includeObjectPrototype = undefined,\n    includeFunctionPrototype = undefined) {\n  if (!obj) {\n    return [];\n  }\n\n  \/\/ Naively use a for..in loop to get the property names if the browser doesn't\n  \/\/ support any other APIs for getting it.\n  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n    return getKeys(obj);\n  }\n\n  const visitedSet = {};\n\n  \/\/ Traverse the prototype chain and add all properties to the visited set.\n  let proto = obj;\n  while (proto && (proto !== Object.prototype || !!includeObjectPrototype) &&\n         (proto !== Function.prototype || !!includeFunctionPrototype)) {\n    const names = Object.getOwnPropertyNames(proto);\n    for (let i = 0; i < names.length; i++) {\n      visitedSet[names[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return getKeys(visitedSet);\n}\n\n\/**\n * Given a ES5 or ES6 class reference, return its super class \/ super\n * constructor.\n * This should be used in rare cases where you need to walk up the inheritance\n * tree (this is generally a bad idea). But this work with ES5 and ES6 classes,\n * unlike relying on the superClass_ property.\n * Note: To start walking up the hierarchy from an instance call this with its\n * `constructor` property; e.g. `getSuperClass(instance.constructor)`.\n * @param {function(new: ?)} constructor\n * @return {?Object}\n *\/\nfunction getSuperClass(constructor) {\n  const proto = Object.getPrototypeOf(constructor.prototype);\n  return proto && proto.constructor;\n}\n\nexports = {\n  add,\n  clear,\n  clone,\n  contains,\n  containsKey,\n  containsValue,\n  create,\n  createImmutableView,\n  createSet,\n  equals,\n  every,\n  extend,\n  filter,\n  findKey,\n  findValue,\n  forEach,\n  get,\n  getAllPropertyNames,\n  getAnyKey,\n  getAnyValue,\n  getCount,\n  getKeys,\n  getSuperClass,\n  getValueByKeys,\n  getValues,\n  isEmpty,\n  isImmutableView,\n  map,\n  remove,\n  set,\n  setIfUndefined,\n  setWithReturnValueIfNotSet,\n  some,\n  transpose,\n  unsafeClone,\n};\n","(ns rum.core\n  (:refer-clojure :exclude [ref deref])\n  (:require-macros rum.core)\n  (:require\n   [cljsjs.react]\n   [cljsjs.react.dom]\n   [goog.object :as gobj]\n   [goog.functions :as fns]\n   [clojure.set :as set]\n   [rum.specs]\n   [daiquiri.core]\n   [rum.cursor :as cursor]\n   [rum.util :as util :refer [collect collect* call-all]]\n   [rum.derived-atom :as derived-atom]))\n\n(defn state\n  \"Given React component, returns Rum state associated with it.\"\n  [^js\/React.Component comp]\n  (gobj\/get (.-state comp) \":rum\/state\"))\n\n(defn- extend! [obj props]\n  (doseq [[k v] props\n          :when (some? v)]\n    (gobj\/set obj (name k) (clj->js v))))\n\n(defn- build-class [render mixins display-name]\n  (when ^boolean goog.DEBUG\n    (let [mixins (->> mixins (mapcat keys) set)]\n      (assert (set\/subset? mixins rum.specs\/mixins)\n              (str display-name \" declares invalid mixin keys \"\n                   (set\/difference mixins rum.specs\/mixins) \", \"\n                   \"did you mean one of \" rum.specs\/mixins))\n      (->> (select-keys rum.specs\/deprecated-mixins mixins)\n           vals\n           (run! #(.warn js\/console %)))))\n  (let [init           (collect   :init mixins)             ;; state props -> state\n        before-render  (collect* [:will-mount\n                                  :unsafe\/will-mount\n                                  :before-render] mixins)   ;; state -> state\n        render         render                               ;; state -> [dom state]\n        wrap-render    (collect   :wrap-render mixins)      ;; render-fn -> render-fn\n        wrapped-render (reduce #(%2 %1) render wrap-render)\n        did-mount      (collect* [:did-mount                ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        will-remount    (collect* [:did-remount             ;; state -> state\n                                   :will-remount] mixins)   ;; old-state state -> state\n        should-update  (collect   :should-update mixins)    ;; old-state state -> boolean\n        before-update  (collect* [:will-update\n                                  :unsafe\/will-update\n                                  :before-render] mixins)   ;; state -> state\n        did-update     (collect* [:did-update               ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-catch      (collect   :did-catch mixins)        ;; state error info -> state\n        will-unmount   (collect   :will-unmount mixins)     ;; state -> state\n        child-context  (collect   :child-context mixins)    ;; state -> child-context\n        class-props    (reduce merge (collect :class-properties mixins))  ;; custom prototype properties and methods\n        static-props   (reduce merge (collect :static-properties mixins)) ;; custom static properties and methods\n\n        ctor           (fn [props]\n                         (this-as this\n                                  (gobj\/set this \"state\"\n                                            #js {\":rum\/state\"\n                                                 (-> (gobj\/get props \":rum\/initial-state\")\n                                                     (assoc :rum\/react-component this)\n                                                     (call-all init props)\n                                                     volatile!)})\n                                  (.call js\/React.Component this props)))\n        _              (goog\/inherits ctor js\/React.Component)\n        prototype      (gobj\/get ctor \"prototype\")]\n\n    (when-not (empty? before-render)\n      (gobj\/set prototype \"UNSAFE_componentWillMount\"\n                (fn []\n                  (this-as this\n                    (vswap! (state this) call-all before-render)))))\n\n    (when-not (empty? did-mount)\n      (gobj\/set prototype \"componentDidMount\"\n                (fn []\n                  (this-as this\n                           (vswap! (state this) call-all did-mount)))))\n\n    (gobj\/set prototype \"UNSAFE_componentWillReceiveProps\"\n              (fn [next-props]\n                (this-as this\n                         (let [old-state  @(state this)\n                               state      (merge old-state\n                                                 (gobj\/get next-props \":rum\/initial-state\"))\n                               next-state (reduce #(%2 old-state %1) state will-remount)]\n            ;; allocate new volatile so that we can access both old and new states in shouldComponentUpdate\n                           (.setState ^js\/React.Component this #js {\":rum\/state\" (volatile! next-state)})))))\n\n    (when-not (empty? should-update)\n      (gobj\/set prototype \"shouldComponentUpdate\"\n                (fn [next-props next-state]\n                  (this-as this\n                           (let [old-state @(state this)\n                                 new-state @(gobj\/get next-state \":rum\/state\")]\n                             (or (some #(% old-state new-state) should-update) false))))))\n\n    (when-not (empty? before-update)\n      (gobj\/set prototype \"UNSAFE_componentWillUpdate\"\n                (fn [_ next-state]\n                  (this-as this\n                    (let [new-state (gobj\/get next-state \":rum\/state\")]\n                      (vswap! new-state call-all before-update))))))\n\n    (gobj\/set prototype \"render\"\n              (fn []\n                (this-as this\n                         (let [state (state this)\n                               [dom next-state] (wrapped-render @state)]\n                           (vreset! state next-state)\n                           dom))))\n\n    (when-not (empty? did-update)\n      (gobj\/set prototype \"componentDidUpdate\"\n                (fn [_ _]\n                  (this-as this\n                           (vswap! (state this) call-all did-update)))))\n\n    (when-not (empty? did-catch)\n      (gobj\/set prototype \"componentDidCatch\"\n                (fn [error info]\n                  (this-as this\n                           (vswap! (state this) call-all did-catch error {:rum\/component-stack (gobj\/get info \"componentStack\")})\n                           (.forceUpdate ^js\/React.Component this)))))\n\n    (gobj\/set prototype \"componentWillUnmount\"\n              (fn []\n                (this-as this\n                         (when-not (empty? will-unmount)\n                           (vswap! (state this) call-all will-unmount))\n                         (gobj\/set this \":rum\/unmounted?\" true))))\n\n    (when-not (empty? child-context)\n      (gobj\/set prototype \"getChildContext\"\n                (fn []\n                  (this-as this\n                           (let [state @(state this)]\n                             (clj->js (transduce (map #(% state)) merge {} child-context)))))))\n\n    (extend! prototype class-props)\n    (gobj\/set ctor \"displayName\" display-name)\n    (extend! ctor static-props)\n    ctor))\n\n(defn- set-meta! [c]\n  (let [f #(let [^js ctr (c)]\n             (.apply ctr ctr (js-arguments)))]\n    (specify! f IMeta (-meta [_] (meta (c))))\n    f))\n\n(defn lazy-build\n  \"Wraps component construction in a way so that Google Closure Compiler\n   can properly recognize and elide unused components. The extra `set-meta`\n   fn is needed so that the compiler can properly detect that all functions\n   are side effect free.\"\n  [ctor render mixins display-name]\n  (let [bf #(ctor render mixins display-name) ;; Avoid IIFE\n        c  (fns\/cacheReturnValue bf)]\n    (set-meta! c)))\n\n(defn- build-ctor [render mixins display-name]\n  (let [class  (build-class render mixins display-name)\n        key-fn (first (collect :key-fn mixins))\n        ctor   (if (some? key-fn)\n                 (fn [& args]\n                   (let [props #js {\":rum\/initial-state\" {:rum\/args args}\n                                    \"key\" (apply key-fn args)}]\n                     (js\/React.createElement class props)))\n                 (fn [& args]\n                   (let [props #js {\":rum\/initial-state\" {:rum\/args args}}]\n                     (js\/React.createElement class props))))]\n    (with-meta ctor {:rum\/class class})))\n\n(declare static)\n\n(defn- memo-compare-props [prev-props next-props]\n  (= (aget prev-props \":rum\/args\")\n     (aget next-props \":rum\/args\")))\n\n(defn react-memo [f]\n  (if-some [memo (.-memo js\/React)]\n    (memo f memo-compare-props)\n    f))\n\n(defn ^:no-doc build-defc [render-body mixins display-name]\n  (cond\n    (= mixins [static])\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum\/args\")))\n          _     (aset class \"displayName\" display-name)\n          memo-class (react-memo class)\n          ctor  (fn [& args]\n                  (.createElement js\/React memo-class #js {\":rum\/args\" args}))]\n      (with-meta ctor {:rum\/class memo-class}))\n\n    (empty? mixins)\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum\/args\")))\n          _     (aset class \"displayName\" display-name)\n          ctor  (fn [& args]\n                  (.createElement js\/React class #js {\":rum\/args\" args}))]\n      (with-meta ctor {:rum\/class class}))\n\n    :else\n    (let [render (fn [state] [(apply render-body (:rum\/args state)) state])]\n      (build-ctor render mixins display-name))))\n\n(defn ^:no-doc build-defcs [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body state (:rum\/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n(defn ^:no-doc build-defcc [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body (:rum\/react-component state) (:rum\/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n;; render queue\n\n\n(def ^:private schedule\n  (or (and (exists? js\/window)\n           (or js\/window.requestAnimationFrame\n               js\/window.webkitRequestAnimationFrame\n               js\/window.mozRequestAnimationFrame\n               js\/window.msRequestAnimationFrame))\n      #(js\/setTimeout % 16)))\n\n(def ^:private batch\n  (or (when (exists? js\/ReactNative) js\/ReactNative.unstable_batchedUpdates)\n      (when (exists? js\/ReactDOM) js\/ReactDOM.unstable_batchedUpdates)\n      (fn [f a] (f a))))\n\n(def ^:private empty-queue [])\n(def ^:private render-queue (volatile! empty-queue))\n\n(defn- render-one [comp]\n  (when (and (some? comp) (not (gobj\/get comp \":rum\/unmounted?\")))\n    (.forceUpdate comp)))\n\n(defn- render-all [queue]\n  (run! render-one queue))\n\n(defn- render []\n  (let [queue @render-queue]\n    (vreset! render-queue empty-queue)\n    (batch render-all queue)))\n\n(def ^:private sync-update? (volatile! false))\n\n(defn request-render\n  \"Schedules react component to be rendered on next animation frame,\n  unless the requested update happens to be in a sync-update phase.\"\n  [component]\n  (if @sync-update?\n    (render-one component)\n    (do\n      (when (empty? @render-queue)\n        (schedule render))\n      (vswap! render-queue conj component))))\n\n;; exporting to work around circular deps\n(defn ^:export mark-sync-update [f]\n  (if (fn? f)\n    (fn wrapped-handler [e]\n      (let [_ (vreset! sync-update? true)\n            ret (f e)\n            _ (vreset! sync-update? false)]\n        ret))\n    f))\n\n(defn mount\n  \"Add element to the DOM tree. Idempotent. Subsequent mounts will just update element.\"\n  [element node]\n  (js\/ReactDOM.render element node)\n  nil)\n\n(defn unmount\n  \"Removes component from the DOM tree.\"\n  [node]\n  (js\/ReactDOM.unmountComponentAtNode node))\n\n(defn hydrate\n  \"Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]].\"\n  [element node]\n  (js\/ReactDOM.hydrate element node))\n\n(defn portal\n  \"Render `element` in a DOM `node` that is ouside of current DOM hierarchy.\"\n  [element node]\n  (js\/ReactDOM.createPortal element node))\n\n(defn create-context [default-value]\n  (.createContext js\/React default-value))\n\n\n;; initialization\n\n\n(defn with-key\n  \"Adds React key to element.\n\n   ```\n   (rum\/defc label [text] [:div text])\n\n   (-> (label)\n       (rum\/with-key \\\"abc\\\")\n       (rum\/mount js\/document.body))\n   ```\"\n  [element key]\n  (js\/React.cloneElement element #js {\"key\" key} nil))\n\n(defn with-ref\n  \"Adds React ref (string or callback) to element.\n\n   ```\n   (rum\/defc label [text] [:div text])\n\n   (-> (label)\n       (rum\/with-ref \\\"abc\\\")\n       (rum\/mount js\/document.body))\n   ```\"\n  [element ref]\n  (js\/React.cloneElement element #js {\"ref\" ref} nil))\n\n(defn dom-node\n  \"Usage of this function is discouraged. Use :ref callback instead.\n  Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can\u2019t be called during render.\"\n  [state]\n  (js\/ReactDOM.findDOMNode (:rum\/react-component state)))\n\n(defn ref\n  \"DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns React component.\"\n  [state key]\n  (-> state :rum\/react-component (aget \"refs\") (aget (name key))))\n\n(defn ref-node\n  \"DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns DOM node associated with ref.\"\n  [state key]\n  (js\/ReactDOM.findDOMNode (ref state (name key))))\n\n\n;; static mixin\n\n\n(def static\n  \"Mixin. Will avoid re-render if none of component\u2019s arguments have changed. Does equality check (`=`) on all arguments.\n\n   ```\n   (rum\/defc label < rum\/static\n     [text]\n     [:div text])\n\n   (rum\/mount (label \\\"abc\\\") js\/document.body)\n\n   ;; def != abc, will re-render\n   (rum\/mount (label \\\"def\\\") js\/document.body)\n\n   ;; def == def, won\u2019t re-render\n   (rum\/mount (label \\\"def\\\") js\/document.body)\n   ```\"\n  {:should-update\n   (fn [old-state new-state]\n     (not= (:rum\/args old-state) (:rum\/args new-state)))})\n\n\n;; local mixin\n\n\n(defn local\n  \"Mixin constructor. Adds an atom to component\u2019s state that can be used to keep stuff during component\u2019s lifecycle. Component will be re-rendered if atom\u2019s value changes. Atom is stored under user-provided key or under `:rum\/local` by default.\n\n   ```\n   (rum\/defcs counter < (rum\/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n\n   (rum\/mount (counter \\\"Click count: \\\"))\n   ```\"\n  ([initial] (local initial :rum\/local))\n  ([initial key]\n   {:will-mount\n    (fn [state]\n      (let [local-state (atom initial)\n            ^js\/React.Component component (:rum\/react-component state)]\n        (add-watch local-state key\n                   (fn [_ _ p n]\n                     (when (not= p n)\n                       (request-render component))))\n        (assoc state key local-state)))}))\n\n\n;; reactive mixin\n\n\n(def ^:private ^:dynamic *reactions*)\n\n(def reactive\n  \"Mixin. Works in conjunction with [[react]].\n\n   ```\n   (rum\/defc comp < rum\/reactive\n     [*counter]\n     [:div (rum\/react counter)])\n\n   (def *counter (atom 0))\n   (rum\/mount (comp *counter) js\/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```\"\n  {:init\n   (fn [state props]\n     (assoc state :rum.reactive\/key (random-uuid)))\n   :wrap-render\n   (fn [render-fn]\n     (fn [state]\n       (binding [*reactions* (volatile! #{})]\n         (let [comp             (:rum\/react-component state)\n               old-reactions    (:rum.reactive\/refs state #{})\n               [dom next-state] (render-fn state)\n               new-reactions    @*reactions*\n               key              (:rum.reactive\/key state)]\n           (doseq [ref old-reactions]\n             (when-not (contains? new-reactions ref)\n               (remove-watch ref key)))\n           (doseq [ref new-reactions]\n             (when-not (contains? old-reactions ref)\n               (add-watch ref key\n                          (fn [_ _ p n]\n                            (when (not= p n)\n                              (request-render comp))))))\n           [dom (assoc next-state :rum.reactive\/refs new-reactions)]))))\n   :will-unmount\n   (fn [state]\n     (let [key (:rum.reactive\/key state)]\n       (doseq [ref (:rum.reactive\/refs state)]\n         (remove-watch ref key)))\n     (dissoc state :rum.reactive\/refs :rum.reactive\/key))})\n\n(defn react\n  \"Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom.\"\n  [ref]\n  (assert *reactions* \"rum.core\/react is only supported in conjunction with rum.core\/reactive\")\n  (vswap! *reactions* conj ref)\n  @ref)\n\n\n;; derived-atom\n\n\n(def ^{:style\/indent 2\n       :arglists '([refs key f] [refs key f opts])\n       :doc \"Use this to create \u201cchains\u201d and acyclic graphs of dependent atoms.\n\n             [[derived-atom]] will:\n\n             - Take N \u201csource\u201d refs.\n             - Set up a watch on each of them.\n             - Create \u201csink\u201d atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \\\":\\\" b))))\n\n             (type *x)  ;; => clojure.lang.Atom\n             (deref *x) ;; => \\\"0:1\\\"\n\n             (swap! *a inc)\n             (deref *x) ;; => \\\"1:1\\\"\n\n             (reset! *b 7)\n             (deref *x) ;; => \\\"1:7\\\"\n             ```\n\n             Arguments:\n\n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core\/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won\u2019t be called. Set to `false` if checking for equality can be expensive.\"}\n  derived-atom derived-atom\/derived-atom)\n\n\n;; cursors\n\n\n(defn cursor-in\n  \"Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n\n   ```\n   (def db (atom { :users { \\\"Ivan\\\" { :age 30 }}}))\n\n   (def ivan (rum\/cursor db [:users \\\"Ivan\\\"]))\n   (deref ivan) ;; => { :age 30 }\n\n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \\\"Ivan\\\" { :age 31 }}}\n\n   (swap! db update-in [:users \\\"Ivan\\\" :age] inc)\n   ;; => { :users { \\\"Ivan\\\" { :age 32 }}}\n\n   (deref ivan) ;; => { :age 32 }\n   ```\n\n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n\n   The only supported option is `:meta`\"\n  [ref path & {:as options}]\n  (if (instance? cursor\/Cursor ref)\n    (cursor\/Cursor. (.-ref ref) (into (.-path ref) path) (:meta options))\n    (cursor\/Cursor. ref path (:meta options))))\n\n(defn cursor\n  \"Same as [[cursor-in]] but accepts single key instead of path vector.\"\n  [ref key & options]\n  (apply cursor-in ref [key] options))\n\n;; hooks\n\n(defn ^array use-state\n  \"Takes initial value or value returning fn and returns a tuple of [value set-value!],\n  where `value` is current state value and `set-value!` is a function that schedules re-render.\n\n  (let [[value set-state!] (rum\/use-state 0)]\n    [:button {:on-click #(set-state! (inc value))}\n      value])\"\n  [value-or-fn]\n  (.useState js\/React value-or-fn))\n\n(defn ^array use-reducer\n  \"Takes reducing function and initial state value.\n  Returns a tuple of [value dispatch!], where `value` is current state value and `dispatch` is a function that schedules re-render.\n\n  (defmulti value-reducer (fn [value event] event))\n\n  (defmethod value-reducer :inc [value _]\n    (inc value))\n\n  (let [[value dispatch!] (rum\/use-reducer value-reducer 0)]\n    [:button {:on-click #(dispatch! :inc)}\n      value])\n\n  Read more at https:\/\/reactjs.org\/docs\/hooks-reference.html#usereducer\"\n  ([reducer-fn initial-value]\n   (.useReducer js\/React #(reducer-fn %1 %2) initial-value identity)))\n\n(defn use-effect!\n  \"Takes setup-fn that executes either on the first render or after every update.\n  The function may return cleanup-fn to cleanup the effect, either before unmount or before every next update.\n  Calling behavior is controlled by deps argument.\n\n  (rum\/use-effect!\n    (fn []\n      (.addEventListener js\/window \\\"load\\\" handler)\n      #(.removeEventListener js\/window \\\"load\\\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https:\/\/reactjs.org\/docs\/hooks-effect.html\"\n  ([setup-fn]\n   (.useEffect js\/React #(or (setup-fn) js\/undefined)))\n  ([setup-fn deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useEffect js\/React #(or (setup-fn) js\/undefined)))))\n\n(defn use-layout-effect!\n  \"(rum\/use-layout-effect!\n    (fn []\n      (.addEventListener js\/window \\\"load\\\" handler)\n      #(.removeEventListener js\/window \\\"load\\\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https:\/\/reactjs.org\/docs\/hooks-effect.html\"\n  ([setup-fn]\n   (.useLayoutEffect js\/React #(or (setup-fn) js\/undefined)))\n  ([setup-fn deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useLayoutEffect js\/React #(or (setup-fn) js\/undefined)))))\n\n(defn use-callback\n  \"Takes callback function and returns memoized variant, memoization is done based on provided deps collection.\n\n  (rum\/defc button < rum\/static\n    [{:keys [on-click]} text]\n    [:button {:on-click on-click}\n      text])\n\n  (rum\/defc app [v]\n    (let [on-click (rum\/use-callback #(do-stuff v) [v])]\n      ;; because on-click callback is memoized here based on v argument\n      ;; the callback won't be re-created on every render, unless v changes\n      ;; which means that underlying `button` component won't re-render wastefully\n      [button {:on-click on-click}\n        \\\"press me\\\"]))\n\n  Read more at https:\/\/reactjs.org\/docs\/hooks-reference.html#usecallback\"\n  ([callback]\n   (.useCallback js\/React callback))\n  ([callback deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useCallback js\/React callback))))\n\n(defn use-memo\n  \"Takes a function, memoizes it based on provided deps collection and executes immediately returning a result.\n  Read more at https:\/\/reactjs.org\/docs\/hooks-reference.html#usememo\"\n  ([f]\n   (.useMemo js\/React f))\n  ([f deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useMemo js\/React f))))\n\n(defn use-ref\n  \"Takes a value and puts it into a mutable container which is persisted for the full lifetime of the component.\n  https:\/\/reactjs.org\/docs\/hooks-reference.html#useref\"\n  ([initial-value]\n   (.useRef js\/React initial-value)))\n\n;; Refs\n\n(defn create-ref []\n  (.createRef js\/React))\n\n(defn deref\n  \"Takes a ref returned from use-ref and returns its current value.\"\n  [^js ref]\n  (.-current ref))\n\n(defn set-ref! [^js ref value]\n  (set! (.-current ref) value))\n\n;;; Server-side rendering\n\n;; Roman. For Node.js runtime we require \"react-dom\/server\" for you\n;; In the browser you have to add cljsjs\/react-dom-server yourself\n\n(defn render-html\n  \"Main server-side rendering method. Given component, returns HTML string with static markup of that component.\n  Serve that string to the browser and [[hydrate]] same Rum component over it. React will be able to reuse already existing DOM and will initialize much faster.\n  No opts are supported at the moment.\"\n  ([element]\n   (render-html element nil))\n  ([element opts]\n   (if-not (identical? *target* \"nodejs\")\n     (.renderToString js\/ReactDOMServer element)\n     (let [^js\/ReactDOMServer react-dom-server (js\/require \"react-dom\/server\")]\n       (.renderToString react-dom-server element)))))\n\n(defn render-static-markup\n  \"Same as [[render-html]] but returned string has nothing React-specific.\n  This allows Rum to be used as traditional server-side templating engine.\"\n  [src]\n  (if-not (identical? *target* \"nodejs\")\n    (.renderToStaticMarkup js\/ReactDOMServer src)\n    (let [^js\/ReactDOMServer react-dom-server (js\/require \"react-dom\/server\")]\n      (.renderToStaticMarkup react-dom-server src))))\n\n;; JS components adapter\n(defn adapt-class-helper [type attrs children]\n  (let [args (.concat #js [type attrs] children)]\n    (.apply (.-createElement js\/React) js\/React args)))\n"],"names":["frontend.handler.draw\/load-excalidraw-file","file","ok-handler","frontend.handler.draw.load_excalidraw_file","temp__5804__auto__","frontend.state\/get-current-repo","cljs.core.truth_","frontend.util.p_handle","frontend.handler.file\/load-file","content","error","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs$core$IFn$_invoke$arity$variadic","cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2","frontend.extensions.excalidraw\/update-draw-content-width","state","frontend.extensions.excalidraw.update_draw_content_width","rum.core\/dom-node","el","querySelector","el_103524__$1","classList","contains","client-width","width","cljs.core\/reset!","cljs$core$IFn$_invoke$arity$1","cljs.core.Keyword","rum.core.local","beforeLoadModuleCode","id","module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min","shadow.js.require","frontend.extensions.excalidraw.excalidraw","frontend.extensions.excalidraw.draw_inner","frontend.extensions.excalidraw.draw_container","frontend.extensions.excalidraw","frontend.rum.adapt_class.cljs$core$IFn$_invoke$arity$2","js\/module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min.Excalidraw","rum.core\/lazy-build","rum.core\/build-defcs","frontend.extensions.excalidraw\/draw-inner","data","option","ref","rum.core\/create-ref","*draw-width","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs$core$IFn$_invoke$arity$2","*zen-mode?","*view-mode?","*grid-mode?","wide-mode?","frontend.state.sub","*elements","map__103504","cljs.core\/--destructure-map","cljs.core.get","daiquiri.core\/create-element","onMouseDown","e","frontend.util\/stop","frontend.handler.ui.toggle_wide_mode_BANG_","frontend.handler.ui\/toggle-wide-mode!","frontend.util.format.cljs$core$IFn$_invoke$arity$variadic","frontend.util.format","wide_mode_QMARK_","cljs.core.swap_BANG_","cljs.core\/not","daiquiri.interpreter\/interpret","cljs.core\/-deref","G__103507","cljs.core.PersistentVector","cljs.core.PersistentVector.EMPTY_NODE","block-uuid","frontend.db\/pull","frontend.handler.editor.property.edit_block_BANG_.cljs$core$IFn$_invoke$arity$3","frontend.handler.editor\/edit-block!","frontend.handler.editor.property\/edit-block!","block","frontend.state.set_state_BANG_","value","frontend.state\/set-block-component-editing-mode!","onBlur","cljs.core\/deref","G__103509","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.PersistentArrayMap","elements","app-state","or__5043__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","get","app_state","elements->clj","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","cljs.core\/seq","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","elements__GT_clj","frontend.handler.draw\/save-excalidraw!","js\/module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min.serializeAsJSON","ui_theme","frontend.state\/sub","frontend.extensions.excalidraw.excalidraw.cljs$core$IFn$_invoke$arity$1","rum.core.reactive","rum.core.local.cljs$core$IFn$_invoke$arity$2","js\/ResizeObserver","goog.functions.debounce","goog.functions\/debounce","o","frontend.ui\/main-node","frontend.extensions.excalidraw\/draw-container","*data","*loading?","loading?","rum.core\/react","db-restoring?","attrs103510","frontend.ui.loading","cljs.core\/map?","daiquiri.interpreter\/element-attributes","daiquiri.normalize.merge_with_class","loading_QMARK_","vec__103512","cljs.core.nth","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","clojure.string\/blank?","js\/JSON.parse","text","e103501","js\/console.dir","frontend.handler.notification.show_BANG_","frontend.util\/format","cljs.core.reset_BANG_","_STAR_loading_QMARK_","cljs.core.assoc","frontend.extensions.excalidraw.draw","frontend.extensions.excalidraw\/draw","repo","granted?","frontend.config.local_db_QMARK_","frontend.util\/electron?","frontend.mobile.util\/native-platform?","mm","setLoaded"]}}]}